diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -41,42 +41,42 @@
     private final List<Comment> comments;
     private final List<Review> allReviews;
     private final List<Review> activeReviews;
     private final Set<String> labels;
     private final CensusInstance censusInstance;
-    private final Map<String, String> blockingLabels;
-    private final IssueProject issueProject;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
     private final String progressMarker = "<!-- Anything below this marker will be automatically updated, please do not edit manually! -->";
     private final String mergeReadyMarker = "<!-- PullRequestBot merge is ready comment -->";
     private final Pattern mergeSourcePattern = Pattern.compile("^Merge ([-/\\w]+):([-\\w]+$)");
     private final Set<String> newLabels;
 
     private CheckRun(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
                      List<Review> allReviews, List<Review> activeReviews, Set<String> labels,
-                     CensusInstance censusInstance, Map<String, String> blockingLabels, IssueProject issueProject) {
+                     CensusInstance censusInstance) {
         this.workItem = workItem;
         this.pr = pr;
         this.prInstance = prInstance;
         this.comments = comments;
         this.allReviews = allReviews;
         this.activeReviews = activeReviews;
         this.labels = new HashSet<>(labels);
         this.newLabels = new HashSet<>(labels);
         this.censusInstance = censusInstance;
-        this.blockingLabels = blockingLabels;
-        this.issueProject = issueProject;
     }
 
     static void execute(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
-                        List<Review> allReviews, List<Review> activeReviews, Set<String> labels, CensusInstance censusInstance, Map<String, String> blockingLabels,
-                        IssueProject issueProject) {
-        var run = new CheckRun(workItem, pr, prInstance, comments, allReviews, activeReviews, labels, censusInstance, blockingLabels, issueProject);
+                        List<Review> allReviews, List<Review> activeReviews, Set<String> labels, CensusInstance censusInstance) {
+        var run = new CheckRun(workItem, pr, prInstance, comments, allReviews, activeReviews, labels, censusInstance);
         run.checkStatus();
     }
 
+    private boolean checkTargetBranch() {
+        var matcher = workItem.bot.allowedTargetBranches().matcher(pr.targetRef());
+        return matcher.matches();
+    }
+
     // For unknown contributors, check that all commits have the same name and email
     private boolean checkCommitAuthor(List<Commit> commits) throws IOException {
         var author = censusInstance.namespace().get(pr.author().id());
         if (author != null) {
             return true;
@@ -112,10 +112,17 @@
 
     // Additional bot-specific checks that are not handled by JCheck
     private List<String> botSpecificChecks() throws IOException {
         var ret = new ArrayList<String>();
 
+        if (!checkTargetBranch()) {
+            var error = "The target branch of this PR does not match the allowed set of branches that can be targeted. " +
+                    "The following restriction is currently in place: `" + workItem.bot.allowedTargetBranches().pattern() +
+                    "`. Please select a different target branch for this PR.";
+            ret.add(error);
+        }
+
         var baseHash = prInstance.baseHash();
         var headHash = pr.headHash();
         var commits = prInstance.localRepo().commits(baseHash + ".." + headHash).asList();
 
         if (!checkCommitAuthor(commits)) {
@@ -158,11 +165,11 @@
                             "Merge `project`:`branch` to allow verification of the merge contents.");
                 }
             }
         }
 
-        for (var blocker : blockingLabels.entrySet()) {
+        for (var blocker : workItem.bot.blockingLabels().entrySet()) {
             if (labels.contains(blocker.getKey())) {
                 ret.add(blocker.getValue());
             }
         }
 
@@ -261,10 +268,11 @@
         var progressBody = new StringBuilder();
         progressBody.append("## Progress\n");
         progressBody.append(getChecksList(visitor));
 
         var issue = Issue.fromString(pr.title());
+        var issueProject = workItem.bot.issueProject();
         if (issueProject != null && issue.isPresent()) {
             var allIssues = new ArrayList<Issue>();
             allIssues.add(issue.get());
             allIssues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), comments));
             progressBody.append("\n\n## Issue");
