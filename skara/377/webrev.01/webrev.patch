diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -23,17 +23,17 @@
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.*;
-import org.openjdk.skara.vcs.Commit;
+import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.Issue;
 
 import java.io.*;
 import java.util.*;
 import java.util.logging.Logger;
-import java.util.regex.Pattern;
+import java.util.regex.*;
 import java.util.stream.*;
 
 class CheckRun {
     private final CheckWorkItem workItem;
     private final PullRequest pr;
@@ -41,42 +41,52 @@
     private final List<Comment> comments;
     private final List<Review> allReviews;
     private final List<Review> activeReviews;
     private final Set<String> labels;
     private final CensusInstance censusInstance;
-    private final Map<String, String> blockingLabels;
-    private final IssueProject issueProject;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
     private final String progressMarker = "<!-- Anything below this marker will be automatically updated, please do not edit manually! -->";
     private final String mergeReadyMarker = "<!-- PullRequestBot merge is ready comment -->";
     private final Pattern mergeSourcePattern = Pattern.compile("^Merge ([-/\\w]+):([-\\w]+$)");
     private final Set<String> newLabels;
 
     private CheckRun(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
                      List<Review> allReviews, List<Review> activeReviews, Set<String> labels,
-                     CensusInstance censusInstance, Map<String, String> blockingLabels, IssueProject issueProject) {
+                     CensusInstance censusInstance) {
         this.workItem = workItem;
         this.pr = pr;
         this.prInstance = prInstance;
         this.comments = comments;
         this.allReviews = allReviews;
         this.activeReviews = activeReviews;
         this.labels = new HashSet<>(labels);
         this.newLabels = new HashSet<>(labels);
         this.censusInstance = censusInstance;
-        this.blockingLabels = blockingLabels;
-        this.issueProject = issueProject;
     }
 
     static void execute(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
-                        List<Review> allReviews, List<Review> activeReviews, Set<String> labels, CensusInstance censusInstance, Map<String, String> blockingLabels,
-                        IssueProject issueProject) {
-        var run = new CheckRun(workItem, pr, prInstance, comments, allReviews, activeReviews, labels, censusInstance, blockingLabels, issueProject);
+                        List<Review> allReviews, List<Review> activeReviews, Set<String> labels, CensusInstance censusInstance) {
+        var run = new CheckRun(workItem, pr, prInstance, comments, allReviews, activeReviews, labels, censusInstance);
         run.checkStatus();
     }
 
+    private boolean checkTargetBranch() {
+        var matcher = workItem.bot.allowedTargetBranches().matcher(pr.targetRef());
+        return matcher.matches();
+    }
+
+    private List<String> allowedTargetBranches() {
+        var remoteBranches = prInstance.remoteBranches().stream()
+                                       .map(Reference::name)
+                                       .map(name -> workItem.bot.allowedTargetBranches().matcher(name))
+                                       .filter(Matcher::matches)
+                                       .map(Matcher::group)
+                                       .collect(Collectors.toList());
+        return remoteBranches;
+    }
+
     // For unknown contributors, check that all commits have the same name and email
     private boolean checkCommitAuthor(List<Commit> commits) throws IOException {
         var author = censusInstance.namespace().get(pr.author().id());
         if (author != null) {
             return true;
@@ -112,10 +122,18 @@
 
     // Additional bot-specific checks that are not handled by JCheck
     private List<String> botSpecificChecks() throws IOException {
         var ret = new ArrayList<String>();
 
+        if (!checkTargetBranch()) {
+            var error = "The branch `" + pr.targetRef() + "` is not allowed as target branch. The allowed target branches are:\n" +
+                    allowedTargetBranches().stream()
+                    .map(name -> "   - " + name)
+                    .collect(Collectors.joining("\n"));
+            ret.add(error);
+        }
+
         var baseHash = prInstance.baseHash();
         var headHash = pr.headHash();
         var commits = prInstance.localRepo().commits(baseHash + ".." + headHash).asList();
 
         if (!checkCommitAuthor(commits)) {
@@ -158,11 +176,11 @@
                             "Merge `project`:`branch` to allow verification of the merge contents.");
                 }
             }
         }
 
-        for (var blocker : blockingLabels.entrySet()) {
+        for (var blocker : workItem.bot.blockingLabels().entrySet()) {
             if (labels.contains(blocker.getKey())) {
                 ret.add(blocker.getValue());
             }
         }
 
@@ -261,10 +279,11 @@
         var progressBody = new StringBuilder();
         progressBody.append("## Progress\n");
         progressBody.append(getChecksList(visitor));
 
         var issue = Issue.fromString(pr.title());
+        var issueProject = workItem.bot.issueProject();
         if (issueProject != null && issue.isPresent()) {
             var allIssues = new ArrayList<Issue>();
             allIssues.add(issue.get());
             allIssues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), comments));
             progressBody.append("\n\n## Issue");
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
@@ -147,12 +147,11 @@
                 return;
             }
 
             try {
                 var prInstance = new PullRequestInstance(scratchPath.resolve("pr"), pr, bot.ignoreStaleReviews());
-                CheckRun.execute(this, pr, prInstance, comments, allReviews, activeReviews, labels, census,
-                                 bot.blockingLabels(), bot.issueProject());
+                CheckRun.execute(this, pr, prInstance, comments, allReviews, activeReviews, labels, census);
             } catch (IOException e) {
                 throw new UncheckedIOException(e);
             }
         }
     }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
@@ -42,28 +42,31 @@
     private final Map<String, String> blockingLabels;
     private final Set<String> readyLabels;
     private final Map<String, Pattern> readyComments;
     private final IssueProject issueProject;
     private final boolean ignoreStaleReviews;
+    private final Pattern allowedTargetBranches;
     private final ConcurrentMap<Hash, Boolean> currentLabels;
     private final PullRequestUpdateCache updateCache;
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
     PullRequestBot(HostedRepository repo, HostedRepository censusRepo, String censusRef,
                    Map<String, List<Pattern>> labelPatterns, Map<String, String> externalCommands,
                    Map<String, String> blockingLabels, Set<String> readyLabels,
-                   Map<String, Pattern> readyComments, IssueProject issueProject, boolean ignoreStaleReviews) {
+                   Map<String, Pattern> readyComments, IssueProject issueProject, boolean ignoreStaleReviews,
+                   Pattern allowedTargetBranches) {
         remoteRepo = repo;
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
         this.labelPatterns = labelPatterns;
         this.externalCommands = externalCommands;
         this.blockingLabels = blockingLabels;
         this.readyLabels = readyLabels;
         this.issueProject = issueProject;
         this.readyComments = readyComments;
         this.ignoreStaleReviews = ignoreStaleReviews;
+        this.allowedTargetBranches = allowedTargetBranches;
 
         this.currentLabels = new ConcurrentHashMap<>();
         this.updateCache = new PullRequestUpdateCache();
     }
 
@@ -171,6 +174,10 @@
     }
 
     boolean ignoreStaleReviews() {
         return ignoreStaleReviews;
     }
+
+    Pattern allowedTargetBranches() {
+        return allowedTargetBranches;
+    }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotBuilder.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotBuilder.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotBuilder.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotBuilder.java
@@ -37,10 +37,11 @@
     private Map<String, String> blockingLabels = Map.of();
     private Set<String> readyLabels = Set.of();
     private Map<String, Pattern> readyComments = Map.of();
     private IssueProject issueProject = null;
     private boolean ignoreStaleReviews = false;
+    private Pattern allowedTargetBranches = Pattern.compile(".*");
 
     PullRequestBotBuilder() {
     }
 
     public PullRequestBotBuilder repo(HostedRepository repo) {
@@ -91,9 +92,15 @@
     public PullRequestBotBuilder ignoreStaleReviews(boolean ignoreStaleReviews) {
         this.ignoreStaleReviews = ignoreStaleReviews;
         return this;
     }
 
+    public PullRequestBotBuilder allowedTargetBranches(String allowedTargetBranches) {
+        this.allowedTargetBranches = Pattern.compile(allowedTargetBranches);
+        return this;
+    }
+
     public PullRequestBot build() {
-        return new PullRequestBot(repo, censusRepo, censusRef, labelPatterns, externalCommands, blockingLabels, readyLabels, readyComments, issueProject, ignoreStaleReviews);
+        return new PullRequestBot(repo, censusRepo, censusRef, labelPatterns, externalCommands, blockingLabels,
+                                  readyLabels, readyComments, issueProject, ignoreStaleReviews, allowedTargetBranches);
     }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
@@ -64,37 +64,41 @@
 
         for (var repo : specific.get("repositories").fields()) {
             var censusRepo = configuration.repository(repo.value().get("census").asString());
             var censusRef = configuration.repositoryRef(repo.value().get("census").asString());
 
-            var labelPatterns = new HashMap<String, List<Pattern>>();
+            var botBuilder = PullRequestBot.newBuilder()
+                                           .repo(configuration.repository(repo.name()))
+                                           .censusRepo(censusRepo)
+                                           .censusRef(censusRef)
+                                           .blockingLabels(blockers)
+                                           .readyLabels(readyLabels)
+                                           .readyComments(readyComments)
+                                           .externalCommands(external);
+
             if (repo.value().contains("labels")) {
+                var labelPatterns = new HashMap<String, List<Pattern>>();
                 for (var label : repo.value().get("labels").fields()) {
                     var patterns = label.value().stream()
                                         .map(JSONValue::asString)
                                         .map(Pattern::compile)
                                         .collect(Collectors.toList());
                     labelPatterns.put(label.name(), patterns);
                 }
+                botBuilder.labelPatterns(labelPatterns);
+            }
+            if (repo.value().contains("issues")) {
+                botBuilder.issueProject(configuration.issueProject(repo.value().get("issues").asString()));
+            }
+            if (repo.value().contains("ignorestale")) {
+                botBuilder.ignoreStaleReviews(repo.value().get("ignorestale").asBoolean());
             }
-            var issueProject = repo.value().contains("issues") ?
-                    configuration.issueProject(repo.value().get("issues").asString()) :
-                    null;
-            var ignoreStaleReviews = repo.value().contains("ignorestale") && repo.value().get("ignorestale").asBoolean();
-            var bot = PullRequestBot.newBuilder()
-                                    .repo(configuration.repository(repo.name()))
-                                    .censusRepo(censusRepo)
-                                    .censusRef(censusRef)
-                                    .labelPatterns(labelPatterns)
-                                    .externalCommands(external)
-                                    .blockingLabels(blockers)
-                                    .readyLabels(readyLabels)
-                                    .readyComments(readyComments)
-                                    .issueProject(issueProject)
-                                    .ignoreStaleReviews(ignoreStaleReviews)
-                                    .build();
-            ret.add(bot);
+            if (repo.value().contains("targetbranches")) {
+                botBuilder.allowedTargetBranches(repo.value().get("targetbranches").asString());
+            }
+
+            ret.add(botBuilder.build());
         }
 
         return ret;
     }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -224,6 +224,14 @@
             for (var issue : issues) {
                 issue.accept(visitor);
             }
         }
     }
+
+    List<Reference> remoteBranches() {
+        try {
+            return localRepo.remoteBranches(pr.repository().url().toString());
+        } catch (IOException e) {
+            return List.of();
+        }
+    }
 }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -1182,6 +1182,63 @@
             // The PR should no longer be ready, as the review is stale
             assertFalse(pr.labels().contains("ready"));
             assertTrue(pr.labels().contains("rfr"));
         }
     }
+
+    @Test
+    void targetBranchPattern(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var reviewer = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
+            var checkBot = PullRequestBot.newBuilder().repo(author).censusRepo(censusBuilder.build())
+                                         .allowedTargetBranches("^(?!master$).*")
+                                         .build();
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            localRepo.push(masterHash, author.url(), "master", true);
+            localRepo.push(masterHash, author.url(), "notmaster", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit",
+                                                   "This is a pull request", true);
+
+            // Check the status
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // Verify that the check failed
+            var checks = pr.checks(editHash);
+            assertEquals(1, checks.size());
+            var check = checks.get("jcheck");
+            assertEquals(CheckStatus.FAILURE, check.status());
+            assertTrue(check.summary().orElseThrow().contains("The branch `master` is not allowed as target branch"));
+            assertTrue(check.summary().orElseThrow().contains("notmaster"));
+
+            var anotherPr = credentials.createPullRequest(author, "notmaster", "edit",
+                                                   "This is a pull request", true);
+
+            // Check the status
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // Approve it as another user
+            var approvalPr = reviewer.pullRequest(anotherPr.id());
+            approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // Verify that the check passed
+            checks = anotherPr.checks(editHash);
+            assertEquals(1, checks.size());
+            check = checks.get("jcheck");
+            assertEquals(CheckStatus.SUCCESS, check.status());
+        }
+    }
+
 }
