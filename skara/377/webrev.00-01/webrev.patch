diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -23,17 +23,17 @@
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.*;
-import org.openjdk.skara.vcs.Commit;
+import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.Issue;
 
 import java.io.*;
 import java.util.*;
 import java.util.logging.Logger;
-import java.util.regex.Pattern;
+import java.util.regex.*;
 import java.util.stream.*;
 
 class CheckRun {
     private final CheckWorkItem workItem;
     private final PullRequest pr;
@@ -73,10 +73,20 @@
     private boolean checkTargetBranch() {
         var matcher = workItem.bot.allowedTargetBranches().matcher(pr.targetRef());
         return matcher.matches();
     }
 
+    private List<String> allowedTargetBranches() {
+        var remoteBranches = prInstance.remoteBranches().stream()
+                                       .map(Reference::name)
+                                       .map(name -> workItem.bot.allowedTargetBranches().matcher(name))
+                                       .filter(Matcher::matches)
+                                       .map(Matcher::group)
+                                       .collect(Collectors.toList());
+        return remoteBranches;
+    }
+
     // For unknown contributors, check that all commits have the same name and email
     private boolean checkCommitAuthor(List<Commit> commits) throws IOException {
         var author = censusInstance.namespace().get(pr.author().id());
         if (author != null) {
             return true;
@@ -113,13 +123,14 @@
     // Additional bot-specific checks that are not handled by JCheck
     private List<String> botSpecificChecks() throws IOException {
         var ret = new ArrayList<String>();
 
         if (!checkTargetBranch()) {
-            var error = "The target branch of this PR does not match the allowed set of branches that can be targeted. " +
-                    "The following restriction is currently in place: `" + workItem.bot.allowedTargetBranches().pattern() +
-                    "`. Please select a different target branch for this PR.";
+            var error = "The branch `" + pr.targetRef() + "` is not allowed as target branch. The allowed target branches are:\n" +
+                    allowedTargetBranches().stream()
+                    .map(name -> "   - " + name)
+                    .collect(Collectors.joining("\n"));
             ret.add(error);
         }
 
         var baseHash = prInstance.baseHash();
         var headHash = pr.headHash();
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -224,6 +224,14 @@
             for (var issue : issues) {
                 issue.accept(visitor);
             }
         }
     }
+
+    List<Reference> remoteBranches() {
+        try {
+            return localRepo.remoteBranches(pr.repository().url().toString());
+        } catch (IOException e) {
+            return List.of();
+        }
+    }
 }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -1217,11 +1217,12 @@
             // Verify that the check failed
             var checks = pr.checks(editHash);
             assertEquals(1, checks.size());
             var check = checks.get("jcheck");
             assertEquals(CheckStatus.FAILURE, check.status());
-            assertTrue(check.summary().orElseThrow().contains("The target branch of this PR does not match the allowed set of branches"));
+            assertTrue(check.summary().orElseThrow().contains("The branch `master` is not allowed as target branch"));
+            assertTrue(check.summary().orElseThrow().contains("notmaster"));
 
             var anotherPr = credentials.createPullRequest(author, "notmaster", "edit",
                                                    "This is a pull request", true);
 
             // Check the status
