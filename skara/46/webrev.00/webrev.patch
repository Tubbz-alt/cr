diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
@@ -45,11 +45,12 @@
 
     private final static Map<String, CommandHandler> commandHandlers = Map.of(
             "help", new HelpCommand(),
             "integrate", new IntegrateCommand(),
             "sponsor", new SponsorCommand(),
-            "contributor", new ContributorCommand()
+            "contributor", new ContributorCommand(),
+            "summary", new SummaryCommand()
     );
 
     static class HelpCommand implements CommandHandler {
         static private Map<String, String> external = null;
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -71,18 +71,23 @@
                           .map(namespace::get)
                           .filter(Objects::nonNull)
                           .map(Contributor::username)
                           .collect(Collectors.toList());
 
+        var comments = pr.getComments();
         var additionalContributors = Contributors.contributors(pr.repository().host().getCurrentUserDetails(),
-                                                               pr.getComments()).stream()
+                                                               comments).stream()
                                                  .map(email -> Author.fromString(email.toString()))
                                                  .collect(Collectors.toList());
 
+        var summary = Summary.summary(pr.repository().host().getCurrentUserDetails(), comments);
+
         var commitMessage = CommitMessage.title(isMerge ? "Merge" : pr.getTitle())
                                          .contributors(additionalContributors)
                                          .reviewers(reviewers);
+        summary.ifPresent(commitMessage::summary);
+
         return String.join("\n", commitMessage.format(CommitMessageFormatters.v1));
     }
 
     private Hash commitSquashed(List<Review> activeReviews, Namespace namespace, String censusDomain, String sponsorId) throws IOException {
         localRepo.checkout(baseHash, true);
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Summary.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Summary.java
--- /dev/null
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Summary.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.pr;
+
+import org.openjdk.skara.host.*;
+
+import java.nio.charset.StandardCharsets;
+import java.util.*;
+import java.util.regex.*;
+import java.util.stream.Collectors;
+
+public class Summary {
+    private final static String summaryMarker = "<!-- summary: '%s' -->";
+    private final static Pattern markerPattern = Pattern.compile("<!-- summary: '(.*?)' -->");
+
+    static String setSummaryMarker(String summary) {
+        var encodedSummary = Base64.getEncoder().encodeToString(summary.getBytes(StandardCharsets.UTF_8));
+        return String.format(summaryMarker, encodedSummary);
+    }
+
+    static Optional<String> summary(HostUserDetails botUser, List<Comment> comments) {
+        var summaryActions = comments.stream()
+                                         .filter(comment -> comment.author().equals(botUser))
+                                         .map(comment -> markerPattern.matcher(comment.body()))
+                                         .filter(Matcher::find)
+                                         .collect(Collectors.toList());
+        String summary = null;
+        for (var action : summaryActions) {
+            var decodedSummary = new String(Base64.getDecoder().decode(action.group(1)), StandardCharsets.UTF_8);
+            if (decodedSummary.isBlank()) {
+                summary = null;
+            } else {
+                summary = decodedSummary;
+            }
+        }
+
+        return Optional.ofNullable(summary);
+    }
+}
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SummaryCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SummaryCommand.java
--- /dev/null
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SummaryCommand.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.pr;
+
+import org.openjdk.skara.host.*;
+
+import java.io.PrintWriter;
+import java.nio.file.Path;
+import java.util.List;
+
+public class SummaryCommand implements CommandHandler {
+    @Override
+    public void handle(PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
+        if (!comment.author().equals(pr.getAuthor())) {
+            reply.println("Only the author (@" + pr.getAuthor().userName() + ") is allowed to issue the `summary` command.");
+            return;
+        }
+
+        var currentSummary = Summary.summary(pr.repository().host().getCurrentUserDetails(), allComments);
+
+        if (args.isBlank()) {
+            if (currentSummary.isPresent()) {
+                reply.println("Removing existing summary");
+                reply.println(Summary.setSummaryMarker(""));
+            } else {
+                reply.println("To set a summary, use the syntax `/summary <summary text>`");
+            }
+        } else {
+            if (currentSummary.isPresent()) {
+                reply.println("Updating existing summary to `" + args.strip() + "`");
+            } else {
+                reply.println("Setting summary to `" + args.strip() + "`");
+            }
+            reply.println(Summary.setSummaryMarker(args.strip()));
+        }
+    }
+
+    @Override
+    public String description() {
+        return "updates the summary in the commit message";
+    }
+}
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SummaryTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SummaryTests.java
--- /dev/null
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SummaryTests.java
@@ -0,0 +1,171 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.pr;
+
+import org.openjdk.skara.host.Review;
+import org.openjdk.skara.test.*;
+import org.openjdk.skara.vcs.Repository;
+
+import org.junit.jupiter.api.*;
+
+import java.io.IOException;
+
+import static org.junit.jupiter.api.Assertions.*;
+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertLastCommentContains;
+
+class SummaryTests {
+    @Test
+    void simple(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addReviewer(integrator.host().getCurrentUserDetails().id())
+                                           .addCommitter(author.host().getCurrentUserDetails().id());
+            var prBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
+
+            // Populate the projects repository
+            var localRepoFolder = tempFolder.path().resolve("localrepo");
+            var localRepo = CheckableRepository.init(localRepoFolder, author.getRepositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.getUrl(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.getUrl(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+
+            // Try setting a summary when none has been set yet
+            pr.addComment("/summary");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a help message
+            assertLastCommentContains(pr,"To set a summary");
+
+            // Add a summary
+            pr.addComment("/summary This is a summary");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a success message
+            assertLastCommentContains(pr,"Setting summary to");
+
+            // Remove it again
+            pr.addComment("/summary");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a success message
+            assertLastCommentContains(pr,"Removing existing");
+
+            // Now add one again
+            pr.addComment("/summary Yet another summary");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a success message
+            assertLastCommentContains(pr,"Setting summary to");
+
+            // Now update it
+            pr.addComment("/summary Third time is surely the charm");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a success message
+            assertLastCommentContains(pr,"Updating existing summary");
+
+            // Approve it as another user
+            var approvalPr = integrator.getPullRequest(pr.getId());
+            approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
+            TestBotRunner.runPeriodicItems(prBot);
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The commit message preview should contain the final summary
+            var summaryLine = pr.getComments().stream()
+                               .flatMap(comment -> comment.body().lines())
+                                .filter(line -> !line.contains("/summary"))
+                                .filter(line -> !line.contains("Updating existing"))
+                               .filter(line -> line.contains("Third time"))
+                               .findAny()
+                               .orElseThrow();
+            assertEquals("Third time is surely the charm", summaryLine);
+
+            // Integrate
+            pr.addComment("/integrate");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with an ok message
+            assertLastCommentContains(pr,"Pushed as commit");
+
+            // The change should now be present on the master branch
+            var pushedFolder = tempFolder.path().resolve("pushed");
+            var pushedRepo = Repository.materialize(pushedFolder, author.getUrl(), "master");
+            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));
+
+            var headHash = pushedRepo.resolve("HEAD").orElseThrow();
+            var headCommit = pushedRepo.commits(headHash.hex() + "^.." + headHash.hex()).asList().get(0);
+
+            // The summary should be present
+            summaryLine = headCommit.message().stream()
+                                   .filter(line -> line.contains("Third time"))
+                                   .findAny()
+                                   .orElseThrow();
+            assertEquals("Third time is surely the charm", summaryLine);
+        }
+    }
+    @Test
+    void invalidCommandAuthor(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+            var external = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.host().getCurrentUserDetails().id());
+            var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.getUrl(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.getUrl(), "refs/heads/edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+
+            // Issue a contributor command not as the PR author
+            var externalPr = external.getPullRequest(pr.getId());
+            externalPr.addComment("/summary a summary");
+            TestBotRunner.runPeriodicItems(mergeBot);
+
+            // The bot should reply with an error message
+            var error = pr.getComments().stream()
+                          .filter(comment -> comment.body().contains("Only the author"))
+                          .count();
+            assertEquals(1, error);
+        }
+    }
+
+}
