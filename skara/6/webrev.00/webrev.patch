diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
@@ -32,10 +32,11 @@
 import java.net.URI;
 import java.nio.file.*;
 import java.time.Duration;
 import java.util.*;
 import java.util.logging.*;
+import java.util.regex.Pattern;
 
 public class BotRunnerConfiguration {
     private final Logger log;
     private final JSONObject config;
     private final Map<String, Host> hosts;
@@ -68,19 +69,19 @@
                 if (github.contains("url")) {
                     uri = URIBuilder.base(github.get("url").asString()).build();
                 } else {
                     uri = URIBuilder.base("https://github.com/").build();
                 }
-                URI webUri;
+                Pattern webUriPattern = null;
+                String webUriReplacement = null;
                 if (github.contains("weburl")) {
-                    webUri = URIBuilder.base(github.get("weburl").asString()).build();
-                } else {
-                    webUri = uri;
+                    webUriPattern = Pattern.compile(github.get("weburl").get("pattern").asString());
+                    webUriReplacement = github.get("weburl").get("replacement").asString();
                 }
 
                 var keyFile = cwd.resolve(github.get("app").get("key").asString());
-                ret.put(entry.name(), HostFactory.createGitHubHost(uri, webUri, keyFile.toString(),
+                ret.put(entry.name(), HostFactory.createGitHubHost(uri, webUriPattern, webUriReplacement, keyFile.toString(),
                                                                    github.get("app").get("id").asString(),
                                                                    github.get("app").get("installation").asString()));
             } else {
                 throw new ConfigurationError("Host " + entry.name());
             }
diff a/host/build.gradle b/host/build.gradle
--- a/host/build.gradle
+++ b/host/build.gradle
@@ -22,10 +22,11 @@
  */
 
 module {
     name = 'org.openjdk.skara.host'
     test {
+        requires 'org.openjdk.skara.test'
         requires 'org.junit.jupiter.api'
         requires 'jdk.httpserver'
         opens 'org.openjdk.skara.host.network' to 'org.junit.platform.commons'
         opens 'org.openjdk.skara.host.github' to 'org.junit.platform.commons'
     }
@@ -36,10 +37,12 @@
     implementation project(':census')
     implementation project(':json')
     implementation project(':ini')
     implementation project(':process')
     implementation project(':email')
+
+    testImplementation project(':test')
 }
 
 publishing {
     publications {
         host(MavenPublication) {
diff a/host/src/main/java/org/openjdk/skara/host/HostFactory.java b/host/src/main/java/org/openjdk/skara/host/HostFactory.java
--- a/host/src/main/java/org/openjdk/skara/host/HostFactory.java
+++ b/host/src/main/java/org/openjdk/skara/host/HostFactory.java
@@ -23,16 +24,16 @@
 
 import org.openjdk.skara.host.github.*;
 import org.openjdk.skara.host.gitlab.GitLabHost;
 
 import java.net.URI;
+import java.util.regex.Pattern;
 
 public class HostFactory {
-    public static Host createGitHubHost(URI uri, URI webUri, String keyFile, String issue, String id) {
+    public static Host createGitHubHost(URI uri, Pattern webUriPattern, String webUriReplacement, String keyFile, String issue, String id) {
         var app = new GitHubApplication(keyFile, issue, id);
-        return new GitHubHost(uri, app, webUri);
+        return new GitHubHost(uri, app, webUriPattern, webUriReplacement);
     }
 
     public static Host createGitHubHost(URI uri, PersonalAccessToken pat) {
         if (pat != null) {
             return new GitHubHost(uri, pat);
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
@@ -26,22 +27,24 @@
 import org.openjdk.skara.json.*;
 
 import java.net.*;
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
+import java.util.regex.Pattern;
 
 public class GitHubHost implements Host {
     private final URI uri;
-    private final URI webUri;
+    private final Pattern webUriPattern;
+    private final String webUriReplacement;
     private final GitHubApplication application;
     private final PersonalAccessToken pat;
     private final RestRequest request;
 
-    public GitHubHost(URI uri, GitHubApplication application, URI webUri) {
+    public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement) {
         this.uri = uri;
-        this.webUri = webUri;
+        this.webUriPattern = webUriPattern;
+        this.webUriReplacement = webUriReplacement;
         this.application = application;
         this.pat = null;
 
         var baseApi = URIBuilder.base(uri)
                 .appendSubDomain("api")
@@ -54,11 +57,12 @@
                 "Accept", "application/vnd.github.antiope-preview+json"));
     }
 
     public GitHubHost(URI uri, PersonalAccessToken pat) {
         this.uri = uri;
-        this.webUri = uri;
+        this.webUriPattern = null;
+        this.webUriReplacement = null;
         this.pat = pat;
         this.application = null;
 
         var baseApi = URIBuilder.base(uri)
                                 .appendSubDomain("api")
@@ -69,11 +73,12 @@
                 "Authorization", "token " + pat.token()));
     }
 
     public GitHubHost(URI uri) {
         this.uri = uri;
-        this.webUri = uri;
+        this.webUriPattern = null;
+        this.webUriReplacement = null;
         this.pat = null;
         this.application = null;
 
         var baseApi = URIBuilder.base(uri)
                                 .appendSubDomain("api")
@@ -85,12 +90,25 @@
 
     public URI getURI() {
         return uri;
     }
 
-    URI getWebURI() {
-        return webUri;
+    URI getWebURI(String endpoint) {
+        var baseWebUri = URIBuilder.base(uri)
+                                   .setPath(endpoint)
+                                   .build();
+
+        if (webUriPattern == null) {
+            return baseWebUri;
+        }
+
+        var matcher = webUriPattern.matcher(baseWebUri.toString());
+        if (!matcher.matches()) {
+            return baseWebUri;
+
+        }
+        return URIBuilder.base(matcher.replaceAll(webUriReplacement)).build();
     }
 
     String getInstallationToken() {
         if (application != null) {
             return application.getInstallationToken();
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
@@ -395,13 +395,13 @@
                       .collect(Collectors.toList());
     }
 
     @Override
     public URI getWebUrl() {
-        return URIBuilder.base(repository.getWebUrl())
-                         .setPath("/" + repository.getName() + "/pull/" + getId())
-                         .build();
+        var host = (GitHubHost)repository.host();
+        var endpoint = "/" + repository.getName() + "/pull/" + getId();
+        return host.getWebURI(endpoint);
     }
 
     @Override
     public String toString() {
         return "GitHubPullRequest #" + getId() + " by " + getAuthor();
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
@@ -132,19 +132,18 @@
                 .build();
     }
 
     @Override
     public URI getWebUrl() {
-        return URIBuilder.base(gitHubHost.getWebURI())
-                         .setPath("/" + repository)
-                         .build();    }
+        var endpoint = "/" + repository;
+        return gitHubHost.getWebURI(endpoint);
+    }
 
     @Override
     public URI getWebUrl(Hash hash) {
-        return URIBuilder.base(gitHubHost.getWebURI())
-                .setPath("/" + repository + "/commit/" + hash.abbreviate())
-                .build();
+        var endpoint = "/" + repository + "/commit/" + hash.abbreviate();
+        return gitHubHost.getWebURI(endpoint);
     }
 
     @Override
     public VCS getRepositoryType() {
         return VCS.GIT;
diff a/host/src/test/java/org/openjdk/skara/host/github/GitHubHostTests.java b/host/src/test/java/org/openjdk/skara/host/github/GitHubHostTests.java
--- /dev/null
+++ b/host/src/test/java/org/openjdk/skara/host/github/GitHubHostTests.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.host.github;
+
+import org.openjdk.skara.host.network.URIBuilder;
+import org.openjdk.skara.test.TemporaryDirectory;
+
+import org.junit.jupiter.api.Test;
+
+import java.io.IOException;
+import java.net.*;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.*;
+import java.util.regex.Pattern;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+public class GitHubHostTests {
+    private void generateKeyfile(Path path) throws IOException {
+        // This key was randomly generated for this test only
+        Files.writeString(path, "-----BEGIN PRIVATE KEY-----\n" +
+                "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDAFzH+URXAvOoL\n" +
+                "0NSdIePQTTVsan13c+7D9tAilJAtRcxUjOz2lMZYBzrdsVYGbktfseEvF6o9dyoX\n" +
+                "X/py6DM0QqBNW/0uEv1ouS44po0VvykHVXrAq0u8E8HHFtr09VQSO/ceXrFd6haQ\n" +
+                "aCckbdp1TPn1q8w+U2bRkqUji7zzfwll6AaB4dhKZ1v5NFuff1PWmuk2x7b0u2yR\n" +
+                "uANLHLqmNB4ik7bUTiIyacXeVSZRZRFGwJjd+1WnyiybwV6QbQ0nndw6iaz2wGWt\n" +
+                "XDif7DJE0axMReUZVKJLqMagS5R5ra6FdlnUPw0nbJMwnDOLk9ofSfne0LTSTD6K\n" +
+                "/VZ26izbAgMBAAECggEBALF0vDq1reLgo1dHFSQUquFEcpY1yrMP5wQifyVzGb65\n" +
+                "PIrfpgomZxXrl/Y2XcKTIg7FxcI7moouDDSL9lMxMByXcIAG+14VLQYSDSFIvA3b\n" +
+                "C4w666wSk2Ss29eQxbaG7aPqweDMmg6osy+1CHQfCDJVapYKoCTz54i0cNrlvSk0\n" +
+                "FZ3o99uAvAcLtrsqbnXO57NXQVajoSH0bkMZd+TuZqEIX3CzHoNEVhzvqaKedqA6\n" +
+                "Cd22Y2m6cnW0H10Chko05FtskLYD+jw275LiUtInplBtG3n5/uDIamsOPo9XG8i0\n" +
+                "a4rxaJYsRqXYqDOEjLi/QCUrYBtJ+gqT/qMOTjAoKAECgYEA/VPdvc03vScjIu4T\n" +
+                "vNXjXxv81HZPm/IoTYTgvTvrEqErQ/CIwTQJer1XUJ9M43n+XkVZsMKkUIMlwt2+\n" +
+                "G0wBwYkDUgIXFEJhb170BVgwyZHE+Djr0E7NunbAv/oQu8AfQzk5HZpcQwxVg8w8\n" +
+                "Vj2ecLb4GK0D9iJ4zLwlsRw2RukCgYEAwh30AG7gq5y9Mj/BusuDvyNZZKjE/pJz\n" +
+                "HtC7a/OzOyr+Bpr2VBxVDeEFth22bd/a4ohv1QcwNAa2LzelNfQRQURq/vqpDmuj\n" +
+                "g0ESQavh3i3Tax2LXO582HWueuNL+8Ufyb6WDJDvYuz0F3WBJhxixP3I7VgMhPWV\n" +
+                "tK/wEEDDwyMCgYEArR3M4NIHDzpZppsv3dIE6ZAEvWSEjrtzk1YFBwyVXkvJd0o/\n" +
+                "Clj3SWtu6eeS8bkCfYXC/ypkg6i7+2jxa1ILuShanoZTI0Mhtqwa8jQMUxNMmZy8\n" +
+                "ecQAjzZsDkVjfgqS0quePn6oIiGhpsnBSeYeCkTfUm2Z0XBJQRAqadgvt1ECgYBK\n" +
+                "FAgzyhxvIUeKT45s7JGAdcr9gPJ8fAL2tY1wqvWxFL0QZD6w5ocG3uLBFyGxWIY9\n" +
+                "gPe8ghvBHvaTmlav+k5DbAqw95Ngb29c/Y4sBZ4SncZa0FGIy3JVYMOPHgK3OAjj\n" +
+                "gpncfcr9I5QbB7qbgqWmq3rsKHfOnbHd3G5upWiPpQKBgCaPW2vyT/nfCvfh0z//\n" +
+                "QSv0//4zy7pDdOolP5ZRsUo5cU4aiv4XgTSglR2jEJyr4bMYCN/+4tnqp0tIUzt1\n" +
+                "RWJhXLU1dm4QhCTccWMAyQgktn3SB5Ww3+qyLr1klUwkO+rx8kkNjv3rC/u5EzQ9\n" +
+                "q3DJ9in4wyYBNPVDB5kJom5i\n" +
+                "-----END PRIVATE KEY-----", StandardCharsets.UTF_8);
+    }
+
+    @Test
+    void webUriPatternReplacement() throws IOException, URISyntaxException {
+        try (var tempFolder = new TemporaryDirectory()) {
+            var key = tempFolder.path().resolve("key.pem");
+            generateKeyfile(key);
+            var app = new GitHubApplication(key.toString(), "y", "z");
+            var host = new GitHubHost(URIBuilder.base("http://www.example.com").build(),
+                                      app, Pattern.compile("^(http://www.example.com)/test/(.*)$"), "$1/another/$2");
+            assertEquals(new URI("http://www.example.com/another/hello"), host.getWebURI("/test/hello"));
+        }
+    }
+}
diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -65,11 +65,12 @@
         public Host createNewHost(int userIndex) {
             var hostUri = URIBuilder.base(config.get("host").asString()).build();
             var apps = config.get("apps").asArray();
             var key = configDir.resolve(apps.get(userIndex).get("key").asString());
             return HostFactory.createGitHubHost(hostUri,
-                                                hostUri,
+                                                null,
+                                                null,
                                                 key.toString(),
                                                 apps.get(userIndex).get("id").asString(),
                                                 apps.get(userIndex).get("installation").asString());
         }
 
