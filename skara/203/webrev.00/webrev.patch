diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -192,10 +192,16 @@
         if (!additionalErrors.isEmpty()) {
             newLabels.remove("rfr");
             return;
         }
 
+        // Draft requests are not for review
+        if (pr.isDraft()) {
+            newLabels.remove("rfr");
+            return;
+        }
+
         // Check if the visitor found any issues that should be resolved before reviewing
         if (visitor.isReadyForReview()) {
             newLabels.add("rfr");
         } else {
             newLabels.remove("rfr");
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -968,6 +968,44 @@
             assertEquals(1, checks.size());
             check = checks.get("jcheck");
             assertEquals(CheckStatus.SUCCESS, check.status());
         }
     }
+
+    @Test
+    void draft(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var reviewer = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.host().getCurrentUserDetails().id())
+                                           .addReviewer(reviewer.host().getCurrentUserDetails().id());
+            var checkBot = new PullRequestBot(author, censusBuilder.build(), "master");
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            localRepo.push(masterHash, author.getUrl(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.getUrl(), "refs/heads/edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit",
+                                                   "This is a pull request", true);
+
+            // Check the status
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // Verify that the check succeeded
+            var checks = pr.getChecks(editHash);
+            assertEquals(1, checks.size());
+            var check = checks.get("jcheck");
+            assertEquals(CheckStatus.SUCCESS, check.status());
+
+            // The PR should still not be ready for review as it is a draft
+            assertFalse(pr.getLabels().contains("rfr"));
+            assertFalse(pr.getLabels().contains("ready"));
+        }
+    }
 }
diff a/host/src/main/java/org/openjdk/skara/host/HostedRepository.java b/host/src/main/java/org/openjdk/skara/host/HostedRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/HostedRepository.java
+++ b/host/src/main/java/org/openjdk/skara/host/HostedRepository.java
@@ -32,11 +32,12 @@
     Host host();
     PullRequest createPullRequest(HostedRepository target,
                                   String targetRef,
                                   String sourceRef,
                                   String title,
-                                  List<String> body);
+                                  List<String> body,
+                                  boolean draft);
     PullRequest getPullRequest(String id);
     List<PullRequest> getPullRequests();
     List<PullRequest> findPullRequestsWithComment(String author, String body);
     Optional<PullRequest> parsePullRequestUrl(String url);
     String getName();
@@ -48,6 +49,14 @@
     String getNamespace();
     Optional<WebHook> parseWebHook(JSONValue body);
     HostedRepository fork();
     long getId();
     Hash getBranchHash(String ref);
+
+    default PullRequest createPullRequest(HostedRepository target,
+                                          String targetRef,
+                                          String sourceRef,
+                                          String title,
+                                          List<String> body) {
+        return createPullRequest(target, targetRef, sourceRef, title, body, false);
+    }
 }
diff a/host/src/main/java/org/openjdk/skara/host/PullRequest.java b/host/src/main/java/org/openjdk/skara/host/PullRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/PullRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/PullRequest.java
@@ -114,6 +114,12 @@
 
     /**
      * Returns a link that will lead to the list of changes with the specified base.
      */
     URI getChangeUrl(Hash base);
+
+    /**
+     * Returns true if the request is in draft mode.
+     * @return
+     */
+    boolean isDraft();
 }
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
@@ -397,10 +397,15 @@
     @Override
     public URI getChangeUrl(Hash base) {
         return URIBuilder.base(getWebUrl()).appendPath("/files/" + base.abbreviate() + ".." + getHeadHash().abbreviate()).build();
     }
 
+    @Override
+    public boolean isDraft() {
+        return json.get("draft").asBoolean();
+    }
+
     @Override
     public void setState(State state) {
         request.patch("pulls/" + json.get("number").toString())
                .body("state", state == State.CLOSED ? "closed" : "open")
                .execute();
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
@@ -22,11 +22,11 @@
  */
 package org.openjdk.skara.host.github;
 
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.host.network.*;
-import org.openjdk.skara.json.JSONValue;
+import org.openjdk.skara.json.*;
 import org.openjdk.skara.vcs.*;
 
 import java.net.URI;
 import java.nio.charset.StandardCharsets;
 import java.util.*;
@@ -50,11 +50,12 @@
                 .setPath("/repos/" + repository + "/")
                 .build();
         request = new RestRequest(apiBase, () -> Arrays.asList(
                 "Authorization", "token " + gitHubHost.getInstallationToken(),
                 "Accept", "application/vnd.github.machine-man-preview+json",
-                "Accept", "application/vnd.github.antiope-preview+json"));
+                "Accept", "application/vnd.github.antiope-preview+json",
+                "Accept", "application/vnd.github.shadow-cat-preview+json"));
         json = gitHubHost.getProjectInfo(repository);
         var urlPattern = gitHubHost.getWebURI("/" + repository + "/pull/").toString();
         pullRequestPattern = Pattern.compile(urlPattern + "(\\d+)");
     }
 
@@ -90,23 +91,27 @@
     @Override
     public PullRequest createPullRequest(HostedRepository target,
                                          String targetRef,
                                          String sourceRef,
                                          String title,
-                                         List<String> body) {
+                                         List<String> body,
+                                         boolean draft) {
         if (!(target instanceof GitHubRepository)) {
             throw new IllegalArgumentException("target repository must be a GitHub repository");
         }
 
         var upstream = (GitHubRepository) target;
         var user = host().getCurrentUserDetails().userName();
         var namespace = user.endsWith("[bot]") ? "" : user + ":";
+        var params = JSON.object()
+                         .put("title", title)
+                         .put("head", namespace + sourceRef)
+                         .put("base", targetRef)
+                         .put("body", String.join("\n", body))
+                         .put("draft", draft);
         var pr = upstream.request.post("pulls")
-                                 .body("title", title)
-                                 .body("head", namespace + sourceRef)
-                                 .body("base", targetRef)
-                                 .body("body", String.join("\n", body))
+                                 .body(params)
                                  .execute();
 
         return new GitHubPullRequest(upstream, pr, request);
     }
 
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
@@ -516,10 +516,15 @@
         return URIBuilder.base(getWebUrl()).appendPath("/diffs")
                          .setQuery(Map.of("start_sha", base.hex()))
                          .build();
     }
 
+    @Override
+    public boolean isDraft() {
+        return json.get("work_in_progress").asBoolean();
+    }
+
 
     @Override
     public void setState(State state) {
         request.put("")
                .body("state_event", state == State.CLOSED ? "close" : "reopen")
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java
+++ b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java
@@ -92,19 +92,20 @@
     @Override
     public PullRequest createPullRequest(HostedRepository target,
                                          String targetRef,
                                          String sourceRef,
                                          String title,
-                                         List<String> body) {
+                                         List<String> body,
+                                         boolean draft) {
         if (!(target instanceof GitLabRepository)) {
             throw new IllegalArgumentException("target must be a GitLab repository");
         }
 
         var pr = request.post("merge_requests")
                         .body("source_branch", sourceRef)
                         .body("target_branch", targetRef)
-                        .body("title", title)
+                        .body("title", draft ? "WIP: " : "" + title)
                         .body("description", String.join("\n", body))
                         .body("target_project_id", Long.toString(target.getId()))
                         .execute();
 
         var targetRepo = (GitLabRepository) target;
diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -279,16 +279,20 @@
     public IssueProject getIssueProject() {
         var host = getHost();
         return credentials.getIssueProject(host);
     }
 
-    public PullRequest createPullRequest(HostedRepository hostedRepository, String targetRef, String sourceRef, String title) {
-        var pr = hostedRepository.createPullRequest(hostedRepository, targetRef, sourceRef, title, List.of());
+    public PullRequest createPullRequest(HostedRepository hostedRepository, String targetRef, String sourceRef, String title, boolean draft) {
+        var pr = hostedRepository.createPullRequest(hostedRepository, targetRef, sourceRef, title, List.of(), draft);
         pullRequestsToBeClosed.add(pr);
         return pr;
     }
 
+    public PullRequest createPullRequest(HostedRepository hostedRepository, String targetRef, String sourceRef, String title) {
+        return createPullRequest(hostedRepository, targetRef, sourceRef, title, false);
+    }
+
     public CensusBuilder getCensusBuilder() {
         return CensusBuilder.create(credentials.getNamespaceName());
     }
 
     @Override
diff a/test/src/main/java/org/openjdk/skara/test/PullRequestData.java b/test/src/main/java/org/openjdk/skara/test/PullRequestData.java
--- a/test/src/main/java/org/openjdk/skara/test/PullRequestData.java
+++ b/test/src/main/java/org/openjdk/skara/test/PullRequestData.java
@@ -30,6 +30,7 @@
 class PullRequestData extends IssueData {
     Hash headHash;
     final List<ReviewComment> reviewComments = new ArrayList<>();
     final Set<Check> checks = new HashSet<>();
     final List<Review> reviews = new ArrayList<>();
+    boolean draft;
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -138,13 +138,13 @@
         if (currentUser == 0) {
             data.folders.forEach(TemporaryDirectory::close);
         }
     }
 
-    TestPullRequest createPullRequest(TestHostedRepository repository, String targetRef, String sourceRef, String title, List<String> body) {
+    TestPullRequest createPullRequest(TestHostedRepository repository, String targetRef, String sourceRef, String title, List<String> body, boolean draft) {
         var id = String.valueOf(data.pullRequests.size() + 1);
-        var pr = TestPullRequest.createNew(repository, id, targetRef, sourceRef, title, body);
+        var pr = TestPullRequest.createNew(repository, id, targetRef, sourceRef, title, body, draft);
         data.pullRequests.put(id, pr);
         return pr;
     }
 
     TestPullRequest getPullRequest(TestHostedRepository repository, String id) {
diff a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
@@ -56,12 +56,12 @@
     public Optional<HostedRepository> getParent() {
         throw new RuntimeException("Not implemented yet");
     }
 
     @Override
-    public PullRequest createPullRequest(HostedRepository target, String targetRef, String sourceRef, String title, List<String> body) {
-        return host.createPullRequest(this, targetRef, sourceRef, title, body);
+    public PullRequest createPullRequest(HostedRepository target, String targetRef, String sourceRef, String title, List<String> body, boolean draft) {
+        return host.createPullRequest(this, targetRef, sourceRef, title, body, draft);
     }
 
     @Override
     public PullRequest getPullRequest(String id) {
         return host.getPullRequest(this, id);
diff a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
--- a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
@@ -55,14 +55,15 @@
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
-    static TestPullRequest createNew(TestHostedRepository repository, String id, String targetRef, String sourceRef, String title, List<String> body) {
+    static TestPullRequest createNew(TestHostedRepository repository, String id, String targetRef, String sourceRef, String title, List<String> body, boolean draft) {
         var data = new PullRequestData();
         data.title = title;
         data.body = String.join("\n", body);
+        data.draft = draft;
         var pr = new TestPullRequest(repository, id, repository.host().getCurrentUserDetails(), repository.host().getCurrentUserDetails(), targetRef, sourceRef, data);
         return pr;
     }
 
     static TestPullRequest createFrom(TestHostedRepository repository, TestPullRequest other) {
@@ -182,10 +183,15 @@
     @Override
     public URI getChangeUrl(Hash base) {
         return URIBuilder.base(getWebUrl()).appendPath("/files/" + base.abbreviate()).build();
     }
 
+    @Override
+    public boolean isDraft() {
+        return data.draft;
+    }
+
     @Override
     public URI getWebUrl() {
         try {
             return new URI(repository.getUrl().toString() + "/pr/" + getId());
         } catch (URISyntaxException e) {
