diff a/network/src/main/java/org/openjdk/skara/network/RestRequest.java b/network/src/main/java/org/openjdk/skara/network/RestRequest.java
--- a/network/src/main/java/org/openjdk/skara/network/RestRequest.java
+++ b/network/src/main/java/org/openjdk/skara/network/RestRequest.java
@@ -22,11 +22,11 @@
  */
 package org.openjdk.skara.network;
 
 import org.openjdk.skara.json.*;
 
-import java.io.IOException;
+import java.io.*;
 import java.net.URI;
 import java.net.http.*;
 import java.time.Duration;
 import java.util.*;
 import java.util.logging.Logger;
@@ -148,14 +148,18 @@
             headers.put(name, value);
             return this;
         }
 
         public JSONValue execute() {
-            return RestRequest.this.execute(this);
+            try {
+                return RestRequest.this.execute(this);
+            } catch (IOException e) {
+                throw new UncheckedIOException(e);
+            }
         }
 
-        public String executeUnparsed() {
+        public String executeUnparsed() throws IOException {
             return RestRequest.this.executeUnparsed(this);
         }
     }
 
     private final URI apiBase;
@@ -214,29 +218,33 @@
 
     void setRetryBackoffStep(Duration duration) {
         retryBackoffStep = duration;
     }
 
-    private HttpResponse<String> sendRequest(HttpRequest request) {
+    private HttpResponse<String> sendRequest(HttpRequest request) throws IOException {
         HttpResponse<String> response;
 
         var retryCount = 0;
         while (true) {
             try {
                 var client = HttpClient.newBuilder()
                                        .connectTimeout(Duration.ofSeconds(10))
                                        .build();
                 response = client.send(request, HttpResponse.BodyHandlers.ofString());
                 break;
-            } catch (IOException | InterruptedException e) {
+            } catch (InterruptedException | IOException e) {
                 if (retryCount < 5) {
                     try {
                         Thread.sleep(retryCount * retryBackoffStep.toMillis());
                     } catch (InterruptedException ignored) {
                     }
                 } else {
-                    throw new RuntimeException(e);
+                    try {
+                        throw e;
+                    } catch (InterruptedException ex) {
+                        throw new RuntimeException(ex);
+                    }
                 }
             }
             retryCount++;
         }
 
@@ -295,11 +303,11 @@
     private Map<String, String> parseLink(String link) {
         return linkPattern.matcher(link).results()
                           .collect(Collectors.toMap(m -> m.group(2), m -> m.group(1)));
     }
 
-    private JSONValue execute(QueryBuilder queryBuilder) {
+    private JSONValue execute(QueryBuilder queryBuilder) throws IOException {
         var request = createRequest(queryBuilder.queryType, queryBuilder.endpoint, queryBuilder.composedBody(),
                                     queryBuilder.params, queryBuilder.headers);
         var response = sendRequest(request);
         var errorTransform = transformBadResponse(response, queryBuilder);
         if (errorTransform.isPresent()) {
@@ -337,14 +345,17 @@
         }
 
         return new JSONArray(ret.stream().flatMap(JSONArray::stream).toArray(JSONValue[]::new));
     }
 
-    private String executeUnparsed(QueryBuilder queryBuilder) {
+    private String executeUnparsed(QueryBuilder queryBuilder) throws IOException {
         var request = createRequest(queryBuilder.queryType, queryBuilder.endpoint, queryBuilder.composedBody(),
                                     queryBuilder.params, queryBuilder.headers);
         var response = sendRequest(request);
+        if (response.statusCode() >= 400) {
+            throw new IOException("Bad response: " + response.statusCode());
+        }
         return response.body();
     }
 
     public QueryBuilder get(String endpoint) {
         return new QueryBuilder(RequestType.GET, endpoint);
