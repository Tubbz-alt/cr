diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
@@ -25,23 +25,26 @@
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.network.*;
 
+import java.io.IOException;
 import java.net.*;
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
+import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class GitHubHost implements Forge {
     private final URI uri;
     private final Pattern webUriPattern;
     private final String webUriReplacement;
     private final GitHubApplication application;
     private final Credential pat;
     private final RestRequest request;
     private HostUser currentUser;
+    private final Logger log = Logger.getLogger("org.openjdk.skara.forge.github");
 
     public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement) {
         this.uri = uri;
         this.webUriPattern = webUriPattern;
         this.webUriReplacement = webUriReplacement;
@@ -134,14 +137,24 @@
                             () -> getFullName(json.get("login").asString()));
     }
 
     @Override
     public boolean isValid() {
-        var endpoints = request.get("")
-                               .onError(response -> JSON.of())
-                               .execute();
-        return !endpoints.isNull();
+        try {
+            var endpoints = request.get("")
+                                   .executeUnparsed();
+            var parsed = JSON.parse(endpoints);
+            if (parsed != null && parsed.contains("current_user_url")) {
+                return true;
+            } else {
+                log.fine("Error during GitHub host validation: unexpected endpoint list: " + endpoints);
+                return false;
+            }
+        } catch (IOException e) {
+            log.fine("Error during GitHub host validation: " + e);
+            return false;
+        }
     }
 
     JSONObject getProjectInfo(String name) {
         var project = request.get("repos/" + name)
                              .execute();
