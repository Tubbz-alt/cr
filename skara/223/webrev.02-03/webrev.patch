diff a/bots/cli/src/main/java/org/openjdk/skara/bots/cli/BotLogstashHandler.java b/bots/cli/src/main/java/org/openjdk/skara/bots/cli/BotLogstashHandler.java
--- a/bots/cli/src/main/java/org/openjdk/skara/bots/cli/BotLogstashHandler.java
+++ b/bots/cli/src/main/java/org/openjdk/skara/bots/cli/BotLogstashHandler.java
@@ -86,11 +86,11 @@
             }
 
             endpoint.post("/")
                     .body(query)
                     .executeUnparsed();
-        } catch (RuntimeException e) {
+        } catch (RuntimeException | IOException e) {
             log.warning("Exception during logstash publishing: " + e.getMessage());
             log.throwing("BotSlackHandler", "publish", e);
         }
     }
 
diff a/bots/cli/src/main/java/org/openjdk/skara/bots/cli/BotSlackHandler.java b/bots/cli/src/main/java/org/openjdk/skara/bots/cli/BotSlackHandler.java
--- a/bots/cli/src/main/java/org/openjdk/skara/bots/cli/BotSlackHandler.java
+++ b/bots/cli/src/main/java/org/openjdk/skara/bots/cli/BotSlackHandler.java
@@ -24,10 +24,11 @@
 
 import org.openjdk.skara.bot.BotTaskAggregationHandler;
 import org.openjdk.skara.network.*;
 import org.openjdk.skara.json.JSON;
 
+import java.io.IOException;
 import java.net.URI;
 import java.time.*;
 import java.util.*;
 import java.util.logging.*;
 import java.util.regex.Pattern;
@@ -96,11 +97,11 @@
                 attachments.add(attachment);
                 query.put("attachments", attachments);
             }
 
             webhook.post("").body(query).executeUnparsed();
-        } catch (RuntimeException e) {
+        } catch (RuntimeException | IOException e) {
             log.warning("Exception during slack notification posting: " + e.getMessage());
             log.throwing("BotSlackHandler", "publish", e);
         }
     }
 
diff a/forge/src/main/java/org/openjdk/skara/forge/Forge.java b/forge/src/main/java/org/openjdk/skara/forge/Forge.java
--- a/forge/src/main/java/org/openjdk/skara/forge/Forge.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/Forge.java
@@ -46,16 +46,13 @@
     static Optional<Forge> from(URI uri, Credential credential, JSONObject configuration) {
         var factories = ForgeFactory.getForgeFactories().stream()
                                     .sorted(Comparator.comparing(f -> !uri.getHost().contains(f.name())))
                                     .collect(Collectors.toList());
         for (var factory : factories) {
-            try {
-                var forge = factory.create(uri, credential, configuration);
-                if (forge.isValid()) {
-                    return Optional.of(forge);
-                }
-            } catch (RuntimeException ignored) {
+            var forge = factory.create(uri, credential, configuration);
+            if (forge.isValid()) {
+                return Optional.of(forge);
             }
         }
         return Optional.empty();
     }
 
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubForgeFactory.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubForgeFactory.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubForgeFactory.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubForgeFactory.java
@@ -15,11 +15,11 @@
 
     @Override
     public Forge create(URI uri, Credential credential, JSONObject configuration) {
         Pattern webUriPattern = null;
         String webUriReplacement = null;
-        if (configuration.contains("weburl")) {
+        if (configuration != null && configuration.contains("weburl")) {
             webUriPattern = Pattern.compile(configuration.get("weburl").get("pattern").asString());
             webUriReplacement = configuration.get("weburl").get("replacement").asString();
         }
 
         if (credential != null) {
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
@@ -25,23 +25,26 @@
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.network.*;
 
+import java.io.IOException;
 import java.net.*;
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
+import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class GitHubHost implements Forge {
     private final URI uri;
     private final Pattern webUriPattern;
     private final String webUriReplacement;
     private final GitHubApplication application;
     private final Credential pat;
     private final RestRequest request;
     private HostUser currentUser;
+    private final Logger log = Logger.getLogger("org.openjdk.skara.forge.github");
 
     public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement) {
         this.uri = uri;
         this.webUriPattern = webUriPattern;
         this.webUriReplacement = webUriReplacement;
@@ -134,14 +137,24 @@
                             () -> getFullName(json.get("login").asString()));
     }
 
     @Override
     public boolean isValid() {
-        var endpoints = request.get("")
-                               .onError(response -> JSON.of())
-                               .execute();
-        return !endpoints.isNull();
+        try {
+            var endpoints = request.get("")
+                                   .executeUnparsed();
+            var parsed = JSON.parse(endpoints);
+            if (parsed != null && parsed.contains("current_user_url")) {
+                return true;
+            } else {
+                log.fine("Error during GitHub host validation: unexpected endpoint list: " + endpoints);
+                return false;
+            }
+        } catch (IOException e) {
+            log.fine("Error during GitHub host validation: " + e);
+            return false;
+        }
     }
 
     JSONObject getProjectInfo(String name) {
         var project = request.get("repos/" + name)
                              .execute();
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -27,10 +27,11 @@
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.network.*;
 import org.openjdk.skara.vcs.Hash;
 
+import java.io.*;
 import java.net.URI;
 import java.time.*;
 import java.time.format.DateTimeFormatter;
 import java.util.*;
 import java.util.logging.Logger;
@@ -134,66 +135,78 @@
         return comment;
     }
 
     @Override
     public ReviewComment addReviewComment(Hash base, Hash hash, String path, int line, String body) {
-        var rawDiff = request.get("pulls/" + json.get("number").toString())
-                             .header("Accept", "application/vnd.github.v3.diff")
-                             .executeUnparsed();
-        var diff = PositionMapper.parse(rawDiff);
-
-        var query = JSON.object()
-                .put("body", body)
-                .put("commit_id", hash.hex())
-                .put("path", path)
-                .put("position", diff.lineToPosition(path, line));
-        var response = request.post("pulls/" + json.get("number").toString() + "/comments")
-                .body(query)
-                .execute();
-        return parseReviewComment(null, response.asObject(), diff);
+        try {
+            var rawDiff = request.get("pulls/" + json.get("number").toString())
+                                 .header("Accept", "application/vnd.github.v3.diff")
+                                 .executeUnparsed();
+            var diff = PositionMapper.parse(rawDiff);
+
+            var query = JSON.object()
+                            .put("body", body)
+                            .put("commit_id", hash.hex())
+                            .put("path", path)
+                            .put("position", diff.lineToPosition(path, line));
+            var response = request.post("pulls/" + json.get("number").toString() + "/comments")
+                                  .body(query)
+                                  .execute();
+            return parseReviewComment(null, response.asObject(), diff);
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
     }
 
     @Override
     public ReviewComment addReviewCommentReply(ReviewComment parent, String body) {
-        var rawDiff = request.get("pulls/" + json.get("number").toString())
-                             .header("Accept", "application/vnd.github.v3.diff")
-                             .executeUnparsed();
-        var diff = PositionMapper.parse(rawDiff);
-
-        var query = JSON.object()
-                        .put("body", body)
-                .put("in_reply_to", Integer.parseInt(parent.threadId()));
-        var response = request.post("pulls/" + json.get("number").toString() + "/comments")
-                .body(query)
-                .execute();
-        return parseReviewComment(parent, response.asObject(), diff);
+        try {
+            var rawDiff = request.get("pulls/" + json.get("number").toString())
+                                 .header("Accept", "application/vnd.github.v3.diff")
+                                 .executeUnparsed();
+            var diff = PositionMapper.parse(rawDiff);
+
+            var query = JSON.object()
+                            .put("body", body)
+                            .put("in_reply_to", Integer.parseInt(parent.threadId()));
+            var response = request.post("pulls/" + json.get("number").toString() + "/comments")
+                                  .body(query)
+                                  .execute();
+            return parseReviewComment(parent, response.asObject(), diff);
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
     }
 
     @Override
     public List<ReviewComment> reviewComments() {
-        var rawDiff = request.get("pulls/" + json.get("number").toString())
-                          .header("Accept", "application/vnd.github.v3.diff")
-                          .executeUnparsed();
-        var diff = PositionMapper.parse(rawDiff);
-
-        var ret = new ArrayList<ReviewComment>();
-        var reviewComments = request.get("pulls/" + json.get("number").toString() + "/comments").execute().stream()
-                                    .map(JSONValue::asObject)
-                                    .collect(Collectors.toList());
-        var idToComment = new HashMap<String, ReviewComment>();
-
-        for (var reviewComment : reviewComments) {
-            ReviewComment parent = null;
-            if (reviewComment.contains("in_reply_to_id")) {
-                parent = idToComment.get(reviewComment.get("in_reply_to_id").toString());
+        try {
+            var rawDiff = request.get("pulls/" + json.get("number").toString())
+                                 .header("Accept", "application/vnd.github.v3.diff")
+                                 .executeUnparsed();
+            var diff = PositionMapper.parse(rawDiff);
+
+            var ret = new ArrayList<ReviewComment>();
+            var reviewComments = request.get("pulls/" + json.get("number").toString() + "/comments").execute().stream()
+                                        .map(JSONValue::asObject)
+                                        .collect(Collectors.toList());
+            var idToComment = new HashMap<String, ReviewComment>();
+
+            for (var reviewComment : reviewComments) {
+                ReviewComment parent = null;
+                if (reviewComment.contains("in_reply_to_id")) {
+                    parent = idToComment.get(reviewComment.get("in_reply_to_id").toString());
+                }
+                var comment = parseReviewComment(parent, reviewComment, diff);
+                idToComment.put(comment.id(), comment);
+                ret.add(comment);
             }
-            var comment = parseReviewComment(parent, reviewComment, diff);
-            idToComment.put(comment.id(), comment);
-            ret.add(comment);
-        }
 
-        return ret;
+            return ret;
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
     }
 
     @Override
     public Hash headHash() {
         return new Hash(json.get("head").get("sha").asString());
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
@@ -25,18 +25,21 @@
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.network.*;
 
+import java.io.IOException;
 import java.net.*;
 import java.nio.charset.StandardCharsets;
 import java.util.*;
+import java.util.logging.Logger;
 
 public class GitLabHost implements Forge {
     private final URI uri;
     private final Credential pat;
     private final RestRequest request;
+    private final Logger log = Logger.getLogger("org.openjdk.skara.forge.gitlab");
 
     GitLabHost(URI uri, Credential pat) {
         this.uri = uri;
         this.pat = pat;
 
@@ -64,14 +67,24 @@
         return Optional.ofNullable(pat);
     }
 
     @Override
     public boolean isValid() {
-        var version = request.get("version")
-                              .onError(r -> JSON.object().put("invalid", true))
-                              .execute();
-        return !version.contains("invalid");
+        try {
+            var version = request.get("version")
+                                  .executeUnparsed();
+            var parsed = JSON.parse(version);
+            if (parsed != null && parsed.contains("version")) {
+                return true;
+            } else {
+                log.fine("Error during GitLab host validation: unexpected version: " + version);
+                return false;
+            }
+        } catch (IOException e) {
+            log.fine("Error during GitLab host validation: " + e);
+            return false;
+        }
     }
 
     JSONObject getProjectInfo(String name) {
         var encodedName = URLEncoder.encode(name, StandardCharsets.US_ASCII);
 
diff a/network/src/main/java/org/openjdk/skara/network/RestRequest.java b/network/src/main/java/org/openjdk/skara/network/RestRequest.java
--- a/network/src/main/java/org/openjdk/skara/network/RestRequest.java
+++ b/network/src/main/java/org/openjdk/skara/network/RestRequest.java
@@ -22,11 +22,11 @@
  */
 package org.openjdk.skara.network;
 
 import org.openjdk.skara.json.*;
 
-import java.io.IOException;
+import java.io.*;
 import java.net.URI;
 import java.net.http.*;
 import java.time.Duration;
 import java.util.*;
 import java.util.logging.Logger;
@@ -148,14 +148,18 @@
             headers.put(name, value);
             return this;
         }
 
         public JSONValue execute() {
-            return RestRequest.this.execute(this);
+            try {
+                return RestRequest.this.execute(this);
+            } catch (IOException e) {
+                throw new UncheckedIOException(e);
+            }
         }
 
-        public String executeUnparsed() {
+        public String executeUnparsed() throws IOException {
             return RestRequest.this.executeUnparsed(this);
         }
     }
 
     private final URI apiBase;
@@ -214,22 +218,22 @@
 
     void setRetryBackoffStep(Duration duration) {
         retryBackoffStep = duration;
     }
 
-    private HttpResponse<String> sendRequest(HttpRequest request) {
+    private HttpResponse<String> sendRequest(HttpRequest request) throws IOException {
         HttpResponse<String> response;
 
         var retryCount = 0;
         while (true) {
             try {
                 var client = HttpClient.newBuilder()
                                        .connectTimeout(Duration.ofSeconds(10))
                                        .build();
                 response = client.send(request, HttpResponse.BodyHandlers.ofString());
                 break;
-            } catch (IOException | InterruptedException e) {
+            } catch (InterruptedException e) {
                 if (retryCount < 5) {
                     try {
                         Thread.sleep(retryCount * retryBackoffStep.toMillis());
                     } catch (InterruptedException ignored) {
                     }
@@ -295,11 +299,11 @@
     private Map<String, String> parseLink(String link) {
         return linkPattern.matcher(link).results()
                           .collect(Collectors.toMap(m -> m.group(2), m -> m.group(1)));
     }
 
-    private JSONValue execute(QueryBuilder queryBuilder) {
+    private JSONValue execute(QueryBuilder queryBuilder) throws IOException {
         var request = createRequest(queryBuilder.queryType, queryBuilder.endpoint, queryBuilder.composedBody(),
                                     queryBuilder.params, queryBuilder.headers);
         var response = sendRequest(request);
         var errorTransform = transformBadResponse(response, queryBuilder);
         if (errorTransform.isPresent()) {
@@ -337,14 +341,17 @@
         }
 
         return new JSONArray(ret.stream().flatMap(JSONArray::stream).toArray(JSONValue[]::new));
     }
 
-    private String executeUnparsed(QueryBuilder queryBuilder) {
+    private String executeUnparsed(QueryBuilder queryBuilder) throws IOException {
         var request = createRequest(queryBuilder.queryType, queryBuilder.endpoint, queryBuilder.composedBody(),
                                     queryBuilder.params, queryBuilder.headers);
         var response = sendRequest(request);
+        if (response.statusCode() >= 400) {
+            throw new IOException("Bad response: " + response.statusCode());
+        }
         return response.body();
     }
 
     public QueryBuilder get(String endpoint) {
         return new QueryBuilder(RequestType.GET, endpoint);
