diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
@@ -21,23 +21,23 @@
  * questions.
  */
 package org.openjdk.skara.bot;
 
 import org.openjdk.skara.forge.*;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.host.Credential;
 import org.openjdk.skara.issuetracker.*;
-import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.json.JSONObject;
+import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.vcs.VCS;
 
 import java.io.*;
 import java.net.URI;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
 import java.time.Duration;
 import java.util.*;
 import java.util.logging.Logger;
-import java.util.regex.Pattern;
 
 public class BotRunnerConfiguration {
     private final Logger log;
     private final JSONObject config;
     private final Map<String, Forge> repositoryHosts;
@@ -62,35 +62,35 @@
 
         for (var entry : config.get("forges").fields()) {
             if (entry.value().contains("gitlab")) {
                 var gitlab = entry.value().get("gitlab");
                 var uri = URIBuilder.base(gitlab.get("url").asString()).build();
-                var pat = new PersonalAccessToken(gitlab.get("username").asString(), gitlab.get("pat").asString());
-                ret.put(entry.name(), ForgeFactory.createGitLabHost(uri, pat));
+                var pat = new Credential(gitlab.get("username").asString(), gitlab.get("pat").asString());
+                ret.put(entry.name(), Forge.from("gitlab", uri, pat, gitlab.asObject()));
             } else if (entry.value().contains("github")) {
                 var github = entry.value().get("github");
                 URI uri;
                 if (github.contains("url")) {
                     uri = URIBuilder.base(github.get("url").asString()).build();
                 } else {
                     uri = URIBuilder.base("https://github.com/").build();
                 }
-                Pattern webUriPattern = null;
-                String webUriReplacement = null;
-                if (github.contains("weburl")) {
-                    webUriPattern = Pattern.compile(github.get("weburl").get("pattern").asString());
-                    webUriReplacement = github.get("weburl").get("replacement").asString();
-                }
 
                 if (github.contains("app")) {
                     var keyFile = cwd.resolve(github.get("app").get("key").asString());
-                    ret.put(entry.name(), ForgeFactory.createGitHubHost(uri, webUriPattern, webUriReplacement, keyFile.toString(),
-                                                                       github.get("app").get("id").asString(),
-                                                                       github.get("app").get("installation").asString()));
+                    try {
+                        var keyContents = Files.readString(keyFile, StandardCharsets.UTF_8);
+                        var pat = new Credential(github.get("app").get("id").asString() + ";" +
+                                                         github.get("app").get("installation").asString(),
+                                                 keyContents);
+                        ret.put(entry.name(), Forge.from("github", uri, pat, github.asObject()));
+                    } catch (IOException e) {
+                        throw new ConfigurationError("Cannot find key file: " + keyFile);
+                    }
                 } else {
-                    var pat = new PersonalAccessToken(github.get("username").asString(), github.get("pat").asString());
-                    ret.put(entry.name(), ForgeFactory.createGitHubHost(uri, pat));
+                    var pat = new Credential(github.get("username").asString(), github.get("pat").asString());
+                    ret.put(entry.name(), Forge.from("github", uri, pat, github.asObject()));
                 }
             } else {
                 throw new ConfigurationError("Host " + entry.name());
             }
         }
diff a/cli/src/main/java/org/openjdk/skara/cli/GitFork.java b/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
@@ -144,19 +144,22 @@
 
         if (credentials.username() == null) {
             exit("No username for host " + hostName + " found, use git-credentials or the flag --username");
         }
 
-        var host = Forge.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
+        var host = Forge.from(uri, new Credential(credentials.username(), credentials.password()));
+        if (host.isEmpty() || !host.get().isValid()) {
+            exit("Failed to connect to host " + hostName);
+        }
         if (path.endsWith(".git")) {
             path = path.substring(0, path.length() - 4);
         }
         if (path.startsWith("/")) {
             path = path.substring(1);
         }
 
-        var fork = host.repository(path).fork();
+        var fork = host.get().repository(path).fork();
 
         if (token == null) {
             GitCredentials.approve(credentials);
         }
 
diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -99,15 +99,18 @@
         }
         return name;
     }
 
     private static HostedRepository getHostedRepositoryFor(URI uri, GitCredentials credentials) throws IOException {
-        var host = Forge.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
+        var host = Forge.from(uri, new Credential(credentials.username(), credentials.password()));
         if (System.getenv("GIT_TOKEN") == null) {
             GitCredentials.approve(credentials);
         }
-        var remoteRepo = host.repository(projectName(uri));
+        if (host.isEmpty() || !host.get().isValid()) {
+            exit("error: failed to connect to host " + uri);
+        }
+        var remoteRepo = host.get().repository(projectName(uri));
         var parentRepo = remoteRepo.parent();
         var targetRepo = parentRepo.isPresent() ? parentRepo.get() : remoteRepo;
         return targetRepo;
     }
 
@@ -307,11 +310,14 @@
         var remotePullPath = repo.pullPath(remote);
         var username = arguments.contains("username") ? arguments.get("username").asString() : null;
         var token = isMercurial ? System.getenv("HG_TOKEN") :  System.getenv("GIT_TOKEN");
         var uri = Remote.toWebURI(remotePullPath);
         var credentials = GitCredentials.fill(uri.getHost(), uri.getPath(), username, token, uri.getScheme());
-        var host = Forge.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
+        var host = Forge.from(uri, new Credential(credentials.username(), credentials.password()));
+        if (host.isEmpty() || !host.get().isValid()) {
+            exit("error: failed to connect to host " + uri);
+        }
 
         var action = arguments.at(0).asString();
         if (action.equals("create")) {
             if (isMercurial) {
                 var currentBookmark = repo.currentBookmark();
@@ -410,11 +416,11 @@
                     System.err.println("");
                     System.err.println("(You can later restore the changes by running: hg unshelve)");
                     System.exit(1);
                 }
 
-                var remoteRepo = host.repository(projectName(uri));
+                var remoteRepo = host.get().repository(projectName(uri));
                 if (token == null) {
                     GitCredentials.approve(credentials);
                 }
                 var parentRepo = remoteRepo.parent().orElseThrow(() ->
                         new IOException("error: remote repository " + remotePullPath + " is not a fork of any repository"));
@@ -478,11 +484,11 @@
 
                 var pr = remoteRepo.createPullRequest(parentRepo, targetBranch, bookmark.name(), title, body);
                 if (arguments.contains("assignees")) {
                     var usernames = Arrays.asList(arguments.get("assignees").asString().split(","));
                     var assignees = usernames.stream()
-                                             .map(host::user)
+                                             .map(u -> host.get().user(u))
                                              .collect(Collectors.toList());
                     pr.setAssignees(assignees);
                 }
                 System.out.println(pr.webUrl().toString());
                 Files.deleteIfExists(file);
@@ -567,11 +573,11 @@
                 System.err.println("");
                 System.err.println("(You can later restore the changes by running: git stash pop)");
                 System.exit(1);
             }
 
-            var remoteRepo = host.repository(projectName(uri));
+            var remoteRepo = host.get().repository(projectName(uri));
             if (token == null) {
                 GitCredentials.approve(credentials);
             }
             var parentRepo = remoteRepo.parent().orElseThrow(() ->
                     new IOException("error: remote repository " + remotePullPath + " is not a fork of any repository"));
@@ -635,11 +641,11 @@
 
             var pr = remoteRepo.createPullRequest(parentRepo, targetBranch, currentBranch.name(), title, body);
             if (arguments.contains("assignees")) {
                 var usernames = Arrays.asList(arguments.get("assignees").asString().split(","));
                 var assignees = usernames.stream()
-                                         .map(host::user)
+                                         .map(u -> host.get().user(u))
                                          .collect(Collectors.toList());
                 pr.setAssignees(assignees);
             }
             System.out.println(pr.webUrl().toString());
             Files.deleteIfExists(file);
@@ -832,11 +838,11 @@
             var remoteRepo = getHostedRepositoryFor(uri, credentials);
             var pr = remoteRepo.pullRequest(prId.asString());
             if (arguments.contains("assignees")) {
                 var usernames = Arrays.asList(arguments.get("assignees").asString().split(","));
                 var assignees = usernames.stream()
-                    .map(host::user)
+                    .map(u -> host.get().user(u))
                     .collect(Collectors.toList());
                 pr.setAssignees(assignees);
             }
         } else {
             exit("error: unexpected action: " + action);
diff a/forge/build.gradle b/forge/build.gradle
--- a/forge/build.gradle
+++ b/forge/build.gradle
@@ -26,10 +26,12 @@
     test {
         requires 'org.openjdk.skara.test'
         requires 'org.junit.jupiter.api'
         requires 'jdk.httpserver'
         opens 'org.openjdk.skara.forge' to 'org.junit.platform.commons'
+        opens 'org.openjdk.skara.forge.github' to 'org.junit.platform.commons'
+        opens 'org.openjdk.skara.forge.gitlab' to 'org.junit.platform.commons'
     }
 }
 
 dependencies {
     implementation project(':vcs')
diff a/forge/src/main/java/module-info.java b/forge/src/main/java/module-info.java
--- a/forge/src/main/java/module-info.java
+++ b/forge/src/main/java/module-info.java
@@ -32,6 +32,10 @@
     requires transitive org.openjdk.skara.host;
     requires java.net.http;
     requires java.logging;
 
     exports org.openjdk.skara.forge;
+
+    uses org.openjdk.skara.forge.ForgeFactory;
+
+    provides org.openjdk.skara.forge.ForgeFactory with org.openjdk.skara.forge.github.GitHubForgeFactory, org.openjdk.skara.forge.gitlab.GitLabForgeFactory;
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/Forge.java b/forge/src/main/java/org/openjdk/skara/forge/Forge.java
--- a/forge/src/main/java/org/openjdk/skara/forge/Forge.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/Forge.java
@@ -21,19 +21,49 @@
  * questions.
  */
 package org.openjdk.skara.forge;
 
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.json.JSONObject;
 
 import java.net.URI;
+import java.util.*;
+import java.util.stream.Collectors;
 
 public interface Forge extends Host {
     HostedRepository repository(String name);
     boolean supportsReviewBody();
 
-    static Forge from(URI uri, PersonalAccessToken pat) {
-        return ForgeFactory.createFromURI(uri, pat);
+    static Forge from(String name, URI uri, Credential credential, JSONObject configuration) {
+        var factory = ForgeFactory.getForgeFactories().stream()
+                                    .filter(f -> f.name().equals(name))
+                                    .findFirst();
+        if (factory.isEmpty()) {
+            throw new RuntimeException("No forge factory named '" + name + "' found - check module path");
+        }
+        return factory.get().create(uri, credential, configuration);
     }
-    static Forge from(URI uri) {
-        return ForgeFactory.createFromURI(uri, null);
+
+    static Optional<Forge> from(URI uri, Credential credential, JSONObject configuration) {
+        var factories = ForgeFactory.getForgeFactories().stream()
+                                    .sorted(Comparator.comparing(f -> !uri.getHost().contains(f.name())))
+                                    .collect(Collectors.toList());
+        for (var factory : factories) {
+            try {
+                var forge = factory.create(uri, credential, configuration);
+                if (forge.isValid()) {
+                    return Optional.of(forge);
+                }
+            } catch (RuntimeException ignored) {
+            }
+        }
+        return Optional.empty();
+    }
+
+    static Optional<Forge> from(URI uri, Credential credential) {
+        return from(uri, credential, null);
+    }
+
+    static Optional<Forge> from(URI uri) {
+        return from(uri, null);
     }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/ForgeFactory.java b/forge/src/main/java/org/openjdk/skara/forge/ForgeFactory.java
--- a/forge/src/main/java/org/openjdk/skara/forge/ForgeFactory.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/ForgeFactory.java
@@ -20,58 +20,32 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.forge;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.host.Credential;
+import org.openjdk.skara.json.JSONObject;
 
 import java.net.URI;
-import java.util.regex.Pattern;
-
-public class ForgeFactory {
-    public static Forge createGitHubHost(URI uri, Pattern webUriPattern, String webUriReplacement, String keyFile, String issue, String id) {
-        var app = new GitHubApplication(keyFile, issue, id);
-        return new GitHubHost(uri, app, webUriPattern, webUriReplacement);
-    }
-
-    public static Forge createGitHubHost(URI uri, PersonalAccessToken pat) {
-        if (pat != null) {
-            return new GitHubHost(uri, pat);
-        } else {
-            return new GitHubHost(uri);
-        }
-    }
-
-    public static Forge createGitLabHost(URI uri, PersonalAccessToken pat) {
-        if (pat != null) {
-            return new GitLabHost(uri, pat);
-        } else {
-            return new GitLabHost(uri);
-        }
+import java.util.*;
+import java.util.stream.*;
+
+public interface ForgeFactory {
+
+    /**
+     * A user-friendly name for the given forge, used for configuration section naming. Should be lower case.
+     * @return
+     */
+    String name();
+
+    /**
+     * Instantiate an instance of this forge.
+     * @return
+     */
+    Forge create(URI uri, Credential credential, JSONObject configuration);
+
+    static List<ForgeFactory> getForgeFactories() {
+        return StreamSupport.stream(ServiceLoader.load(ForgeFactory.class).spliterator(), false)
+                            .collect(Collectors.toList());
     }
 
-    public static Forge createFromURI(URI uri, PersonalAccessToken pat) throws IllegalArgumentException {
-        // Short-circuit
-        if (uri.toString().contains("github")) {
-            return createGitHubHost(uri, pat);
-        } else if (uri.toString().contains("gitlab")) {
-            return createGitLabHost(uri, pat);
-        }
-
-        try {
-            var gitLabHost = createGitLabHost(uri, pat);
-            if (gitLabHost.isValid()) {
-                return gitLabHost;
-            }
-        } catch (RuntimeException e) {
-            try {
-                var gitHubHost = createGitHubHost(uri, pat);
-                if (gitHubHost.isValid()) {
-                    return gitHubHost;
-                }
-            } catch (RuntimeException ignored) {
-            }
-        }
-
-        throw new IllegalArgumentException("Unable to detect host type from URI: " + uri);
-    }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/GitHubApplication.java b/forge/src/main/java/org/openjdk/skara/forge/GitHubApplication.java
--- a/forge/src/main/java/org/openjdk/skara/forge/GitHubApplication.java
+++ /dev/null
@@ -1,237 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.forge;
-
-import org.openjdk.skara.network.URIBuilder;
-import org.openjdk.skara.json.*;
-
-import java.io.*;
-import java.net.URI;
-import java.net.http.*;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.*;
-import java.security.*;
-import java.security.spec.*;
-import java.time.*;
-import java.util.Base64;
-import java.util.logging.Logger;
-import java.util.regex.Pattern;
-
-class GitHubApplicationError extends RuntimeException {
-    GitHubApplicationError(String msg) {
-        super(msg);
-    }
-}
-
-class Token {
-
-    static class GeneratorError extends Exception {
-        public GeneratorError(String message) { super(message); }
-    }
-
-    public interface TokenGenerator {
-        String generate() throws GeneratorError;
-    }
-
-    private final TokenGenerator generator;
-    private final Duration expiration;
-    private String cached;
-    private Instant generatedAt;
-
-    Token(TokenGenerator generator, Duration expiration) {
-        this.generator = generator;
-        this.expiration = expiration;
-    }
-
-    public void expire() {
-        generatedAt = null;
-    }
-
-    @Override
-    public String toString() {
-
-        if (generatedAt != null) {
-            if (generatedAt.plus(expiration).isAfter(Instant.now())) {
-                return cached;
-            }
-        }
-
-        try {
-            cached = generator.generate();
-            generatedAt = Instant.now();
-            return cached;
-        } catch (GeneratorError generatorError) {
-            // FIXME? The operation could be retried here
-            throw new GitHubApplicationError("Failed to generate authentication token (" + generatorError.getMessage() + ")");
-        }
-    }
-}
-
-public class GitHubApplication {
-    private final String issue;
-    private final String id;
-
-    private final URI apiBase;
-    private final PrivateKey key;
-    private final Token jwt;
-    private final Token installationToken;
-
-    private final Logger log;
-
-    static class GitHubConfigurationError extends RuntimeException {
-        public GitHubConfigurationError(String message) {
-            super(message);
-        }
-    }
-
-    public GitHubApplication(String keyFile, String issue, String id) {
-
-        log = Logger.getLogger("org.openjdk.host.github");
-
-        apiBase = URIBuilder.base("https://api.github.com/").build();
-        this.issue = issue;
-        this.id = id;
-
-        key = loadPkcs8PemFromFile(keyFile);
-        jwt = new Token(this::generateJsonWebToken, Duration.ofMinutes(5));
-        installationToken = new Token(this::generateInstallationToken, Duration.ofMinutes(30));
-    }
-
-    private PrivateKey loadPkcs8PemFromFile(String keyFile) {
-        try {
-            var pem = new String(Files.readAllBytes(Paths.get(keyFile)));
-            var pemPattern = Pattern.compile("^-*BEGIN PRIVATE KEY-*$(.*)^-*END PRIVATE KEY-*",
-                    Pattern.DOTALL | Pattern.MULTILINE);
-            var keyString = pemPattern.matcher(pem).replaceFirst("$1");
-            //keyString = keyString.replace("\n", "");
-            var rawKey = Base64.getMimeDecoder().decode(keyString);
-            var factory = KeyFactory.getInstance("RSA");
-            return factory.generatePrivate(new PKCS8EncodedKeySpec(rawKey));
-        } catch (NoSuchAlgorithmException | InvalidKeySpecException | IOException e) {
-            throw new GitHubConfigurationError("Unable to load private key (" + keyFile + ": " + e + ")");
-        }
-    }
-
-    private String generateJsonWebToken() {
-        var issuedAt = ZonedDateTime.now(ZoneOffset.UTC);
-        var expires = issuedAt.plus(Duration.ofMinutes(8));
-
-        var header = Base64.getUrlEncoder().encode(JSON.object()
-                                                       .put("alg", "RS256")
-                                                       .put("typ", "JWT")
-                                                       .toString().getBytes(StandardCharsets.UTF_8));
-        var claims = Base64.getUrlEncoder().encode(JSON.object()
-                .put("iss", issue)
-                .put("iat", (int)issuedAt.toEpochSecond())
-                .put("exp", (int)expires.toEpochSecond())
-                .toString().getBytes(StandardCharsets.UTF_8));
-        var separator = ".".getBytes(StandardCharsets.UTF_8);
-
-        try {
-            var signer = Signature.getInstance("SHA256withRSA");
-            signer.initSign(key);
-            var payload = new ByteArrayOutputStream();
-            payload.write(header);
-            payload.write(separator);
-            payload.write(claims);
-            signer.update(payload.toByteArray());
-            var signature = Base64.getUrlEncoder().encode(signer.sign());
-
-            var token = new ByteArrayOutputStream();
-            token.write(header);
-            token.write(separator);
-            token.write(claims);
-            token.write(separator);
-            token.write(signature);
-
-            return token.toString(StandardCharsets.US_ASCII);
-        } catch (NoSuchAlgorithmException | SignatureException e) {
-            throw new RuntimeException(e);
-        } catch (InvalidKeyException e) {
-            throw new GitHubConfigurationError("Invalid private key");
-        } catch (IOException e) {
-            throw new UncheckedIOException(e);
-        }
-    }
-
-    private String generateInstallationToken() throws Token.GeneratorError {
-        var tokens = URIBuilder.base(apiBase).setPath("/installations/" + id + "/access_tokens").build();
-        var client = HttpClient.newBuilder()
-                               .connectTimeout(Duration.ofSeconds(10))
-                               .build();
-
-        try {
-            var response = client.send(
-                    HttpRequest.newBuilder()
-                               .uri(tokens)
-                               .timeout(Duration.ofSeconds(30))
-                               .header("Authorization", "Bearer " + jwt)
-                               .header("Accept", "application/vnd.github.machine-man-preview+json")
-                               .POST(HttpRequest.BodyPublishers.noBody())
-                               .build(),
-                    HttpResponse.BodyHandlers.ofString()
-            );
-
-            var data = JSON.parse(response.body());
-            if (!data.contains("token")) {
-                throw new Token.GeneratorError("Unknown data returned: " + data);
-            }
-            return data.get("token").asString();
-        } catch (IOException e) {
-            throw new UncheckedIOException(e);
-        } catch (InterruptedException e) {
-            throw new Token.GeneratorError(e.toString());
-        }
-    }
-
-    public String getInstallationToken() {
-        return installationToken.toString();
-    }
-
-    JSONObject getAppDetails() {
-        var details = URIBuilder.base(apiBase).setPath("/app").build();
-        var client = HttpClient.newBuilder()
-                               .connectTimeout(Duration.ofSeconds(10))
-                               .build();
-
-        try {
-            var response = client.send(
-                    HttpRequest.newBuilder()
-                               .uri(details)
-                               .timeout(Duration.ofSeconds(30))
-                               .header("Authorization", "Bearer " + jwt)
-                               .header("Accept", "application/vnd.github.machine-man-preview+json")
-                               .GET()
-                               .build(),
-                    HttpResponse.BodyHandlers.ofString()
-            );
-
-            var data = JSON.parse(response.body());
-            return data.asObject();
-        } catch (IOException e) {
-            throw new UncheckedIOException(e);
-        } catch (InterruptedException e) {
-            throw new RuntimeException(e);
-        }
-    }
-}
diff a/forge/src/main/java/org/openjdk/skara/forge/GitHubHost.java b/forge/src/main/java/org/openjdk/skara/forge/GitHubHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/GitHubHost.java
+++ /dev/null
@@ -1,216 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.forge;
-
-import org.openjdk.skara.host.*;
-import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.*;
-
-import java.net.*;
-import java.nio.charset.StandardCharsets;
-import java.util.Arrays;
-import java.util.regex.Pattern;
-
-public class GitHubHost implements Forge {
-    private final URI uri;
-    private final Pattern webUriPattern;
-    private final String webUriReplacement;
-    private final GitHubApplication application;
-    private final PersonalAccessToken pat;
-    private final RestRequest request;
-    private HostUser currentUser;
-
-    public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement) {
-        this.uri = uri;
-        this.webUriPattern = webUriPattern;
-        this.webUriReplacement = webUriReplacement;
-        this.application = application;
-        this.pat = null;
-
-        var baseApi = URIBuilder.base(uri)
-                .appendSubDomain("api")
-                .setPath("/")
-                .build();
-
-        request = new RestRequest(baseApi, () -> Arrays.asList(
-                "Authorization", "token " + getInstallationToken(),
-                "Accept", "application/vnd.github.machine-man-preview+json",
-                "Accept", "application/vnd.github.antiope-preview+json"));
-    }
-
-    public GitHubHost(URI uri, PersonalAccessToken pat) {
-        this.uri = uri;
-        this.webUriPattern = null;
-        this.webUriReplacement = null;
-        this.pat = pat;
-        this.application = null;
-
-        var baseApi = URIBuilder.base(uri)
-                                .appendSubDomain("api")
-                                .setPath("/")
-                                .build();
-
-        request = new RestRequest(baseApi, () -> Arrays.asList(
-                "Authorization", "token " + pat.token()));
-    }
-
-    public GitHubHost(URI uri) {
-        this.uri = uri;
-        this.webUriPattern = null;
-        this.webUriReplacement = null;
-        this.pat = null;
-        this.application = null;
-
-        var baseApi = URIBuilder.base(uri)
-                                .appendSubDomain("api")
-                                .setPath("/")
-                                .build();
-
-        request = new RestRequest(baseApi);
-    }
-
-    public URI getURI() {
-        return uri;
-    }
-
-    URI getWebURI(String endpoint) {
-        var baseWebUri = URIBuilder.base(uri)
-                                   .setPath(endpoint)
-                                   .build();
-
-        if (webUriPattern == null) {
-            return baseWebUri;
-        }
-
-        var matcher = webUriPattern.matcher(baseWebUri.toString());
-        if (!matcher.matches()) {
-            return baseWebUri;
-
-        }
-        return URIBuilder.base(matcher.replaceAll(webUriReplacement)).build();
-    }
-
-    String getInstallationToken() {
-        if (application != null) {
-            return application.getInstallationToken();
-        } else {
-            return pat.token();
-        }
-    }
-
-    private String getFullName(String userName) {
-        var details = user(userName);
-        return details.fullName();
-    }
-
-    // Most GitHub API's return user information in this format
-    HostUser parseUserField(JSONValue json) {
-        return parseUserObject(json.get("user"));
-    }
-
-    HostUser parseUserObject(JSONValue json) {
-        return new HostUser(json.get("id").asInt(), json.get("login").asString(),
-                            () -> getFullName(json.get("login").asString()));
-    }
-
-    @Override
-    public boolean isValid() {
-        var endpoints = request.get("")
-                               .onError(response -> JSON.of())
-                               .execute();
-        return !endpoints.isNull();
-    }
-
-    JSONObject getProjectInfo(String name) {
-        var project = request.get("repos/" + name)
-                             .execute();
-        return project.asObject();
-    }
-
-    JSONObject runSearch(String query) {
-        var result = request.get("search/issues")
-                            .param("q", query)
-                            .execute();
-        return result.asObject();
-    }
-
-    @Override
-    public HostedRepository repository(String name) {
-        return new GitHubRepository(this, name);
-    }
-
-    @Override
-    public HostUser user(String username) {
-        var details = request.get("users/" + URLEncoder.encode(username, StandardCharsets.UTF_8)).execute().asObject();
-
-        // Always present
-        var login = details.get("login").asString();
-        var id = details.get("id").asInt();
-
-        var name = details.get("name").asString();
-        if (name == null) {
-            name = login;
-        }
-        return new HostUser(id, login, name);
-    }
-
-    @Override
-    public HostUser currentUser() {
-        if (currentUser == null) {
-            if (application != null) {
-                var appDetails = application.getAppDetails();
-                var appName = appDetails.get("name").asString() + "[bot]";
-                currentUser = user(appName);
-            } else if (pat != null) {
-                currentUser = user(pat.userName());
-            } else {
-                throw new IllegalStateException("No credentials present");
-            }
-        }
-        return currentUser;
-    }
-
-    @Override
-    public boolean supportsReviewBody() {
-        return true;
-    }
-
-    @Override
-    public boolean isMemberOf(String groupId, HostUser user) {
-        long gid = 0L;
-        try {
-            gid = Long.parseLong(groupId);
-        } catch (NumberFormatException e) {
-            throw new IllegalArgumentException("Group id is not a number: " + groupId);
-        }
-        var username = URLEncoder.encode(user.userName(), StandardCharsets.UTF_8);
-        var orgs = request.get("users/" + username + "/orgs").execute().asArray();
-        for (var org : orgs) {
-            if (org.get("id").asLong() == gid) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-}
diff a/forge/src/main/java/org/openjdk/skara/forge/GitHubRepository.java b/forge/src/main/java/org/openjdk/skara/forge/GitHubRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/GitHubRepository.java
+++ /dev/null
@@ -1,206 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.forge;
-
-import org.openjdk.skara.issuetracker.Issue;
-import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.*;
-import org.openjdk.skara.vcs.*;
-
-import java.net.URI;
-import java.nio.charset.StandardCharsets;
-import java.util.*;
-import java.util.regex.Pattern;
-import java.util.stream.Collectors;
-
-public class GitHubRepository implements HostedRepository {
-    private final GitHubHost gitHubHost;
-    private final String repository;
-    private final RestRequest request;
-    private final JSONValue json;
-    private final Pattern pullRequestPattern;
-
-    GitHubRepository(GitHubHost gitHubHost, String repository) {
-        this.gitHubHost = gitHubHost;
-        this.repository = repository;
-
-        var apiBase = URIBuilder
-                .base(gitHubHost.getURI())
-                .appendSubDomain("api")
-                .setPath("/repos/" + repository + "/")
-                .build();
-        request = new RestRequest(apiBase, () -> Arrays.asList(
-                "Authorization", "token " + gitHubHost.getInstallationToken(),
-                "Accept", "application/vnd.github.machine-man-preview+json",
-                "Accept", "application/vnd.github.antiope-preview+json",
-                "Accept", "application/vnd.github.shadow-cat-preview+json"));
-        json = gitHubHost.getProjectInfo(repository);
-        var urlPattern = gitHubHost.getWebURI("/" + repository + "/pull/").toString();
-        pullRequestPattern = Pattern.compile(urlPattern + "(\\d+)");
-    }
-
-    @Override
-    public Optional<HostedRepository> parent() {
-        if (json.get("fork").asBoolean()) {
-            var parent = json.get("parent").get("full_name").asString();
-            return Optional.of(new GitHubRepository(gitHubHost, parent));
-        }
-        return Optional.empty();
-    }
-
-    @Override
-    public Forge forge() {
-        return gitHubHost;
-    }
-
-    @Override
-    public PullRequest createPullRequest(HostedRepository target,
-                                         String targetRef,
-                                         String sourceRef,
-                                         String title,
-                                         List<String> body,
-                                         boolean draft) {
-        if (!(target instanceof GitHubRepository)) {
-            throw new IllegalArgumentException("target repository must be a GitHub repository");
-        }
-
-        var upstream = (GitHubRepository) target;
-        var user = forge().currentUser().userName();
-        var namespace = user.endsWith("[bot]") ? "" : user + ":";
-        var params = JSON.object()
-                         .put("title", title)
-                         .put("head", namespace + sourceRef)
-                         .put("base", targetRef)
-                         .put("body", String.join("\n", body))
-                         .put("draft", draft);
-        var pr = upstream.request.post("pulls")
-                                 .body(params)
-                                 .execute();
-
-        return new GitHubPullRequest(upstream, pr, request);
-    }
-
-    @Override
-    public PullRequest pullRequest(String id) {
-        var pr = request.get("pulls/" + id).execute();
-        return new GitHubPullRequest(this, pr, request);
-    }
-
-    @Override
-    public List<PullRequest> pullRequests() {
-        return request.get("pulls").execute().asArray().stream()
-                      .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))
-                      .collect(Collectors.toList());
-    }
-
-    @Override
-    public List<PullRequest> findPullRequestsWithComment(String author, String body) {
-        var query = "\"" + body + "\" in:comments type:pr repo:" + repository;
-        if (author != null) {
-            query += " commenter:" + author;
-        }
-        var result = gitHubHost.runSearch(query);
-        return result.get("items").stream()
-                .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))
-                .collect(Collectors.toList());
-    }
-
-    @Override
-    public Optional<PullRequest> parsePullRequestUrl(String url) {
-        var matcher = pullRequestPattern.matcher(url);
-        if (matcher.find()) {
-            return Optional.of(pullRequest(matcher.group(1)));
-        } else {
-            return Optional.empty();
-        }
-    }
-
-    @Override
-    public String name() {
-        return repository;
-    }
-
-    @Override
-    public URI url() {
-        return URIBuilder
-                .base(gitHubHost.getURI())
-                .setPath("/" + repository + ".git")
-                .setAuthentication("x-access-token:" + gitHubHost.getInstallationToken())
-                .build();
-    }
-
-    @Override
-    public URI webUrl() {
-        var endpoint = "/" + repository;
-        return gitHubHost.getWebURI(endpoint);
-    }
-
-    @Override
-    public URI webUrl(Hash hash) {
-        var endpoint = "/" + repository + "/commit/" + hash.abbreviate();
-        return gitHubHost.getWebURI(endpoint);
-    }
-
-    @Override
-    public VCS repositoryType() {
-        return VCS.GIT;
-    }
-
-    @Override
-    public String fileContents(String filename, String ref) {
-        var conf = request.get("contents/" + filename)
-                          .param("ref", ref)
-                          .execute().asObject();
-        // Content may contain newline characters
-        return conf.get("content").asString().lines()
-                   .map(line -> new String(Base64.getDecoder().decode(line), StandardCharsets.UTF_8))
-                   .collect(Collectors.joining());
-    }
-
-    @Override
-    public String namespace() {
-        return URIBuilder.base(gitHubHost.getURI()).build().getHost();
-    }
-
-    @Override
-    public Optional<WebHook> parseWebHook(JSONValue body) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public HostedRepository fork() {
-        var response = request.post("forks").execute();
-        return gitHubHost.repository(response.get("full_name").asString());
-    }
-
-    @Override
-    public long id() {
-        return json.get("id").asLong();
-    }
-
-    @Override
-    public Hash branchHash(String ref) {
-        var branch = request.get("branches/" + ref).execute();
-        return new Hash(branch.get("commit").get("sha").asString());
-    }
-}
diff a/forge/src/main/java/org/openjdk/skara/forge/GitLabHost.java b/forge/src/main/java/org/openjdk/skara/forge/GitLabHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/GitLabHost.java
+++ /dev/null
@@ -1,154 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.forge;
-
-import org.openjdk.skara.host.*;
-import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.*;
-
-import java.net.*;
-import java.nio.charset.StandardCharsets;
-import java.util.*;
-
-public class GitLabHost implements Forge {
-    private final URI uri;
-    private final PersonalAccessToken pat;
-    private final RestRequest request;
-
-    public GitLabHost(URI uri, PersonalAccessToken pat) {
-        this.uri = uri;
-        this.pat = pat;
-
-        var baseApi = URIBuilder.base(uri)
-                                .setPath("/api/v4/")
-                                .build();
-        request = new RestRequest(baseApi, () -> Arrays.asList("Private-Token", pat.token()));
-    }
-
-    public GitLabHost(URI uri) {
-        this.uri = uri;
-        this.pat = null;
-
-        var baseApi = URIBuilder.base(uri)
-                                .setPath("/api/v4/")
-                                .build();
-        request = new RestRequest(baseApi);
-    }
-
-    public URI getUri() {
-        return uri;
-    }
-
-    public Optional<PersonalAccessToken> getPat() {
-        return Optional.ofNullable(pat);
-    }
-
-    @Override
-    public boolean isValid() {
-        var version = request.get("version")
-                              .onError(r -> JSON.object().put("invalid", true))
-                              .execute();
-        return !version.contains("invalid");
-    }
-
-    JSONObject getProjectInfo(String name) {
-        var encodedName = URLEncoder.encode(name, StandardCharsets.US_ASCII);
-
-        var project = request.get("projects/" + encodedName)
-                                     .onError(r -> r.statusCode() == 404 ? JSON.object().put("retry", true) : null)
-                                     .execute();
-        if (project.contains("retry")) {
-            // Depending on web server configuration, GitLab may need double escaping of project names
-            encodedName = URLEncoder.encode(encodedName, StandardCharsets.US_ASCII);
-            project = request.get("projects/" + encodedName)
-                                     .onError(r -> r.statusCode() == 404 ? JSON.object().put("retry", true) : null)
-                                     .execute();
-        }
-        return project.asObject();
-    }
-
-    @Override
-    public HostedRepository repository(String name) {
-        return new GitLabRepository(this, name);
-    }
-
-    private HostUser parseUserDetails(JSONObject details) {
-        var id = details.get("id").asInt();
-        var username = details.get("username").asString();
-        var name = details.get("name").asString();
-        return new HostUser(id, username, name);
-    }
-
-    @Override
-    public HostUser user(String username) {
-        var details = request.get("users").param("username", username).execute().asArray();
-        if (details.size() != 1) {
-            throw new RuntimeException("Couldn't find user: " + username);
-        }
-
-        return parseUserDetails(details.get(0).asObject());
-    }
-
-    @Override
-    public HostUser currentUser() {
-        var details = request.get("user").execute().asObject();
-        return parseUserDetails(details);
-    }
-
-    @Override
-    public boolean supportsReviewBody() {
-        // GitLab CE does not support this
-        return false;
-    }
-
-    boolean isProjectForkComplete(String name) {
-        var project = getProjectInfo(name);
-        if (project.contains("import_status")) {
-            var status = project.get("import_status").asString();
-            switch (status) {
-                case "finished":
-                    return true;
-                case "started":
-                    return false;
-                default:
-                    throw new RuntimeException("Unknown fork status: " + status);
-            }
-        } else {
-            throw new RuntimeException("Project does not seem to be a fork");
-        }
-    }
-
-    @Override
-    public boolean isMemberOf(String groupId, HostUser user) {
-        long gid = 0L;
-        try {
-            gid = Long.parseLong(groupId);
-        } catch (NumberFormatException e) {
-            throw new IllegalArgumentException("Group id is not a number: " + groupId);
-        }
-        var details = request.get("groups/" + gid + "/members/" + user.id())
-                             .onError(r -> JSON.of())
-                             .execute();
-        return !details.isNull();
-    }
-}
diff a/forge/src/main/java/org/openjdk/skara/forge/GitLabRepository.java b/forge/src/main/java/org/openjdk/skara/forge/GitLabRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/GitLabRepository.java
+++ /dev/null
@@ -1,250 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.forge;
-
-import org.openjdk.skara.json.*;
-import org.openjdk.skara.network.*;
-import org.openjdk.skara.vcs.*;
-
-import java.net.*;
-import java.nio.charset.StandardCharsets;
-import java.time.Duration;
-import java.util.*;
-import java.util.regex.Pattern;
-import java.util.stream.Collectors;
-
-public class GitLabRepository implements HostedRepository {
-    private final GitLabHost gitLabHost;
-    private final String projectName;
-    private final RestRequest request;
-    private final JSONValue json;
-    private final Pattern mergeRequestPattern;
-
-    public GitLabRepository(GitLabHost gitLabHost, String projectName) {
-        this.gitLabHost = gitLabHost;
-        json = gitLabHost.getProjectInfo(projectName);
-        this.projectName = json.get("path_with_namespace").asString();
-
-        var id = json.get("id").asInt();
-        var baseApi = URIBuilder.base(gitLabHost.getUri())
-                .setPath("/api/v4/projects/" + id + "/")
-                .build();
-
-        request = gitLabHost.getPat()
-                            .map(pat -> new RestRequest(baseApi, () -> Arrays.asList("Private-Token", pat.token())))
-                            .orElseGet(() -> new RestRequest(baseApi));
-
-        var urlPattern = URIBuilder.base(gitLabHost.getUri())
-                                   .setPath("/" + projectName + "/merge_requests/").build();
-        mergeRequestPattern = Pattern.compile(urlPattern.toString() + "(\\d+)");
-    }
-
-    @Override
-    public Forge forge() {
-        return gitLabHost;
-    }
-
-    @Override
-    public Optional<HostedRepository> parent() {
-        if (json.contains("forked_from_project")) {
-            var parent = json.get("forked_from_project").get("path_with_namespace").asString();
-            return Optional.of(new GitLabRepository(gitLabHost, parent));
-        }
-        return Optional.empty();
-    }
-
-    @Override
-    public PullRequest createPullRequest(HostedRepository target,
-                                         String targetRef,
-                                         String sourceRef,
-                                         String title,
-                                         List<String> body,
-                                         boolean draft) {
-        if (!(target instanceof GitLabRepository)) {
-            throw new IllegalArgumentException("target must be a GitLab repository");
-        }
-
-        var pr = request.post("merge_requests")
-                        .body("source_branch", sourceRef)
-                        .body("target_branch", targetRef)
-                        .body("title", draft ? "WIP: " : "" + title)
-                        .body("description", String.join("\n", body))
-                        .body("target_project_id", Long.toString(target.id()))
-                        .execute();
-
-        var targetRepo = (GitLabRepository) target;
-        return new GitLabMergeRequest(targetRepo, pr, targetRepo.request);
-    }
-
-    @Override
-    public PullRequest pullRequest(String id) {
-        var pr = request.get("merge_requests/" + id).execute();
-        return new GitLabMergeRequest(this, pr, request);
-    }
-
-    @Override
-    public List<PullRequest> pullRequests() {
-        return request.get("merge_requests")
-                      .param("state", "opened")
-                      .execute().stream()
-                      .map(value -> new GitLabMergeRequest(this, value, request))
-                      .collect(Collectors.toList());
-    }
-
-    @Override
-    public List<PullRequest> findPullRequestsWithComment(String author, String body) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public Optional<PullRequest> parsePullRequestUrl(String url) {
-        var matcher = mergeRequestPattern.matcher(url);
-        if (matcher.find()) {
-            return Optional.of(pullRequest(matcher.group(1)));
-        } else {
-            return Optional.empty();
-        }
-    }
-
-    @Override
-    public String name() {
-        return projectName;
-    }
-
-    @Override
-    public URI url() {
-        var builder = URIBuilder
-                .base(gitLabHost.getUri())
-                .setPath("/" + projectName + ".git");
-        gitLabHost.getPat().ifPresent(pat -> builder.setAuthentication(pat.userName() + ":" + pat.token()));
-        return builder.build();
-    }
-
-    @Override
-    public URI webUrl() {
-        return URIBuilder.base(gitLabHost.getUri())
-                         .setPath("/" + projectName)
-                         .build();
-    }
-
-    @Override
-    public URI webUrl(Hash hash) {
-        return URIBuilder.base(gitLabHost.getUri())
-                         .setPath("/" + projectName + "/commit/" + hash.abbreviate())
-                         .build();
-    }
-
-    @Override
-    public VCS repositoryType() {
-        return VCS.GIT;
-    }
-
-    @Override
-    public String fileContents(String filename, String ref) {
-        var confName = URLEncoder.encode(filename, StandardCharsets.UTF_8);
-        var conf = request.get("repository/files/" + confName)
-                          .param("ref", ref)
-                          .onError(response -> {
-                              // Retry once with additional escaping of the path fragment
-                              var escapedConfName = URLEncoder.encode(confName, StandardCharsets.UTF_8);
-                              return request.get("repository/files/" + escapedConfName)
-                                            .param("ref", ref).execute();
-                          })
-                          .execute();
-        var content = Base64.getDecoder().decode(conf.get("content").asString());
-        return new String(content, StandardCharsets.UTF_8);
-    }
-
-    @Override
-    public String namespace() {
-        return URIBuilder.base(gitLabHost.getUri()).build().getHost();
-    }
-
-    @Override
-    public Optional<WebHook> parseWebHook(JSONValue body) {
-        if (!body.contains("object_kind")) {
-            return Optional.empty();
-        }
-        if (!body.contains("project") || !body.get("project").contains("path_with_namespace")) {
-            return Optional.empty();
-        }
-        if (!body.get("project").get("path_with_namespace").asString().equals(projectName)) {
-            return Optional.empty();
-        }
-
-        int id = -1;
-
-        if (body.get("object_kind").asString().equals("merge_request")) {
-            if (!body.contains("object_attributes") || !body.get("object_attributes").contains("iid")) {
-                return Optional.empty();
-            }
-            id = body.get("object_attributes").get("iid").asInt();
-        }
-
-        if (body.contains("merge_request")) {
-            if (!body.get("merge_request").contains("iid")) {
-                return Optional.empty();
-            }
-            id = body.get("merge_request").get("iid").asInt();
-        }
-
-        if (id != -1) {
-            var pr = pullRequest(Integer.toString(id));
-            var webHook = new WebHook(List.of(pr));
-            return Optional.of(webHook);
-        } else {
-            return Optional.empty();
-        }
-    }
-
-    @Override
-    public HostedRepository fork() {
-        var namespace = gitLabHost.currentUser().userName();
-        request.post("fork")
-               .body("namespace", namespace)
-               .onError(r -> r.statusCode() == 409 ? JSON.object().put("exists", true) : null)
-               .execute();
-        var nameOnlyStart = projectName.lastIndexOf('/');
-        var nameOnly = nameOnlyStart >= 0 ? projectName.substring(nameOnlyStart + 1) : projectName;
-        var forkedRepoName = namespace + "/" + nameOnly;
-        while (!gitLabHost.isProjectForkComplete(forkedRepoName)) {
-            try {
-                Thread.sleep(Duration.ofSeconds(1).toMillis());
-            } catch (InterruptedException e) {
-                e.printStackTrace();
-            }
-        }
-        return gitLabHost.repository(forkedRepoName);
-    }
-
-    @Override
-    public long id() {
-        return json.get("id").asLong();
-    }
-
-    @Override
-    public Hash branchHash(String ref) {
-        var branch = request.get("repository/branches/" + ref).execute();
-        return new Hash(branch.get("commit").get("id").asString());
-    }
-}
diff a/forge/src/main/java/org/openjdk/skara/forge/PullRequestUpdateCache.java b/forge/src/main/java/org/openjdk/skara/forge/PullRequestUpdateCache.java
--- a/forge/src/main/java/org/openjdk/skara/forge/PullRequestUpdateCache.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/PullRequestUpdateCache.java
@@ -20,10 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.forge;
 
+import org.openjdk.skara.forge.gitlab.GitLabMergeRequest;
+
 import java.time.ZonedDateTime;
 import java.util.*;
 import java.util.logging.Logger;
 
 public class PullRequestUpdateCache {
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubApplication.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubApplication.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubApplication.java
@@ -0,0 +1,235 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge.github;
+
+import org.openjdk.skara.json.*;
+import org.openjdk.skara.network.URIBuilder;
+
+import java.io.*;
+import java.net.URI;
+import java.net.http.*;
+import java.nio.charset.StandardCharsets;
+import java.security.*;
+import java.security.spec.*;
+import java.time.*;
+import java.util.Base64;
+import java.util.logging.Logger;
+import java.util.regex.Pattern;
+
+class GitHubApplicationError extends RuntimeException {
+    GitHubApplicationError(String msg) {
+        super(msg);
+    }
+}
+
+class Token {
+
+    static class GeneratorError extends Exception {
+        public GeneratorError(String message) { super(message); }
+    }
+
+    public interface TokenGenerator {
+        String generate() throws GeneratorError;
+    }
+
+    private final TokenGenerator generator;
+    private final Duration expiration;
+    private String cached;
+    private Instant generatedAt;
+
+    Token(TokenGenerator generator, Duration expiration) {
+        this.generator = generator;
+        this.expiration = expiration;
+    }
+
+    public void expire() {
+        generatedAt = null;
+    }
+
+    @Override
+    public String toString() {
+
+        if (generatedAt != null) {
+            if (generatedAt.plus(expiration).isAfter(Instant.now())) {
+                return cached;
+            }
+        }
+
+        try {
+            cached = generator.generate();
+            generatedAt = Instant.now();
+            return cached;
+        } catch (GeneratorError generatorError) {
+            // FIXME? The operation could be retried here
+            throw new GitHubApplicationError("Failed to generate authentication token (" + generatorError.getMessage() + ")");
+        }
+    }
+}
+
+public class GitHubApplication {
+    private final String issue;
+    private final String id;
+
+    private final URI apiBase;
+    private final PrivateKey key;
+    private final Token jwt;
+    private final Token installationToken;
+
+    private final Logger log;
+
+    static class GitHubConfigurationError extends RuntimeException {
+        public GitHubConfigurationError(String message) {
+            super(message);
+        }
+    }
+
+    public GitHubApplication(String key, String issue, String id) {
+
+        log = Logger.getLogger("org.openjdk.host.github");
+
+        apiBase = URIBuilder.base("https://api.github.com/").build();
+        this.issue = issue;
+        this.id = id;
+
+        this.key = loadPkcs8PemFromString(key);
+        jwt = new Token(this::generateJsonWebToken, Duration.ofMinutes(5));
+        installationToken = new Token(this::generateInstallationToken, Duration.ofMinutes(30));
+    }
+
+    private PrivateKey loadPkcs8PemFromString(String pem) {
+        try {
+            var pemPattern = Pattern.compile("^-*BEGIN PRIVATE KEY-*$(.*)^-*END PRIVATE KEY-*",
+                    Pattern.DOTALL | Pattern.MULTILINE);
+            var keyString = pemPattern.matcher(pem).replaceFirst("$1");
+            //keyString = keyString.replace("\n", "");
+            var rawKey = Base64.getMimeDecoder().decode(keyString);
+            var factory = KeyFactory.getInstance("RSA");
+            return factory.generatePrivate(new PKCS8EncodedKeySpec(rawKey));
+        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
+            throw new GitHubConfigurationError("Unable to load private key (" + e + ")");
+        }
+    }
+
+    private String generateJsonWebToken() {
+        var issuedAt = ZonedDateTime.now(ZoneOffset.UTC);
+        var expires = issuedAt.plus(Duration.ofMinutes(8));
+
+        var header = Base64.getUrlEncoder().encode(JSON.object()
+                                                       .put("alg", "RS256")
+                                                       .put("typ", "JWT")
+                                                       .toString().getBytes(StandardCharsets.UTF_8));
+        var claims = Base64.getUrlEncoder().encode(JSON.object()
+                .put("iss", issue)
+                .put("iat", (int)issuedAt.toEpochSecond())
+                .put("exp", (int)expires.toEpochSecond())
+                .toString().getBytes(StandardCharsets.UTF_8));
+        var separator = ".".getBytes(StandardCharsets.UTF_8);
+
+        try {
+            var signer = Signature.getInstance("SHA256withRSA");
+            signer.initSign(key);
+            var payload = new ByteArrayOutputStream();
+            payload.write(header);
+            payload.write(separator);
+            payload.write(claims);
+            signer.update(payload.toByteArray());
+            var signature = Base64.getUrlEncoder().encode(signer.sign());
+
+            var token = new ByteArrayOutputStream();
+            token.write(header);
+            token.write(separator);
+            token.write(claims);
+            token.write(separator);
+            token.write(signature);
+
+            return token.toString(StandardCharsets.US_ASCII);
+        } catch (NoSuchAlgorithmException | SignatureException e) {
+            throw new RuntimeException(e);
+        } catch (InvalidKeyException e) {
+            throw new GitHubConfigurationError("Invalid private key");
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
+    }
+
+    private String generateInstallationToken() throws Token.GeneratorError {
+        var tokens = URIBuilder.base(apiBase).setPath("/installations/" + id + "/access_tokens").build();
+        var client = HttpClient.newBuilder()
+                               .connectTimeout(Duration.ofSeconds(10))
+                               .build();
+
+        try {
+            var response = client.send(
+                    HttpRequest.newBuilder()
+                               .uri(tokens)
+                               .timeout(Duration.ofSeconds(30))
+                               .header("Authorization", "Bearer " + jwt)
+                               .header("Accept", "application/vnd.github.machine-man-preview+json")
+                               .POST(HttpRequest.BodyPublishers.noBody())
+                               .build(),
+                    HttpResponse.BodyHandlers.ofString()
+            );
+
+            var data = JSON.parse(response.body());
+            if (!data.contains("token")) {
+                throw new Token.GeneratorError("Unknown data returned: " + data);
+            }
+            return data.get("token").asString();
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        } catch (InterruptedException e) {
+            throw new Token.GeneratorError(e.toString());
+        }
+    }
+
+    public String getInstallationToken() {
+        return installationToken.toString();
+    }
+
+    JSONObject getAppDetails() {
+        var details = URIBuilder.base(apiBase).setPath("/app").build();
+        var client = HttpClient.newBuilder()
+                               .connectTimeout(Duration.ofSeconds(10))
+                               .build();
+
+        try {
+            var response = client.send(
+                    HttpRequest.newBuilder()
+                               .uri(details)
+                               .timeout(Duration.ofSeconds(30))
+                               .header("Authorization", "Bearer " + jwt)
+                               .header("Accept", "application/vnd.github.machine-man-preview+json")
+                               .GET()
+                               .build(),
+                    HttpResponse.BodyHandlers.ofString()
+            );
+
+            var data = JSON.parse(response.body());
+            return data.asObject();
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        } catch (InterruptedException e) {
+            throw new RuntimeException(e);
+        }
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubForgeFactory.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubForgeFactory.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubForgeFactory.java
@@ -0,0 +1,39 @@
+package org.openjdk.skara.forge.github;
+
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.host.Credential;
+import org.openjdk.skara.json.JSONObject;
+
+import java.net.URI;
+import java.util.regex.Pattern;
+
+public class GitHubForgeFactory implements ForgeFactory {
+    @Override
+    public String name() {
+        return "github";
+    }
+
+    @Override
+    public Forge create(URI uri, Credential credential, JSONObject configuration) {
+        Pattern webUriPattern = null;
+        String webUriReplacement = null;
+        if (configuration.contains("weburl")) {
+            webUriPattern = Pattern.compile(configuration.get("weburl").get("pattern").asString());
+            webUriReplacement = configuration.get("weburl").get("replacement").asString();
+        }
+
+        if (credential != null) {
+            if (credential.username().contains(";")) {
+                var separator = credential.username().indexOf(";");
+                var id = credential.username().substring(0, separator);
+                var installation = credential.username().substring(separator + 1);
+                var app = new GitHubApplication(credential.password(), id, installation);
+                return new GitHubHost(uri, app, webUriPattern, webUriReplacement);
+            } else {
+                return new GitHubHost(uri, credential, webUriPattern, webUriReplacement);
+            }
+        } else {
+            return new GitHubHost(uri, webUriPattern, webUriReplacement);
+        }
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
@@ -0,0 +1,217 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge.github;
+
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.json.*;
+import org.openjdk.skara.network.*;
+
+import java.net.*;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.regex.Pattern;
+
+public class GitHubHost implements Forge {
+    private final URI uri;
+    private final Pattern webUriPattern;
+    private final String webUriReplacement;
+    private final GitHubApplication application;
+    private final Credential pat;
+    private final RestRequest request;
+    private HostUser currentUser;
+
+    public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement) {
+        this.uri = uri;
+        this.webUriPattern = webUriPattern;
+        this.webUriReplacement = webUriReplacement;
+        this.application = application;
+        this.pat = null;
+
+        var baseApi = URIBuilder.base(uri)
+                .appendSubDomain("api")
+                .setPath("/")
+                .build();
+
+        request = new RestRequest(baseApi, () -> Arrays.asList(
+                "Authorization", "token " + getInstallationToken(),
+                "Accept", "application/vnd.github.machine-man-preview+json",
+                "Accept", "application/vnd.github.antiope-preview+json"));
+    }
+
+    public GitHubHost(URI uri, Credential pat, Pattern webUriPattern, String webUriReplacement) {
+        this.uri = uri;
+        this.webUriPattern = webUriPattern;
+        this.webUriReplacement = webUriReplacement;
+        this.pat = pat;
+        this.application = null;
+
+        var baseApi = URIBuilder.base(uri)
+                                .appendSubDomain("api")
+                                .setPath("/")
+                                .build();
+
+        request = new RestRequest(baseApi, () -> Arrays.asList(
+                "Authorization", "token " + pat.password()));
+    }
+
+    GitHubHost(URI uri, Pattern webUriPattern, String webUriReplacement) {
+        this.uri = uri;
+        this.webUriPattern = webUriPattern;
+        this.webUriReplacement = webUriReplacement;
+        this.pat = null;
+        this.application = null;
+
+        var baseApi = URIBuilder.base(uri)
+                                .appendSubDomain("api")
+                                .setPath("/")
+                                .build();
+
+        request = new RestRequest(baseApi);
+    }
+
+    public URI getURI() {
+        return uri;
+    }
+
+    URI getWebURI(String endpoint) {
+        var baseWebUri = URIBuilder.base(uri)
+                                   .setPath(endpoint)
+                                   .build();
+
+        if (webUriPattern == null) {
+            return baseWebUri;
+        }
+
+        var matcher = webUriPattern.matcher(baseWebUri.toString());
+        if (!matcher.matches()) {
+            return baseWebUri;
+
+        }
+        return URIBuilder.base(matcher.replaceAll(webUriReplacement)).build();
+    }
+
+    String getInstallationToken() {
+        if (application != null) {
+            return application.getInstallationToken();
+        } else {
+            return pat.password();
+        }
+    }
+
+    private String getFullName(String userName) {
+        var details = user(userName);
+        return details.fullName();
+    }
+
+    // Most GitHub API's return user information in this format
+    HostUser parseUserField(JSONValue json) {
+        return parseUserObject(json.get("user"));
+    }
+
+    HostUser parseUserObject(JSONValue json) {
+        return new HostUser(json.get("id").asInt(), json.get("login").asString(),
+                            () -> getFullName(json.get("login").asString()));
+    }
+
+    @Override
+    public boolean isValid() {
+        var endpoints = request.get("")
+                               .onError(response -> JSON.of())
+                               .execute();
+        return !endpoints.isNull();
+    }
+
+    JSONObject getProjectInfo(String name) {
+        var project = request.get("repos/" + name)
+                             .execute();
+        return project.asObject();
+    }
+
+    JSONObject runSearch(String query) {
+        var result = request.get("search/issues")
+                            .param("q", query)
+                            .execute();
+        return result.asObject();
+    }
+
+    @Override
+    public HostedRepository repository(String name) {
+        return new GitHubRepository(this, name);
+    }
+
+    @Override
+    public HostUser user(String username) {
+        var details = request.get("users/" + URLEncoder.encode(username, StandardCharsets.UTF_8)).execute().asObject();
+
+        // Always present
+        var login = details.get("login").asString();
+        var id = details.get("id").asInt();
+
+        var name = details.get("name").asString();
+        if (name == null) {
+            name = login;
+        }
+        return new HostUser(id, login, name);
+    }
+
+    @Override
+    public HostUser currentUser() {
+        if (currentUser == null) {
+            if (application != null) {
+                var appDetails = application.getAppDetails();
+                var appName = appDetails.get("name").asString() + "[bot]";
+                currentUser = user(appName);
+            } else if (pat != null) {
+                currentUser = user(pat.username());
+            } else {
+                throw new IllegalStateException("No credentials present");
+            }
+        }
+        return currentUser;
+    }
+
+    @Override
+    public boolean supportsReviewBody() {
+        return true;
+    }
+
+    @Override
+    public boolean isMemberOf(String groupId, HostUser user) {
+        long gid = 0L;
+        try {
+            gid = Long.parseLong(groupId);
+        } catch (NumberFormatException e) {
+            throw new IllegalArgumentException("Group id is not a number: " + groupId);
+        }
+        var username = URLEncoder.encode(user.userName(), StandardCharsets.UTF_8);
+        var orgs = request.get("users/" + username + "/orgs").execute().asArray();
+        for (var org : orgs) {
+            if (org.get("id").asLong() == gid) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -18,16 +18,17 @@
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package org.openjdk.skara.forge;
+package org.openjdk.skara.forge.github;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.*;
-import org.openjdk.skara.network.*;
 import org.openjdk.skara.json.*;
+import org.openjdk.skara.network.*;
 import org.openjdk.skara.vcs.Hash;
 
 import java.net.URI;
 import java.time.*;
 import java.time.format.DateTimeFormatter;
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
@@ -0,0 +1,206 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge.github;
+
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.json.*;
+import org.openjdk.skara.network.*;
+import org.openjdk.skara.vcs.*;
+
+import java.net.URI;
+import java.nio.charset.StandardCharsets;
+import java.util.*;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+
+public class GitHubRepository implements HostedRepository {
+    private final GitHubHost gitHubHost;
+    private final String repository;
+    private final RestRequest request;
+    private final JSONValue json;
+    private final Pattern pullRequestPattern;
+
+    GitHubRepository(GitHubHost gitHubHost, String repository) {
+        this.gitHubHost = gitHubHost;
+        this.repository = repository;
+
+        var apiBase = URIBuilder
+                .base(gitHubHost.getURI())
+                .appendSubDomain("api")
+                .setPath("/repos/" + repository + "/")
+                .build();
+        request = new RestRequest(apiBase, () -> Arrays.asList(
+                "Authorization", "token " + gitHubHost.getInstallationToken(),
+                "Accept", "application/vnd.github.machine-man-preview+json",
+                "Accept", "application/vnd.github.antiope-preview+json",
+                "Accept", "application/vnd.github.shadow-cat-preview+json"));
+        json = gitHubHost.getProjectInfo(repository);
+        var urlPattern = gitHubHost.getWebURI("/" + repository + "/pull/").toString();
+        pullRequestPattern = Pattern.compile(urlPattern + "(\\d+)");
+    }
+
+    @Override
+    public Optional<HostedRepository> parent() {
+        if (json.get("fork").asBoolean()) {
+            var parent = json.get("parent").get("full_name").asString();
+            return Optional.of(new GitHubRepository(gitHubHost, parent));
+        }
+        return Optional.empty();
+    }
+
+    @Override
+    public Forge forge() {
+        return gitHubHost;
+    }
+
+    @Override
+    public PullRequest createPullRequest(HostedRepository target,
+                                         String targetRef,
+                                         String sourceRef,
+                                         String title,
+                                         List<String> body,
+                                         boolean draft) {
+        if (!(target instanceof GitHubRepository)) {
+            throw new IllegalArgumentException("target repository must be a GitHub repository");
+        }
+
+        var upstream = (GitHubRepository) target;
+        var user = forge().currentUser().userName();
+        var namespace = user.endsWith("[bot]") ? "" : user + ":";
+        var params = JSON.object()
+                         .put("title", title)
+                         .put("head", namespace + sourceRef)
+                         .put("base", targetRef)
+                         .put("body", String.join("\n", body))
+                         .put("draft", draft);
+        var pr = upstream.request.post("pulls")
+                                 .body(params)
+                                 .execute();
+
+        return new GitHubPullRequest(upstream, pr, request);
+    }
+
+    @Override
+    public PullRequest pullRequest(String id) {
+        var pr = request.get("pulls/" + id).execute();
+        return new GitHubPullRequest(this, pr, request);
+    }
+
+    @Override
+    public List<PullRequest> pullRequests() {
+        return request.get("pulls").execute().asArray().stream()
+                      .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))
+                      .collect(Collectors.toList());
+    }
+
+    @Override
+    public List<PullRequest> findPullRequestsWithComment(String author, String body) {
+        var query = "\"" + body + "\" in:comments type:pr repo:" + repository;
+        if (author != null) {
+            query += " commenter:" + author;
+        }
+        var result = gitHubHost.runSearch(query);
+        return result.get("items").stream()
+                .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))
+                .collect(Collectors.toList());
+    }
+
+    @Override
+    public Optional<PullRequest> parsePullRequestUrl(String url) {
+        var matcher = pullRequestPattern.matcher(url);
+        if (matcher.find()) {
+            return Optional.of(pullRequest(matcher.group(1)));
+        } else {
+            return Optional.empty();
+        }
+    }
+
+    @Override
+    public String name() {
+        return repository;
+    }
+
+    @Override
+    public URI url() {
+        return URIBuilder
+                .base(gitHubHost.getURI())
+                .setPath("/" + repository + ".git")
+                .setAuthentication("x-access-token:" + gitHubHost.getInstallationToken())
+                .build();
+    }
+
+    @Override
+    public URI webUrl() {
+        var endpoint = "/" + repository;
+        return gitHubHost.getWebURI(endpoint);
+    }
+
+    @Override
+    public URI webUrl(Hash hash) {
+        var endpoint = "/" + repository + "/commit/" + hash.abbreviate();
+        return gitHubHost.getWebURI(endpoint);
+    }
+
+    @Override
+    public VCS repositoryType() {
+        return VCS.GIT;
+    }
+
+    @Override
+    public String fileContents(String filename, String ref) {
+        var conf = request.get("contents/" + filename)
+                          .param("ref", ref)
+                          .execute().asObject();
+        // Content may contain newline characters
+        return conf.get("content").asString().lines()
+                   .map(line -> new String(Base64.getDecoder().decode(line), StandardCharsets.UTF_8))
+                   .collect(Collectors.joining());
+    }
+
+    @Override
+    public String namespace() {
+        return URIBuilder.base(gitHubHost.getURI()).build().getHost();
+    }
+
+    @Override
+    public Optional<WebHook> parseWebHook(JSONValue body) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public HostedRepository fork() {
+        var response = request.post("forks").execute();
+        return gitHubHost.repository(response.get("full_name").asString());
+    }
+
+    @Override
+    public long id() {
+        return json.get("id").asLong();
+    }
+
+    @Override
+    public Hash branchHash(String ref) {
+        var branch = request.get("branches/" + ref).execute();
+        return new Hash(branch.get("commit").get("sha").asString());
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/PositionMapper.java b/forge/src/main/java/org/openjdk/skara/forge/github/PositionMapper.java
--- a/forge/src/main/java/org/openjdk/skara/forge/PositionMapper.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/PositionMapper.java
@@ -18,11 +18,11 @@
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package org.openjdk.skara.forge;
+package org.openjdk.skara.forge.github;
 
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabForgeFactory.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabForgeFactory.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabForgeFactory.java
@@ -0,0 +1,23 @@
+package org.openjdk.skara.forge.gitlab;
+
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.host.Credential;
+import org.openjdk.skara.json.JSONObject;
+
+import java.net.URI;
+
+public class GitLabForgeFactory implements ForgeFactory {
+    @Override
+    public String name() {
+        return "gitlab";
+    }
+
+    @Override
+    public Forge create(URI uri, Credential credential, JSONObject configuration) {
+        if (credential != null) {
+            return new GitLabHost(uri, credential);
+        } else {
+            return new GitLabHost(uri);
+        }
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
@@ -0,0 +1,155 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge.gitlab;
+
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.json.*;
+import org.openjdk.skara.network.*;
+
+import java.net.*;
+import java.nio.charset.StandardCharsets;
+import java.util.*;
+
+public class GitLabHost implements Forge {
+    private final URI uri;
+    private final Credential pat;
+    private final RestRequest request;
+
+    GitLabHost(URI uri, Credential pat) {
+        this.uri = uri;
+        this.pat = pat;
+
+        var baseApi = URIBuilder.base(uri)
+                                .setPath("/api/v4/")
+                                .build();
+        request = new RestRequest(baseApi, () -> Arrays.asList("Private-Token", pat.password()));
+    }
+
+    GitLabHost(URI uri) {
+        this.uri = uri;
+        this.pat = null;
+
+        var baseApi = URIBuilder.base(uri)
+                                .setPath("/api/v4/")
+                                .build();
+        request = new RestRequest(baseApi);
+    }
+
+    public URI getUri() {
+        return uri;
+    }
+
+    Optional<Credential> getPat() {
+        return Optional.ofNullable(pat);
+    }
+
+    @Override
+    public boolean isValid() {
+        var version = request.get("version")
+                              .onError(r -> JSON.object().put("invalid", true))
+                              .execute();
+        return !version.contains("invalid");
+    }
+
+    JSONObject getProjectInfo(String name) {
+        var encodedName = URLEncoder.encode(name, StandardCharsets.US_ASCII);
+
+        var project = request.get("projects/" + encodedName)
+                                     .onError(r -> r.statusCode() == 404 ? JSON.object().put("retry", true) : null)
+                                     .execute();
+        if (project.contains("retry")) {
+            // Depending on web server configuration, GitLab may need double escaping of project names
+            encodedName = URLEncoder.encode(encodedName, StandardCharsets.US_ASCII);
+            project = request.get("projects/" + encodedName)
+                                     .onError(r -> r.statusCode() == 404 ? JSON.object().put("retry", true) : null)
+                                     .execute();
+        }
+        return project.asObject();
+    }
+
+    @Override
+    public HostedRepository repository(String name) {
+        return new GitLabRepository(this, name);
+    }
+
+    private HostUser parseUserDetails(JSONObject details) {
+        var id = details.get("id").asInt();
+        var username = details.get("username").asString();
+        var name = details.get("name").asString();
+        return new HostUser(id, username, name);
+    }
+
+    @Override
+    public HostUser user(String username) {
+        var details = request.get("users").param("username", username).execute().asArray();
+        if (details.size() != 1) {
+            throw new RuntimeException("Couldn't find user: " + username);
+        }
+
+        return parseUserDetails(details.get(0).asObject());
+    }
+
+    @Override
+    public HostUser currentUser() {
+        var details = request.get("user").execute().asObject();
+        return parseUserDetails(details);
+    }
+
+    @Override
+    public boolean supportsReviewBody() {
+        // GitLab CE does not support this
+        return false;
+    }
+
+    boolean isProjectForkComplete(String name) {
+        var project = getProjectInfo(name);
+        if (project.contains("import_status")) {
+            var status = project.get("import_status").asString();
+            switch (status) {
+                case "finished":
+                    return true;
+                case "started":
+                    return false;
+                default:
+                    throw new RuntimeException("Unknown fork status: " + status);
+            }
+        } else {
+            throw new RuntimeException("Project does not seem to be a fork");
+        }
+    }
+
+    @Override
+    public boolean isMemberOf(String groupId, HostUser user) {
+        long gid = 0L;
+        try {
+            gid = Long.parseLong(groupId);
+        } catch (NumberFormatException e) {
+            throw new IllegalArgumentException("Group id is not a number: " + groupId);
+        }
+        var details = request.get("groups/" + gid + "/members/" + user.id())
+                             .onError(r -> JSON.of())
+                             .execute();
+        return !details.isNull();
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/GitLabMergeRequest.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/GitLabMergeRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
@@ -18,16 +18,17 @@
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package org.openjdk.skara.forge;
+package org.openjdk.skara.forge.gitlab;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.*;
-import org.openjdk.skara.network.*;
 import org.openjdk.skara.json.*;
+import org.openjdk.skara.network.*;
 import org.openjdk.skara.vcs.Hash;
 
 import java.net.URI;
 import java.nio.charset.StandardCharsets;
 import java.time.ZonedDateTime;
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
@@ -0,0 +1,251 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge.gitlab;
+
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.json.*;
+import org.openjdk.skara.network.*;
+import org.openjdk.skara.vcs.*;
+
+import java.net.*;
+import java.nio.charset.StandardCharsets;
+import java.time.Duration;
+import java.util.*;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+
+public class GitLabRepository implements HostedRepository {
+    private final GitLabHost gitLabHost;
+    private final String projectName;
+    private final RestRequest request;
+    private final JSONValue json;
+    private final Pattern mergeRequestPattern;
+
+    public GitLabRepository(GitLabHost gitLabHost, String projectName) {
+        this.gitLabHost = gitLabHost;
+        json = gitLabHost.getProjectInfo(projectName);
+        this.projectName = json.get("path_with_namespace").asString();
+
+        var id = json.get("id").asInt();
+        var baseApi = URIBuilder.base(gitLabHost.getUri())
+                .setPath("/api/v4/projects/" + id + "/")
+                .build();
+
+        request = gitLabHost.getPat()
+                            .map(pat -> new RestRequest(baseApi, () -> Arrays.asList("Private-Token", pat.password())))
+                            .orElseGet(() -> new RestRequest(baseApi));
+
+        var urlPattern = URIBuilder.base(gitLabHost.getUri())
+                                   .setPath("/" + projectName + "/merge_requests/").build();
+        mergeRequestPattern = Pattern.compile(urlPattern.toString() + "(\\d+)");
+    }
+
+    @Override
+    public Forge forge() {
+        return gitLabHost;
+    }
+
+    @Override
+    public Optional<HostedRepository> parent() {
+        if (json.contains("forked_from_project")) {
+            var parent = json.get("forked_from_project").get("path_with_namespace").asString();
+            return Optional.of(new GitLabRepository(gitLabHost, parent));
+        }
+        return Optional.empty();
+    }
+
+    @Override
+    public PullRequest createPullRequest(HostedRepository target,
+                                         String targetRef,
+                                         String sourceRef,
+                                         String title,
+                                         List<String> body,
+                                         boolean draft) {
+        if (!(target instanceof GitLabRepository)) {
+            throw new IllegalArgumentException("target must be a GitLab repository");
+        }
+
+        var pr = request.post("merge_requests")
+                        .body("source_branch", sourceRef)
+                        .body("target_branch", targetRef)
+                        .body("title", draft ? "WIP: " : "" + title)
+                        .body("description", String.join("\n", body))
+                        .body("target_project_id", Long.toString(target.id()))
+                        .execute();
+
+        var targetRepo = (GitLabRepository) target;
+        return new GitLabMergeRequest(targetRepo, pr, targetRepo.request);
+    }
+
+    @Override
+    public PullRequest pullRequest(String id) {
+        var pr = request.get("merge_requests/" + id).execute();
+        return new GitLabMergeRequest(this, pr, request);
+    }
+
+    @Override
+    public List<PullRequest> pullRequests() {
+        return request.get("merge_requests")
+                      .param("state", "opened")
+                      .execute().stream()
+                      .map(value -> new GitLabMergeRequest(this, value, request))
+                      .collect(Collectors.toList());
+    }
+
+    @Override
+    public List<PullRequest> findPullRequestsWithComment(String author, String body) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public Optional<PullRequest> parsePullRequestUrl(String url) {
+        var matcher = mergeRequestPattern.matcher(url);
+        if (matcher.find()) {
+            return Optional.of(pullRequest(matcher.group(1)));
+        } else {
+            return Optional.empty();
+        }
+    }
+
+    @Override
+    public String name() {
+        return projectName;
+    }
+
+    @Override
+    public URI url() {
+        var builder = URIBuilder
+                .base(gitLabHost.getUri())
+                .setPath("/" + projectName + ".git");
+        gitLabHost.getPat().ifPresent(pat -> builder.setAuthentication(pat.username() + ":" + pat.password()));
+        return builder.build();
+    }
+
+    @Override
+    public URI webUrl() {
+        return URIBuilder.base(gitLabHost.getUri())
+                         .setPath("/" + projectName)
+                         .build();
+    }
+
+    @Override
+    public URI webUrl(Hash hash) {
+        return URIBuilder.base(gitLabHost.getUri())
+                         .setPath("/" + projectName + "/commit/" + hash.abbreviate())
+                         .build();
+    }
+
+    @Override
+    public VCS repositoryType() {
+        return VCS.GIT;
+    }
+
+    @Override
+    public String fileContents(String filename, String ref) {
+        var confName = URLEncoder.encode(filename, StandardCharsets.UTF_8);
+        var conf = request.get("repository/files/" + confName)
+                          .param("ref", ref)
+                          .onError(response -> {
+                              // Retry once with additional escaping of the path fragment
+                              var escapedConfName = URLEncoder.encode(confName, StandardCharsets.UTF_8);
+                              return request.get("repository/files/" + escapedConfName)
+                                            .param("ref", ref).execute();
+                          })
+                          .execute();
+        var content = Base64.getDecoder().decode(conf.get("content").asString());
+        return new String(content, StandardCharsets.UTF_8);
+    }
+
+    @Override
+    public String namespace() {
+        return URIBuilder.base(gitLabHost.getUri()).build().getHost();
+    }
+
+    @Override
+    public Optional<WebHook> parseWebHook(JSONValue body) {
+        if (!body.contains("object_kind")) {
+            return Optional.empty();
+        }
+        if (!body.contains("project") || !body.get("project").contains("path_with_namespace")) {
+            return Optional.empty();
+        }
+        if (!body.get("project").get("path_with_namespace").asString().equals(projectName)) {
+            return Optional.empty();
+        }
+
+        int id = -1;
+
+        if (body.get("object_kind").asString().equals("merge_request")) {
+            if (!body.contains("object_attributes") || !body.get("object_attributes").contains("iid")) {
+                return Optional.empty();
+            }
+            id = body.get("object_attributes").get("iid").asInt();
+        }
+
+        if (body.contains("merge_request")) {
+            if (!body.get("merge_request").contains("iid")) {
+                return Optional.empty();
+            }
+            id = body.get("merge_request").get("iid").asInt();
+        }
+
+        if (id != -1) {
+            var pr = pullRequest(Integer.toString(id));
+            var webHook = new WebHook(List.of(pr));
+            return Optional.of(webHook);
+        } else {
+            return Optional.empty();
+        }
+    }
+
+    @Override
+    public HostedRepository fork() {
+        var namespace = gitLabHost.currentUser().userName();
+        request.post("fork")
+               .body("namespace", namespace)
+               .onError(r -> r.statusCode() == 409 ? JSON.object().put("exists", true) : null)
+               .execute();
+        var nameOnlyStart = projectName.lastIndexOf('/');
+        var nameOnly = nameOnlyStart >= 0 ? projectName.substring(nameOnlyStart + 1) : projectName;
+        var forkedRepoName = namespace + "/" + nameOnly;
+        while (!gitLabHost.isProjectForkComplete(forkedRepoName)) {
+            try {
+                Thread.sleep(Duration.ofSeconds(1).toMillis());
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+        }
+        return gitLabHost.repository(forkedRepoName);
+    }
+
+    @Override
+    public long id() {
+        return json.get("id").asLong();
+    }
+
+    @Override
+    public Hash branchHash(String ref) {
+        var branch = request.get("repository/branches/" + ref).execute();
+        return new Hash(branch.get("commit").get("id").asString());
+    }
+}
diff a/forge/src/test/java/org/openjdk/skara/forge/ForgeTests.java b/forge/src/test/java/org/openjdk/skara/forge/ForgeTests.java
--- /dev/null
+++ b/forge/src/test/java/org/openjdk/skara/forge/ForgeTests.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.junit.jupiter.api.Test;
+import org.openjdk.skara.host.Credential;
+import org.openjdk.skara.json.JSONObject;
+
+import java.net.URI;
+import java.util.*;
+import java.util.stream.Collectors;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+class ForgeTests {
+    @Test
+    void sortTest() {
+        var allFactories = List.of(new ForgeFactory() {
+                                       @Override
+                                       public String name() {
+                                           return "something";
+                                       }
+
+                                       @Override
+                                       public Forge create(URI uri, Credential credential, JSONObject configuration) {
+                                           return null;
+                                       }
+                                   },
+                                   new ForgeFactory() {
+                                       @Override
+                                       public String name() {
+                                           return "other";
+                                       }
+
+                                       @Override
+                                       public Forge create(URI uri, Credential credential, JSONObject configuration) {
+                                           return null;
+                                       }
+                                   });
+
+        var sorted = allFactories.stream()
+                                 .sorted(Comparator.comparing(f -> !f.name().contains("other")))
+                                 .collect(Collectors.toList());
+
+        assertEquals("something", allFactories.get(0).name());
+        assertEquals("other", sorted.get(0).name());
+    }
+}
diff a/forge/src/test/java/org/openjdk/skara/forge/GitHubApplicationTests.java b/forge/src/test/java/org/openjdk/skara/forge/GitHubApplicationTests.java
--- a/forge/src/test/java/org/openjdk/skara/forge/GitHubApplicationTests.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.forge;
-
-import org.junit.jupiter.api.*;
-
-import java.time.Duration;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-public class GitHubApplicationTests {
-
-    @Test
-    public void tokenSetSimple() {
-        Token t = new Token(() -> "a", Duration.ofHours(1));
-        assertEquals("a", t.toString());
-    }
-
-    private final String[] sequence = {"a", "b", "c"};
-    private int sequenceIndex = 0;
-    private String sequenceGenerator() {
-        return sequence[sequenceIndex++];
-    }
-
-    @Test
-    public void tokenCache() {
-        sequenceIndex = 0;
-        Token t = new Token(this::sequenceGenerator, Duration.ofHours(1));
-        assertEquals("a", t.toString());
-        assertEquals("a", t.toString());
-    }
-
-    @Test
-    public void tokenExpiration() {
-        sequenceIndex = 0;
-        Token t = new Token(this::sequenceGenerator, Duration.ZERO);
-        assertEquals("a", t.toString());
-        assertEquals("b", t.toString());
-    }
-
-    private String badGenerator() throws Token.GeneratorError {
-        throw new Token.GeneratorError("error");
-    }
-
-    @Test
-    public void tokenGeneratorError() {
-        Token t = new Token(this::badGenerator, Duration.ZERO);
-        assertThrows(GitHubApplicationError.class, () -> t.toString());
-    }
-
-}
diff a/forge/src/test/java/org/openjdk/skara/forge/GitHubHostTests.java b/forge/src/test/java/org/openjdk/skara/forge/GitHubHostTests.java
--- a/forge/src/test/java/org/openjdk/skara/forge/GitHubHostTests.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.forge;
-
-import org.openjdk.skara.network.URIBuilder;
-import org.openjdk.skara.test.TemporaryDirectory;
-
-import org.junit.jupiter.api.*;
-
-import java.io.IOException;
-import java.net.*;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.*;
-import java.util.regex.Pattern;
-
-import static org.junit.jupiter.api.Assertions.assertEquals;
-
-public class GitHubHostTests {
-    private void generateKeyfile(Path path) throws IOException {
-        // This key was randomly generated for this test only
-        Files.writeString(path, "-----BEGIN PRIVATE KEY-----\n" +
-                "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDAFzH+URXAvOoL\n" +
-                "0NSdIePQTTVsan13c+7D9tAilJAtRcxUjOz2lMZYBzrdsVYGbktfseEvF6o9dyoX\n" +
-                "X/py6DM0QqBNW/0uEv1ouS44po0VvykHVXrAq0u8E8HHFtr09VQSO/ceXrFd6haQ\n" +
-                "aCckbdp1TPn1q8w+U2bRkqUji7zzfwll6AaB4dhKZ1v5NFuff1PWmuk2x7b0u2yR\n" +
-                "uANLHLqmNB4ik7bUTiIyacXeVSZRZRFGwJjd+1WnyiybwV6QbQ0nndw6iaz2wGWt\n" +
-                "XDif7DJE0axMReUZVKJLqMagS5R5ra6FdlnUPw0nbJMwnDOLk9ofSfne0LTSTD6K\n" +
-                "/VZ26izbAgMBAAECggEBALF0vDq1reLgo1dHFSQUquFEcpY1yrMP5wQifyVzGb65\n" +
-                "PIrfpgomZxXrl/Y2XcKTIg7FxcI7moouDDSL9lMxMByXcIAG+14VLQYSDSFIvA3b\n" +
-                "C4w666wSk2Ss29eQxbaG7aPqweDMmg6osy+1CHQfCDJVapYKoCTz54i0cNrlvSk0\n" +
-                "FZ3o99uAvAcLtrsqbnXO57NXQVajoSH0bkMZd+TuZqEIX3CzHoNEVhzvqaKedqA6\n" +
-                "Cd22Y2m6cnW0H10Chko05FtskLYD+jw275LiUtInplBtG3n5/uDIamsOPo9XG8i0\n" +
-                "a4rxaJYsRqXYqDOEjLi/QCUrYBtJ+gqT/qMOTjAoKAECgYEA/VPdvc03vScjIu4T\n" +
-                "vNXjXxv81HZPm/IoTYTgvTvrEqErQ/CIwTQJer1XUJ9M43n+XkVZsMKkUIMlwt2+\n" +
-                "G0wBwYkDUgIXFEJhb170BVgwyZHE+Djr0E7NunbAv/oQu8AfQzk5HZpcQwxVg8w8\n" +
-                "Vj2ecLb4GK0D9iJ4zLwlsRw2RukCgYEAwh30AG7gq5y9Mj/BusuDvyNZZKjE/pJz\n" +
-                "HtC7a/OzOyr+Bpr2VBxVDeEFth22bd/a4ohv1QcwNAa2LzelNfQRQURq/vqpDmuj\n" +
-                "g0ESQavh3i3Tax2LXO582HWueuNL+8Ufyb6WDJDvYuz0F3WBJhxixP3I7VgMhPWV\n" +
-                "tK/wEEDDwyMCgYEArR3M4NIHDzpZppsv3dIE6ZAEvWSEjrtzk1YFBwyVXkvJd0o/\n" +
-                "Clj3SWtu6eeS8bkCfYXC/ypkg6i7+2jxa1ILuShanoZTI0Mhtqwa8jQMUxNMmZy8\n" +
-                "ecQAjzZsDkVjfgqS0quePn6oIiGhpsnBSeYeCkTfUm2Z0XBJQRAqadgvt1ECgYBK\n" +
-                "FAgzyhxvIUeKT45s7JGAdcr9gPJ8fAL2tY1wqvWxFL0QZD6w5ocG3uLBFyGxWIY9\n" +
-                "gPe8ghvBHvaTmlav+k5DbAqw95Ngb29c/Y4sBZ4SncZa0FGIy3JVYMOPHgK3OAjj\n" +
-                "gpncfcr9I5QbB7qbgqWmq3rsKHfOnbHd3G5upWiPpQKBgCaPW2vyT/nfCvfh0z//\n" +
-                "QSv0//4zy7pDdOolP5ZRsUo5cU4aiv4XgTSglR2jEJyr4bMYCN/+4tnqp0tIUzt1\n" +
-                "RWJhXLU1dm4QhCTccWMAyQgktn3SB5Ww3+qyLr1klUwkO+rx8kkNjv3rC/u5EzQ9\n" +
-                "q3DJ9in4wyYBNPVDB5kJom5i\n" +
-                "-----END PRIVATE KEY-----", StandardCharsets.UTF_8);
-    }
-
-    @Test
-    void webUriPatternReplacement() throws IOException, URISyntaxException {
-        try (var tempFolder = new TemporaryDirectory()) {
-            var key = tempFolder.path().resolve("key.pem");
-            generateKeyfile(key);
-            var app = new GitHubApplication(key.toString(), "y", "z");
-            var host = new GitHubHost(URIBuilder.base("http://www.example.com").build(),
-                                      app, Pattern.compile("^(http://www.example.com)/test/(.*)$"), "$1/another/$2");
-            assertEquals(new URI("http://www.example.com/another/hello"), host.getWebURI("/test/hello"));
-        }
-    }
-}
diff a/forge/src/test/java/org/openjdk/skara/forge/github/GitHubApplicationTests.java b/forge/src/test/java/org/openjdk/skara/forge/github/GitHubApplicationTests.java
--- /dev/null
+++ b/forge/src/test/java/org/openjdk/skara/forge/github/GitHubApplicationTests.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge.github;
+
+import org.junit.jupiter.api.Test;
+
+import java.time.Duration;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+public class GitHubApplicationTests {
+
+    @Test
+    public void tokenSetSimple() {
+        Token t = new Token(() -> "a", Duration.ofHours(1));
+        assertEquals("a", t.toString());
+    }
+
+    private final String[] sequence = {"a", "b", "c"};
+    private int sequenceIndex = 0;
+    private String sequenceGenerator() {
+        return sequence[sequenceIndex++];
+    }
+
+    @Test
+    public void tokenCache() {
+        sequenceIndex = 0;
+        Token t = new Token(this::sequenceGenerator, Duration.ofHours(1));
+        assertEquals("a", t.toString());
+        assertEquals("a", t.toString());
+    }
+
+    @Test
+    public void tokenExpiration() {
+        sequenceIndex = 0;
+        Token t = new Token(this::sequenceGenerator, Duration.ZERO);
+        assertEquals("a", t.toString());
+        assertEquals("b", t.toString());
+    }
+
+    private String badGenerator() throws Token.GeneratorError {
+        throw new Token.GeneratorError("error");
+    }
+
+    @Test
+    public void tokenGeneratorError() {
+        Token t = new Token(this::badGenerator, Duration.ZERO);
+        assertThrows(GitHubApplicationError.class, () -> t.toString());
+    }
+
+}
diff a/forge/src/test/java/org/openjdk/skara/forge/github/GitHubHostTests.java b/forge/src/test/java/org/openjdk/skara/forge/github/GitHubHostTests.java
--- /dev/null
+++ b/forge/src/test/java/org/openjdk/skara/forge/github/GitHubHostTests.java
@@ -0,0 +1,76 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge.github;
+
+import org.junit.jupiter.api.Test;
+import org.openjdk.skara.network.URIBuilder;
+import org.openjdk.skara.test.TemporaryDirectory;
+
+import java.io.IOException;
+import java.net.*;
+import java.util.regex.Pattern;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+class GitHubHostTests {
+    // This key was randomly generated for this test only
+    private String key = "-----BEGIN PRIVATE KEY-----\n" +
+            "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDAFzH+URXAvOoL\n" +
+            "0NSdIePQTTVsan13c+7D9tAilJAtRcxUjOz2lMZYBzrdsVYGbktfseEvF6o9dyoX\n" +
+            "X/py6DM0QqBNW/0uEv1ouS44po0VvykHVXrAq0u8E8HHFtr09VQSO/ceXrFd6haQ\n" +
+            "aCckbdp1TPn1q8w+U2bRkqUji7zzfwll6AaB4dhKZ1v5NFuff1PWmuk2x7b0u2yR\n" +
+            "uANLHLqmNB4ik7bUTiIyacXeVSZRZRFGwJjd+1WnyiybwV6QbQ0nndw6iaz2wGWt\n" +
+            "XDif7DJE0axMReUZVKJLqMagS5R5ra6FdlnUPw0nbJMwnDOLk9ofSfne0LTSTD6K\n" +
+            "/VZ26izbAgMBAAECggEBALF0vDq1reLgo1dHFSQUquFEcpY1yrMP5wQifyVzGb65\n" +
+            "PIrfpgomZxXrl/Y2XcKTIg7FxcI7moouDDSL9lMxMByXcIAG+14VLQYSDSFIvA3b\n" +
+            "C4w666wSk2Ss29eQxbaG7aPqweDMmg6osy+1CHQfCDJVapYKoCTz54i0cNrlvSk0\n" +
+            "FZ3o99uAvAcLtrsqbnXO57NXQVajoSH0bkMZd+TuZqEIX3CzHoNEVhzvqaKedqA6\n" +
+            "Cd22Y2m6cnW0H10Chko05FtskLYD+jw275LiUtInplBtG3n5/uDIamsOPo9XG8i0\n" +
+            "a4rxaJYsRqXYqDOEjLi/QCUrYBtJ+gqT/qMOTjAoKAECgYEA/VPdvc03vScjIu4T\n" +
+            "vNXjXxv81HZPm/IoTYTgvTvrEqErQ/CIwTQJer1XUJ9M43n+XkVZsMKkUIMlwt2+\n" +
+            "G0wBwYkDUgIXFEJhb170BVgwyZHE+Djr0E7NunbAv/oQu8AfQzk5HZpcQwxVg8w8\n" +
+            "Vj2ecLb4GK0D9iJ4zLwlsRw2RukCgYEAwh30AG7gq5y9Mj/BusuDvyNZZKjE/pJz\n" +
+            "HtC7a/OzOyr+Bpr2VBxVDeEFth22bd/a4ohv1QcwNAa2LzelNfQRQURq/vqpDmuj\n" +
+            "g0ESQavh3i3Tax2LXO582HWueuNL+8Ufyb6WDJDvYuz0F3WBJhxixP3I7VgMhPWV\n" +
+            "tK/wEEDDwyMCgYEArR3M4NIHDzpZppsv3dIE6ZAEvWSEjrtzk1YFBwyVXkvJd0o/\n" +
+            "Clj3SWtu6eeS8bkCfYXC/ypkg6i7+2jxa1ILuShanoZTI0Mhtqwa8jQMUxNMmZy8\n" +
+            "ecQAjzZsDkVjfgqS0quePn6oIiGhpsnBSeYeCkTfUm2Z0XBJQRAqadgvt1ECgYBK\n" +
+            "FAgzyhxvIUeKT45s7JGAdcr9gPJ8fAL2tY1wqvWxFL0QZD6w5ocG3uLBFyGxWIY9\n" +
+            "gPe8ghvBHvaTmlav+k5DbAqw95Ngb29c/Y4sBZ4SncZa0FGIy3JVYMOPHgK3OAjj\n" +
+            "gpncfcr9I5QbB7qbgqWmq3rsKHfOnbHd3G5upWiPpQKBgCaPW2vyT/nfCvfh0z//\n" +
+            "QSv0//4zy7pDdOolP5ZRsUo5cU4aiv4XgTSglR2jEJyr4bMYCN/+4tnqp0tIUzt1\n" +
+            "RWJhXLU1dm4QhCTccWMAyQgktn3SB5Ww3+qyLr1klUwkO+rx8kkNjv3rC/u5EzQ9\n" +
+            "q3DJ9in4wyYBNPVDB5kJom5i\n" +
+            "-----END PRIVATE KEY-----";
+
+
+    @Test
+    void webUriPatternReplacement() throws IOException, URISyntaxException {
+        try (var tempFolder = new TemporaryDirectory()) {
+            var app = new GitHubApplication(key, "y", "z");
+            var host = new GitHubHost(URIBuilder.base("http://www.example.com").build(),
+                                      app, Pattern.compile("^(http://www.example.com)/test/(.*)$"), "$1/another/$2");
+            assertEquals(new URI("http://www.example.com/another/hello"), host.getWebURI("/test/hello"));
+        }
+    }
+}
diff a/forge/src/test/java/org/openjdk/skara/forge/PositionMapperTests.java b/forge/src/test/java/org/openjdk/skara/forge/github/PositionMapperTests.java
--- a/forge/src/test/java/org/openjdk/skara/forge/PositionMapperTests.java
+++ b/forge/src/test/java/org/openjdk/skara/forge/github/PositionMapperTests.java
@@ -18,13 +18,14 @@
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package org.openjdk.skara.forge;
+package org.openjdk.skara.forge.github;
 
 import org.junit.jupiter.api.*;
+import org.openjdk.skara.forge.github.PositionMapper;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 class PositionMapperTests {
     private static final String diff = "diff --git a/vcs/src/main/java/org/openjdk/skara/vcs/Range.java b/vcs/src/main/java/org/openjdk/skara/vcs/Range.java\n" +
diff a/host/src/main/java/org/openjdk/skara/host/Credential.java b/host/src/main/java/org/openjdk/skara/host/Credential.java
--- /dev/null
+++ b/host/src/main/java/org/openjdk/skara/host/Credential.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.host;
+
+public class Credential {
+    private final String username;
+    private final String password;
+
+    public Credential(String username, String password) {
+        this.username = username;
+        this.password = password;
+    }
+
+    public String password() {
+        return password;
+    }
+
+    public String username() {
+        return username;
+    }
+}
diff a/host/src/main/java/org/openjdk/skara/host/PersonalAccessToken.java b/host/src/main/java/org/openjdk/skara/host/PersonalAccessToken.java
--- a/host/src/main/java/org/openjdk/skara/host/PersonalAccessToken.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-public class PersonalAccessToken {
-    private final String userName;
-    private final String token;
-
-    public PersonalAccessToken(String userName, String token) {
-        this.userName = userName;
-        this.token = token;
-    }
-
-    public String token() {
-        return token;
-    }
-
-    public String userName() {
-        return userName;
-    }
-}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTrackerFactory.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTrackerFactory.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTrackerFactory.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTrackerFactory.java
@@ -25,12 +25,12 @@
 import org.openjdk.skara.host.*;
 
 import java.net.URI;
 
 public class IssueTrackerFactory {
-    public static IssueTracker createJiraHost(URI uri, PersonalAccessToken pat) {
-        if (pat != null) {
+    public static IssueTracker createJiraHost(URI uri, Credential credential) {
+        if (credential != null) {
             throw new RuntimeException("authentication not implemented yet");
         }
         return new JiraHost(uri);
     }
 }
diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -70,16 +70,19 @@
         @Override
         public Forge createRepositoryHost(int userIndex) {
             var hostUri = URIBuilder.base(config.get("host").asString()).build();
             var apps = config.get("apps").asArray();
             var key = configDir.resolve(apps.get(userIndex).get("key").asString());
-            return ForgeFactory.createGitHubHost(hostUri,
-                                                null,
-                                                null,
-                                                key.toString(),
-                                                apps.get(userIndex).get("id").asString(),
-                                                apps.get(userIndex).get("installation").asString());
+            try {
+                var keyContents = Files.readString(key, StandardCharsets.UTF_8);
+                var pat = new Credential(apps.get(userIndex).get("id").asString() + ";" +
+                                                 apps.get(userIndex).get("installation").asString(),
+                                         keyContents);
+                return Forge.from("github", hostUri, pat, null);
+            } catch (IOException e) {
+                throw new RuntimeException("Cannot read private key: " + key);
+            }
         }
 
         @Override
         public IssueTracker createIssueHost(int userIndex) {
             throw new RuntimeException("not implemented yet");
@@ -110,13 +113,13 @@
 
         @Override
         public Forge createRepositoryHost(int userIndex) {
             var hostUri = URIBuilder.base(config.get("host").asString()).build();
             var users = config.get("users").asArray();
-            var pat = new PersonalAccessToken(users.get(userIndex).get("name").asString(),
+            var pat = new Credential(users.get(userIndex).get("name").asString(),
                                               users.get(userIndex).get("pat").asString());
-            return ForgeFactory.createGitLabHost(hostUri, pat);
+            return Forge.from("gitlab", hostUri, pat, null);
         }
 
         @Override
         public IssueTracker createIssueHost(int userIndex) {
             throw new RuntimeException("not implemented yet");
