diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -95,10 +95,15 @@
         }
 
         return writer.toString();
     }
 
+    private EmailAddress commitsToSender(List<Commit> commits) {
+        var commit = commits.get(commits.size() - 1);
+        return EmailAddress.from(commit.committer().name(), commit.committer().email());
+    }
+
     private String commitsToSubject(HostedRepository repository, List<Commit> commits, Branch branch) {
         var subject = new StringBuilder();
         subject.append(repository.getRepositoryType().shortName());
         subject.append(": ");
         subject.append(repository.getName());
@@ -143,13 +148,14 @@
                 log.warning("Pull request " + prLink + " found in " + rfrCandidates.size() + " RFR threads - expected 1");
                 ret.add(commit);
                 continue;
             }
             var rfr = rfrCandidates.get(0);
+            var author = sender != null ? sender : commitsToSender(commits);
             var body = commitToText(repository, commit);
             var email = Email.reply(rfr, "Re: [Integrated] " + rfr.subject(), body)
-                             .author(sender)
+                             .author(author)
                              .recipient(recipient)
                              .headers(headers)
                              .build();
             list.post(email);
         }
@@ -168,11 +174,13 @@
         for (var commit : commits) {
             printer.println(commitToText(repository, commit));
         }
 
         var subject = commitsToSubject(repository, commits, branch);
-        var email = Email.create(sender, subject, writer.toString())
+        var author = sender != null ? sender : commitsToSender(commits);
+        var email = Email.create(subject, writer.toString())
+                         .author(author)
                          .recipient(recipient)
                          .headers(headers)
                          .build();
 
         list.post(email);
