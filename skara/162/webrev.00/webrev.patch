diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -24,10 +24,11 @@
 
 import org.openjdk.skara.census.*;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.jcheck.JCheck;
 import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.vcs.openjdk.Issue;
 import org.openjdk.skara.vcs.openjdk.*;
 
 import java.io.*;
 import java.nio.file.Path;
 import java.util.*;
diff a/host/src/main/java/org/openjdk/skara/host/Host.java b/host/src/main/java/org/openjdk/skara/host/Host.java
--- a/host/src/main/java/org/openjdk/skara/host/Host.java
+++ b/host/src/main/java/org/openjdk/skara/host/Host.java
@@ -25,10 +25,11 @@
 import java.net.URI;
 
 public interface Host {
     boolean isValid();
     HostedRepository getRepository(String name);
+    IssueProject getIssueProject(String name);
     HostUserDetails getUserDetails(String username);
     HostUserDetails getCurrentUserDetails();
     boolean supportsReviewBody();
 
     static Host from(URI uri, PersonalAccessToken pat) {
diff a/host/src/main/java/org/openjdk/skara/host/HostedRepository.java b/host/src/main/java/org/openjdk/skara/host/HostedRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/HostedRepository.java
+++ b/host/src/main/java/org/openjdk/skara/host/HostedRepository.java
@@ -26,11 +26,11 @@
 import org.openjdk.skara.vcs.*;
 
 import java.net.URI;
 import java.util.*;
 
-public interface HostedRepository {
+public interface HostedRepository extends IssueProject {
     Host host();
     PullRequest createPullRequest(HostedRepository target,
                                   String targetRef,
                                   String sourceRef,
                                   String title,
@@ -40,11 +40,10 @@
     List<PullRequest> findPullRequestsWithComment(String author, String body);
     Optional<PullRequest> parsePullRequestUrl(String url);
     String getName();
     Optional<HostedRepository> getParent();
     URI getUrl();
-    URI getWebUrl();
     URI getWebUrl(Hash hash);
     VCS getRepositoryType();
     String getFileContents(String filename, String ref);
     String getNamespace();
     Optional<WebHook> parseWebHook(JSONValue body);
diff a/host/src/main/java/org/openjdk/skara/host/Issue.java b/host/src/main/java/org/openjdk/skara/host/Issue.java
--- /dev/null
+++ b/host/src/main/java/org/openjdk/skara/host/Issue.java
@@ -0,0 +1,147 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.host;
+
+import java.net.URI;
+import java.time.ZonedDateTime;
+import java.util.List;
+
+public interface Issue {
+    /**
+     * Project containing the issue.
+     * @return
+     */
+    IssueProject project();
+
+    /**
+     * The repository-specific identifier.
+     * @return
+     */
+    String getId();
+
+    /**
+     * The host-specific author name.
+     * @return
+     */
+    HostUserDetails getAuthor();
+
+    /**
+     * Title of the request.
+     * @return
+     */
+    String getTitle();
+
+    /**
+     * Update the title of the request.
+     * @param title
+     */
+    void setTitle(String title);
+
+    /**
+     * The main body of the request.
+     * @return
+     */
+    String getBody();
+
+    /**
+     * Update the main body of the request.
+     * @param body
+     */
+    void setBody(String body);
+
+    /**
+     * All comments on the issue, in ascending creation time order.
+     * @return
+     */
+    List<Comment> getComments();
+
+    /**
+     * Posts a new comment.
+     * @param body
+     */
+    Comment addComment(String body);
+
+    /**
+     * Updates an existing comment.
+     * @param id
+     * @param body
+     */
+    Comment updateComment(String id, String body);
+
+    /**
+     * When the request was created.
+     * @return
+     */
+    ZonedDateTime getCreated();
+
+    /**
+     * When the request was last updated.
+     * @return
+     */
+    ZonedDateTime getUpdated();
+
+    enum State {
+        OPEN,
+        CLOSED
+    }
+
+    /**
+     * Set the state.
+     * @param state Desired state
+     */
+    void setState(State state);
+
+    /**
+     * Adds the given label.
+     * @param label
+     */
+    void addLabel(String label);
+
+    /**
+     * Removes the given label.
+     * @param label
+     */
+    void removeLabel(String label);
+
+    /**
+     * Retrieves all the currently set labels.
+     * @return
+     */
+    List<String> getLabels();
+
+    /**
+     * Returns a link that will lead to the issue.
+     */
+    URI getWebUrl();
+
+    /**
+     * Returns all usernames assigned to the issue.
+     */
+    List<HostUserDetails> getAssignees();
+
+    /**
+     * Update the list of assignees.
+     * @param assignees
+     */
+    void setAssignees(List<HostUserDetails> assignees);
+}
diff a/host/src/main/java/org/openjdk/skara/host/IssueProject.java b/host/src/main/java/org/openjdk/skara/host/IssueProject.java
--- /dev/null
+++ b/host/src/main/java/org/openjdk/skara/host/IssueProject.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.host;
+
+import java.net.URI;
+import java.util.List;
+
+public interface IssueProject {
+    Host host();
+    URI getWebUrl();
+    Issue createIssue(String title, List<String> body);
+    Issue getIssue(String id);
+    List<Issue> getIssues();
+}
diff a/host/src/main/java/org/openjdk/skara/host/PullRequest.java b/host/src/main/java/org/openjdk/skara/host/PullRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/PullRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/PullRequest.java
@@ -22,30 +22,15 @@
  */
 package org.openjdk.skara.host;
 
 import org.openjdk.skara.vcs.Hash;
 
-import java.net.URI;
-import java.time.ZonedDateTime;
 import java.util.*;
 
-public interface PullRequest {
-
+public interface PullRequest extends Issue {
     HostedRepository repository();
 
-    /**
-     * The repository-specific identifier.
-     * @return
-     */
-    String getId();
-
-    /**
-     * The host-specific author name.
-     * @return
-     */
-    HostUserDetails getAuthor();
-
     /**
      * List of reviews, in descending chronological order.
      * @return
      */
     List<Review> getReviews();
@@ -101,64 +86,10 @@
      * Returns the current head of the ref the request is intended to be merged into.
      * @return
      */
     Hash getTargetHash();
 
-    /**
-     * Title of the request.
-     * @return
-     */
-    String getTitle();
-
-    /**
-     * Update the title of the request.
-     * @param title
-     */
-    void setTitle(String title);
-
-    /**
-     * The main body of the request.
-     * @return
-     */
-    String getBody();
-
-    /**
-     * Update the main body of the request.
-     * @param body
-     */
-    void setBody(String body);
-
-    /**
-     * All comments on the issue, in ascending creation time order.
-     * @return
-     */
-    List<Comment> getComments();
-
-    /**
-     * Posts a new comment.
-     * @param body
-     */
-    Comment addComment(String body);
-
-    /**
-     * Updates an existing comment.
-     * @param id
-     * @param body
-     */
-    Comment updateComment(String id, String body);
-
-    /**
-     * When the request was created.
-     * @return
-     */
-    ZonedDateTime getCreated();
-
-    /**
-     * When the request was last updated.
-     * @return
-     */
-    ZonedDateTime getUpdated();
 
     /**
      * List of completed checks on the given hash.
      * @return
      */
@@ -173,51 +104,6 @@
     /**
      * Updates an existing check.
      * @param check
      */
     void updateCheck(Check check);
-
-    enum State {
-        OPEN,
-        CLOSED
-    }
-
-    /**
-     * Set the state.
-     * @param state Desired state
-     */
-    void setState(State state);
-
-    /**
-     * Adds the given label.
-     * @param label
-     */
-    void addLabel(String label);
-
-    /**
-     * Removes the given label.
-     * @param label
-     */
-    void removeLabel(String label);
-
-    /**
-     * Retrieves all the currently set labels.
-     * @return
-     */
-    List<String> getLabels();
-
-    /**
-     * Returns a link that will lead to the PR.
-     */
-    URI getWebUrl();
-
-    /**
-     * Returns all usernames assigned to the PR.
-     */
-    List<HostUserDetails> getAssignees();
-
-    /**
-     * Update the list of assignees.
-     * @param assignees
-     */
-    void setAssignees(List<HostUserDetails> assignees);
 }
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
@@ -157,10 +157,15 @@
     @Override
     public HostedRepository getRepository(String name) {
         return new GitHubRepository(this, name);
     }
 
+    @Override
+    public IssueProject getIssueProject(String name) {
+        throw new RuntimeException("not implemented yet");
+    }
+
     @Override
     public HostUserDetails getUserDetails(String username) {
         var details = request.get("users/" + URLEncoder.encode(username, StandardCharsets.UTF_8)).execute().asObject();
 
         // Always present
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
@@ -51,10 +51,15 @@
     @Override
     public HostedRepository repository() {
         return repository;
     }
 
+    @Override
+    public IssueProject project() {
+        return repository;
+    }
+
     @Override
     public String getId() {
         return json.get("number").toString();
     }
 
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
@@ -70,10 +70,25 @@
     @Override
     public Host host() {
         return gitHubHost;
     }
 
+    @Override
+    public Issue createIssue(String title, List<String> body) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public Issue getIssue(String id) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public List<Issue> getIssues() {
+        throw new RuntimeException("not implemented yet");
+    }
+
     @Override
     public PullRequest createPullRequest(HostedRepository target,
                                          String targetRef,
                                          String sourceRef,
                                          String title,
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
+++ b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
@@ -90,10 +90,15 @@
     @Override
     public HostedRepository getRepository(String name) {
         return new GitLabRepository(this, name);
     }
 
+    @Override
+    public IssueProject getIssueProject(String name) {
+        throw new RuntimeException("not implemented yet");
+    }
+
     private HostUserDetails parseUserDetails(JSONObject details) {
         var id = details.get("id").asInt();
         var username = details.get("username").asString();
         var name = details.get("name").asString();
         return new HostUserDetails(id, username, name);
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
@@ -51,10 +51,15 @@
     @Override
     public HostedRepository repository() {
         return repository;
     }
 
+    @Override
+    public IssueProject project() {
+        return repository;
+    }
+
     @Override
     public String getId() {
         return json.get("iid").toString();
     }
 
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java
+++ b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java
@@ -63,10 +63,25 @@
     @Override
     public Host host() {
         return gitLabHost;
     }
 
+    @Override
+    public Issue createIssue(String title, List<String> body) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public Issue getIssue(String id) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public List<Issue> getIssues() {
+        throw new RuntimeException("not implemented yet");
+    }
+
     @Override
     public Optional<HostedRepository> getParent() {
         if (json.contains("forked_from_project")) {
             var parent = json.get("forked_from_project").get("path_with_namespace").asString();
             return Optional.of(new GitLabRepository(gitLabHost, parent));
diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -48,10 +48,11 @@
     private final Logger log = Logger.getLogger("org.openjdk.skara.test");
 
     private interface Credentials {
         Host createNewHost(int userIndex);
         HostedRepository getHostedRepository(Host host);
+        IssueProject getIssueProject(Host host);
         String getNamespaceName();
         default void close() {}
     }
 
     private static class GitHubCredentials implements Credentials {
@@ -79,10 +80,15 @@
         @Override
         public HostedRepository getHostedRepository(Host host) {
             return host.getRepository(config.get("project").asString());
         }
 
+        @Override
+        public IssueProject getIssueProject(Host host) {
+            return host.getIssueProject(config.get("project").asString());
+        }
+
         @Override
         public String getNamespaceName() {
             return config.get("namespace").asString();
         }
     }
@@ -106,10 +112,15 @@
         @Override
         public HostedRepository getHostedRepository(Host host) {
             return host.getRepository(config.get("project").asString());
         }
 
+        @Override
+        public IssueProject getIssueProject(Host host) {
+            return host.getIssueProject(config.get("project").asString());
+        }
+
         @Override
         public String getNamespaceName() {
             return config.get("namespace").asString();
         }
     }
@@ -136,10 +147,15 @@
         @Override
         public HostedRepository getHostedRepository(Host host) {
             return host.getRepository("test");
         }
 
+        @Override
+        public IssueProject getIssueProject(Host host) {
+            return host.getIssueProject("test");
+        }
+
         @Override
         public String getNamespaceName() {
             return "test";
         }
 
@@ -258,10 +274,15 @@
             }
         }
         return repo;
     }
 
+    public IssueProject getIssueProject() {
+        var host = getHost();
+        return credentials.getIssueProject(host);
+    }
+
     public PullRequest createPullRequest(HostedRepository hostedRepository, String targetRef, String sourceRef, String title) {
         var pr = hostedRepository.createPullRequest(hostedRepository, targetRef, sourceRef, title, List.of());
         pullRequestsToBeClosed.add(pr);
         return pr;
     }
diff a/test/src/main/java/org/openjdk/skara/test/IssueData.java b/test/src/main/java/org/openjdk/skara/test/IssueData.java
--- /dev/null
+++ b/test/src/main/java/org/openjdk/skara/test/IssueData.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.test;
+
+import org.openjdk.skara.host.*;
+
+import java.time.ZonedDateTime;
+import java.util.*;
+
+class IssueData {
+    Issue.State state = Issue.State.OPEN;
+    String body = "";
+    String title = "";
+    final List<Comment> comments = new ArrayList<>();
+    final Set<String> labels = new HashSet<>();
+    ZonedDateTime created = ZonedDateTime.now();
+    ZonedDateTime lastUpdate = created;
+}
diff a/test/src/main/java/org/openjdk/skara/test/PullRequestData.java b/test/src/main/java/org/openjdk/skara/test/PullRequestData.java
--- /dev/null
+++ b/test/src/main/java/org/openjdk/skara/test/PullRequestData.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.test;
+
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.vcs.Hash;
+
+import java.util.*;
+
+class PullRequestData extends IssueData {
+    Hash headHash;
+    final List<ReviewComment> reviewComments = new ArrayList<>();
+    final Set<Check> checks = new HashSet<>();
+    final List<Review> reviews = new ArrayList<>();
+}
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -36,12 +36,14 @@
     private HostData data;
 
     private static class HostData {
         final List<HostUserDetails> users = new ArrayList<>();
         final Map<String, Repository> repositories = new HashMap<>();
+        final Map<String, IssueProject> issueProjects = new HashMap<>();
         final Set<TemporaryDirectory> folders = new HashSet<>();
         private final Map<String, TestPullRequest> pullRequests = new HashMap<>();
+        private final Map<String, TestIssue> issues = new HashMap<>();
     }
 
     private Repository createLocalRepository() {
         var folder = new TemporaryDirectory();
         data.folders.add(folder);
@@ -93,10 +95,24 @@
             data.repositories.put(name, localRepository);
         }
         return new TestHostedRepository(this, name, localRepository);
     }
 
+    @Override
+    public IssueProject getIssueProject(String name) {
+        if (data.issueProjects.containsKey(name)) {
+            return data.issueProjects.get(name);
+        } else {
+            if (data.issueProjects.size() > 0) {
+                throw new RuntimeException("A test host can only manage a single issue project");
+            }
+            var issueProject = new TestIssueProject(this, name);
+            data.issueProjects.put(name, issueProject);
+            return issueProject;
+        }
+    }
+
     @Override
     public HostUserDetails getUserDetails(String username) {
         return data.users.stream()
                     .filter(user -> user.userName().equals(username))
                     .findAny()
@@ -136,6 +152,26 @@
                                 .sorted(Comparator.comparing(Map.Entry::getKey))
                                 .map(pr -> getPullRequest(repository, pr.getKey()))
                                 .filter(TestPullRequest::isOpen)
                                 .collect(Collectors.toList());
     }
+
+    TestIssue createIssue(TestIssueProject issueProject, String title, List<String> body) {
+        var id = String.valueOf(data.issues.size() + 1);
+        var issue = TestIssue.createNew(issueProject, id, title, body);
+        data.issues.put(id ,issue);
+        return issue;
+    }
+
+    TestIssue getIssue(TestIssueProject issueProject, String id) {
+        var original = data.issues.get(id);
+        return TestIssue.createFrom(issueProject, original);
+    }
+
+    List<TestIssue> getIssues(TestIssueProject issueProject) {
+        return data.issues.entrySet().stream()
+                          .sorted(Comparator.comparing(Map.Entry::getKey))
+                          .map(issue -> getIssue(issueProject, issue.getKey()))
+                          .filter(TestIssue::isOpen)
+                          .collect(Collectors.toList());
+    }
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
@@ -31,17 +31,18 @@
 import java.nio.file.Path;
 import java.util.*;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
-public class TestHostedRepository implements HostedRepository {
+public class TestHostedRepository extends TestIssueProject implements HostedRepository {
     private final TestHost host;
     private final String projectName;
     private final Repository localRepository;
     private final Pattern pullRequestPattern;
 
+        super(host, projectName);
         this.host = host;
         this.projectName = projectName;
         this.localRepository = localRepository;
         pullRequestPattern = Pattern.compile(getUrl().toString() + "/pr/" + "(\\d+)");
     }
diff a/test/src/main/java/org/openjdk/skara/test/TestIssue.java b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
--- /dev/null
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
@@ -0,0 +1,179 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.test;
+
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.host.network.URIBuilder;
+
+import java.net.URI;
+import java.time.ZonedDateTime;
+import java.util.*;
+
+public class TestIssue implements Issue {
+    protected final String id;
+    protected final IssueProject issueProject;
+    protected final HostUserDetails author;
+    protected final HostUserDetails user;
+    protected final IssueData data;
+
+    protected TestIssue(TestIssueProject issueProject, String id, HostUserDetails author, HostUserDetails user, IssueData data) {
+        this.id = id;
+        this.issueProject = issueProject;
+        this.author = author;;
+        this.user = user;
+        this.data = data;
+    }
+
+    static TestIssue createNew(TestIssueProject issueProject, String id, String title, List<String> body) {
+        var data = new IssueData();
+        data.title = title;
+        data.body = String.join("\n", body);
+        var issue = new TestIssue(issueProject, id, issueProject.host().getCurrentUserDetails(), issueProject.host().getCurrentUserDetails(), data);
+        return issue;
+    }
+
+    static TestIssue createFrom(TestIssueProject issueProject, TestIssue other) {
+        var issue = new TestIssue(issueProject, other.id, other.author, issueProject.host().getCurrentUserDetails(), other.data);
+        return issue;
+    }
+
+    @Override
+    public IssueProject project() {
+        return issueProject;
+    }
+
+    @Override
+    public String getId() {
+        return id;
+    }
+
+    @Override
+    public HostUserDetails getAuthor() {
+        return author;
+    }
+
+    @Override
+    public String getTitle() {
+        return data.title;
+    }
+
+    @Override
+    public void setTitle(String title) {
+        data.title = title;
+        data.lastUpdate = ZonedDateTime.now();
+    }
+
+    @Override
+    public String getBody() {
+        return data.body;
+    }
+
+    @Override
+    public void setBody(String body) {
+        data.body = body;
+        data.lastUpdate = ZonedDateTime.now();
+    }
+
+    @Override
+    public List<Comment> getComments() {
+        return new ArrayList<>(data.comments);
+    }
+
+    @Override
+    public Comment addComment(String body) {
+        var comment = new Comment(String.valueOf(data.comments.size()),
+                                  body,
+                                  user,
+                                  ZonedDateTime.now(),
+                                  ZonedDateTime.now());
+        data.comments.add(comment);
+        data.lastUpdate = ZonedDateTime.now();
+        return comment;
+    }
+
+    @Override
+    public Comment updateComment(String id, String body) {
+        var originalComment = data.comments.get(Integer.parseInt(id));
+        var comment = new Comment(originalComment.id(),
+                                  body,
+                                  originalComment.author(),
+                                  originalComment.createdAt(),
+                                  ZonedDateTime.now());
+        data.comments.remove(Integer.parseInt(id));
+        data.comments.add(Integer.parseInt(id), comment);
+        data.lastUpdate = ZonedDateTime.now();
+        return comment;
+    }
+
+    @Override
+    public ZonedDateTime getCreated() {
+        return data.created;
+    }
+
+    @Override
+    public ZonedDateTime getUpdated() {
+        return data.lastUpdate;
+    }
+
+    @Override
+    public void setState(State state) {
+        data.state = state;
+        data.lastUpdate = ZonedDateTime.now();
+    }
+
+    boolean isOpen() {
+        return data.state.equals(Issue.State.OPEN);
+    }
+
+    @Override
+    public void addLabel(String label) {
+        data.labels.add(label);
+        data.lastUpdate = ZonedDateTime.now();
+    }
+
+    @Override
+    public void removeLabel(String label) {
+        data.labels.remove(label);
+        data.lastUpdate = ZonedDateTime.now();
+    }
+
+    @Override
+    public List<String> getLabels() {
+        return new ArrayList<>(data.labels);
+    }
+
+    @Override
+    public URI getWebUrl() {
+        return URIBuilder.base(issueProject.getWebUrl()).appendPath(id).build();
+    }
+
+    @Override
+    public List<HostUserDetails> getAssignees() {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void setAssignees(List<HostUserDetails> assignees) {
+        throw new RuntimeException("not implemented yet");
+    }
+}
diff a/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java b/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
--- /dev/null
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.test;
+
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.host.network.URIBuilder;
+
+import java.net.URI;
+import java.util.*;
+
+public class TestIssueProject implements IssueProject {
+    private final String projectName;
+    private final TestHost host;
+
+    @Override
+    public Host host() {
+        return host;
+    }
+
+    @Override
+    public URI getWebUrl() {
+        return URIBuilder.base("http://localhost/project/" + projectName).build();
+    }
+
+    public TestIssueProject(TestHost host, String projectName) {
+        this.host = host;
+        this.projectName = projectName;
+    }
+
+    @Override
+    public Issue createIssue(String title, List<String> body) {
+        return host.createIssue(this, title, body);
+    }
+
+    @Override
+    public Issue getIssue(String id) {
+        return host.getIssue(this, id);
+    }
+
+    @Override
+    public List<Issue> getIssues() {
+        return new ArrayList<>(host.getIssues(this));
+    }
+}
diff a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
--- a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
@@ -30,38 +30,19 @@
 import java.time.ZonedDateTime;
 import java.util.*;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 
-public class TestPullRequest implements PullRequest {
+public class TestPullRequest extends TestIssue implements PullRequest {
     private final TestHostedRepository repository;
-    private final String id;
-    private final HostUserDetails author;
-    private final HostUserDetails user;
     private final String targetRef;
     private final String sourceRef;
     private final PullRequestData data;
 
-    private static class PullRequestData {
-        private Hash headHash;
-        PullRequest.State state = PullRequest.State.OPEN;
-        String body = "";
-        String title = "";
-        final List<Comment> comments = new ArrayList<>();
-        final List<ReviewComment> reviewComments = new ArrayList<>();
-        final Set<Check> checks = new HashSet<>();
-        final Set<String> labels = new HashSet<>();
-        final List<Review> reviews = new ArrayList<>();
-        ZonedDateTime created = ZonedDateTime.now();
-        ZonedDateTime lastUpdate = created;
-    }
-
     private TestPullRequest(TestHostedRepository repository, String id, HostUserDetails author, HostUserDetails user, String targetRef, String sourceRef, PullRequestData data) {
+        super(repository, id, author, user, data);
         this.repository = repository;
-        this.id = id;
-        this.author = author;
-        this.user = user;
         this.targetRef = targetRef;
         this.sourceRef = sourceRef;
         this.data = data;
 
         try {
@@ -92,17 +73,12 @@
     public HostedRepository repository() {
         return repository;
     }
 
     @Override
-    public String getId() {
-        return id;
-    }
-
-    @Override
-    public HostUserDetails getAuthor() {
-        return author;
+    public IssueProject project() {
+        return null;
     }
 
     @Override
     public List<Review> getReviews() {
         return new ArrayList<>(data.reviews);
@@ -166,73 +142,10 @@
     @Override
     public Hash getTargetHash() {
         return repository.getBranchHash(targetRef);
     }
 
-    @Override
-    public String getTitle() {
-        return data.title;
-    }
-
-    @Override
-    public void setTitle(String title) {
-        data.title = title;
-        data.lastUpdate = ZonedDateTime.now();
-    }
-
-    @Override
-    public String getBody() {
-        return data.body;
-    }
-
-    @Override
-    public void setBody(String body) {
-        data.body = body;
-        data.lastUpdate = ZonedDateTime.now();
-    }
-
-    @Override
-    public List<Comment> getComments() {
-        return new ArrayList<>(data.comments);
-    }
-
-    @Override
-    public Comment addComment(String body) {
-        var comment = new Comment(String.valueOf(data.comments.size()),
-                                  body,
-                                  user,
-                                  ZonedDateTime.now(),
-                                  ZonedDateTime.now());
-        data.comments.add(comment);
-        data.lastUpdate = ZonedDateTime.now();
-        return comment;
-    }
-
-    @Override
-    public Comment updateComment(String id, String body) {
-        var originalComment = data.comments.get(Integer.parseInt(id));
-        var comment = new Comment(originalComment.id(),
-                                  body,
-                                  originalComment.author(),
-                                  originalComment.createdAt(),
-                                  ZonedDateTime.now());
-        data.comments.remove(Integer.parseInt(id));
-        data.comments.add(Integer.parseInt(id), comment);
-        data.lastUpdate = ZonedDateTime.now();
-        return comment;
-    }
-
-    @Override
-    public ZonedDateTime getCreated() {
-        return data.created;
-    }
-
-    @Override
-    public ZonedDateTime getUpdated() {
-        return data.lastUpdate;
-    }
-
     @Override
     public Map<String, Check> getChecks(Hash hash) {
         return data.checks.stream()
                 .filter(check -> check.hash().equals(hash))
                 .collect(Collectors.toMap(Check::name, Function.identity()));
@@ -258,51 +171,14 @@
         data.checks.remove(existing);
         data.checks.add(updated);
         data.lastUpdate = ZonedDateTime.now();
     }
 
-    @Override
-    public void setState(State state) {
-        data.state = state;
-        data.lastUpdate = ZonedDateTime.now();
-    }
-
-    boolean isOpen() {
-        return data.state.equals(PullRequest.State.OPEN);
-    }
-
-    @Override
-    public void addLabel(String label) {
-        data.labels.add(label);
-        data.lastUpdate = ZonedDateTime.now();
-    }
-
-    @Override
-    public void removeLabel(String label) {
-        data.labels.remove(label);
-        data.lastUpdate = ZonedDateTime.now();
-    }
-
-    @Override
-    public List<String> getLabels() {
-        return new ArrayList<>(data.labels);
-    }
-
     @Override
     public URI getWebUrl() {
         try {
             return new URI(repository.getUrl().toString() + "/pr/" + getId());
         } catch (URISyntaxException e) {
-
-    @Override
-    public List<HostUserDetails> getAssignees() {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public void setAssignees(List<HostUserDetails> assignees) {
-        throw new RuntimeException("not implemented yet");
-    }
 }
