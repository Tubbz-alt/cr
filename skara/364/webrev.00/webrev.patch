diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AdditionalConfiguration.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AdditionalConfiguration.java
--- /dev/null
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AdditionalConfiguration.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.pr;
+
+import org.openjdk.skara.host.HostUser;
+import org.openjdk.skara.issuetracker.Comment;
+
+import java.util.*;
+
+public class AdditionalConfiguration {
+    static List<String> get(HostUser botUser, List<Comment> comments) {
+        var ret = new ArrayList<String>();
+        var requiredReviewersOverride = ReviewersTracker.currentRequiredReviewers(botUser, comments);
+        if (requiredReviewersOverride.isPresent()) {
+            ret.add("[checks \"reviewers\"]");
+            ret.add("minimum=" + requiredReviewersOverride.get());
+        }
+        return ret;
+    }
+}
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -480,11 +480,11 @@
                 } else {
                     localHash = rebasedHash.get();
                 }
 
                 // Determine current status
-                prInstance.executeChecks(localHash, censusInstance, visitor);
+                prInstance.executeChecks(localHash, censusInstance, visitor, AdditionalConfiguration.get(pr.repository().forge().currentUser(), comments));
                 additionalErrors = botSpecificChecks();
             }
             else {
                 additionalErrors = List.of("This PR contains no changes");
             }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
@@ -42,11 +42,11 @@
     private final HostedRepository censusRepo;
     private final String censusRef;
     private final Map<String, String> blockingLabels;
     private final IssueProject issueProject;
 
-    private final Pattern metadataComments = Pattern.compile("<!-- (?:(add|remove) contributor)|(?:summary: ')|(?:solves: ')");
+    private final Pattern metadataComments = Pattern.compile("<!-- (?:(add|remove) contributor)|(?:summary: ')|(?:solves: ')|(?:Number of required Reviewers id marker)");
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
     CheckWorkItem(PullRequest pr, HostedRepository censusRepo, String censusRef, Map<String, String> blockingLabels,
                   Consumer<RuntimeException> errorHandler, IssueProject issueProject) {
         super(pr, errorHandler);
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
@@ -47,11 +47,12 @@
             "help", new HelpCommand(),
             "integrate", new IntegrateCommand(),
             "sponsor", new SponsorCommand(),
             "contributor", new ContributorCommand(),
             "summary", new SummaryCommand(),
-            "solves", new SolvesCommand()
+            "solves", new SolvesCommand(),
+            "reviewers", new ReviewersCommand()
     );
 
     static class HelpCommand implements CommandHandler {
         static private Map<String, String> external = null;
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
@@ -90,11 +90,11 @@
                     localHash = rebasedHash.get();
                 }
             }
 
             var issues = prInstance.createVisitor(localHash, censusInstance);
-            prInstance.executeChecks(localHash, censusInstance, issues);
+            prInstance.executeChecks(localHash, censusInstance, issues, AdditionalConfiguration.get(pr.repository().forge().currentUser(), allComments));
             if (!issues.getMessages().isEmpty()) {
                 reply.print("Your merge request cannot be fulfilled at this time, as ");
                 reply.println("your changes failed the final jcheck:");
                 issues.getMessages().stream()
                       .map(line -> " * " + line)
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -23,11 +23,11 @@
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.census.*;
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.jcheck.JCheck;
+import org.openjdk.skara.jcheck.*;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.Issue;
 import org.openjdk.skara.vcs.openjdk.*;
 
 import java.io.*;
@@ -213,13 +213,13 @@
     PullRequestCheckIssueVisitor createVisitor(Hash localHash, CensusInstance censusInstance) throws IOException {
         var checks = JCheck.checks(localRepo(), censusInstance.census(), localHash);
         return new PullRequestCheckIssueVisitor(checks);
     }
 
-    void executeChecks(Hash localHash, CensusInstance censusInstance, PullRequestCheckIssueVisitor visitor) throws Exception {
+    void executeChecks(Hash localHash, CensusInstance censusInstance, PullRequestCheckIssueVisitor visitor, List<String> additionalConfiguration) throws Exception {
         try (var issues = JCheck.check(localRepo(), censusInstance.census(), CommitMessageParsers.v1, "HEAD~1..HEAD",
-                                       localHash, new HashMap<>(), new HashSet<>())) {
+                                       localHash, new HashMap<>(), new HashSet<>(), additionalConfiguration)) {
             for (var issue : issues) {
                 issue.accept(visitor);
             }
         }
     }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewersCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewersCommand.java
--- /dev/null
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewersCommand.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.pr;
+
+import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.issuetracker.Comment;
+
+import java.io.PrintWriter;
+import java.nio.file.Path;
+import java.util.List;
+
+public class ReviewersCommand implements CommandHandler {
+    @Override
+    public void handle(PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
+        if (!ProjectPermissions.mayReview(censusInstance, comment.author())) {
+            reply.println("Only [Reviewers](https://openjdk.java.net/bylaws#reviewer) are allowed to set the number of required Reviewers.");
+            return;
+        }
+
+        int numReviewers;
+        try {
+            numReviewers = Integer.parseInt(args);
+        } catch (NumberFormatException e) {
+            reply.println("Usage: `/reviewers <n>` where `<n>` is the number of required Reviewers.");
+            return;
+        }
+
+        reply.println(ReviewersTracker.setReviewersMarker(numReviewers));
+        reply.println("The number of required Reviewers is now set to " + numReviewers + ".");
+    }
+
+    @Override
+    public String description() {
+        return "set the number of required Reviewers for this PR";
+    }
+}
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewersTracker.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewersTracker.java
--- /dev/null
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewersTracker.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.pr;
+
+import org.openjdk.skara.host.HostUser;
+import org.openjdk.skara.issuetracker.Comment;
+
+import java.util.*;
+import java.util.regex.*;
+import java.util.stream.Collectors;
+
+class ReviewersTracker {
+    private final static String reviewersMarker = "<!-- Number of required Reviewers id marker (%d) -->";
+    private final static Pattern reviewersMarkerPattern = Pattern.compile(
+            "<!-- Number of required Reviewers id marker \\((\\d+)\\) -->");
+
+    static String setReviewersMarker(int numReviewers) {
+        return String.format(reviewersMarker, numReviewers);
+    }
+
+    static Optional<Integer> currentRequiredReviewers(HostUser botUser, List<Comment> comments) {
+        var reviewersActions = comments.stream()
+                                       .filter(comment -> comment.author().equals(botUser))
+                                       .map(comment -> reviewersMarkerPattern.matcher(comment.body()))
+                                       .filter(Matcher::find)
+                                       .collect(Collectors.toList());
+        if (reviewersActions.isEmpty()) {
+            return Optional.empty();
+        }
+        var lastMatch = reviewersActions.get(reviewersActions.size() - 1);
+        return Optional.of(Integer.parseInt(lastMatch.group(1)));
+    }
+}
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
@@ -86,11 +86,11 @@
                     localHash = rebasedHash.get();
                 }
             }
 
             var issues = prInstance.createVisitor(localHash, censusInstance);
-            prInstance.executeChecks(localHash, censusInstance, issues);
+            prInstance.executeChecks(localHash, censusInstance, issues, AdditionalConfiguration.get(pr.repository().forge().currentUser(), allComments));
             if (!issues.getMessages().isEmpty()) {
                 reply.print("Your merge request cannot be fulfilled at this time, as ");
                 reply.println("your changes failed the final jcheck:");
                 issues.getMessages().stream()
                       .map(line -> " * " + line)
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ReviewersTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ReviewersTests.java
--- /dev/null
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ReviewersTests.java
@@ -0,0 +1,218 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.pr;
+
+import org.openjdk.skara.forge.Review;
+import org.openjdk.skara.test.*;
+
+import org.junit.jupiter.api.*;
+
+import java.io.IOException;
+
+import static org.junit.jupiter.api.Assertions.*;
+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertLastCommentContains;
+
+public class ReviewersTests {
+    @Test
+    void simple(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+            var bot = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addReviewer(integrator.forge().currentUser().id())
+                                           .addCommitter(author.forge().currentUser().id());
+            var prBot = new PullRequestBot(bot, censusBuilder.build(), "master");
+
+            // Populate the projects repository
+            var localRepoFolder = tempFolder.path().resolve("localrepo");
+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.url(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "123: This is a pull request");
+
+            var reviewerPr = integrator.pullRequest(pr.id());
+
+            // No arguments
+            reviewerPr.addComment("/reviewers");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a help message
+            assertLastCommentContains(reviewerPr,"is the number of required Reviewers");
+
+            // Invalid syntax
+            reviewerPr.addComment("/reviewers two");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a help message
+            assertLastCommentContains(reviewerPr,"is the number of required Reviewers");
+
+            // Set the number
+            reviewerPr.addComment("/reviewers 2");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a success message
+            assertLastCommentContains(reviewerPr,"number of required Reviewers is now set to 2");
+
+            // Approve it as another user
+            reviewerPr.addReview(Review.Verdict.APPROVED, "Approved");
+            TestBotRunner.runPeriodicItems(prBot);
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The PR should not yet be considered as ready for review
+            var updatedPr = author.pullRequest(pr.id());
+            assertFalse(updatedPr.labels().contains("ready"));
+
+            // Now reduce the number of required reviewers
+            reviewerPr.addComment("/reviewers 1");
+            TestBotRunner.runPeriodicItems(prBot);
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The PR should now be considered as ready for review
+            updatedPr = author.pullRequest(pr.id());
+            assertTrue(updatedPr.labels().contains("ready"));
+        }
+    }
+
+    @Test
+    void noIntegration(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+            var bot = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addReviewer(integrator.forge().currentUser().id())
+                                           .addCommitter(author.forge().currentUser().id());
+            var prBot = new PullRequestBot(bot, censusBuilder.build(), "master");
+
+            // Populate the projects repository
+            var localRepoFolder = tempFolder.path().resolve("localrepo");
+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.url(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "123: This is a pull request");
+
+            var reviewerPr = integrator.pullRequest(pr.id());
+
+            // Set the number
+            reviewerPr.addComment("/reviewers 2");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a success message
+            assertLastCommentContains(reviewerPr,"number of required Reviewers is now set to 2");
+
+            // Approve it as another user
+            reviewerPr.addReview(Review.Verdict.APPROVED, "Approved");
+            TestBotRunner.runPeriodicItems(prBot);
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // It should not be possible to integrate yet
+            pr.addComment("/integrate");
+            TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(reviewerPr,"Too few reviewers found (have 1, need at least 2)");
+
+            // Relax the requirement
+            reviewerPr.addComment("/reviewers 1");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // It should now work fine
+            pr.addComment("/integrate");
+            TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(reviewerPr,"Pushed as commit");
+        }
+    }
+
+    @Test
+    void noSponsoring(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+            var bot = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addReviewer(integrator.forge().currentUser().id())
+                                           .addAuthor(author.forge().currentUser().id());
+            var prBot = new PullRequestBot(bot, censusBuilder.build(), "master");
+
+            // Populate the projects repository
+            var localRepoFolder = tempFolder.path().resolve("localrepo");
+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.url(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "123: This is a pull request");
+
+            var reviewerPr = integrator.pullRequest(pr.id());
+
+            // Approve it as another user
+            reviewerPr.addReview(Review.Verdict.APPROVED, "Approved");
+            TestBotRunner.runPeriodicItems(prBot);
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // Flag it as ready for integration
+            pr.addComment("/integrate");
+            TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(reviewerPr,"now ready to be sponsored");
+
+            // Set the number
+            reviewerPr.addComment("/reviewers 2");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a success message
+            assertLastCommentContains(reviewerPr,"number of required Reviewers is now set to 2");
+
+            // It should not be possible to sponsor
+            reviewerPr.addComment("/sponsor");
+            TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(reviewerPr,"Too few reviewers found (have 1, need at least 2)");
+
+            // Relax the requirement
+            reviewerPr.addComment("/reviewers 1");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // It should now work fine
+            reviewerPr.addComment("/sponsor");
+            TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(reviewerPr,"Pushed as commit");
+        }
+    }
+}
diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
@@ -41,10 +41,11 @@
     private final CommitMessageParser parser;
     private final String revisionRange;
     private final Map<String, Set<Hash>> whitelist;
     private final List<CommitCheck> commitChecks;
     private final List<RepositoryCheck> repositoryChecks;
+    private final List<String> additionalConfiguration;
     private final Logger log = Logger.getLogger("org.openjdk.skara.jcheck");
 
     private JCheckConfiguration cachedConfiguration = null;
 
     JCheck(ReadOnlyRepository repository,
@@ -52,16 +53,18 @@
            CommitMessageParser parser,
            String revisionRange,
            Pattern allowedBranches,
            Pattern allowedTags,
            Map<String, Set<Hash>> whitelist,
-           Set<Hash> blacklist) throws IOException {
+           Set<Hash> blacklist,
+           List<String> additionalConfiguration) throws IOException {
         this.repository = repository;
         this.census = census;
         this.parser = parser;
         this.revisionRange = revisionRange;
         this.whitelist = whitelist;
+        this.additionalConfiguration = additionalConfiguration;
 
         var utils = new Utilities();
         commitChecks = List.of(
             new AuthorCheck(),
             new CommitterCheck(census),
@@ -79,13 +82,14 @@
             new BranchesCheck(allowedBranches),
             new TagsCheck(allowedTags)
         );
     }
 
-    private static Optional<JCheckConfiguration> parseConfiguration(ReadOnlyRepository r, Hash h) {
+    private static Optional<JCheckConfiguration> parseConfiguration(ReadOnlyRepository r, Hash h, List<String> additionalConfiguration) {
         try {
-            var content = r.lines(Paths.get(".jcheck/conf"), h).orElse(Collections.emptyList());
+            var content = new ArrayList<>(r.lines(Paths.get(".jcheck/conf"), h).orElse(Collections.emptyList()));
+            content.addAll(additionalConfiguration);
             if (content.size() == 0) {
                 return Optional.empty();
             }
             return Optional.of(JCheckConfiguration.parse(content));
         } catch (IOException e) {
@@ -102,11 +106,11 @@
                                     .anyMatch(p -> p.source().path().isPresent() && p.source().path().get().equals(confPath) ||
                                                    p.target().path().isPresent() && p.target().path().get().equals(confPath));
 
 
         if (changesConfiguration || cachedConfiguration == null) {
-            var confAtCommit = parseConfiguration(repository, c.hash());
+            var confAtCommit = parseConfiguration(repository, c.hash(), additionalConfiguration);
             confAtCommit.ifPresent(jCheckConfiguration -> cachedConfiguration = jCheckConfiguration);
             return confAtCommit;
         } else {
             return Optional.of(cachedConfiguration);
         }
@@ -216,40 +220,52 @@
                                 CommitMessageParser parser,
                                 String branchRegex,
                                 String tagRegex,
                                 String revisionRange,
                                 Map<String, Set<Hash>> whitelist,
-                                Set<Hash> blacklist) throws IOException {
+                                Set<Hash> blacklist,
+                                List<String> additionalConfiguration) throws IOException {
 
         var defaultBranchRegex = "|" + repository.defaultBranch().name();
         var allowedBranches = Pattern.compile("^(?:" + branchRegex + defaultBranchRegex + ")$");
 
         var defaultTag = repository.defaultTag();
         var defaultTagRegex = defaultTag.isPresent() ? "|" + defaultTag.get().name() : "";
         var allowedTags = Pattern.compile("^(?:" + tagRegex + defaultTagRegex + ")$");
 
-        var jcheck = new JCheck(repository, census, parser, revisionRange, allowedBranches, allowedTags, whitelist, blacklist);
+        var jcheck = new JCheck(repository, census, parser, revisionRange, allowedBranches, allowedTags, whitelist, blacklist, additionalConfiguration);
         return jcheck.issues();
     }
 
     public static Issues check(ReadOnlyRepository repository,
                                Census census,
                                CommitMessageParser parser,
                                String revisionRange,
                                Hash configuration,
                                Map<String, Set<Hash>> whitelist,
-                               Set<Hash> blacklist) throws IOException {
+                               Set<Hash> blacklist,
+                               List<String> additionalConfiguration) throws IOException {
         if (repository.isEmpty()) {
             return new Issues(new ArrayList<Issue>().iterator(), null);
         }
 
-        var conf = parseConfiguration(repository, configuration);
+        var conf = parseConfiguration(repository, configuration, additionalConfiguration);
 
         var branchRegex = conf.isPresent() ?  conf.get().repository().branches() : ".*";
         var tagRegex =  conf.isPresent() ?  conf.get().repository().tags() : ".*";
 
-        return check(repository, census, parser, branchRegex, tagRegex, revisionRange, whitelist, blacklist);
+        return check(repository, census, parser, branchRegex, tagRegex, revisionRange, whitelist, blacklist, additionalConfiguration);
+    }
+
+    public static Issues check(ReadOnlyRepository repository,
+                               Census census,
+                               CommitMessageParser parser,
+                               String revisionRange,
+                               Hash configuration,
+                               Map<String, Set<Hash>> whitelist,
+                               Set<Hash> blacklist) throws IOException {
+        return check(repository, census, parser, revisionRange, configuration, whitelist, blacklist, List.of());
     }
 
     public static Issues check(ReadOnlyRepository repository,
                                Census census,
                                CommitMessageParser parser,
@@ -278,9 +294,10 @@
                                 CommitMessageParsers.v1,
                                 hash.hex() + "^.." + hash.hex(),
                                 Pattern.compile(".*"),
                                 Pattern.compile(".*"),
                                 new HashMap<String, Set<Hash>>(),
-                                new HashSet<Hash>());
+                                new HashSet<Hash>(),
+                                List.of());
         return jcheck.checksForCommits();
     }
 }
