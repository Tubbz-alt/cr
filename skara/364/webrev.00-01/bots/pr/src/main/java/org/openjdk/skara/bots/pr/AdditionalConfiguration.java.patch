diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AdditionalConfiguration.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AdditionalConfiguration.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AdditionalConfiguration.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AdditionalConfiguration.java
@@ -22,19 +22,43 @@
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.Comment;
+import org.openjdk.skara.jcheck.JCheckConfiguration;
+import org.openjdk.skara.vcs.*;
 
+import java.io.IOException;
 import java.util.*;
 
 public class AdditionalConfiguration {
-    static List<String> get(HostUser botUser, List<Comment> comments) {
+    static List<String> get(ReadOnlyRepository repository, Hash hash, HostUser botUser, List<Comment> comments) throws IOException {
+        var currentConfiguration = JCheckConfiguration.from(repository, hash);
+        var currentReviewers = currentConfiguration.checks().reviewers();
         var ret = new ArrayList<String>();
-        var requiredReviewersOverride = ReviewersTracker.currentRequiredReviewers(botUser, comments);
-        if (requiredReviewersOverride.isPresent()) {
+        var additionalReviewers = ReviewersTracker.additionalRequiredReviewers(botUser, comments);
+        for (var additionalReviewer : additionalReviewers.entrySet()) {
             ret.add("[checks \"reviewers\"]");
-            ret.add("minimum=" + requiredReviewersOverride.get());
+            var role = additionalReviewer.getKey();
+            switch (role) {
+                case "lead":
+                    ret.add("lead=" + (currentReviewers.lead() + additionalReviewer.getValue()));
+                    break;
+                case "reviewers":
+                    ret.add("reviewers=" + (currentReviewers.reviewers() + additionalReviewer.getValue()));
+                    break;
+                case "committers":
+                    ret.add("committers=" + (currentReviewers.committers() + additionalReviewer.getValue()));
+                    break;
+                case "authors":
+                    ret.add("authors=" + (currentReviewers.authors() + additionalReviewer.getValue()));
+                    break;
+                case "contributors":
+                    ret.add("contributors=" + (currentReviewers.contributors() + additionalReviewer.getValue()));
+                    break;
+                default:
+                    break;
+            }
         }
         return ret;
     }
 }
