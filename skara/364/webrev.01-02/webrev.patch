diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AdditionalConfiguration.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AdditionalConfiguration.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AdditionalConfiguration.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AdditionalConfiguration.java
@@ -30,35 +30,19 @@
 import java.io.IOException;
 import java.util.*;
 
 public class AdditionalConfiguration {
     static List<String> get(ReadOnlyRepository repository, Hash hash, HostUser botUser, List<Comment> comments) throws IOException {
-        var currentConfiguration = JCheckConfiguration.from(repository, hash);
-        var currentReviewers = currentConfiguration.checks().reviewers();
         var ret = new ArrayList<String>();
         var additionalReviewers = ReviewersTracker.additionalRequiredReviewers(botUser, comments);
-        for (var additionalReviewer : additionalReviewers.entrySet()) {
-            ret.add("[checks \"reviewers\"]");
-            var role = additionalReviewer.getKey();
-            switch (role) {
-                case "lead":
-                    ret.add("lead=" + (currentReviewers.lead() + additionalReviewer.getValue()));
-                    break;
-                case "reviewers":
-                    ret.add("reviewers=" + (currentReviewers.reviewers() + additionalReviewer.getValue()));
-                    break;
-                case "committers":
-                    ret.add("committers=" + (currentReviewers.committers() + additionalReviewer.getValue()));
-                    break;
-                case "authors":
-                    ret.add("authors=" + (currentReviewers.authors() + additionalReviewer.getValue()));
-                    break;
-                case "contributors":
-                    ret.add("contributors=" + (currentReviewers.contributors() + additionalReviewer.getValue()));
-                    break;
-                default:
-                    break;
-            }
+        if (additionalReviewers.isEmpty()) {
+            return ret;
         }
+
+        var currentConfiguration = JCheckConfiguration.from(repository, hash);
+        var updatedLimits = ReviewersTracker.updatedRoleLimits(currentConfiguration, additionalReviewers.get().number(), additionalReviewers.get().role());
+
+        ret.add("[checks \"reviewers\"]");
+        updatedLimits.forEach((role, count) -> ret.add(role + "=" + count));
         return ret;
     }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewersCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewersCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewersCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewersCommand.java
@@ -26,10 +26,11 @@
 import org.openjdk.skara.issuetracker.Comment;
 
 import java.io.PrintWriter;
 import java.nio.file.Path;
 import java.util.*;
+import java.util.stream.Collectors;
 
 public class ReviewersCommand implements CommandHandler {
     private static final Map<String, String> roleMappings = Map.of(
             "lead", "lead",
             "reviewers", "reviewers",
@@ -40,18 +41,18 @@
             "author", "author",
             "contributors", "contributors",
             "contributor", "contributors");
 
     private void showHelp(PrintWriter reply) {
-        reply.println("Usage: `/reviewers <n> [<role>]` where `<n>` is the additional number of required reviewers. " +
-                              "If role is set, the reviewers need to have that project role. If omitted, role defaults to `committers`.");
+        reply.println("Usage: `/reviewers <n> [<role>]` where `<n>` is the number of required reviewers. " +
+                              "If role is set, the reviewers need to have that project role. If omitted, role defaults to `authors`.");
     }
 
     @Override
     public void handle(PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
         if (!ProjectPermissions.mayReview(censusInstance, comment.author())) {
-            reply.println("Only [Reviewers](https://openjdk.java.net/bylaws#reviewer) are allowed to increase the number of required reviewers.");
+            reply.println("Only [Reviewers](https://openjdk.java.net/bylaws#reviewer) are allowed to change the number of required reviewers.");
             return;
         }
 
         var splitArgs = args.split(" ");
         if (splitArgs.length < 1 || splitArgs.length > 2) {
@@ -64,29 +65,48 @@
             numReviewers = Integer.parseInt(splitArgs[0]);
         } catch (NumberFormatException e) {
             showHelp(reply);
             return;
         }
-
-        if (numReviewers < 0 || numReviewers > 10) {
+        if (numReviewers > 10) {
             showHelp(reply);
-            reply.println("Number of additional required reviewers has to be between 0 and 10.");
+            reply.println("Cannot increase the required number of reviewers above 10 (requested: " + numReviewers + ")");
             return;
         }
 
-        String role = "committers";
+        String role = "authors";
         if (splitArgs.length > 1) {
             if (!roleMappings.containsKey(splitArgs[1].toLowerCase())) {
                 showHelp(reply);
                 reply.println("Unknown role `" + splitArgs[1] + "` specified.");
                 return;
             }
             role = roleMappings.get(splitArgs[1].toLowerCase());
         }
 
+        var updatedLimits = ReviewersTracker.updatedRoleLimits(censusInstance.configuration(), numReviewers, role);
+        if (updatedLimits.get(role) > numReviewers) {
+            showHelp(reply);
+            reply.println("Number of required reviewers of role " + role + " cannot be decreased below " + updatedLimits.get(role));
+            return;
+        }
+
         reply.println(ReviewersTracker.setReviewersMarker(numReviewers, role));
-        reply.println("The number of additional required reviews from " + role + " is now set to " + numReviewers + ".");
+        var totalRequired = updatedLimits.values().stream().mapToInt(Integer::intValue).sum();
+        reply.print("The number of required reviews for this PR is now set to " + totalRequired);
+
+        // Create a helpful message regarding the required distribution (if applicable)
+        var nonZeroDescriptions = updatedLimits.entrySet().stream()
+                .filter(entry -> entry.getValue() > 0)
+                .map(entry -> entry.getValue() + " of role " + entry.getKey())
+                .collect(Collectors.toList());
+        if (nonZeroDescriptions.size() > 1) {
+            nonZeroDescriptions.remove(nonZeroDescriptions.size() - 1);
+            reply.print(" (with at least " + String.join(", ", nonZeroDescriptions) + ")");
+        }
+
+        reply.println(".");
     }
 
     @Override
     public String description() {
         return "set the number of additional required reviewers for this PR";
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewersTracker.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewersTracker.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewersTracker.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewersTracker.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.Comment;
+import org.openjdk.skara.jcheck.JCheckConfiguration;
 
 import java.util.*;
 import java.util.regex.*;
 import java.util.stream.Collectors;
 
@@ -36,21 +37,78 @@
 
     static String setReviewersMarker(int numReviewers, String role) {
         return String.format(reviewersMarker, numReviewers, role);
     }
 
-    static Map<String, Integer> additionalRequiredReviewers(HostUser botUser, List<Comment> comments) {
+    static LinkedHashMap<String, Integer> updatedRoleLimits(JCheckConfiguration checkConfiguration, int count, String role) {
+        var currentReviewers = checkConfiguration.checks().reviewers();
+
+        var updatedLimits = new LinkedHashMap<String, Integer>();
+        updatedLimits.put("lead", currentReviewers.lead());
+        updatedLimits.put("reviewers", currentReviewers.reviewers());
+        updatedLimits.put("committers", currentReviewers.committers());
+        updatedLimits.put("authors", currentReviewers.authors());
+        updatedLimits.put("contributors", currentReviewers.contributors());
+
+        // Increase the required role level by the requested amount (while subtracting higher roles)
+        var remainingAdditional = count;
+        var roles = new ArrayList<>(updatedLimits.keySet());
+        for (var r : roles) {
+            if (!r.equals(role)) {
+                remainingAdditional -= updatedLimits.get(r);
+                if (remainingAdditional <= 0) {
+                    break;
+                }
+            } else {
+                updatedLimits.replace(r, updatedLimits.get(r) + remainingAdditional);
+                break;
+            }
+        }
+
+        // Decrease lower roles (if any) to avoid increasing the total count above the requested
+        Collections.reverse(roles);
+        var remainingRemovals = count;
+        for (var r : roles) {
+            if (!r.equals(role)) {
+                var removed = Math.max(0, updatedLimits.get(r) - remainingRemovals);
+                updatedLimits.replace(r, removed);
+                remainingRemovals -= removed;
+            } else {
+                break;
+            }
+        }
+
+        return updatedLimits;
+    }
+
+    static class AdditionalRequiredReviewers {
+        private int number;
+        private String role;
+
+        AdditionalRequiredReviewers(int number, String role) {
+            this.number = number;
+            this.role = role;
+        }
+
+        int number() {
+            return number;
+        }
+
+        String role() {
+            return role;
+        }
+    }
+
+    static Optional<AdditionalRequiredReviewers> additionalRequiredReviewers(HostUser botUser, List<Comment> comments) {
         var ret = new HashMap<String, Integer>();
         var reviewersActions = comments.stream()
                                        .filter(comment -> comment.author().equals(botUser))
                                        .map(comment -> reviewersMarkerPattern.matcher(comment.body()))
                                        .filter(Matcher::find)
                                        .collect(Collectors.toList());
         if (reviewersActions.isEmpty()) {
-            return ret;
-        }
-        for (var reviewersAction : reviewersActions) {
-            ret.put(reviewersAction.group(2), Integer.parseInt(reviewersAction.group(1)));
+            return Optional.empty();
         }
-        return ret;
+        var last = reviewersActions.get(reviewersActions.size() - 1);
+        return Optional.of(new AdditionalRequiredReviewers(Integer.parseInt(last.group(1)), last.group(2)));
     }
 }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ReviewersTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ReviewersTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ReviewersTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ReviewersTests.java
@@ -63,40 +63,40 @@
             // No arguments
             reviewerPr.addComment("/reviewers");
             TestBotRunner.runPeriodicItems(prBot);
 
             // The bot should reply with a help message
-            assertLastCommentContains(reviewerPr,"is the additional number of required reviewers");
+            assertLastCommentContains(reviewerPr,"is the number of required reviewers");
 
             // Invalid syntax
             reviewerPr.addComment("/reviewers two");
             TestBotRunner.runPeriodicItems(prBot);
 
             // The bot should reply with a help message
-            assertLastCommentContains(reviewerPr,"is the additional number of required reviewers");
+            assertLastCommentContains(reviewerPr,"is the number of required reviewers");
 
             // Too many
             reviewerPr.addComment("/reviewers 7001");
             TestBotRunner.runPeriodicItems(prBot);
-            assertLastCommentContains(reviewerPr,"Number of additional required reviewers has to be between");
+            assertLastCommentContains(reviewerPr,"Cannot increase the required number of reviewers above 10 (requested: 7001)");
 
             // Too few
             reviewerPr.addComment("/reviewers -3");
             TestBotRunner.runPeriodicItems(prBot);
-            assertLastCommentContains(reviewerPr,"Number of additional required reviewers has to be between");
+            assertLastCommentContains(reviewerPr,"Number of required reviewers of role authors cannot be decreased below 0");
 
             // Unknown role
             reviewerPr.addComment("/reviewers 2 penguins");
             TestBotRunner.runPeriodicItems(prBot);
             assertLastCommentContains(reviewerPr,"Unknown role `penguins` specified");
 
             // Set the number
-            reviewerPr.addComment("/reviewers 1");
+            reviewerPr.addComment("/reviewers 2");
             TestBotRunner.runPeriodicItems(prBot);
 
             // The bot should reply with a success message
-            assertLastCommentContains(reviewerPr,"additional required reviews from committers is now set to 1");
+            assertLastCommentContains(reviewerPr,"The number of required reviews for this PR is now set to 2 (with at least 1 of role reviewers).");
 
             // Approve it as another user
             reviewerPr.addReview(Review.Verdict.APPROVED, "Approved");
             TestBotRunner.runPeriodicItems(prBot);
             TestBotRunner.runPeriodicItems(prBot);
@@ -104,11 +104,11 @@
             // The PR should not yet be considered as ready for review
             var updatedPr = author.pullRequest(pr.id());
             assertFalse(updatedPr.labels().contains("ready"));
 
             // Now reduce the number of required reviewers
-            reviewerPr.addComment("/reviewers 0");
+            reviewerPr.addComment("/reviewers 1");
             TestBotRunner.runPeriodicItems(prBot);
             TestBotRunner.runPeriodicItems(prBot);
 
             // The PR should now be considered as ready for review
             updatedPr = author.pullRequest(pr.id());
@@ -116,20 +116,21 @@
 
             // Now request that the lead reviews
             reviewerPr.addComment("/reviewers 1 lead");
             TestBotRunner.runPeriodicItems(prBot);
             TestBotRunner.runPeriodicItems(prBot);
-            assertLastCommentContains(reviewerPr,"additional required reviews from lead is now set to 1");
+            assertLastCommentContains(reviewerPr,"The number of required reviews for this PR is now set to 1.");
 
             // The PR should no longer be considered as ready for review
             updatedPr = author.pullRequest(pr.id());
             assertFalse(updatedPr.labels().contains("ready"));
 
-            // Drop the extra requirement
-            reviewerPr.addComment("/reviewers 0 lead");
+            // Drop the extra requirement that it should be the lead
+            reviewerPr.addComment("/reviewers 1");
             TestBotRunner.runPeriodicItems(prBot);
             TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(reviewerPr,"The number of required reviews for this PR is now set to 1.");
 
             // The PR should now be considered as ready for review yet again
             updatedPr = author.pullRequest(pr.id());
             assertTrue(updatedPr.labels().contains("ready"));
         }
@@ -161,28 +162,28 @@
             var pr = credentials.createPullRequest(author, "master", "edit", "123: This is a pull request");
 
             var reviewerPr = integrator.pullRequest(pr.id());
 
             // Set the number
-            reviewerPr.addComment("/reviewers 1");
+            reviewerPr.addComment("/reviewers 2");
             TestBotRunner.runPeriodicItems(prBot);
 
             // The bot should reply with a success message
-            assertLastCommentContains(reviewerPr,"additional required reviews from committers is now set to 1");
+            assertLastCommentContains(reviewerPr,"The number of required reviews for this PR is now set to 2 (with at least 1 of role reviewers).");
 
             // Approve it as another user
             reviewerPr.addReview(Review.Verdict.APPROVED, "Approved");
             TestBotRunner.runPeriodicItems(prBot);
             TestBotRunner.runPeriodicItems(prBot);
 
             // It should not be possible to integrate yet
             pr.addComment("/integrate");
             TestBotRunner.runPeriodicItems(prBot);
-            assertLastCommentContains(reviewerPr,"Too few reviewers with at least role committer found (have 0, need at least 1)");
+            assertLastCommentContains(reviewerPr,"Too few reviewers with at least role author found (have 0, need at least 1)");
 
             // Relax the requirement
-            reviewerPr.addComment("/reviewers 0");
+            reviewerPr.addComment("/reviewers 1");
             TestBotRunner.runPeriodicItems(prBot);
 
             // It should now work fine
             pr.addComment("/integrate");
             TestBotRunner.runPeriodicItems(prBot);
@@ -226,23 +227,23 @@
             pr.addComment("/integrate");
             TestBotRunner.runPeriodicItems(prBot);
             assertLastCommentContains(reviewerPr,"now ready to be sponsored");
 
             // Set the number
-            reviewerPr.addComment("/reviewers 1");
+            reviewerPr.addComment("/reviewers 2");
             TestBotRunner.runPeriodicItems(prBot);
 
             // The bot should reply with a success message
-            assertLastCommentContains(reviewerPr,"additional required reviews from committers is now set to 1");
+            assertLastCommentContains(reviewerPr,"The number of required reviews for this PR is now set to 2 (with at least 1 of role reviewers).");
 
             // It should not be possible to sponsor
             reviewerPr.addComment("/sponsor");
             TestBotRunner.runPeriodicItems(prBot);
-            assertLastCommentContains(reviewerPr,"Too few reviewers with at least role committer found (have 0, need at least 1)");
+            assertLastCommentContains(reviewerPr,"Too few reviewers with at least role author found (have 0, need at least 1)");
 
             // Relax the requirement
-            reviewerPr.addComment("/reviewers 0");
+            reviewerPr.addComment("/reviewers 1");
             TestBotRunner.runPeriodicItems(prBot);
 
             // It should now work fine
             reviewerPr.addComment("/sponsor");
             TestBotRunner.runPeriodicItems(prBot);
