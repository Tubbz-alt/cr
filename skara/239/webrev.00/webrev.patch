diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -134,14 +134,19 @@
                 filterComments(body) +
                 "\n\n" +
                 replyFooter(prInstance);
     }
 
-    static String reviewCommentBody(String body, Review.Verdict verdict, String user, String role) {
-        var result = new StringBuilder(filterComments(body));
+    static String reviewCommentBody(String body) {
+        return filterComments(body);
+    }
+
+    static String reviewVerdictBody(String body, Review.Verdict verdict, String user, String role) {
+        var filteredBody = filterComments(body);
+        var result = new StringBuilder();
         if (verdict != Review.Verdict.NONE) {
-            if (result.length() > 0) {
+            if (filteredBody.length() > 0) {
                 result.append("\n\n");
                 result.append(infoSeparator);
                 result.append("\n\n");
             }
             if (verdict == Review.Verdict.APPROVED) {
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -279,26 +279,34 @@
                 continue;
             }
             reviewArchive.addComment(comment);
         }
 
+        // Review comments
+        var reviews = pr.reviews();
+        for (var review : reviews) {
+            if (ignoreComment(review.reviewer(), review.body().orElse(""))) {
+                continue;
+            }
+            reviewArchive.addReview(review);
+        }
+
         // File specific comments
         var reviewComments = pr.reviewComments();
         for (var reviewComment : reviewComments) {
             if (ignoreComment(reviewComment.author(), reviewComment.body())) {
                 continue;
             }
             reviewArchive.addReviewComment(reviewComment);
         }
 
-        // Review comments
-        var reviews = pr.reviews();
+        // Review verdict comments
         for (var review : reviews) {
             if (ignoreComment(review.reviewer(), review.body().orElse(""))) {
                 continue;
             }
-            reviewArchive.addReview(review);
+            reviewArchive.addReviewVerdict(review);
         }
 
         var newMails = reviewArchive.generatedEmails();
         if (newMails.isEmpty()) {
             return;
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -19,10 +19,11 @@
     private final EmailAddress sender;
     private final List<Email> existing;
     private final Map<String, Email> existingIds = new HashMap<>();
     private final List<Email> generated = new ArrayList<>();
     private final Map<String, Email> generatedIds = new HashMap<>();
+    private final Set<EmailAddress> approvalIds = new HashSet<>();
     private final List<Hash> reportedHeads;
     private final List<Hash> reportedBases;
 
     private EmailAddress getAuthorAddress(HostUser originalAuthor) {
         var contributor = censusInstance.namespace().get(originalAuthor.id());
@@ -325,26 +326,40 @@
         var id = getMessageId(review);
         if (existingIds.containsKey(getStableMessageId(id))) {
             return;
         }
 
+        // Default parent and subject
+        var parent = topCommentForHash(review.hash());
+        var subject = parent.subject();
+
+        var replyBody = ArchiveMessages.reviewCommentBody(review.body().orElse(""));
+
+        addReplyCommon(parent, review.reviewer(), subject, replyBody, id);
+    }
+
+    void addReviewVerdict(Review review) {
+        var id = getMessageId(review);
+        if (existingIds.containsKey(getStableMessageId(id))) {
+            return;
+        }
+
         var contributor = censusInstance.namespace().get(review.reviewer().id());
         var isReviewer = contributor != null && censusInstance.project().isReviewer(contributor.username(), censusInstance.configuration().census().version());
 
         // Default parent and subject
         var parent = topCommentForHash(review.hash());
         var subject = parent.subject();
 
         // Approvals by Reviewers get special treatment - post these as top-level comments
         if (review.verdict() == Review.Verdict.APPROVED && isReviewer) {
-            parent = topEmail();
-            subject = "Re: [Approved] " + "RFR: " + prInstance.pr().title();
+            approvalIds.add(id);
         }
 
         var userName = contributor != null ? contributor.username() : review.reviewer().userName() + "@" + censusInstance.namespace().name();
         var userRole = contributor != null ? projectRole(contributor) : "no project role";
-        var replyBody = ArchiveMessages.reviewCommentBody(review.body().orElse(""), review.verdict(), userName, userRole);
+        var replyBody = ArchiveMessages.reviewVerdictBody(review.body().orElse(""), review.verdict(), userName, userRole);
 
         addReplyCommon(parent, review.reviewer(), subject, replyBody, id);
     }
 
     void addReviewComment(ReviewComment reviewComment) {
@@ -370,8 +385,22 @@
 
         addReplyCommon(parent, reviewComment.author(), parent.subject(), body.toString(), id);
     }
 
     List<Email> generatedEmails() {
-        return generated;
+        var finalEmails = new ArrayList<Email>();
+        for (var email : generated) {
+            for (var approvalId : approvalIds) {
+                var collapsed = email.hasHeader("PR-Collapsed-IDs") ? email.headerValue("PR-Collapsed-IDs") + " " : "";
+                if (email.id().equals(approvalId) || collapsed.contains(getStableMessageId(approvalId))) {
+                    email = Email.reparent(topEmail(), email)
+                                 .subject("Re: [Approved] " + "RFR: " + prInstance.pr().title())
+                                 .build();
+                    break;
+                }
+            }
+            finalEmails.add(email);
+        }
+
+        return finalEmails;
     }
 }
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -489,10 +489,11 @@
             listServer.processIncoming();
             listServer.processIncoming();
 
             // Finally some approvals and another comment
             pr.addReview(Review.Verdict.APPROVED, "Nice");
+            reviewPr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, "The final review comment");
             reviewPr.addReview(Review.Verdict.APPROVED, "Looks fine");
             reviewPr.addReviewCommentReply(comment2, "You are welcome");
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
             listServer.processIncoming();
@@ -500,13 +501,13 @@
 
             // Sanity check the archive
             Repository.materialize(archiveFolder.path(), archive.url(), "master");
             assertEquals(9, archiveContainsCount(archiveFolder.path(), "^On.*wrote:"));
 
-            // File specific comments should appear before the approval
+            // File specific comments should appear after the approval
             var archiveText = archiveContents(archiveFolder.path()).orElseThrow();
-            assertTrue(archiveText.indexOf("Looks fine") > archiveText.indexOf("You are welcome"));
+            assertTrue(archiveText.indexOf("Looks fine") < archiveText.indexOf("The final review comment"));
 
             // Check the mailing list
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
             var mailmanList = mailmanServer.getList(listAddress.address());
             var conversations = mailmanList.conversations(Duration.ofDays(1));
@@ -541,14 +542,17 @@
             assertTrue(thread2reply1.body().contains("Sounds good"));
             var thread2reply2 = conversations.get(0).replies(thread2reply1).get(0);
             assertTrue(thread2reply2.body().contains("Thanks"));
 
             var replies = conversations.get(0).replies(mail);
-            var thread3 = conversations.get(0).replies(mail).get(2);
+            var thread3 = replies.get(2);
             assertEquals("Re: RFR: This is a pull request", thread3.subject());
-            var thread4 = conversations.get(0).replies(mail).get(3);
+            var thread4 = replies.get(3);
             assertEquals("Re: [Approved] RFR: This is a pull request", thread4.subject());
+            assertTrue(thread4.body().contains("Looks fine"));
+            assertTrue(thread4.body().contains("The final review comment"));
+            assertTrue(thread4.body().contains("Approved by integrationreviewer1 (Reviewer)"));
         }
     }
 
     @Test
     void reviewContext(TestInfo testInfo) throws IOException {
diff a/email/src/main/java/org/openjdk/skara/email/Email.java b/email/src/main/java/org/openjdk/skara/email/Email.java
--- a/email/src/main/java/org/openjdk/skara/email/Email.java
+++ b/email/src/main/java/org/openjdk/skara/email/Email.java
@@ -144,10 +144,18 @@
         return new EmailBuilder(subject, body)
                 .header("In-Reply-To", parent.id().toString())
                 .header("References", references);
     }
 
+    public static EmailBuilder reparent(Email newParent, Email email) {
+        var currentParent = email.headerValue("In-Reply-To");
+        var currentRefs = email.headerValue("References");
+
+        return from(email).header("In-Reply-To", newParent.id.toString())
+                          .header("References", currentRefs.replace(currentParent, newParent.id.toString()));
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
diff a/email/src/test/java/org/openjdk/skara/email/EmailTests.java b/email/src/test/java/org/openjdk/skara/email/EmailTests.java
--- a/email/src/test/java/org/openjdk/skara/email/EmailTests.java
+++ b/email/src/test/java/org/openjdk/skara/email/EmailTests.java
@@ -65,10 +65,28 @@
         assertEquals("y", copy.headerValue("X"));
         assertEquals("a", copy.headerValue("z"));
         assertEquals(original, copy);
     }
 
+    @Test
+    void reparent() {
+        var first = Email.create(EmailAddress.from("A", "a@b.c"), "First", "body")
+                         .recipient(EmailAddress.from("B", "b@b.c"))
+                         .build();
+        var second = Email.create(EmailAddress.from("A", "a@b.c"), "Second", "body")
+                          .recipient(EmailAddress.from("B", "b@b.c"))
+                          .build();
+        var reply = Email.reply(first, "The reply", "reply body")
+                         .author(EmailAddress.from("C", "c@b.c"))
+                         .build();
+        assertEquals(first.id().toString(), reply.headerValue("In-Reply-To"));
+        assertEquals(first.id().toString(), reply.headerValue("References"));
+        var updated = Email.reparent(second, reply).build();
+        assertEquals(second.id().toString(), updated.headerValue("In-Reply-To"));
+        assertEquals(second.id().toString(), updated.headerValue("References"));
+    }
+
     @Test
     void caseInsensitiveHeaders() {
         var mail = Email.parse("Message-ID: <a@b.c>\n" +
                                        "date: Wed, 27 Mar 2019 14:31:00 +0100\n" +
                                        "SUBJECT: hello\n" +
