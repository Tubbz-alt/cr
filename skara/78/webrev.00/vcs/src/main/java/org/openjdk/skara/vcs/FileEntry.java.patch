diff a/vcs/src/main/java/org/openjdk/skara/vcs/FileEntry.java b/vcs/src/main/java/org/openjdk/skara/vcs/FileEntry.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/FileEntry.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/FileEntry.java
@@ -24,20 +24,26 @@
 
 import java.util.Objects;
 import java.nio.file.Path;
 
 public class FileEntry {
+    private final Hash commit;
     private final FileType type;
     private final Hash hash;
     private final Path path;
 
-    public FileEntry(FileType type, Hash hash, Path path) {
+    public FileEntry(Hash commit, FileType type, Hash hash, Path path) {
+        this.commit = commit;
         this.type = type;
         this.hash = hash;
         this.path = path;
     }
 
+    public Hash commit() {
+        return commit;
+    }
+
     public FileType type() {
         return type;
     }
 
     public Hash hash() {
@@ -48,11 +54,11 @@
         return path;
     }
 
     @Override
     public int hashCode() {
-        return Objects.hash(type, hash, path);
+        return Objects.hash(commit, type, hash, path);
     }
 
     @Override
     public boolean equals(Object o) {
         if (!(o instanceof FileEntry)) {
@@ -58,11 +64,12 @@
         if (!(o instanceof FileEntry)) {
             return false;
         }
 
         var e = (FileEntry) o;
-        return Objects.equals(type, e.type) &&
+        return Objects.equals(commit, e.commit) &&
+               Objects.equals(type, e.type) &&
                Objects.equals(hash, e.hash) &&
                Objects.equals(path, e.path);
     }
 
     @Override
@@ -65,8 +72,8 @@
                Objects.equals(path, e.path);
     }
 
     @Override
     public String toString() {
-        return type.toString() + " " + hash.toString() + "\t" + path.toString();
+        return type.toString() + " blob " + hash.toString() + "\t" + path.toString();
     }
 }
