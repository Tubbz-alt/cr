diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
@@ -176,10 +176,14 @@
 
     public List<FileEntry> files(Hash h, List<Path> paths) throws IOException {
         return List.of();
     }
 
+    public boolean dump(FileEntry entry, Path to) throws IOException {
+        return false;
+    }
+
     public Diff diff(Hash base, Hash head) throws IOException {
         return null;
     }
 
     public Diff diff(Hash head) throws IOException {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/FileEntry.java b/vcs/src/main/java/org/openjdk/skara/vcs/FileEntry.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/FileEntry.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/FileEntry.java
@@ -24,20 +24,26 @@
 
 import java.util.Objects;
 import java.nio.file.Path;
 
 public class FileEntry {
+    private final Hash commit;
     private final FileType type;
     private final Hash hash;
     private final Path path;
 
-    public FileEntry(FileType type, Hash hash, Path path) {
+    public FileEntry(Hash commit, FileType type, Hash hash, Path path) {
+        this.commit = commit;
         this.type = type;
         this.hash = hash;
         this.path = path;
     }
 
+    public Hash commit() {
+        return commit;
+    }
+
     public FileType type() {
         return type;
     }
 
     public Hash hash() {
@@ -48,11 +54,11 @@
         return path;
     }
 
     @Override
     public int hashCode() {
-        return Objects.hash(type, hash, path);
+        return Objects.hash(commit, type, hash, path);
     }
 
     @Override
     public boolean equals(Object o) {
         if (!(o instanceof FileEntry)) {
@@ -58,11 +64,12 @@
         if (!(o instanceof FileEntry)) {
             return false;
         }
 
         var e = (FileEntry) o;
-        return Objects.equals(type, e.type) &&
+        return Objects.equals(commit, e.commit) &&
+               Objects.equals(type, e.type) &&
                Objects.equals(hash, e.hash) &&
                Objects.equals(path, e.path);
     }
 
     @Override
@@ -65,8 +72,8 @@
                Objects.equals(path, e.path);
     }
 
     @Override
     public String toString() {
-        return type.toString() + " " + hash.toString() + "\t" + path.toString();
+        return type.toString() + " blob " + hash.toString() + "\t" + path.toString();
     }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
@@ -64,10 +64,11 @@
     List<FileEntry> files(Hash h, List<Path> paths) throws IOException;
     default List<FileEntry> files(Hash h, Path... paths) throws IOException {
         return files(h, Arrays.asList(paths));
     }
 
+    boolean dump(FileEntry entry, Path to) throws IOException;
     Diff diff(Hash base, Hash head) throws IOException;
     Diff diff(Hash head) throws IOException;
     List<String> config(String key) throws IOException;
     Repository copyTo(Path destination) throws IOException;
     String pullPath(String remote) throws IOException;
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -684,11 +684,12 @@
             for (var line : res.stdout()) {
                 var parts = line.split("\t");
                 var metadata = parts[0].split(" ");
                 var filename = parts[1];
 
-                var entry = new FileEntry(FileType.fromOctal(metadata[0]),
+                var entry = new FileEntry(hash,
+                                          FileType.fromOctal(metadata[0]),
                                           new Hash(metadata[2]),
                                           Path.of(filename));
                 entries.add(entry);
             }
             return entries;
@@ -728,10 +729,22 @@
         }
 
         return Optional.empty();
     }
 
+    @Override
+    public boolean dump(FileEntry entry, Path to) throws IOException {
+        var type = entry.type();
+        if (type.isRegular()) {
+            var path = unpackFile(entry.hash().hex());
+            Files.createDirectories(to.getParent());
+            Files.move(path, to, StandardCopyOption.REPLACE_EXISTING);
+            return true;
+        }
+        return false;
+    }
+
     @Override
     public Diff diff(Hash from) throws IOException {
         return diff(from, null);
     }
 
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -653,11 +653,12 @@
             for (var line : res.stdout()) {
                 var parts = line.split("\t");
                 var metadata = parts[0].split(" ");
                 var path = Path.of(parts[1]);
                 if (include.isEmpty() || include.contains(path)) {
-                    var entry = new FileEntry(FileType.fromOctal(metadata[0]),
+                    var entry = new FileEntry(hash,
+                                              FileType.fromOctal(metadata[0]),
                                               new Hash(metadata[2]),
                                               path);
                     entries.add(entry);
                 }
             }
@@ -663,10 +664,21 @@
             }
             return entries;
         }
     }
 
+    @Override
+    public boolean dump(FileEntry entry, Path to) throws IOException {
+        var output = to.toAbsolutePath();
+        try (var p = capture("hg", "cat", "--output=" + output.toString(),
+                                          "--rev=" + entry.commit(),
+                                          entry.path().toString())) {
+            var res = await(p);
+            return Files.exists(output);
+        }
+    }
+
     @Override
     public void revert(Hash parent) throws IOException {
         try (var p = capture("hg", "revert", "--no-backup", "--all", "--rev", parent.hex())) {
             await(p);
         }
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -1630,6 +1630,27 @@
             entry = entries.get(0);
             assertEquals(Path.of("README"), entry.path());
             assertTrue(entry.type().isRegularNonExecutable());
         }
     }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testDump(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var r = Repository.init(dir.path(), vcs);
+            assertTrue(r.isClean());
+
+            var f = dir.path().resolve("README");
+            Files.writeString(f, "Hello\n");
+            r.add(f);
+            var initial = r.commit("Initial commit", "duke", "duke@openjdk.org");
+
+            var readme = r.files(initial).get(0);
+
+            var tmp = Files.createTempFile("README", "txt");
+            r.dump(readme, tmp);
+            assertEquals("Hello\n", Files.readString(tmp));
+            Files.delete(tmp);
+        }
+    }
 }
