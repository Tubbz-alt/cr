diff a/host/src/main/java/org/openjdk/skara/host/Host.java b/host/src/main/java/org/openjdk/skara/host/Host.java
--- a/host/src/main/java/org/openjdk/skara/host/Host.java
+++ b/host/src/main/java/org/openjdk/skara/host/Host.java
@@ -29,11 +29,11 @@
     HostedRepository getRepository(String name);
     IssueProject getIssueProject(String name);
     HostUserDetails getUserDetails(String username);
     HostUserDetails getCurrentUserDetails();
     boolean supportsReviewBody();
-    boolean isMemberOf(long groupId, HostUserDetails user);
+    boolean isMemberOf(String groupId, HostUserDetails user);
 
     static Host from(URI uri, PersonalAccessToken pat) {
         return HostFactory.createFromURI(uri, pat);
     }
 
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
@@ -199,15 +199,21 @@
     public boolean supportsReviewBody() {
         return true;
     }
 
     @Override
-    public boolean isMemberOf(long groupId, HostUserDetails user) {
+    public boolean isMemberOf(String groupId, HostUserDetails user) {
+        long gid = 0L;
+        try {
+            gid = Long.parseLong(groupId);
+        } catch (NumberFormatException e) {
+            throw new IllegalArgumentException("Group id is not a number: " + groupId);
+        }
         var username = URLEncoder.encode(user.userName(), StandardCharsets.UTF_8);
         var orgs = request.get("users/" + username + "/orgs").execute().asArray();
         for (var org : orgs) {
-            if (org.get("id").asLong() == groupId) {
+            if (org.get("id").asLong() == gid) {
                 return true;
             }
         }
 
         return false;
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
+++ b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
@@ -142,12 +142,18 @@
             throw new RuntimeException("Project does not seem to be a fork");
         }
     }
 
     @Override
-    public boolean isMemberOf(long groupId, HostUserDetails user) {
-        var details = request.get("groups/" + groupId + "/members/" + user.id())
+    public boolean isMemberOf(String groupId, HostUserDetails user) {
+        long gid = 0L;
+        try {
+            gid = Long.parseLong(groupId);
+        } catch (NumberFormatException e) {
+            throw new IllegalArgumentException("Group id is not a number: " + groupId);
+        }
+        var details = request.get("groups/" + gid + "/members/" + user.id())
                              .onError(r -> JSON.of())
                              .execute()
                              .asObject();
         return !details.isNull();
     }
diff a/host/src/test/java/org/openjdk/skara/host/HostTests.java b/host/src/test/java/org/openjdk/skara/host/HostTests.java
--- a/host/src/test/java/org/openjdk/skara/host/HostTests.java
+++ b/host/src/test/java/org/openjdk/skara/host/HostTests.java
@@ -33,10 +33,10 @@
 public class HostTests {
     @Test
     public void isMemberOfNegativeTests(TestInfo info) throws IOException {
         try (var credentials = new HostCredentials(info)) {
             var host = credentials.getHostedRepository().host();
-            var madeUpGroupIdThatCannotContainTestMember = 1234567890L;
+            var madeUpGroupIdThatCannotContainTestMember = "1234567890";
             assertFalse(host.isMemberOf(madeUpGroupIdThatCannotContainTestMember, host.getCurrentUserDetails()));
         }
     }
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -128,11 +128,11 @@
     public boolean supportsReviewBody() {
         return true;
     }
 
     @Override
-    public boolean isMemberOf(long groupId, HostUserDetails user) {
+    public boolean isMemberOf(String groupId, HostUserDetails user) {
         return false;
     }
 
     void close() {
         if (currentUser == 0) {
