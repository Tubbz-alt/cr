diff a/host/src/main/java/org/openjdk/skara/host/Host.java b/host/src/main/java/org/openjdk/skara/host/Host.java
--- a/host/src/main/java/org/openjdk/skara/host/Host.java
+++ b/host/src/main/java/org/openjdk/skara/host/Host.java
@@ -29,10 +29,11 @@
     HostedRepository getRepository(String name);
     IssueProject getIssueProject(String name);
     HostUserDetails getUserDetails(String username);
     HostUserDetails getCurrentUserDetails();
     boolean supportsReviewBody();
+    boolean isMemberOf(String groupId, HostUserDetails user);
 
     static Host from(URI uri, PersonalAccessToken pat) {
         return HostFactory.createFromURI(uri, pat);
     }
 
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
@@ -197,6 +197,25 @@
 
     @Override
     public boolean supportsReviewBody() {
         return true;
     }
+
+    @Override
+    public boolean isMemberOf(String groupId, HostUserDetails user) {
+        long gid = 0L;
+        try {
+            gid = Long.parseLong(groupId);
+        } catch (NumberFormatException e) {
+            throw new IllegalArgumentException("Group id is not a number: " + groupId);
+        }
+        var username = URLEncoder.encode(user.userName(), StandardCharsets.UTF_8);
+        var orgs = request.get("users/" + username + "/orgs").execute().asArray();
+        for (var org : orgs) {
+            if (org.get("id").asLong() == gid) {
+                return true;
+            }
+        }
+
+        return false;
+    }
 }
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
+++ b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
@@ -140,6 +140,21 @@
             }
         } else {
             throw new RuntimeException("Project does not seem to be a fork");
         }
     }
+
+    @Override
+    public boolean isMemberOf(String groupId, HostUserDetails user) {
+        long gid = 0L;
+        try {
+            gid = Long.parseLong(groupId);
+        } catch (NumberFormatException e) {
+            throw new IllegalArgumentException("Group id is not a number: " + groupId);
+        }
+        var details = request.get("groups/" + gid + "/members/" + user.id())
+                             .onError(r -> JSON.of())
+                             .execute()
+                             .asObject();
+        return !details.isNull();
+    }
 }
diff a/host/src/test/java/org/openjdk/skara/host/HostTests.java b/host/src/test/java/org/openjdk/skara/host/HostTests.java
--- /dev/null
+++ b/host/src/test/java/org/openjdk/skara/host/HostTests.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.host;
+
+import java.io.IOException;
+
+import org.openjdk.skara.test.HostCredentials;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.TestInfo;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+
+public class HostTests {
+    @Test
+    public void isMemberOfNegativeTests(TestInfo info) throws IOException {
+        try (var credentials = new HostCredentials(info)) {
+            var host = credentials.getHostedRepository().host();
+            var madeUpGroupIdThatCannotContainTestMember = "1234567890";
+            assertFalse(host.isMemberOf(madeUpGroupIdThatCannotContainTestMember, host.getCurrentUserDetails()));
+        }
+    }
+}
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -127,10 +127,15 @@
     @Override
     public boolean supportsReviewBody() {
         return true;
     }
 
+    @Override
+    public boolean isMemberOf(String groupId, HostUserDetails user) {
+        return false;
+    }
+
     void close() {
         if (currentUser == 0) {
             data.folders.forEach(TemporaryDirectory::close);
         }
     }
