diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
@@ -26,37 +26,61 @@
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.network.*;
 
 import java.net.URI;
-import java.util.Arrays;
+import java.util.*;
 
 public class JiraHost implements IssueTracker {
     private final URI uri;
+    private final String visibilityRole;
+    private final String securityLevel;
     private final RestRequest request;
 
     JiraHost(URI uri) {
         this.uri = uri;
+        this.visibilityRole = null;
+        this.securityLevel = null;
 
         var baseApi = URIBuilder.base(uri)
                                 .setPath("/rest/api/2/")
                                 .build();
         request = new RestRequest(baseApi);
     }
 
     JiraHost(URI uri, JiraVault jiraVault) {
         this.uri = uri;
+        this.visibilityRole = null;
+        this.securityLevel = null;
+        var baseApi = URIBuilder.base(uri)
+                                .setPath("/rest/api/2/")
+                                .build();
+        request = new RestRequest(baseApi, () -> Arrays.asList("Cookie", jiraVault.getCookie()));
+    }
+
+    JiraHost(URI uri, JiraVault jiraVault, String visibilityRole, String securityLevel) {
+        this.uri = uri;
+        this.visibilityRole = visibilityRole;
+        this.securityLevel = securityLevel;
         var baseApi = URIBuilder.base(uri)
                                 .setPath("/rest/api/2/")
                                 .build();
         request = new RestRequest(baseApi, () -> Arrays.asList("Cookie", jiraVault.getCookie()));
     }
 
     URI getUri() {
         return uri;
     }
 
+    Optional<String> visibilityRole() {
+        return Optional.ofNullable(visibilityRole);
+    }
+
+    Optional<String> securityLevel() {
+        return Optional.ofNullable(securityLevel);
+    }
+
     @Override
     public boolean isValid() {
         var version = request.get("serverInfo")
                              .onError(r -> JSON.object().put("invalid", true))
                              .execute();
@@ -66,17 +90,10 @@
     @Override
     public IssueProject project(String name) {
         return new JiraProject(this, request, name);
     }
 
-    private JSONObject userData(String name) {
-        var data = request.get("user")
-                          .param("username", name)
-                          .execute();
-        return data.asObject();
-    }
-
     @Override
     public HostUser user(String username) {
         var data = request.get("user")
                           .param("username", username)
                           .execute();
