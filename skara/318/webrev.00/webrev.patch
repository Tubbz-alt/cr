diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
@@ -26,37 +26,61 @@
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.network.*;
 
 import java.net.URI;
-import java.util.Arrays;
+import java.util.*;
 
 public class JiraHost implements IssueTracker {
     private final URI uri;
+    private final String visibilityRole;
+    private final String securityLevel;
     private final RestRequest request;
 
     JiraHost(URI uri) {
         this.uri = uri;
+        this.visibilityRole = null;
+        this.securityLevel = null;
 
         var baseApi = URIBuilder.base(uri)
                                 .setPath("/rest/api/2/")
                                 .build();
         request = new RestRequest(baseApi);
     }
 
     JiraHost(URI uri, JiraVault jiraVault) {
         this.uri = uri;
+        this.visibilityRole = null;
+        this.securityLevel = null;
+        var baseApi = URIBuilder.base(uri)
+                                .setPath("/rest/api/2/")
+                                .build();
+        request = new RestRequest(baseApi, () -> Arrays.asList("Cookie", jiraVault.getCookie()));
+    }
+
+    JiraHost(URI uri, JiraVault jiraVault, String visibilityRole, String securityLevel) {
+        this.uri = uri;
+        this.visibilityRole = visibilityRole;
+        this.securityLevel = securityLevel;
         var baseApi = URIBuilder.base(uri)
                                 .setPath("/rest/api/2/")
                                 .build();
         request = new RestRequest(baseApi, () -> Arrays.asList("Cookie", jiraVault.getCookie()));
     }
 
     URI getUri() {
         return uri;
     }
 
+    Optional<String> visibilityRole() {
+        return Optional.ofNullable(visibilityRole);
+    }
+
+    Optional<String> securityLevel() {
+        return Optional.ofNullable(securityLevel);
+    }
+
     @Override
     public boolean isValid() {
         var version = request.get("serverInfo")
                              .onError(r -> JSON.object().put("invalid", true))
                              .execute();
@@ -66,17 +90,10 @@
     @Override
     public IssueProject project(String name) {
         return new JiraProject(this, request, name);
     }
 
-    private JSONObject userData(String name) {
-        var data = request.get("user")
-                          .param("username", name)
-                          .execute();
-        return data.asObject();
-    }
-
     @Override
     public HostUser user(String username) {
         var data = request.get("user")
                           .param("username", username)
                           .execute();
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
@@ -29,23 +29,45 @@
 
 import java.net.URI;
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
 import java.util.*;
+import java.util.logging.Logger;
 import java.util.stream.Collectors;
 
 public class JiraIssue implements Issue {
     private final JiraProject jiraProject;
     private final RestRequest request;
     private final JSONValue json;
 
+    // If true, the issue has the requested security level as set by the host. This means that fields that do
+    // not explicitly support a security level (such as labels and links) implicitly get the correct security
+    // level. If false, such items may not be added or updated.
+    // Comments are special in that they do explicitly support a visibility level, and can thus be posted and
+    // updated even if the issue has a different security level than the requested one.
+    private final boolean secure;
+
+    private final Logger log = Logger.getLogger("org.openjdk.skara.issuetracker.jira");
+
     private static final DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
 
     JiraIssue(JiraProject jiraProject, RestRequest request, JSONValue json) {
         this.jiraProject = jiraProject;
         this.request = request;
         this.json = json;
+
+        if (json.get("fields").contains("security")) {
+            // Issue has the requested security level -> fine to post fields without role
+            secure = jiraProject.jiraHost().securityLevel().orElse("").equals(json.get("fields").get("security").get("id").asString());
+        } else {
+            if (jiraProject.jiraHost().securityLevel().isEmpty()) {
+                // No security level on issue, and none requested -> fine to post fields without role
+                secure = true;
+            } else {
+                secure = false;
+            }
+        }
     }
 
     @Override
     public IssueProject project() {
         return jiraProject;
@@ -68,10 +90,14 @@
         return json.get("fields").get("summary").asString();
     }
 
     @Override
     public void setTitle(String title) {
+        if (!secure) {
+            log.warning("Ignoring attempt to set title on issue with wrong security level");
+            return;
+        }
         var query = JSON.object()
                         .put("fields", JSON.object()
                                            .put("summary", title));
         request.put("").body(query).execute();
     }
@@ -85,10 +111,14 @@
         }
     }
 
     @Override
     public void setBody(String body) {
+        if (!secure) {
+            log.warning("Ignoring attempt to set body on issue with wrong security level");
+            return;
+        }
         var query = JSON.object()
                         .put("fields", JSON.object()
                                            .put("description", body));
         request.put("").body(query).execute();
     }
@@ -113,20 +143,28 @@
                        .collect(Collectors.toList());
     }
 
     @Override
     public Comment addComment(String body) {
+        var query = JSON.object().put("body", body);
+        jiraProject.jiraHost().visibilityRole().ifPresent(visibility -> query.put("visibility", JSON.object()
+                                                                                                    .put("type", "role")
+                                                                                                    .put("value", visibility)));
         var json = request.post("/comment")
-                          .body("body", body)
+                          .body(query)
                           .execute();
         return parseComment(json);
     }
 
     @Override
     public Comment updateComment(String id, String body) {
+        var query = JSON.object().put("body", body);
+        jiraProject.jiraHost().visibilityRole().ifPresent(visibility -> query.put("visibility", JSON.object()
+                                                                                                    .put("type", "role")
+                                                                                                    .put("value", visibility)));
         var json = request.put("/comment/" + id)
-                          .body("body", body)
+                          .body(query)
                           .execute();
         return parseComment(json);
     }
 
     @Override
@@ -197,10 +235,14 @@
         }
     }
 
     @Override
     public void addLabel(String label) {
+        if (!secure) {
+            log.warning("Ignoring attempt to add label on issue with wrong security level");
+            return;
+        }
         var query = JSON.object()
                         .put("update", JSON.object()
                                            .put("labels", JSON.array().add(JSON.object()
                                                                                .put("add", label))));
         request.put("").body(query).execute();
@@ -298,10 +340,15 @@
                      .collect(Collectors.toList());
     }
 
     @Override
     public void addLink(Link link) {
+        if (!secure) {
+            log.warning("Ignoring attempt to add link on issue with wrong security level");
+            return;
+        }
+
         var query = JSON.object().put("globalId", "skaralink=" + link.uri().toString());
         var object = JSON.object().put("url", link.uri().toString()).put("title", link.title());
         var status = JSON.object().put("resolved", link.resolved());
         var icon = JSON.object();
         var statusIcon = JSON.object();
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssueTrackerFactory.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssueTrackerFactory.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssueTrackerFactory.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssueTrackerFactory.java
@@ -41,10 +41,14 @@
             return new JiraHost(uri);
         } else {
             if (credential.username().startsWith("https://")) {
                 var vaultUrl = URIBuilder.base(credential.username()).build();
                 var jiraVault = new JiraVault(vaultUrl, credential.password());
+
+                if (configuration.contains("security") && configuration.contains("visibility")) {
+                    return new JiraHost(uri, jiraVault, configuration.get("visibility").asString(), configuration.get("security").asString());
+                }
                 return new JiraHost(uri, jiraVault);
             } else {
                 throw new RuntimeException("basic authentication not implemented yet");
             }
         }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
@@ -77,10 +77,14 @@
     private String defaultComponent() {
         return components().values().stream()
                            .min(Comparator.naturalOrder()).orElseThrow();
     }
 
+    JiraHost jiraHost() {
+        return jiraHost;
+    }
+
     @Override
     public IssueTracker issueTracker() {
         return jiraHost;
     }
 
@@ -89,21 +93,24 @@
         return URIBuilder.base(jiraHost.getUri()).setPath("/projects/" + projectName).build();
     }
 
     @Override
     public Issue createIssue(String title, List<String> body) {
-        var query = JSON.object()
-                        .put("fields", JSON.object()
-                                           .put("project", JSON.object()
-                                                               .put("id", projectId()))
-                                           .put("issuetype", JSON.object()
-                                                                 .put("id", defaultIssueType()))
-                                           .put("components", JSON.array()
-                                                                  .add(JSON.object().put("id", defaultComponent())))
-                                           .put("summary", title)
-                                           .put("description", String.join("\n", body)));
-
+        var query = JSON.object();
+        var fields = JSON.object()
+                         .put("project", JSON.object()
+                                             .put("id", projectId()))
+                         .put("issuetype", JSON.object()
+                                               .put("id", defaultIssueType()))
+                         .put("components", JSON.array()
+                                                .add(JSON.object().put("id", defaultComponent())))
+                         .put("summary", title)
+                         .put("description", String.join("\n", body));
+        query.put("fields", fields);
+
+        jiraHost.securityLevel().ifPresent(securityLevel -> fields.put("security", JSON.object()
+                                                                                       .put("id", securityLevel)));
         var data = request.post("issue")
                           .body(query)
                           .execute();
 
         return issue(data.get("key").asString()).orElseThrow();
diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -158,11 +158,11 @@
         public IssueTracker createIssueHost(int userIndex) {
             var hostUri = URIBuilder.base(config.get("host").asString()).build();
             var users = config.get("users").asArray();
             var pat = new Credential(users.get(userIndex).get("name").asString(),
                                      users.get(userIndex).get("pat").asString());
-            return IssueTracker.from("jira", hostUri, pat, null);
+            return IssueTracker.from("jira", hostUri, pat, config);
         }
 
         @Override
         public HostedRepository getHostedRepository(Forge host) {
             return host.repository(config.get("project").asString()).orElseThrow();
