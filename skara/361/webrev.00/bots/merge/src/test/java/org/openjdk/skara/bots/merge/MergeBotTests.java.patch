diff a/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java b/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
--- a/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
+++ b/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
@@ -39,24 +39,31 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 class MergeBotTests {
     @Test
     void mergeMasterBranch(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory()) {
+        try (var temp = new TemporaryDirectory(false)) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
             var toDir = temp.path().resolve("to.git");
             var toLocalRepo = Repository.init(toDir, VCS.GIT);
-            var gitConfig = toDir.resolve(".git").resolve("config");
-            Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+            var toGitConfig = toDir.resolve(".git").resolve("config");
+            Files.write(toGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
                         StandardOpenOption.APPEND);
             var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
 
+            var forkDir = temp.path().resolve("fork.git");
+            var forkLocalRepo = Repository.init(forkDir, VCS.GIT);
+            var forkGitConfig = forkDir.resolve(".git").resolve("config");
+            Files.write(forkGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+                        StandardOpenOption.APPEND);
+            var toFork = new TestHostedRepository(host, "test-mirror-fork", forkLocalRepo);
+
             var now = ZonedDateTime.now();
             var fromFileA = fromDir.resolve("a.txt");
             Files.writeString(fromFileA, "Hello A\n");
             fromLocalRepo.add(fromFileA);
             var fromHashA = fromLocalRepo.commit("Adding a.txt", "duke", "duke@openjdk.org", now);
@@ -83,11 +90,11 @@
             toLocalRepo.add(toFileC);
             var toHashC = toLocalRepo.commit("Adding c.txt", "duke", "duke@openjdk.org");
 
             var storage = temp.path().resolve("storage");
             var master = new Branch("master");
-            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master);
+            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master, toFork);
             TestBotRunner.runPeriodicItems(bot);
 
             toCommits = toLocalRepo.commits().asList();
             assertEquals(4, toCommits.size());
             var hashes = toCommits.stream().map(Commit::hash).collect(Collectors.toSet());
@@ -106,24 +113,31 @@
         }
     }
 
     @Test
     void failingMergeTest(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory()) {
+        try (var temp = new TemporaryDirectory(false)) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
             var toDir = temp.path().resolve("to.git");
             var toLocalRepo = Repository.init(toDir, VCS.GIT);
-            var gitConfig = toDir.resolve(".git").resolve("config");
-            Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+            var toGitConfig = toDir.resolve(".git").resolve("config");
+            Files.write(toGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
                         StandardOpenOption.APPEND);
             var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
 
+            var forkDir = temp.path().resolve("fork.git");
+            var forkLocalRepo = Repository.init(forkDir, VCS.GIT);
+            var forkGitConfig = forkDir.resolve(".git").resolve("config");
+            Files.write(forkGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+                        StandardOpenOption.APPEND);
+            var toFork = new TestHostedRepository(host, "test-mirror-fork", forkLocalRepo);
+
             var now = ZonedDateTime.now();
             var fromFileA = fromDir.resolve("a.txt");
             Files.writeString(fromFileA, "Hello A\n");
             fromLocalRepo.add(fromFileA);
             var fromHashA = fromLocalRepo.commit("Adding a.txt", "duke", "duke@openjdk.org", now);
@@ -150,11 +164,11 @@
             toLocalRepo.add(toFileB);
             var toHashB = toLocalRepo.commit("Adding b2.txt", "duke", "duke@openjdk.org");
 
             var storage = temp.path().resolve("storage");
             var master = new Branch("master");
-            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master);
+            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master, toFork);
             TestBotRunner.runPeriodicItems(bot);
 
             toCommits = toLocalRepo.commits().asList();
             assertEquals(2, toCommits.size());
             var toHashes = toCommits.stream().map(Commit::hash).collect(Collectors.toSet());
@@ -168,24 +182,31 @@
         }
     }
 
     @Test
     void failingMergeShouldResultInOnlyOnePR(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory()) {
+        try (var temp = new TemporaryDirectory(false)) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
             var toDir = temp.path().resolve("to.git");
             var toLocalRepo = Repository.init(toDir, VCS.GIT);
-            var gitConfig = toDir.resolve(".git").resolve("config");
-            Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+            var toGitConfig = toDir.resolve(".git").resolve("config");
+            Files.write(toGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
                         StandardOpenOption.APPEND);
             var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
 
+            var forkDir = temp.path().resolve("fork.git");
+            var forkLocalRepo = Repository.init(forkDir, VCS.GIT);
+            var forkGitConfig = forkDir.resolve(".git").resolve("config");
+            Files.write(forkGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+                        StandardOpenOption.APPEND);
+            var toFork = new TestHostedRepository(host, "test-mirror-fork", forkLocalRepo);
+
             var now = ZonedDateTime.now();
             var fromFileA = fromDir.resolve("a.txt");
             Files.writeString(fromFileA, "Hello A\n");
             fromLocalRepo.add(fromFileA);
             var fromHashA = fromLocalRepo.commit("Adding a.txt", "duke", "duke@openjdk.org", now);
@@ -212,11 +233,11 @@
             toLocalRepo.add(toFileB);
             var toHashB = toLocalRepo.commit("Adding b2.txt", "duke", "duke@openjdk.org");
 
             var storage = temp.path().resolve("storage");
             var master = new Branch("master");
-            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master);
+            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master, toFork);
             TestBotRunner.runPeriodicItems(bot);
             TestBotRunner.runPeriodicItems(bot);
 
             toCommits = toLocalRepo.commits().asList();
             assertEquals(2, toCommits.size());
@@ -240,15 +261,22 @@
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
             var toDir = temp.path().resolve("to.git");
             var toLocalRepo = Repository.init(toDir, VCS.GIT);
-            var gitConfig = toDir.resolve(".git").resolve("config");
-            Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+            var toGitConfig = toDir.resolve(".git").resolve("config");
+            Files.write(toGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
                         StandardOpenOption.APPEND);
             var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
 
+            var forkDir = temp.path().resolve("fork.git");
+            var forkLocalRepo = Repository.init(forkDir, VCS.GIT);
+            var forkGitConfig = forkDir.resolve(".git").resolve("config");
+            Files.write(forkGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+                        StandardOpenOption.APPEND);
+            var toFork = new TestHostedRepository(host, "test-mirror-fork", forkLocalRepo);
+
             var now = ZonedDateTime.now();
             var fromFileA = fromDir.resolve("a.txt");
             Files.writeString(fromFileA, "Hello A\n");
             fromLocalRepo.add(fromFileA);
             var fromHashA = fromLocalRepo.commit("Adding a.txt", "duke", "duke@openjdk.org", now);
@@ -275,11 +303,11 @@
             toLocalRepo.add(toFileB);
             var toHashB = toLocalRepo.commit("Adding b2.txt", "duke", "duke@openjdk.org", now);
 
             var storage = temp.path().resolve("storage");
             var master = new Branch("master");
-            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master);
+            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master, toFork);
             TestBotRunner.runPeriodicItems(bot);
             TestBotRunner.runPeriodicItems(bot);
 
             toCommits = toLocalRepo.commits().asList();
             assertEquals(2, toCommits.size());
@@ -314,15 +342,22 @@
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
             var toDir = temp.path().resolve("to.git");
             var toLocalRepo = Repository.init(toDir, VCS.GIT);
-            var gitConfig = toDir.resolve(".git").resolve("config");
-            Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+            var toGitConfig = toDir.resolve(".git").resolve("config");
+            Files.write(toGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
                         StandardOpenOption.APPEND);
             var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
 
+            var forkDir = temp.path().resolve("fork.git");
+            var forkLocalRepo = Repository.init(forkDir, VCS.GIT);
+            var forkGitConfig = forkDir.resolve(".git").resolve("config");
+            Files.write(forkGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+                        StandardOpenOption.APPEND);
+            var toFork = new TestHostedRepository(host, "test-mirror-fork", forkLocalRepo);
+
             var now = ZonedDateTime.now();
             var fromFileA = fromDir.resolve("a.txt");
             Files.writeString(fromFileA, "Hello A\n");
             fromLocalRepo.add(fromFileA);
             var fromHashA = fromLocalRepo.commit("Adding a.txt", "duke", "duke@openjdk.org", now);
@@ -349,11 +384,11 @@
             toLocalRepo.add(toFileB);
             var toHashB = toLocalRepo.commit("Adding b2.txt", "duke", "duke@openjdk.org", now);
 
             var storage = temp.path().resolve("storage");
             var master = new Branch("master");
-            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master);
+            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master, toFork);
             TestBotRunner.runPeriodicItems(bot);
             TestBotRunner.runPeriodicItems(bot);
 
             toCommits = toLocalRepo.commits().asList();
             assertEquals(2, toCommits.size());
