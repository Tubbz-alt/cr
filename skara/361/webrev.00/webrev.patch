diff a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
--- a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
+++ b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
@@ -41,18 +41,20 @@
     private final Path storage;
     private final HostedRepository from;
     private final Branch fromBranch;
     private final HostedRepository to;
     private final Branch toBranch;
+    private final HostedRepository toFork;
 
     MergeBot(Path storage, HostedRepository from, Branch fromBranch,
-              HostedRepository to, Branch toBranch) {
+              HostedRepository to, Branch toBranch, HostedRepository toFork) {
         this.storage = storage;
         this.from = from;
         this.fromBranch = fromBranch;
         this.to = to;
         this.toBranch = toBranch;
+        this.toFork = toFork;
     }
 
     @Override
     public boolean concurrentWith(WorkItem other) {
         if (!(other instanceof MergeBot)) {
@@ -70,31 +72,39 @@
             var dir = storage.resolve(sanitizedUrl);
             Repository repo = null;
             if (!Files.exists(dir)) {
                 log.info("Cloning " + to.name());
                 Files.createDirectories(dir);
-                repo = Repository.clone(to.url(), dir);
+                repo = Repository.clone(toFork.url(), dir);
             } else {
                 log.info("Found existing scratch directory for " + to.name());
                 repo = Repository.get(dir).orElseThrow(() -> {
                         return new RuntimeException("Repository in " + dir + " has vanished");
                 });
             }
 
-            repo.fetchAll();
-            var originToBranch = new Branch("origin/" + toBranch.name());
+            // Sync personal fork
+            var remoteBranches = repo.remoteBranches(to.url().toString());
+            for (var branch : remoteBranches) {
+                var fetchHead = repo.fetch(to.url(), branch.hash().hex());
+                repo.push(fetchHead, toFork.url(), branch.name());
+            }
+
+            // Checkout the branch to merge into
+            repo.pull(toFork.url().toString(), toBranch.name());
+            repo.checkout(toBranch, false);
 
-            // Check if pull request already created
+            // Check if merge conflict pull request is present
             var title = "Cannot automatically merge " + from.name() + ":" + fromBranch.name();
             var marker = "<!-- MERGE CONFLICTS -->";
             for (var pr : to.pullRequests()) {
                 if (pr.title().equals(title) &&
                     pr.body().startsWith(marker) &&
                     to.forge().currentUser().equals(pr.author())) {
                     var lines = pr.body().split("\n");
                     var head = new Hash(lines[1].substring(5, 45));
-                    if (repo.contains(originToBranch, head)) {
+                    if (repo.contains(toBranch, head)) {
                         log.info("Closing resolved merge conflict PR " + pr.id());
                         pr.addComment("Merge conflicts have been resolved, closing this PR");
                         pr.setState(PullRequest.State.CLOSED);
                     } else {
                         log.info("Outstanding unresolved merge already present");
@@ -106,19 +116,18 @@
             log.info("Fetching " + from.name() + ":" + fromBranch.name());
             var fetchHead = repo.fetch(from.url(), fromBranch.name());
             var head = repo.resolve(toBranch.name()).orElseThrow(() ->
                     new IOException("Could not resolve branch " + toBranch.name())
             );
-            if (repo.contains(originToBranch, fetchHead)) {
+            if (repo.contains(toBranch, fetchHead)) {
                 log.info("Nothing to merge");
                 return;
             }
 
             var isAncestor = repo.isAncestor(head, fetchHead);
 
             log.info("Trying to merge into " + toBranch.name());
-            repo.checkout(toBranch, false);
             IOException error = null;
             try {
                 repo.merge(fetchHead);
             } catch (IOException e) {
                 error = e;
@@ -133,10 +142,14 @@
             } else {
                 log.info("Got error: " + error.getMessage());
                 log.info("Aborting unsuccesful merge");
                 repo.abortMerge();
 
+                var fromRepoName = Path.of(from.webUrl().getPath()).getFileName();
+                var fromBranchDesc = fromRepoName + "/" + fromBranch.name();
+                repo.push(fetchHead, toFork.url(), fromBranchDesc, true);
+
                 log.info("Creating pull request to alert");
                 var mergeBase = repo.mergeBase(fetchHead, head);
                 var commits = repo.commits(mergeBase.hex() + ".." + fetchHead.hex(), true).asList();
 
                 var message = new ArrayList<String>();
@@ -162,19 +175,20 @@
                 message.add("```bash");
                 message.add("$ git add paths/to/files/with/conflicts");
                 message.add("$ git commit -m 'Merge'");
                 message.add("```");
                 message.add("");
-                message.add("Push the resulting merge conflict to your personal fork and " +
-                            "create a pull request towards this repository. This pull request " +
-                            "will be closed automatically once the pull request with the resolved " +
-                            "conflicts has been integrated.");
-                var pr = from.createPullRequest(to,
-                                                toBranch.name(),
-                                                fromBranch.name(),
-                                                title,
-                                                message);
+                message.add("Push the resolved merge conflict to your personal fork and " +
+                            "create a pull request towards this repository.");
+                message.add("");
+                message.add("This pull request will be closed automatically by a bot once " +
+                            "the merge conflicts have been resolved.");
+                var pr = toFork.createPullRequest(to,
+                                                  toBranch.name(),
+                                                  fromBranchDesc,
+                                                  title,
+                                                  message);
             }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
diff a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBotFactory.java b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBotFactory.java
--- a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBotFactory.java
+++ b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBotFactory.java
@@ -53,13 +53,14 @@
             var fromRepo = configuration.repository(repo.get("from").asString());
             var fromBranch = new Branch(configuration.repositoryRef(repo.get("from").asString()));
 
             var toRepo = configuration.repository(repo.get("to").asString());
             var toBranch = new Branch(configuration.repositoryRef(repo.get("to").asString()));
+            var toFork = configuration.repository(repo.get("fork").asString());
 
             log.info("Setting up merging from " + fromRepo.name() + ":" + fromBranch.name() +
                      " to " + toRepo.name() + ":" + toBranch.name());
-            bots.add(new MergeBot(storage, fromRepo, fromBranch, toRepo, toBranch));
+            bots.add(new MergeBot(storage, fromRepo, fromBranch, toRepo, toBranch, toFork));
         }
         return bots;
     }
 }
diff a/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java b/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
--- a/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
+++ b/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
@@ -39,24 +39,31 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 class MergeBotTests {
     @Test
     void mergeMasterBranch(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory()) {
+        try (var temp = new TemporaryDirectory(false)) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
             var toDir = temp.path().resolve("to.git");
             var toLocalRepo = Repository.init(toDir, VCS.GIT);
-            var gitConfig = toDir.resolve(".git").resolve("config");
-            Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+            var toGitConfig = toDir.resolve(".git").resolve("config");
+            Files.write(toGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
                         StandardOpenOption.APPEND);
             var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
 
+            var forkDir = temp.path().resolve("fork.git");
+            var forkLocalRepo = Repository.init(forkDir, VCS.GIT);
+            var forkGitConfig = forkDir.resolve(".git").resolve("config");
+            Files.write(forkGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+                        StandardOpenOption.APPEND);
+            var toFork = new TestHostedRepository(host, "test-mirror-fork", forkLocalRepo);
+
             var now = ZonedDateTime.now();
             var fromFileA = fromDir.resolve("a.txt");
             Files.writeString(fromFileA, "Hello A\n");
             fromLocalRepo.add(fromFileA);
             var fromHashA = fromLocalRepo.commit("Adding a.txt", "duke", "duke@openjdk.org", now);
@@ -83,11 +90,11 @@
             toLocalRepo.add(toFileC);
             var toHashC = toLocalRepo.commit("Adding c.txt", "duke", "duke@openjdk.org");
 
             var storage = temp.path().resolve("storage");
             var master = new Branch("master");
-            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master);
+            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master, toFork);
             TestBotRunner.runPeriodicItems(bot);
 
             toCommits = toLocalRepo.commits().asList();
             assertEquals(4, toCommits.size());
             var hashes = toCommits.stream().map(Commit::hash).collect(Collectors.toSet());
@@ -106,24 +113,31 @@
         }
     }
 
     @Test
     void failingMergeTest(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory()) {
+        try (var temp = new TemporaryDirectory(false)) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
             var toDir = temp.path().resolve("to.git");
             var toLocalRepo = Repository.init(toDir, VCS.GIT);
-            var gitConfig = toDir.resolve(".git").resolve("config");
-            Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+            var toGitConfig = toDir.resolve(".git").resolve("config");
+            Files.write(toGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
                         StandardOpenOption.APPEND);
             var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
 
+            var forkDir = temp.path().resolve("fork.git");
+            var forkLocalRepo = Repository.init(forkDir, VCS.GIT);
+            var forkGitConfig = forkDir.resolve(".git").resolve("config");
+            Files.write(forkGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+                        StandardOpenOption.APPEND);
+            var toFork = new TestHostedRepository(host, "test-mirror-fork", forkLocalRepo);
+
             var now = ZonedDateTime.now();
             var fromFileA = fromDir.resolve("a.txt");
             Files.writeString(fromFileA, "Hello A\n");
             fromLocalRepo.add(fromFileA);
             var fromHashA = fromLocalRepo.commit("Adding a.txt", "duke", "duke@openjdk.org", now);
@@ -150,11 +164,11 @@
             toLocalRepo.add(toFileB);
             var toHashB = toLocalRepo.commit("Adding b2.txt", "duke", "duke@openjdk.org");
 
             var storage = temp.path().resolve("storage");
             var master = new Branch("master");
-            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master);
+            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master, toFork);
             TestBotRunner.runPeriodicItems(bot);
 
             toCommits = toLocalRepo.commits().asList();
             assertEquals(2, toCommits.size());
             var toHashes = toCommits.stream().map(Commit::hash).collect(Collectors.toSet());
@@ -168,24 +182,31 @@
         }
     }
 
     @Test
     void failingMergeShouldResultInOnlyOnePR(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory()) {
+        try (var temp = new TemporaryDirectory(false)) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
             var toDir = temp.path().resolve("to.git");
             var toLocalRepo = Repository.init(toDir, VCS.GIT);
-            var gitConfig = toDir.resolve(".git").resolve("config");
-            Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+            var toGitConfig = toDir.resolve(".git").resolve("config");
+            Files.write(toGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
                         StandardOpenOption.APPEND);
             var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
 
+            var forkDir = temp.path().resolve("fork.git");
+            var forkLocalRepo = Repository.init(forkDir, VCS.GIT);
+            var forkGitConfig = forkDir.resolve(".git").resolve("config");
+            Files.write(forkGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+                        StandardOpenOption.APPEND);
+            var toFork = new TestHostedRepository(host, "test-mirror-fork", forkLocalRepo);
+
             var now = ZonedDateTime.now();
             var fromFileA = fromDir.resolve("a.txt");
             Files.writeString(fromFileA, "Hello A\n");
             fromLocalRepo.add(fromFileA);
             var fromHashA = fromLocalRepo.commit("Adding a.txt", "duke", "duke@openjdk.org", now);
@@ -212,11 +233,11 @@
             toLocalRepo.add(toFileB);
             var toHashB = toLocalRepo.commit("Adding b2.txt", "duke", "duke@openjdk.org");
 
             var storage = temp.path().resolve("storage");
             var master = new Branch("master");
-            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master);
+            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master, toFork);
             TestBotRunner.runPeriodicItems(bot);
             TestBotRunner.runPeriodicItems(bot);
 
             toCommits = toLocalRepo.commits().asList();
             assertEquals(2, toCommits.size());
@@ -240,15 +261,22 @@
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
             var toDir = temp.path().resolve("to.git");
             var toLocalRepo = Repository.init(toDir, VCS.GIT);
-            var gitConfig = toDir.resolve(".git").resolve("config");
-            Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+            var toGitConfig = toDir.resolve(".git").resolve("config");
+            Files.write(toGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
                         StandardOpenOption.APPEND);
             var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
 
+            var forkDir = temp.path().resolve("fork.git");
+            var forkLocalRepo = Repository.init(forkDir, VCS.GIT);
+            var forkGitConfig = forkDir.resolve(".git").resolve("config");
+            Files.write(forkGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+                        StandardOpenOption.APPEND);
+            var toFork = new TestHostedRepository(host, "test-mirror-fork", forkLocalRepo);
+
             var now = ZonedDateTime.now();
             var fromFileA = fromDir.resolve("a.txt");
             Files.writeString(fromFileA, "Hello A\n");
             fromLocalRepo.add(fromFileA);
             var fromHashA = fromLocalRepo.commit("Adding a.txt", "duke", "duke@openjdk.org", now);
@@ -275,11 +303,11 @@
             toLocalRepo.add(toFileB);
             var toHashB = toLocalRepo.commit("Adding b2.txt", "duke", "duke@openjdk.org", now);
 
             var storage = temp.path().resolve("storage");
             var master = new Branch("master");
-            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master);
+            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master, toFork);
             TestBotRunner.runPeriodicItems(bot);
             TestBotRunner.runPeriodicItems(bot);
 
             toCommits = toLocalRepo.commits().asList();
             assertEquals(2, toCommits.size());
@@ -314,15 +342,22 @@
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
             var toDir = temp.path().resolve("to.git");
             var toLocalRepo = Repository.init(toDir, VCS.GIT);
-            var gitConfig = toDir.resolve(".git").resolve("config");
-            Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+            var toGitConfig = toDir.resolve(".git").resolve("config");
+            Files.write(toGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
                         StandardOpenOption.APPEND);
             var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
 
+            var forkDir = temp.path().resolve("fork.git");
+            var forkLocalRepo = Repository.init(forkDir, VCS.GIT);
+            var forkGitConfig = forkDir.resolve(".git").resolve("config");
+            Files.write(forkGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+                        StandardOpenOption.APPEND);
+            var toFork = new TestHostedRepository(host, "test-mirror-fork", forkLocalRepo);
+
             var now = ZonedDateTime.now();
             var fromFileA = fromDir.resolve("a.txt");
             Files.writeString(fromFileA, "Hello A\n");
             fromLocalRepo.add(fromFileA);
             var fromHashA = fromLocalRepo.commit("Adding a.txt", "duke", "duke@openjdk.org", now);
@@ -349,11 +384,11 @@
             toLocalRepo.add(toFileB);
             var toHashB = toLocalRepo.commit("Adding b2.txt", "duke", "duke@openjdk.org", now);
 
             var storage = temp.path().resolve("storage");
             var master = new Branch("master");
-            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master);
+            var bot = new MergeBot(storage, fromHostedRepo, master, toHostedRepo, master, toFork);
             TestBotRunner.runPeriodicItems(bot);
             TestBotRunner.runPeriodicItems(bot);
 
             toCommits = toLocalRepo.commits().asList();
             assertEquals(2, toCommits.size());
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -141,13 +141,13 @@
         if (currentUser == 0) {
             data.folders.forEach(TemporaryDirectory::close);
         }
     }
 
-    TestPullRequest createPullRequest(TestHostedRepository repository, String targetRef, String sourceRef, String title, List<String> body, boolean draft) {
+    TestPullRequest createPullRequest(TestHostedRepository targetRepository, TestHostedRepository sourceRepository, String targetRef, String sourceRef, String title, List<String> body, boolean draft) {
         var id = String.valueOf(data.pullRequests.size() + 1);
-        var pr = TestPullRequest.createNew(repository, id, targetRef, sourceRef, title, body, draft);
+        var pr = TestPullRequest.createNew(targetRepository, sourceRepository, id, targetRef, sourceRef, title, body, draft);
         data.pullRequests.put(id, pr);
         return pr;
     }
 
     TestPullRequest getPullRequest(TestHostedRepository repository, String id) {
diff a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
@@ -57,11 +57,11 @@
         throw new RuntimeException("Not implemented yet");
     }
 
     @Override
     public PullRequest createPullRequest(HostedRepository target, String targetRef, String sourceRef, String title, List<String> body, boolean draft) {
-        return host.createPullRequest(this, targetRef, sourceRef, title, body, draft);
+        return host.createPullRequest((TestHostedRepository) target, this, targetRef, sourceRef, title, body, draft);
     }
 
     @Override
     public PullRequest pullRequest(String id) {
         return host.getPullRequest(this, id);
diff a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
--- a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
@@ -34,50 +34,52 @@
 import java.util.*;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 
 public class TestPullRequest extends TestIssue implements PullRequest {
-    private final TestHostedRepository repository;
+    private final TestHostedRepository targetRepository;
+    private final TestHostedRepository sourceRepository;
     private final String targetRef;
     private final String sourceRef;
     private final PullRequestData data;
 
-    private TestPullRequest(TestHostedRepository repository, String id, HostUser author, HostUser user, String targetRef, String sourceRef, PullRequestData data) {
-        super(repository, id, author, user, data);
-        this.repository = repository;
+    private TestPullRequest(TestHostedRepository targetRepository, TestHostedRepository sourceRepository, String id, HostUser author, HostUser user, String targetRef, String sourceRef, PullRequestData data) {
+        super(targetRepository, id, author, user, data);
+        this.targetRepository = targetRepository;
+        this.sourceRepository = sourceRepository;
         this.targetRef = targetRef;
         this.sourceRef = sourceRef;
         this.data = data;
 
         try {
-            var headHash = repository.localRepository().resolve(sourceRef).orElseThrow();
-            if (!headHash.equals(data.headHash)) {
-                data.headHash = headHash;
+            var headHash = sourceRepository.localRepository().resolve(sourceRef);
+            if (headHash.isPresent() && !headHash.get().equals(data.headHash)) {
+                data.headHash = headHash.get();
                 data.lastUpdate = ZonedDateTime.now();
             }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
-    static TestPullRequest createNew(TestHostedRepository repository, String id, String targetRef, String sourceRef, String title, List<String> body, boolean draft) {
+    static TestPullRequest createNew(TestHostedRepository targetRepository, TestHostedRepository sourceRepository, String id, String targetRef, String sourceRef, String title, List<String> body, boolean draft) {
         var data = new PullRequestData();
         data.title = title;
         data.body = String.join("\n", body);
         data.draft = draft;
-        var pr = new TestPullRequest(repository, id, repository.forge().currentUser(), repository.forge().currentUser(), targetRef, sourceRef, data);
+        var pr = new TestPullRequest(targetRepository, sourceRepository, id, targetRepository.forge().currentUser(), targetRepository.forge().currentUser(), targetRef, sourceRef, data);
         return pr;
     }
 
     static TestPullRequest createFrom(TestHostedRepository repository, TestPullRequest other) {
-        var pr = new TestPullRequest(repository, other.id, other.author, repository.forge().currentUser(), other.targetRef, other.sourceRef, other.data);
+        var pr = new TestPullRequest(repository, other.sourceRepository, other.id, other.author, repository.forge().currentUser(), other.targetRef, other.sourceRef, other.data);
         return pr;
     }
 
     @Override
     public HostedRepository repository() {
-        return repository;
+        return targetRepository;
     }
 
     @Override
     public IssueProject project() {
         return null;
@@ -89,12 +91,12 @@
     }
 
     @Override
     public void addReview(Review.Verdict verdict, String body) {
         try {
-            var review = new Review(ZonedDateTime.now(), repository.forge().currentUser(),
-                                    verdict, repository.localRepository().resolve(sourceRef).orElseThrow(),
+            var review = new Review(ZonedDateTime.now(), targetRepository.forge().currentUser(),
+                                    verdict, targetRepository.localRepository().resolve(sourceRef).orElseThrow(),
                                     data.reviews.size(),
                                     body);
 
             data.reviews.add(review);
             data.lastUpdate = ZonedDateTime.now();
@@ -143,21 +145,21 @@
         return sourceRef;
     }
 
     @Override
     public HostedRepository sourceRepository() {
-        return repository;
+        return sourceRepository;
     }
 
     @Override
     public String targetRef() {
         return targetRef;
     }
 
     @Override
     public Hash targetHash() {
-        return repository.branchHash(targetRef);
+        return targetRepository.branchHash(targetRef);
     }
 
     @Override
     public Map<String, Check> checks(Hash hash) {
         return data.checks.stream()
@@ -203,11 +205,11 @@
     }
 
     @Override
     public URI webUrl() {
         try {
-            return new URI(repository.url().toString() + "/pr/" + id());
+            return new URI(targetRepository.url().toString() + "/pr/" + id());
         } catch (URISyntaxException e) {
             throw new RuntimeException(e);
         }
     }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -96,10 +96,11 @@
                String authorEmail,
                String committerName,
                String committerEmail) throws IOException;
     Tag tag(Hash hash, String tagName, String message, String authorName, String authorEmail) throws IOException;
     Branch branch(Hash hash, String branchName) throws IOException;
+    void prune(Branch branch, String remote) throws IOException;
     void delete(Branch b) throws IOException;
     void rebase(Hash hash, String committerName, String committerEmail) throws IOException;
     void merge(Hash hash) throws IOException;
     void merge(Hash hash, String strategy) throws IOException;
     void abortMerge() throws IOException;
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -624,10 +624,20 @@
         }
 
         return new Branch(name);
     }
 
+    @Override
+    public void prune(Branch branch, String remote) throws IOException {
+        try (var p = capture("git", "push", "--delete", remote, branch.name())) {
+            await(p);
+        }
+        try (var p = capture("git", "branch", "--delete", "--force", branch.name())) {
+            await(p);
+        }
+    }
+
     @Override
     public Hash mergeBase(Hash first, Hash second) throws IOException {
         try (var p = capture("git", "merge-base", first.hex(), second.hex())) {
             var res = await(p);
             if (res.stdout().size() != 1) {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -587,10 +587,20 @@
         }
 
         return new Branch(name);
     }
 
+    @Override
+    public void prune(Branch branch, String remote) throws IOException {
+        try (var p = capture("hg", "bookmark", "--delete", branch.name())) {
+            await(p);
+        }
+        try (var p = capture("hg", "push", "--bookmark", branch.name(), remote)) {
+            await(p);
+        }
+    }
+
     @Override
     public Hash mergeBase(Hash first, Hash second) throws IOException {
         var revset = "ancestor(" + first.hex() + ", " + second.hex() + ")";
         try (var p = capture("hg", "log", "--rev=" + revset, "--template={node}\n")) {
             var res = await(p);
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -2026,6 +2026,54 @@
                 downstream.addRemote("foobar", "file:///this/path/does/not/exist");
                 downstream.fetchRemote("upstream");
             }
         }
     }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testPrune(VCS vcs) throws IOException {
+        assumeTrue(vcs == VCS.GIT); // FIXME hard to test with hg due to bookmarks and branches
+        try (var dir = new TemporaryDirectory(false)) {
+            var upstreamDir = dir.path().resolve("upstream" + (vcs == VCS.GIT ? ".git" : ".hg"));
+            var upstream = Repository.init(upstreamDir, vcs);
+
+            Files.write(upstream.root().resolve(".git").resolve("config"),
+                        List.of("[receive]", "denyCurrentBranch=ignore"),
+                        WRITE, APPEND);
+
+            var readme = upstreamDir.resolve("README");
+            Files.write(readme, List.of("Hello, readme!"));
+
+            upstream.add(readme);
+            var head = upstream.commit("Add README", "duke", "duke@openjdk.java.net");
+            var branch = upstream.branch(head, "foo");
+            var upstreamBranches = upstream.branches();
+            assertEquals(2, upstreamBranches.size());
+            assertTrue(upstreamBranches.contains(branch));
+
+            var upstreamURI = URI.create("file:///" + upstreamDir.toString().replace('\\', '/'));
+            var downstreamDir = dir.path().resolve("downstream");
+            var downstream = Repository.clone(upstreamURI, downstreamDir);
+
+            // Ensure that 'foo' branch is materialized downstream
+            downstream.checkout(branch);
+            downstream.checkout(downstream.defaultBranch());
+
+            var remotes = downstream.remotes();
+            assertEquals(1, remotes.size());
+            var downstreamBranches = downstream.branches();
+            assertEquals(2, downstreamBranches.size());
+            assertEquals(downstreamBranches, upstreamBranches);
+
+            downstream.prune(branch, remotes.get(0));
+
+            downstreamBranches = downstream.branches();
+            assertEquals(1, downstreamBranches.size());
+            assertEquals(List.of(downstream.defaultBranch()), downstreamBranches);
+
+            upstreamBranches = upstream.branches();
+            assertEquals(1, upstreamBranches.size());
+            assertEquals(List.of(upstream.defaultBranch()), upstreamBranches);
+        }
+    }
 }
