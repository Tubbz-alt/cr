diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -31,13 +31,14 @@
 import java.io.*;
 import java.net.URI;
 import java.nio.file.Path;
 import java.time.Duration;
 import java.util.*;
-import java.util.function.Consumer;
+import java.util.function.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
+import java.util.stream.Collectors;
 
 class ArchiveWorkItem implements WorkItem {
     private final PullRequest pr;
     private final MailingListBridgeBot bot;
     private final Consumer<RuntimeException> exceptionConsumer;
@@ -299,11 +300,20 @@
         // Push all new mails to the archive repository
         newMails.forEach(reviewArchiveList::post);
         pushMbox(archiveRepo, "Adding comments for PR " + bot.codeRepo().getName() + "/" + pr.getId());
 
         // Finally post all new mails to the actual list
-        newMails.forEach(list::post);
+        for (var newMail : newMails) {
+            var filteredHeaders = newMail.headers().stream()
+                                         .filter(header -> !header.startsWith("PR-"))
+                                         .collect(Collectors.toMap(Function.identity(),
+                                                                   newMail::headerValue));
+            var filteredEmail = Email.from(newMail)
+                                     .replaceHeaders(filteredHeaders)
+                                     .build();
+            list.post(filteredEmail);
+        }
     }
 
     @Override
     public void handleRuntimeException(RuntimeException e) {
         exceptionConsumer.accept(e);
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -3,11 +3,10 @@
 import org.openjdk.skara.census.Contributor;
 import org.openjdk.skara.email.*;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.vcs.Hash;
 
-import java.io.*;
 import java.net.URI;
 import java.nio.charset.StandardCharsets;
 import java.security.*;
 import java.util.*;
 import java.util.stream.*;
@@ -182,16 +181,11 @@
         generated.add(email);
         generatedIds.put(getStableMessageId(id), email);
     }
 
     private String latestHeadPrefix() {
-        try {
-            var latestCommit = prInstance.localRepo().lookup(prInstance.headHash()).orElseThrow(RuntimeException::new);
-            return String.format("[Rev %02d]", revisionCount());
-        } catch (IOException e) {
-            throw new UncheckedIOException(e);
-        }
+        return String.format("[Rev %02d]", revisionCount());
     }
 
     void addFull(URI webrev) {
         var body = ArchiveMessages.composeRebaseComment(prInstance, webrev);
         var id = getMessageId(prInstance.headHash());
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -879,10 +879,11 @@
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             for (var newMail : conversations.get(0).allMessages()) {
                 assertEquals(noreplyAddress(archive), newMail.author().address());
                 assertEquals(sender, newMail.sender());
+                assertFalse(newMail.hasHeader("PR-Head-Hash"));
             }
             assertEquals("Re: [Rev 01]: RFR: This is a pull request", conversations.get(0).allMessages().get(1).subject());
         }
     }
 
diff a/email/src/main/java/org/openjdk/skara/email/EmailBuilder.java b/email/src/main/java/org/openjdk/skara/email/EmailBuilder.java
--- a/email/src/main/java/org/openjdk/skara/email/EmailBuilder.java
+++ b/email/src/main/java/org/openjdk/skara/email/EmailBuilder.java
@@ -90,10 +90,16 @@
     public EmailBuilder headers(Map<String, String> headers) {
         this.headers.putAll(headers);
         return this;
     }
 
+    public EmailBuilder replaceHeaders(Map<String, String> headers) {
+        this.headers.clear();
+        this.headers.putAll(headers);
+        return this;
+    }
+
     public EmailBuilder date(ZonedDateTime date) {
         this.date = date;
         return this;
     }
 
