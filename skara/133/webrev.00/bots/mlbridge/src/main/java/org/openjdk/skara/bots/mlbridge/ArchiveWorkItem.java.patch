diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -31,13 +31,14 @@
 import java.io.*;
 import java.net.URI;
 import java.nio.file.Path;
 import java.time.Duration;
 import java.util.*;
-import java.util.function.Consumer;
+import java.util.function.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
+import java.util.stream.Collectors;
 
 class ArchiveWorkItem implements WorkItem {
     private final PullRequest pr;
     private final MailingListBridgeBot bot;
     private final Consumer<RuntimeException> exceptionConsumer;
@@ -299,11 +300,20 @@
         // Push all new mails to the archive repository
         newMails.forEach(reviewArchiveList::post);
         pushMbox(archiveRepo, "Adding comments for PR " + bot.codeRepo().getName() + "/" + pr.getId());
 
         // Finally post all new mails to the actual list
-        newMails.forEach(list::post);
+        for (var newMail : newMails) {
+            var filteredHeaders = newMail.headers().stream()
+                                         .filter(header -> !header.startsWith("PR-"))
+                                         .collect(Collectors.toMap(Function.identity(),
+                                                                   newMail::headerValue));
+            var filteredEmail = Email.from(newMail)
+                                     .replaceHeaders(filteredHeaders)
+                                     .build();
+            list.post(filteredEmail);
+        }
     }
 
     @Override
     public void handleRuntimeException(RuntimeException e) {
         exceptionConsumer.accept(e);
