diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -28,10 +28,11 @@
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
 import java.nio.file.*;
 import java.util.*;
+import java.util.logging.*;
 import java.util.regex.Pattern;
 
 import static org.junit.jupiter.api.Assertions.*;
 import static org.junit.jupiter.api.Assumptions.assumeTrue;
 
@@ -969,22 +970,40 @@
             check = checks.get("jcheck");
             assertEquals(CheckStatus.SUCCESS, check.status());
         }
     }
 
+    class MyHandler extends StreamHandler {
+        @Override
+        public synchronized void publish(LogRecord record) {
+            System.out.println(record.getInstant() + ": " + record.getMessage());
+        }
+    }
+
     @Test
     void draft(TestInfo testInfo) throws IOException {
+        Logger log = Logger.getGlobal();
+        log.setLevel(Level.FINER);
+        log = Logger.getLogger("org.openjdk");
+        log.setLevel(Level.FINER);
+        var handler = new MyHandler();
+        handler.setLevel(Level.FINER);
+        log.addHandler(handler);
+
+
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
+            log.info("STEP 1");
+
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.url(), "master", true);
 
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -21,83 +21,37 @@
  * questions.
  */
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.forge.*;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.*;
 import java.util.*;
 import java.util.stream.Collectors;
 
 public class TestHost implements Forge, IssueTracker {
     private final int currentUser;
     private HostData data;
-    private static Path templateLocalRepository;
 
     private static class HostData {
         final List<HostUser> users = new ArrayList<>();
         final Map<String, Repository> repositories = new HashMap<>();
         final Map<String, IssueProject> issueProjects = new HashMap<>();
         final Set<TemporaryDirectory> folders = new HashSet<>();
         private final Map<String, TestPullRequest> pullRequests = new HashMap<>();
         private final Map<String, TestIssue> issues = new HashMap<>();
     }
 
-    private Path createTemplateRepository() throws IOException {
-        var folder = new TemporaryDirectory();
-        data.folders.add(folder);
-        var repoFolder = folder.path().resolve("hosted.git");
-        var repo = Repository.init(repoFolder, VCS.GIT);
-        Files.writeString(repoFolder.resolve("content.txt"), "Initial content", StandardCharsets.UTF_8);
-        repo.add(repoFolder.resolve("content.txt"));
-        var hash = repo.commit("Initial content", "author", "author@none");
-        repo.branch(hash, "testhostcontent");
-        //repo.push(hash, repo.root().toUri(), "testhostcontent");
-        repo.checkout(hash, true);
-        return repoFolder;
-    }
-
-    private void copyRecursive(Path from, Path to) throws IOException {
-        Files.createDirectories(to);
-        Files.walk(from)
-             .filter(p -> p.toFile().isDirectory())
-             .map(from::relativize)
-             .forEach(p -> {
-                 try {
-                     if (!to.resolve(p).toFile().isDirectory()) {
-                         Files.createDirectory(to.resolve(p));
-                     }
-                 } catch (IOException e) {
-                     throw new UncheckedIOException(e);
-                 }
-             });
-        Files.walk(from)
-             .filter(p -> p.toFile().isFile())
-             .forEach(p -> {
-                 try {
-                     Files.copy(p, to.resolve(from.relativize(p)));
-                 } catch (IOException e) {
-                     throw new UncheckedIOException(e);
-                 }
-             });
-    }
-
     private Repository createLocalRepository() {
         try {
-            if (templateLocalRepository == null || !templateLocalRepository.toFile().isDirectory()) {
-                templateLocalRepository = createTemplateRepository();
-            }
             var folder = new TemporaryDirectory();
             data.folders.add(folder);
             var repoFolder = folder.path().resolve("hosted.git");
-            copyRecursive(templateLocalRepository, repoFolder);
-            return Repository.init(repoFolder, VCS.GIT);
+            return Repository.init(repoFolder, VCS.GIT, true);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -26,16 +26,16 @@
 import org.openjdk.skara.vcs.hg.HgRepository;
 
 import java.io.IOException;
 import java.net.URI;
 import java.nio.file.Path;
-import java.nio.file.Files;
 import java.time.ZonedDateTime;
 import java.util.*;
 
 public interface Repository extends ReadOnlyRepository {
     Repository init() throws IOException;
+    Repository init(boolean isBare) throws IOException;
     void checkout(Hash h, boolean force) throws IOException;
     default void checkout(Hash h) throws IOException {
         checkout(h, false);
     }
     void checkout(Branch b, boolean force) throws IOException;
@@ -125,10 +125,21 @@
             default:
                 throw new IllegalArgumentException("Invalid enum value: " + vcs);
         }
     }
 
+    static Repository init(Path p, VCS vcs, boolean isBare) throws IOException {
+        switch (vcs) {
+            case GIT:
+                return new GitRepository(p).init(isBare);
+            case HG:
+                return new HgRepository(p).init(isBare);
+            default:
+                throw new IllegalArgumentException("Invalid enum value: " + vcs);
+        }
+    }
+
     static Optional<Repository> get(Path p) throws IOException {
         var r = GitRepository.get(p);
         if (r.isPresent()) {
             return r;
         }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -365,19 +365,31 @@
         checkout(b.name(), force);
     }
 
     @Override
     public Repository init() throws IOException {
+        return init(false);
+    }
+
+    @Override
+    public Repository init(boolean isBare) throws IOException {
         cachedRoot = null;
 
         if (!Files.exists(dir)) {
             Files.createDirectories(dir);
         }
 
-        try (var p = capture("git", "init")) {
-            await(p);
-            return this;
+        if (isBare) {
+            try (var p = capture("git", "init", "--bare")) {
+                await(p);
+                return this;
+            }
+        } else {
+            try (var p = capture("git", "init")) {
+                await(p);
+                return this;
+            }
         }
     }
 
     @Override
     public void pushAll(URI uri) throws IOException {
@@ -444,11 +456,11 @@
                 try (var p2 = capture("git", "rev-parse", "--git-dir")) {
                     var res2 = await(p2);
                     if (res2.stdout().size() != 1) {
                         throw new IOException("Unexpected output\n" + res2);
                     }
-                    cachedRoot = dir.resolve(Path.of(res2.stdout().get(0)));
+                    cachedRoot = dir.resolve(Path.of(res2.stdout().get(0))).normalize();
                     return cachedRoot;
                 }
             }
 
             cachedRoot = Path.of(res.stdout().get(0));
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -398,10 +398,15 @@
             await(p);
             return this;
         }
     }
 
+    @Override
+    public Repository init(boolean isBare) throws IOException {
+        throw new RuntimeException("not implemented yet");
+    }
+
     @Override
     public void pushAll(URI uri) throws IOException {
         try (var p = capture("hg", "push", "--new-branch", uri.toString())) {
             await(p);
         }
