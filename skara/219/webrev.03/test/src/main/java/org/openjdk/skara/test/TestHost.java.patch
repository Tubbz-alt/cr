diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -21,17 +21,15 @@
  * questions.
  */
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.forge.*;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.*;
 import java.util.*;
 import java.util.stream.Collectors;
 
 public class TestHost implements Forge, IssueTracker {
     private final int currentUser;
@@ -45,20 +43,15 @@
         private final Map<String, TestPullRequest> pullRequests = new HashMap<>();
         private final Map<String, TestIssue> issues = new HashMap<>();
     }
 
     private Repository createLocalRepository() {
-        var folder = new TemporaryDirectory();
-        data.folders.add(folder);
         try {
-            var repo = Repository.init(folder.path().resolve("hosted.git"), VCS.GIT);
-            Files.writeString(repo.root().resolve("content.txt"), "Initial content", StandardCharsets.UTF_8);
-            repo.add(repo.root().resolve("content.txt"));
-            var hash = repo.commit("Initial content", "author", "author@none");
-            repo.push(hash, repo.root().toUri(), "testhostcontent");
-            repo.checkout(hash, true);
-            return repo;
+            var folder = new TemporaryDirectory();
+            data.folders.add(folder);
+            var repoFolder = folder.path().resolve("hosted.git");
+            return Repository.init(repoFolder, VCS.GIT, true);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
