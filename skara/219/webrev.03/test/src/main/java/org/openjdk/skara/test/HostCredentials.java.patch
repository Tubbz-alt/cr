diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -273,10 +273,14 @@
             credentials = parseEntry(credentialsJson.asObject(), credentialsPath.getParent());
         }
     }
 
     private boolean getLock(HostedRepository repo) throws IOException {
+        if (repo instanceof TestHostedRepository) {
+            return true;
+        }
+
         try (var tempFolder = new TemporaryDirectory()) {
             var repoFolder = tempFolder.path().resolve("lock");
             var lockFile = repoFolder.resolve("lock.txt");
             Repository localRepo;
             try {
@@ -306,18 +310,22 @@
             return true;
         }
     }
 
     private void releaseLock(HostedRepository repo) throws IOException {
+        if (repo instanceof TestHostedRepository) {
+            return;
+        }
         try (var tempFolder = new TemporaryDirectory()) {
             var repoFolder = tempFolder.path().resolve("lock");
             var lockFile = repoFolder.resolve("lock.txt");
             Repository localRepo;
             localRepo = Repository.materialize(repoFolder, repo.url(), "testlock");
             localRepo.remove(lockFile);
             var lockHash = localRepo.commit("Unlock", "test", "test@test.test");
             localRepo.push(lockHash, repo.url(), "testlock");
+            log.info("Released credentials lock for " + testName);
         }
     }
 
     public Hash commitLock(Repository localRepo) throws IOException {
         var lockFile = localRepo.root().resolve("lock.txt");
@@ -381,11 +389,10 @@
             issue.setState(Issue.State.CLOSED);
         }
         if (credentialsLock != null) {
             try {
                 releaseLock(credentialsLock);
-                log.info("Released credentials lock for " + testName);
             } catch (IOException e) {
                 throw new UncheckedIOException(e);
             }
             credentialsLock = null;
         }
