diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -28,10 +28,11 @@
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
 import java.nio.file.*;
 import java.util.*;
+import java.util.logging.*;
 import java.util.regex.Pattern;
 
 import static org.junit.jupiter.api.Assertions.*;
 import static org.junit.jupiter.api.Assumptions.assumeTrue;
 
@@ -969,22 +970,40 @@
             check = checks.get("jcheck");
             assertEquals(CheckStatus.SUCCESS, check.status());
         }
     }
 
+    class MyHandler extends StreamHandler {
+        @Override
+        public synchronized void publish(LogRecord record) {
+            System.out.println(record.getInstant() + ": " + record.getMessage());
+        }
+    }
+
     @Test
     void draft(TestInfo testInfo) throws IOException {
+        Logger log = Logger.getGlobal();
+        log.setLevel(Level.FINER);
+        log = Logger.getLogger("org.openjdk");
+        log.setLevel(Level.FINER);
+        var handler = new MyHandler();
+        handler.setLevel(Level.FINER);
+        log.addHandler(handler);
+
+
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
+            log.info("STEP 1");
+
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.url(), "master", true);
 
diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -230,10 +230,14 @@
             credentials = parseEntry(credentialsJson.asObject(), credentialsPath.getParent());
         }
     }
 
     private boolean getLock(HostedRepository repo) throws IOException {
+        if (repo instanceof TestHostedRepository) {
+            return true;
+        }
+
         try (var tempFolder = new TemporaryDirectory()) {
             var repoFolder = tempFolder.path().resolve("lock");
             var lockFile = repoFolder.resolve("lock.txt");
             Repository localRepo;
             try {
@@ -263,18 +267,22 @@
             return true;
         }
     }
 
     private void releaseLock(HostedRepository repo) throws IOException {
+        if (repo instanceof TestHostedRepository) {
+            return;
+        }
         try (var tempFolder = new TemporaryDirectory()) {
             var repoFolder = tempFolder.path().resolve("lock");
             var lockFile = repoFolder.resolve("lock.txt");
             Repository localRepo;
             localRepo = Repository.materialize(repoFolder, repo.url(), "testlock");
+            log.info("Released credentials lock for " + testName);
         }
     }
 
     public Hash commitLock(Repository localRepo) throws IOException {
         var lockFile = localRepo.root().resolve("lock.txt");
@@ -329,11 +337,10 @@
             pr.setState(PullRequest.State.CLOSED);
         }
         if (credentialsLock != null) {
             try {
                 releaseLock(credentialsLock);
-                log.info("Released credentials lock for " + testName);
             } catch (IOException e) {
                 throw new UncheckedIOException(e);
             }
             credentialsLock = null;
         }
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -21,17 +21,15 @@
  * questions.
  */
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.forge.*;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.*;
 import java.util.*;
 import java.util.stream.Collectors;
 
 public class TestHost implements Forge, IssueTracker {
     private final int currentUser;
@@ -45,20 +43,15 @@
         private final Map<String, TestPullRequest> pullRequests = new HashMap<>();
         private final Map<String, TestIssue> issues = new HashMap<>();
     }
 
     private Repository createLocalRepository() {
-        var folder = new TemporaryDirectory();
-        data.folders.add(folder);
         try {
-            var repo = Repository.init(folder.path().resolve("hosted.git"), VCS.GIT);
-            Files.writeString(repo.root().resolve("content.txt"), "Initial content", StandardCharsets.UTF_8);
-            repo.add(repo.root().resolve("content.txt"));
-            var hash = repo.commit("Initial content", "author", "author@none");
-            repo.push(hash, repo.root().toUri(), "testhostcontent");
-            repo.checkout(hash, true);
-            return repo;
+            var folder = new TemporaryDirectory();
+            data.folders.add(folder);
+            var repoFolder = folder.path().resolve("hosted.git");
+            return Repository.init(repoFolder, VCS.GIT, true);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
diff a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
@@ -35,18 +35,17 @@
 
 public class TestHostedRepository extends TestIssueProject implements HostedRepository {
     private final TestHost host;
     private final String projectName;
     private final Repository localRepository;
-    private final Pattern pullRequestPattern;
+    private Pattern pullRequestPattern;
 
     public TestHostedRepository(TestHost host, String projectName, Repository localRepository) {
         super(host, projectName);
         this.host = host;
         this.projectName = projectName;
-        pullRequestPattern = Pattern.compile(url().toString() + "/pr/" + "(\\d+)");
     }
 
     @Override
     public Forge forge() {
         return host;
@@ -83,10 +82,13 @@
                              .collect(Collectors.toList());
     }
 
     @Override
     public Optional<PullRequest> parsePullRequestUrl(String url) {
+        if (pullRequestPattern == null) {
+            pullRequestPattern = Pattern.compile(url().toString() + "/pr/" + "(\\d+)");
+        }
         var matcher = pullRequestPattern.matcher(url);
         if (matcher.find()) {
             return Optional.of(pullRequest(matcher.group(1)));
         } else {
             return Optional.empty();
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -26,16 +26,16 @@
 import org.openjdk.skara.vcs.hg.HgRepository;
 
 import java.io.IOException;
 import java.net.URI;
 import java.nio.file.Path;
-import java.nio.file.Files;
 import java.time.ZonedDateTime;
 import java.util.*;
 
 public interface Repository extends ReadOnlyRepository {
     Repository init() throws IOException;
+    Repository init(boolean isBare) throws IOException;
     void checkout(Hash h, boolean force) throws IOException;
     default void checkout(Hash h) throws IOException {
         checkout(h, false);
     }
     void checkout(Branch b, boolean force) throws IOException;
@@ -125,10 +125,21 @@
             default:
                 throw new IllegalArgumentException("Invalid enum value: " + vcs);
         }
     }
 
+    static Repository init(Path p, VCS vcs, boolean isBare) throws IOException {
+        switch (vcs) {
+            case GIT:
+                return new GitRepository(p).init(isBare);
+            case HG:
+                return new HgRepository(p).init(isBare);
+            default:
+                throw new IllegalArgumentException("Invalid enum value: " + vcs);
+        }
+    }
+
     static Optional<Repository> get(Path p) throws IOException {
         var r = GitRepository.get(p);
         if (r.isPresent()) {
             return r;
         }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -365,19 +365,31 @@
         checkout(b.name(), force);
     }
 
     @Override
     public Repository init() throws IOException {
+        return init(false);
+    }
+
+    @Override
+    public Repository init(boolean isBare) throws IOException {
         cachedRoot = null;
 
         if (!Files.exists(dir)) {
             Files.createDirectories(dir);
         }
 
-        try (var p = capture("git", "init")) {
-            await(p);
-            return this;
+        if (isBare) {
+            try (var p = capture("git", "init", "--bare")) {
+                await(p);
+                return this;
+            }
+        } else {
+            try (var p = capture("git", "init")) {
+                await(p);
+                return this;
+            }
         }
     }
 
     @Override
     public void pushAll(URI uri) throws IOException {
@@ -444,11 +456,11 @@
                 try (var p2 = capture("git", "rev-parse", "--git-dir")) {
                     var res2 = await(p2);
                     if (res2.stdout().size() != 1) {
                         throw new IOException("Unexpected output\n" + res2);
                     }
-                    cachedRoot = dir.resolve(Path.of(res2.stdout().get(0)));
+                    cachedRoot = dir.resolve(Path.of(res2.stdout().get(0))).normalize();
                     return cachedRoot;
                 }
             }
 
             cachedRoot = Path.of(res.stdout().get(0));
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -398,10 +398,15 @@
             await(p);
             return this;
         }
     }
 
+    @Override
+    public Repository init(boolean isBare) throws IOException {
+        throw new RuntimeException("not implemented yet");
+    }
+
     @Override
     public void pushAll(URI uri) throws IOException {
         try (var p = capture("hg", "push", "--new-branch", uri.toString())) {
             await(p);
         }
