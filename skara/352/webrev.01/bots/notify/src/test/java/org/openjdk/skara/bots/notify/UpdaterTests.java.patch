diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.email.*;
 import org.openjdk.skara.forge.HostedRepository;
+import org.openjdk.skara.issuetracker.Issue;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.mailinglist.MailingListServerFactory;
 import org.openjdk.skara.storage.StorageBuilder;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Tag;
@@ -64,10 +65,19 @@
     private StorageBuilder<PullRequestIssues> createPullRequestIssuesStorage(HostedRepository repository) {
         return new StorageBuilder<PullRequestIssues>("prissues.txt")
                 .remoteRepository(repository, "history", "Duke", "duke@openjdk.java.net", "Updated prissues");
     }
 
+    private Set<String> fixVersions(Issue issue) {
+        if (!issue.properties().containsKey("fixVersions")) {
+            return Set.of();
+        }
+        return issue.properties().get("fixVersions").stream()
+                    .map(JSONValue::asString)
+                    .collect(Collectors.toSet());
+    }
+
     @Test
     void testJsonUpdaterBranch(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var repo = credentials.getHostedRepository();
@@ -913,11 +923,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in a comment
@@ -933,14 +943,11 @@
             assertEquals(commitIcon, link.iconUrl().orElseThrow());
             assertEquals("Commit", link.title().orElseThrow());
             assertEquals(repo.webUrl(editHash), link.uri().orElseThrow());
 
             // As well as a fixVersion
-            var fixVersions = issue.fixVersions();
-            assertEquals(1, fixVersions.size());
-            var fixVersion = fixVersions.get(0);
-            assertEquals("0.1", fixVersion);
+            assertEquals(Set.of("0.1"), fixVersions(issue));
         }
     }
 
     @Test
     void testIssueNoVersion(TestInfo testInfo) throws IOException {
@@ -965,11 +972,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in a comment
@@ -977,12 +984,11 @@
             assertEquals(1, comments.size());
             var comment = comments.get(0);
             assertTrue(comment.body().contains(editHash.abbreviate()));
 
             // But not in the fixVersion
-            var fixVersions = issue.fixVersions();
-            assertEquals(0, fixVersions.size());
+            assertEquals(Set.of(), fixVersions(issue));
         }
     }
 
     @Test
     void testIssueConfiguredVersionNoCommit(TestInfo testInfo) throws IOException {
@@ -1007,11 +1013,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should not reflected in a comment
@@ -1019,14 +1025,11 @@
             assertEquals(1, comments.size());
             var comment = comments.get(0);
             assertTrue(comment.body().contains(editHash.abbreviate()));
 
             // As well as a fixVersion - but not the one from the repo
-            var fixVersions = issue.fixVersions();
-            assertEquals(1, fixVersions.size());
-            var fixVersion = fixVersions.get(0);
-            assertEquals("2.0", fixVersion);
+            assertEquals(Set.of("2.0"), fixVersions(issue));
 
             // And no commit link
             var links = issue.links();
             assertEquals(0, links.size());
         }
@@ -1058,11 +1061,11 @@
 
             // Save the state
             var historyState = localRepo.fetch(repo.url(), "history");
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in a comment
@@ -1078,14 +1081,11 @@
             assertEquals(commitIcon, link.iconUrl().orElseThrow());
             assertEquals("Commit", link.title().orElseThrow());
             assertEquals(repo.webUrl(editHash), link.uri().orElseThrow());
 
             // As well as a fixVersion
-            var fixVersions = issue.fixVersions();
-            assertEquals(1, fixVersions.size());
-            var fixVersion = fixVersions.get(0);
-            assertEquals("0.1", fixVersion);
+            assertEquals(Set.of("0.1"), fixVersions(issue));
 
             // Wipe the history
             localRepo.push(historyState, repo.url(), "history", true);
 
             // Run it again
@@ -1093,11 +1093,11 @@
 
             // There should be no new comments, links or fixVersions
             var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
             assertEquals(1, updatedIssue.comments().size());
             assertEquals(1, updatedIssue.links().size());
-            assertEquals(1, updatedIssue.fixVersions().size());
+            assertEquals(Set.of("0.1"), fixVersions(updatedIssue));
         }
     }
 
     @Test
     void testIssuePoolVersion(TestInfo testInfo) throws IOException {
@@ -1121,23 +1121,19 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
-            issue.addFixVersion("12-pool");
-            issue.addFixVersion("tbd13");
-            issue.addFixVersion("unknown");
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
+            issue.setProperty("fixVersions", JSON.array().add("12-pool").add("tbd13").add("unknown"));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The fixVersion should have been updated
-            var fixVersions = issue.fixVersions();
-            assertEquals(1, fixVersions.size());
-            assertEquals("12u14", fixVersions.get(0));
+            assertEquals(Set.of("12u14"), fixVersions(issue));
         }
     }
 
     @Test
     void testIssuePoolOpenVersion(TestInfo testInfo) throws IOException {
@@ -1161,23 +1157,19 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
-            issue.addFixVersion("12-open");
-            issue.addFixVersion("tbd13");
-            issue.addFixVersion("unknown");
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
+            issue.setProperty("fixVersions", JSON.array().add("12-pool").add("tbd13").add("unknown"));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The fixVersion should have been updated
-            var fixVersions = issue.fixVersions();
-            assertEquals(1, fixVersions.size());
-            assertEquals("12u14", fixVersions.get(0));
+            assertEquals(Set.of("12u14"), fixVersions(issue));
         }
     }
 
     @Test
     void testIssueBackport(TestInfo testInfo) throws IOException {
@@ -1201,34 +1193,33 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
-            issue.addFixVersion("13.0.1");
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
+            issue.setProperty("fixVersions", JSON.array().add("13.0.1"));
+            issue.setProperty("priority", JSON.of("1"));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The fixVersion should not have been updated
             var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
-            var fixVersions = updatedIssue.fixVersions();
-            assertEquals(1, fixVersions.size());
-            assertEquals("13.0.1", fixVersions.get(0));
+            assertEquals(Set.of("13.0.1"), fixVersions(updatedIssue));
 
             // There should be a link
             var links = updatedIssue.links();
             assertEquals(1, links.size());
             var link = links.get(0);
             var backport = link.issue().orElseThrow();
 
             // The backport issue should have a correct fixVersion
-            var backportFixVersions = backport.fixVersions();
-            assertEquals(1, backportFixVersions.size());
-            assertEquals("12.0.2", backportFixVersions.get(0));
-            assertEquals("Backport", backport.properties().get("type"));
+            assertEquals(Set.of("12.0.2"), fixVersions(backport));
+
+            // Custom properties should also propagate
+            assertEquals("1", backport.properties().get("priority").asString());
         }
     }
 
     @Test
     void testPullRequest(TestInfo testInfo) throws IOException {
@@ -1255,11 +1246,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and a pull request to fix it
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix that issue");
             localRepo.push(editHash, repo.url(), "edit", true);
             var pr = credentials.createPullRequest(repo, "edit", "master", issue.id() + ": Fix that issue");
             pr.setBody("\n\n## Issue\n[" + issue.id() + "](http://www.test.test/): The issue");
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -1291,11 +1282,11 @@
             assertEquals(1, links.size());
             assertEquals(pr.webUrl(), links.get(0).uri().orElseThrow());
             assertEquals(reviewIcon, links.get(0).iconUrl().orElseThrow());
 
             // Add another issue
-            var issue2 = issueProject.createIssue("This is another issue", List.of("Yes indeed"), Map.of("type", "Enhancement"));
+            var issue2 = issueProject.createIssue("This is another issue", List.of("Yes indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             pr.setBody("\n\n## Issues\n[" + issue.id() + "](http://www.test.test/): The issue\n[" + issue2.id() +
                                "](http://www.test2.test/): The second issue");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Both issues should contain a link to the PR
@@ -1343,11 +1334,11 @@
                                           Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")));
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and a pull request to fix it
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix that issue");
             localRepo.push(editHash, repo.url(), "edit", true);
             var pr = credentials.createPullRequest(repo, "edit", "master", issue.id() + ": Fix that issue");
             pr.setBody("\n\n## Issue\n[" + issue.id() + "](http://www.test.test/): The issue");
             TestBotRunner.runPeriodicItems(notifyBot);
