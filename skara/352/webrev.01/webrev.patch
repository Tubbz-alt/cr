diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
@@ -24,10 +24,11 @@
 
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.issuetracker.Issue;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.jcheck.JCheckConfiguration;
+import org.openjdk.skara.json.*;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.*;
 
 import java.io.IOException;
 import java.net.URI;
@@ -59,15 +60,15 @@
 
     private final static Set<String> primaryTypes = Set.of("Bug", "New Feature", "Enhancement", "Task", "Sub-task");
 
     private boolean isPrimaryIssue(Issue issue) {
         var properties = issue.properties();
-        if (!properties.containsKey("type")) {
+        if (!properties.containsKey("issuetype")) {
             throw new RuntimeException("Unknown type for issue " + issue);
         }
-        var type = properties.get("type");
-        return primaryTypes.contains(type);
+        var type = properties.get("issuetype");
+        return primaryTypes.contains(type.asString());
     }
 
     private final static Pattern majorVersionPattern = Pattern.compile("([0-9]+)(u[0-9]+)?");
 
     /**
@@ -85,29 +86,38 @@
     private List<Issue> findBackports(Issue primary) {
         var links = primary.links();
         return links.stream()
                     .filter(l -> l.issue().isPresent())
                     .map(l -> l.issue().get())
-                    .filter(i -> i.properties().containsKey("type"))
-                    .filter(i -> i.properties().get("type").equals("Backport"))
+                    .filter(i -> i.properties().containsKey("issuetype"))
+                    .filter(i -> i.properties().get("issuetype").asString().equals("Backport"))
                     .collect(Collectors.toList());
     }
 
     private boolean isNonScratchVersion(String version) {
         return !version.startsWith("tbd") && !version.toLowerCase().equals("unknown");
     }
 
+    private Set<String> fixVersions(Issue issue) {
+        if (!issue.properties().containsKey("fixVersions")) {
+            return Set.of();
+        }
+        return issue.properties().get("fixVersions").stream()
+                    .map(JSONValue::asString)
+                    .collect(Collectors.toSet());
+    }
+
     /**
      * Return true if the issue's fixVersionList matches fixVersion.
      *
      * fixVersionsList must contain one entry that is an exact match for fixVersions; any
      * other entries must be scratch values.
      */
     private boolean matchVersion(Issue issue, String fixVersion) {
-        var nonScratch = issue.fixVersions().stream()
-                              .filter(this::isNonScratchVersion)
-                              .collect(Collectors.toList());
+        var nonScratch = fixVersions(issue).stream()
+                                           .filter(this::isNonScratchVersion)
+                                           .collect(Collectors.toList());
         return nonScratch.size() == 1 && nonScratch.get(0).equals(fixVersion);
     }
 
     /**
      * Return true if the issue's fixVersionList is a match for fixVersion, using "-pool" or "-open".
@@ -121,34 +131,41 @@
             return false;
         }
         var poolVersion = majorVersion.get() + "-pool";
         var openVersion = majorVersion.get() + "-open";
 
-        var nonScratch = issue.fixVersions().stream()
-                              .filter(this::isNonScratchVersion)
-                              .collect(Collectors.toList());
+        var nonScratch = fixVersions(issue).stream()
+                                           .filter(this::isNonScratchVersion)
+                                           .collect(Collectors.toList());
         return nonScratch.size() == 1 && (nonScratch.get(0).equals(poolVersion) || nonScratch.get(0).equals(openVersion));
     }
 
     /**
      * Return true if fixVersionList is empty or contains only scratch values.
      */
     private boolean matchScratchVersion(Issue issue) {
-        var nonScratch = issue.fixVersions().stream()
-                              .filter(this::isNonScratchVersion)
-                              .collect(Collectors.toList());
+        var nonScratch = fixVersions(issue).stream()
+                                           .filter(this::isNonScratchVersion)
+                                           .collect(Collectors.toList());
         return nonScratch.size() == 0;
     }
 
+    private final static Set<String> propagatedCustomProperties =
+            Set.of("customfield_10008", "customfield_10000", "customfield_10005");
+
     /**
      * Create a backport of issue.
      */
     private Issue createBackportIssue(Issue primary) {
-        var properties = primary.properties();
-        properties.put("type", "Backport");
+        var filteredProperties = primary.properties().entrySet().stream()
+                .filter(entry -> !entry.getKey().startsWith("customfield_") || propagatedCustomProperties.contains(entry.getKey()))
+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
+
+        var finalProperties = new HashMap<>(filteredProperties);
+        finalProperties.put("issuetype", JSON.of("Backport"));
 
-        var backport = primary.project().createIssue(primary.title(), primary.body().lines().collect(Collectors.toList()), properties);
+        var backport = primary.project().createIssue(primary.title(), primary.body().lines().collect(Collectors.toList()), finalProperties);
 
         var backportLink = Link.create(backport, "backported by").build();
         primary.addLink(backportLink);;
         return backport;
     }
@@ -168,11 +185,11 @@
      * A "scratch" fixVersion is empty, "tbd.*", or "unknown".
      */
     private Issue findIssue(Issue primary, String fixVersion) {
         log.info("Searching for properly versioned issue for primary issue " + primary.id());
         var candidates = Stream.concat(Stream.of(primary), findBackports(primary).stream()).collect(Collectors.toList());
-        candidates.forEach(c -> log.fine("Candidate: " + c.id() + " with versions: " + String.join(",", c.fixVersions())));
+        candidates.forEach(c -> log.fine("Candidate: " + c.id() + " with versions: " + String.join(",", fixVersions(c))));
         var matchingVersionIssue = candidates.stream()
                 .filter(i -> matchVersion(i, fixVersion))
                 .findFirst();
         if (matchingVersionIssue.isPresent()) {
             log.info("Issue " + matchingVersionIssue.get().id() + " has a correct fixVersion");
@@ -262,15 +279,11 @@
                     issue.addLink(linkBuilder.build());
                 }
 
                 if (setFixVersion) {
                     if (requestedVersion != null) {
-                        // Remove any previously set versions (can only be scratch versions)
-                        for (var oldVersion : issue.fixVersions()) {
-                            issue.removeFixVersion(oldVersion);
-                        }
-                        issue.addFixVersion(requestedVersion);
+                        issue.setProperty("fixVersions", JSON.of(requestedVersion));
                     }
                 }
             }
         }
     }
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.email.*;
 import org.openjdk.skara.forge.HostedRepository;
+import org.openjdk.skara.issuetracker.Issue;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.mailinglist.MailingListServerFactory;
 import org.openjdk.skara.storage.StorageBuilder;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Tag;
@@ -64,10 +65,19 @@
     private StorageBuilder<PullRequestIssues> createPullRequestIssuesStorage(HostedRepository repository) {
         return new StorageBuilder<PullRequestIssues>("prissues.txt")
                 .remoteRepository(repository, "history", "Duke", "duke@openjdk.java.net", "Updated prissues");
     }
 
+    private Set<String> fixVersions(Issue issue) {
+        if (!issue.properties().containsKey("fixVersions")) {
+            return Set.of();
+        }
+        return issue.properties().get("fixVersions").stream()
+                    .map(JSONValue::asString)
+                    .collect(Collectors.toSet());
+    }
+
     @Test
     void testJsonUpdaterBranch(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var repo = credentials.getHostedRepository();
@@ -913,11 +923,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in a comment
@@ -933,14 +943,11 @@
             assertEquals(commitIcon, link.iconUrl().orElseThrow());
             assertEquals("Commit", link.title().orElseThrow());
             assertEquals(repo.webUrl(editHash), link.uri().orElseThrow());
 
             // As well as a fixVersion
-            var fixVersions = issue.fixVersions();
-            assertEquals(1, fixVersions.size());
-            var fixVersion = fixVersions.get(0);
-            assertEquals("0.1", fixVersion);
+            assertEquals(Set.of("0.1"), fixVersions(issue));
         }
     }
 
     @Test
     void testIssueNoVersion(TestInfo testInfo) throws IOException {
@@ -965,11 +972,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in a comment
@@ -977,12 +984,11 @@
             assertEquals(1, comments.size());
             var comment = comments.get(0);
             assertTrue(comment.body().contains(editHash.abbreviate()));
 
             // But not in the fixVersion
-            var fixVersions = issue.fixVersions();
-            assertEquals(0, fixVersions.size());
+            assertEquals(Set.of(), fixVersions(issue));
         }
     }
 
     @Test
     void testIssueConfiguredVersionNoCommit(TestInfo testInfo) throws IOException {
@@ -1007,11 +1013,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should not reflected in a comment
@@ -1019,14 +1025,11 @@
             assertEquals(1, comments.size());
             var comment = comments.get(0);
             assertTrue(comment.body().contains(editHash.abbreviate()));
 
             // As well as a fixVersion - but not the one from the repo
-            var fixVersions = issue.fixVersions();
-            assertEquals(1, fixVersions.size());
-            var fixVersion = fixVersions.get(0);
-            assertEquals("2.0", fixVersion);
+            assertEquals(Set.of("2.0"), fixVersions(issue));
 
             // And no commit link
             var links = issue.links();
             assertEquals(0, links.size());
         }
@@ -1058,11 +1061,11 @@
 
             // Save the state
             var historyState = localRepo.fetch(repo.url(), "history");
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in a comment
@@ -1078,14 +1081,11 @@
             assertEquals(commitIcon, link.iconUrl().orElseThrow());
             assertEquals("Commit", link.title().orElseThrow());
             assertEquals(repo.webUrl(editHash), link.uri().orElseThrow());
 
             // As well as a fixVersion
-            var fixVersions = issue.fixVersions();
-            assertEquals(1, fixVersions.size());
-            var fixVersion = fixVersions.get(0);
-            assertEquals("0.1", fixVersion);
+            assertEquals(Set.of("0.1"), fixVersions(issue));
 
             // Wipe the history
             localRepo.push(historyState, repo.url(), "history", true);
 
             // Run it again
@@ -1093,11 +1093,11 @@
 
             // There should be no new comments, links or fixVersions
             var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
             assertEquals(1, updatedIssue.comments().size());
             assertEquals(1, updatedIssue.links().size());
-            assertEquals(1, updatedIssue.fixVersions().size());
+            assertEquals(Set.of("0.1"), fixVersions(updatedIssue));
         }
     }
 
     @Test
     void testIssuePoolVersion(TestInfo testInfo) throws IOException {
@@ -1121,23 +1121,19 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
-            issue.addFixVersion("12-pool");
-            issue.addFixVersion("tbd13");
-            issue.addFixVersion("unknown");
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
+            issue.setProperty("fixVersions", JSON.array().add("12-pool").add("tbd13").add("unknown"));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The fixVersion should have been updated
-            var fixVersions = issue.fixVersions();
-            assertEquals(1, fixVersions.size());
-            assertEquals("12u14", fixVersions.get(0));
+            assertEquals(Set.of("12u14"), fixVersions(issue));
         }
     }
 
     @Test
     void testIssuePoolOpenVersion(TestInfo testInfo) throws IOException {
@@ -1161,23 +1157,19 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
-            issue.addFixVersion("12-open");
-            issue.addFixVersion("tbd13");
-            issue.addFixVersion("unknown");
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
+            issue.setProperty("fixVersions", JSON.array().add("12-pool").add("tbd13").add("unknown"));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The fixVersion should have been updated
-            var fixVersions = issue.fixVersions();
-            assertEquals(1, fixVersions.size());
-            assertEquals("12u14", fixVersions.get(0));
+            assertEquals(Set.of("12u14"), fixVersions(issue));
         }
     }
 
     @Test
     void testIssueBackport(TestInfo testInfo) throws IOException {
@@ -1201,34 +1193,33 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
-            issue.addFixVersion("13.0.1");
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
+            issue.setProperty("fixVersions", JSON.array().add("13.0.1"));
+            issue.setProperty("priority", JSON.of("1"));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The fixVersion should not have been updated
             var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
-            var fixVersions = updatedIssue.fixVersions();
-            assertEquals(1, fixVersions.size());
-            assertEquals("13.0.1", fixVersions.get(0));
+            assertEquals(Set.of("13.0.1"), fixVersions(updatedIssue));
 
             // There should be a link
             var links = updatedIssue.links();
             assertEquals(1, links.size());
             var link = links.get(0);
             var backport = link.issue().orElseThrow();
 
             // The backport issue should have a correct fixVersion
-            var backportFixVersions = backport.fixVersions();
-            assertEquals(1, backportFixVersions.size());
-            assertEquals("12.0.2", backportFixVersions.get(0));
-            assertEquals("Backport", backport.properties().get("type"));
+            assertEquals(Set.of("12.0.2"), fixVersions(backport));
+
+            // Custom properties should also propagate
+            assertEquals("1", backport.properties().get("priority").asString());
         }
     }
 
     @Test
     void testPullRequest(TestInfo testInfo) throws IOException {
@@ -1255,11 +1246,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and a pull request to fix it
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix that issue");
             localRepo.push(editHash, repo.url(), "edit", true);
             var pr = credentials.createPullRequest(repo, "edit", "master", issue.id() + ": Fix that issue");
             pr.setBody("\n\n## Issue\n[" + issue.id() + "](http://www.test.test/): The issue");
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -1291,11 +1282,11 @@
             assertEquals(1, links.size());
             assertEquals(pr.webUrl(), links.get(0).uri().orElseThrow());
             assertEquals(reviewIcon, links.get(0).iconUrl().orElseThrow());
 
             // Add another issue
-            var issue2 = issueProject.createIssue("This is another issue", List.of("Yes indeed"), Map.of("type", "Enhancement"));
+            var issue2 = issueProject.createIssue("This is another issue", List.of("Yes indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             pr.setBody("\n\n## Issues\n[" + issue.id() + "](http://www.test.test/): The issue\n[" + issue2.id() +
                                "](http://www.test2.test/): The second issue");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Both issues should contain a link to the PR
@@ -1343,11 +1334,11 @@
                                           Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")));
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and a pull request to fix it
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix that issue");
             localRepo.push(editHash, repo.url(), "edit", true);
             var pr = credentials.createPullRequest(repo, "edit", "master", issue.id() + ": Fix that issue");
             pr.setBody("\n\n## Issue\n[" + issue.id() + "](http://www.test.test/): The issue");
             TestBotRunner.runPeriodicItems(notifyBot);
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
@@ -23,10 +23,11 @@
 package org.openjdk.skara.bots.tester;
 
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.json.JSONValue;
 import org.openjdk.skara.vcs.*;
 
 import java.util.*;
 import java.time.*;
 import java.net.*;
@@ -242,36 +243,21 @@
     public void removeLink(Link link) {
 
     }
 
     @Override
-    public List<String> fixVersions() {
+    public Map<String, JSONValue> properties() {
         return null;
     }
 
     @Override
-    public void addFixVersion(String fixVersion) {
+    public void setProperty(String name, JSONValue value) {
 
     }
 
     @Override
-    public void removeFixVersion(String fixVersion) {
-
-    }
-
-    @Override
-    public Map<String, String> properties() {
-        return null;
-    }
-
-    @Override
-    public void setProperty(String name, String value) {
-
-    }
-
-    @Override
-    public void removePropery(String name) {
+    public void removeProperty(String name) {
 
     }
 
     @Override
     public void setTitle(String title) {
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -522,34 +522,19 @@
     public void removeLink(Link link) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public List<String> fixVersions() {
+    public Map<String, JSONValue> properties() {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public void addFixVersion(String fixVersion) {
+    public void setProperty(String name, JSONValue value) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public void removeFixVersion(String fixVersion) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public Map<String, String> properties() {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public void setProperty(String name, String value) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public void removePropery(String name) {
+    public void removeProperty(String name) {
         throw new RuntimeException("not implemented yet");
     }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
@@ -651,34 +651,19 @@
     public void removeLink(Link link) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public List<String> fixVersions() {
+    public Map<String, JSONValue> properties() {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public void addFixVersion(String fixVersion) {
+    public void setProperty(String name,JSONValue value) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public void removeFixVersion(String fixVersion) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public Map<String, String> properties() {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public void setProperty(String name, String value) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public void removePropery(String name) {
+    public void removeProperty(String name) {
         throw new RuntimeException("not implemented yet");
     }
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
@@ -21,10 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.issuetracker;
 
 import org.openjdk.skara.host.HostUser;
+import org.openjdk.skara.json.JSONValue;
 
 import java.net.URI;
 import java.time.ZonedDateTime;
 import java.util.*;
 
@@ -152,17 +153,11 @@
 
     void addLink(Link link);
 
     void removeLink(Link link);
 
-    List<String> fixVersions();
+    Map<String, JSONValue> properties();
 
-    void addFixVersion(String fixVersion);
+    void setProperty(String name, JSONValue value);
 
-    void removeFixVersion(String fixVersion);
-
-    Map<String, String> properties();
-
-    void setProperty(String name, String value);
-
-    void removePropery(String name);
+    void removeProperty(String name);
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java
@@ -20,15 +20,17 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.issuetracker;
 
+import org.openjdk.skara.json.JSONValue;
+
 import java.net.URI;
 import java.util.*;
 
 public interface IssueProject {
     IssueTracker issueTracker();
     URI webUrl();
-    Issue createIssue(String title, List<String> body, Map<String, String> properties);
+    Issue createIssue(String title, List<String> body, Map<String, JSONValue> properties);
     Optional<Issue> issue(String id);
     List<Issue> issues();
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
@@ -440,49 +440,32 @@
             throw new IllegalArgumentException("Unknown type of link: " + link);
         }
     }
 
     @Override
-    public List<String> fixVersions() {
-        return json.get("fields").get("fixVersions").stream()
-                   .map(obj -> obj.get("id").asString())
-                   .map(id -> jiraProject.fixVersionNameFromId(id).orElseThrow())
-                   .collect(Collectors.toList());
-    }
-
-    @Override
-    public void addFixVersion(String fixVersion) {
-        var query = JSON.object()
-                        .put("update", JSON.object()
-                                           .put("fixVersions", JSON.array().add(JSON.object()
-                                                                                    .put("add", JSON.object()
-                                                                                                    .put("id", jiraProject.fixVersionIdFromName(fixVersion).orElseThrow())))));
-        request.put("").body(query).execute();
-    }
-
-    @Override
-    public void removeFixVersion(String fixVersion) {
-        var query = JSON.object()
-                        .put("update", JSON.object()
-                                           .put("fixVersions", JSON.array().add(JSON.object()
-                                                                                    .put("remove", JSON.object()
-                                                                                                    .put("id", jiraProject.fixVersionIdFromName(fixVersion).orElseThrow())))));
-        request.put("").body(query).execute();
-    }
+    public Map<String, JSONValue> properties() {
+        var ret = new HashMap<String, JSONValue>();
 
-    @Override
-    public Map<String, String> properties() {
-        var ret = new HashMap<String, String>();
-        ret.put("type", json.get("fields").get("issuetype").get("name").asString());
+        for (var field : json.get("fields").asObject().fields()) {
+            var value = field.value();
+            var decoded = jiraProject.decodeProperty(field.name(), value);
+            decoded.ifPresent(jsonValue -> ret.put(field.name(), jsonValue));
+        }
         return ret;
     }
 
     @Override
-    public void setProperty(String name, String value) {
-
+    public void setProperty(String name, JSONValue value) {
+        var encoded = jiraProject.encodeProperty(name, value);
+        if (encoded.isEmpty()) {
+            log.warning("Ignoring unknown property: " + name);
+            return;
+        }
+        var query = JSON.object().put("fields", JSON.object().put(name, encoded.get()));
+        request.put("").body(query).execute();
     }
 
     @Override
-    public void removePropery(String name) {
+    public void removeProperty(String name) {
 
     }
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
@@ -35,12 +35,10 @@
     private final JiraHost jiraHost;
     private final String projectName;
     private final RestRequest request;
 
     private JSONObject projectMetadataCache = null;
-    private Map<String, String> versionNameToId = null;
-    private Map<String, String> versionIdToName = null;
     private List<JiraLinkType> linkTypes = null;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.issuetracker.jira");
 
     JiraProject(JiraHost host, RestRequest request, String projectName) {
@@ -70,29 +68,16 @@
             ret.put(type.get("name").asString(), type.get("id").asString());
         }
         return ret;
     }
 
-    private void populateVersionsIfNeeded() {
-        if (versionIdToName != null) {
-            return;
+    private Map<String, String> versions() {
+        var ret = new HashMap<String, String>();
+        for (var type : project().get("versions").asArray()) {
+            ret.put(type.get("name").asString(), type.get("id").asString());
         }
-
-        versionNameToId = project().get("versions").stream()
-                                   .collect(Collectors.toMap(v -> v.get("name").asString(), v -> v.get("id").asString()));
-        versionIdToName = project().get("versions").stream()
-                                   .collect(Collectors.toMap(v -> v.get("id").asString(), v -> v.get("name").asString()));
-    }
-
-    Optional<String> fixVersionNameFromId(String id) {
-        populateVersionsIfNeeded();
-        return Optional.ofNullable(versionIdToName.getOrDefault(id, null));
-    }
-
-    Optional<String> fixVersionIdFromName(String name) {
-        populateVersionsIfNeeded();
-        return Optional.ofNullable(versionNameToId.getOrDefault(name, null));
+        return ret;
     }
 
     private void populateLinkTypesIfNeeded() {
         if (linkTypes != null) {
             return;
@@ -132,67 +117,142 @@
 
     JiraHost jiraHost() {
         return jiraHost;
     }
 
+    private static final Set<String> knownProperties = Set.of("issuetype", "fixVersions", "versions", "priority", "components");
+
+    boolean isAllowedProperty(String name) {
+        if (knownProperties.contains(name)) {
+            return true;
+        }
+        return name.startsWith("customfield_");
+    }
+
+    Optional<JSONValue> decodeProperty(String name, JSONValue value) {
+        if (!isAllowedProperty(name)) {
+            return Optional.empty();
+        }
+        if (value.isNull()) {
+            return Optional.empty();
+        }
+
+        // Transform known fields to a better representation
+        switch (name) {
+            case "fixVersions": // fall-through
+            case "versions": // fall-through
+            case "components":
+                return Optional.of(new JSONArray(value.stream()
+                                                      .map(obj -> obj.get("name"))
+                                                      .collect(Collectors.toList())));
+            case "issuetype":
+                return Optional.of(JSON.of(value.get("name").asString()));
+            case "priority":
+                return Optional.of(JSON.of(value.get("id").asString()));
+            default:
+                return Optional.of(value);
+        }
+    }
+
+    Optional<JSONValue> encodeProperty(String name, JSONValue value) {
+        if (!isAllowedProperty(name)) {
+            return Optional.empty();
+        }
+
+        switch (name) {
+            case "fixVersions": // fall-through
+            case "versions":
+                return Optional.of(new JSONArray(value.stream()
+                                                      .map(JSONValue::asString)
+                                                      .map(s -> JSON.object().put("id", versions().get(s)))
+                                                      .collect(Collectors.toList())));
+            case "components":
+                return Optional.of(new JSONArray(value.stream()
+                                                      .map(JSONValue::asString)
+                                                      .map(s -> JSON.object().put("id", components().get(s)))
+                                                      .collect(Collectors.toList())));
+            case "issuetype":
+                return Optional.of(JSON.object().put("id", issueTypes().get(value.asString())));
+            case "priority":
+                return Optional.of(JSON.object().put("id", value.asString()));
+            default:
+                return Optional.of(value);
+        }
+    }
+
     @Override
     public IssueTracker issueTracker() {
         return jiraHost;
     }
 
     @Override
     public URI webUrl() {
         return URIBuilder.base(jiraHost.getUri()).setPath("/projects/" + projectName).build();
     }
 
+    private boolean isInitialField(String name, JSONValue value) {
+        if (name.equals("project") || name.equals("summary") || name.equals("description") || name.equals("components")) {
+            return true;
+        }
+        return false;
+    }
+
     @Override
-    public Issue createIssue(String title, List<String> body, Map<String, String> properties) {
+    public Issue createIssue(String title, List<String> body, Map<String, JSONValue> properties) {
         var query = JSON.object();
-        var fields = JSON.object()
-                         .put("project", JSON.object()
-                                             .put("id", projectId()))
-                         .put("components", JSON.array()
-                                                .add(JSON.object().put("id", defaultComponent())))
-                         .put("summary", title)
-                         .put("description", String.join("\n", body));
-
-        var fixupFields = JSON.object();
+
+        var finalProperties = new HashMap<String, JSONValue>(properties);
+
+        // Always override certain fields
+        finalProperties.put("project", JSON.object().put("id", projectId()));
+        finalProperties.put("summary", JSON.of(title));
+        finalProperties.put("description", JSON.of(String.join("\n", body)));
+
+        // Encode optional properties as fields
         for (var property : properties.entrySet()) {
-            switch (property.getKey()) {
-                case "type":
-                    if (!property.getValue().equals("Backport")) {
-                        fields.put("issuetype", JSON.object().put("id", issueTypes().get(property.getValue())));
-                    } else {
-                        fixupFields.put("issuetype", JSON.object().put("id", issueTypes().get(property.getValue())));
-                    }
-                    break;
-                default:
-                    log.warning("Unknown issue property: " + property.getKey());
-                    break;
+            var encoded = encodeProperty(property.getKey(), property.getValue());
+            if (encoded.isEmpty()) {
+                continue;
             }
+            finalProperties.put(property.getKey(), encoded.get());
         }
 
-        if (!fields.contains("issuetype")) {
-            fields.put("issuetype", JSON.object().put("id", defaultIssueType()));
-        }
+        // Provide default values for required fields if not present
+        finalProperties.putIfAbsent("components", JSON.array().add(JSON.object().put("id", defaultComponent())));
+
+        // Filter out the fields that can be set at creation time
+        var fields = JSON.object();
+        finalProperties.entrySet().stream()
+                       .filter(entry -> isInitialField(entry.getKey(), entry.getValue()))
+                       .forEach(entry -> fields.put(entry.getKey(), entry.getValue()));
+
+        // Certain types can only be set after creation, so always start with the default value
+        fields.put("issuetype", JSON.object().put("id", defaultIssueType()));
+
         query.put("fields", fields);
         jiraHost.securityLevel().ifPresent(securityLevel -> fields.put("security", JSON.object()
                                                                                        .put("id", securityLevel)));
         var data = request.post("issue")
                           .body(query)
                           .execute();
 
-        // Workaround - some fields cannot be set immediately
-        if (properties.containsKey("type") && properties.get("type").equals("Backport")) {
+        // Apply fields that have to be set later (if any)
+        var editFields = JSON.object();
+        finalProperties.entrySet().stream()
+                       .filter(entry -> !isInitialField(entry.getKey(), entry.getValue()))
+                       .forEach(entry -> editFields.put(entry.getKey(), entry.getValue()));
+
+        if (editFields.fields().size() > 0) {
             var id = data.get("key").asString();
             if (id.indexOf('-') < 0) {
                 id = projectName.toUpperCase() + "-" + id;
             }
-            var updateQuery = JSON.object().put("fields", fixupFields);
+            var updateQuery = JSON.object().put("fields", editFields);
             request.put("issue/" + id)
                    .body(updateQuery)
                    .execute();
+
         }
 
         return issue(data.get("key").asString()).orElseThrow();
     }
 
diff a/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java b/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
--- a/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
+++ b/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.issuetracker;
 
+import org.openjdk.skara.json.JSON;
 import org.openjdk.skara.test.HostCredentials;
 
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
@@ -58,16 +59,17 @@
             issue.updateComment(comment.id(), "Now it is updated");
             issue.addLabel("label");
             issue.addLabel("another");
             issue.removeLabel("label");
             issue.setAssignees(List.of(project.issueTracker().currentUser()));
-            issue.addFixVersion("1.0");
-            issue.addFixVersion("2.0");
-            issue.removeFixVersion("1.0");
+            issue.setProperty("fixVersions", JSON.array().add("1.0"));
+            issue.setProperty("fixVersions", JSON.array().add("1.0").add("2.0"));
+            issue.setProperty("fixVersions", JSON.array().add("3.0"));
             var updated = project.issue(issue.id()).orElseThrow();
             assertEquals(List.of("another"), updated.labels());
-            assertEquals(List.of("2.0"), updated.fixVersions());
+            assertEquals(1, updated.properties().get("fixVersions").asArray().size());
+            assertEquals("3.0", updated.properties().get("fixVersions").get(0).asString());
             assertEquals(List.of(project.issueTracker().currentUser()), updated.assignees());
             assertEquals(1, updated.comments().size());
             assertEquals("Updated title", updated.title());
             assertEquals("Now it is updated", updated.comments().get(0).body());
 
diff a/test/src/main/java/org/openjdk/skara/test/IssueData.java b/test/src/main/java/org/openjdk/skara/test/IssueData.java
--- a/test/src/main/java/org/openjdk/skara/test/IssueData.java
+++ b/test/src/main/java/org/openjdk/skara/test/IssueData.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.json.JSONValue;
 
 import java.time.ZonedDateTime;
 import java.util.*;
 
 class IssueData {
@@ -34,10 +35,9 @@
     String title = "";
     final List<Comment> comments = new ArrayList<>();
     final Set<String> labels = new HashSet<>();
     final List<HostUser> assignees = new ArrayList<>();
     final List<Link> links = new ArrayList<>();
-    final Set<String> fixVersions = new HashSet<>();
-    final Map<String, String> properties = new HashMap<>();
+    final Map<String, JSONValue> properties = new HashMap<>();
     ZonedDateTime created = ZonedDateTime.now();
     ZonedDateTime lastUpdate = created;
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -23,10 +23,11 @@
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.json.JSONValue;
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
@@ -160,11 +161,11 @@
                                 .map(pr -> getPullRequest(repository, pr.getKey()))
                                 .filter(TestPullRequest::isOpen)
                                 .collect(Collectors.toList());
     }
 
-    TestIssue createIssue(TestIssueProject issueProject, String title, List<String> body, Map<String, String> properties) {
+    TestIssue createIssue(TestIssueProject issueProject, String title, List<String> body, Map<String, JSONValue> properties) {
         var id = issueProject.projectName().toUpperCase() + "-" + (data.issues.size() + 1);
         var issue = TestIssue.createNew(issueProject, id, title, body, properties);
         data.issues.put(id ,issue);
         return issue;
     }
diff a/test/src/main/java/org/openjdk/skara/test/TestIssue.java b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssue.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.json.JSONValue;
 import org.openjdk.skara.network.URIBuilder;
 
 import java.net.URI;
 import java.time.ZonedDateTime;
 import java.util.*;
@@ -43,11 +44,11 @@
         this.author = author;;
         this.user = user;
         this.data = data;
     }
 
-    static TestIssue createNew(TestIssueProject issueProject, String id, String title, List<String> body, Map<String, String> properties) {
+    static TestIssue createNew(TestIssueProject issueProject, String id, String title, List<String> body, Map<String, JSONValue> properties) {
         var data = new IssueData();
         data.title = title;
         data.body = String.join("\n", body);
         data.properties.putAll(properties);
         var issue = new TestIssue(issueProject, id, issueProject.issueTracker().currentUser(), issueProject.issueTracker().currentUser(), data);
@@ -225,38 +226,21 @@
         }
         data.lastUpdate = ZonedDateTime.now();
     }
 
     @Override
-    public List<String> fixVersions() {
-        return new ArrayList<>(data.fixVersions);
-    }
-
-    @Override
-    public void addFixVersion(String fixVersion) {
-        data.fixVersions.add(fixVersion);
-        data.lastUpdate = ZonedDateTime.now();
-    }
-
-    @Override
-    public void removeFixVersion(String fixVersion) {
-        data.fixVersions.remove(fixVersion);
-        data.lastUpdate = ZonedDateTime.now();
-    }
-
-    @Override
-    public Map<String, String> properties() {
+    public Map<String, JSONValue> properties() {
         return data.properties;
     }
 
     @Override
-    public void setProperty(String name, String value) {
+    public void setProperty(String name, JSONValue value) {
         data.properties.put(name, value);
         data.lastUpdate = ZonedDateTime.now();
     }
 
     @Override
-    public void removePropery(String name) {
+    public void removeProperty(String name) {
         data.properties.remove(name);
         data.lastUpdate = ZonedDateTime.now();
     }
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java b/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
@@ -21,10 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.json.JSONValue;
 import org.openjdk.skara.network.URIBuilder;
 
 import java.net.URI;
 import java.util.*;
 
@@ -50,11 +51,11 @@
         this.host = host;
         this.projectName = projectName;
     }
 
     @Override
-    public Issue createIssue(String title, List<String> body, Map<String, String> properties) {
+    public Issue createIssue(String title, List<String> body, Map<String, JSONValue> properties) {
         return host.createIssue(this, title, body, properties);
     }
 
     @Override
     public Optional<Issue> issue(String id) {
