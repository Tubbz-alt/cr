diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
@@ -24,10 +24,11 @@
 
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.issuetracker.Issue;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.jcheck.JCheckConfiguration;
+import org.openjdk.skara.json.*;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.*;
 
 import java.io.IOException;
 import java.net.URI;
@@ -59,15 +60,15 @@
 
     private final static Set<String> primaryTypes = Set.of("Bug", "New Feature", "Enhancement", "Task", "Sub-task");
 
     private boolean isPrimaryIssue(Issue issue) {
         var properties = issue.properties();
-        if (!properties.containsKey("type")) {
+        if (!properties.containsKey("issuetype")) {
             throw new RuntimeException("Unknown type for issue " + issue);
         }
-        var type = properties.get("type");
-        return primaryTypes.contains(type);
+        var type = properties.get("issuetype");
+        return primaryTypes.contains(type.asString());
     }
 
     private final static Pattern majorVersionPattern = Pattern.compile("([0-9]+)(u[0-9]+)?");
 
     /**
@@ -85,29 +86,38 @@
     private List<Issue> findBackports(Issue primary) {
         var links = primary.links();
         return links.stream()
                     .filter(l -> l.issue().isPresent())
                     .map(l -> l.issue().get())
-                    .filter(i -> i.properties().containsKey("type"))
-                    .filter(i -> i.properties().get("type").equals("Backport"))
+                    .filter(i -> i.properties().containsKey("issuetype"))
+                    .filter(i -> i.properties().get("issuetype").asString().equals("Backport"))
                     .collect(Collectors.toList());
     }
 
     private boolean isNonScratchVersion(String version) {
         return !version.startsWith("tbd") && !version.toLowerCase().equals("unknown");
     }
 
+    private Set<String> fixVersions(Issue issue) {
+        if (!issue.properties().containsKey("fixVersions")) {
+            return Set.of();
+        }
+        return issue.properties().get("fixVersions").stream()
+                    .map(JSONValue::asString)
+                    .collect(Collectors.toSet());
+    }
+
     /**
      * Return true if the issue's fixVersionList matches fixVersion.
      *
      * fixVersionsList must contain one entry that is an exact match for fixVersions; any
      * other entries must be scratch values.
      */
     private boolean matchVersion(Issue issue, String fixVersion) {
-        var nonScratch = issue.fixVersions().stream()
-                              .filter(this::isNonScratchVersion)
-                              .collect(Collectors.toList());
+        var nonScratch = fixVersions(issue).stream()
+                                           .filter(this::isNonScratchVersion)
+                                           .collect(Collectors.toList());
         return nonScratch.size() == 1 && nonScratch.get(0).equals(fixVersion);
     }
 
     /**
      * Return true if the issue's fixVersionList is a match for fixVersion, using "-pool" or "-open".
@@ -121,34 +131,41 @@
             return false;
         }
         var poolVersion = majorVersion.get() + "-pool";
         var openVersion = majorVersion.get() + "-open";
 
-        var nonScratch = issue.fixVersions().stream()
-                              .filter(this::isNonScratchVersion)
-                              .collect(Collectors.toList());
+        var nonScratch = fixVersions(issue).stream()
+                                           .filter(this::isNonScratchVersion)
+                                           .collect(Collectors.toList());
         return nonScratch.size() == 1 && (nonScratch.get(0).equals(poolVersion) || nonScratch.get(0).equals(openVersion));
     }
 
     /**
      * Return true if fixVersionList is empty or contains only scratch values.
      */
     private boolean matchScratchVersion(Issue issue) {
-        var nonScratch = issue.fixVersions().stream()
-                              .filter(this::isNonScratchVersion)
-                              .collect(Collectors.toList());
+        var nonScratch = fixVersions(issue).stream()
+                                           .filter(this::isNonScratchVersion)
+                                           .collect(Collectors.toList());
         return nonScratch.size() == 0;
     }
 
+    private final static Set<String> propagatedCustomProperties =
+            Set.of("customfield_10008", "customfield_10000", "customfield_10005");
+
     /**
      * Create a backport of issue.
      */
     private Issue createBackportIssue(Issue primary) {
-        var properties = primary.properties();
-        properties.put("type", "Backport");
+        var filteredProperties = primary.properties().entrySet().stream()
+                .filter(entry -> !entry.getKey().startsWith("customfield_") || propagatedCustomProperties.contains(entry.getKey()))
+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
+
+        var finalProperties = new HashMap<>(filteredProperties);
+        finalProperties.put("issuetype", JSON.of("Backport"));
 
-        var backport = primary.project().createIssue(primary.title(), primary.body().lines().collect(Collectors.toList()), properties);
+        var backport = primary.project().createIssue(primary.title(), primary.body().lines().collect(Collectors.toList()), finalProperties);
 
         var backportLink = Link.create(backport, "backported by").build();
         primary.addLink(backportLink);;
         return backport;
     }
@@ -168,11 +185,11 @@
      * A "scratch" fixVersion is empty, "tbd.*", or "unknown".
      */
     private Issue findIssue(Issue primary, String fixVersion) {
         log.info("Searching for properly versioned issue for primary issue " + primary.id());
         var candidates = Stream.concat(Stream.of(primary), findBackports(primary).stream()).collect(Collectors.toList());
-        candidates.forEach(c -> log.fine("Candidate: " + c.id() + " with versions: " + String.join(",", c.fixVersions())));
+        candidates.forEach(c -> log.fine("Candidate: " + c.id() + " with versions: " + String.join(",", fixVersions(c))));
         var matchingVersionIssue = candidates.stream()
                 .filter(i -> matchVersion(i, fixVersion))
                 .findFirst();
         if (matchingVersionIssue.isPresent()) {
             log.info("Issue " + matchingVersionIssue.get().id() + " has a correct fixVersion");
@@ -262,15 +279,11 @@
                     issue.addLink(linkBuilder.build());
                 }
 
                 if (setFixVersion) {
                     if (requestedVersion != null) {
-                        // Remove any previously set versions (can only be scratch versions)
-                        for (var oldVersion : issue.fixVersions()) {
-                            issue.removeFixVersion(oldVersion);
-                        }
-                        issue.addFixVersion(requestedVersion);
+                        issue.setProperty("fixVersions", JSON.of(requestedVersion));
                     }
                 }
             }
         }
     }
