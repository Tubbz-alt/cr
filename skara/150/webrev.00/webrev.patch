diff a/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java b/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java
@@ -77,11 +77,14 @@
             addedPatchView.render(w);
 
             var rawView = new RawView(out, patch.target().path().get(), newContent);
             rawView.render(w);
         } else {
-            w.write("------ ------ ------ ------ --- --- ----- ");
+            w.write("------ ------ ------ ------ --- --- ");
+
+            var addedPatchView = new AddedPatchView(out, patch.target().path().get(), patch.asBinaryPatch());
+            addedPatchView.render(w);
 
             var rawView = new RawView(out, patch.target().path().get(), binaryContent);
             rawView.render(w);
         }
         w.write("  </code>\n");
diff a/webrev/src/main/java/org/openjdk/skara/webrev/AddedPatchView.java b/webrev/src/main/java/org/openjdk/skara/webrev/AddedPatchView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/AddedPatchView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/AddedPatchView.java
@@ -21,44 +21,81 @@
  * questions.
  */
 package org.openjdk.skara.webrev;
 
 import org.openjdk.skara.vcs.TextualPatch;
+import org.openjdk.skara.vcs.BinaryPatch;
 
 import java.io.*;
 import java.nio.file.*;
 
 class AddedPatchView implements View {
     private final Path out;
     private final Path file;
-    private final TextualPatch patch;
+    private final TextualPatch textualPatch;
+    private final BinaryPatch binaryPatch;
 
     public AddedPatchView(Path out, Path file, TextualPatch patch) {
         this.out = out;
         this.file = file;
-        this.patch = patch;
+        this.textualPatch = patch;
+        this.binaryPatch = null;
     }
 
+    public AddedPatchView(Path out, Path file, BinaryPatch patch) {
+        this.out = out;
+        this.file = file;
+        this.textualPatch = null;
+        this.binaryPatch = patch;
+    }
+
+    @Override
     public void render(Writer w) throws IOException {
         var patchFile = out.resolve(file.toString() + ".patch");
         Files.createDirectories(patchFile.getParent());
 
+        if (binaryPatch != null) {
+            renderBinary(patchFile);
+        } else {
+            renderTextual(patchFile);
+        }
+
+        w.write("<a href=\"");
+        w.write(Webrev.relativeToIndex(out, patchFile));
+        w.write("\">Patch</a>\n");
+    }
+
+    private void renderBinary(Path patchFile) throws IOException {
         try (var fw = Files.newBufferedWriter(patchFile)) {
+            var targetPath = ViewUtils.pathWithUnixSeps(binaryPatch.target().path().get());
             fw.write("diff a/");
-            fw.write(ViewUtils.pathWithUnixSeps(patch.target().path().get()));
+            fw.write(targetPath);
             fw.write(" b/");
-            fw.write(ViewUtils.pathWithUnixSeps(patch.target().path().get()));
+            fw.write(targetPath);
+            fw.write("\n");
+            fw.write("Binary files /dev/null and ");
+            fw.write(targetPath);
+            fw.write(" differ\n");
+        }
+    }
+
+    private void renderTextual(Path patchFile) throws IOException {
+        try (var fw = Files.newBufferedWriter(patchFile)) {
+            fw.write("diff a/");
+            fw.write(ViewUtils.pathWithUnixSeps(textualPatch.target().path().get()));
+            fw.write(" b/");
+            fw.write(ViewUtils.pathWithUnixSeps(textualPatch.target().path().get()));
             fw.write("\n");
             fw.write("--- /dev/null");
             fw.write("\n");
             fw.write("+++ b/");
-            fw.write(ViewUtils.pathWithUnixSeps(patch.target().path().get()));
+            fw.write(ViewUtils.pathWithUnixSeps(textualPatch.target().path().get()));
             fw.write("\n");
 
-            assert patch.hunks().size() == 1;
+            assert textualPatch.hunks().size() == 1;
 
-            var hunk = patch.hunks().get(0);
+            var hunk = textualPatch.hunks().get(0);
 
             assert hunk.source().range().start() == 0;
             assert hunk.source().range().count() == 0;
             assert hunk.source().lines().size() == 0;
 
@@ -76,13 +113,9 @@
                 fw.write("+");
                 fw.write(line);
                 fw.write("\n");
             }
         }
-
-        w.write("<a href=\"");
-        w.write(Webrev.relativeToIndex(out, patchFile));
-        w.write("\">Patch</a>\n");
     }
 }
 
 
diff a/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java b/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
@@ -118,11 +118,14 @@
 
         w.write("  </code>\n");
     }
 
     private void renderBinary(Writer w) throws IOException {
-        w.write("------ ------ ------ ------ --- --- ----- ");
+        w.write("------ ------ ------ ------ --- --- ");
+
+        var patchView = new PatchView(out, patch.target().path().get(), patch.asBinaryPatch());
+        patchView.render(w);
 
         var rawView = new RawView(out, patch.target().path().get(), binaryContent);
         rawView.render(w);
 
         w.write("  </code>\n");
diff a/webrev/src/main/java/org/openjdk/skara/webrev/PatchView.java b/webrev/src/main/java/org/openjdk/skara/webrev/PatchView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/PatchView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/PatchView.java
@@ -21,56 +21,99 @@
  * questions.
  */
 package org.openjdk.skara.webrev;
 
 import org.openjdk.skara.vcs.TextualPatch;
+import org.openjdk.skara.vcs.BinaryPatch;
 
 import java.io.*;
 import java.nio.file.*;
 import java.util.List;
 
 class PatchView implements View {
     private final Path out;
     private final Path file;
-    private final TextualPatch patch;
+    private final TextualPatch textualPatch;
+    private final BinaryPatch binaryPatch;
     private final List<String> sourceContent;
     private final List<String> destContent;
     private static final int NUM_CONTEXT_LINES = 5;
 
     public PatchView(Path out, Path file, TextualPatch patch, List<String> sourceContent, List<String> destContent) {
         this.out = out;
         this.file = file;
-        this.patch = patch;
+        this.textualPatch = patch;
+        this.binaryPatch = null;
         this.sourceContent = sourceContent;
         this.destContent = destContent;
     }
 
+    public PatchView(Path out, Path file, BinaryPatch patch) {
+        this.out = out;
+        this.file = file;
+        this.textualPatch = null;
+        this.binaryPatch = patch;
+        this.sourceContent = null;
+        this.destContent = null;
+    }
+
     private void writeLine(Writer w, String prepend, Line line) throws IOException {
         w.write(prepend);
         w.write(line.text());
         w.write("\n");
     }
 
+    @Override
     public void render(Writer w) throws IOException {
         var patchFile = out.resolve(file.toString() + ".patch");
         Files.createDirectories(patchFile.getParent());
 
+        if (binaryPatch != null) {
+            renderBinary(patchFile);
+        } else {
+            renderTextual(patchFile);
+        }
+
+        w.write("<a href=\"");
+        w.write(Webrev.relativeToIndex(out, patchFile));
+        w.write("\">Patch</a>\n");
+    }
+
+    private void renderBinary(Path patchFile) throws IOException {
         try (var fw = Files.newBufferedWriter(patchFile)) {
+            var sourcePath = ViewUtils.pathWithUnixSeps(binaryPatch.source().path().get());
+            var targetPath = ViewUtils.pathWithUnixSeps(binaryPatch.target().path().get());
             fw.write("diff a/");
-            fw.write(ViewUtils.pathWithUnixSeps(patch.source().path().get()));
+            fw.write(sourcePath);
             fw.write(" b/");
-            fw.write(ViewUtils.pathWithUnixSeps(patch.target().path().get()));
+            fw.write(targetPath);
+            fw.write("\n");
+            fw.write("Binary files ");
+            fw.write(sourcePath);
+            fw.write(" and ");
+            fw.write(targetPath);
+            fw.write(" differ\n");
+        }
+
+    }
+
+    private void renderTextual(Path patchFile) throws IOException {
+        try (var fw = Files.newBufferedWriter(patchFile)) {
+            fw.write("diff a/");
+            fw.write(ViewUtils.pathWithUnixSeps(textualPatch.source().path().get()));
+            fw.write(" b/");
+            fw.write(ViewUtils.pathWithUnixSeps(textualPatch.target().path().get()));
             fw.write("\n");
             fw.write("--- a/");
-            fw.write(ViewUtils.pathWithUnixSeps(patch.source().path().get()));
+            fw.write(ViewUtils.pathWithUnixSeps(textualPatch.source().path().get()));
             fw.write("\n");
             fw.write("+++ b/");
-            fw.write(ViewUtils.pathWithUnixSeps(patch.target().path().get()));
+            fw.write(ViewUtils.pathWithUnixSeps(textualPatch.target().path().get()));
             fw.write("\n");
 
             var coalescer = new HunkCoalescer(NUM_CONTEXT_LINES, sourceContent, destContent);
-            for (var group : coalescer.coalesce(patch.hunks())) {
+            for (var group : coalescer.coalesce(textualPatch.hunks())) {
                 var sourceRange = group.header().source();
                 var destRange = group.header().target();
 
                 fw.write("@@ -");
                 fw.write(String.valueOf(sourceRange.start()));
@@ -97,11 +140,7 @@
                         writeLine(fw, " ", line);
                     }
                 }
             }
         }
-
-        w.write("<a href=\"");
-        w.write(Webrev.relativeToIndex(out, patchFile));
-        w.write("\">Patch</a>\n");
     }
 }
diff a/webrev/src/main/java/org/openjdk/skara/webrev/RemovedFileView.java b/webrev/src/main/java/org/openjdk/skara/webrev/RemovedFileView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/RemovedFileView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/RemovedFileView.java
@@ -70,11 +70,14 @@
             removedPatchView.render(w);
 
             var rawView = new RawView(out, patch.source().path().get(), oldContent);
             rawView.render(w);
         } else {
-            w.write("------ ------ ------ ------ --- --- ----- ");
+            w.write("------ ------ ------ ------ --- --- ");
+
+            var patchView = new RemovedPatchView(out, patch.source().path().get(), patch.asBinaryPatch());
+            patchView.render(w);
 
             var rawView = new RawView(out, patch.source().path().get(), binaryContent);
             rawView.render(w);
         }
 
diff a/webrev/src/main/java/org/openjdk/skara/webrev/RemovedPatchView.java b/webrev/src/main/java/org/openjdk/skara/webrev/RemovedPatchView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/RemovedPatchView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/RemovedPatchView.java
@@ -21,43 +21,81 @@
  * questions.
  */
 package org.openjdk.skara.webrev;
 
 import org.openjdk.skara.vcs.TextualPatch;
+import org.openjdk.skara.vcs.BinaryPatch;
 
 import java.io.*;
 import java.nio.file.*;
 
 class RemovedPatchView implements View {
     private final Path out;
     private final Path file;
-    private final TextualPatch patch;
+    private final TextualPatch textualPatch;
+    private final BinaryPatch binaryPatch;
 
     public RemovedPatchView(Path out, Path file, TextualPatch patch) {
         this.out = out;
         this.file = file;
-        this.patch = patch;
+        this.textualPatch = patch;
+        this.binaryPatch = null;
     }
+
+    public RemovedPatchView(Path out, Path file, BinaryPatch patch) {
+        this.out = out;
+        this.file = file;
+        this.textualPatch = null;
+        this.binaryPatch = patch;
+    }
+
+    @Override
     public void render(Writer w) throws IOException {
         var patchFile = out.resolve(file.toString() + ".patch");
         Files.createDirectories(patchFile.getParent());
 
+        if (binaryPatch != null) {
+            renderBinary(patchFile);
+        } else {
+            renderTextual(patchFile);
+        }
+
+        w.write("<a href=\"");
+        w.write(Webrev.relativeToIndex(out, patchFile));
+        w.write("\">Patch</a>\n");
+    }
+
+    private void renderBinary(Path patchFile) throws IOException {
         try (var fw = Files.newBufferedWriter(patchFile)) {
+            var sourcePath = ViewUtils.pathWithUnixSeps(binaryPatch.source().path().get());
             fw.write("diff a/");
-            fw.write(ViewUtils.pathWithUnixSeps(patch.source().path().get()));
+            fw.write(sourcePath);
             fw.write(" b/");
-            fw.write(ViewUtils.pathWithUnixSeps(patch.source().path().get()));
+            fw.write(sourcePath);
+            fw.write("\n");
+            fw.write("Binary files ");
+            fw.write(sourcePath);
+            fw.write(" and /dev/null differ\n");
+        }
+    }
+
+    private void renderTextual(Path patchFile) throws IOException {
+        try (var fw = Files.newBufferedWriter(patchFile)) {
+            fw.write("diff a/");
+            fw.write(ViewUtils.pathWithUnixSeps(textualPatch.source().path().get()));
+            fw.write(" b/");
+            fw.write(ViewUtils.pathWithUnixSeps(textualPatch.source().path().get()));
             fw.write("\n");
             fw.write("--- a/");
-            fw.write(ViewUtils.pathWithUnixSeps(patch.source().path().get()));
+            fw.write(ViewUtils.pathWithUnixSeps(textualPatch.source().path().get()));
             fw.write("\n");
             fw.write("+++ /dev/null");
             fw.write("\n");
 
-            assert patch.hunks().size() == 1;
+            assert textualPatch.hunks().size() == 1;
 
-            var hunk = patch.hunks().get(0);
+            var hunk = textualPatch.hunks().get(0);
 
             assert hunk.target().range().start() == 0;
             assert hunk.target().range().count() == 0;
             assert hunk.target().lines().size() == 0;
 
@@ -75,12 +113,8 @@
                 fw.write("-");
                 fw.write(line);
                 fw.write("\n");
             }
         }
-
-        w.write("<a href=\"");
-        w.write(Webrev.relativeToIndex(out, patchFile));
-        w.write("\">Patch</a>\n");
     }
 }
 
diff a/webrev/src/test/java/org/openjdk/skara/webrev/WebrevTests.java b/webrev/src/test/java/org/openjdk/skara/webrev/WebrevTests.java
--- a/webrev/src/test/java/org/openjdk/skara/webrev/WebrevTests.java
+++ b/webrev/src/test/java/org/openjdk/skara/webrev/WebrevTests.java
@@ -113,6 +113,64 @@
 
             new Webrev.Builder(repo, webrevFolder.path()).generate(hash1, hash2);
             assertContains(webrevFolder.path().resolve("index.html"), "<td>4 lines changed; 0 ins; 4 del; 0 mod; 1 unchg</td>");
         }
     }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void removeBinaryFile(VCS vcs) throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var repo = Repository.init(tmp.path().resolve("repo"), vcs);
+            var binaryFile = repo.root().resolve("x.jpg");
+            byte[] contents = {0x1, 0x2, 0x3, 0x4, 0x5, 0x0, 0x2, 0x3, 0x4, 0x5};
+            Files.write(binaryFile, contents);
+            repo.add(binaryFile);
+            var hash1 = repo.commit("Added binary file", "a", "a@a.a");
+            repo.remove(binaryFile);
+            var hash2 = repo.commit("Removed binary file", "a", "a@a.a");
+
+            new Webrev.Builder(repo, tmp.path().resolve("webrev")).generate(hash1, hash2);
+        }
+    }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void addBinaryFile(VCS vcs) throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var repo = Repository.init(tmp.path().resolve("repo"), vcs);
+            var readme = repo.root().resolve("README");
+            Files.writeString(readme, "Hello\n");
+            repo.add(readme);
+            var hash1 = repo.commit("Added readme", "a", "a@a");
+
+            var binaryFile = repo.root().resolve("x.jpg");
+            byte[] contents = {0x1, 0x2, 0x3, 0x4, 0x5, 0x0, 0x2, 0x3, 0x4, 0x5};
+            Files.write(binaryFile, contents);
+            repo.add(binaryFile);
+            var hash2 = repo.commit("Added binary file", "a", "a@a.a");
+
+            new Webrev.Builder(repo, tmp.path().resolve("webrev")).generate(hash1, hash2);
+        }
+    }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void modifyBinaryFile(VCS vcs) throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var repo = Repository.init(tmp.path().resolve("repo"), vcs);
+            var readme = repo.root().resolve("README");
+            var binaryFile = repo.root().resolve("x.jpg");
+            byte[] contents = {0x1, 0x2, 0x3, 0x4, 0x5, 0x0, 0x2, 0x3, 0x4, 0x5};
+            Files.write(binaryFile, contents);
+            repo.add(binaryFile);
+            var hash1 = repo.commit("Added binary file", "a", "a@a.a");
+
+            byte[] newContent =  {0x1, 0x2, 0x3, 0x4, 0x5, 0x0, 0x2, 0x3, 0x4, 0x5, 0x6};
+            Files.write(binaryFile, newContent);
+            repo.add(binaryFile);
+            var hash2 = repo.commit("Modified binary file", "a", "a@a.a");
+
+            new Webrev.Builder(repo, tmp.path().resolve("webrev")).generate(hash1, hash2);
+        }
+    }
 }
