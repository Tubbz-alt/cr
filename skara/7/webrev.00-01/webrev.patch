diff a/cli/src/main/java/org/openjdk/skara/cli/GitCredentials.java b/cli/src/main/java/org/openjdk/skara/cli/GitCredentials.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitCredentials.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitCredentials.java
@@ -25,16 +26,18 @@
 import java.nio.charset.StandardCharsets;
 import java.util.concurrent.TimeUnit;
 
 class GitCredentials {
     private final String host;
+    private final String path;
     private final String username;
     private final String password;
     private final String protocol;
 
-    GitCredentials(String host, String username, String password, String protocol) {
+    GitCredentials(String host, String path, String username, String password, String protocol) {
         this.host = host;
+        this.path = path;
         this.username = username;
         this.password = password;
         this.protocol = protocol;
     }
 
@@ -41,10 +43,14 @@
 
     String host() {
         return host;
     }
 
+    String path() {
+        return path;
+    }
+
     String username() {
         return username;
     }
 
     String password() {
@@ -53,11 +59,11 @@
 
     String protocol() {
         return protocol;
     }
 
-    static GitCredentials fill(String host, String username, String password, String protocol) throws IOException {
+    static GitCredentials fill(String host, String path, String username, String password, String protocol) throws IOException {
         try {
             var pb = new ProcessBuilder("git", "credential", "fill");
             pb.redirectInput(ProcessBuilder.Redirect.PIPE);
             pb.redirectOutput(ProcessBuilder.Redirect.PIPE);
             pb.redirectError(ProcessBuilder.Redirect.INHERIT);
@@ -63,10 +69,13 @@
             pb.redirectError(ProcessBuilder.Redirect.INHERIT);
             var p = pb.start();
 
             var gitStdin = p.getOutputStream();
             String input = "host=" + host + "\n";
+            if (path != null) {
+                input += "path=" + path + "\n";
+            }
             if (username != null) {
                 input += "username=" + username + "\n";
             }
             if (password != null) {
                 input += "password=" + password + "\n";
@@ -85,10 +94,11 @@
             }
 
             protocol = null;
             username = null;
             password = null;
+            path = null;
             host = null;
             for (var line : new String(bytes, StandardCharsets.UTF_8).split("\n")) {
                 if (line.startsWith("host=")) {
                     host = line.split("=")[1];
                 } else if (line.startsWith("username=")) {
@@ -96,17 +106,18 @@
                 } else if (line.startsWith("password=")) {
                     password = line.split("=")[1];
                 } else if (line.startsWith("protocol=")) {
                     protocol = line.split("=")[1];
                 } else if (line.startsWith("path=")) {
-                    // ignore for now
+                    String[] parts = line.split("=");
+                    path = parts.length > 1 ? parts[1] : null; // value can be empty
                 } else {
                     throw new IOException("'git credential' returned unexpected line: " + line);
                 }
             }
 
-            return new GitCredentials(host, username, password, protocol);
+            return new GitCredentials(host, path, username, password, protocol);
         } catch (InterruptedException e) {
             throw new IOException(e);
         }
     }
 
@@ -118,10 +129,11 @@
             pb.redirectError(ProcessBuilder.Redirect.INHERIT);
             var p = pb.start();
 
             var gitStdin = p.getOutputStream();
             String input = "host=" + credentials.host() + "\n" +
+                           "path=" + credentials.path() + "\n" +
                            "username=" + credentials.username() + "\n" +
                            "password=" + credentials.password() + "\n" +
                            "protocol=" + credentials.protocol() + "\n";
             gitStdin.write((input + "\n").getBytes(StandardCharsets.UTF_8));
             gitStdin.flush();
@@ -142,10 +154,11 @@
             pb.redirectError(ProcessBuilder.Redirect.INHERIT);
             var p = pb.start();
 
             var gitStdin = p.getOutputStream();
             String input = "host=" + credentials.host() + "\n" +
+                           "path=" + credentials.path() + "\n" +
                            "username=" + credentials.username() + "\n" +
                            "password=" + credentials.password() + "\n" +
                            "protocol=" + credentials.protocol() + "\n";
             gitStdin.write((input + "\n").getBytes(StandardCharsets.UTF_8));
             gitStdin.flush();
diff a/cli/src/main/java/org/openjdk/skara/cli/GitFork.java b/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
@@ -121,15 +122,15 @@
         final var uri = URI.create(arguments.at(0).or(die("No URI for upstream repository provided")).asString());
         if (uri == null) {
             exit("Not a valid URI: " + uri);
         }
         final var hostName = uri.getHost();
+        final var fillPath = uri.getPath();
         final var protocol = uri.getScheme();
         final var token = System.getenv("GIT_TOKEN");
         final var username = arguments.contains("username") ? arguments.get("username").asString() : null;
-        final var credentials = GitCredentials.fill(hostName, username, token, protocol);
+        final var credentials = GitCredentials.fill(hostName, fillPath, username, token, protocol);
 
         if (credentials.password() == null) {
             exit("No token for host " + hostName + " found, use git-credentials or the environment variable GIT_TOKEN");
         }
 
diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -258,11 +258,11 @@
         var remote = arguments.get("remote").orString("origin");
         var remotePullPath = repo.pullPath(remote);
         var username = arguments.contains("username") ? arguments.get("username").asString() : null;
         var token = System.getenv("GIT_TOKEN");
         var uri = toURI(remotePullPath);
-        var credentials = GitCredentials.fill(uri.getHost(), username, token, uri.getScheme());
+        var credentials = GitCredentials.fill(uri.getHost(), uri.getPath(), username, token, uri.getScheme());
         var host = Host.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
 
         var action = arguments.at(0).asString();
         if (action.equals("create")) {
             var currentBranch = repo.currentBranch();
diff a/cli/src/main/java/org/openjdk/skara/cli/GitToken.java b/cli/src/main/java/org/openjdk/skara/cli/GitToken.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitToken.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitToken.java
@@ -76,14 +76,14 @@
 
         var command = arguments.at(0).asString();
         var uri = arguments.at(1).via(URI::create);
 
         if (command.equals("store")) {
-            var credentials = GitCredentials.fill(uri.getHost(), null, null, uri.getScheme());
+            var credentials = GitCredentials.fill(uri.getHost(), uri.getPath(), null, null, uri.getScheme());
             GitCredentials.approve(credentials);
         } else if (command.equals("revoke")) {
-            var credentials = GitCredentials.fill(uri.getHost(), null, null, uri.getScheme());
+            var credentials = GitCredentials.fill(uri.getHost(), uri.getPath(), null, null, uri.getScheme());
             GitCredentials.reject(credentials);
         } else {
             exit("error: unknown command: " + command);
         }
     }
