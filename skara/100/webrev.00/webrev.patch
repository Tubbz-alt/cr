diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunner.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunner.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunner.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunner.java
@@ -77,10 +77,11 @@
             log.log(Level.FINE, "Executing item " + item + " on repository " + scratchPath, TaskPhases.BEGIN);
             try {
                 item.run(scratchPath);
             } catch (RuntimeException e) {
                 log.severe("Exception during item execution (" + item + "): " + e.getMessage());
+                item.handleRuntimeException(e);
                 log.throwing(item.toString(), "run", e);
             } finally {
                 log.log(Level.FINE, "Item " + item + " is now done", TaskPhases.END);
             }
 
diff a/bot/src/main/java/org/openjdk/skara/bot/WorkItem.java b/bot/src/main/java/org/openjdk/skara/bot/WorkItem.java
--- a/bot/src/main/java/org/openjdk/skara/bot/WorkItem.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/WorkItem.java
@@ -32,10 +32,17 @@
      * @return
      */
     boolean concurrentWith(WorkItem other);
 
     /**
-     *  Execute the appropriate tasks with the provided scratch folder.
+     * Execute the appropriate tasks with the provided scratch folder.
      * @param scratchPath
      */
     void run(Path scratchPath);
+
+    /**
+     * The BotRunner will catch <code>RuntimeException</code>s, implementing this method allows a WorkItem to
+     * perform additional cleanup if necessary (avoiding the need for catching and rethrowing the exception).
+     * @param e
+     */
+    default void handleRuntimeException(RuntimeException e) {}
 }
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -42,15 +42,17 @@
 import java.util.stream.Collectors;
 
 class ArchiveWorkItem implements WorkItem {
     private final PullRequest pr;
     private final MailingListBridgeBot bot;
+    private final Consumer<RuntimeException> exceptionConsumer;
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.mlbridge");
 
-    ArchiveWorkItem(PullRequest pr, MailingListBridgeBot bot) {
+    ArchiveWorkItem(PullRequest pr, MailingListBridgeBot bot, Consumer<RuntimeException> exceptionConsumer) {
         this.pr = pr;
         this.bot = bot;
+        this.exceptionConsumer = exceptionConsumer;
     }
 
     @Override
     public String toString() {
         return "ArchiveWorkItem@" + bot.codeRepo().getName() + "#" + pr.getId();
@@ -716,6 +718,11 @@
         var listMails = combineMails(newMails);
         for (var mail : listMails) {
             list.post(mail);
         }
     }
+
+    @Override
+    public void handleRuntimeException(RuntimeException e) {
+        exceptionConsumer.accept(e);
+    }
 }
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
@@ -23,18 +23,15 @@
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.bot.*;
 import org.openjdk.skara.email.EmailAddress;
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.jcheck.JCheckConfiguration;
 
 import java.net.URI;
 import java.nio.file.Path;
-import java.time.ZonedDateTime;
 import java.util.*;
 import java.util.regex.Pattern;
-import java.util.stream.Collectors;
 
 public class MailingListBridgeBot implements Bot {
     private final EmailAddress emailAddress;
     private final HostedRepository codeRepo;
     private final HostedRepository archiveRepo;
@@ -111,11 +108,11 @@
     public List<WorkItem> getPeriodicItems() {
         List<WorkItem> ret = new LinkedList<>();
 
         for (var pr : codeRepo.getPullRequests()) {
             if (updateCache.needsUpdate(pr)) {
-                ret.add(new ArchiveWorkItem(pr, this));
+                ret.add(new ArchiveWorkItem(pr, this, e -> updateCache.invalidate(pr)));
             }
         }
 
         return ret;
     }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
@@ -30,10 +30,11 @@
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.security.*;
 import java.time.*;
 import java.util.*;
+import java.util.function.Consumer;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 class CheckWorkItem implements WorkItem {
@@ -39,19 +40,21 @@
 class CheckWorkItem implements WorkItem {
     private final PullRequest pr;
     private final HostedRepository censusRepo;
     private final String censusRef;
     private final Map<String, String> blockingLabels;
+    private final Consumer<RuntimeException> errorHandler;
 
     private final Pattern metadataComments = Pattern.compile("<!-- (add|remove) contributor");
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
-    CheckWorkItem(PullRequest pr, HostedRepository censusRepo, String censusRef, Map<String, String> blockingLabels) {
+    CheckWorkItem(PullRequest pr, HostedRepository censusRepo, String censusRef, Map<String, String> blockingLabels, Consumer<RuntimeException> errorHandler) {
         this.pr = pr;
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
         this.blockingLabels = blockingLabels;
+        this.errorHandler = errorHandler;
     }
 
     private String encodeReviewer(HostUserDetails reviewer, CensusInstance censusInstance) {
         var census = censusInstance.census();
         var project = censusInstance.project();
@@ -168,6 +171,11 @@
             } catch (IOException e) {
                 throw new UncheckedIOException(e);
             }
         }
     }
+
+    @Override
+    public void handleRuntimeException(RuntimeException e) {
+        errorHandler.accept(e);
+    }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
@@ -26,10 +26,11 @@
 import org.openjdk.skara.host.*;
 
 import java.io.*;
 import java.nio.file.Path;
 import java.util.*;
+import java.util.function.Consumer;
 import java.util.logging.Logger;
 import java.util.regex.*;
 import java.util.stream.*;
 
 public class CommandWorkItem implements WorkItem {
@@ -35,10 +36,11 @@
 public class CommandWorkItem implements WorkItem {
     private final PullRequest pr;
     private final HostedRepository censusRepo;
     private final String censusRef;
     private final Map<String, String> external;
+    private final Consumer<RuntimeException> errorHandler;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
     private final String commandReplyMarker = "<!-- Jmerge command reply message (%s) -->";
     private final Pattern commandReplyPattern = Pattern.compile("<!-- Jmerge command reply message \\((\\S+)\\) -->");
@@ -69,15 +71,16 @@
         public String description() {
             return "shows this text";
         }
     }
 
-    CommandWorkItem(PullRequest pr, HostedRepository censusRepo, String censusRef, Map<String, String> external) {
+    CommandWorkItem(PullRequest pr, HostedRepository censusRepo, String censusRef, Map<String, String> external, Consumer<RuntimeException> errorHandler) {
         this.pr = pr;
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
         this.external = external;
+        this.errorHandler = errorHandler;
 
         if (HelpCommand.external == null) {
             HelpCommand.external = external;
         }
     }
@@ -163,6 +166,11 @@
         var census = CensusInstance.create(censusRepo, censusRef, scratchPath.resolve("census"), pr);
         for (var entry : unprocessedCommands) {
             processCommand(pr, census, scratchPath.resolve("pr"), entry.getKey(), entry.getValue(), comments);
         }
     }
+
+    @Override
+    public void handleRuntimeException(RuntimeException e) {
+        errorHandler.accept(e);
+    }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
@@ -28,10 +28,11 @@
 
 import java.io.*;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.concurrent.*;
+import java.util.function.Consumer;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 public class LabelerWorkItem implements WorkItem {
     private final PullRequest pr;
@@ -35,15 +36,17 @@
 
 public class LabelerWorkItem implements WorkItem {
     private final PullRequest pr;
     private final Map<String, List<Pattern>> labelPatterns;
     private final ConcurrentMap<Hash, Boolean> currentLabels;
+    private final Consumer<RuntimeException> errorHandler;
 
-    LabelerWorkItem(PullRequest pr, Map<String, List<Pattern>> labelPatterns, ConcurrentMap<Hash, Boolean> currentLabels) {
+    LabelerWorkItem(PullRequest pr, Map<String, List<Pattern>> labelPatterns, ConcurrentMap<Hash, Boolean> currentLabels, Consumer<RuntimeException> errorHandler) {
         this.pr = pr;
         this.labelPatterns = labelPatterns;
         this.currentLabels = currentLabels;
+        this.errorHandler = errorHandler;
     }
 
     @Override
     public String toString() {
         return "LabelerWorkItem@" + pr.repository().getName() + "#" + pr.getId();
@@ -105,8 +108,12 @@
 
             this.currentLabels.put(pr.getHeadHash(), Boolean.TRUE);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
+    }
 
+    @Override
+    public void handleRuntimeException(RuntimeException e) {
+        errorHandler.accept(e);
     }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
@@ -101,13 +101,13 @@
             if (updateCache.needsUpdate(pr)) {
                 if (!isReady(pr)) {
                     continue;
                 }
 
-                ret.add(new CheckWorkItem(pr, censusRepo, censusRef, blockingLabels));
-                ret.add(new CommandWorkItem(pr, censusRepo, censusRef, externalCommands));
-                ret.add(new LabelerWorkItem(pr, labelPatterns, currentLabels));
+                ret.add(new CheckWorkItem(pr, censusRepo, censusRef, blockingLabels, e -> updateCache.invalidate(pr)));
+                ret.add(new CommandWorkItem(pr, censusRepo, censusRef, externalCommands, e -> updateCache.invalidate(pr)));
+                ret.add(new LabelerWorkItem(pr, labelPatterns, currentLabels, e -> updateCache.invalidate(pr)));
             }
         }
 
         return ret;
     }
@@ -110,14 +110,10 @@
         }
 
         return ret;
     }
 
-    HostedRepository repository() {
-        return remoteRepo;
-    }
-
     @Override
     public List<WorkItem> getPeriodicItems() {
         return getWorkItems(remoteRepo.getPullRequests());
     }
 
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
@@ -461,6 +461,57 @@
             // The change should now be present on the master branch
             var pushedRepo = Repository.materialize(pushedFolder.path(), author.getUrl(), "master");
             assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));
         }
     }
+
+    @Test
+    void retryOnFailure(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addCommitter(author.host().getCurrentUserDetails().id())
+                                           .addReviewer(integrator.host().getCurrentUserDetails().id());
+            var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.getUrl(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.getUrl(), "refs/heads/edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+
+            // Approve it as another user
+            var approvalPr = integrator.getPullRequest(pr.getId());
+            approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
+
+            // Let the bot check it
+            TestBotRunner.runPeriodicItems(mergeBot);
+
+            // Pre-push to cause a failure
+            localRepo.push(editHash, author.getUrl(), "master");
+
+            // Attempt a merge (without triggering another check)
+            pr.addComment("/integrate");
+            assertThrows(RuntimeException.class, () -> TestBotRunner.runPeriodicItems(mergeBot, wi -> wi instanceof CheckWorkItem));
+
+            // Restore the master branch
+            localRepo.push(masterHash, author.getUrl(), "master", true);
+
+            // The bot should now retry
+            TestBotRunner.runPeriodicItems(mergeBot, wi -> wi instanceof CheckWorkItem);
+
+            // The bot should reply with an ok message
+            var pushed = pr.getComments().stream()
+                           .filter(comment -> comment.body().contains("Pushed as commit"))
+                           .count();
+            assertEquals(1, pushed);
+        }
+    }
 }
diff a/host/src/main/java/org/openjdk/skara/host/PullRequestUpdateCache.java b/host/src/main/java/org/openjdk/skara/host/PullRequestUpdateCache.java
--- a/host/src/main/java/org/openjdk/skara/host/PullRequestUpdateCache.java
+++ b/host/src/main/java/org/openjdk/skara/host/PullRequestUpdateCache.java
@@ -32,21 +32,25 @@
     private final Map<HostedRepository, String> repositoryIds = new HashMap<>();
     private final Map<String, ZonedDateTime> lastUpdates = new HashMap<>();
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.host");
 
-    public boolean needsUpdate(PullRequest pr) {
+    private String getUniqueId(PullRequest pr) {
+        var repo = pr.repository();
+        if (!repositoryIds.containsKey(repo)) {
+            repositoryIds.put(repo, Integer.toString(repositoryIds.size()));
+        }
+        return repositoryIds.get(repo) + ";" + pr.getId();
+    }
+
+    public synchronized boolean needsUpdate(PullRequest pr) {
         // GitLab CE does not update this field on events such as adding an award
         if (pr instanceof GitLabMergeRequest) {
             return true;
         }
 
-        var repo = pr.repository();
-        if (!repositoryIds.containsKey(repo)) {
-            repositoryIds.put(repo, Integer.toString(repositoryIds.size()));
-        }
-        var uniqueId = repositoryIds.get(repo) + ";" + pr.getId();
+        var uniqueId = getUniqueId(pr);
         var update = pr.getUpdated();
 
         if (!lastUpdates.containsKey(uniqueId)) {
             lastUpdates.put(uniqueId, update);
             return true;
@@ -54,9 +58,14 @@
         var lastUpdate = lastUpdates.get(uniqueId);
         if (lastUpdate.isBefore(update)) {
             lastUpdates.put(uniqueId, update);
             return true;
         }
-        log.info("Skipping update for " + repo.getName() + "#" + pr.getId());
+        log.info("Skipping update for " + pr.repository().getName() + "#" + pr.getId());
         return false;
     }
+
+    public synchronized void invalidate(PullRequest pr) {
+        var uniqueId = getUniqueId(pr);
+        lastUpdates.remove(uniqueId);
+    }
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestBotRunner.java b/test/src/main/java/org/openjdk/skara/test/TestBotRunner.java
--- a/test/src/main/java/org/openjdk/skara/test/TestBotRunner.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestBotRunner.java
@@ -27,15 +27,11 @@
 import java.io.IOException;
 import java.util.function.Predicate;
 
 public class TestBotRunner {
     public static void runPeriodicItems(Bot bot) throws IOException {
-        for (var item : bot.getPeriodicItems()) {
-            try (var scratchFolder = new TemporaryDirectory()) {
-                item.run(scratchFolder.path());
-            }
-        }
+        runPeriodicItems(bot, wi -> false);
     }
 
     public static void runPeriodicItems(Bot bot, Predicate<WorkItem> ignored) throws IOException {
         for (var item : bot.getPeriodicItems()) {
             if (!ignored.test(item)) {
@@ -39,10 +35,14 @@
     public static void runPeriodicItems(Bot bot, Predicate<WorkItem> ignored) throws IOException {
         for (var item : bot.getPeriodicItems()) {
             if (!ignored.test(item)) {
                 try (var scratchFolder = new TemporaryDirectory()) {
                     item.run(scratchFolder.path());
+                } catch (RuntimeException e) {
+                    item.handleRuntimeException(e);
+                    // Allow tests to assert on these as well
+                    throw e;
                 }
             }
         }
     }
 }
