diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
@@ -28,10 +28,11 @@
 
 import java.io.*;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.concurrent.*;
+import java.util.function.Consumer;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 public class LabelerWorkItem implements WorkItem {
     private final PullRequest pr;
@@ -35,15 +36,17 @@
 
 public class LabelerWorkItem implements WorkItem {
     private final PullRequest pr;
     private final Map<String, List<Pattern>> labelPatterns;
     private final ConcurrentMap<Hash, Boolean> currentLabels;
+    private final Consumer<RuntimeException> errorHandler;
 
-    LabelerWorkItem(PullRequest pr, Map<String, List<Pattern>> labelPatterns, ConcurrentMap<Hash, Boolean> currentLabels) {
+    LabelerWorkItem(PullRequest pr, Map<String, List<Pattern>> labelPatterns, ConcurrentMap<Hash, Boolean> currentLabels, Consumer<RuntimeException> errorHandler) {
         this.pr = pr;
         this.labelPatterns = labelPatterns;
         this.currentLabels = currentLabels;
+        this.errorHandler = errorHandler;
     }
 
     @Override
     public String toString() {
         return "LabelerWorkItem@" + pr.repository().getName() + "#" + pr.getId();
@@ -105,8 +108,12 @@
 
             this.currentLabels.put(pr.getHeadHash(), Boolean.TRUE);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
+    }
 
+    @Override
+    public void handleRuntimeException(RuntimeException e) {
+        errorHandler.accept(e);
     }
 }
