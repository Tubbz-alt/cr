diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
@@ -26,10 +26,11 @@
 import org.openjdk.skara.host.*;
 
 import java.io.*;
 import java.nio.file.Path;
 import java.util.*;
+import java.util.function.Consumer;
 import java.util.logging.Logger;
 import java.util.regex.*;
 import java.util.stream.*;
 
 public class CommandWorkItem implements WorkItem {
@@ -35,10 +36,11 @@
 public class CommandWorkItem implements WorkItem {
     private final PullRequest pr;
     private final HostedRepository censusRepo;
     private final String censusRef;
     private final Map<String, String> external;
+    private final Consumer<RuntimeException> errorHandler;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
     private final String commandReplyMarker = "<!-- Jmerge command reply message (%s) -->";
     private final Pattern commandReplyPattern = Pattern.compile("<!-- Jmerge command reply message \\((\\S+)\\) -->");
@@ -69,15 +71,16 @@
         public String description() {
             return "shows this text";
         }
     }
 
-    CommandWorkItem(PullRequest pr, HostedRepository censusRepo, String censusRef, Map<String, String> external) {
+    CommandWorkItem(PullRequest pr, HostedRepository censusRepo, String censusRef, Map<String, String> external, Consumer<RuntimeException> errorHandler) {
         this.pr = pr;
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
         this.external = external;
+        this.errorHandler = errorHandler;
 
         if (HelpCommand.external == null) {
             HelpCommand.external = external;
         }
     }
@@ -163,6 +166,11 @@
         var census = CensusInstance.create(censusRepo, censusRef, scratchPath.resolve("census"), pr);
         for (var entry : unprocessedCommands) {
             processCommand(pr, census, scratchPath.resolve("pr"), entry.getKey(), entry.getValue(), comments);
         }
     }
+
+    @Override
+    public void handleRuntimeException(RuntimeException e) {
+        errorHandler.accept(e);
+    }
 }
