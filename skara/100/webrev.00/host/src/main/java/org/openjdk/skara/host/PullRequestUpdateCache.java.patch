diff a/host/src/main/java/org/openjdk/skara/host/PullRequestUpdateCache.java b/host/src/main/java/org/openjdk/skara/host/PullRequestUpdateCache.java
--- a/host/src/main/java/org/openjdk/skara/host/PullRequestUpdateCache.java
+++ b/host/src/main/java/org/openjdk/skara/host/PullRequestUpdateCache.java
@@ -32,21 +32,25 @@
     private final Map<HostedRepository, String> repositoryIds = new HashMap<>();
     private final Map<String, ZonedDateTime> lastUpdates = new HashMap<>();
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.host");
 
-    public boolean needsUpdate(PullRequest pr) {
+    private String getUniqueId(PullRequest pr) {
+        var repo = pr.repository();
+        if (!repositoryIds.containsKey(repo)) {
+            repositoryIds.put(repo, Integer.toString(repositoryIds.size()));
+        }
+        return repositoryIds.get(repo) + ";" + pr.getId();
+    }
+
+    public synchronized boolean needsUpdate(PullRequest pr) {
         // GitLab CE does not update this field on events such as adding an award
         if (pr instanceof GitLabMergeRequest) {
             return true;
         }
 
-        var repo = pr.repository();
-        if (!repositoryIds.containsKey(repo)) {
-            repositoryIds.put(repo, Integer.toString(repositoryIds.size()));
-        }
-        var uniqueId = repositoryIds.get(repo) + ";" + pr.getId();
+        var uniqueId = getUniqueId(pr);
         var update = pr.getUpdated();
 
         if (!lastUpdates.containsKey(uniqueId)) {
             lastUpdates.put(uniqueId, update);
             return true;
@@ -54,9 +58,14 @@
         var lastUpdate = lastUpdates.get(uniqueId);
         if (lastUpdate.isBefore(update)) {
             lastUpdates.put(uniqueId, update);
             return true;
         }
-        log.info("Skipping update for " + repo.getName() + "#" + pr.getId());
+        log.info("Skipping update for " + pr.repository().getName() + "#" + pr.getId());
         return false;
     }
+
+    public synchronized void invalidate(PullRequest pr) {
+        var uniqueId = getUniqueId(pr);
+        lastUpdates.remove(uniqueId);
+    }
 }
