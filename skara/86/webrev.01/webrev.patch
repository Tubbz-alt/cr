diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
@@ -83,11 +83,11 @@
             }
             generate(prInstance, outputFolder, base, head);
             if (!localStorage.isClean()) {
                 push(localStorage, outputFolder);
             }
-            return URIBuilder.base(baseUri).appendPath(relativeFolder.toString()).build();
+            return URIBuilder.base(baseUri).appendPath(relativeFolder.toString().replace('\\', '/')).build();
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 }
diff a/buildSrc/module/src/main/java/org/openjdk/skara/gradle/module/ModulePlugin.java b/buildSrc/module/src/main/java/org/openjdk/skara/gradle/module/ModulePlugin.java
--- a/buildSrc/module/src/main/java/org/openjdk/skara/gradle/module/ModulePlugin.java
+++ b/buildSrc/module/src/main/java/org/openjdk/skara/gradle/module/ModulePlugin.java
@@ -101,10 +101,11 @@
                         var outputDir = testSourceSet.getJava().getOutputDir().toString();
                         var classpath = testTask.getClasspath().getAsPath();
 
                         var jvmArgs = new ArrayList<String>(testTask.getJvmArgs());
                         jvmArgs.addAll(List.of(
+                                "-Djunit.jupiter.extensions.autodetection.enabled=true",
                                 "--module-path", classpath,
                                 "--add-modules", "ALL-MODULE-PATH",
                                 "--patch-module", moduleName + "=" + outputDir,
                                 "--illegal-access=deny"
                         ));
diff a/test/src/main/java/module-info.java b/test/src/main/java/module-info.java
--- a/test/src/main/java/module-info.java
+++ b/test/src/main/java/module-info.java
@@ -34,7 +34,10 @@
     requires org.openjdk.skara.proxy;
 
     requires org.junit.jupiter.api;
 
     exports org.openjdk.skara.test;
+
+    provides org.junit.jupiter.api.extension.Extension
+        with org.openjdk.skara.test.DisableAllBotsTestsOnWindows;
 }
 
diff a/test/src/main/java/org/openjdk/skara/test/DisableAllBotsTestsOnWindows.java b/test/src/main/java/org/openjdk/skara/test/DisableAllBotsTestsOnWindows.java
--- /dev/null
+++ b/test/src/main/java/org/openjdk/skara/test/DisableAllBotsTestsOnWindows.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.test;
+
+import static org.junit.jupiter.api.extension.ConditionEvaluationResult.disabled;
+import static org.junit.jupiter.api.extension.ConditionEvaluationResult.enabled;
+
+import org.junit.jupiter.api.condition.OS;
+import org.junit.jupiter.api.extension.ConditionEvaluationResult;
+import org.junit.jupiter.api.extension.ExecutionCondition;
+import org.junit.jupiter.api.extension.ExtensionContext;
+
+public class DisableAllBotsTestsOnWindows implements ExecutionCondition {
+    @Override
+    public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {
+        if (!OS.WINDOWS.isCurrentOs()) {
+            return enabled("Non-Windows OS");
+        }
+        var test = context.getRequiredTestClass();
+        var bots = test.getPackageName().startsWith("org.openjdk.skara.bots.");
+        return bots ? disabled("All bots tests are disabled on Windows") : enabled("Non-bots test");
+    }
+}
