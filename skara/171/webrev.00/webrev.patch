diff a/bot/src/main/java/org/openjdk/skara/bot/BotConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotConfiguration.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bot;
 
-import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.host.*;
 import org.openjdk.skara.json.JSONObject;
 
 import java.nio.file.Path;
 
 public interface BotConfiguration {
@@ -39,10 +39,17 @@
      * @param name
      * @return
      */
     HostedRepository repository(String name);
 
+    /**
+     * Configuration-specific name mapped to a IssueProject.
+     * @param name
+     * @return
+     */
+    IssueProject issueProject(String name);
+
     /**
      * Retrieves the ref name that optionally follows the configuration-specific repository name.
      * If not configured, returns the name of the VCS default branch.
      * @param name
      * @return
diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
@@ -147,10 +147,25 @@
         }
 
         return ret;
     }
 
+    private IssueProject parseIssueProjectEntry(String entry) throws ConfigurationError {
+        var hostSeparatorIndex = entry.indexOf('/');
+        if (hostSeparatorIndex >= 0) {
+            var hostName = entry.substring(0, hostSeparatorIndex);
+            var host = hosts.get(hostName);
+            if (!hosts.containsKey(hostName)) {
+                throw new ConfigurationError("Issue project entry " + entry + " uses undefined host '" + hostName + "'");
+            }
+            var issueProjectName = entry.substring(hostSeparatorIndex + 1);
+            return host.getIssueProject(issueProjectName);
+        } else {
+            throw new ConfigurationError("Malformed issue project entry");
+        }
+    }
+
     public static BotRunnerConfiguration parse(JSONObject config, Path cwd) throws ConfigurationError {
         return new BotRunnerConfiguration(config, cwd);
     }
 
     public static BotRunnerConfiguration parse(JSONObject config) throws ConfigurationError {
@@ -181,10 +196,19 @@
                     var entry = parseRepositoryEntry(name);
                     return entry.repository;
                 } catch (ConfigurationError configurationError) {
                     throw new RuntimeException("Couldn't find repository with name: " + name, configurationError);
                 }
+            }
+
+            @Override
+            public IssueProject issueProject(String name) {
+                try {
+                    return parseIssueProjectEntry(name);
+                } catch (ConfigurationError configurationError) {
+                    throw new RuntimeException("Couldn't find issue project with name: " + name, configurationError);
+                }
             }
 
             @Override
             public String repositoryRef(String name) {
                 try {
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.vcs.openjdk.Issue;
 
 import java.io.IOException;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
@@ -39,35 +40,38 @@
     private final List<Review> allReviews;
     private final List<Review> activeReviews;
     private final Set<String> labels;
     private final CensusInstance censusInstance;
     private final Map<String, String> blockingLabels;
+    private final IssueProject issueProject;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
     private final String progressMarker = "<!-- Anything below this marker will be automatically updated, please do not edit manually! -->";
     private final String mergeReadyMarker = "<!-- PullRequestBot merge is ready comment -->";
     private final Pattern mergeSourcePattern = Pattern.compile("^Merge ([-/\\w]+):([-\\w]+$)");
     private final Set<String> newLabels;
 
     private CheckRun(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
                      List<Review> allReviews, List<Review> activeReviews, Set<String> labels,
-                     CensusInstance censusInstance, Map<String, String> blockingLabels) {
+                     CensusInstance censusInstance, Map<String, String> blockingLabels, IssueProject issueProject) {
         this.workItem = workItem;
         this.pr = pr;
         this.prInstance = prInstance;
         this.comments = comments;
         this.allReviews = allReviews;
         this.activeReviews = activeReviews;
         this.labels = new HashSet<>(labels);
         this.newLabels = new HashSet<>(labels);
         this.censusInstance = censusInstance;
         this.blockingLabels = blockingLabels;
+        this.issueProject = issueProject;
     }
 
     static void execute(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
-                        List<Review> allReviews, List<Review> activeReviews, Set<String> labels, CensusInstance censusInstance, Map<String, String> blockingLabels) {
-        var run = new CheckRun(workItem, pr, prInstance, comments, allReviews, activeReviews, labels, censusInstance, blockingLabels);
+                        List<Review> allReviews, List<Review> activeReviews, Set<String> labels, CensusInstance censusInstance, Map<String, String> blockingLabels,
+                        IssueProject issueProject) {
+        var run = new CheckRun(workItem, pr, prInstance, comments, allReviews, activeReviews, labels, censusInstance, blockingLabels, issueProject);
         run.checkStatus();
     }
 
     // For unknown contributors, check that all commits have the same name and email
     private boolean checkCommitAuthor(List<Commit> commits) throws IOException {
@@ -246,16 +250,36 @@
         } else {
             return Optional.empty();
         }
     }
 
-    private String getStatusMessage(List<Review> reviews, PullRequestCheckIssueVisitor visitor) throws IOException {
+    private String getStatusMessage(List<Review> reviews, PullRequestCheckIssueVisitor visitor) {
         var progressBody = new StringBuilder();
         progressBody.append("Progress\n");
         progressBody.append("--------\n");
-
         progressBody.append(getChecksList(visitor));
+
+        var issue = Issue.fromString(pr.getTitle());
+        if (issueProject != null && issue.isPresent()) {
+            progressBody.append("\n\nIssue\n");
+            progressBody.append("--------\n");
+            var iss = issueProject.getIssue(issue.get().id());
+            if (iss.isPresent()) {
+                progressBody.append("[");
+                progressBody.append(iss.get().getId());
+                progressBody.append("](");
+                progressBody.append(iss.get().getWebUrl());
+                progressBody.append("]: ");
+                progressBody.append(iss.get().getTitle());
+                progressBody.append("\n");
+            } else {
+                progressBody.append("⚠️ Failed to retrieve information on issue `");
+                progressBody.append(issue.get().toString());
+                progressBody.append("`.\n");
+            }
+        }
+
         getReviewersList(reviews).ifPresent(reviewers -> {
             progressBody.append("\n\nApprovers\n");
             progressBody.append("---------\n");
             progressBody.append(reviewers);
         });
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
@@ -38,19 +38,22 @@
 
 class CheckWorkItem extends PullRequestWorkItem {
     private final HostedRepository censusRepo;
     private final String censusRef;
     private final Map<String, String> blockingLabels;
+    private final IssueProject issueProject;
 
     private final Pattern metadataComments = Pattern.compile("<!-- (?:(add|remove) contributor)|(?:summary: ')");
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
-    CheckWorkItem(PullRequest pr, HostedRepository censusRepo, String censusRef, Map<String, String> blockingLabels, Consumer<RuntimeException> errorHandler) {
+    CheckWorkItem(PullRequest pr, HostedRepository censusRepo, String censusRef, Map<String, String> blockingLabels,
+                  Consumer<RuntimeException> errorHandler, IssueProject issueProject) {
         super(pr, errorHandler);
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
         this.blockingLabels = blockingLabels;
+        this.issueProject = issueProject;
     }
 
     private String encodeReviewer(HostUserDetails reviewer, CensusInstance censusInstance) {
         var census = censusInstance.census();
         var project = censusInstance.project();
@@ -151,11 +154,12 @@
                 return;
             }
 
             try {
                 var prInstance = new PullRequestInstance(scratchPath.resolve("pr"), pr);
-                CheckRun.execute(this, pr, prInstance, comments, allReviews, activeReviews, labels, census, blockingLabels);
+                CheckRun.execute(this, pr, prInstance, comments, allReviews, activeReviews, labels, census,
+                                 blockingLabels, issueProject);
             } catch (IOException e) {
                 throw new UncheckedIOException(e);
             }
         }
     }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
@@ -39,31 +39,40 @@
     private final Map<String, List<Pattern>> labelPatterns;
     private final Map<String, String> externalCommands;
     private final Map<String, String> blockingLabels;
     private final Set<String> readyLabels;
     private final Map<String, Pattern> readyComments;
+    private final IssueProject issueProject;
     private final ConcurrentMap<Hash, Boolean> currentLabels = new ConcurrentHashMap<>();
     private final PullRequestUpdateCache updateCache;
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
     PullRequestBot(HostedRepository repo, HostedRepository censusRepo, String censusRef,
                    Map<String, List<Pattern>> labelPatterns, Map<String, String> externalCommands,
                    Map<String, String> blockingLabels, Set<String> readyLabels,
-                   Map<String, Pattern> readyComments) {
+                   Map<String, Pattern> readyComments, IssueProject issueProject) {
         remoteRepo = repo;
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
         this.labelPatterns = labelPatterns;
         this.externalCommands = externalCommands;
         this.blockingLabels = blockingLabels;
         this.readyLabels = readyLabels;
+        this.issueProject = issueProject;
         this.readyComments = readyComments;
         this.updateCache = new PullRequestUpdateCache();
     }
 
+    PullRequestBot(HostedRepository repo, HostedRepository censusRepo, String censusRef,
+                   Map<String, List<Pattern>> labelPatterns, Map<String, String> externalCommands,
+                   Map<String, String> blockingLabels, Set<String> readyLabels,
+                   Map<String, Pattern> readyComments) {
+        this(repo, censusRepo, censusRef, labelPatterns, externalCommands, blockingLabels, readyLabels, readyComments, null);
+    }
+
     PullRequestBot(HostedRepository repo, HostedRepository censusRepo, String censusRef) {
-        this(repo, censusRepo, censusRef, Map.of(), Map.of(), Map.of(), Set.of(), Map.of());
+        this(repo, censusRepo, censusRef, Map.of(), Map.of(), Map.of(), Set.of(), Map.of(), null);
     }
 
     private boolean isReady(PullRequest pr) {
         var labels = new HashSet<>(pr.getLabels());
         for (var readyLabel : readyLabels) {
@@ -101,11 +110,11 @@
             if (updateCache.needsUpdate(pr)) {
                 if (!isReady(pr)) {
                     continue;
                 }
 
-                ret.add(new CheckWorkItem(pr, censusRepo, censusRef, blockingLabels, e -> updateCache.invalidate(pr)));
+                ret.add(new CheckWorkItem(pr, censusRepo, censusRef, blockingLabels, e -> updateCache.invalidate(pr), issueProject));
                 ret.add(new CommandWorkItem(pr, censusRepo, censusRef, externalCommands, e -> updateCache.invalidate(pr)));
                 ret.add(new LabelerWorkItem(pr, labelPatterns, currentLabels, e -> updateCache.invalidate(pr)));
             }
         }
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
@@ -74,12 +74,15 @@
                                         .map(Pattern::compile)
                                         .collect(Collectors.toList());
                     labelPatterns.put(label.name(), patterns);
                 }
             }
+            var issueProject = repo.value().contains("issues") ?
+                    configuration.issueProject(repo.value().get("issues").asString()) :
+                    null;
             var bot = new PullRequestBot(configuration.repository(repo.name()), censusRepo, censusRef, labelPatterns,
-                                         external, blockers, readyLabels, readyComments);
+                                         external, blockers, readyLabels, readyComments, issueProject);
             ret.add(bot);
         }
 
         return ret;
     }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -778,6 +778,73 @@
             assertEquals(1, checks.size());
             check = checks.get("jcheck");
             assertEquals(CheckStatus.SUCCESS, check.status());
         }
     }
+
+    @Test
+    void issueInSummary(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var reviewer = credentials.getHostedRepository();
+            var issues = credentials.getIssueProject();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.host().getCurrentUserDetails().id())
+                                           .addReviewer(reviewer.host().getCurrentUserDetails().id());
+            var checkBot = new PullRequestBot(author, censusBuilder.build(), "master", Map.of(), Map.of(),
+                                              Map.of(), Set.of(), Map.of(), issues);
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType(), Path.of("appendable.txt"),
+                                                     Set.of("issues"));
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            localRepo.push(masterHash, author.getUrl(), "master", true);
+
+            var issue1 = issues.createIssue("My first issue", List.of("Hello"));
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.getUrl(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", issue1.getId() + ": This is a pull request");
+
+            // Check the status
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // The check should be successful
+            var checks = pr.getChecks(editHash);
+            assertEquals(1, checks.size());
+            var check = checks.get("jcheck");
+            assertEquals(CheckStatus.SUCCESS, check.status());
+
+            // And the body should contain the issue title
+            assertTrue(pr.getBody().contains("My first issue"));
+
+            // Change the issue
+            var issue2 = issues.createIssue("My second issue", List.of("Body"));
+            pr.setTitle(issue2.getId() + ": This is a pull request");
+
+            // Check the status again
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // The body should contain the updated issue title
+            assertFalse(pr.getBody().contains("My first issue"));
+            assertTrue(pr.getBody().contains("My second issue"));
+
+            // Now enter an invalid issue id
+            pr.setTitle("2384848: This is a pull request");
+
+            // Check the status again
+            TestBotRunner.runPeriodicItems(checkBot);
+            assertFalse(pr.getBody().contains("My first issue"));
+            assertFalse(pr.getBody().contains("My second issue"));
+            assertTrue(pr.getBody().contains("Failed to retrieve"));
+
+            // The check should still be successful though
+            checks = pr.getChecks(editHash);
+            assertEquals(1, checks.size());
+            check = checks.get("jcheck");
+            assertEquals(CheckStatus.SUCCESS, check.status());
+        }
+    }
 }
diff a/host/src/main/java/org/openjdk/skara/host/IssueProject.java b/host/src/main/java/org/openjdk/skara/host/IssueProject.java
--- a/host/src/main/java/org/openjdk/skara/host/IssueProject.java
+++ b/host/src/main/java/org/openjdk/skara/host/IssueProject.java
@@ -21,14 +21,14 @@
  * questions.
  */
 package org.openjdk.skara.host;
 
 import java.net.URI;
-import java.util.List;
+import java.util.*;
 
 public interface IssueProject {
     Host host();
     URI getWebUrl();
     Issue createIssue(String title, List<String> body);
-    Issue getIssue(String id);
+    Optional<Issue> getIssue(String id);
     List<Issue> getIssues();
 }
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
@@ -76,11 +76,11 @@
     public Issue createIssue(String title, List<String> body) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public Issue getIssue(String id) {
+    public Optional<Issue> getIssue(String id) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
     public List<Issue> getIssues() {
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java
+++ b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java
@@ -69,11 +69,11 @@
     public Issue createIssue(String title, List<String> body) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public Issue getIssue(String id) {
+    public Optional<Issue> getIssue(String id) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
     public List<Issue> getIssues() {
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -162,10 +162,13 @@
         return issue;
     }
 
     TestIssue getIssue(TestIssueProject issueProject, String id) {
         var original = data.issues.get(id);
+        if (original == null) {
+            return null;
+        }
         return TestIssue.createFrom(issueProject, original);
     }
 
     List<TestIssue> getIssues(TestIssueProject issueProject) {
         return data.issues.entrySet().stream()
diff a/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java b/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
@@ -51,12 +51,12 @@
     public Issue createIssue(String title, List<String> body) {
         return host.createIssue(this, title, body);
     }
 
     @Override
-    public Issue getIssue(String id) {
-        return host.getIssue(this, id);
+    public Optional<Issue> getIssue(String id) {
+        return Optional.ofNullable(host.getIssue(this, id));
     }
 
     @Override
     public List<Issue> getIssues() {
         return new ArrayList<>(host.getIssues(this));
