diff a/bots/bridgekeeper/src/main/java/org/openjdk/skara/bots/bridgekeeper/PullRequestCloserBot.java b/bots/bridgekeeper/src/main/java/org/openjdk/skara/bots/bridgekeeper/PullRequestCloserBot.java
--- a/bots/bridgekeeper/src/main/java/org/openjdk/skara/bots/bridgekeeper/PullRequestCloserBot.java
+++ b/bots/bridgekeeper/src/main/java/org/openjdk/skara/bots/bridgekeeper/PullRequestCloserBot.java
@@ -54,11 +54,11 @@
         if (!welcomePosted) {
             var message = "Welcome to the OpenJDK organization on GitHub!\n\n" +
                     "This repository is currently a read-only git mirror of the official Mercurial " +
                     "repository (located at https://hg.openjdk.java.net/). As such, we are not " +
                     "currently accepting pull requests here. If you would like to contribute to " +
-                    "the OpenJDK project, please see http://openjdk.java.net/contribute/ on how " +
+                    "the OpenJDK project, please see https://openjdk.java.net/contribute/ on how " +
                     "to proceed.\n\n" +
                     "This pull request will be automatically closed.";
 
             log.fine("Posting welcome message");
             pr.addComment(welcomeMarker + "\n\n" + message);
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -400,17 +400,17 @@
 
         if (!ProjectPermissions.mayCommit(censusInstance, pr.author())) {
             message.append("\n");
             var contributor = censusInstance.namespace().get(pr.author().id());
             if (contributor == null) {
-                message.append("As you are not a known OpenJDK [Author](http://openjdk.java.net/bylaws#author), ");
+                message.append("As you are not a known OpenJDK [Author](https://openjdk.java.net/bylaws#author), ");
             } else {
                 message.append("As you do not have Committer status in this project, ");
             }
 
-            message.append("an existing [Committer](http://openjdk.java.net/bylaws#committer) must agree to ");
-            message.append("[sponsor](http://openjdk.java.net/sponsor/) your change. ");
+            message.append("an existing [Committer](https://openjdk.java.net/bylaws#committer) must agree to ");
+            message.append("[sponsor](https://openjdk.java.net/sponsor/) your change. ");
             var candidates = reviews.stream()
                                     .filter(review -> ProjectPermissions.mayCommit(censusInstance, review.reviewer()))
                                     .map(review -> "@" + review.reviewer().userName())
                                     .collect(Collectors.joining(", "));
             if (candidates.length() > 0) {
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/RejectCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/RejectCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/RejectCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/RejectCommand.java
@@ -35,11 +35,11 @@
         if (pr.author().equals(comment.author())) {
             reply.println("You can't reject your own changes.");
             return;
         }
         if (!ProjectPermissions.mayReview(censusInstance, comment.author())) {
-            reply.println("Only [Reviewers](http://openjdk.java.net/bylaws#reviewer) are allowed to reject changes.");
+            reply.println("Only [Reviewers](https://openjdk.java.net/bylaws#reviewer) are allowed to reject changes.");
             return;
         }
 
         var botUser = pr.repository().forge().currentUser();
         var vetoers = Veto.vetoers(botUser, allComments);
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
@@ -40,11 +40,11 @@
         if (ProjectPermissions.mayCommit(censusInstance, pr.author())) {
             reply.println("This change does not need sponsoring - the author is allowed to integrate it.");
             return;
         }
         if (!ProjectPermissions.mayCommit(censusInstance, comment.author())) {
-            reply.println("Only [Committers](http://openjdk.java.net/bylaws#committer) are allowed to sponsor changes.");
+            reply.println("Only [Committers](https://openjdk.java.net/bylaws#committer) are allowed to sponsor changes.");
             return;
         }
 
         var readyHash = ReadyForSponsorTracker.latestReadyForSponsor(pr.repository().forge().currentUser(), allComments);
         if (readyHash.isEmpty()) {
