diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.host.github;
 
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.host.network.*;
+import org.openjdk.skara.host.network.RestRequest;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.vcs.Hash;
 
 import java.net.URI;
 import java.time.*;
@@ -109,11 +109,11 @@
         request.post("pulls/" + json.get("number").toString() + "/reviews")
                .body(query)
                .execute();
     }
 
-    private ReviewComment parseReviewComment(ReviewComment parent, JSONObject json) {
+    private ReviewComment parseReviewComment(ReviewComment parent, JSONObject json, PositionMapper diff) {
         var author = host.parseUserDetails(json);
         var threadId = parent == null ? json.get("id").toString() : parent.threadId();
         var comment = new ReviewComment(parent,
                                         threadId,
                                         new Hash(json.get("commit_id").asString()),
@@ -116,11 +116,11 @@
         var threadId = parent == null ? json.get("id").toString() : parent.threadId();
         var comment = new ReviewComment(parent,
                                         threadId,
                                         new Hash(json.get("commit_id").asString()),
                                         json.get("path").asString(),
-                                        json.get("original_position").asInt(),  // FIXME: This is not the line
+                                        diff.positionToLine(json.get("path").asString(), json.get("original_position").asInt()),
                                         json.get("id").toString(),
                                         json.get("body").asString(),
                                         author,
                                         ZonedDateTime.parse(json.get("created_at").asString()),
                                         ZonedDateTime.parse(json.get("updated_at").asString()));
@@ -126,23 +127,33 @@
         return comment;
     }
 
     @Override
     public ReviewComment addReviewComment(Hash base, Hash hash, String path, int line, String body) {
+        var rawDiff = request.get("pulls/" + json.get("number").toString())
+                             .header("Accept", "application/vnd.github.v3.diff")
+                             .executeUnparsed();
+        var diff = PositionMapper.parse(rawDiff);
+
         var query = JSON.object()
                 .put("body", body)
                 .put("commit_id", hash.hex())
                 .put("path", path)
-                .put("position", line);
+                .put("position", diff.lineToPosition(path, line));
         var response = request.post("pulls/" + json.get("number").toString() + "/comments")
                 .body(query)
                 .execute();
-        return parseReviewComment(null, response.asObject());
+        return parseReviewComment(null, response.asObject(), diff);
     }
 
     @Override
     public ReviewComment addReviewCommentReply(ReviewComment parent, String body) {
+        var rawDiff = request.get("pulls/" + json.get("number").toString())
+                             .header("Accept", "application/vnd.github.v3.diff")
+                             .executeUnparsed();
+        var diff = PositionMapper.parse(rawDiff);
+
         var query = JSON.object()
                         .put("body", body)
                 .put("in_reply_to", Integer.parseInt(parent.threadId()));
         var response = request.post("pulls/" + json.get("number").toString() + "/comments")
                 .body(query)
@@ -146,14 +156,20 @@
                         .put("body", body)
                 .put("in_reply_to", Integer.parseInt(parent.threadId()));
         var response = request.post("pulls/" + json.get("number").toString() + "/comments")
                 .body(query)
                 .execute();
-        return parseReviewComment(parent, response.asObject());
+        return parseReviewComment(parent, response.asObject(), diff);
     }
 
     @Override
     public List<ReviewComment> getReviewComments() {
+        var rawDiff = request.get("pulls/" + json.get("number").toString())
+                          .header("Accept", "application/vnd.github.v3.diff")
+                          .executeUnparsed();
+        var diff = PositionMapper.parse(rawDiff);
+
         var ret = new ArrayList<ReviewComment>();
         var reviewComments = request.get("pulls/" + json.get("number").toString() + "/comments").execute().stream()
                                     .map(JSONValue::asObject)
                                     .collect(Collectors.toList());
         var idToComment = new HashMap<String, ReviewComment>();
@@ -162,11 +177,11 @@
         for (var reviewComment : reviewComments) {
             ReviewComment parent = null;
             if (reviewComment.contains("in_reply_to_id")) {
                 parent = idToComment.get(reviewComment.get("in_reply_to_id").toString());
             }
-            var comment = parseReviewComment(parent, reviewComment);
+            var comment = parseReviewComment(parent, reviewComment, diff);
             idToComment.put(comment.id(), comment);
             ret.add(comment);
         }
 
         return ret;
