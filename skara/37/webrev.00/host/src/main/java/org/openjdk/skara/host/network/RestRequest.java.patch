diff a/host/src/main/java/org/openjdk/skara/host/network/RestRequest.java b/host/src/main/java/org/openjdk/skara/host/network/RestRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/network/RestRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/network/RestRequest.java
@@ -61,10 +61,11 @@
         private final RequestType queryType;
         private final String endpoint;
 
         private final List<Param> params = new ArrayList<>();
         private final List<Param> bodyParams = new ArrayList<>();
+        private final Map<String, String> headers = new HashMap<>();
         private JSONValue body;
         private int maxPages;
         private ErrorTransform onError;
 
         private QueryBuilder(RequestType queryType, String endpoint) {
@@ -141,10 +142,15 @@
         public QueryBuilder onError(ErrorTransform errorTransform) {
             onError = errorTransform;
             return this;
         }
 
+        public QueryBuilder header(String name, String value) {
+            headers.put(name, value);
+            return this;
+        }
+
         public JSONValue execute() {
             return RestRequest.this.execute(this);
         }
 
         public String executeUnparsed() {
@@ -257,11 +263,12 @@
         } else {
             return Optional.empty();
         }
     }
 
-    private HttpRequest createRequest(RequestType requestType, String endpoint, JSONValue body, List<QueryBuilder.Param> params) {
+    private HttpRequest createRequest(RequestType requestType, String endpoint, JSONValue body,
+                                      List<QueryBuilder.Param> params, Map<String, String> headers) {
         var uriBuilder = URIBuilder.base(apiBase);
         if (endpoint != null && !endpoint.isEmpty()) {
             uriBuilder = uriBuilder.appendPath(endpoint);
         }
         if (!params.isEmpty()) {
@@ -277,10 +284,11 @@
             requestBuilder.headers(authGen.getAuthHeaders().toArray(new String[0]));
         }
         if (body != null) {
             requestBuilder.method(requestType.name(), HttpRequest.BodyPublishers.ofString(body.toString()));
         }
+        headers.forEach(requestBuilder::header);
         return requestBuilder.build();
     }
 
     private final Pattern linkPattern = Pattern.compile("<(.*?)>; rel=\"(.*?)\"");
 
@@ -288,11 +296,12 @@
         return linkPattern.matcher(link).results()
                           .collect(Collectors.toMap(m -> m.group(2), m -> m.group(1)));
     }
 
     private JSONValue execute(QueryBuilder queryBuilder) {
-        var request = createRequest(queryBuilder.queryType, queryBuilder.endpoint, queryBuilder.composedBody(), queryBuilder.params);
+        var request = createRequest(queryBuilder.queryType, queryBuilder.endpoint, queryBuilder.composedBody(),
+                                    queryBuilder.params, queryBuilder.headers);
         var response = sendRequest(request);
         var errorTransform = transformBadResponse(response, queryBuilder);
         if (errorTransform.isPresent()) {
             return errorTransform.get();
         }
@@ -329,11 +338,12 @@
 
         return new JSONArray(ret.stream().flatMap(JSONArray::stream).toArray(JSONValue[]::new));
     }
 
     private String executeUnparsed(QueryBuilder queryBuilder) {
-        var request = createRequest(queryBuilder.queryType, queryBuilder.endpoint, queryBuilder.composedBody(), queryBuilder.params);
+        var request = createRequest(queryBuilder.queryType, queryBuilder.endpoint, queryBuilder.composedBody(),
+                                    queryBuilder.params, queryBuilder.headers);
         var response = sendRequest(request);
         return response.body();
     }
 
     public QueryBuilder get(String endpoint) {
