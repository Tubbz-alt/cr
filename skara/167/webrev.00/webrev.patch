diff a/email/src/main/java/org/openjdk/skara/email/Email.java b/email/src/main/java/org/openjdk/skara/email/Email.java
--- a/email/src/main/java/org/openjdk/skara/email/Email.java
+++ b/email/src/main/java/org/openjdk/skara/email/Email.java
@@ -109,14 +109,15 @@
                                              .filter(entry -> !entry.getKey().equalsIgnoreCase("Date"))
                                              .filter(entry -> !entry.getKey().equalsIgnoreCase("Subject"))
                                              .filter(entry -> !entry.getKey().equalsIgnoreCase("From"))
                                              .filter(entry -> !entry.getKey().equalsIgnoreCase("Sender"))
                                              .filter(entry -> !entry.getKey().equalsIgnoreCase("To"))
+                                             .filter(entry -> !entry.getKey().equalsIgnoreCase("Content-type"))
                                              .collect(Collectors.toMap(Map.Entry::getKey,
                                                                        entry -> MimeText.decode(entry.getValue())));
 
-        return new Email(id, date, recipients, author, sender, subject, MimeText.decode(message.body), filteredHeaders);
+        return new Email(id, date, recipients, author, sender, subject, message.body, filteredHeaders);
     }
 
     public static EmailBuilder create(EmailAddress author, String subject, String body) {
         return new EmailBuilder(author, subject, body);
     }
diff a/email/src/main/java/org/openjdk/skara/email/SMTP.java b/email/src/main/java/org/openjdk/skara/email/SMTP.java
--- a/email/src/main/java/org/openjdk/skara/email/SMTP.java
+++ b/email/src/main/java/org/openjdk/skara/email/SMTP.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.email;
 
 import java.io.*;
 import java.net.Socket;
+import java.nio.charset.StandardCharsets;
 import java.time.format.DateTimeFormatter;
 import java.util.regex.Pattern;
 
 /**
  * Limited SMTP client implementation - only compatibility requirement (currently) is the OpenJDK
@@ -45,12 +46,12 @@
             var parts = server.split(":", 2);
             server = parts[0];
             port = Integer.parseInt(parts[1]);
         }
         try (var socket = new Socket(server, port);
-             var out = new OutputStreamWriter(socket.getOutputStream());
-             var in = new InputStreamReader(socket.getInputStream())) {
+             var out = new OutputStreamWriter(socket.getOutputStream(), StandardCharsets.UTF_8);
+             var in = new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8)) {
 
             var session = new SMTPSession(in, out);
 
             session.waitForPattern(initReply);
             session.sendCommand("EHLO " + email.sender().domain(), ehloReply);
@@ -64,12 +65,13 @@
             session.sendCommand("To: " + MimeText.encode(recipient.toString()));
             for (var header : email.headers()) {
                 session.sendCommand(header + ": " + MimeText.encode(email.headerValue(header)));
             }
             session.sendCommand("Subject: " + MimeText.encode(email.subject()));
+            session.sendCommand("Content-type: text/plain; charset=utf-8");
             session.sendCommand("");
-            session.sendCommand(MimeText.encode(email.body()));
+            session.sendCommand(email.body());
             session.sendCommand(".", doneReply);
             session.sendCommand("QUIT");
         }
     }
 }
diff a/test/src/main/java/org/openjdk/skara/test/SMTPServer.java b/test/src/main/java/org/openjdk/skara/test/SMTPServer.java
--- a/test/src/main/java/org/openjdk/skara/test/SMTPServer.java
+++ b/test/src/main/java/org/openjdk/skara/test/SMTPServer.java
@@ -41,10 +41,11 @@
     private static Pattern dataPattern = Pattern.compile("^DATA$");
     private static Pattern messageEndPattern = Pattern.compile("^\\.$");
     private static Pattern quitPattern = Pattern.compile("^QUIT$");
 
     private final static Pattern encodeQuotedPrintablePattern = Pattern.compile("([^\\x00-\\x7f]+)");
+    private final static Pattern headerPattern = Pattern.compile("[^A-Za-z0-9-]+: .+");
 
     private class AcceptThread implements Runnable {
         private void handleSession(SMTPSession session) throws IOException {
             session.sendCommand("220 localhost SMTP", ehloPattern);
             session.sendCommand("250 HELP", mailFromPattern);
@@ -52,15 +53,31 @@
             session.sendCommand("250 RCPT OK", dataPattern);
             session.sendCommand("354 Enter message now, end with .");
             var message = session.readLinesUntil(messageEndPattern);
             session.sendCommand("250 MESSAGE OK", quitPattern);
 
-            // SMTP is only 7-bit safe, ensure that we break any high ascii passing through here
-            var quoteMatcher = encodeQuotedPrintablePattern.matcher(String.join("\n", message));
-            var ascii7message = quoteMatcher.replaceAll(mo -> "HIGH_ASCII");
+            // Email headers are only 7-bit safe, ensure that we break any high ascii passing through
+            var inHeader = true;
+            var mailBody = new StringBuilder();
+            for (var line : message) {
+                if (inHeader) {
+                    var headerMatcher = headerPattern.matcher(line);
+                    if (headerMatcher.matches()) {
+                        var quoteMatcher = encodeQuotedPrintablePattern.matcher(String.join("\n", message));
+                        var ascii7line = quoteMatcher.replaceAll(mo -> "HIGH_ASCII");
+                        mailBody.append(ascii7line);
+                        mailBody.append("\n");
+                        continue;
+                    } else {
+                        inHeader = false;
+                    }
+                }
+                mailBody.append(line);
+                mailBody.append("\n");
+            }
 
-            var email = Email.parse(ascii7message);
+            var email = Email.parse(mailBody.toString());
             emails.addLast(email);
         }
 
         @Override
         public void run() {
