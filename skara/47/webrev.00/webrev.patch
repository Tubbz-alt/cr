diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -71,11 +71,11 @@
         return false;
     }
 
     private void pushMbox(Repository localRepo, String message) {
         try {
-            localRepo.addremove(localRepo.root().resolve("."));
+            localRepo.add(localRepo.root().resolve("."));
             var hash = localRepo.commit(message, bot.emailAddress().fullName().orElseThrow(), bot.emailAddress().address());
             localRepo.push(hash, bot.archiveRepo().getUrl(), "master");
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -28,12 +28,11 @@
 import java.io.IOException;
 import java.net.URI;
 import java.nio.file.Path;
 import java.nio.file.Files;
 import java.time.Instant;
-import java.util.ArrayList;
-import java.util.Optional;
+import java.util.*;
 
 public interface Repository extends ReadOnlyRepository {
     Repository init() throws IOException;
     void checkout(Hash h, boolean force) throws IOException;
     void checkout(Branch b, boolean force) throws IOException;
@@ -43,34 +42,22 @@
     void push(Hash hash, URI uri, String ref, boolean force) throws IOException;
     void push(Branch branch, String remote, boolean setUpstream) throws IOException;
     void clean() throws IOException;
     Repository reinitialize() throws IOException;
     void squash(Hash h) throws IOException;
-    void add(Path... files) throws IOException;
-    void remove(Path... files) throws IOException;
+    void add(List<Path> files) throws IOException;
+    default void add(Path... files) throws IOException {
+        add(Arrays.asList(files));
+    }
+    void remove(List<Path> files) throws IOException;
+    default void remove(Path... files) throws IOException {
+        remove(Arrays.asList(files));
+    }
     void pull() throws IOException;
     void pull(String remote) throws IOException;
     void pull(String remote, String refspec) throws IOException;
-    default void addremove(Path... files) throws IOException {
-        var exists = new ArrayList<Path>();
-        var missing = new ArrayList<Path>();
-        for (var file : files) {
-            if (Files.exists(file)) {
-                exists.add(file);
-            } else {
-                missing.add(file);
-            }
-        }
-
-        if (!exists.isEmpty()) {
-            add(exists.toArray(new Path[0]));
-        }
-
-        if (!missing.isEmpty()) {
-            remove(missing.toArray(new Path[0]));
-        }
-    }
+    void addremove() throws IOException;
     Hash commit(String message,
                 String authorName,
                 String authorEmail) throws IOException;
     Hash commit(String message,
                 String authorName,
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -424,11 +424,11 @@
             await(p);
         }
     }
 
     @Override
-    public void add(Path... paths) throws IOException {
+    public void add(List<Path> paths) throws IOException {
         var cmd = new ArrayList<>(List.of("git", "add"));
         for (var path : paths) {
             cmd.add(path.toString());
         }
         try (var p = capture(cmd)) {
@@ -435,11 +435,11 @@
             await(p);
         }
     }
 
     @Override
-    public void remove(Path... paths) throws IOException {
+    public void remove(List<Path> paths) throws IOException {
         var cmd = new ArrayList<>(List.of("git", "rm"));
         for (var path : paths) {
             cmd.add(path.toString());
         }
         try (var p = capture(cmd)) {
@@ -452,10 +452,17 @@
         try (var p = capture("git", "branch", "-D", b.name())) {
             await(p);
         }
     }
 
+    @Override
+    public void addremove() throws IOException {
+        try (var p = capture("git", "add", "--all")) {
+            await(p);
+        }
+    }
+
     @Override
     public Hash commit(String message, String authorName, String authorEmail)  throws IOException {
         return commit(message, authorName, authorEmail, null);
     }
 
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -855,11 +855,11 @@
             await(p);
         }
     }
 
     @Override
-    public void remove(Path... paths) throws IOException {
+    public void remove(List<Path> paths) throws IOException {
         var cmd = new ArrayList<>(List.of("hg", "rm"));
         for (var p : paths) {
             cmd.add(p.toString());
         }
         try (var p = capture(cmd)) {
@@ -866,11 +866,11 @@
             await(p);
         }
     }
 
     @Override
-    public void add(Path... paths) throws IOException {
+    public void add(List<Path> paths) throws IOException {
         var cmd = new ArrayList<>(List.of("hg", "add"));
         for (var p : paths) {
             cmd.add(p.toString());
         }
         try (var p = capture(cmd)) {
@@ -876,10 +876,17 @@
         try (var p = capture(cmd)) {
             await(p);
         }
     }
 
+    @Override
+    public void addremove() throws IOException {
+        try (var p = capture("hg", "addremove")) {
+            await(p);
+        }
+    }
+
     @Override
     public Optional<String> upstreamFor(Branch b) throws IOException {
         // Mercurial doesn't have the concept of remotes like git,
         // a local branch must have the same name (if present) on the remote
         return Optional.of(b.name());
