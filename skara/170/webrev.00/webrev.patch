diff a/skara.sh b/skara.sh
--- a/skara.sh
+++ b/skara.sh
@@ -22,11 +22,18 @@
 # questions.
 
 DIR=$(dirname "${0}")
 OS=$(uname)
 
-if [ "${OS}" = "Linux" -o "${OS}" = "Darwin" ]; then
+case "${OS}" in
+    Linux) USEBAT=0 ;;
+    Darwin) USEBAT=0 ;;
+    CYGWIN*) USEBAT=0 ;;
+    *) USEBAT=1 ;;
+esac
+
+if [ ${USEBAT} -eq 0 ]; then
     if [ ! -x "${DIR}/bin/bin/git-skara" ]; then
         echo "Compiling ..."
         (cd "${DIR}" && sh gradlew)
     fi
 else
@@ -40,10 +47,10 @@
 if [ -d "${DIR}/build" ]; then
     rm -rf "${DIR}/bin"
     mv "${DIR}/build" "${DIR}/bin"
 fi
 
-if [ "${OS}" = "Linux" -o "${OS}" = "Darwin" ]; then
+if [ ${USEBAT} -eq 0 ]; then
     exec "${DIR}/bin/bin/git-skara" "${@}"
 else
     exec "${DIR}/bin/bin/git-skara.bat" "${@}"
-fi
+fi
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -106,10 +106,11 @@
             throw new IOException(e);
         }
     }
 
     public GitRepository(Path dir) {
+        System.err.println("DEBUG: GitRepository: dir = " + dir);
         this.dir = dir.toAbsolutePath();
     }
 
     public List<Branch> branches() throws IOException {
         try (var p = capture("git", "for-each-ref", "--format=%(refname:short)", "refs/heads")) {
@@ -444,16 +445,27 @@
                 try (var p2 = capture("git", "rev-parse", "--git-dir")) {
                     var res2 = await(p2);
                     if (res2.stdout().size() != 1) {
                         throw new IOException("Unexpected output\n" + res2);
                     }
+                    // CYGWIN: FIXME: map cygwin path to Windows path
                     cachedRoot = dir.resolve(Path.of(res2.stdout().get(0)));
                     return cachedRoot;
                 }
             }
 
-            cachedRoot = Path.of(res.stdout().get(0));
+            // CYGWIN: map cygwin path to Windows path (OK to use `/`)
+            // FIXME: only do this if using Cygwin git, and use cygpath
+            var cygPrefix = "/cygdrive/c";
+            var dirString = res.stdout().get(0);
+            System.err.println("DEBUG: root dir = " + dirString);
+            if (dirString.startsWith(cygPrefix + "/")) {
+                dirString = "C:" + dirString.substring(cygPrefix.length());
+                System.err.println("DEBUG: converted root dir = " + dirString);
+            }
+            cachedRoot = Path.of(dirString);
+            System.err.println("DEBUG: root path = " + cachedRoot);
             return cachedRoot;
         }
     }
 
     @Override
@@ -649,11 +661,13 @@
         }
     }
 
     @Override
     public Optional<Hash> resolve(String ref) throws IOException {
-        try (var p = capture("git", "rev-parse", ref + "^{commit}")) {
+        // CYGWIN: need to escape the { and }
+        // FIXME: only do this if using Cygwin git
+        try (var p = capture("git", "rev-parse", ref + "^\\{commit\\}")) {
             var res = p.await();
             if (res.status() == 0 && res.stdout().size() == 1) {
                 return Optional.of(new Hash(res.stdout().get(0)));
             }
             return Optional.empty();
@@ -699,11 +713,11 @@
         var lines = config("user.name");
         return lines.size() == 1 ? Optional.of(lines.get(0)) : Optional.empty();
     }
 
     private String treeEntry(Path path, Hash hash) throws IOException {
-        try (var p = Process.capture("git", "ls-tree", hash.hex(), path.toString())
+        try (var p = Process.capture("git", "ls-tree", hash.hex(), path.toString().replace("\\", "/"))
                             .workdir(root())
                             .execute()) {
             var res = await(p);
             if (res.stdout().size() == 0) {
                 return null;
@@ -717,11 +731,13 @@
 
     private List<FileEntry> allFiles(Hash hash, List<Path> paths) throws IOException {
         var cmd = new ArrayList<String>();
         cmd.addAll(List.of("git", "ls-tree", "-r"));
         cmd.add(hash.hex());
-        cmd.addAll(paths.stream().map(Path::toString).collect(Collectors.toList()));
+        // CYGWIN: map `\` to `/`
+        // FIXME: only do this if using Cygwin git
+        cmd.addAll(paths.stream().map(Path::toString).map(s -> s.replace("\\", "/")).collect(Collectors.toList()));
         try (var p = Process.capture(cmd.toArray(new String[0]))
                             .workdir(root())
                             .execute()) {
             var res = await(p);
             var entries = new ArrayList<FileEntry>();
