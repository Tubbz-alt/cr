diff a/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java b/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
--- a/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
+++ b/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
@@ -114,13 +114,15 @@
         }
         return tags;
     }
 
     private Set<String> getCommitHashes(Repository repo) throws IOException {
-        return repo.commits().stream()
-                   .map(c -> c.hash().hex())
-                   .collect(Collectors.toSet());
+        try (var commits = repo.commits()) {
+            return commits.stream()
+                    .map(c -> c.hash().hex())
+                    .collect(Collectors.toSet());
+        }
     }
 
     private TemporaryDirectory sourceFolder;
     private URI source;
 
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
@@ -76,12 +76,11 @@
     interface CommitFormatter {
         String format(Commit commit);
     }
 
     String formatCommitMessages(Hash first, Hash last, CommitFormatter formatter) {
-        try {
-            var commits = localRepo().commits(first.hex() + ".." + last.hex());
+        try (var commits = localRepo().commits(first.hex() + ".." + last.hex())) {
             return commits.stream()
                           .map(formatter::format)
                           .collect(Collectors.joining("\n"));
         } catch (IOException e) {
             throw new UncheckedIOException(e);
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
@@ -74,12 +74,11 @@
             log.warning("No previous history found for branch '" + branch + "' - resetting mark");
             history.setBranchHash(branch, curHead);
             return;
         }
 
-        var newCommits = localRepo.commits(lastRef.get() + ".." + curHead).stream()
-                                  .collect(Collectors.toList());
+        var newCommits = localRepo.commits(lastRef.get() + ".." + curHead).asList();
         if (newCommits.size() == 0) {
             return;
         }
 
         // Update the history first - if there is a problem here we don't want to send out multiple updates
@@ -116,12 +115,11 @@
             var previous = tag.previous();
             if (!previous.isPresent()) {
                 log.warning("No previous tag found for '" + tag.tag() + "' - ignoring");
                 continue;
             }
-            var commits = localRepo.commits(previous.get().tag() + ".." + tag.tag()).stream()
-                                   .collect(Collectors.toList());
+            var commits = localRepo.commits(previous.get().tag() + ".." + tag.tag()).asList();
             if (commits.size() == 0) {
                 continue;
             }
 
             // Update the history first - if there is a problem here we don't want to send out multiple updates
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
@@ -30,10 +30,11 @@
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
+import java.util.Set;
 import java.util.stream.Collectors;
 
 import static org.junit.jupiter.api.Assertions.*;
 import static org.junit.jupiter.api.Assumptions.assumeTrue;
 
@@ -99,13 +100,16 @@
             var pushedRepo = Repository.materialize(pushedRepoFolder, author.getUrl(), "master");
             assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));
 
             // The commits from the "other" branch should be preserved and not squashed (but not the merge commit)
             var headHash = pushedRepo.resolve("HEAD").orElseThrow();
-            var commits = pushedRepo.commits(masterHash.hex() + ".." + headHash.hex()).stream()
-                                    .map(Commit::hash)
-                                    .collect(Collectors.toSet());
+            Set<Hash> commits;
+            try (var tempCommits = pushedRepo.commits(masterHash.hex() + ".." + headHash.hex())) {
+                commits = tempCommits.stream()
+                        .map(Commit::hash)
+                        .collect(Collectors.toSet());
+            }
             assertTrue(commits.contains(otherHash1));
             assertTrue(commits.contains(otherHash2));
             assertFalse(commits.contains(mergeHash));
 
             // Author and committer should updated in the merge commit
@@ -188,13 +192,16 @@
             var pushedRepo = Repository.materialize(pushedRepoFolder, author.getUrl(), "master");
             assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));
 
             // The commits from the "other" branch should be preserved and not squashed (but not the merge commit)
             var headHash = pushedRepo.resolve("HEAD").orElseThrow();
-            var commits = pushedRepo.commits(masterHash.hex() + ".." + headHash.hex()).stream()
-                                    .map(Commit::hash)
-                                    .collect(Collectors.toSet());
+            Set<Hash> commits;
+            try (var tempCommits = pushedRepo.commits(masterHash.hex() + ".." + headHash.hex())) {
+                commits = tempCommits.stream()
+                        .map(Commit::hash)
+                        .collect(Collectors.toSet());
+            }
             assertTrue(commits.contains(otherHash1));
             assertTrue(commits.contains(otherHash2));
             assertFalse(commits.contains(mergeHash));
 
             // Author and committer should updated in the merge commit
diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
@@ -144,14 +144,15 @@
         var conf = configuration.get();
         return new HashSet<>(conf.checks().enabled(commitChecks));
     }
 
     private Set<Check> checksForCommits() throws IOException {
-        var commits = repository.commits(revisionRange);
-        return commits.stream()
-                .flatMap(commit -> checksForCommit(commit).stream())
-                .collect(Collectors.toSet());
+        try (var commits = repository.commits(revisionRange)) {
+            return commits.stream()
+                    .flatMap(commit -> checksForCommit(commit).stream())
+                    .collect(Collectors.toSet());
+        }
     }
 
     public static class Issues implements Iterable<Issue>, AutoCloseable {
         private final Iterator<Issue> iterator;
         private final Closeable resource;
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Commits.java b/vcs/src/main/java/org/openjdk/skara/vcs/Commits.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Commits.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Commits.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.vcs;
 
 import java.io.*;
 import java.util.*;
+import java.util.function.Consumer;
 import java.util.stream.*;
 
 public interface Commits extends Closeable, Iterable<Commit> {
     default List<Commit> asList() throws IOException {
         var result = new ArrayList<Commit>();
@@ -37,8 +38,24 @@
 
         return result;
     }
 
     default Stream<Commit> stream() {
-        return StreamSupport.stream(spliterator(), false);
+        return StreamSupport.stream(spliterator(), false).onClose(() -> {
+            try {
+                close();
+            } catch (IOException e) {
+                throw new UncheckedIOException(e);
+            }
+        });
+    }
+
+    @Override
+    default void forEach(Consumer<? super Commit> action) {
+        Iterable.super.forEach(action);
+        try {
+            close();
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
     }
 }
