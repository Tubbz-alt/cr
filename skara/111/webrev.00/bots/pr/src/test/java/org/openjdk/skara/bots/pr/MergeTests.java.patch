diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
@@ -30,10 +30,11 @@
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
+import java.util.Set;
 import java.util.stream.Collectors;
 
 import static org.junit.jupiter.api.Assertions.*;
 import static org.junit.jupiter.api.Assumptions.assumeTrue;
 
@@ -99,13 +100,16 @@
             var pushedRepo = Repository.materialize(pushedRepoFolder, author.getUrl(), "master");
             assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));
 
             // The commits from the "other" branch should be preserved and not squashed (but not the merge commit)
             var headHash = pushedRepo.resolve("HEAD").orElseThrow();
-            var commits = pushedRepo.commits(masterHash.hex() + ".." + headHash.hex()).stream()
-                                    .map(Commit::hash)
-                                    .collect(Collectors.toSet());
+            Set<Hash> commits;
+            try (var tempCommits = pushedRepo.commits(masterHash.hex() + ".." + headHash.hex())) {
+                commits = tempCommits.stream()
+                        .map(Commit::hash)
+                        .collect(Collectors.toSet());
+            }
             assertTrue(commits.contains(otherHash1));
             assertTrue(commits.contains(otherHash2));
             assertFalse(commits.contains(mergeHash));
 
             // Author and committer should updated in the merge commit
@@ -188,13 +192,16 @@
             var pushedRepo = Repository.materialize(pushedRepoFolder, author.getUrl(), "master");
             assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));
 
             // The commits from the "other" branch should be preserved and not squashed (but not the merge commit)
             var headHash = pushedRepo.resolve("HEAD").orElseThrow();
-            var commits = pushedRepo.commits(masterHash.hex() + ".." + headHash.hex()).stream()
-                                    .map(Commit::hash)
-                                    .collect(Collectors.toSet());
+            Set<Hash> commits;
+            try (var tempCommits = pushedRepo.commits(masterHash.hex() + ".." + headHash.hex())) {
+                commits = tempCommits.stream()
+                        .map(Commit::hash)
+                        .collect(Collectors.toSet());
+            }
             assertTrue(commits.contains(otherHash1));
             assertTrue(commits.contains(otherHash2));
             assertFalse(commits.contains(mergeHash));
 
             // Author and committer should updated in the merge commit
