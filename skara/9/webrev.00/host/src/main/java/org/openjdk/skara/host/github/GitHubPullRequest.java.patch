diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
@@ -33,16 +32,19 @@
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 
 public class GitHubPullRequest implements PullRequest {
-
     private final JSONValue json;
     private final RestRequest request;
+    private final GitHubHost host;
     private final GitHubRepository repository;
     private final Logger log = Logger.getLogger("org.openjdk.skara.host");
 
     GitHubPullRequest(GitHubRepository repository, JSONValue jsonValue, RestRequest request) {
+        this.host = (GitHubHost)repository.host();
         this.repository = repository;
         this.request = request;
         this.json = jsonValue;
     }
 
@@ -57,11 +58,11 @@
         return json.get("number").toString();
     }
 
     @Override
     public HostUserDetails getAuthor() {
-        return repository.host().getUserDetails(json.get("user").get("login").asString());
+        return host.parseUserDetails(json);
     }
 
     @Override
     public List<Review> getReviews() {
         // Reviews are returned in chronological order, we only care about the latest
@@ -67,11 +68,11 @@
         // Reviews are returned in chronological order, we only care about the latest
         var reviews = request.get("pulls/" + json.get("number").toString() + "/reviews").execute().stream()
                              .map(JSONValue::asObject)
                              .map(obj -> {
                                  var ret = new Review();
-                                 ret.reviewer = repository.host().getUserDetails(obj.get("user").get("login").asString());
+                                 ret.reviewer = host.parseUserDetails(obj);
                                  ret.hash = new Hash(obj.get("commit_id").asString());
                                  switch (obj.get("state").asString()) {
                                      case "APPROVED":
                                          ret.verdict = Review.Verdict.APPROVED;
                                          break;
@@ -117,11 +118,11 @@
                .body(query)
                .execute();
     }
 
     private ReviewComment parseReviewComment(ReviewComment parent, JSONObject json) {
-        var author = repository.host().getUserDetails(json.get("user").get("login").asString());
+        var author = host.parseUserDetails(json);
         var threadId = parent == null ? json.get("id").toString() : parent.threadId();
         var comment = new ReviewComment(parent,
                                         threadId,
                                         new Hash(json.get("commit_id").asString()),
                                         json.get("path").asString(),
@@ -165,12 +166,10 @@
                                     .map(JSONValue::asObject)
                                     .collect(Collectors.toList());
         var idToComment = new HashMap<String, ReviewComment>();
 
         for (var reviewComment : reviewComments) {
-            var author = repository.host().getUserDetails(reviewComment.get("user").get("login").asString());
-
             ReviewComment parent = null;
             if (reviewComment.contains("in_reply_to_id")) {
                 parent = idToComment.get(reviewComment.get("in_reply_to_id").toString());
             }
             var comment = parseReviewComment(parent, reviewComment);
@@ -223,11 +222,11 @@
     }
 
     private Comment parseComment(JSONValue comment) {
         var ret = new Comment(Integer.toString(comment.get("id").asInt()),
                               comment.get("body").asString(),
-                              repository.host().getUserDetails(comment.get("user").get("login").asString()),
+                              host.parseUserDetails(comment),
                               ZonedDateTime.parse(comment.get("created_at").asString()),
                               ZonedDateTime.parse(comment.get("updated_at").asString()));
         return ret;
     }
 
@@ -280,10 +279,19 @@
                                         ZonedDateTime.parse(c.get("completed_at").asString()));
                             }
                             if (c.contains("external_id")) {
                                 checkBuilder.metadata(c.get("external_id").asString());
                             }
+                            if (c.contains("output")) {
+                                var output = c.get("output").asObject();
+                                if (output.contains("title")) {
+                                    checkBuilder.title(output.get("title").asString());
+                                }
+                                if (output.contains("summary")) {
+                                    checkBuilder.summary(output.get("summary").asString());
+                                }
+                            }
 
                             return checkBuilder.build();
                         }));
     }
 
@@ -300,11 +308,10 @@
         request.post("check-runs").body(checkQuery).execute();
     }
 
     @Override
     public void updateCheck(Check check) {
-
         JSONObject outputQuery = null;
         if (check.title().isPresent() && check.summary().isPresent()) {
             outputQuery = JSON.object();
             outputQuery.put("title", check.title().get());
             outputQuery.put("summary", check.summary().get());
@@ -409,11 +416,11 @@
 
     @Override
     public List<HostUserDetails> getAssignees() {
         return json.get("assignees").asArray()
                                     .stream()
-                                    .map(o -> repository.host().getUserDetails(o.get("login").asString()))
+                                    .map(host::parseUserDetails)
                                     .collect(Collectors.toList());
     }
 
     @Override
     public void setAssignees(List<HostUserDetails> assignees) {
