diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
@@ -36,10 +36,11 @@
     private final Pattern webUriPattern;
     private final String webUriReplacement;
     private final GitHubApplication application;
     private final PersonalAccessToken pat;
     private final RestRequest request;
+    private final HostUserDetails currentUser;
 
     public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement) {
         this.uri = uri;
         this.webUriPattern = webUriPattern;
         this.webUriReplacement = webUriReplacement;
@@ -53,10 +54,14 @@
 
         request = new RestRequest(baseApi, () -> Arrays.asList(
                 "Authorization", "token " + getInstallationToken(),
                 "Accept", "application/vnd.github.machine-man-preview+json",
                 "Accept", "application/vnd.github.antiope-preview+json"));
+
+        var appDetails = application.getAppDetails();
+        var appName = appDetails.get("name").asString() + "[bot]";
+        currentUser = getUserDetails(appName);
     }
 
     public GitHubHost(URI uri, PersonalAccessToken pat) {
         this.uri = uri;
         this.webUriPattern = null;
@@ -69,10 +74,11 @@
                                 .setPath("/")
                                 .build();
 
         request = new RestRequest(baseApi, () -> Arrays.asList(
                 "Authorization", "token " + pat.token()));
+        currentUser = getUserDetails(pat.userName());
     }
 
     public GitHubHost(URI uri) {
         this.uri = uri;
         this.webUriPattern = null;
@@ -84,10 +90,11 @@
                                 .appendSubDomain("api")
                                 .setPath("/")
                                 .build();
 
         request = new RestRequest(baseApi);
+        currentUser = null;
     }
 
     public URI getURI() {
         return uri;
     }
@@ -115,10 +122,21 @@
         } else {
             return pat.token();
         }
     }
 
+    private String getFullName(String userName) {
+        var details = getUserDetails(userName);
+        return details.fullName();
+    }
+
+    // Most GitHub API's return user information in this format
+    HostUserDetails parseUserDetails(JSONValue json) {
+        return new HostUserDetails(json.get("user").get("id").asInt(), json.get("user").get("login").asString(),
+                                   () -> getFullName(json.get("user").get("login").asString()));
+    }
+
     @Override
     public boolean isValid() {
         var endpoints = request.get("")
                                .onError(response -> JSON.of())
                                .execute();
@@ -151,16 +169,11 @@
         return new HostUserDetails(id, login, name);
     }
 
     @Override
     public HostUserDetails getCurrentUserDetails() {
-        if (application != null) {
-            var appDetails = application.getAppDetails();
-            var appName = appDetails.get("name").asString() + "[bot]";
-            return getUserDetails(appName);
-        } else if (pat != null){
-            return getUserDetails(pat.userName());
-        } else {
+        if (currentUser == null) {
             throw new IllegalStateException("No credentials present");
         }
+        return currentUser;
     }
 }
