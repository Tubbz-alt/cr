diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCombinedDiffParser.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCombinedDiffParser.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCombinedDiffParser.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCombinedDiffParser.java
@@ -68,14 +68,14 @@
                 if (header.status().isAdded()) {
                     // git reports wrong start for added files, they should
                     // always have range (0,0), but git reports (1,0)
                     sourceRangesPerParent.add(new Range(0, 0));
                 } else {
-                    sourceRangesPerParent.add(Range.fromString(words[i].substring(1))); // skip initial '-'
+                    sourceRangesPerParent.add(GitRange.fromCombinedString(words[i].substring(1))); // skip initial '-'
                 }
             }
-            var targetRange = Range.fromString(words[numParents + 1].substring(1)); // skip initial '+'
+            var targetRange = GitRange.fromCombinedString(words[numParents + 1].substring(1)); // skip initial '+'
 
             var linesPerParent = new ArrayList<List<String>>(numParents);
             for (int i = 0; i < numParents; i++) {
                 linesPerParent.add(new ArrayList<String>());
             }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/tools/GitRange.java b/vcs/src/main/java/org/openjdk/skara/vcs/tools/GitRange.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/tools/GitRange.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/tools/GitRange.java
@@ -22,11 +22,11 @@
  */
 package org.openjdk.skara.vcs.tools;
 
 import org.openjdk.skara.vcs.Range;
 
-class GitRange {
+public class GitRange {
     static Range fromString(String s) {
         var separatorIndex = s.indexOf(",");
 
         if (separatorIndex == -1) {
             var start = Integer.parseInt(s);
@@ -47,6 +47,25 @@
             start++;
         }
 
         return new Range(start, count);
     }
+
+    public static Range fromCombinedString(String s) {
+        var separatorIndex = s.indexOf(",");
+
+        if (separatorIndex == -1) {
+            var start = Integer.parseInt(s);
+            return new Range(start, 1);
+        }
+
+        var start = Integer.parseInt(s.substring(0, separatorIndex));
+
+        // Need to work around a bug in git where git sometimes print -1
+        // as an unsigned int for the count part of the range
+        var countString = s.substring(separatorIndex + 1, s.length());
+        var count =
+            countString.equals("18446744073709551615") ?  0 : Integer.parseInt(countString);
+
+        return new Range(start, count);
+    }
 }
