diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -25,11 +25,10 @@
 import org.openjdk.skara.args.*;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.*;
 import org.openjdk.skara.proxy.HttpProxy;
-import org.openjdk.skara.ssh.SSHConfig;
 
 import java.io.IOException;
 import java.net.URI;
 import java.nio.file.*;
 import java.util.*;
@@ -99,26 +98,26 @@
         }
         return name;
     }
 
     private static HostedRepository getHostedRepositoryFor(URI uri, GitCredentials credentials) throws IOException {
-        var host = Host.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
+        var host = RepositoryHost.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
         if (System.getenv("GIT_TOKEN") == null) {
             GitCredentials.approve(credentials);
         }
-        var remoteRepo = host.getRepository(projectName(uri));
-        var parentRepo = remoteRepo.getParent();
+        var remoteRepo = host.repository(projectName(uri));
+        var parentRepo = remoteRepo.parent();
         var targetRepo = parentRepo.isPresent() ? parentRepo.get() : remoteRepo;
         return targetRepo;
     }
 
     private static PullRequest getPullRequest(URI uri, GitCredentials credentials, Argument prId) throws IOException {
         if (!prId.isPresent()) {
             exit("error: missing pull request identifier");
         }
 
-        var pr = getHostedRepositoryFor(uri, credentials).getPullRequest(prId.asString());
+        var pr = getHostedRepositoryFor(uri, credentials).pullRequest(prId.asString());
         if (pr == null) {
             exit("error: could not fetch PR information");
         }
 
         return pr;
@@ -307,11 +306,11 @@
         var remotePullPath = repo.pullPath(remote);
         var username = arguments.contains("username") ? arguments.get("username").asString() : null;
         var token = isMercurial ? System.getenv("HG_TOKEN") :  System.getenv("GIT_TOKEN");
         var uri = Remote.toWebURI(remotePullPath);
         var credentials = GitCredentials.fill(uri.getHost(), uri.getPath(), username, token, uri.getScheme());
-        var host = Host.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
+        var host = RepositoryHost.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
 
         var action = arguments.at(0).asString();
         if (action.equals("create")) {
             if (isMercurial) {
                 var currentBookmark = repo.currentBookmark();
@@ -410,15 +409,15 @@
                     System.err.println("");
                     System.err.println("(You can later restore the changes by running: hg unshelve)");
                     System.exit(1);
                 }
 
-                var remoteRepo = host.getRepository(projectName(uri));
+                var remoteRepo = host.repository(projectName(uri));
                 if (token == null) {
                     GitCredentials.approve(credentials);
                 }
-                var parentRepo = remoteRepo.getParent().orElseThrow(() ->
+                var parentRepo = remoteRepo.parent().orElseThrow(() ->
                         new IOException("error: remote repository " + remotePullPath + " is not a fork of any repository"));
 
                 var file = Files.createTempFile("PULL_REQUEST_", ".txt");
                 if (commits.size() == 1) {
                     var commit = commits.get(0);
@@ -478,15 +477,15 @@
 
                 var pr = remoteRepo.createPullRequest(parentRepo, targetBranch, bookmark.name(), title, body);
                 if (arguments.contains("assignees")) {
                     var usernames = Arrays.asList(arguments.get("assignees").asString().split(","));
                     var assignees = usernames.stream()
-                                             .map(host::getUserDetails)
+                                             .map(host::user)
                                              .collect(Collectors.toList());
                     pr.setAssignees(assignees);
                 }
-                System.out.println(pr.getWebUrl().toString());
+                System.out.println(pr.webUrl().toString());
                 Files.deleteIfExists(file);
 
                 System.exit(0);
             }
             var currentBranch = repo.currentBranch();
@@ -567,15 +566,15 @@
                 System.err.println("");
                 System.err.println("(You can later restore the changes by running: git stash pop)");
                 System.exit(1);
             }
 
-            var remoteRepo = host.getRepository(projectName(uri));
+            var remoteRepo = host.repository(projectName(uri));
             if (token == null) {
                 GitCredentials.approve(credentials);
             }
-            var parentRepo = remoteRepo.getParent().orElseThrow(() ->
+            var parentRepo = remoteRepo.parent().orElseThrow(() ->
                     new IOException("error: remote repository " + remotePullPath + " is not a fork of any repository"));
 
             var file = Files.createTempFile("PULL_REQUEST_", ".txt");
             if (commits.size() == 1) {
                 var commit = commits.get(0);
@@ -635,15 +634,15 @@
 
             var pr = remoteRepo.createPullRequest(parentRepo, targetBranch, currentBranch.name(), title, body);
             if (arguments.contains("assignees")) {
                 var usernames = Arrays.asList(arguments.get("assignees").asString().split(","));
                 var assignees = usernames.stream()
-                                         .map(host::getUserDetails)
+                                         .map(host::user)
                                          .collect(Collectors.toList());
                 pr.setAssignees(assignees);
             }
-            System.out.println(pr.getWebUrl().toString());
+            System.out.println(pr.webUrl().toString());
             Files.deleteIfExists(file);
         } else if (action.equals("integrate") || action.equals("approve")) {
             var pr = getPullRequest(uri, credentials, arguments.at(1));
 
             if (action.equals("integrate")) {
@@ -653,11 +652,11 @@
             } else {
                 throw new IllegalStateException("unexpected action: " + action);
             }
         } else if (action.equals("list")) {
             var remoteRepo = getHostedRepositoryFor(uri, credentials);
-            var prs = remoteRepo.getPullRequests();
+            var prs = remoteRepo.pullRequests();
 
             var ids = new ArrayList<String>();
             var titles = new ArrayList<String>();
             var authors = new ArrayList<String>();
             var assignees = new ArrayList<String>();
@@ -690,30 +689,30 @@
                         System.exit(1);
                     }
                 }
             }
 
-            for (var pr : remoteRepo.getPullRequests()) {
-                var prAuthor = pr.getAuthor().userName();
+            for (var pr : remoteRepo.pullRequests()) {
+                var prAuthor = pr.author().userName();
                 if (!filterAuthors.isEmpty() && !filterAuthors.contains(prAuthor)) {
                     continue;
                 }
 
-                var prAssignees = pr.getAssignees().stream()
-                                   .map(HostUserDetails::userName)
-                                   .collect(Collectors.toSet());
+                var prAssignees = pr.assignees().stream()
+                                    .map(HostUser::userName)
+                                    .collect(Collectors.toSet());
                 if (!filterAssignees.isEmpty() && !filterAssignees.stream().anyMatch(prAssignees::contains)) {
                     continue;
                 }
 
-                var prLabels = new HashSet<>(pr.getLabels());
+                var prLabels = new HashSet<>(pr.labels());
                 if (!filterLabels.isEmpty() && !filterLabels.stream().anyMatch(prLabels::contains)) {
                     continue;
                 }
 
-                ids.add(pr.getId());
-                titles.add(pr.getTitle());
+                ids.add(pr.id());
+                titles.add(pr.title());
                 authors.add(prAuthor);
                 assignees.add(String.join(",", prAssignees));
                 labels.add(String.join(",", prLabels));
             }
 
@@ -745,20 +744,20 @@
             if (!prId.isPresent()) {
                 exit("error: missing pull request identifier");
             }
 
             var remoteRepo = getHostedRepositoryFor(uri, credentials);
-            var pr = remoteRepo.getPullRequest(prId.asString());
-            var repoUrl = remoteRepo.getWebUrl();
-            var prHeadRef = pr.getSourceRef();
+            var pr = remoteRepo.pullRequest(prId.asString());
+            var repoUrl = remoteRepo.webUrl();
+            var prHeadRef = pr.sourceRef();
             var isHgGit = isMercurial && Repository.exists(repo.root().resolve(".hg").resolve("git"));
             if (isHgGit) {
                 var hgGitRepo = Repository.get(repo.root().resolve(".hg").resolve("git")).get();
                 var hgGitFetchHead = hgGitRepo.fetch(repoUrl, prHeadRef);
 
                 if (action.equals("show") || action.equals("apply")) {
-                    var target = hgGitRepo.fetch(repoUrl, pr.getTargetRef());
+                    var target = hgGitRepo.fetch(repoUrl, pr.targetRef());
                     var hgGitMergeBase = hgGitRepo.mergeBase(target, hgGitFetchHead);
 
                     if (action.equals("show")) {
                         show(hgGitMergeBase.hex(), hgGitFetchHead, hgGitRepo.root());
                     } else {
@@ -789,11 +788,11 @@
                 }
 
                 return;
             }
 
-            var fetchHead = repo.fetch(repoUrl, pr.getSourceRef());
+            var fetchHead = repo.fetch(repoUrl, pr.sourceRef());
             if (action.equals("fetch")) {
                 if (arguments.contains("branch")) {
                     var branchName = arguments.get("branch").asString();
                     repo.branch(fetchHead, branchName);
                 } else {
@@ -806,37 +805,37 @@
                     repo.checkout(branch, false);
                 } else {
                     repo.checkout(fetchHead, false);
                 }
             } else if (action.equals("show")) {
-                show(pr.getTargetRef(), fetchHead);
+                show(pr.targetRef(), fetchHead);
             } else if (action.equals("apply")) {
-                var patch = diff(pr.getTargetRef(), fetchHead);
+                var patch = diff(pr.targetRef(), fetchHead);
                 apply(patch);
                 Files.deleteIfExists(patch);
             }
         } else if (action.equals("close")) {
             var prId = arguments.at(1);
             if (!prId.isPresent()) {
                 exit("error: missing pull request identifier");
             }
 
             var remoteRepo = getHostedRepositoryFor(uri, credentials);
-            var pr = remoteRepo.getPullRequest(prId.asString());
+            var pr = remoteRepo.pullRequest(prId.asString());
             pr.setState(PullRequest.State.CLOSED);
         } else if (action.equals("update")) {
             var prId = arguments.at(1);
             if (!prId.isPresent()) {
                 exit("error: missing pull request identifier");
             }
 
             var remoteRepo = getHostedRepositoryFor(uri, credentials);
-            var pr = remoteRepo.getPullRequest(prId.asString());
+            var pr = remoteRepo.pullRequest(prId.asString());
             if (arguments.contains("assignees")) {
                 var usernames = Arrays.asList(arguments.get("assignees").asString().split(","));
                 var assignees = usernames.stream()
-                    .map(host::getUserDetails)
+                    .map(host::user)
                     .collect(Collectors.toList());
                 pr.setAssignees(assignees);
             }
         } else {
             exit("error: unexpected action: " + action);
