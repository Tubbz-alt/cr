diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bot;
 
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.host.network.URIBuilder;
+import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.json.JSONObject;
 import org.openjdk.skara.vcs.VCS;
 
 import java.io.*;
 import java.net.URI;
@@ -36,23 +36,25 @@
 import java.util.regex.Pattern;
 
 public class BotRunnerConfiguration {
     private final Logger log;
     private final JSONObject config;
-    private final Map<String, Host> hosts;
+    private final Map<String, RepositoryHost> repositoryHosts;
+    private final Map<String, IssueHost> issueHosts;
     private final Map<String, HostedRepository> repositories;
 
     private BotRunnerConfiguration(JSONObject config, Path cwd) throws ConfigurationError {
         this.config = config;
         log = Logger.getLogger("org.openjdk.skara.bot");
 
-        hosts = parseHosts(config, cwd);
+        repositoryHosts = parseRepositoryHosts(config, cwd);
+        issueHosts = parseIssueHosts(config, cwd);
         repositories = parseRepositories(config);
     }
 
-    private Map<String, Host> parseHosts(JSONObject config, Path cwd) throws ConfigurationError {
-        Map<String, Host> ret = new HashMap<>();
+    private Map<String, RepositoryHost> parseRepositoryHosts(JSONObject config, Path cwd) throws ConfigurationError {
+        Map<String, RepositoryHost> ret = new HashMap<>();
 
         if (!config.contains("hosts")) {
             return ret;
         }
 
@@ -84,11 +86,27 @@
                                                                        github.get("app").get("installation").asString()));
                 } else {
                     var pat = new PersonalAccessToken(github.get("username").asString(), github.get("pat").asString());
                     ret.put(entry.name(), HostFactory.createGitHubHost(uri, pat));
                 }
-            } else if (entry.value().contains("jira")) {
+            } else {
+                throw new ConfigurationError("Host " + entry.name());
+            }
+        }
+
+        return ret;
+    }
+
+    private Map<String, IssueHost> parseIssueHosts(JSONObject config, Path cwd) throws ConfigurationError {
+        Map<String, IssueHost> ret = new HashMap<>();
+
+        if (!config.contains("hosts")) {
+            return ret;
+        }
+
+        for (var entry : config.get("hosts").fields()) {
+            if (entry.value().contains("jira")) {
                 var jira = entry.value().get("jira");
                 var uri = URIBuilder.base(jira.get("url").asString()).build();
                 ret.put(entry.name(), HostFactory.createJiraHost(uri, null));
             } else {
                 throw new ConfigurationError("Host " + entry.name());
@@ -105,15 +123,15 @@
             return ret;
         }
 
         for (var entry : config.get("repositories").fields()) {
             var hostName = entry.value().get("host").asString();
-            if (!hosts.containsKey(hostName)) {
+            if (!repositoryHosts.containsKey(hostName)) {
                 throw new ConfigurationError("Repository " + entry.name() + " uses undefined host '" + hostName + "'");
             }
-            var host = hosts.get(hostName);
-            var repo = host.getRepository(entry.value().get("repository").asString());
+            var host = repositoryHosts.get(hostName);
+            var repo = host.repository(entry.value().get("repository").asString());
             ret.put(entry.name(), repo);
         }
 
         return ret;
     }
@@ -131,40 +149,40 @@
             entry = entry.substring(0, refSeparatorIndex);
         }
         var hostSeparatorIndex = entry.indexOf('/');
         if (hostSeparatorIndex >= 0) {
             var hostName = entry.substring(0, hostSeparatorIndex);
-            var host = hosts.get(hostName);
-            if (!hosts.containsKey(hostName)) {
+            var host = repositoryHosts.get(hostName);
+            if (!repositoryHosts.containsKey(hostName)) {
                 throw new ConfigurationError("Repository entry " + entry + " uses undefined host '" + hostName + "'");
             }
             var repositoryName = entry.substring(hostSeparatorIndex + 1);
-            ret.repository = host.getRepository(repositoryName);
+            ret.repository = host.repository(repositoryName);
         } else {
             if (!repositories.containsKey(entry)) {
                 throw new ConfigurationError("Repository " + entry + " is not defined!");
             }
             ret.repository = repositories.get(entry);
         }
 
         if (ret.ref == null) {
-            ret.ref = ret.repository.getRepositoryType() == VCS.GIT ? "master" : "default";
+            ret.ref = ret.repository.repositoryType() == VCS.GIT ? "master" : "default";
         }
 
         return ret;
     }
 
     private IssueProject parseIssueProjectEntry(String entry) throws ConfigurationError {
         var hostSeparatorIndex = entry.indexOf('/');
         if (hostSeparatorIndex >= 0) {
             var hostName = entry.substring(0, hostSeparatorIndex);
-            var host = hosts.get(hostName);
-            if (!hosts.containsKey(hostName)) {
+            var host = issueHosts.get(hostName);
+            if (!issueHosts.containsKey(hostName)) {
                 throw new ConfigurationError("Issue project entry " + entry + " uses undefined host '" + hostName + "'");
             }
             var issueProjectName = entry.substring(hostSeparatorIndex + 1);
-            return host.getIssueProject(issueProjectName);
+            return host.project(issueProjectName);
         } else {
             throw new ConfigurationError("Malformed issue project entry");
         }
     }
 
