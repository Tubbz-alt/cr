diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.host.network.URIBuilder;
+import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.proxy.HttpProxy;
 import org.openjdk.skara.vcs.*;
 
 import org.junit.jupiter.api.TestInfo;
@@ -46,13 +46,14 @@
     private int nextHostIndex;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.test");
 
     private interface Credentials {
-        Host createNewHost(int userIndex);
-        HostedRepository getHostedRepository(Host host);
-        IssueProject getIssueProject(Host host);
+        RepositoryHost createRepositoryHost(int userIndex);
+        IssueHost createIssueHost(int userIndex);
+        HostedRepository getHostedRepository(RepositoryHost host);
+        IssueProject getIssueProject(IssueHost host);
         String getNamespaceName();
         default void close() {}
     }
 
     private static class GitHubCredentials implements Credentials {
@@ -63,11 +64,11 @@
             this.config = config;
             this.configDir = configDir;
         }
 
         @Override
-        public Host createNewHost(int userIndex) {
+        public RepositoryHost createRepositoryHost(int userIndex) {
             var hostUri = URIBuilder.base(config.get("host").asString()).build();
             var apps = config.get("apps").asArray();
             var key = configDir.resolve(apps.get(userIndex).get("key").asString());
             return HostFactory.createGitHubHost(hostUri,
                                                 null,
@@ -76,17 +77,22 @@
                                                 apps.get(userIndex).get("id").asString(),
                                                 apps.get(userIndex).get("installation").asString());
         }
 
         @Override
-        public HostedRepository getHostedRepository(Host host) {
-            return host.getRepository(config.get("project").asString());
+        public IssueHost createIssueHost(int userIndex) {
+            throw new RuntimeException("not implemented yet");
         }
 
         @Override
-        public IssueProject getIssueProject(Host host) {
-            return host.getIssueProject(config.get("project").asString());
+        public HostedRepository getHostedRepository(RepositoryHost host) {
+            return host.repository(config.get("project").asString());
+        }
+
+        @Override
+        public IssueProject getIssueProject(IssueHost host) {
+            return host.project(config.get("project").asString());
         }
 
         @Override
         public String getNamespaceName() {
             return config.get("namespace").asString();
@@ -99,61 +105,75 @@
         GitLabCredentials(JSONObject config) {
             this.config = config;
         }
 
         @Override
-        public Host createNewHost(int userIndex) {
+        public RepositoryHost createRepositoryHost(int userIndex) {
             var hostUri = URIBuilder.base(config.get("host").asString()).build();
             var users = config.get("users").asArray();
             var pat = new PersonalAccessToken(users.get(userIndex).get("name").asString(),
                                               users.get(userIndex).get("pat").asString());
             return HostFactory.createGitLabHost(hostUri, pat);
         }
 
         @Override
-        public HostedRepository getHostedRepository(Host host) {
-            return host.getRepository(config.get("project").asString());
+        public IssueHost createIssueHost(int userIndex) {
+            throw new RuntimeException("not implemented yet");
         }
 
         @Override
-        public IssueProject getIssueProject(Host host) {
-            return host.getIssueProject(config.get("project").asString());
+        public HostedRepository getHostedRepository(RepositoryHost host) {
+            return host.repository(config.get("project").asString());
+        }
+
+        @Override
+        public IssueProject getIssueProject(IssueHost host) {
+            return host.project(config.get("project").asString());
         }
 
         @Override
         public String getNamespaceName() {
             return config.get("namespace").asString();
         }
     }
 
     private static class TestCredentials implements Credentials {
         private final List<TestHost> hosts = new ArrayList<>();
-        private final List<HostUserDetails> users = List.of(
-                new HostUserDetails(1, "user1", "User Number 1"),
-                new HostUserDetails(2, "user2", "User Number 2"),
-                new HostUserDetails(3, "user3", "User Number 3"),
-                new HostUserDetails(4, "user4", "User Number 4")
+        private final List<HostUser> users = List.of(
+                new HostUser(1, "user1", "User Number 1"),
+                new HostUser(2, "user2", "User Number 2"),
+                new HostUser(3, "user3", "User Number 3"),
+                new HostUser(4, "user4", "User Number 4")
         );
 
-        @Override
-        public Host createNewHost(int userIndex) {
+        private TestHost createHost(int userIndex) {
             if (userIndex == 0) {
                 hosts.add(TestHost.createNew(users));
             } else {
                 hosts.add(TestHost.createFromExisting(hosts.get(0), userIndex));
             }
             return hosts.get(hosts.size() - 1);
         }
 
         @Override
-        public HostedRepository getHostedRepository(Host host) {
-            return host.getRepository("test");
+        public RepositoryHost createRepositoryHost(int userIndex) {
+            return createHost(userIndex);
         }
 
         @Override
-        public IssueProject getIssueProject(Host host) {
-            return host.getIssueProject("test");
+        public IssueHost createIssueHost(int userIndex) {
+            return createHost(userIndex);
+        }
+
+        @Override
+        public HostedRepository getHostedRepository(RepositoryHost host) {
+            return host.repository("test");
+        }
+
+        @Override
+        public IssueProject getIssueProject(IssueHost host) {
+            return host.project("test");
         }
 
         @Override
         public String getNamespaceName() {
             return "test";
@@ -178,12 +198,18 @@
             default:
                 throw new RuntimeException("Unknown entry type: " + entry.get("type").asString());
         }
     }
 
-    private Host getHost() {
-        var host = credentials.createNewHost(nextHostIndex);
+    private RepositoryHost getRepositoryHost() {
+        var host = credentials.createRepositoryHost(nextHostIndex);
+        nextHostIndex++;
+        return host;
+    }
+
+    private IssueHost getIssueHost() {
+        var host = credentials.createIssueHost(nextHostIndex);
         nextHostIndex++;
         return host;
     }
 
     public HostCredentials(TestInfo testInfo) throws IOException  {
@@ -207,11 +233,11 @@
         try (var tempFolder = new TemporaryDirectory()) {
             var repoFolder = tempFolder.path().resolve("lock");
             var lockFile = repoFolder.resolve("lock.txt");
             Repository localRepo;
             try {
-                localRepo = Repository.materialize(repoFolder, repo.getUrl(), "testlock");
+                localRepo = Repository.materialize(repoFolder, repo.url(), "testlock");
             } catch (IOException e) {
                 // If the branch does not exist, we'll try to create it
                 localRepo = Repository.init(repoFolder, VCS.GIT);
             }
 
@@ -226,11 +252,11 @@
                 }
             }
 
             // The lock either doesn't exist or is stale, try to grab it
             var lockHash = commitLock(localRepo);
-            localRepo.push(lockHash, repo.getUrl(), "testlock");
+            localRepo.push(lockHash, repo.url(), "testlock");
             log.info("Obtained credentials lock");
 
             // If no exception occurs (such as the push fails), we have obtained the lock
             return true;
         }
@@ -239,14 +265,14 @@
     private void releaseLock(HostedRepository repo) throws IOException {
         try (var tempFolder = new TemporaryDirectory()) {
             var repoFolder = tempFolder.path().resolve("lock");
             var lockFile = repoFolder.resolve("lock.txt");
             Repository localRepo;
-            localRepo = Repository.materialize(repoFolder, repo.getUrl(), "testlock");
+            localRepo = Repository.materialize(repoFolder, repo.url(), "testlock");
             localRepo.remove(lockFile);
             var lockHash = localRepo.commit("Unlock", "test", "test@test.test");
-            localRepo.push(lockHash, repo.getUrl(), "testlock");
+            localRepo.push(lockHash, repo.url(), "testlock");
         }
     }
 
     public Hash commitLock(Repository localRepo) throws IOException {
         var lockFile = localRepo.root().resolve("lock.txt");
@@ -256,11 +282,11 @@
         localRepo.branch(lockHash, "testlock");
         return lockHash;
     }
 
     public HostedRepository getHostedRepository() {
-        var host = getHost();
+        var host = getRepositoryHost();
         var repo = credentials.getHostedRepository(host);
 
         while (credentialsLock == null) {
             try {
                 if (getLock(repo)) {
@@ -275,11 +301,11 @@
         }
         return repo;
     }
 
     public IssueProject getIssueProject() {
-        var host = getHost();
+        var host = getIssueHost();
         return credentials.getIssueProject(host);
     }
 
     public PullRequest createPullRequest(HostedRepository hostedRepository, String targetRef, String sourceRef, String title, boolean draft) {
         var pr = hostedRepository.createPullRequest(hostedRepository, targetRef, sourceRef, title, List.of(), draft);
