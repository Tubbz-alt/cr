diff a/test/src/main/java/org/openjdk/skara/test/TestIssue.java b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssue.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
@@ -21,24 +21,24 @@
  * questions.
  */
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.host.network.URIBuilder;
+import org.openjdk.skara.network.URIBuilder;
 
 import java.net.URI;
 import java.time.ZonedDateTime;
 import java.util.*;
 
 public class TestIssue implements Issue {
     protected final String id;
     protected final IssueProject issueProject;
-    protected final HostUserDetails author;
-    protected final HostUserDetails user;
+    protected final HostUser author;
+    protected final HostUser user;
     protected final IssueData data;
 
-    protected TestIssue(TestIssueProject issueProject, String id, HostUserDetails author, HostUserDetails user, IssueData data) {
+    protected TestIssue(TestIssueProject issueProject, String id, HostUser author, HostUser user, IssueData data) {
         this.id = id;
         this.issueProject = issueProject;
         this.author = author;;
         this.user = user;
         this.data = data;
@@ -46,58 +46,58 @@
 
     static TestIssue createNew(TestIssueProject issueProject, String id, String title, List<String> body) {
         var data = new IssueData();
         data.title = title;
         data.body = String.join("\n", body);
-        var issue = new TestIssue(issueProject, id, issueProject.host().getCurrentUserDetails(), issueProject.host().getCurrentUserDetails(), data);
+        var issue = new TestIssue(issueProject, id, issueProject.host().currentUser(), issueProject.host().currentUser(), data);
         return issue;
     }
 
     static TestIssue createFrom(TestIssueProject issueProject, TestIssue other) {
-        var issue = new TestIssue(issueProject, other.id, other.author, issueProject.host().getCurrentUserDetails(), other.data);
+        var issue = new TestIssue(issueProject, other.id, other.author, issueProject.host().currentUser(), other.data);
         return issue;
     }
 
     @Override
     public IssueProject project() {
         return issueProject;
     }
 
     @Override
-    public String getId() {
+    public String id() {
         return id;
     }
 
     @Override
-    public HostUserDetails getAuthor() {
+    public HostUser author() {
         return author;
     }
 
     @Override
-    public String getTitle() {
+    public String title() {
         return data.title;
     }
 
     @Override
     public void setTitle(String title) {
         data.title = title;
         data.lastUpdate = ZonedDateTime.now();
     }
 
     @Override
-    public String getBody() {
+    public String body() {
         return data.body;
     }
 
     @Override
     public void setBody(String body) {
         data.body = body;
         data.lastUpdate = ZonedDateTime.now();
     }
 
     @Override
-    public List<Comment> getComments() {
+    public List<Comment> comments() {
         return new ArrayList<>(data.comments);
     }
 
     @Override
     public Comment addComment(String body) {
@@ -124,16 +124,16 @@
         data.lastUpdate = ZonedDateTime.now();
         return comment;
     }
 
     @Override
-    public ZonedDateTime getCreated() {
+    public ZonedDateTime createdAt() {
         return data.created;
     }
 
     @Override
-    public ZonedDateTime getUpdated() {
+    public ZonedDateTime updatedAt() {
         return data.lastUpdate;
     }
 
     @Override
     public void setState(State state) {
@@ -156,24 +156,24 @@
         data.labels.remove(label);
         data.lastUpdate = ZonedDateTime.now();
     }
 
     @Override
-    public List<String> getLabels() {
+    public List<String> labels() {
         return new ArrayList<>(data.labels);
     }
 
     @Override
-    public URI getWebUrl() {
-        return URIBuilder.base(issueProject.getWebUrl()).appendPath(id).build();
+    public URI webUrl() {
+        return URIBuilder.base(issueProject.webUrl()).appendPath(id).build();
     }
 
     @Override
-    public List<HostUserDetails> getAssignees() {
+    public List<HostUser> assignees() {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public void setAssignees(List<HostUserDetails> assignees) {
+    public void setAssignees(List<HostUser> assignees) {
         throw new RuntimeException("not implemented yet");
     }
 }
