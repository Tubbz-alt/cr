diff a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
@@ -42,106 +42,106 @@
     public TestHostedRepository(TestHost host, String projectName, Repository localRepository) {
         super(host, projectName);
         this.host = host;
         this.projectName = projectName;
         this.localRepository = localRepository;
-        pullRequestPattern = Pattern.compile(getUrl().toString() + "/pr/" + "(\\d+)");
+        pullRequestPattern = Pattern.compile(url().toString() + "/pr/" + "(\\d+)");
     }
 
     @Override
-    public Host host() {
+    public RepositoryHost host() {
         return host;
     }
 
     @Override
-    public Optional<HostedRepository> getParent() {
+    public Optional<HostedRepository> parent() {
         throw new RuntimeException("Not implemented yet");
     }
 
     @Override
     public PullRequest createPullRequest(HostedRepository target, String targetRef, String sourceRef, String title, List<String> body, boolean draft) {
         return host.createPullRequest(this, targetRef, sourceRef, title, body, draft);
     }
 
     @Override
-    public PullRequest getPullRequest(String id) {
+    public PullRequest pullRequest(String id) {
         return host.getPullRequest(this, id);
     }
 
     @Override
-    public List<PullRequest> getPullRequests() {
+    public List<PullRequest> pullRequests() {
         return new ArrayList<>(host.getPullRequests(this));
     }
 
     @Override
     public List<PullRequest> findPullRequestsWithComment(String author, String body) {
-        return getPullRequests().stream()
-                                .filter(pr -> pr.getComments().stream()
-                                        .filter(comment -> author == null || comment.author().userName().equals(author))
-                                        .filter(comment -> comment == null ||comment.body().contains(body))
-                                        .count() > 0
+        return pullRequests().stream()
+                             .filter(pr -> pr.comments().stream()
+                                                .filter(comment -> author == null || comment.author().userName().equals(author))
+                                                .filter(comment -> comment == null ||comment.body().contains(body))
+                                                .count() > 0
                                 )
-                                .collect(Collectors.toList());
+                             .collect(Collectors.toList());
     }
 
     @Override
     public Optional<PullRequest> parsePullRequestUrl(String url) {
         var matcher = pullRequestPattern.matcher(url);
         if (matcher.find()) {
-            return Optional.of(getPullRequest(matcher.group(1)));
+            return Optional.of(pullRequest(matcher.group(1)));
         } else {
             return Optional.empty();
         }
     }
 
     @Override
-    public String getName() {
+    public String name() {
         return projectName;
     }
 
     @Override
-    public URI getUrl() {
+    public URI url() {
         try {
             // We need a URL without a trailing slash
             var fileName = localRepository.root().getFileName().toString();
             return new URI(localRepository.root().getParent().toUri().toString() + fileName);
         } catch (IOException | URISyntaxException e) {
             throw new RuntimeException(e);
         }
     }
 
     @Override
-    public URI getWebUrl() {
-        return getUrl();
+    public URI webUrl() {
+        return url();
     }
 
     @Override
-    public URI getWebUrl(Hash hash) {
+    public URI webUrl(Hash hash) {
         try {
-            return new URI(getUrl().toString() + "/" + hash.hex());
+            return new URI(url().toString() + "/" + hash.hex());
         } catch (URISyntaxException e) {
             throw new RuntimeException(e);
         }
     }
 
     @Override
-    public VCS getRepositoryType() {
+    public VCS repositoryType() {
         return VCS.GIT;
     }
 
     @Override
-    public String getFileContents(String filename, String ref) {
+    public String fileContents(String filename, String ref) {
         try {
             var lines = localRepository.lines(Path.of(filename), localRepository.resolve(ref).orElseThrow());
             return String.join("\n", lines.orElseThrow());
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
     @Override
-    public String getNamespace() {
+    public String namespace() {
         return "test";
     }
 
     @Override
     public Optional<WebHook> parseWebHook(JSONValue body) {
@@ -152,16 +152,16 @@
     public HostedRepository fork() {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public long getId() {
+    public long id() {
         return 0L;
     }
 
     @Override
-    public Hash getBranchHash(String ref) {
+    public Hash branchHash(String ref) {
         try {
             var hash = localRepository.resolve(ref).orElseThrow();
             return hash;
         } catch (IOException e) {
             throw new RuntimeException(e);
