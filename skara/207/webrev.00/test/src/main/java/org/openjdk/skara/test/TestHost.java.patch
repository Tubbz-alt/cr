diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -29,16 +29,16 @@
 import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
 import java.util.*;
 import java.util.stream.Collectors;
 
-public class TestHost implements Host {
+public class TestHost implements RepositoryHost, IssueHost {
     private final int currentUser;
     private HostData data;
 
     private static class HostData {
-        final List<HostUserDetails> users = new ArrayList<>();
+        final List<HostUser> users = new ArrayList<>();
         final Map<String, Repository> repositories = new HashMap<>();
         final Map<String, IssueProject> issueProjects = new HashMap<>();
         final Set<TemporaryDirectory> folders = new HashSet<>();
         private final Map<String, TestPullRequest> pullRequests = new HashMap<>();
         private final Map<String, TestIssue> issues = new HashMap<>();
@@ -58,11 +58,11 @@
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
-    public static TestHost createNew(List<HostUserDetails> users) {
+    public static TestHost createNew(List<HostUser> users) {
         var data = new HostData();
         data.users.addAll(users);
         var host = new TestHost(data, 0);
         return host;
     }
@@ -81,11 +81,11 @@
     public boolean isValid() {
         return true;
     }
 
     @Override
-    public HostedRepository getRepository(String name) {
+    public HostedRepository repository(String name) {
         Repository localRepository;
         if (data.repositories.containsKey(name)) {
             localRepository = data.repositories.get(name);
         } else {
             if (data.repositories.size() > 0) {
@@ -96,11 +96,11 @@
         }
         return new TestHostedRepository(this, name, localRepository);
     }
 
     @Override
-    public IssueProject getIssueProject(String name) {
+    public IssueProject project(String name) {
         if (data.issueProjects.containsKey(name)) {
             return data.issueProjects.get(name);
         } else {
             if (data.issueProjects.size() > 0) {
                 throw new RuntimeException("A test host can only manage a single issue project");
@@ -110,29 +110,29 @@
             return issueProject;
         }
     }
 
     @Override
-    public HostUserDetails getUserDetails(String username) {
+    public HostUser user(String username) {
         return data.users.stream()
                     .filter(user -> user.userName().equals(username))
                     .findAny()
                     .orElseThrow();
     }
 
     @Override
-    public HostUserDetails getCurrentUserDetails() {
+    public HostUser currentUser() {
         return data.users.get(currentUser);
     }
 
     @Override
     public boolean supportsReviewBody() {
         return true;
     }
 
     @Override
-    public boolean isMemberOf(String groupId, HostUserDetails user) {
+    public boolean isMemberOf(String groupId, HostUser user) {
         return false;
     }
 
     void close() {
         if (currentUser == 0) {
