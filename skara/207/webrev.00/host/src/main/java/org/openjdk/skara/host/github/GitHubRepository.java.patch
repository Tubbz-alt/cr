diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.host.github;
 
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.host.network.*;
+import org.openjdk.skara.network.*;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.vcs.*;
 
 import java.net.URI;
 import java.nio.charset.StandardCharsets;
@@ -58,35 +58,35 @@
         var urlPattern = gitHubHost.getWebURI("/" + repository + "/pull/").toString();
         pullRequestPattern = Pattern.compile(urlPattern + "(\\d+)");
     }
 
     @Override
-    public Optional<HostedRepository> getParent() {
+    public Optional<HostedRepository> parent() {
         if (json.get("fork").asBoolean()) {
             var parent = json.get("parent").get("full_name").asString();
             return Optional.of(new GitHubRepository(gitHubHost, parent));
         }
         return Optional.empty();
     }
 
     @Override
-    public Host host() {
+    public RepositoryHost host() {
         return gitHubHost;
     }
 
     @Override
     public Issue createIssue(String title, List<String> body) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public Optional<Issue> getIssue(String id) {
+    public Optional<Issue> issue(String id) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public List<Issue> getIssues() {
+    public List<Issue> issues() {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
     public PullRequest createPullRequest(HostedRepository target,
@@ -98,11 +98,11 @@
         if (!(target instanceof GitHubRepository)) {
             throw new IllegalArgumentException("target repository must be a GitHub repository");
         }
 
         var upstream = (GitHubRepository) target;
-        var user = host().getCurrentUserDetails().userName();
+        var user = host().currentUser().userName();
         var namespace = user.endsWith("[bot]") ? "" : user + ":";
         var params = JSON.object()
                          .put("title", title)
                          .put("head", namespace + sourceRef)
                          .put("base", targetRef)
@@ -114,17 +114,17 @@
 
         return new GitHubPullRequest(upstream, pr, request);
     }
 
     @Override
-    public PullRequest getPullRequest(String id) {
+    public PullRequest pullRequest(String id) {
         var pr = request.get("pulls/" + id).execute();
         return new GitHubPullRequest(this, pr, request);
     }
 
     @Override
-    public List<PullRequest> getPullRequests() {
+    public List<PullRequest> pullRequests() {
         return request.get("pulls").execute().asArray().stream()
                       .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))
                       .collect(Collectors.toList());
     }
 
@@ -142,60 +142,60 @@
 
     @Override
     public Optional<PullRequest> parsePullRequestUrl(String url) {
         var matcher = pullRequestPattern.matcher(url);
         if (matcher.find()) {
-            return Optional.of(getPullRequest(matcher.group(1)));
+            return Optional.of(pullRequest(matcher.group(1)));
         } else {
             return Optional.empty();
         }
     }
 
     @Override
-    public String getName() {
+    public String name() {
         return repository;
     }
 
     @Override
-    public URI getUrl() {
+    public URI url() {
         return URIBuilder
                 .base(gitHubHost.getURI())
                 .setPath("/" + repository + ".git")
                 .setAuthentication("x-access-token:" + gitHubHost.getInstallationToken())
                 .build();
     }
 
     @Override
-    public URI getWebUrl() {
+    public URI webUrl() {
         var endpoint = "/" + repository;
         return gitHubHost.getWebURI(endpoint);
     }
 
     @Override
-    public URI getWebUrl(Hash hash) {
+    public URI webUrl(Hash hash) {
         var endpoint = "/" + repository + "/commit/" + hash.abbreviate();
         return gitHubHost.getWebURI(endpoint);
     }
 
     @Override
-    public VCS getRepositoryType() {
+    public VCS repositoryType() {
         return VCS.GIT;
     }
 
     @Override
-    public String getFileContents(String filename, String ref) {
+    public String fileContents(String filename, String ref) {
         var conf = request.get("contents/" + filename)
                           .param("ref", ref)
                           .execute().asObject();
         // Content may contain newline characters
         return conf.get("content").asString().lines()
                    .map(line -> new String(Base64.getDecoder().decode(line), StandardCharsets.UTF_8))
                    .collect(Collectors.joining());
     }
 
     @Override
-    public String getNamespace() {
+    public String namespace() {
         return URIBuilder.base(gitHubHost.getURI()).build().getHost();
     }
 
     @Override
     public Optional<WebHook> parseWebHook(JSONValue body) {
@@ -203,19 +203,19 @@
     }
 
     @Override
     public HostedRepository fork() {
         var response = request.post("forks").execute();
-        return gitHubHost.getRepository(response.get("full_name").asString());
+        return gitHubHost.repository(response.get("full_name").asString());
     }
 
     @Override
-    public long getId() {
+    public long id() {
         return json.get("id").asLong();
     }
 
     @Override
-    public Hash getBranchHash(String ref) {
+    public Hash branchHash(String ref) {
         var branch = request.get("branches/" + ref).execute();
         return new Hash(branch.get("commit").get("sha").asString());
     }
 }
