diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
+++ b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
@@ -21,18 +21,18 @@
  * questions.
  */
 package org.openjdk.skara.host.gitlab;
 
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.host.network.*;
+import org.openjdk.skara.network.*;
 import org.openjdk.skara.json.*;
 
 import java.net.*;
 import java.nio.charset.StandardCharsets;
 import java.util.*;
 
-public class GitLabHost implements Host {
+public class GitLabHost implements RepositoryHost {
     private final URI uri;
     private final PersonalAccessToken pat;
     private final RestRequest request;
 
     public GitLabHost(URI uri, PersonalAccessToken pat) {
@@ -86,38 +86,33 @@
         }
         return project.asObject();
     }
 
     @Override
-    public HostedRepository getRepository(String name) {
+    public HostedRepository repository(String name) {
         return new GitLabRepository(this, name);
     }
 
-    @Override
-    public IssueProject getIssueProject(String name) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    private HostUserDetails parseUserDetails(JSONObject details) {
+    private HostUser parseUserDetails(JSONObject details) {
         var id = details.get("id").asInt();
         var username = details.get("username").asString();
         var name = details.get("name").asString();
-        return new HostUserDetails(id, username, name);
+        return new HostUser(id, username, name);
     }
 
     @Override
-    public HostUserDetails getUserDetails(String username) {
+    public HostUser user(String username) {
         var details = request.get("users").param("username", username).execute().asArray();
         if (details.size() != 1) {
             throw new RuntimeException("Couldn't find user: " + username);
         }
 
         return parseUserDetails(details.get(0).asObject());
     }
 
     @Override
-    public HostUserDetails getCurrentUserDetails() {
+    public HostUser currentUser() {
         var details = request.get("user").execute().asObject();
         return parseUserDetails(details);
     }
 
     @Override
@@ -142,11 +137,11 @@
             throw new RuntimeException("Project does not seem to be a fork");
         }
     }
 
     @Override
-    public boolean isMemberOf(String groupId, HostUserDetails user) {
+    public boolean isMemberOf(String groupId, HostUser user) {
         long gid = 0L;
         try {
             gid = Long.parseLong(groupId);
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("Group id is not a number: " + groupId);
