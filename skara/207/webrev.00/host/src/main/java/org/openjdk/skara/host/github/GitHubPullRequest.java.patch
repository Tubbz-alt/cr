diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.host.github;
 
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.host.network.*;
+import org.openjdk.skara.network.*;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.vcs.Hash;
 
 import java.net.URI;
 import java.time.*;
@@ -57,21 +57,21 @@
     public IssueProject project() {
         return repository;
     }
 
     @Override
-    public String getId() {
+    public String id() {
         return json.get("number").toString();
     }
 
     @Override
-    public HostUserDetails getAuthor() {
+    public HostUser author() {
         return host.parseUserField(json);
     }
 
     @Override
-    public List<Review> getReviews() {
+    public List<Review> reviews() {
         var reviews = request.get("pulls/" + json.get("number").toString() + "/reviews").execute().stream()
                              .map(JSONValue::asObject)
                              .filter(obj -> !(obj.get("state").asString().equals("COMMENTED") && obj.get("body").asString().isEmpty()))
                              .map(obj -> {
                                  var reviewer = host.parseUserField(obj);
@@ -165,11 +165,11 @@
                 .execute();
         return parseReviewComment(parent, response.asObject(), diff);
     }
 
     @Override
-    public List<ReviewComment> getReviewComments() {
+    public List<ReviewComment> reviewComments() {
         var rawDiff = request.get("pulls/" + json.get("number").toString())
                           .header("Accept", "application/vnd.github.v3.diff")
                           .executeUnparsed();
         var diff = PositionMapper.parse(rawDiff);
 
@@ -191,41 +191,41 @@
 
         return ret;
     }
 
     @Override
-    public Hash getHeadHash() {
+    public Hash headHash() {
         return new Hash(json.get("head").get("sha").asString());
     }
 
     @Override
-    public String getSourceRef() {
-        return "pull/" + getId() + "/head";
+    public String sourceRef() {
+        return "pull/" + id() + "/head";
     }
 
     @Override
-    public String getTargetRef() {
+    public String targetRef() {
         return json.get("base").get("ref").asString();
     }
 
     @Override
-    public Hash getTargetHash() {
-        return repository.getBranchHash(getTargetRef());
+    public Hash targetHash() {
+        return repository.branchHash(targetRef());
     }
 
     @Override
-    public String getTitle() {
+    public String title() {
         return json.get("title").asString();
     }
 
     @Override
     public void setTitle(String title) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public String getBody() {
+    public String body() {
         var body = json.get("body").asString();
         if (body == null) {
             body = "";
         }
         return body;
@@ -246,11 +246,11 @@
                               ZonedDateTime.parse(comment.get("updated_at").asString()));
         return ret;
     }
 
     @Override
-    public List<Comment> getComments() {
+    public List<Comment> comments() {
         return request.get("issues/" + json.get("number").toString() + "/comments").execute().stream()
                 .map(this::parseComment)
                 .collect(Collectors.toList());
     }
 
@@ -269,21 +269,21 @@
                 .execute();
         return parseComment(comment);
     }
 
     @Override
-    public ZonedDateTime getCreated() {
+    public ZonedDateTime createdAt() {
         return ZonedDateTime.parse(json.get("created_at").asString());
     }
 
     @Override
-    public ZonedDateTime getUpdated() {
+    public ZonedDateTime updatedAt() {
         return ZonedDateTime.parse(json.get("updated_at").asString());
     }
 
     @Override
-    public Map<String, Check> getChecks(Hash hash) {
+    public Map<String, Check> checks(Hash hash) {
         var checks = request.get("commits/" + hash.hex() + "/check-runs").execute();
 
         return checks.get("check_runs").stream()
                 .collect(Collectors.toMap(c -> c.get("name").asString(),
                         c -> {
@@ -388,17 +388,17 @@
 
         request.post("check-runs").body(completedQuery).execute();
     }
 
     @Override
-    public URI getChangeUrl() {
-        return URIBuilder.base(getWebUrl()).appendPath("/files").build();
+    public URI changeUrl() {
+        return URIBuilder.base(webUrl()).appendPath("/files").build();
     }
 
     @Override
-    public URI getChangeUrl(Hash base) {
-        return URIBuilder.base(getWebUrl()).appendPath("/files/" + base.abbreviate() + ".." + getHeadHash().abbreviate()).build();
+    public URI changeUrl(Hash base) {
+        return URIBuilder.base(webUrl()).appendPath("/files/" + base.abbreviate() + ".." + headHash().abbreviate()).build();
     }
 
     @Override
     public boolean isDraft() {
         return json.get("draft").asBoolean();
@@ -431,40 +431,40 @@
                })
                .execute();
     }
 
     @Override
-    public List<String> getLabels() {
+    public List<String> labels() {
         return request.get("issues/" + json.get("number").toString() + "/labels").execute().stream()
                       .map(JSONValue::asObject)
                       .map(obj -> obj.get("name").asString())
                       .sorted()
                       .collect(Collectors.toList());
     }
 
     @Override
-    public URI getWebUrl() {
+    public URI webUrl() {
         var host = (GitHubHost)repository.host();
-        var endpoint = "/" + repository.getName() + "/pull/" + getId();
+        var endpoint = "/" + repository.name() + "/pull/" + id();
         return host.getWebURI(endpoint);
     }
 
     @Override
     public String toString() {
-        return "GitHubPullRequest #" + getId() + " by " + getAuthor();
+        return "GitHubPullRequest #" + id() + " by " + author();
     }
 
     @Override
-    public List<HostUserDetails> getAssignees() {
+    public List<HostUser> assignees() {
         return json.get("assignees").asArray()
                                     .stream()
                                     .map(host::parseUserObject)
                                     .collect(Collectors.toList());
     }
 
     @Override
-    public void setAssignees(List<HostUserDetails> assignees) {
+    public void setAssignees(List<HostUser> assignees) {
         var assignee_ids = JSON.array();
         for (var assignee : assignees) {
             assignee_ids.add(assignee.userName());
         }
         var param = JSON.object().put("assignees", assignee_ids);
