diff a/host/src/main/java/org/openjdk/skara/host/jira/JiraIssue.java b/host/src/main/java/org/openjdk/skara/host/jira/JiraIssue.java
--- a/host/src/main/java/org/openjdk/skara/host/jira/JiraIssue.java
+++ b/host/src/main/java/org/openjdk/skara/host/jira/JiraIssue.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.host.jira;
 
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.host.network.*;
+import org.openjdk.skara.network.*;
 import org.openjdk.skara.json.JSONValue;
 
 import java.net.URI;
 import java.time.ZonedDateTime;
 import java.util.List;
@@ -45,33 +45,33 @@
     public IssueProject project() {
         return jiraProject;
     }
 
     @Override
-    public String getId() {
+    public String id() {
         return json.get("key").asString();
     }
 
     @Override
-    public HostUserDetails getAuthor() {
-        return new HostUserDetails(json.get("fields").get("creator").get("key").asString(),
-                                   json.get("fields").get("creator").get("name").asString(),
-                                   json.get("fields").get("creator").get("displayName").asString());
+    public HostUser author() {
+        return new HostUser(json.get("fields").get("creator").get("key").asString(),
+                            json.get("fields").get("creator").get("name").asString(),
+                            json.get("fields").get("creator").get("displayName").asString());
     }
 
     @Override
-    public String getTitle() {
+    public String title() {
         return json.get("fields").get("summary").asString();
     }
 
     @Override
     public void setTitle(String title) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public String getBody() {
+    public String body() {
         if (json.get("fields").get("description").isNull()) {
             return "";
         } else {
             return json.get("fields").get("description").asString();
         }
@@ -81,11 +81,11 @@
     public void setBody(String body) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public List<Comment> getComments() {
+    public List<Comment> comments() {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
     public Comment addComment(String body) {
@@ -96,16 +96,16 @@
     public Comment updateComment(String id, String body) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public ZonedDateTime getCreated() {
+    public ZonedDateTime createdAt() {
         return ZonedDateTime.parse(json.get("fields").get("created").asString());
     }
 
     @Override
-    public ZonedDateTime getUpdated() {
+    public ZonedDateTime updatedAt() {
         return ZonedDateTime.parse(json.get("fields").get("updated").asString());
     }
 
     @Override
     public void setState(State state) {
@@ -121,26 +121,26 @@
     public void removeLabel(String label) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public List<String> getLabels() {
+    public List<String> labels() {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public URI getWebUrl() {
-        return URIBuilder.base(jiraProject.getWebUrl())
-                         .setPath("/browse/" + getId())
+    public URI webUrl() {
+        return URIBuilder.base(jiraProject.webUrl())
+                         .setPath("/browse/" + id())
                          .build();
     }
 
     @Override
-    public List<HostUserDetails> getAssignees() {
+    public List<HostUser> assignees() {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public void setAssignees(List<HostUserDetails> assignees) {
+    public void setAssignees(List<HostUser> assignees) {
         throw new RuntimeException("not implemented yet");
     }
 }
