diff a/host/src/main/java/org/openjdk/skara/host/jira/JiraProject.java b/host/src/main/java/org/openjdk/skara/host/jira/JiraProject.java
--- a/host/src/main/java/org/openjdk/skara/host/jira/JiraProject.java
+++ b/host/src/main/java/org/openjdk/skara/host/jira/JiraProject.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.host.jira;
 
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.host.network.*;
+import org.openjdk.skara.network.*;
 import org.openjdk.skara.json.JSON;
 
 import java.net.URI;
 import java.util.*;
 
@@ -44,21 +44,21 @@
     public Host host() {
         return jiraHost;
     }
 
     @Override
-    public URI getWebUrl() {
+    public URI webUrl() {
         return URIBuilder.base(jiraHost.getUri()).setPath("/projects/" + projectName).build();
     }
 
     @Override
     public Issue createIssue(String title, List<String> body) {
         throw new RuntimeException("needs authentication; not implemented yet");
     }
 
     @Override
-    public Optional<Issue> getIssue(String id) {
+    public Optional<Issue> issue(String id) {
         if (id.indexOf('-') < 0) {
             id = projectName.toUpperCase() + "-" + id;
         }
         var issue = request.get("issue/" + id)
                            .onError(r -> r.statusCode() == 404 ? JSON.object().put("NOT_FOUND", true) : null)
@@ -69,11 +69,11 @@
             return Optional.empty();
         }
     }
 
     @Override
-    public List<Issue> getIssues() {
+    public List<Issue> issues() {
         var ret = new ArrayList<Issue>();
         var issues = request.post("search")
                             .body("jql", "project = " + projectName + " AND status in (Open, New)")
                             .execute();
         for (var issue : issues.get("issues").asArray()) {
