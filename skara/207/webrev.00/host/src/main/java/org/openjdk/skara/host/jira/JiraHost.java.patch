diff a/host/src/main/java/org/openjdk/skara/host/jira/JiraHost.java b/host/src/main/java/org/openjdk/skara/host/jira/JiraHost.java
--- a/host/src/main/java/org/openjdk/skara/host/jira/JiraHost.java
+++ b/host/src/main/java/org/openjdk/skara/host/jira/JiraHost.java
@@ -21,16 +21,16 @@
  * questions.
  */
 package org.openjdk.skara.host.jira;
 
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.host.network.*;
+import org.openjdk.skara.network.*;
 import org.openjdk.skara.json.JSON;
 
 import java.net.URI;
 
-public class JiraHost implements Host {
+public class JiraHost implements IssueHost {
     private final URI uri;
     private final RestRequest request;
 
     public JiraHost(URI uri) {
         this.uri = uri;
@@ -52,34 +52,24 @@
                              .execute();
         return !version.contains("invalid");
     }
 
     @Override
-    public HostedRepository getRepository(String name) {
-        throw new RuntimeException("Jira does not support repositories");
-    }
-
-    @Override
-    public IssueProject getIssueProject(String name) {
+    public IssueProject project(String name) {
         return new JiraProject(this, request, name);
     }
 
     @Override
-    public HostUserDetails getUserDetails(String username) {
+    public HostUser user(String username) {
         throw new RuntimeException("needs authentication; not implemented yet");
     }
 
     @Override
-    public HostUserDetails getCurrentUserDetails() {
+    public HostUser currentUser() {
         throw new RuntimeException("needs authentication; not implemented yet");
     }
 
     @Override
-    public boolean supportsReviewBody() {
-        return false;
-    }
-
-    @Override
-    public boolean isMemberOf(String groupId, HostUserDetails user) {
+    public boolean isMemberOf(String groupId, HostUser user) {
         throw new RuntimeException("not implemented yet");
     }
 }
