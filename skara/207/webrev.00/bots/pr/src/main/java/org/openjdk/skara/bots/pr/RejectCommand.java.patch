diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/RejectCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/RejectCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/RejectCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/RejectCommand.java
@@ -29,29 +29,29 @@
 import java.util.List;
 
 public class RejectCommand implements CommandHandler {
     @Override
     public void handle(PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
-        if (pr.getAuthor().equals(comment.author())) {
+        if (pr.author().equals(comment.author())) {
             reply.println("You can't reject your own changes.");
             return;
         }
         if (!ProjectPermissions.mayReview(censusInstance, comment.author())) {
             reply.println("Only [Reviewers](http://openjdk.java.net/bylaws#reviewer) are allowed to reject changes.");
             return;
         }
 
-        var botUser = pr.repository().host().getCurrentUserDetails();
+        var botUser = pr.repository().host().currentUser();
         var vetoers = Veto.vetoers(botUser, allComments);
 
         if (vetoers.contains(comment.author().id())) {
             reply.println("You have already rejected this change.");
             return;
         }
 
         // Notify the author as well
-        reply.print("@" + pr.getAuthor().userName() + " ");
+        reply.print("@" + pr.author().userName() + " ");
 
         reply.println("This change cannot be integrated while the rejection is in place. To lift the rejection, ");
         reply.println("issue an allow command: `/allow`");
 
         reply.println(Veto.addVeto(comment.author()));
