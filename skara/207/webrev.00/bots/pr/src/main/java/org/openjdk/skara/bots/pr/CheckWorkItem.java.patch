diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
@@ -52,11 +52,11 @@
         this.censusRef = censusRef;
         this.blockingLabels = blockingLabels;
         this.issueProject = issueProject;
     }
 
-    private String encodeReviewer(HostUserDetails reviewer, CensusInstance censusInstance) {
+    private String encodeReviewer(HostUser reviewer, CensusInstance censusInstance) {
         var census = censusInstance.census();
         var project = censusInstance.project();
         var namespace = censusInstance.namespace();
         var contributor = namespace.get(reviewer.id());
         if (contributor == null) {
@@ -77,11 +77,11 @@
                                         .filter(review -> review.verdict() == Review.Verdict.APPROVED)
                                         .map(review -> encodeReviewer(review.reviewer(), censusInstance) + review.hash().hex())
                                         .sorted()
                                         .collect(Collectors.joining());
             var commentString = comments.stream()
-                                        .filter(comment -> comment.author().id().equals(pr.repository().host().getCurrentUserDetails().id()))
+                                        .filter(comment -> comment.author().id().equals(pr.repository().host().currentUser().id()))
                                         .flatMap(comment -> comment.body().lines())
                                         .filter(line -> metadataComments.matcher(line).find())
                                         .collect(Collectors.joining());
             var labelString = labels.stream()
                                     .sorted()
@@ -99,14 +99,14 @@
             throw new RuntimeException("Cannot find SHA-256");
         }
     }
 
     private boolean currentCheckValid(CensusInstance censusInstance, List<Comment> comments, List<Review> reviews, Set<String> labels) {
-        var hash = pr.getHeadHash();
-        var targetHash = pr.getTargetHash();
-        var metadata = getMetadata(pr.getTitle(), pr.getBody(),comments, reviews, labels, censusInstance, targetHash);
-        var currentChecks = pr.getChecks(hash);
+        var hash = pr.headHash();
+        var targetHash = pr.targetHash();
+        var metadata = getMetadata(pr.title(), pr.body(), comments, reviews, labels, censusInstance, targetHash);
+        var currentChecks = pr.checks(hash);
 
         if (currentChecks.containsKey("jcheck")) {
             var check = currentChecks.get("jcheck");
             // Check if the currently running check seems stale - perhaps the checker failed to complete
             if (check.completedAt().isEmpty()) {
@@ -133,20 +133,20 @@
         return false;
     }
 
     @Override
     public String toString() {
-        return "CheckWorkItem@" + pr.repository().getName() + "#" + pr.getId();
+        return "CheckWorkItem@" + pr.repository().name() + "#" + pr.id();
     }
 
     @Override
     public void run(Path scratchPath) {
         // First determine if the current state of the PR has already been checked
         var census = CensusInstance.create(censusRepo, censusRef, scratchPath.resolve("census"), pr);
-        var comments = pr.getComments();
-        var allReviews = pr.getReviews();
-        var labels = new HashSet<>(pr.getLabels());
+        var comments = pr.comments();
+        var allReviews = pr.reviews();
+        var labels = new HashSet<>(pr.labels());
 
         // Filter out the active reviews
         var activeReviews = PullRequestInstance.filterActiveReviews(allReviews);
         if (!currentCheckValid(census, comments, activeReviews, labels)) {
             if (labels.contains("integrated")) {
