diff a/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java b/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
--- a/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
+++ b/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.hgbridge;
 
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.host.network.URIBuilder;
+import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.process.Process;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Tag;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.convert.*;
@@ -65,11 +65,11 @@
 
         TestExporterConfig(URI source, HostedRepository destination, Path marksRepoPath) throws IOException {
             this.source(source);
             this.destinations(List.of(destination));
 
-            var host = TestHost.createNew(List.of(new HostUserDetails(0, "duke", "J. Duke")));
+            var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
             var marksLocalRepo = Repository.init(marksRepoPath.resolve("marks.git"), VCS.GIT);
 
             var initialFile = marksLocalRepo.root().resolve("init.txt");
             if (!Files.exists(initialFile)) {
                 Files.writeString(initialFile, "Hello", StandardCharsets.UTF_8);
@@ -168,11 +168,11 @@
             var bridge = new JBridgeBot(config, storageFolder.path());
 
             runHgCommand(localHgRepo, "strip", "-r", "bd7a3ed1210f");
             TestBotRunner.runPeriodicItems(bridge);
 
-            var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.getUrl(), "master");
+            var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.url(), "master");
 
             // Only a subset of known tags should be present
             var localGitTags = getTagNames(localGitRepo);
             assertEquals(getTagNames(localHgRepo), localGitTags);
             assertTrue(localGitTags.contains("jtreg4.1-b02"));
@@ -181,26 +181,26 @@
             // Import more revisions into the local hg repository and export again
             localHgRepo.fetch(source, "default");
             TestBotRunner.runPeriodicItems(bridge);
 
             // There should now be more tags present
-            Repository.materialize(gitFolder.path(), destinationRepo.getUrl(), "master");
+            Repository.materialize(gitFolder.path(), destinationRepo.url(), "master");
             localGitTags = getTagNames(localGitRepo);
             assertEquals(getTagNames(localHgRepo), localGitTags);
             assertTrue(localGitTags.contains("jtreg4.1-b02"));
             assertTrue(localGitTags.contains("jtreg4.1-b05"));
 
             // Export it again with different storage to force an export from scratch
             bridge = new JBridgeBot(config, storageFolder2.path());
             TestBotRunner.runPeriodicItems(bridge);
-            Repository.materialize(gitFolder.path(), destinationRepo.getUrl(), "master");
+            Repository.materialize(gitFolder.path(), destinationRepo.url(), "master");
             var newLocalGitTags = getTagNames(localGitRepo);
             assertEquals(localGitTags, newLocalGitTags);
 
             // Export it once more when nothing has changed
             TestBotRunner.runPeriodicItems(bridge);
-            Repository.materialize(gitFolder.path(), destinationRepo.getUrl(), "master");
+            Repository.materialize(gitFolder.path(), destinationRepo.url(), "master");
             newLocalGitTags = getTagNames(localGitRepo);
             assertEquals(localGitTags, newLocalGitTags);
         }
     }
 
@@ -216,11 +216,11 @@
             var config = new TestExporterConfig(source, destinationRepo, marksFolder.path());
             var bridge = new JBridgeBot(config, storageFolder.path());
             TestBotRunner.runPeriodicItems(bridge);
 
             // Materialize it and ensure that it contains a known commit
-            var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.getUrl(), "master");
+            var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.url(), "master");
             var localGitCommits = getCommitHashes(localGitRepo);
             assertTrue(localGitCommits.contains("9cb6a5b843c0e9f6d45273a1a6f5c98979ab0766"));
 
             // Now corrupt the .hg folder in the permanent storage
             Files.walk(storageFolder.path())
@@ -234,11 +234,11 @@
                      }
                  });
 
             // Now export it again - should still be intact
             TestBotRunner.runPeriodicItems(bridge);
-            Repository.materialize(gitFolder.path(), destinationRepo.getUrl(), "master");
+            Repository.materialize(gitFolder.path(), destinationRepo.url(), "master");
             localGitCommits = getCommitHashes(localGitRepo);
             assertTrue(localGitCommits.contains("9cb6a5b843c0e9f6d45273a1a6f5c98979ab0766"));
         }
     }
 
@@ -261,11 +261,11 @@
             config = new TestExporterConfig(source, destinationRepo, marksFolder.path());
             var goodBridge = new JBridgeBot(config, storageFolder2.path());
             TestBotRunner.runPeriodicItems(goodBridge);
 
             // Verify that it now contains a known commit
-            var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.getUrl(), "master");
+            var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.url(), "master");
             var localGitCommits = getCommitHashes(localGitRepo);
             assertTrue(localGitCommits.contains("9cb6a5b843c0e9f6d45273a1a6f5c98979ab0766"));
         }
     }
 
@@ -284,29 +284,29 @@
             // Export an hg repository as is
             var bridge = new JBridgeBot(config, storageFolder.path());
             TestBotRunner.runPeriodicItems(bridge);
 
             // Materialize it and ensure that it contains a known commit
-            var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.getUrl(), "master");
+            var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.url(), "master");
             var localGitCommits = getCommitHashes(localGitRepo);
             assertTrue(localGitCommits.contains("9cb6a5b843c0e9f6d45273a1a6f5c98979ab0766"));
 
             // Push something else to overwrite it (but retain the lock)
-            var localRepo = CheckableRepository.init(gitFolder2.path(), destinationRepo.getRepositoryType());
+            var localRepo = CheckableRepository.init(gitFolder2.path(), destinationRepo.repositoryType());
             credentials.commitLock(localRepo);
-            localRepo.pushAll(destinationRepo.getUrl());
+            localRepo.pushAll(destinationRepo.url());
 
             // Materialize it again and ensure that the known commit is now gone
-            localGitRepo = Repository.materialize(gitFolder3.path(), destinationRepo.getUrl(), "master");
+            localGitRepo = Repository.materialize(gitFolder3.path(), destinationRepo.url(), "master");
             localGitCommits = getCommitHashes(localGitRepo);
             assertFalse(localGitCommits.contains("9cb6a5b843c0e9f6d45273a1a6f5c98979ab0766"));
 
             // Now run the exporter again - nothing should happen
             TestBotRunner.runPeriodicItems(bridge);
 
             // Materialize it yet again and ensure that the known commit is still gone
-            localGitRepo = Repository.materialize(gitFolder4.path(), destinationRepo.getUrl(), "master");
+            localGitRepo = Repository.materialize(gitFolder4.path(), destinationRepo.url(), "master");
             localGitCommits = getCommitHashes(localGitRepo);
             assertFalse(localGitCommits.contains("9cb6a5b843c0e9f6d45273a1a6f5c98979ab0766"));
         }
     }
 
@@ -326,28 +326,28 @@
             // Export an hg repository as is
             var bridge = new JBridgeBot(config, storageFolder.path());
             TestBotRunner.runPeriodicItems(bridge);
 
             // Materialize it and ensure that it contains a known commit
-            var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.getUrl(), "master");
+            var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.url(), "master");
             var localGitCommits = getCommitHashes(localGitRepo);
             assertTrue(localGitCommits.contains("9cb6a5b843c0e9f6d45273a1a6f5c98979ab0766"));
 
             // Push something else to overwrite it
-            var localRepo = CheckableRepository.init(gitFolder2.path(), destinationRepo.getRepositoryType());
-            localRepo.pushAll(destinationRepo.getUrl());
+            var localRepo = CheckableRepository.init(gitFolder2.path(), destinationRepo.repositoryType());
+            localRepo.pushAll(destinationRepo.url());
 
             // Materialize it again and ensure that the known commit is now gone
-            localGitRepo = Repository.materialize(gitFolder3.path(), destinationRepo.getUrl(), "master");
+            localGitRepo = Repository.materialize(gitFolder3.path(), destinationRepo.url(), "master");
             localGitCommits = getCommitHashes(localGitRepo);
             assertFalse(localGitCommits.contains("9cb6a5b843c0e9f6d45273a1a6f5c98979ab0766"));
 
             // Now run the exporter again - nothing should happen
             TestBotRunner.runPeriodicItems(bridge);
 
             // Materialize it yet again and ensure that the known commit is still gone
-            localGitRepo = Repository.materialize(gitFolder4.path(), destinationRepo.getUrl(), "master");
+            localGitRepo = Repository.materialize(gitFolder4.path(), destinationRepo.url(), "master");
             localGitCommits = getCommitHashes(localGitRepo);
             assertFalse(localGitCommits.contains("9cb6a5b843c0e9f6d45273a1a6f5c98979ab0766"));
 
             // Remove the successful push markers
             Files.walk(storageFolder.path())
@@ -363,11 +363,11 @@
 
             // Now run the exporter again - it should do the push again
             TestBotRunner.runPeriodicItems(bridge);
 
             // Materialize it and ensure that the known commit is back
-            localGitRepo = Repository.materialize(gitFolder5.path(), destinationRepo.getUrl(), "master");
+            localGitRepo = Repository.materialize(gitFolder5.path(), destinationRepo.url(), "master");
             localGitCommits = getCommitHashes(localGitRepo);
             assertTrue(localGitCommits.contains("9cb6a5b843c0e9f6d45273a1a6f5c98979ab0766"));
         }
     }
 
