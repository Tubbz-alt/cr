diff a/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java b/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
--- a/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
+++ b/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
@@ -40,11 +40,11 @@
 
 class MergeBotTests {
     @Test
     void mergeMasterBranch(TestInfo testInfo) throws IOException {
         try (var temp = new TemporaryDirectory()) {
-            var host = TestHost.createNew(List.of(new HostUserDetails(0, "duke", "J. Duke")));
+            var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
@@ -100,18 +100,18 @@
             assertTrue(merge.isMerge());
             assertEquals(List.of("Merge"), merge.message());
             assertEquals("duke", merge.author().name());
             assertEquals("duke@openjdk.org", merge.author().email());
 
-            assertEquals(0, toHostedRepo.getPullRequests().size());
+            assertEquals(0, toHostedRepo.pullRequests().size());
         }
     }
 
     @Test
     void failingMergeTest(TestInfo testInfo) throws IOException {
         try (var temp = new TemporaryDirectory()) {
-            var host = TestHost.createNew(List.of(new HostUserDetails(0, "duke", "J. Duke")));
+            var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
@@ -159,21 +159,21 @@
             assertEquals(2, toCommits.size());
             var toHashes = toCommits.stream().map(Commit::hash).collect(Collectors.toSet());
             assertTrue(toHashes.contains(toHashA));
             assertTrue(toHashes.contains(toHashB));
 
-            var pullRequests = toHostedRepo.getPullRequests();
+            var pullRequests = toHostedRepo.pullRequests();
             assertEquals(1, pullRequests.size());
             var pr = pullRequests.get(0);
-            assertEquals("Cannot automatically merge test:master", pr.getTitle());
+            assertEquals("Cannot automatically merge test:master", pr.title());
         }
     }
 
     @Test
     void failingMergeShouldResultInOnlyOnePR(TestInfo testInfo) throws IOException {
         try (var temp = new TemporaryDirectory()) {
-            var host = TestHost.createNew(List.of(new HostUserDetails(0, "duke", "J. Duke")));
+            var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
@@ -222,21 +222,21 @@
             assertEquals(2, toCommits.size());
             var toHashes = toCommits.stream().map(Commit::hash).collect(Collectors.toSet());
             assertTrue(toHashes.contains(toHashA));
             assertTrue(toHashes.contains(toHashB));
 
-            var pullRequests = toHostedRepo.getPullRequests();
+            var pullRequests = toHostedRepo.pullRequests();
             assertEquals(1, pullRequests.size());
             var pr = pullRequests.get(0);
-            assertEquals("Cannot automatically merge test:master", pr.getTitle());
+            assertEquals("Cannot automatically merge test:master", pr.title());
         }
     }
 
     @Test
     void resolvedMergeConflictShouldResultInClosedPR(TestInfo testInfo) throws IOException {
         try (var temp = new TemporaryDirectory(false)) {
-            var host = TestHost.createNew(List.of(new HostUserDetails(0, "duke", "J. Duke")));
+            var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
@@ -285,32 +285,32 @@
             assertEquals(2, toCommits.size());
             var toHashes = toCommits.stream().map(Commit::hash).collect(Collectors.toSet());
             assertTrue(toHashes.contains(toHashA));
             assertTrue(toHashes.contains(toHashB));
 
-            var pullRequests = toHostedRepo.getPullRequests();
+            var pullRequests = toHostedRepo.pullRequests();
             assertEquals(1, pullRequests.size());
             var pr = pullRequests.get(0);
-            assertEquals("Cannot automatically merge test:master", pr.getTitle());
+            assertEquals("Cannot automatically merge test:master", pr.title());
 
-            var fetchHead = toLocalRepo.fetch(fromHostedRepo.getWebUrl(), "master");
+            var fetchHead = toLocalRepo.fetch(fromHostedRepo.webUrl(), "master");
             toLocalRepo.merge(fetchHead, "ours");
             toLocalRepo.commit("Merge", "duke", "duke@openjdk.org", now);
 
             toCommits = toLocalRepo.commits().asList();
             assertEquals(4, toCommits.size());
 
             TestBotRunner.runPeriodicItems(bot);
-            pullRequests = toHostedRepo.getPullRequests();
+            pullRequests = toHostedRepo.pullRequests();
             assertEquals(0, pullRequests.size());
         }
     }
 
     @Test
     void resolvedMergeConflictAndThenNewConflict(TestInfo testInfo) throws IOException {
         try (var temp = new TemporaryDirectory(false)) {
-            var host = TestHost.createNew(List.of(new HostUserDetails(0, "duke", "J. Duke")));
+            var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
 
@@ -359,24 +359,24 @@
             assertEquals(2, toCommits.size());
             var toHashes = toCommits.stream().map(Commit::hash).collect(Collectors.toSet());
             assertTrue(toHashes.contains(toHashA));
             assertTrue(toHashes.contains(toHashB));
 
-            var pullRequests = toHostedRepo.getPullRequests();
+            var pullRequests = toHostedRepo.pullRequests();
             assertEquals(1, pullRequests.size());
             var pr = pullRequests.get(0);
-            assertEquals("Cannot automatically merge test:master", pr.getTitle());
+            assertEquals("Cannot automatically merge test:master", pr.title());
 
-            var fetchHead = toLocalRepo.fetch(fromHostedRepo.getWebUrl(), "master");
+            var fetchHead = toLocalRepo.fetch(fromHostedRepo.webUrl(), "master");
             toLocalRepo.merge(fetchHead, "ours");
             toLocalRepo.commit("Merge", "duke", "duke@openjdk.org", now);
 
             toCommits = toLocalRepo.commits().asList();
             assertEquals(4, toCommits.size());
 
             TestBotRunner.runPeriodicItems(bot);
-            pullRequests = toHostedRepo.getPullRequests();
+            pullRequests = toHostedRepo.pullRequests();
             assertEquals(0, pullRequests.size());
 
             var fromFileC = fromDir.resolve("c.txt");
             Files.writeString(fromFileC, "Hello C1\n");
             fromLocalRepo.add(fromFileC);
@@ -386,11 +386,11 @@
             Files.writeString(toFileC, "Hello C2\n");
             toLocalRepo.add(toFileC);
             toLocalRepo.commit("Adding c2", "duke", "duke@openjdk.org", now);
 
             TestBotRunner.runPeriodicItems(bot);
-            pullRequests = toHostedRepo.getPullRequests();
+            pullRequests = toHostedRepo.pullRequests();
             assertEquals(1, pullRequests.size());
-            assertEquals("Cannot automatically merge test:master", pr.getTitle());
+            assertEquals("Cannot automatically merge test:master", pr.title());
         }
     }
 }
