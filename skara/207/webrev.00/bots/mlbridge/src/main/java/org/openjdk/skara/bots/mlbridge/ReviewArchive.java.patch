diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -20,11 +20,11 @@
     private final List<Email> generated = new ArrayList<>();
     private final Map<String, Email> generatedIds = new HashMap<>();
     private final List<Hash> reportedHeads;
     private final List<Hash> reportedBases;
 
-    private EmailAddress getAuthorAddress(HostUserDetails originalAuthor) {
+    private EmailAddress getAuthorAddress(HostUser originalAuthor) {
         var contributor = censusInstance.namespace().get(originalAuthor.id());
         if (contributor == null) {
             return EmailAddress.from(originalAuthor.fullName(),
                                      censusInstance.namespace().name() + "+" +
                                              originalAuthor.id() + "+" + originalAuthor.userName() + "@" +
@@ -35,17 +35,17 @@
         }
     }
 
     private EmailAddress getUniqueMessageId(String identifier) {
         try {
-            var prSpecific = prInstance.pr().repository().getName().replace("/", ".") + "." + prInstance.id();
+            var prSpecific = prInstance.pr().repository().name().replace("/", ".") + "." + prInstance.id();
             var digest = MessageDigest.getInstance("SHA-256");
             digest.update(prSpecific.getBytes(StandardCharsets.UTF_8));
             digest.update(identifier.getBytes(StandardCharsets.UTF_8));
             var encodedCommon = Base64.getUrlEncoder().encodeToString(digest.digest());
 
-            return EmailAddress.from(encodedCommon + "." + UUID.randomUUID() + "@" + prInstance.pr().repository().getUrl().getHost());
+            return EmailAddress.from(encodedCommon + "." + UUID.randomUUID() + "@" + prInstance.pr().repository().url().getHost());
         } catch (NoSuchAlgorithmException e) {
             throw new RuntimeException("Cannot find SHA-256");
         }
     }
 
@@ -172,13 +172,13 @@
     }
 
     void create(URI webrev) {
         var body = ArchiveMessages.composeConversation(prInstance, webrev);
         var id = getMessageId();
-        var email = Email.create("RFR: " + prInstance.pr().getTitle(), body)
+        var email = Email.create("RFR: " + prInstance.pr().title(), body)
                          .sender(sender)
-                         .author(getAuthorAddress(prInstance.pr().getAuthor()))
+                         .author(getAuthorAddress(prInstance.pr().author()))
                          .id(id)
                          .header("PR-Head-Hash", prInstance.headHash().hex())
                          .header("PR-Base-Hash", prInstance.baseHash().hex())
                          .build();
         generated.add(email);
@@ -191,13 +191,13 @@
 
     void addFull(URI webrev) {
         var body = ArchiveMessages.composeRebaseComment(prInstance, webrev);
         var id = getMessageId(prInstance.headHash());
         var parent = topEmail();
-        var email = Email.reply(parent, "Re: " + latestHeadPrefix() + " RFR: " + prInstance.pr().getTitle(), body)
+        var email = Email.reply(parent, "Re: " + latestHeadPrefix() + " RFR: " + prInstance.pr().title(), body)
                          .sender(sender)
-                         .author(getAuthorAddress(prInstance.pr().getAuthor()))
+                         .author(getAuthorAddress(prInstance.pr().author()))
                          .recipient(parent.author())
                          .id(id)
                          .header("PR-Head-Hash", prInstance.headHash().hex())
                          .header("PR-Base-Hash", prInstance.baseHash().hex())
                          .header("PR-Sequence", Integer.toString(existing.size() + generated.size()))
@@ -208,24 +208,24 @@
 
     void addIncremental(URI fullWebrev, URI incrementalWebrev) {
         var body = ArchiveMessages.composeIncrementalComment(latestHead(), prInstance, fullWebrev, incrementalWebrev);
         var id = getMessageId(prInstance.headHash());
         var parent = topEmail();
-        var email = Email.reply(parent, "Re: " + latestHeadPrefix() + " RFR: " + prInstance.pr().getTitle(), body)
+        var email = Email.reply(parent, "Re: " + latestHeadPrefix() + " RFR: " + prInstance.pr().title(), body)
                          .sender(sender)
-                         .author(getAuthorAddress(prInstance.pr().getAuthor()))
+                         .author(getAuthorAddress(prInstance.pr().author()))
                          .recipient(parent.author())
                          .id(id)
                          .header("PR-Head-Hash", prInstance.headHash().hex())
                          .header("PR-Base-Hash", prInstance.baseHash().hex())
                          .header("PR-Sequence", Integer.toString(existing.size() + generated.size()))
                          .build();
         generated.add(email);
         generatedIds.put(getStableMessageId(id), email);
     }
 
-    private Optional<Email> findCollapsable(Email parent, HostUserDetails author, String subject) {
+    private Optional<Email> findCollapsable(Email parent, HostUser author, String subject) {
         var parentId = getStableMessageId(parent.id());
 
         // Is it a self-reply?
         if (parent.author().equals(getAuthorAddress(author)) && generatedIds.containsKey(parentId)) {
             // But avoid extending top-level parents
@@ -253,11 +253,11 @@
         }
 
         return Optional.empty();
     }
 
-    private void addReplyCommon(Email parent, HostUserDetails author, String subject, String body, EmailAddress id) {
+    private void addReplyCommon(Email parent, HostUser author, String subject, String body, EmailAddress id) {
         if (!subject.startsWith("Re: ")) {
             subject = "Re: " + subject;
         }
 
         // Collapse self-replies and replies-to-same that have been created in this run
@@ -300,11 +300,11 @@
         if (existingIds.containsKey(getStableMessageId(id))) {
             return;
         }
 
         var parent = latestGeneralComment();
-        addReplyCommon(parent, comment.author(), "Re: RFR: " + prInstance.pr().getTitle(), comment.body(), id);
+        addReplyCommon(parent, comment.author(), "Re: RFR: " + prInstance.pr().title(), comment.body(), id);
     }
 
     private String projectRole(Contributor contributor) {
         var version = censusInstance.configuration().census().version();
         if (censusInstance.project().isLead(contributor.username(), version)) {
@@ -333,11 +333,11 @@
         var subject = parent.subject();
 
         // Approvals by Reviewers get special treatment - post these as top-level comments
         if (review.verdict() == Review.Verdict.APPROVED && isReviewer) {
             parent = topEmail();
-            subject = "Re: [Approved] " + "RFR: " + prInstance.pr().getTitle();
+            subject = "Re: [Approved] " + "RFR: " + prInstance.pr().title();
         }
 
         var userName = contributor != null ? contributor.username() : review.reviewer().userName() + "@" + censusInstance.namespace().name();
         var userRole = contributor != null ? projectRole(contributor) : "none";
         var replyBody = ArchiveMessages.reviewCommentBody(review.body().orElse(""), review.verdict(), userName, userRole);
@@ -354,11 +354,11 @@
         var parent = parentForReviewComment(reviewComment);
         var body = new StringBuilder();
 
         // Add some context to the first post
         if (reviewComment.parent().isEmpty()) {
-            var contents = prInstance.pr().repository().getFileContents(reviewComment.path(), reviewComment.hash().hex()).lines().collect(Collectors.toList());
+            var contents = prInstance.pr().repository().fileContents(reviewComment.path(), reviewComment.hash().hex()).lines().collect(Collectors.toList());
 
             body.append(reviewComment.path()).append(" line ").append(reviewComment.line()).append(":\n\n");
             for (int i = Math.max(0, reviewComment.line() - 2); i < Math.min(contents.size(), reviewComment.line() + 1); ++i) {
                 body.append("> ").append(i + 1).append(": ").append(contents.get(i)).append("\n");
             }
