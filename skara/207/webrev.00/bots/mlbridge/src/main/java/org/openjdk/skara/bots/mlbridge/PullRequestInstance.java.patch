diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.host.PullRequest;
-import org.openjdk.skara.host.network.URIBuilder;
+import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.Issue;
 
 import java.io.*;
 import java.net.URI;
@@ -48,13 +48,13 @@
         this.projectPrefix = projectPrefix;
 
         // Materialize the PR's target ref
         try {
             var repository = pr.repository();
-            localRepo = Repository.materialize(localRepoPath, repository.getUrl(), pr.getTargetRef());
-            targetHash = localRepo.fetch(repository.getUrl(), pr.getTargetRef());
-            headHash = localRepo.fetch(repository.getUrl(), pr.getHeadHash().hex());
+            localRepo = Repository.materialize(localRepoPath, repository.url(), pr.targetRef());
+            targetHash = localRepo.fetch(repository.url(), pr.targetRef());
+            headHash = localRepo.fetch(repository.url(), pr.headHash().hex());
             baseHash = localRepo.mergeBase(targetHash, headHash);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
@@ -70,16 +70,16 @@
     Hash headHash() {
         return this.headHash;
     }
 
     String diffUrl() {
-        return pr.getWebUrl() + ".diff";
+        return pr.webUrl() + ".diff";
     }
 
     String fetchCommand() {
-        var repoUrl = pr.repository().getWebUrl();
-        return "git fetch " + repoUrl + " " + pr.getSourceRef() + ":pull/" + pr.getId();
+        var repoUrl = pr.repository().webUrl();
+        return "git fetch " + repoUrl + " " + pr.sourceRef() + ":pull/" + pr.id();
     }
 
     String stats(Hash base, Hash head) {
         try {
             var diff = localRepo.diff(base, head);
@@ -100,11 +100,11 @@
             throw new UncheckedIOException(e);
         }
     }
 
     Optional<String> issueUrl() {
-        var issue = Issue.fromString(pr.getTitle());
+        var issue = Issue.fromString(pr.title());
         return issue.map(value -> URIBuilder.base(issueTracker).appendPath(projectPrefix + "-" + value.id()).build().toString());
     }
 
     @FunctionalInterface
     interface CommitFormatter {
@@ -120,11 +120,11 @@
             throw new UncheckedIOException(e);
         }
     }
 
     String id() {
-        return pr.getId();
+        return pr.id();
     }
 
     PullRequest pr() {
         return pr;
     }
