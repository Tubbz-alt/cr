diff a/bots/submit/src/test/java/org/openjdk/skara/bots/submit/SubmitBotTests.java b/bots/submit/src/test/java/org/openjdk/skara/bots/submit/SubmitBotTests.java
--- a/bots/submit/src/test/java/org/openjdk/skara/bots/submit/SubmitBotTests.java
+++ b/bots/submit/src/test/java/org/openjdk/skara/bots/submit/SubmitBotTests.java
@@ -42,23 +42,23 @@
 
             var executor = new ShellExecutor("test", List.of("echo", "hello"), Duration.ofDays(1), Map.of());
             var bot = new SubmitBot(author, List.of(executor));
 
             // Populate the projects repository
-            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
-            localRepo.push(masterHash, author.getUrl(), "master", true);
+            localRepo.push(masterHash, author.url(), "master", true);
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
-            localRepo.push(editHash, author.getUrl(), "edit", true);
+            localRepo.push(editHash, author.url(), "edit", true);
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             TestBotRunner.runPeriodicItems(bot);
 
             // Verify that the check passed
-            var checks = pr.getChecks(editHash);
+            var checks = pr.checks(editHash);
             assertEquals(1, checks.size());
             var check = checks.get("test");
             assertEquals(CheckStatus.SUCCESS, check.status());
         }
     }
@@ -71,23 +71,23 @@
 
             var executor = new ShellExecutor("test", List.of("command_not_found"), Duration.ofDays(1), Map.of());
             var bot = new SubmitBot(author, List.of(executor));
 
             // Populate the projects repository
-            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
-            localRepo.push(masterHash, author.getUrl(), "master", true);
+            localRepo.push(masterHash, author.url(), "master", true);
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
-            localRepo.push(editHash, author.getUrl(), "edit", true);
+            localRepo.push(editHash, author.url(), "edit", true);
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             TestBotRunner.runPeriodicItems(bot);
 
             // Verify that the check failed
-            var checks = pr.getChecks(editHash);
+            var checks = pr.checks(editHash);
             assertEquals(1, checks.size());
             var check = checks.get("test");
             assertEquals(CheckStatus.FAILURE, check.status());
         }
     }
@@ -100,17 +100,17 @@
 
             var executor = new ShellExecutor("test", List.of("command_not_found"), Duration.ofDays(1), Map.of());
             var bot = new SubmitBot(author, List.of(executor));
 
             // Populate the projects repository
-            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
-            localRepo.push(masterHash, author.getUrl(), "master", true);
+            localRepo.push(masterHash, author.url(), "master", true);
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
-            localRepo.push(editHash, author.getUrl(), "edit", true);
+            localRepo.push(editHash, author.url(), "edit", true);
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Create a fake check from a while back
             var checkBuilder = CheckBuilder.create("test", editHash);
             pr.createCheck(checkBuilder.build());
@@ -120,11 +120,11 @@
 
             // The bot should not overwrite the old check
             TestBotRunner.runPeriodicItems(bot);
 
             // Verify that the check is still listed as passed
-            var checks = pr.getChecks(editHash);
+            var checks = pr.checks(editHash);
             assertEquals(1, checks.size());
             var check = checks.get("test");
             assertEquals(CheckStatus.SUCCESS, check.status());
         }
     }
@@ -136,17 +136,17 @@
 
             var executor = new ShellExecutor("test", List.of("echo", "hello"), Duration.ofDays(1), Map.of());
             var bot = new SubmitBot(author, List.of(executor));
 
             // Populate the projects repository
-            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
-            localRepo.push(masterHash, author.getUrl(), "master", true);
+            localRepo.push(masterHash, author.url(), "master", true);
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
-            localRepo.push(editHash, author.getUrl(), "edit", true);
+            localRepo.push(editHash, author.url(), "edit", true);
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Create a fake check from a while back
             var checkBuilder = CheckBuilder.create("test", editHash);
             pr.createCheck(checkBuilder.build());
@@ -156,11 +156,11 @@
 
             // The bot should overwrite the old check
             TestBotRunner.runPeriodicItems(bot);
 
             // Verify that the check passed
-            var checks = pr.getChecks(editHash);
+            var checks = pr.checks(editHash);
             assertEquals(1, checks.size());
             var check = checks.get("test");
             assertEquals(CheckStatus.SUCCESS, check.status());
         }
     }
