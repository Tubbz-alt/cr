diff a/bots/topological/src/test/java/org/openjdk/skara/bots/topological/TopologicalBotTests.java b/bots/topological/src/test/java/org/openjdk/skara/bots/topological/TopologicalBotTests.java
--- a/bots/topological/src/test/java/org/openjdk/skara/bots/topological/TopologicalBotTests.java
+++ b/bots/topological/src/test/java/org/openjdk/skara/bots/topological/TopologicalBotTests.java
@@ -25,11 +25,10 @@
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.*;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.TestInfo;
 
 import java.io.IOException;
 import java.io.UncheckedIOException;
 import java.nio.file.Files;
 import java.nio.file.StandardOpenOption;
@@ -42,11 +41,11 @@
 class TopologicalBotTests {
 
     @Test
     void testTopoMerge() throws IOException {
         try (var temp = new TemporaryDirectory()) {
-            var host = TestHost.createNew(List.of(new HostUserDetails(0, "duke", "J. Duke")));
+            var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var repo = Repository.init(fromDir, VCS.GIT);
             var gitConfig = repo.root().resolve(".git").resolve("config");
             Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
@@ -56,11 +55,11 @@
             // make non bare
             var readme = fromDir.resolve("README.txt");
             Files.writeString(readme, "Hello world\n");
             repo.add(readme);
             repo.commit("An initial commit", "duke", "duke@openjdk.org");
-            repo.pushAll(hostedRepo.getUrl());
+            repo.pushAll(hostedRepo.url());
 
             var aBranch = repo.branch(repo.head(), "A");
             // no deps -> depends on master
 
             var depsFileName = "deps.txt";
@@ -69,26 +68,26 @@
             repo.checkout(bBranch);
             var bDeps = fromDir.resolve(depsFileName);
             Files.writeString(bDeps, "A");
             repo.add(bDeps);
             repo.commit("Adding deps file to B", "duke", "duke@openjdk.org");
-            repo.pushAll(hostedRepo.getUrl());
+            repo.pushAll(hostedRepo.url());
 
             var cBranch = repo.branch(repo.head(), "C");
             repo.checkout(cBranch);
             var cDeps = fromDir.resolve(depsFileName);
             Files.writeString(cDeps, "B A");
             repo.add(cDeps);
             repo.commit("Adding deps file to C", "duke", "duke@openjdk.org");
-            repo.pushAll(hostedRepo.getUrl());
+            repo.pushAll(hostedRepo.url());
 
             repo.checkout(new Branch("master"));
             var newFile = fromDir.resolve("NewFile.txt");
             Files.writeString(newFile, "Hello world\n");
             repo.add(newFile);
             var preHash = repo.commit("An additional commit", "duke", "duke@openjdk.org");
-            repo.pushAll(hostedRepo.getUrl());
+            repo.pushAll(hostedRepo.url());
 
             var preCommits = repo.commits().asList();
             assertEquals(4, preCommits.size());
             assertEquals(preHash, repo.head());
 
@@ -112,11 +111,11 @@
     }
 
     @Test
     void testTopoMergeFailure() throws IOException {
         try (var temp = new TemporaryDirectory()) {
-            var host = TestHost.createNew(List.of(new HostUserDetails(0, "duke", "J. Duke")));
+            var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var repo = Repository.init(fromDir, VCS.GIT);
             var gitConfig = repo.root().resolve(".git").resolve("config");
             Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"), APPEND);
@@ -125,42 +124,42 @@
             // make non bare
             var readme = fromDir.resolve("README.txt");
             Files.writeString(readme, "Hello world\n");
             repo.add(readme);
             repo.commit("An initial commit", "duke", "duke@openjdk.org");
-            repo.pushAll(hostedRepo.getUrl());
+            repo.pushAll(hostedRepo.url());
 
             var aBranch = repo.branch(repo.head(), "A");
             repo.checkout(aBranch);
             Files.writeString(readme, "A conflicting line\n", APPEND);
             repo.add(readme);
             var aStartHash = repo.commit("A conflicting commit", "duke", "duke@openjdk.org");
-            repo.pushAll(hostedRepo.getUrl());
+            repo.pushAll(hostedRepo.url());
 
             var depsFileName = "deps.txt";
 
             var bBranch = repo.branch(repo.head(), "B");
             repo.checkout(bBranch);
             var bDeps = fromDir.resolve(depsFileName);
             Files.writeString(bDeps, "A");
             repo.add(bDeps);
             var bDepsHash = repo.commit("Adding deps file to B", "duke", "duke@openjdk.org");
-            repo.pushAll(hostedRepo.getUrl());
+            repo.pushAll(hostedRepo.url());
 
             var cBranch = repo.branch(repo.head(), "C");
             repo.checkout(cBranch);
             var cDeps = fromDir.resolve(depsFileName);
             Files.writeString(cDeps, "B");
             repo.add(cDeps);
             var cDepsHash = repo.commit("Adding deps file to C", "duke", "duke@openjdk.org");
-            repo.pushAll(hostedRepo.getUrl());
+            repo.pushAll(hostedRepo.url());
 
             repo.checkout(new Branch("master"));
             Files.writeString(readme, "Goodbye world!\n", APPEND);
             repo.add(readme);
             var preHash = repo.commit("An additional commit", "duke", "duke@openjdk.org");
-            repo.pushAll(hostedRepo.getUrl());
+            repo.pushAll(hostedRepo.url());
 
             var preCommits = repo.commits().asList();
             assertEquals(5, preCommits.size());
             assertEquals(preHash, repo.head());
 
