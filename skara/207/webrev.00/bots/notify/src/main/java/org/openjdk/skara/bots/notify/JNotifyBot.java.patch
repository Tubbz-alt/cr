diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
@@ -59,11 +59,11 @@
     public boolean concurrentWith(WorkItem other) {
         if (!(other instanceof JNotifyBot)) {
             return true;
         }
         JNotifyBot otherItem = (JNotifyBot) other;
-        if (!repository.getName().equals(otherItem.repository.getName())) {
+        if (!repository.name().equals(otherItem.repository.name())) {
             return true;
         }
         return false;
     }
 
@@ -209,16 +209,16 @@
         return repo;
     }
 
     @Override
     public void run(Path scratchPath) {
-        var sanitizedUrl = URLEncoder.encode(repository.getWebUrl().toString() + "v2", StandardCharsets.UTF_8);
+        var sanitizedUrl = URLEncoder.encode(repository.webUrl().toString() + "v2", StandardCharsets.UTF_8);
         var path = storagePath.resolve(sanitizedUrl);
         var historyPath = scratchPath.resolve("notify").resolve("history");
 
         try {
-            var localRepo = fetchAll(path, repository.getUrl());
+            var localRepo = fetchAll(path, repository.url());
             var history = UpdateHistory.create(tagStorageBuilder, historyPath.resolve("tags"), branchStorageBuilder, historyPath.resolve("branches"));
             handleTags(localRepo, history);
 
             var knownRefs = localRepo.remoteBranches("origin")
                                      .stream()
@@ -240,11 +240,11 @@
         }
     }
 
     @Override
     public String toString() {
-        return "JNotifyBot@" + repository.getName();
+        return "JNotifyBot@" + repository.name();
     }
 
     @Override
     public List<WorkItem> getPeriodicItems() {
         return List.of(this);
