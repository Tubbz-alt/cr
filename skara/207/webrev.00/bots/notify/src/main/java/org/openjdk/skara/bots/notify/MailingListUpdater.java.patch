diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -83,11 +83,11 @@
         printer.println("Author:    " + commit.author().name() + " <" + commit.author().email() + ">");
         if (!commit.author().equals(commit.committer())) {
             printer.println("Committer: " + commit.committer().name() + " <" + commit.committer().email() + ">");
         }
         printer.println("Date:      " + commit.date().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss +0000")));
-        printer.println("URL:       " + repository.getWebUrl(commit.hash()));
+        printer.println("URL:       " + repository.webUrl(commit.hash()));
         printer.println();
         printer.println(String.join("\n", commit.message()));
         printer.println();
 
         for (var diff : commit.parentDiffs()) {
@@ -104,13 +104,13 @@
         return EmailAddress.from(commit.committer().name(), commit.committer().email());
     }
 
     private String commitsToSubject(HostedRepository repository, List<Commit> commits, Branch branch) {
         var subject = new StringBuilder();
-        subject.append(repository.getRepositoryType().shortName());
+        subject.append(repository.repositoryType().shortName());
         subject.append(": ");
-        subject.append(repository.getName());
+        subject.append(repository.name());
         subject.append(": ");
         if (includeBranch) {
             subject.append(branch.name());
             subject.append(": ");
         }
@@ -122,13 +122,13 @@
         }
         return subject.toString();
     }
 
     private String tagToSubject(HostedRepository repository, Hash hash, OpenJDKTag tag) {
-        return repository.getRepositoryType().shortName() +
+        return repository.repositoryType().shortName() +
                 ": " +
-                repository.getName() +
+                repository.name() +
                 ": Added tag " +
                 tag.tag() +
                 " for changeset " +
                 hash.abbreviate();
     }
@@ -148,11 +148,11 @@
                 ret.add(commit);
                 continue;
             }
 
             var candidate = candidates.get(0);
-            var prLink = candidate.getWebUrl();
+            var prLink = candidate.webUrl();
             var prLinkPattern = Pattern.compile("^(?:PR: )?" + Pattern.quote(prLink.toString()), Pattern.MULTILINE);
 
             var rfrCandidates = rfrs.stream()
                                     .filter(email -> prLinkPattern.matcher(email.body()).find())
                                     .collect(Collectors.toList());
@@ -246,13 +246,13 @@
         list.post(email);
     }
 
     private String newBranchSubject(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch) {
         var subject = new StringBuilder();
-        subject.append(repository.getRepositoryType().shortName());
+        subject.append(repository.repositoryType().shortName());
         subject.append(": ");
-        subject.append(repository.getName());
+        subject.append(repository.name());
         subject.append(": created branch ");
         subject.append(branch);
         subject.append(" based on the branch ");
         subject.append(parent);
         subject.append(" containing ");
