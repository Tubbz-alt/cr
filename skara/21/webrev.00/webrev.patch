diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -543,14 +543,38 @@
         var archive = mbox.getList(pr.getId());
         var archiveMails = parseArchive(archive);
 
         // First determine if this PR should be inspected further or not
         if (archiveMails.isEmpty()) {
-            // Wait until the PR is ready for review
-            if (!pr.getLabels().contains("rfr")) {
-                log.fine("PR is not yet ready for review");
-                return;
+            var labels = new HashSet<>(pr.getLabels());
+            for (var readyLabel : bot.readyLabels()) {
+                if (!labels.contains(readyLabel)) {
+                    log.fine("PR is not yet ready - missing label '" + readyLabel + "'");
+                    return;
+                }
+            }
+        }
+
+        // Also inspect comments before making the first post
+        var comments = pr.getComments();
+        if (archiveMails.isEmpty()) {
+            for (var readyComment : bot.readyComments().entrySet()) {
+                var commentFound = false;
+                for (var comment : comments) {
+                    if (comment.author().userName().equals(readyComment.getKey())) {
+                        var matcher = readyComment.getValue().matcher(comment.body());
+                        if (matcher.find()) {
+                            commentFound = true;
+                            break;
+                        }
+                    }
+                }
+                if (!commentFound) {
+                    log.fine("PR is not yet ready - missing ready comment from '" + readyComment.getKey() +
+                                     "containing '" + readyComment.getValue().pattern() + "'");
+                    return;
+                }
             }
         }
 
         var webrevPath = scratchPath.resolve("mlbridge-webrevs");
         var listServer = MailingListServerFactory.createMailmanServer(bot.listArchive(), bot.smtpServer());
@@ -556,11 +580,10 @@
         var listServer = MailingListServerFactory.createMailmanServer(bot.listArchive(), bot.smtpServer());
         var list = listServer.getList(bot.listAddress().address());
         var newMails = new ArrayList<Email>();
         var stableIdToMail = archiveMails.stream().collect(Collectors.toMap(email -> getStableMessageId(email.id()),
                                                                             Function.identity()));
-        var comments = pr.getComments();
         var prInstance = new PullRequestInstance(scratchPath.resolve("mlbridge-mergebase"), pr);
 
         // First post
         if (archiveMails.isEmpty()) {
             var webrev = bot.webrevStorage().createAndArchive(prInstance, webrevPath, prInstance.baseHash(),
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
@@ -28,10 +28,11 @@
 import org.openjdk.skara.jcheck.JCheckConfiguration;
 
 import java.net.URI;
 import java.nio.file.Path;
 import java.util.*;
+import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 public class MailingListBridgeBot implements Bot {
     private final EmailAddress emailAddress;
     private final HostedRepository codeRepo;
@@ -38,16 +40,18 @@
     private final EmailAddress listAddress;
     private final Set<String> ignoredUsers;
     private final URI listArchive;
     private final String smtpServer;
     private final WebrevStorage webrevStorage;
+    private final Set<String> readyLabels;
+    private final Map<String, Pattern> readyComments;
 
     MailingListBridgeBot(EmailAddress from, HostedRepository repo, HostedRepository archive, EmailAddress list,
                          Set<String> ignoredUsers, URI listArchive, String smtpServer,
                          HostedRepository webrevStorageRepository, String webrevStorageRef,
-                         Path webrevStorageBase, URI webrevStorageBaseUri) {
+                         Path webrevStorageBase, URI webrevStorageBaseUri, Set<String> readyLabels,
+                         Map<String, Pattern> readyComments) {
         emailAddress = from;
         codeRepo = repo;
         archiveRepo = archive;
         listAddress = list;
         this.ignoredUsers = ignoredUsers;
@@ -50,21 +55,16 @@
         archiveRepo = archive;
         listAddress = list;
         this.ignoredUsers = ignoredUsers;
         this.listArchive = listArchive;
         this.smtpServer = smtpServer;
+        this.readyLabels = readyLabels;
+        this.readyComments = readyComments;
 
         this.webrevStorage = new WebrevStorage(webrevStorageRepository, webrevStorageRef, webrevStorageBase,
                                                webrevStorageBaseUri, from);
     }
 
-    JCheckConfiguration configuration() {
-        var confFile = codeRepo.getFileContents(".jcheck/conf", "master");
-        return JCheckConfiguration.parse(confFile.lines().collect(Collectors.toList()));
-    }
-
     HostedRepository codeRepo() {
         return codeRepo;
     }
 
     HostedRepository archiveRepo() {
@@ -93,10 +94,18 @@
 
     WebrevStorage webrevStorage() {
         return webrevStorage;
     }
 
+    Set<String> readyLabels() {
+        return readyLabels;
+    }
+
+    Map<String, Pattern> readyComments() {
+        return readyComments;
+    }
+
     @Override
     public List<WorkItem> getPeriodicItems() {
         List<WorkItem> ret = new LinkedList<>();
 
         for (var pr : codeRepo.getPullRequests()) {
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
@@ -24,14 +24,16 @@
 
 import org.openjdk.skara.bot.*;
 import org.openjdk.skara.email.EmailAddress;
 import org.openjdk.skara.host.HostedRepository;
 import org.openjdk.skara.host.network.URIBuilder;
-import org.openjdk.skara.json.JSONValue;
+import org.openjdk.skara.json.*;
 import org.openjdk.skara.mailinglist.MailingListServerFactory;
 
 import java.nio.file.Path;
 import java.util.*;
+import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 public class MailingListBridgeBotFactory implements BotFactory {
     @Override
     public String name() {
@@ -56,10 +57,18 @@
         var webrevWeb = specific.get("webrevs").get("web").asString();
 
         var allListNames = new HashSet<EmailAddress>();
         var allRepositories = new HashSet<HostedRepository>();
 
+        var readyLabels = specific.get("ready").get("labels").stream()
+                .map(JSONValue::asString)
+                .collect(Collectors.toSet());
+        var readyComments = specific.get("ready").get("comments").stream()
+                .map(JSONValue::asObject)
+                .collect(Collectors.toMap(obj -> obj.get("user").asString(),
+                                          obj -> Pattern.compile(obj.get("pattern").asString())));
+
         for (var repoConfig : specific.get("repositories").asArray()) {
             var repo = repoConfig.get("repository").asString();
             var archive = repoConfig.get("archive").asString();
             var list = EmailAddress.parse(repoConfig.get("list").asString());
             var bot = new MailingListBridgeBot(from, configuration.repository(repo), configuration.repository(archive),
@@ -63,11 +72,11 @@
             var archive = repoConfig.get("archive").asString();
             var list = EmailAddress.parse(repoConfig.get("list").asString());
             var bot = new MailingListBridgeBot(from, configuration.repository(repo), configuration.repository(archive),
                                                list, ignoredUsers, listArchive, listSmtp,
                                                configuration.repository(webrevRepo), webrevRef, Path.of(repo),
-                                               URIBuilder.base(webrevWeb).build());
+                                               URIBuilder.base(webrevWeb).build(), readyLabels, readyComments);
             ret.add(bot);
 
             allListNames.add(list);
             allRepositories.add(configuration.repository(repo));
         }
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
@@ -66,11 +66,12 @@
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, listAddress,
                                                  Set.of(ignored.host().getCurrentUserDetails().userName()),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build());
+                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 Set.of(), Map.of());
 
             // The mailing list as well
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP());
             var mailmanList = mailmanServer.getList(listAddress.address());
             var readerBot = new MailingListArchiveReaderBot(from, Set.of(mailmanList), Set.of(archive));
@@ -85,11 +86,10 @@
             var editHash = CheckableRepository.appendAndCommit(localRepo, "A simple change",
                                                                "Change msg\n\nWith several lines");
             localRepo.push(editHash, author.getUrl(), "edit", true);
             var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
             pr.setBody("This should now be ready");
-            pr.addLabel("rfr");
 
             // Run an archive pass
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
 
@@ -127,11 +127,12 @@
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, listAddress,
                                                  Set.of(ignored.host().getCurrentUserDetails().userName()),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build());
+                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 Set.of(), Map.of());
 
             // The mailing list as well
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP());
             var mailmanList = mailmanServer.getList(listAddress.address());
             var readerBot = new MailingListArchiveReaderBot(from, Set.of(mailmanList), Set.of(archive));
@@ -146,11 +147,10 @@
             var editHash = CheckableRepository.appendAndCommit(localRepo, "A simple change",
                                                                "Change msg\n\nWith several lines");
             localRepo.push(editHash, author.getUrl(), "edit", true);
             var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
             pr.setBody("This should now be ready");
-            pr.addLabel("rfr");
 
             // Run an archive pass
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
 
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -33,11 +33,11 @@
 
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
 import java.time.Duration;
-import java.util.Set;
+import java.util.*;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 import static org.junit.jupiter.api.Assertions.*;
 
@@ -100,11 +100,13 @@
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, listAddress,
                                                  Set.of(ignored.host().getCurrentUserDetails().userName()),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build());
+                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 Set.of("rfr"), Map.of(ignored.host().getCurrentUserDetails().userName(),
+                                                                       Pattern.compile("ready")));
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.getUrl(), "master", true);
@@ -129,10 +131,31 @@
             pr.addLabel("rfr");
 
             // Run another archive pass
             TestBotRunner.runPeriodicItems(mlBot);
 
+            // But it should still not be archived
+            Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
+            assertFalse(archiveContains(archiveFolder.path(), "This is a pull request"));
+
+            // Now post a general comment - not a ready marker
+            var ignoredPr = ignored.getPullRequest(pr.getId());
+            ignoredPr.addComment("hello there");
+
+            // Run another archive pass
+            TestBotRunner.runPeriodicItems(mlBot);
+
+            // It should still not be archived
+            Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
+            assertFalse(archiveContains(archiveFolder.path(), "This is a pull request"));
+
+            // Now post a ready comment
+            ignoredPr.addComment("ready");
+
+            // Run another archive pass
+            TestBotRunner.runPeriodicItems(mlBot);
+
             // The archive should now contain an entry
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
             assertTrue(archiveContains(archiveFolder.path(), "This is a pull request"));
             assertTrue(archiveContains(archiveFolder.path(), "This should now be ready"));
             assertTrue(archiveContains(archiveFolder.path(), "Patch:"));
@@ -169,11 +192,10 @@
 
             // Add a comment
             pr.addComment("This is a comment");
 
             // Add a comment from an ignored user as well
-            var ignoredPr = ignored.getPullRequest(pr.getId());
             ignoredPr.addComment("Don't mind me");
 
             // Run another archive pass
             TestBotRunner.runPeriodicItems(mlBot);
 
@@ -226,11 +248,12 @@
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, listAddress,
                                                  Set.of(ignored.host().getCurrentUserDetails().userName()),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build());
+                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 Set.of(), Map.of());
 
             // Populate the projects repository
             var reviewFile = Path.of("reviewfile.txt");
             var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType(), reviewFile);
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -239,11 +262,10 @@
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
             localRepo.push(editHash, author.getUrl(), "edit", true);
             var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
-            pr.addLabel("rfr");
             pr.setBody("This is now ready");
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
 
             // And make a file specific comment
@@ -309,11 +331,12 @@
                                            .addAuthor(author.host().getCurrentUserDetails().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, listAddress, Set.of(), listServer.getArchive(),
                                                  listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build());
+                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 Set.of(), Map.of());
 
             // Populate the projects repository
             var reviewFile = Path.of("reviewfile.txt");
             var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType(), reviewFile);
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -322,11 +345,10 @@
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
             localRepo.push(editHash, author.getUrl(), "edit", true);
             var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
-            pr.addLabel("rfr");
             pr.setBody("This is now ready");
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
 
             // Make two file specific comments
@@ -370,11 +392,12 @@
                                            .addAuthor(author.host().getCurrentUserDetails().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, listAddress, Set.of(), listServer.getArchive(),
                                                  listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build());
+                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 Set.of(), Map.of());
 
             // Populate the projects repository
             var reviewFile = Path.of("reviewfile.txt");
             var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType(), reviewFile);
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -383,11 +406,10 @@
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Line 1\nLine 2\nLine 3\nLine 4");
             localRepo.push(editHash, author.getUrl(), "edit", true);
             var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
-            pr.addLabel("rfr");
             pr.setBody("This is now ready");
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
 
             // Make a file specific comment
@@ -417,11 +439,12 @@
                                            .addAuthor(author.host().getCurrentUserDetails().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, listAddress, Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build());
+                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 Set.of(), Map.of());
 
             // Populate the projects repository
             var reviewFile = Path.of("reviewfile.txt");
             var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType(), reviewFile);
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -430,11 +453,10 @@
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
             localRepo.push(editHash, author.getUrl(), "edit", true);
             var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
-            pr.addLabel("rfr");
             pr.setBody("This is now ready\n<!-- this is a comment -->\nAnd this is not\n" +
                                "<!-- Anything below this marker will be hidden -->\nStatus stuff");
 
             // Make a bunch of comments
             pr.addComment("Plain comment\n<!-- this is a comment -->");
@@ -472,11 +494,12 @@
                                            .addAuthor(author.host().getCurrentUserDetails().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, listAddress, Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build());
+                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 Set.of(), Map.of());
 
             // Populate the projects repository
             var reviewFile = Path.of("reviewfile.txt");
             var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType(), reviewFile);
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -485,11 +508,10 @@
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
             localRepo.push(editHash, author.getUrl(), "edit", true);
             var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
-            pr.addLabel("rfr");
             pr.setBody("This is now ready");
 
             // Run an archive pass
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
@@ -581,11 +603,12 @@
                                            .addAuthor(author.host().getCurrentUserDetails().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, listAddress, Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build());
+                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 Set.of(), Map.of());
 
             // Populate the projects repository
             var reviewFile = Path.of("reviewfile.txt");
             var localRepo = CheckableRepository.init(tempFolder.path().resolve("first"), author.getRepositoryType(), reviewFile);
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -594,11 +617,10 @@
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo, "A line", "Original msg");
             localRepo.push(editHash, author.getUrl(), "edit", true);
             var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
-            pr.addLabel("rfr");
             pr.setBody("This is now ready");
 
             // Run an archive pass
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
@@ -668,11 +690,12 @@
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, listAddress,
                                                  Set.of(ignored.host().getCurrentUserDetails().userName()),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build());
+                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 Set.of(), Map.of());
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.getUrl(), "master", true);
@@ -684,11 +707,10 @@
             localRepo.push(editHash, author.getUrl(), "edit", true);
             var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
 
             // Flag it as ready for review
             pr.setBody("This should now be ready");
-            pr.addLabel("rfr");
 
             // Run an archive pass
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should now contain an entry
@@ -734,11 +756,12 @@
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, listAddress, Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build());
+                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 Set.of(), Map.of());
 
             // Populate the projects repository
             var reviewFile = Path.of("reviewfile.txt");
             var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType(), reviewFile);
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -747,11 +770,10 @@
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
             localRepo.push(editHash, author.getUrl(), "edit", true);
             var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
-            pr.addLabel("rfr");
             pr.setBody("This is now ready");
 
             // Run an archive pass
             TestBotRunner.runPeriodicItems(mlBot);
 
