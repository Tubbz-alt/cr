diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -356,17 +356,24 @@
 
     private String getMergeReadyComment(String commitMessage, List<Review> reviews, boolean rebasePossible) {
         var message = new StringBuilder();
         message.append("@");
         message.append(pr.author().userName());
-        message.append(" This change can now be integrated. The commit message will be:\n");
+        message.append(" This change now passes all automated pre-integration checks. When the change also ");
+        message.append("fulfills all [project specific requirements](https://github.com/");
+        message.append(pr.repository().name());
+        message.append("/blob/");
+        message.append(pr.targetRef());
+        message.append("CONTRIBUTING.md), type `/integrate` in a new comment to proceed. After integration, ");
+        message.append("the commit message will be:\n");
         message.append("```\n");
         message.append(commitMessage);
         message.append("\n```\n");
 
         message.append("- If you would like to add a summary, use the `/summary` command.\n");
-        message.append("- To list additional contributors, use the `/contributor` command.\n");
+        message.append("- To credit additional contributors, use the `/contributor` command.\n");
+        message.append("- To add additional solved issues, use the `/solves` command.\n");
 
         var divergingCommits = prInstance.divergingCommits();
         if (divergingCommits.size() > 0) {
             message.append("\n");
             message.append("Since the source branch of this PR was last updated there ");
@@ -377,19 +384,14 @@
                 message.append(divergingCommits.size());
                 message.append(" commits ");
             }
             message.append("pushed to the `");
             message.append(pr.targetRef());
-            message.append("` branch:\n");
-            var commitList = divergingCommits.stream()
-                    .map(commit -> " * " + commit.hash().hex() + ": " + commit.message().get(0))
-                    .collect(Collectors.joining("\n"));
-            message.append(commitList);
-            message.append("\n\n");
+            message.append("` branch. ");
             if (rebasePossible) {
-                message.append("Since there are no conflicts, your changes will automatically be rebased on top of the ");
-                message.append("above commits when integrating. If you prefer to do this manually, please merge `");
+                message.append("Since there are no conflicts, your changes will automatically be rebased on top of ");
+                message.append("these commits when integrating. If you prefer to do this manually, please merge `");
                 message.append(pr.targetRef());
                 message.append("` into your branch first.\n");
             } else {
                 message.append("Your changes cannot be rebased automatically without conflicts, so you will need to ");
                 message.append("merge `");
@@ -418,19 +420,19 @@
                 message.append(candidates);
                 message.append(") but any other Committer may sponsor as well. ");
             }
             if (rebasePossible) {
                 message.append("\n\n");
-                message.append("- To flag this PR as ready for integration with the above commit message, type ");
+                message.append("➡️ To flag this PR as ready for integration with the above commit message, type ");
                 message.append("`/integrate` in a new comment. (Afterwards, your sponsor types ");
                 message.append("`/sponsor` in a new comment to perform the integration).\n");
             }
         } else if (rebasePossible) {
             if (divergingCommits.size() > 0) {
                 message.append("\n");
             }
-            message.append("- To integrate this PR with the above commit message, type ");
+            message.append("➡️ To integrate this PR with the above commit message, type ");
             message.append("`/integrate` in a new comment.\n");
         }
         message.append(mergeReadyMarker);
         return message.toString();
     }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -596,11 +596,11 @@
             // Let the bot see the changes
             TestBotRunner.runPeriodicItems(mergeBot);
 
             // The bot should no longer detect a conflict
             updated = pr.comments().stream()
-                        .filter(comment -> comment.body().contains("change can now be integrated"))
+                        .filter(comment -> comment.body().contains("change now passes all automated"))
                         .count();
             assertEquals(1, updated);
 
             // The PR should not be flagged as outdated
             assertFalse(pr.labels().contains("outdated"));
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
@@ -104,11 +104,11 @@
                                .findAny()
                                .orElseThrow();
             assertEquals("Co-authored-by: Test Person <test@test.test>", creditLine);
 
             var pushed = pr.comments().stream()
-                           .filter(comment -> comment.body().contains("change can now be integrated"))
+                           .filter(comment -> comment.body().contains("change now passes all automated"))
                            .count();
             assertEquals(1, pushed);
 
             // Add a second person
             pr.addComment("/contributor add Another Person <another@test.test>");
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
@@ -341,11 +341,11 @@
             TestBotRunner.runPeriodicItems(mergeBot);
             TestBotRunner.runPeriodicItems(mergeBot);
 
             // The bot should reply with an instructional message (and only one)
             var pushed = pr.comments().stream()
-                           .filter(comment -> comment.body().contains("change can now be integrated"))
+                           .filter(comment -> comment.body().contains("change now passes all automated"))
                            .filter(comment -> comment.body().contains("Reviewed-by: integrationreviewer3"))
                            .count();
             assertEquals(1, pushed);
 
             // Ensure that the bot doesn't pick up on commands in the instructional message
@@ -368,11 +368,11 @@
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
             TestBotRunner.runPeriodicItems(mergeBot);
 
             // The instructional message should have been updated
             pushed = pr.comments().stream()
-                       .filter(comment -> comment.body().contains("change can now be integrated"))
+                       .filter(comment -> comment.body().contains("change now passes all automated"))
                        .filter(comment -> comment.body().contains("Reviewed-by: integrationreviewer3"))
                        .count();
             assertEquals(1, pushed);
 
             // Approve it as yet another user
@@ -380,11 +380,11 @@
             reviewerPr.addReview(Review.Verdict.APPROVED, "Approved");
             TestBotRunner.runPeriodicItems(mergeBot);
 
             // The instructional message should have been updated
             pushed = pr.comments().stream()
-                       .filter(comment -> comment.body().contains("change can now be integrated"))
+                       .filter(comment -> comment.body().contains("change now passes all automated"))
                        .filter(comment -> comment.body().contains("Reviewed-by: integrationreviewer3, integrationreviewer2"))
                        .count();
             assertEquals(1, pushed);
         }
     }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java
@@ -20,16 +20,17 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.junit.jupiter.api.*;
 import org.openjdk.skara.forge.Review;
 import org.openjdk.skara.issuetracker.Comment;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Repository;
 
+import org.junit.jupiter.api.*;
+
 import java.io.IOException;
 import java.util.*;
 
 import static org.junit.jupiter.api.Assertions.*;
 import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertLastCommentContains;
@@ -115,11 +116,11 @@
             TestBotRunner.runPeriodicItems(prBot);
             TestBotRunner.runPeriodicItems(prBot);
 
             // The commit message preview should contain the additional issues
             var preview = pr.comments().stream()
-                            .filter(comment -> comment.body().contains("The commit message will be"))
+                            .filter(comment -> comment.body().contains("the commit message will be"))
                             .map(Comment::body)
                             .findFirst()
                             .orElseThrow();
             assertTrue(preview.contains("123: This is a pull request"));
             assertTrue(preview.contains("12345: This is indeed another issue"));
