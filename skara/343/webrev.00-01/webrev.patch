diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -596,11 +596,11 @@
             // Let the bot see the changes
             TestBotRunner.runPeriodicItems(mergeBot);
 
             // The bot should no longer detect a conflict
             updated = pr.comments().stream()
-                        .filter(comment -> comment.body().contains("change can now be integrated"))
+                        .filter(comment -> comment.body().contains("change now passes all automated"))
                         .count();
             assertEquals(1, updated);
 
             // The PR should not be flagged as outdated
             assertFalse(pr.labels().contains("outdated"));
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
@@ -104,11 +104,11 @@
                                .findAny()
                                .orElseThrow();
             assertEquals("Co-authored-by: Test Person <test@test.test>", creditLine);
 
             var pushed = pr.comments().stream()
-                           .filter(comment -> comment.body().contains("change can now be integrated"))
+                           .filter(comment -> comment.body().contains("change now passes all automated"))
                            .count();
             assertEquals(1, pushed);
 
             // Add a second person
             pr.addComment("/contributor add Another Person <another@test.test>");
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
@@ -341,11 +341,11 @@
             TestBotRunner.runPeriodicItems(mergeBot);
             TestBotRunner.runPeriodicItems(mergeBot);
 
             // The bot should reply with an instructional message (and only one)
             var pushed = pr.comments().stream()
-                           .filter(comment -> comment.body().contains("change can now be integrated"))
+                           .filter(comment -> comment.body().contains("change now passes all automated"))
                            .filter(comment -> comment.body().contains("Reviewed-by: integrationreviewer3"))
                            .count();
             assertEquals(1, pushed);
 
             // Ensure that the bot doesn't pick up on commands in the instructional message
@@ -368,11 +368,11 @@
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
             TestBotRunner.runPeriodicItems(mergeBot);
 
             // The instructional message should have been updated
             pushed = pr.comments().stream()
-                       .filter(comment -> comment.body().contains("change can now be integrated"))
+                       .filter(comment -> comment.body().contains("change now passes all automated"))
                        .filter(comment -> comment.body().contains("Reviewed-by: integrationreviewer3"))
                        .count();
             assertEquals(1, pushed);
 
             // Approve it as yet another user
@@ -380,11 +380,11 @@
             reviewerPr.addReview(Review.Verdict.APPROVED, "Approved");
             TestBotRunner.runPeriodicItems(mergeBot);
 
             // The instructional message should have been updated
             pushed = pr.comments().stream()
-                       .filter(comment -> comment.body().contains("change can now be integrated"))
+                       .filter(comment -> comment.body().contains("change now passes all automated"))
                        .filter(comment -> comment.body().contains("Reviewed-by: integrationreviewer3, integrationreviewer2"))
                        .count();
             assertEquals(1, pushed);
         }
     }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java
@@ -20,16 +20,17 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.junit.jupiter.api.*;
 import org.openjdk.skara.forge.Review;
 import org.openjdk.skara.issuetracker.Comment;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Repository;
 
+import org.junit.jupiter.api.*;
+
 import java.io.IOException;
 import java.util.*;
 
 import static org.junit.jupiter.api.Assertions.*;
 import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertLastCommentContains;
@@ -115,11 +116,11 @@
             TestBotRunner.runPeriodicItems(prBot);
             TestBotRunner.runPeriodicItems(prBot);
 
             // The commit message preview should contain the additional issues
             var preview = pr.comments().stream()
-                            .filter(comment -> comment.body().contains("The commit message will be"))
+                            .filter(comment -> comment.body().contains("the commit message will be"))
                             .map(Comment::body)
                             .findFirst()
                             .orElseThrow();
             assertTrue(preview.contains("123: This is a pull request"));
             assertTrue(preview.contains("12345: This is indeed another issue"));
