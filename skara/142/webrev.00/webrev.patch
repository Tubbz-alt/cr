diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -175,14 +175,11 @@
 
     @Override
     public void handleCommits(HostedRepository repository, List<Commit> commits, Branch branch) {
         switch (mode) {
             case PR_ONLY:
-                var remaining = filterAndSendPrCommits(repository, commits);
-                if (remaining.size() > 0) {
-                    throw new RuntimeException("Failed to match a commit with a PR!");
-                }
+                filterAndSendPrCommits(repository, commits);
                 break;
             case PR:
                 commits = filterAndSendPrCommits(repository, commits);
                 // fall-through
             case ALL:
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -421,13 +421,14 @@
             assertTrue(email.body().contains("Changeset: " + editHash.abbreviate()));
             assertTrue(email.body().contains("23456789: More fixes"));
             assertFalse(email.body().contains("Committer"));
             assertFalse(email.body().contains(masterHash.abbreviate()));
 
-            // Now push the other one without a matching PR - PR_ONLY should make us throw an exception
+            // Now push the other one without a matching PR - PR_ONLY will not generate a mail
             localRepo.push(otherHash, repo.getUrl(), "master");
-            assertThrows(RuntimeException.class, () -> TestBotRunner.runPeriodicItems(notifyBot));
+            TestBotRunner.runPeriodicItems(notifyBot);
+            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofSeconds(1)));
         }
     }
 
     @Test
     void testMailingListPR(TestInfo testInfo) throws IOException {
