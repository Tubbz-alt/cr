diff a/cli/src/main/java/org/openjdk/skara/cli/GitFork.java b/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
@@ -55,10 +55,41 @@
         } catch (InterruptedException e) {
             // do nothing
         }
     }
 
+    private static String getOption(String name, String subsection, Arguments arguments) {
+        if (arguments.contains(name)) {
+            return arguments.get(name).asString();
+        }
+
+        if (subsection != null && !subsection.isEmpty()) {
+            var subsectionSpecific = gitConfig("fork." + subsection + "." + name);
+            if (subsectionSpecific != null) {
+                return subsectionSpecific;
+            }
+        }
+
+        return gitConfig("fork." + name);
+    }
+
+    private static boolean getSwitch(String name, String subsection, Arguments arguments) {
+        if (arguments.contains(name)) {
+            return true;
+        }
+
+        if (subsection != null && !subsection.isEmpty()) {
+            var subsectionSpecific = gitConfig("fork." + subsection + "." + name);
+            if (subsectionSpecific != null) {
+                return subsectionSpecific.toLowerCase().equals("true");
+            }
+        }
+
+        var sectionSpecific = gitConfig("fork." + name);
+        return sectionSpecific != null && sectionSpecific.toLowerCase().equals("true");
+    }
+
     private static String gitConfig(String key) {
         try {
             var pb = new ProcessBuilder("git", "config", key);
             pb.redirectOutput(ProcessBuilder.Redirect.PIPE);
             pb.redirectError(ProcessBuilder.Redirect.DISCARD);
@@ -68,11 +99,11 @@
             var res = p.waitFor();
             if (res != 0) {
                 return null;
             }
 
-            return output.replace("\n", "");
+            return output == null ? null : output.replace("\n", "");
         } catch (InterruptedException e) {
             return null;
         } catch (IOException e) {
             return null;
         }
@@ -187,23 +218,15 @@
             Logging.setup(level);
         }
 
         HttpProxy.setup();
 
-        boolean useSSH = arguments.contains("ssh");
-        if (!useSSH) {
-            var config = gitConfig("fork.ssh");
-            useSSH = config != null && config.toLowerCase().equals("true");
-        }
-
-        boolean useHTTPS = arguments.contains("https");
-        if (!useHTTPS) {
-            var config = gitConfig("fork.https");
-            useHTTPS = config != null && config.toLowerCase().equals("true");
-        }
+        var subsection = arguments.at(0).isPresent() ? arguments.at(0).asString() : null;
 
-        var hostname = arguments.get("host").orString(() -> gitConfig("fork.host"));
+        boolean useSSH = getSwitch("ssh", subsection, arguments);
+        boolean useHTTPS = getSwitch("https", subsection, arguments);
+        var hostname = getOption("host", subsection, arguments);
 
         URI uri = null;
         if (arguments.at(0).isPresent()) {
             var arg = arguments.at(0).asString();
             if (hostname != null) {
@@ -225,11 +248,11 @@
             exit("error: not a valid URI: " + uri);
         }
 
         var webURI = Remote.toWebURI(uri.toString());
         var token = isMercurial ? System.getenv("HG_TOKEN") : System.getenv("GIT_TOKEN");
-        var username = arguments.get("username").orString(() -> gitConfig("fork.username"));
+        var username = getOption("username", subsection, arguments);
         var credentials = GitCredentials.fill(webURI.getHost(), webURI.getPath(), username, token, webURI.getScheme());
 
         if (credentials.password() == null) {
             exit("error: no personal access token found, use git-credentials or the environment variable GIT_TOKEN");
         }
@@ -254,25 +277,13 @@
         var forkWebUrl = fork.webUrl();
         if (isMercurial) {
             forkWebUrl = URI.create("git+" + forkWebUrl.toString());
         }
 
-        boolean noClone = arguments.contains("no-clone");
-        if (!noClone) {
-            var config = gitConfig("fork.no-clone");
-            noClone = config != null && config.toLowerCase().equals("true");
-        }
-        boolean noRemote = arguments.contains("no-remote");
-        if (!noRemote) {
-            var config = gitConfig("fork.no-remote");
-            noRemote = config != null && config.toLowerCase().equals("true");
-        }
-        boolean shouldSync = arguments.contains("sync");
-        if (!shouldSync) {
-            var config = gitConfig("fork.sync");
-            shouldSync = config != null && config.toLowerCase().equals("true");
-        }
+        boolean noClone = getSwitch("no-clone", subsection, arguments);
+        boolean noRemote = getSwitch("no-remote", subsection, arguments);
+        boolean shouldSync = getSwitch("sync", subsection, arguments);
         if (noClone || !arguments.at(0).isPresent()) {
             if (!arguments.at(0).isPresent()) {
                 var cwd = Path.of("").toAbsolutePath();
                 var repo = Repository.get(cwd).orElseGet(die("error: no git repository found at " + cwd));
 
@@ -294,16 +305,16 @@
                         GitSync.sync(repo, new String[]{"--from", "origin", "--to", "fork"});
                     }
                 }
             }
         } else {
-            var reference = arguments.get("reference").orString(() -> gitConfig("fork.reference"));
+            var reference = getOption("reference", subsection, arguments);
             if (reference != null && reference.startsWith("~" + File.separator)) {
                 reference = System.getProperty("user.home") + reference.substring(1);
             }
-            var depth = arguments.get("depth").orString(() -> gitConfig("fork.depth"));
-            var shallowSince = arguments.get("shallow-since").orString(() -> gitConfig("fork.shallow-since"));
+            var depth = getOption("depth", subsection, arguments);
+            var shallowSince = getOption("shallow-since", subsection, arguments);
 
             URI cloneURI = null;
             if (hostname != null) {
                 if (useSSH) {
                     cloneURI = URI.create("ssh://git@" + forkWebUrl.getHost() + forkWebUrl.getPath() + ".git");
