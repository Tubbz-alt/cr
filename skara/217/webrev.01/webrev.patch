diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
@@ -230,6 +230,13 @@
     }
 
     public List<String> remotes() throws IOException {
         return null;
     }
+
+    public void addSubmodule(String pullPath, Path path) throws IOException {
+    }
+
+    public List<Submodule> submodules() throws IOException {
+        return null;
+    }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
@@ -84,10 +84,11 @@
     String pushPath(String remote) throws IOException;
     boolean isValidRevisionRange(String expression) throws IOException;
     Optional<String> upstreamFor(Branch branch) throws IOException;
     List<Reference> remoteBranches(String remote) throws IOException;
     List<String> remotes() throws IOException;
+    List<Submodule> submodules() throws IOException;
 
     static Optional<ReadOnlyRepository> get(Path p) throws IOException {
         return Repository.get(p).map(r -> r);
     }
 
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -105,10 +105,11 @@
     void copy(Path from, Path to) throws IOException;
     void move(Path from, Path to) throws IOException;
     default void setPaths(String remote, String pullPath) throws IOException {
         setPaths(remote, pullPath, null);
     }
+    void addSubmodule(String pullPath, Path path) throws IOException;
 
     default void push(Hash hash, URI uri, String ref) throws IOException {
         push(hash, uri, ref, false);
     }
 
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Submodule.java b/vcs/src/main/java/org/openjdk/skara/vcs/Submodule.java
--- /dev/null
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Submodule.java
@@ -0,0 +1,54 @@
+package org.openjdk.skara.vcs;
+
+import java.nio.file.Path;
+import java.util.Objects;
+
+public class Submodule {
+    private final Hash hash;
+    private final Path path;
+    private final String pullPath;
+
+    public Submodule(Hash hash, Path path, String pullPath) {
+        this.hash = hash;
+        this.path = path;
+        this.pullPath = pullPath;
+    }
+
+    public Hash hash() {
+        return hash;
+    }
+
+    public Path path() {
+        return path;
+    }
+
+    public String pullPath() {
+        return pullPath;
+    }
+
+    @Override
+    public String toString() {
+        return pullPath + " " + hash + " " + path;
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(hash, path, pullPath);
+    }
+
+    @Override
+    public boolean equals(Object other) {
+        if (other == this) {
+            return true;
+        }
+
+        if (!(other instanceof Submodule)) {
+            return false;
+        }
+
+        var o = (Submodule) other;
+        return Objects.equals(hash, o.hash) &&
+               Objects.equals(path, o.path) &&
+               Objects.equals(pullPath, o.pullPath);
+    }
+}
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -1087,6 +1087,65 @@
                 remotes.add(line);
             }
         }
         return remotes;
     }
+
+    @Override
+    public void addSubmodule(String pullPath, Path path) throws IOException {
+        try (var p = capture("git", "submodule", "add", pullPath, path.toString())) {
+            await(p);
+        }
+    }
+
+    @Override
+    public List<Submodule> submodules() throws IOException {
+        var gitModules = root().resolve(".gitmodules");
+        if (!Files.exists(gitModules)) {
+            return List.of();
+        }
+
+        var urls = new HashMap<String, String>();
+        var paths = new HashMap<String, String>();
+        try (var p = capture("git", "config", "--file", gitModules.toAbsolutePath().toString(),
+                                              "--list")) {
+            for (var line : await(p).stdout()) {
+                if (line.startsWith("submodule.")) {
+                    line = line.substring("submodule.".length());
+                    var parts = line.split("=");
+                    var nameAndProperty = parts[0].split("\\.");
+                    var name = nameAndProperty[0];
+                    var prop = nameAndProperty[1];
+                    var value = parts[1];
+                    if (prop.equals("path")) {
+                        paths.put(name, value);
+                    } else if (prop.equals("url")) {
+                        urls.put(name, value);
+                    } else {
+                        throw new IOException("Unexpected submodule property: " + prop);
+                    }
+                }
+            }
+        }
+
+        var hashes = new HashMap<String, String>();
+        try (var p = capture("git", "submodule", "status")) {
+            for (var line : await(p).stdout()) {
+                var parts = line.substring(1).split(" ");
+                var hash = parts[0];
+                var path = parts[1];
+                hashes.put(path, hash);
+            }
+        }
+
+        var modules = new ArrayList<Submodule>();
+        for (var name : paths.keySet()) {
+            var url = urls.get(name);
+            var path = paths.get(name);
+            var hash = hashes.get(path);
+
+            modules.add(new Submodule(new Hash(hash), Path.of(path), url));
+        }
+
+        return modules;
+    }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -1124,6 +1124,50 @@
                 }
             }
         }
         return remotes;
     }
+
+    @Override
+    public void addSubmodule(String pullPath, Path path) throws IOException {
+        var uri = Files.exists(Path.of(pullPath)) ? Path.of(pullPath).toUri().toString() : pullPath;
+        HgRepository.clone(URI.create(uri), root().resolve(path).toAbsolutePath(), false);
+        var hgSub = root().resolve(".hgsub");
+        Files.writeString(hgSub, path.toString() + " = " + pullPath + "\n",
+                          StandardOpenOption.WRITE, StandardOpenOption.APPEND, StandardOpenOption.CREATE);
+        add(List.of(hgSub));
+    }
+
+    @Override
+    public List<Submodule> submodules() throws IOException {
+        var hgSub = root().resolve(".hgsub");
+        var hgSubState = root().resolve(".hgsubstate");
+        if (!(Files.exists(hgSub) && Files.exists(hgSubState))) {
+            return List.of();
+        }
+
+        var urls = new HashMap<String, String>();
+        for (var line : Files.readAllLines(hgSub)) {
+            var parts = line.split("=");
+            var path = parts[0].trim();
+            var url = parts[1].trim();
+            urls.put(path, url);
+        }
+
+        var hashes = new HashMap<String, String>();
+        for (var line : Files.readAllLines(hgSubState)) {
+            var parts = line.split(" ");
+            var hash = parts[0];
+            var path = parts[1];
+            hashes.put(path, hash);
+        }
+
+        var modules = new ArrayList<Submodule>();
+        for (var path : urls.keySet()) {
+            var url = urls.get(path);
+            var hash = hashes.get(path);
+            modules.add(new Submodule(new Hash(hash), Path.of(path), url));
+        }
+
+        return modules;
+    }
 }
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -1846,6 +1846,52 @@
             var ref = refs.get(0);
             assertEquals(head, ref.hash());
             assertEquals(upstream.defaultBranch().name(), ref.name());
         }
     }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testSubmodulesOnEmptyRepo(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var repo = Repository.init(dir.path(), vcs);
+            assertEquals(List.of(), repo.submodules());
+        }
+    }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testSubmodulesOnRepoWithNoSubmodules(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var repo = Repository.init(dir.path().resolve("repo"), vcs);
+            var readme = repo.root().resolve("README");
+            Files.writeString(readme, "Hello\n");
+            repo.add(readme);
+            repo.commit("Added README", "duke", "duke@openjdk.org");
+            assertEquals(List.of(), repo.submodules());
+        }
+    }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testSubmodulesOnRepoWithSubmodule(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var submodule = Repository.init(dir.path().resolve("submodule"), vcs);
+            var readme = submodule.root().resolve("README");
+            Files.writeString(readme, "Hello\n");
+            submodule.add(readme);
+            var head = submodule.commit("Added README", "duke", "duke@openjdk.org");
+
+            var repo = Repository.init(dir.path().resolve("repo"), vcs);
+            var pullPath = submodule.root().toAbsolutePath().toString();
+            repo.addSubmodule(pullPath, Path.of("sub"));
+            repo.commit("Added submodule", "duke", "duke@openjdk.org");
+
+            var submodules = repo.submodules();
+            assertEquals(1, submodules.size());
+            var module = submodules.get(0);
+            assertEquals(Path.of("sub"), module.path());
+            assertEquals(head, module.hash());
+            assertEquals(pullPath, module.pullPath());
+        }
+    }
 }
