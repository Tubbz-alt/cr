diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -639,11 +639,12 @@
                 if (!shouldPublish) {
                     var lines = repo.config("pr.publish");
                     shouldPublish = lines.size() == 1 && lines.get(0).toLowerCase().equals("true");
                 }
                 if (shouldPublish) {
-                    GitPublish.main(new String[] { remote });
+                    GitPublish.main(new String[] { "--quiet", remote });
+                    upstream = repo.upstreamFor(currentBranch);
                 } else {
                     System.err.println("error: there is no remote branch for the local branch '" + currentBranch.name() + "'");
                     System.err.println("");
                     System.err.println("A remote branch must be present at " + remotePullPath + " to create a pull request");
                     System.err.println("To create a remote branch and push the commits for your local branch, run:");
diff a/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java b/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java
@@ -38,18 +38,40 @@
             System.exit(1);
             return null;
         };
     }
 
-    private static int pushAndTrack(String remote, Branch b) throws IOException, InterruptedException {
-        var pb = new ProcessBuilder("git", "push", "--set-upstream", remote, b.name());
-        pb.inheritIO();
-        return pb.start().waitFor();
+    private static int pushAndTrack(String remote, Branch b, boolean isQuiet) throws IOException, InterruptedException {
+        var cmd = new ArrayList<String>();
+        cmd.addAll(List.of("git", "push"));
+        if (isQuiet) {
+            cmd.add("--quiet");
+        }
+        cmd.addAll(List.of("--set-upstream", remote, b.name()));
+        var pb = new ProcessBuilder(cmd);
+        if (isQuiet) {
+            pb.redirectOutput(ProcessBuilder.Redirect.DISCARD);
+            pb.redirectError(ProcessBuilder.Redirect.PIPE);
+        } else {
+            pb.inheritIO();
+        }
+        var p = pb.start();
+        var errorOutput = p.getErrorStream().readAllBytes();
+        int err = p.waitFor();
+        if (err != 0) {
+            System.out.write(errorOutput, 0, errorOutput.length);
+            System.out.flush();
+        }
+        return err;
     }
 
     public static void main(String[] args) throws IOException, InterruptedException {
         var flags = List.of(
+            Switch.shortcut("q")
+                  .fullname("quiet")
+                  .helptext("Silence all output")
+                  .optional(),
             Switch.shortcut("")
                   .fullname("verbose")
                   .helptext("Turn on verbose output")
                   .optional(),
             Switch.shortcut("")
@@ -88,11 +110,17 @@
         var currentBranch = repo.currentBranch();
         if (currentBranch.isEmpty()) {
             System.err.println("error: the repository is in a detached HEAD state");
             System.exit(1);
         }
-        var err = pushAndTrack(remote, repo.currentBranch().get());
+
+        var isQuiet = arguments.contains("quiet");
+        if (!isQuiet) {
+            var lines = repo.config("publish.quiet");
+            isQuiet = lines.size() == 0 && lines.get(0).toLowerCase().equals("true");
+        }
+        var err = pushAndTrack(remote, repo.currentBranch().get(), isQuiet);
         if (err != 0) {
             System.exit(err);
         }
     }
 }
