diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
@@ -33,15 +33,17 @@
 import java.util.logging.Logger;
 
 public class IssueUpdater implements RepositoryUpdateConsumer, PullRequestUpdateConsumer {
     private final IssueProject issueProject;
     private final URI reviewIcon;
+    private final URI commitIcon;
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.notify");
 
-    IssueUpdater(IssueProject issueProject, URI reviewIcon) {
+    IssueUpdater(IssueProject issueProject, URI reviewIcon, URI commitIcon) {
         this.issueProject = issueProject;
         this.reviewIcon = reviewIcon;
+        this.commitIcon = commitIcon;
     }
 
     @Override
     public void handleCommits(HostedRepository repository, List<Commit> commits, Branch branch) {
         for (var commit : commits) {
@@ -54,10 +56,18 @@
                                        + " - issue not found in issue project");
                     continue;
                 }
                 issue.get().addComment(commitNotification);
                 issue.get().setState(Issue.State.RESOLVED);
+
+                var linkBuilder = Link.create(repository.webUrl(commit.hash()), "Commit")
+                                      .summary(repository.name() + "/" + commit.hash().abbreviate());
+                if (commitIcon != null) {
+                    linkBuilder.iconTitle("Commit");
+                    linkBuilder.iconUrl(commitIcon);
+                }
+                issue.get().addLink(linkBuilder.build());
             }
         }
     }
 
     @Override
@@ -82,13 +92,13 @@
             log.warning("Pull request " + pr + " added unknown issue: " + issue.id());
             return;
         }
 
         var linkBuilder = Link.create(pr.webUrl(), "Review")
-                              .summary(pr.repository().name() + "/" + pr.id())
-                              .iconTitle("Review");
+                              .summary(pr.repository().name() + "/" + pr.id());
         if (reviewIcon != null) {
+            linkBuilder.iconTitle("Review");
             linkBuilder.iconUrl(reviewIcon);
         }
 
         realIssue.get().addLink(linkBuilder.build());
     }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
@@ -69,11 +69,16 @@
         if (specific.contains("reviews")) {
             if (specific.get("reviews").contains("icon")) {
                 reviewIcon = URI.create(specific.get("reviews").get("icon").asString());
             }
         }
-
+        URI commitIcon = null;
+        if (specific.contains("commits")) {
+            if (specific.get("commits").contains("icon")) {
+                reviewIcon = URI.create(specific.get("commits").get("icon").asString());
+            }
+        }
         for (var repo : specific.get("repositories").fields()) {
             var repoName = repo.name();
             var branchPattern = Pattern.compile("^master$");
             if (repo.value().contains("branches")) {
                 branchPattern = Pattern.compile(repo.value().get("branches").asString());
@@ -127,11 +132,11 @@
                                                         includeBranchNames, mode, headers, allowedDomains));
                 }
             }
             if (repo.value().contains("issues")) {
                 var issueProject = configuration.issueProject(repo.value().get("issues").asString());
-                var updater = new IssueUpdater(issueProject, reviewIcon);
+                var updater = new IssueUpdater(issueProject, reviewIcon, commitIcon);
                 updaters.add(updater);
                 prUpdaters.add(updater);
             }
 
             if (updaters.isEmpty()) {
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -760,11 +760,12 @@
             var branchStorage = createBranchStorage(repo);
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
-            var updater = new IssueUpdater(issueProject, null);
+            var commitIcon = URI.create("http://www.example.com/commit.png");
+            var updater = new IssueUpdater(issueProject, null, commitIcon);
             var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
                                           prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -779,10 +780,18 @@
             var comments = issue.comments();
             assertEquals(1, comments.size());
             var comment = comments.get(0);
             assertTrue(comment.body().contains(editHash.abbreviate()));
 
+            // And in a link
+            var links = issue.links();
+            assertEquals(1, links.size());
+            var link = links.get(0);
+            assertEquals(commitIcon, link.iconUrl().orElseThrow());
+            assertEquals("Commit", link.title());
+            assertEquals(repo.webUrl(editHash), link.uri());
+
             // There should be no open issues
             assertEquals(0, issueProject.issues().size());
         }
     }
 
@@ -802,11 +811,11 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var reviewIcon = URI.create("http://www.example.com/review.png");
-            var updater = new IssueUpdater(issueProject, reviewIcon);
+            var updater = new IssueUpdater(issueProject, reviewIcon, null);
             var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
                                           prIssuesStorage, List.of(), List.of(updater), Set.of("rfr"),
                                           Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")));
 
             // Initialize history
