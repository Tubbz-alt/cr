diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -78,11 +78,11 @@
             var notifyBot = new JNotifyBot(repo, storageFolder, List.of("master"), tagStorage, branchStorage, List.of(updater));
 
             TestBotRunner.runPeriodicItems(notifyBot);
             assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
 
-            var editHash = CheckableRepository.appendAndCommit(localRepo, "One more line", "12345678: Fixes");
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "One more line", "1234567: Fixes");
             localRepo.push(editHash, repo.getUrl(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
             var jsonFiles = findJsonFiles(jsonFolder, "");
             assertEquals(1, jsonFiles.size());
             var jsonData = Files.readString(jsonFiles.get(0), StandardCharsets.UTF_8);
@@ -87,11 +87,11 @@
             assertEquals(1, jsonFiles.size());
             var jsonData = Files.readString(jsonFiles.get(0), StandardCharsets.UTF_8);
             var json = JSON.parse(jsonData);
             assertEquals(1, json.asArray().size());
             assertEquals(repo.getWebUrl(editHash).toString(), json.asArray().get(0).get("url").asString());
-            assertEquals(List.of("12345678"), json.asArray().get(0).get("issue").asArray().stream()
+            assertEquals(List.of("1234567"), json.asArray().get(0).get("issue").asArray().stream()
                                                   .map(JSONValue::asString)
                                                   .collect(Collectors.toList()));
         }
     }
 
@@ -117,11 +117,11 @@
             var notifyBot = new JNotifyBot(repo, storageFolder, List.of("master"), tagStorage, branchStorage, List.of(updater));
 
             TestBotRunner.runPeriodicItems(notifyBot);
             assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
 
-            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "2345678: More fixes");
             localRepo.fetch(repo.getUrl(), "history:history");
             localRepo.tag(editHash, "jdk-12+2", "Added tag 2", "Duke", "duke@openjdk.java.net");
             localRepo.pushAll(repo.getUrl());
 
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -130,11 +130,11 @@
 
             for (var file : jsonFiles) {
                 var jsonData = Files.readString(file, StandardCharsets.UTF_8);
                 var json = JSON.parse(jsonData);
                 assertEquals(1, json.asArray().size());
-                assertEquals(List.of("23456789"), json.asArray().get(0).get("issue").asArray().stream()
+                assertEquals(List.of("2345678"), json.asArray().get(0).get("issue").asArray().stream()
                                                       .map(JSONValue::asString)
                                                       .collect(Collectors.toList()));
 
                 if (json.asArray().get(0).contains("date")) {
                     assertEquals(repo.getWebUrl(editHash).toString(), json.asArray().get(0).get("url").asString());
@@ -169,20 +169,20 @@
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> smtpServer.receive(Duration.ofMillis(1)));
 
-            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "2345678: More fixes");
             localRepo.push(editHash, repo.getUrl(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
             var email = smtpServer.receive(Duration.ofSeconds(10));
             assertEquals(email.sender(), sender);
             assertEquals(email.recipients(), List.of(recipient));
-            assertTrue(email.subject().contains(": 23456789: More fixes"));
+            assertTrue(email.subject().contains(": 2345678: More fixes"));
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash.abbreviate()));
-            assertTrue(email.body().contains("23456789: More fixes"));
+            assertTrue(email.body().contains("2345678: More fixes"));
             assertFalse(email.body().contains("Committer"));
             assertFalse(email.body().contains(masterHash.abbreviate()));
         }
     }
 
@@ -209,11 +209,11 @@
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> smtpServer.receive(Duration.ofMillis(1)));
 
-            var editHash1 = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
+            var editHash1 = CheckableRepository.appendAndCommit(localRepo, "Another line", "2345678: More fixes");
             localRepo.push(editHash1, repo.getUrl(), "master");
             var editHash2 = CheckableRepository.appendAndCommit(localRepo, "Yet another line", "3456789A: Even more fixes");
             localRepo.push(editHash2, repo.getUrl(), "master");
 
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -221,11 +221,11 @@
             assertEquals(email.sender(), sender);
             assertEquals(email.recipients(), List.of(recipient));
             assertTrue(email.subject().contains(": 2 new changesets"));
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash1.abbreviate()));
-            assertTrue(email.body().contains("23456789: More fixes"));
+            assertTrue(email.body().contains("2345678: More fixes"));
             assertTrue(email.body().contains("Changeset: " + editHash2.abbreviate()));
             assertTrue(email.body().contains("3456789A: Even more fixes"));
             assertFalse(email.body().contains(masterHash.abbreviate()));
         }
     }
@@ -253,11 +253,11 @@
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> smtpServer.receive(Duration.ofMillis(1)));
 
-            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes",
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "2345678: More fixes",
                                                                "author", "author@test.test",
                                                                "committer", "committer@test.test");
             localRepo.push(editHash, repo.getUrl(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
             var email = smtpServer.receive(Duration.ofSeconds(10));
@@ -262,11 +262,11 @@
             TestBotRunner.runPeriodicItems(notifyBot);
             var email = smtpServer.receive(Duration.ofSeconds(10));
             assertEquals(email.sender(), sender);
             assertEquals(email.recipients(), List.of(recipient));
             assertTrue(email.body().contains("Changeset: " + editHash.abbreviate()));
-            assertTrue(email.body().contains("23456789: More fixes"));
+            assertTrue(email.body().contains("2345678: More fixes"));
             assertTrue(email.body().contains("Author:    author <author@test.test>"));
             assertTrue(email.body().contains("Committer: committer <committer@test.test>"));
             assertFalse(email.body().contains(masterHash.abbreviate()));
         }
     }
@@ -295,11 +295,11 @@
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> smtpServer.receive(Duration.ofMillis(1)));
 
-            var editHash1 = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
+            var editHash1 = CheckableRepository.appendAndCommit(localRepo, "Another line", "2345678: More fixes");
             localRepo.push(editHash1, repo.getUrl(), "master");
             var editHash2 = CheckableRepository.appendAndCommit(localRepo, "Yet another line", "3456789A: Even more fixes");
             localRepo.push(editHash2, repo.getUrl(), "master");
 
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -307,11 +307,11 @@
             assertEquals(email.sender(), sender);
             assertEquals(email.recipients(), List.of(recipient));
             assertFalse(email.subject().contains("another"));
             assertTrue(email.subject().contains(": master: 2 new changesets"));
             assertTrue(email.body().contains("Changeset: " + editHash1.abbreviate()));
-            assertTrue(email.body().contains("23456789: More fixes"));
+            assertTrue(email.body().contains("2345678: More fixes"));
             assertTrue(email.body().contains("Changeset: " + editHash2.abbreviate()));
             assertTrue(email.body().contains("3456789A: Even more fixes"));
             assertFalse(email.body().contains(masterHash.abbreviate()));
             assertFalse(email.body().contains("456789AB: Yet more fixes"));
 
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java
@@ -89,11 +89,11 @@
         assertEquals(check.getClass(), issue.check().getClass());
     }
 
     @Test
     void singleIssueReferenceShouldPass() {
-        var commit = commit(List.of("0123457: A bug"));
+        var commit = commit(List.of("1234570: A bug"));
         var check = new IssuesCheck(utils);
         var issues = toList(check.check(commit, message(commit), conf()));
         assertEquals(0, issues.size());
     }
 
@@ -97,12 +97,76 @@
         assertEquals(0, issues.size());
     }
 
     @Test
     void multipleIssueReferencesShouldPass() {
-        var commit = commit(List.of("0123457: A bug", "12345678: Another bug"));
+        var commit = commit(List.of("1234570: A bug", "1234567: Another bug"));
         var message = message(commit);
         var check = new IssuesCheck(utils);
         var issues = toList(check.check(commit, message, conf()));
         assertEquals(0, issues.size());
     }
+
+    @Test
+    void issueWithLeadingZeroShouldFail() {
+        var commit = commit(List.of("0123456: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf()));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof IssuesIssue);
+        var issue = (IssuesIssue) issues.get(0);
+        assertEquals(commit, issue.commit());
+        assertEquals(message, issue.message());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check.getClass(), issue.check().getClass());
+    }
+
+    @Test
+    void issueWithTooFewDigitsShouldFail() {
+        var commit = commit(List.of("123456: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf()));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof IssuesIssue);
+        var issue = (IssuesIssue) issues.get(0);
+        assertEquals(commit, issue.commit());
+        assertEquals(message, issue.message());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check.getClass(), issue.check().getClass());
+    }
+
+    @Test
+    void issueWithTooManyDigitsShouldFail() {
+        var commit = commit(List.of("12345678: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf()));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof IssuesIssue);
+        var issue = (IssuesIssue) issues.get(0);
+        assertEquals(commit, issue.commit());
+        assertEquals(message, issue.message());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check.getClass(), issue.check().getClass());
+    }
+
+    @Test
+    void issueWithPrefixShouldFail() {
+        var commit = commit(List.of("JDK-7654321: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf()));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof IssuesIssue);
+        var issue = (IssuesIssue) issues.get(0);
+        assertEquals(commit, issue.commit());
+        assertEquals(message, issue.message());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check.getClass(), issue.check().getClass());
+    }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageSyntax.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageSyntax.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageSyntax.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageSyntax.java
@@ -29,11 +29,11 @@
         private static final String EMAIL_ADDR_REGEX = "[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]+";
         private static final String REAL_NAME_REGEX = "[-_a-zA-Z0-9][-_ a-zA-Z0-9'.]+";
         private static final String REAL_NAME_AND_EMAIL_ATTR_REGEX = REAL_NAME_REGEX + " +<" + EMAIL_ADDR_REGEX + ">";
         private static final String ATTR_REGEX = "(?:(?:" + EMAIL_ADDR_REGEX + ")|(?:" + REAL_NAME_AND_EMAIL_ATTR_REGEX + "))";
 
-        public static final Pattern ISSUE_PATTERN = Pattern.compile("((?:[A-Z][A-Z0-9]+-)?[0-9]+): (\\S.*)$");
+        public static final Pattern ISSUE_PATTERN = Pattern.compile("([1-9][0-9]{6}): (\\S.*)$");
         public static final Pattern SUMMARY_PATTERN = Pattern.compile("Summary: (\\S.*)");
         public static final Pattern REVIEWED_BY_PATTERN = Pattern.compile("Reviewed-by: ((?:" + OPENJDK_USERNAME_REGEX + ")(?:, " + OPENJDK_USERNAME_REGEX + ")*)$");
         public static final Pattern CONTRIBUTED_BY_PATTERN = Pattern.compile("Contributed-by: (" + ATTR_REGEX + "(?:, " + ATTR_REGEX + ")*)$");
         public static final Pattern CO_AUTHOR_PATTERN = Pattern.compile("Co-authored-by: ((?:" + REAL_NAME_AND_EMAIL_ATTR_REGEX + ")(?:, " + REAL_NAME_AND_EMAIL_ATTR_REGEX + ")*)$");
 }
diff a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/CommitMessageParsersTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/CommitMessageParsersTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/CommitMessageParsersTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/CommitMessageParsersTests.java
@@ -30,16 +30,16 @@
 import org.openjdk.skara.vcs.Author;
 
 public class CommitMessageParsersTests {
     @Test
     void parseVersion0Commit() {
-        var text = List.of("01234567: A bug",
+        var text = List.of("1234567: A bug",
                            "Reviewed-by: foo",
                            "Contributed-by: Bar O'Baz <bar.obaz@localhost.com>");
         var message = CommitMessageParsers.v0.parse(text);
 
-        assertEquals(List.of(new Issue("01234567", "A bug")), message.issues());
+        assertEquals(List.of(new Issue("1234567", "A bug")), message.issues());
         assertEquals(List.of(new Author("Bar O'Baz", "bar.obaz@localhost.com")),
                      message.contributors());
         assertEquals(List.of("foo"), message.reviewers());
         assertEquals(List.of(), message.summaries());
         assertEquals(List.of(), message.additional());
@@ -45,17 +45,17 @@
         assertEquals(List.of(), message.additional());
     }
 
     @Test
     void parseVersion0CommitWithExtraNewline() {
-        var text = List.of("01234567: A bug",
+        var text = List.of("1234567: A bug",
                            "",
                            "Summary: summary",
                            "Reviewed-by: foo");
         var message = CommitMessageParsers.v0.parse(text);
 
-        assertEquals(List.of(new Issue("01234567", "A bug")), message.issues());
+        assertEquals(List.of(new Issue("1234567", "A bug")), message.issues());
         assertEquals(List.of(), message.contributors());
         assertEquals(List.of(), message.reviewers());
         assertEquals(List.of(), message.summaries());
         assertEquals(List.of("", "Summary: summary", "Reviewed-by: foo"), message.additional());
     }
@@ -60,17 +60,17 @@
         assertEquals(List.of("", "Summary: summary", "Reviewed-by: foo"), message.additional());
     }
 
     @Test
     void parseVersion0CommitWithSummary() {
-        var text = List.of("01234567: A bug",
+        var text = List.of("1234567: A bug",
                            "Summary: This is a summary",
                            "Reviewed-by: foo",
                            "Contributed-by: Bar O'Baz <bar.obaz@localhost.com>");
         var message = CommitMessageParsers.v0.parse(text);
 
-        assertEquals(List.of(new Issue("01234567", "A bug")), message.issues());
+        assertEquals(List.of(new Issue("1234567", "A bug")), message.issues());
         assertEquals(List.of(new Author("Bar O'Baz", "bar.obaz@localhost.com")),
                      message.contributors());
         assertEquals(List.of("foo"), message.reviewers());
         assertEquals(List.of("This is a summary"), message.summaries());
         assertEquals(List.of(), message.additional());
@@ -77,17 +77,17 @@
     }
 
 
     @Test
     void parseVersion1Commit() {
-        var text = List.of("01234567: A bug",
+        var text = List.of("1234567: A bug",
                            "",
                            "Co-authored-by: Bar O'Baz <bar.obaz@localhost.com>",
                            "Reviewed-by: foo");
         var message = CommitMessageParsers.v1.parse(text);
 
-        assertEquals(List.of(new Issue("01234567", "A bug")), message.issues());
+        assertEquals(List.of(new Issue("1234567", "A bug")), message.issues());
         assertEquals(List.of(new Author("Bar O'Baz", "bar.obaz@localhost.com")),
                      message.contributors());
         assertEquals(List.of("foo"), message.reviewers());
         assertEquals(List.of(), message.summaries());
         assertEquals(List.of(), message.additional());
@@ -93,11 +93,11 @@
         assertEquals(List.of(), message.additional());
     }
 
     @Test
     void parseVersion1CommitWithSummary() {
-        var text = List.of("01234567: A bug",
+        var text = List.of("1234567: A bug",
                            "",
                            "This is a summary",
                            "",
                            "Co-authored-by: Bar O'Baz <bar.obaz@localhost.com>",
                            "Reviewed-by: foo");
@@ -101,11 +101,11 @@
                            "",
                            "Co-authored-by: Bar O'Baz <bar.obaz@localhost.com>",
                            "Reviewed-by: foo");
         var message = CommitMessageParsers.v1.parse(text);
 
-        assertEquals(List.of(new Issue("01234567", "A bug")), message.issues());
+        assertEquals(List.of(new Issue("1234567", "A bug")), message.issues());
         assertEquals(List.of(new Author("Bar O'Baz", "bar.obaz@localhost.com")),
                      message.contributors());
         assertEquals(List.of("foo"), message.reviewers());
         assertEquals(List.of("This is a summary"), message.summaries());
         assertEquals(List.of(), message.additional());
@@ -111,11 +111,11 @@
         assertEquals(List.of(), message.additional());
     }
 
     @Test
     void parseVersion1CommitWithMultiPargraphSummary() {
-        var text = List.of("01234567: A bug",
+        var text = List.of("1234567: A bug",
                            "",
                            "This is a summary",
                            "",
                            "This is another summary paragraph",
                            "",
@@ -121,11 +121,11 @@
                            "",
                            "Co-authored-by: Bar O'Baz <bar.obaz@localhost.com>",
                            "Reviewed-by: foo");
         var message = CommitMessageParsers.v1.parse(text);
 
-        assertEquals(List.of(new Issue("01234567", "A bug")), message.issues());
+        assertEquals(List.of(new Issue("1234567", "A bug")), message.issues());
         assertEquals(List.of(new Author("Bar O'Baz", "bar.obaz@localhost.com")),
                      message.contributors());
         assertEquals(List.of("foo"), message.reviewers());
         assertEquals(List.of("This is a summary","","This is another summary paragraph"),
                      message.summaries());
@@ -132,11 +132,11 @@
         assertEquals(List.of(), message.additional());
     }
 
     @Test
     void parseVersion1CommitWithoutTrailers() {
-        var text = List.of("01234567: A bug",
+        var text = List.of("1234567: A bug",
                            "",
                            "This is a summary",
                            "",
                            "This is another summary paragraph");
         var message = CommitMessageParsers.v1.parse(text);
@@ -139,11 +139,11 @@
                            "This is a summary",
                            "",
                            "This is another summary paragraph");
         var message = CommitMessageParsers.v1.parse(text);
 
-        assertEquals(List.of(new Issue("01234567", "A bug")), message.issues());
+        assertEquals(List.of(new Issue("1234567", "A bug")), message.issues());
         assertEquals(List.of(), message.contributors());
         assertEquals(List.of(), message.reviewers());
         assertEquals(List.of("This is a summary","","This is another summary paragraph"),
                      message.summaries());
         assertEquals(List.of(), message.additional());
@@ -180,17 +180,17 @@
         assertEquals(List.of(), message.additional());
     }
 
     @Test
     void parseVersion1CommitWithIssueAndReview() {
-        var text = List.of("01234567: An issue",
+        var text = List.of("1234567: An issue",
                            "",
                            "Reviewed-by: foo");
         var message = CommitMessageParsers.v1.parse(text);
 
-        assertEquals("01234567: An issue", message.title());
-        assertEquals(List.of(new Issue("01234567", "An issue")), message.issues());
+        assertEquals("1234567: An issue", message.title());
+        assertEquals(List.of(new Issue("1234567", "An issue")), message.issues());
         assertEquals(List.of(), message.contributors());
         assertEquals(List.of("foo"), message.reviewers());
         assertEquals(List.of(), message.summaries());
         assertEquals(List.of(), message.additional());
     }
@@ -195,16 +195,16 @@
         assertEquals(List.of(), message.additional());
     }
 
     @Test
     void parseVersion1WithAdditionalLines() {
-        var text = List.of("01234567: An issue",
+        var text = List.of("1234567: An issue",
                            "Reviewed-by: foo");
         var message = CommitMessageParsers.v1.parse(text);
 
-        assertEquals("01234567: An issue", message.title());
-        assertEquals(List.of(new Issue("01234567", "An issue")), message.issues());
+        assertEquals("1234567: An issue", message.title());
+        assertEquals(List.of(new Issue("1234567", "An issue")), message.issues());
         assertEquals(List.of(), message.contributors());
         assertEquals(List.of(), message.reviewers());
         assertEquals(List.of(), message.summaries());
         assertEquals(List.of("Reviewed-by: foo"), message.additional());
     }
@@ -209,18 +209,18 @@
         assertEquals(List.of("Reviewed-by: foo"), message.additional());
     }
 
     @Test
     void parseVersion1WithUknownTrailer() {
-        var text = List.of("01234567: An issue",
+        var text = List.of("1234567: An issue",
                            "",
                            "Reviewed-by: foo",
                            "Unknown-trailer: bar");
         var message = CommitMessageParsers.v1.parse(text);
 
-        assertEquals("01234567: An issue", message.title());
-        assertEquals(List.of(new Issue("01234567", "An issue")), message.issues());
+        assertEquals("1234567: An issue", message.title());
+        assertEquals(List.of(new Issue("1234567", "An issue")), message.issues());
         assertEquals(List.of(), message.contributors());
         assertEquals(List.of("foo"), message.reviewers());
         assertEquals(List.of(), message.summaries());
         assertEquals(List.of("Unknown-trailer: bar"), message.additional());
     }
