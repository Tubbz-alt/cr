diff a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/CommitMessageParsersTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/CommitMessageParsersTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/CommitMessageParsersTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/CommitMessageParsersTests.java
@@ -30,16 +30,16 @@
 import org.openjdk.skara.vcs.Author;
 
 public class CommitMessageParsersTests {
     @Test
     void parseVersion0Commit() {
-        var text = List.of("01234567: A bug",
+        var text = List.of("1234567: A bug",
                            "Reviewed-by: foo",
                            "Contributed-by: Bar O'Baz <bar.obaz@localhost.com>");
         var message = CommitMessageParsers.v0.parse(text);
 
-        assertEquals(List.of(new Issue("01234567", "A bug")), message.issues());
+        assertEquals(List.of(new Issue("1234567", "A bug")), message.issues());
         assertEquals(List.of(new Author("Bar O'Baz", "bar.obaz@localhost.com")),
                      message.contributors());
         assertEquals(List.of("foo"), message.reviewers());
         assertEquals(List.of(), message.summaries());
         assertEquals(List.of(), message.additional());
@@ -45,17 +45,17 @@
         assertEquals(List.of(), message.additional());
     }
 
     @Test
     void parseVersion0CommitWithExtraNewline() {
-        var text = List.of("01234567: A bug",
+        var text = List.of("1234567: A bug",
                            "",
                            "Summary: summary",
                            "Reviewed-by: foo");
         var message = CommitMessageParsers.v0.parse(text);
 
-        assertEquals(List.of(new Issue("01234567", "A bug")), message.issues());
+        assertEquals(List.of(new Issue("1234567", "A bug")), message.issues());
         assertEquals(List.of(), message.contributors());
         assertEquals(List.of(), message.reviewers());
         assertEquals(List.of(), message.summaries());
         assertEquals(List.of("", "Summary: summary", "Reviewed-by: foo"), message.additional());
     }
@@ -60,17 +60,17 @@
         assertEquals(List.of("", "Summary: summary", "Reviewed-by: foo"), message.additional());
     }
 
     @Test
     void parseVersion0CommitWithSummary() {
-        var text = List.of("01234567: A bug",
+        var text = List.of("1234567: A bug",
                            "Summary: This is a summary",
                            "Reviewed-by: foo",
                            "Contributed-by: Bar O'Baz <bar.obaz@localhost.com>");
         var message = CommitMessageParsers.v0.parse(text);
 
-        assertEquals(List.of(new Issue("01234567", "A bug")), message.issues());
+        assertEquals(List.of(new Issue("1234567", "A bug")), message.issues());
         assertEquals(List.of(new Author("Bar O'Baz", "bar.obaz@localhost.com")),
                      message.contributors());
         assertEquals(List.of("foo"), message.reviewers());
         assertEquals(List.of("This is a summary"), message.summaries());
         assertEquals(List.of(), message.additional());
@@ -77,17 +77,17 @@
     }
 
 
     @Test
     void parseVersion1Commit() {
-        var text = List.of("01234567: A bug",
+        var text = List.of("1234567: A bug",
                            "",
                            "Co-authored-by: Bar O'Baz <bar.obaz@localhost.com>",
                            "Reviewed-by: foo");
         var message = CommitMessageParsers.v1.parse(text);
 
-        assertEquals(List.of(new Issue("01234567", "A bug")), message.issues());
+        assertEquals(List.of(new Issue("1234567", "A bug")), message.issues());
         assertEquals(List.of(new Author("Bar O'Baz", "bar.obaz@localhost.com")),
                      message.contributors());
         assertEquals(List.of("foo"), message.reviewers());
         assertEquals(List.of(), message.summaries());
         assertEquals(List.of(), message.additional());
@@ -93,11 +93,11 @@
         assertEquals(List.of(), message.additional());
     }
 
     @Test
     void parseVersion1CommitWithSummary() {
-        var text = List.of("01234567: A bug",
+        var text = List.of("1234567: A bug",
                            "",
                            "This is a summary",
                            "",
                            "Co-authored-by: Bar O'Baz <bar.obaz@localhost.com>",
                            "Reviewed-by: foo");
@@ -101,11 +101,11 @@
                            "",
                            "Co-authored-by: Bar O'Baz <bar.obaz@localhost.com>",
                            "Reviewed-by: foo");
         var message = CommitMessageParsers.v1.parse(text);
 
-        assertEquals(List.of(new Issue("01234567", "A bug")), message.issues());
+        assertEquals(List.of(new Issue("1234567", "A bug")), message.issues());
         assertEquals(List.of(new Author("Bar O'Baz", "bar.obaz@localhost.com")),
                      message.contributors());
         assertEquals(List.of("foo"), message.reviewers());
         assertEquals(List.of("This is a summary"), message.summaries());
         assertEquals(List.of(), message.additional());
@@ -111,11 +111,11 @@
         assertEquals(List.of(), message.additional());
     }
 
     @Test
     void parseVersion1CommitWithMultiPargraphSummary() {
-        var text = List.of("01234567: A bug",
+        var text = List.of("1234567: A bug",
                            "",
                            "This is a summary",
                            "",
                            "This is another summary paragraph",
                            "",
@@ -121,11 +121,11 @@
                            "",
                            "Co-authored-by: Bar O'Baz <bar.obaz@localhost.com>",
                            "Reviewed-by: foo");
         var message = CommitMessageParsers.v1.parse(text);
 
-        assertEquals(List.of(new Issue("01234567", "A bug")), message.issues());
+        assertEquals(List.of(new Issue("1234567", "A bug")), message.issues());
         assertEquals(List.of(new Author("Bar O'Baz", "bar.obaz@localhost.com")),
                      message.contributors());
         assertEquals(List.of("foo"), message.reviewers());
         assertEquals(List.of("This is a summary","","This is another summary paragraph"),
                      message.summaries());
@@ -132,11 +132,11 @@
         assertEquals(List.of(), message.additional());
     }
 
     @Test
     void parseVersion1CommitWithoutTrailers() {
-        var text = List.of("01234567: A bug",
+        var text = List.of("1234567: A bug",
                            "",
                            "This is a summary",
                            "",
                            "This is another summary paragraph");
         var message = CommitMessageParsers.v1.parse(text);
@@ -139,11 +139,11 @@
                            "This is a summary",
                            "",
                            "This is another summary paragraph");
         var message = CommitMessageParsers.v1.parse(text);
 
-        assertEquals(List.of(new Issue("01234567", "A bug")), message.issues());
+        assertEquals(List.of(new Issue("1234567", "A bug")), message.issues());
         assertEquals(List.of(), message.contributors());
         assertEquals(List.of(), message.reviewers());
         assertEquals(List.of("This is a summary","","This is another summary paragraph"),
                      message.summaries());
         assertEquals(List.of(), message.additional());
@@ -180,17 +180,17 @@
         assertEquals(List.of(), message.additional());
     }
 
     @Test
     void parseVersion1CommitWithIssueAndReview() {
-        var text = List.of("01234567: An issue",
+        var text = List.of("1234567: An issue",
                            "",
                            "Reviewed-by: foo");
         var message = CommitMessageParsers.v1.parse(text);
 
-        assertEquals("01234567: An issue", message.title());
-        assertEquals(List.of(new Issue("01234567", "An issue")), message.issues());
+        assertEquals("1234567: An issue", message.title());
+        assertEquals(List.of(new Issue("1234567", "An issue")), message.issues());
         assertEquals(List.of(), message.contributors());
         assertEquals(List.of("foo"), message.reviewers());
         assertEquals(List.of(), message.summaries());
         assertEquals(List.of(), message.additional());
     }
@@ -195,16 +195,16 @@
         assertEquals(List.of(), message.additional());
     }
 
     @Test
     void parseVersion1WithAdditionalLines() {
-        var text = List.of("01234567: An issue",
+        var text = List.of("1234567: An issue",
                            "Reviewed-by: foo");
         var message = CommitMessageParsers.v1.parse(text);
 
-        assertEquals("01234567: An issue", message.title());
-        assertEquals(List.of(new Issue("01234567", "An issue")), message.issues());
+        assertEquals("1234567: An issue", message.title());
+        assertEquals(List.of(new Issue("1234567", "An issue")), message.issues());
         assertEquals(List.of(), message.contributors());
         assertEquals(List.of(), message.reviewers());
         assertEquals(List.of(), message.summaries());
         assertEquals(List.of("Reviewed-by: foo"), message.additional());
     }
@@ -209,18 +209,18 @@
         assertEquals(List.of("Reviewed-by: foo"), message.additional());
     }
 
     @Test
     void parseVersion1WithUknownTrailer() {
-        var text = List.of("01234567: An issue",
+        var text = List.of("1234567: An issue",
                            "",
                            "Reviewed-by: foo",
                            "Unknown-trailer: bar");
         var message = CommitMessageParsers.v1.parse(text);
 
-        assertEquals("01234567: An issue", message.title());
-        assertEquals(List.of(new Issue("01234567", "An issue")), message.issues());
+        assertEquals("1234567: An issue", message.title());
+        assertEquals(List.of(new Issue("1234567", "An issue")), message.issues());
         assertEquals(List.of(), message.contributors());
         assertEquals(List.of("foo"), message.reviewers());
         assertEquals(List.of(), message.summaries());
         assertEquals(List.of("Unknown-trailer: bar"), message.additional());
     }
