diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -309,15 +309,23 @@
 
             var hunk = hunks.get(0);
             assertEquals(new Range(0, 0), hunk.source().range());
             assertEquals(new Range(1, 1), hunk.target().range());
 
-            assertEquals(List.of(), hunk.source().lines());
-            assertEquals(List.of("Hello, readme!"), hunk.target().lines());
+            assertLinesEquals(List.of(), hunk.source().lines());
+            assertLinesEquals(List.of("Hello, readme!"), hunk.target().lines());
         }
     }
 
+    static void assertLinesEquals(List<String> expected, List<String> actual) {
+        var newLine = System.lineSeparator();
+        var suffix = newLine.endsWith("\n")
+                ? newLine.substring(0, newLine.length() - 1) // drop trailing '\n' (keeping any '\r')
+                : newLine;
+        assertEquals(expected.stream().map(l -> l + suffix).collect(Collectors.toList()), actual);
+    }
+
     @ParameterizedTest
     @EnumSource(VCS.class)
     void testCommitListingWithMultipleCommits(VCS vcs) throws IOException {
         try (var dir = new TemporaryDirectory()) {
             var r = Repository.init(dir.path(), vcs);
@@ -377,12 +385,12 @@
 
             var hunk = hunks.get(0);
             assertEquals(new Range(2, 0), hunk.source().range());
             assertEquals(new Range(2, 1), hunk.target().range());
 
-            assertEquals(List.of(), hunk.source().lines());
-            assertEquals(List.of("Another line"), hunk.target().lines());
+            assertLinesEquals(List.of(), hunk.source().lines());
+            assertLinesEquals(List.of("Another line"), hunk.target().lines());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -509,12 +517,12 @@
 
             var hunk = hunks.get(0);
             assertEquals(new Range(2, 0), hunk.source().range());
             assertEquals(new Range(2, 2), hunk.target().range());
 
-            assertEquals(List.of(), hunk.source().lines());
-            assertEquals(List.of("Another line", "A final line"), hunk.target().lines());
+            assertLinesEquals(List.of(), hunk.source().lines());
+            assertLinesEquals(List.of("Another line", "A final line"), hunk.target().lines());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -607,11 +615,11 @@
             assertEquals(Path.of("CONTRIBUTING"), patch.target().path().get());
 
             var hunks = patch.hunks();
             assertEquals(1, hunks.size());
             var hunk = hunks.get(0);
-            assertEquals(List.of("Keep the patches coming"), hunk.target().lines());
+            assertLinesEquals(List.of("Keep the patches coming"), hunk.target().lines());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -885,11 +893,11 @@
             assertEquals(0, hunk.source().range().count());
             assertEquals(0, hunk.source().lines().size());
 
             assertEquals(2, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
-            assertEquals(List.of("One more line"), hunk.target().lines());
+            assertLinesEquals(List.of("One more line"), hunk.target().lines());
 
             assertEquals(1, hunk.added());
             assertEquals(0, hunk.removed());
             assertEquals(0, hunk.modified());
         }
@@ -935,15 +943,15 @@
             assertEquals(1, hunks1.size());
 
             var hunk1 = hunks1.get(0);
             assertEquals(1, hunk1.source().range().start());
             assertEquals(1, hunk1.source().range().count());
-            assertEquals(List.of("make"), hunk1.source().lines());
+            assertLinesEquals(List.of("make"), hunk1.source().lines());
 
             assertEquals(1, hunk1.target().range().start());
             assertEquals(1, hunk1.target().range().count());
-            assertEquals(List.of("make images"), hunk1.target().lines());
+            assertLinesEquals(List.of("make images"), hunk1.target().lines());
 
             var patch2 = patches.get(1).asTextualPatch();
             assertEquals(Path.of("README"), patch2.source().path().get());
             assertEquals(Path.of("README"), patch2.target().path().get());
             assertTrue(patch2.source().type().get().isRegularNonExecutable());
@@ -954,15 +962,15 @@
             assertEquals(1, hunks2.size());
 
             var hunk2 = hunks2.get(0);
             assertEquals(1, hunk2.source().range().start());
             assertEquals(1, hunk2.source().range().count());
-            assertEquals(List.of("Hello, readme!"), hunk2.source().lines());
+            assertLinesEquals(List.of("Hello, readme!"), hunk2.source().lines());
 
             assertEquals(1, hunk2.target().range().start());
             assertEquals(1, hunk2.target().range().count());
-            assertEquals(List.of("Hello, Skara!"), hunk2.target().lines());
+            assertLinesEquals(List.of("Hello, Skara!"), hunk2.target().lines());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -998,15 +1006,15 @@
             assertEquals(2, hunks.size());
 
             var hunk1 = hunks.get(0);
             assertEquals(1, hunk1.source().range().start());
             assertEquals(1, hunk1.source().range().count());
-            assertEquals(List.of("A"), hunk1.source().lines());
+            assertLinesEquals(List.of("A"), hunk1.source().lines());
 
             assertEquals(1, hunk1.target().range().start());
             assertEquals(2, hunk1.target().range().count());
-            assertEquals(List.of("1", "2"), hunk1.target().lines());
+            assertLinesEquals(List.of("1", "2"), hunk1.target().lines());
 
             assertEquals(1, hunk1.added());
             assertEquals(0, hunk1.removed());
             assertEquals(1, hunk1.modified());
 
@@ -1011,15 +1019,15 @@
             assertEquals(1, hunk1.modified());
 
             var hunk2 = hunks.get(1);
             assertEquals(3, hunk2.source().range().start());
             assertEquals(1, hunk2.source().range().count());
-            assertEquals(List.of("C"), hunk2.source().lines());
+            assertLinesEquals(List.of("C"), hunk2.source().lines());
 
             assertEquals(4, hunk2.target().range().start());
             assertEquals(1, hunk2.target().range().count());
-            assertEquals(List.of("3"), hunk2.target().lines());
+            assertLinesEquals(List.of("3"), hunk2.target().lines());
 
             assertEquals(0, hunk2.added());
             assertEquals(0, hunk2.removed());
             assertEquals(1, hunk2.modified());
         }
@@ -1059,15 +1067,15 @@
             assertEquals(1, hunks.size());
 
             var hunk = hunks.get(0);
             assertEquals(1, hunk.source().range().start());
             assertEquals(1, hunk.source().range().count());
-            assertEquals(List.of("Hello, world!"), hunk.source().lines());
+            assertLinesEquals(List.of("Hello, world!"), hunk.source().lines());
 
             assertEquals(0, hunk.target().range().start());
             assertEquals(0, hunk.target().range().count());
-            assertEquals(List.of(), hunk.target().lines());
+            assertLinesEquals(List.of(), hunk.target().lines());
 
             assertEquals(0, hunk.added());
             assertEquals(1, hunk.removed());
             assertEquals(0, hunk.modified());
         }
@@ -1108,15 +1116,15 @@
             assertEquals(1, hunks.size());
 
             var hunk = hunks.get(0);
             assertEquals(0, hunk.source().range().start());
             assertEquals(0, hunk.source().range().count());
-            assertEquals(List.of(), hunk.source().lines());
+            assertLinesEquals(List.of(), hunk.source().lines());
 
             assertEquals(1, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
-            assertEquals(List.of("make"), hunk.target().lines());
+            assertLinesEquals(List.of("make"), hunk.target().lines());
 
             assertEquals(1, hunk.added());
             assertEquals(0, hunk.removed());
             assertEquals(0, hunk.modified());
         }
@@ -1154,15 +1162,15 @@
             assertEquals(1, hunks.size());
 
             var hunk = hunks.get(0);
             assertEquals(2, hunk.source().range().start());
             assertEquals(0, hunk.source().range().count());
-            assertEquals(List.of(), hunk.source().lines());
+            assertLinesEquals(List.of(), hunk.source().lines());
 
             assertEquals(2, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
-            assertEquals(List.of("One more line"), hunk.target().lines());
+            assertLinesEquals(List.of("One more line"), hunk.target().lines());
 
             assertEquals(1, hunk.added());
             assertEquals(0, hunk.removed());
             assertEquals(0, hunk.modified());
         }
@@ -1300,12 +1308,12 @@
             assertEquals(Path.of("README"), secondPatch.target().path().get());
             assertTrue(secondPatch.status().isModified());
             assertEquals(1, secondPatch.hunks().size());
 
             var secondHunk = secondPatch.hunks().get(0);
-            assertEquals(List.of(), secondHunk.source().lines());
-            assertEquals(List.of("One last line"), secondHunk.target().lines());
+            assertLinesEquals(List.of(), secondHunk.source().lines());
+            assertLinesEquals(List.of("One last line"), secondHunk.target().lines());
 
             assertEquals(3, secondHunk.source().range().start());
             assertEquals(0, secondHunk.source().range().count());
             assertEquals(3, secondHunk.target().range().start());
             assertEquals(1, secondHunk.target().range().count());
@@ -1319,12 +1327,12 @@
             assertEquals(Path.of("README"), thirdPatch.target().path().get());
             assertTrue(thirdPatch.status().isModified());
             assertEquals(1, thirdPatch.hunks().size());
 
             var thirdHunk = thirdPatch.hunks().get(0);
-            assertEquals(List.of(), thirdHunk.source().lines());
-            assertEquals(List.of("One more line", "One last line"), thirdHunk.target().lines());
+            assertLinesEquals(List.of(), thirdHunk.source().lines());
+            assertLinesEquals(List.of("One more line", "One last line"), thirdHunk.target().lines());
 
             assertEquals(2, thirdHunk.source().range().start());
             assertEquals(0, thirdHunk.source().range().count());
             assertEquals(2, thirdHunk.target().range().start());
             assertEquals(2, thirdHunk.target().range().count());
