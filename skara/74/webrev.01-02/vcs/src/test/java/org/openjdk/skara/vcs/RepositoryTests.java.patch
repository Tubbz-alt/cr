diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -309,11 +309,11 @@
 
             var hunk = hunks.get(0);
             assertEquals(new Range(0, 0), hunk.source().range());
             assertEquals(new Range(1, 1), hunk.target().range());
 
-            assertEquals(List.of(), hunk.source().lines());
+            assertLinesEquals(List.of(), hunk.source().lines());
             assertLinesEquals(List.of("Hello, readme!"), hunk.target().lines());
         }
     }
 
     static void assertLinesEquals(List<String> expected, List<String> actual) {
@@ -385,11 +385,11 @@
 
             var hunk = hunks.get(0);
             assertEquals(new Range(2, 0), hunk.source().range());
             assertEquals(new Range(2, 1), hunk.target().range());
 
-            assertEquals(List.of(), hunk.source().lines());
+            assertLinesEquals(List.of(), hunk.source().lines());
             assertLinesEquals(List.of("Another line"), hunk.target().lines());
         }
     }
 
     @ParameterizedTest
@@ -517,11 +517,11 @@
 
             var hunk = hunks.get(0);
             assertEquals(new Range(2, 0), hunk.source().range());
             assertEquals(new Range(2, 2), hunk.target().range());
 
-            assertEquals(List.of(), hunk.source().lines());
+            assertLinesEquals(List.of(), hunk.source().lines());
             assertLinesEquals(List.of("Another line", "A final line"), hunk.target().lines());
         }
     }
 
     @ParameterizedTest
@@ -1071,11 +1071,11 @@
             assertEquals(1, hunk.source().range().count());
             assertLinesEquals(List.of("Hello, world!"), hunk.source().lines());
 
             assertEquals(0, hunk.target().range().start());
             assertEquals(0, hunk.target().range().count());
-            assertEquals(List.of(), hunk.target().lines());
+            assertLinesEquals(List.of(), hunk.target().lines());
 
             assertEquals(0, hunk.added());
             assertEquals(1, hunk.removed());
             assertEquals(0, hunk.modified());
         }
@@ -1116,11 +1116,11 @@
             assertEquals(1, hunks.size());
 
             var hunk = hunks.get(0);
             assertEquals(0, hunk.source().range().start());
             assertEquals(0, hunk.source().range().count());
-            assertEquals(List.of(), hunk.source().lines());
+            assertLinesEquals(List.of(), hunk.source().lines());
 
             assertEquals(1, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
             assertLinesEquals(List.of("make"), hunk.target().lines());
 
@@ -1162,11 +1162,11 @@
             assertEquals(1, hunks.size());
 
             var hunk = hunks.get(0);
             assertEquals(2, hunk.source().range().start());
             assertEquals(0, hunk.source().range().count());
-            assertEquals(List.of(), hunk.source().lines());
+            assertLinesEquals(List.of(), hunk.source().lines());
 
             assertEquals(2, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
             assertLinesEquals(List.of("One more line"), hunk.target().lines());
 
@@ -1308,11 +1308,11 @@
             assertEquals(Path.of("README"), secondPatch.target().path().get());
             assertTrue(secondPatch.status().isModified());
             assertEquals(1, secondPatch.hunks().size());
 
             var secondHunk = secondPatch.hunks().get(0);
-            assertEquals(List.of(), secondHunk.source().lines());
+            assertLinesEquals(List.of(), secondHunk.source().lines());
             assertLinesEquals(List.of("One last line"), secondHunk.target().lines());
 
             assertEquals(3, secondHunk.source().range().start());
             assertEquals(0, secondHunk.source().range().count());
             assertEquals(3, secondHunk.target().range().start());
@@ -1327,11 +1327,11 @@
             assertEquals(Path.of("README"), thirdPatch.target().path().get());
             assertTrue(thirdPatch.status().isModified());
             assertEquals(1, thirdPatch.hunks().size());
 
             var thirdHunk = thirdPatch.hunks().get(0);
-            assertEquals(List.of(), thirdHunk.source().lines());
+            assertLinesEquals(List.of(), thirdHunk.source().lines());
             assertLinesEquals(List.of("One more line", "One last line"), thirdHunk.target().lines());
 
             assertEquals(2, thirdHunk.source().range().start());
             assertEquals(0, thirdHunk.source().range().count());
             assertEquals(2, thirdHunk.target().range().start());
