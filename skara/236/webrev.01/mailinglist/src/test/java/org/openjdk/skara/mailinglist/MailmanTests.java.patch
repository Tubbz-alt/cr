diff a/mailinglist/src/test/java/org/openjdk/skara/mailinglist/MailmanTests.java b/mailinglist/src/test/java/org/openjdk/skara/mailinglist/MailmanTests.java
--- a/mailinglist/src/test/java/org/openjdk/skara/mailinglist/MailmanTests.java
+++ b/mailinglist/src/test/java/org/openjdk/skara/mailinglist/MailmanTests.java
@@ -43,16 +43,20 @@
             var sender = EmailAddress.from("Test", "test@test.email");
             var mail = Email.create(sender, "Subject", "Body")
                             .recipient(EmailAddress.parse(listAddress))
                             .build();
             mailmanList.post(mail);
+            var expectedMail = Email.from(mail)
+                                    .sender(EmailAddress.parse(listAddress))
+                                    .build();
+
             testServer.processIncoming();
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             var conversation = conversations.get(0);
-            assertEquals(mail, conversation.first());
+            assertEquals(expectedMail, conversation.first());
         }
     }
 
     @Test
     void replies() throws IOException {
@@ -65,33 +69,40 @@
             var sentParent = Email.create(sender, "Subject", "Body")
                                   .recipient(EmailAddress.parse(listAddress))
                                   .build();
             mailmanList.post(sentParent);
             testServer.processIncoming();
+            var expectedParent = Email.from(sentParent)
+                                      .sender(EmailAddress.parse(listAddress))
+                                      .build();
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             var conversation = conversations.get(0);
-            assertEquals(sentParent, conversation.first());
+            assertEquals(expectedParent, conversation.first());
 
             var replier = EmailAddress.from("Replier", "replier@test.email");
             var sentReply = Email.create(replier, "Reply subject", "Reply body")
                                  .recipient(EmailAddress.parse(listAddress))
                                  .header("In-Reply-To", sentParent.id().toString())
                                  .build();
             mailmanList.post(sentReply);
+            var expectedReply = Email.from(sentReply)
+                                     .sender(EmailAddress.parse(listAddress))
+                                     .build();
+
             testServer.processIncoming();
 
             conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             conversation = conversations.get(0);
-            assertEquals(sentParent, conversation.first());
+            assertEquals(expectedParent, conversation.first());
 
             var replies = conversation.replies(conversation.first());
             assertEquals(1, replies.size());
             var reply = replies.get(0);
-            assertEquals(sentReply, reply);
+            assertEquals(expectedReply, reply);
         }
     }
 
     @Test
     void cached() throws IOException {
@@ -105,22 +116,25 @@
                             .recipient(EmailAddress.parse(listAddress))
                             .build();
             mailmanList.post(mail);
             testServer.processIncoming();
 
+            var expectedMail = Email.from(mail)
+                                    .sender(EmailAddress.parse(listAddress))
+                                    .build();
             {
                 var conversations = mailmanList.conversations(Duration.ofDays(1));
                 assertEquals(1, conversations.size());
                 var conversation = conversations.get(0);
-                assertEquals(mail, conversation.first());
+                assertEquals(expectedMail, conversation.first());
                 assertFalse(testServer.lastResponseCached());
             }
             {
                 var conversations = mailmanList.conversations(Duration.ofDays(1));
                 assertEquals(1, conversations.size());
                 var conversation = conversations.get(0);
-                assertEquals(mail, conversation.first());
+                assertEquals(expectedMail, conversation.first());
                 assertTrue(testServer.lastResponseCached());
             }
         }
     }
 
@@ -131,24 +145,28 @@
             var mailmanServer = MailingListServerFactory.createMailmanServer(testServer.getArchive(), testServer.getSMTP(),
                                                                              Duration.ofDays(1));
             var mailmanList = mailmanServer.getList(listAddress);
             var sender = EmailAddress.from("Test", "test@test.email");
             var mail1 = Email.create(sender, "Subject 1", "Body 1")
-                            .recipient(EmailAddress.parse(listAddress))
-                            .build();
+                             .recipient(EmailAddress.parse(listAddress))
+                             .build();
             var mail2 = Email.create(sender, "Subject 2", "Body 2")
                              .recipient(EmailAddress.parse(listAddress))
                              .build();
             new Thread(() -> {
                 mailmanList.post(mail1);
                 mailmanList.post(mail2);
             }).start();
+            var expectedMail = Email.from(mail1)
+                                    .sender(EmailAddress.parse(listAddress))
+                                    .build();
+
             testServer.processIncoming();
             assertThrows(RuntimeException.class, () -> testServer.processIncoming(Duration.ZERO));
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             var conversation = conversations.get(0);
-            assertEquals(mail1, conversation.first());
+            assertEquals(expectedMail, conversation.first());
         }
     }
 }
