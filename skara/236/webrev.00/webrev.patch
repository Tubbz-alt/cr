diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
@@ -63,12 +63,15 @@
     }
 
     private void postNewMessage(Email email) {
         var marker = String.format(bridgedMailMarker,
                                  Base64.getEncoder().encodeToString(email.id().address().getBytes(StandardCharsets.UTF_8)));
+
         var body = marker + "\n" +
-                "Mailing list message from " + email.author().toString() + "\n\n" +
+                "*Mailing list message from [" + email.author().fullName().orElse(email.author().localPart()) +
+                "](mailto:" + email.author().address() + ") on [" + email.sender().localPart() +
+                "](mailto:" + email.sender().address() + "):*\n\n" +
                 email.body();
         pr.addComment(body);
     }
 
     @Override
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
@@ -33,19 +33,19 @@
 import java.io.IOException;
 import java.nio.file.Path;
 import java.time.Duration;
 import java.util.*;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.*;
 
 class MailingListArchiveReaderBotTests {
     private void addReply(Conversation conversation, MailingList mailingList, PullRequest pr) {
         var first = conversation.first();
 
         var reply = "Looks good";
         var references = first.id().toString();
-        var email = Email.create(EmailAddress.from("Commenter", "<c@test.test>"), "Re: RFR: " + pr.title(), reply)
+        var email = Email.create(EmailAddress.from("Commenter", "c@test.test"), "Re: RFR: " + pr.title(), reply)
                          .recipient(first.author())
                          .id(EmailAddress.from(UUID.randomUUID() + "@id.id"))
                          .header("In-Reply-To", first.id().toString())
                          .header("References", references)
                          .build();
@@ -113,10 +113,13 @@
             TestBotRunner.runPeriodicItems(readerBot);
 
             // The bridge should now have processed the reply
             var updated = pr.comments();
             assertEquals(2, updated.size());
+            assertTrue(updated.get(1).body().contains("Mailing list message from"));
+            assertTrue(updated.get(1).body().contains("[Commenter](mailto:c@test.test)"));
+            assertTrue(updated.get(1).body().contains("[test](mailto:test@" + listAddress.domain() + ")"));
         }
     }
 
     @Test
     void rememberBridged(TestInfo testInfo) throws IOException {
diff a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/Mbox.java b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/Mbox.java
--- a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/Mbox.java
+++ b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/Mbox.java
@@ -40,11 +40,11 @@
     private final static DateTimeFormatter ctimeFormat = DateTimeFormatter.ofPattern(
             "EEE LLL dd HH:mm:ss yyyy", Locale.US);
     private final static Pattern fromStringEncodePattern = Pattern.compile("^(>*From )", Pattern.MULTILINE);
     private final static Pattern fromStringDecodePattern = Pattern.compile("^>(>*From )", Pattern.MULTILINE);
 
-    private static List<Email> splitMbox(String mbox) {
+    private static List<Email> splitMbox(String mbox, EmailAddress sender) {
         // Initial split
         var messages = mboxMessagePattern.matcher(mbox).results()
                                          .map(match -> match.group(1))
                                          .filter(message -> message.length() > 0)
                                          .map(Mbox::decodeFromStrings)
@@ -55,12 +55,15 @@
         var parsedMails = new ArrayList<Email>();
         Collections.reverse(messages);
         for (var message : messages) {
             messageBuilder.insert(0, message);
             try {
-                var email = Email.parse(messageBuilder.toString());
-                parsedMails.add(email);
+                var email = Email.from(Email.parse(messageBuilder.toString()));
+                if (sender != null) {
+                    email.sender(sender);
+                }
+                parsedMails.add(email.build());
                 messageBuilder.setLength(0);
             } catch (RuntimeException ignored) {
             }
         }
 
@@ -77,11 +80,15 @@
         var fromStringMatcher = fromStringDecodePattern.matcher(body);
         return fromStringMatcher.replaceAll("$1");
     }
 
     public static List<Conversation> parseMbox(String mbox) {
-        var emails = splitMbox(mbox);
+        return parseMbox(mbox, null);
+    }
+
+    public static List<Conversation> parseMbox(String mbox, EmailAddress sender) {
+        var emails = splitMbox(mbox, sender);
         var idToMail = emails.stream().collect(Collectors.toMap(Email::id, Function.identity(), (a, b) -> a));
         var idToConversation = idToMail.values().stream()
                                        .filter(email -> !email.hasHeader("In-Reply-To"))
                                        .collect(Collectors.toMap(Email::id, Conversation::new));
 
diff a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java
--- a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java
+++ b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java
@@ -141,11 +141,11 @@
             }
         }
 
         if (newContent) {
             var concatenatedMbox = String.join("", actualPages);
-            var mails = Mbox.parseMbox(concatenatedMbox);
+            var mails = Mbox.parseMbox(concatenatedMbox, listAddress);
             var threshold = ZonedDateTime.now().minus(maxAge);
             cachedConversations = mails.stream()
                                        .filter(mail -> mail.first().date().isAfter(threshold))
                                        .collect(Collectors.toList());
         }
