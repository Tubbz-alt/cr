diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -195,11 +195,11 @@
             assertEquals(1, conversations.size());
             var mail = conversations.get(0).first();
             assertEquals("RFR: 1234: This is a pull request", mail.subject());
             assertEquals(pr.author().fullName(), mail.author().fullName().orElseThrow());
             assertEquals(noreplyAddress(archive), mail.author().address());
-            assertEquals(from, mail.sender());
+            assertEquals(listAddress, mail.sender());
             assertEquals("val1", mail.headerValue("Extra1"));
             assertEquals("val2", mail.headerValue("Extra2"));
 
             // And there should be a webrev
             Repository.materialize(webrevFolder.path(), archive.url(), "webrev");
@@ -248,11 +248,11 @@
             conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             assertEquals(3, conversations.get(0).allMessages().size());
             for (var newMail : conversations.get(0).allMessages()) {
                 assertEquals(noreplyAddress(archive), newMail.author().address());
-                assertEquals(from, newMail.sender());
+                assertEquals(listAddress, newMail.sender());
             }
             assertTrue(conversations.get(0).allMessages().get(2).body().contains("This is a comment ðŸ˜„"));
         }
     }
 
@@ -338,11 +338,11 @@
             conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             assertEquals(3, conversations.get(0).allMessages().size());
             for (var newMail : conversations.get(0).allMessages()) {
                 assertEquals(noreplyAddress(archive), newMail.author().address());
-                assertEquals(from, newMail.sender());
+                assertEquals(listAddress, newMail.sender());
             }
         }
     }
 
     @Test
@@ -811,11 +811,11 @@
             var mailmanList = mailmanServer.getList(listAddress.address());
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             for (var newMail : conversations.get(0).allMessages()) {
                 assertEquals(noreplyAddress(archive), newMail.author().address());
-                assertEquals(from, newMail.sender());
+                assertEquals(listAddress, newMail.sender());
             }
 
             // Add a comment
             var commenterPr = commenter.pullRequest(pr.id());
             commenterPr.addReviewComment(masterHash, nextHash, reviewFile.toString(), 2, "Review comment");
@@ -931,11 +931,11 @@
             var mailmanList = mailmanServer.getList(listAddress.address());
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             for (var newMail : conversations.get(0).allMessages()) {
                 assertEquals(noreplyAddress(archive), newMail.author().address());
-                assertEquals(sender, newMail.sender());
+                assertEquals(listAddress, newMail.sender());
                 assertFalse(newMail.hasHeader("PR-Head-Hash"));
             }
             assertEquals("Re: [Rev 01] RFR: This is a pull request", conversations.get(0).allMessages().get(1).subject());
         }
     }
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -198,11 +198,11 @@
             TestBotRunner.runPeriodicItems(notifyBot);
             listServer.processIncoming();
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             var email = conversations.get(0).first();
-            assertEquals(sender, email.sender());
+            assertEquals(listAddress, email.sender());
             assertEquals(sender, email.author());
             assertEquals(email.recipients(), List.of(listAddress));
             assertTrue(email.subject().contains(": 23456789: More fixes"));
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash.abbreviate()));
@@ -254,11 +254,11 @@
             TestBotRunner.runPeriodicItems(notifyBot);
             listServer.processIncoming();
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             var email = conversations.get(0).first();
-            assertEquals(sender, email.sender());
+            assertEquals(listAddress, email.sender());
             assertEquals(EmailAddress.from("another_author", "another@author.example.com"), email.author());
             assertEquals(email.recipients(), List.of(listAddress));
             assertTrue(email.subject().contains(": 2 new changesets"));
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash1.abbreviate()));
@@ -304,11 +304,11 @@
             TestBotRunner.runPeriodicItems(notifyBot);
             listServer.processIncoming();
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             var email = conversations.get(0).first();
-            assertEquals(sender, email.sender());
+            assertEquals(listAddress, email.sender());
             assertEquals(EmailAddress.from("committer", "committer@test.test"), email.author());
             assertEquals(email.recipients(), List.of(listAddress));
             assertTrue(email.body().contains("Changeset: " + editHash.abbreviate()));
             assertTrue(email.body().contains("23456789: More fixes"));
             assertTrue(email.body().contains("Author:    author <author@test.test>"));
@@ -355,11 +355,11 @@
             TestBotRunner.runPeriodicItems(notifyBot);
             listServer.processIncoming();
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             var email = conversations.get(0).first();
-            assertEquals(sender, email.sender());
+            assertEquals(listAddress, email.sender());
             assertEquals(author, email.author());
             assertEquals(email.recipients(), List.of(listAddress));
             assertFalse(email.subject().contains("another"));
             assertTrue(email.subject().contains(": master: 2 new changesets"));
             assertTrue(email.body().contains("Changeset: " + editHash1.abbreviate()));
@@ -377,11 +377,12 @@
             listServer.processIncoming();
 
             conversations = mailmanList.conversations(Duration.ofDays(1));
             conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));
             email = conversations.get(0).first();
-            assertEquals(email.sender(), sender);
+            assertEquals(author, email.author());
+            assertEquals(listAddress, email.sender());
             assertEquals(email.recipients(), List.of(listAddress));
             assertTrue(email.subject().contains(": another: 456789AB: Yet more fixes"));
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash3.abbreviate()));
             assertTrue(email.body().contains("456789AB: Yet more fixes"));
@@ -448,11 +449,11 @@
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             var first = conversations.get(0).first();
             var email = conversations.get(0).replies(first).get(0);
-            assertEquals(sender, email.sender());
+            assertEquals(listAddress, email.sender());
             assertEquals(author, email.author());
             assertEquals(email.recipients(), List.of(listAddress));
             assertEquals("Re: [Integrated] RFR: My PR", email.subject());
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash.abbreviate()));
@@ -535,22 +536,22 @@
 
             var prConversation = conversations.get(0);
             var pushConversation = conversations.get(1);
 
             var prEmail = prConversation.replies(prConversation.first()).get(0);
-            assertEquals(sender, prEmail.sender());
+            assertEquals(listAddress, prEmail.sender());
             assertEquals(EmailAddress.from("testauthor", "ta@none.none"), prEmail.author());
             assertEquals(prEmail.recipients(), List.of(listAddress));
             assertEquals("Re: [Integrated] RFR: My PR", prEmail.subject());
             assertFalse(prEmail.subject().contains("master"));
             assertTrue(prEmail.body().contains("Changeset: " + editHash.abbreviate()));
             assertTrue(prEmail.body().contains("23456789: More fixes"));
             assertFalse(prEmail.body().contains("Committer"));
             assertFalse(prEmail.body().contains(masterHash.abbreviate()));
 
             var pushEmail = pushConversation.first();
-            assertEquals(sender, pushEmail.sender());
+            assertEquals(listAddress, pushEmail.sender());
             assertEquals(EmailAddress.from("testauthor", "ta@none.none"), pushEmail.author());
             assertEquals(pushEmail.recipients(), List.of(listAddress));
             assertTrue(pushEmail.subject().contains("23456789: More fixes"));
         }
     }
@@ -684,11 +685,11 @@
             TestBotRunner.runPeriodicItems(notifyBot);
             listServer.processIncoming();
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             var email = conversations.get(0).first();
-            assertEquals(sender, email.sender());
+            assertEquals(listAddress, email.sender());
             assertEquals(EmailAddress.from("testauthor", "ta@none.none"), email.author());
             assertEquals(email.recipients(), List.of(listAddress));
             assertEquals("git: test: created branch newbranch1 based on the branch master containing 2 unique commits", email.subject());
             assertTrue(email.body().contains("12345678: Some fixes"));
             assertTrue(email.hasHeader("extra1"));
@@ -705,11 +706,11 @@
 
             var newConversation = mailmanList.conversations(Duration.ofDays(1)).stream()
                                              .filter(c -> !c.equals(conversations.get(0)))
                                              .findFirst().orElseThrow();
             email = newConversation.first();
-            assertEquals(sender, email.sender());
+            assertEquals(listAddress, email.sender());
             assertEquals(sender, email.author());
             assertEquals(email.recipients(), List.of(listAddress));
             assertEquals("git: test: created branch newbranch2 based on the branch newbranch1 containing 0 unique commits", email.subject());
             assertEquals("The new branch newbranch2 is currently identical to the newbranch1 branch.", email.body());
         }
