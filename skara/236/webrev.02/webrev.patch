diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
@@ -63,12 +63,15 @@
     }
 
     private void postNewMessage(Email email) {
         var marker = String.format(bridgedMailMarker,
                                  Base64.getEncoder().encodeToString(email.id().address().getBytes(StandardCharsets.UTF_8)));
+
         var body = marker + "\n" +
-                "Mailing list message from " + email.author().toString() + "\n\n" +
+                "*Mailing list message from [" + email.author().fullName().orElse(email.author().localPart()) +
+                "](mailto:" + email.author().address() + ") on [" + email.sender().localPart() +
+                "](mailto:" + email.sender().address() + "):*\n\n" +
                 email.body();
         pr.addComment(body);
     }
 
     @Override
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
@@ -33,19 +33,19 @@
 import java.io.IOException;
 import java.nio.file.Path;
 import java.time.Duration;
 import java.util.*;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.*;
 
 class MailingListArchiveReaderBotTests {
     private void addReply(Conversation conversation, MailingList mailingList, PullRequest pr) {
         var first = conversation.first();
 
         var reply = "Looks good";
         var references = first.id().toString();
-        var email = Email.create(EmailAddress.from("Commenter", "<c@test.test>"), "Re: RFR: " + pr.title(), reply)
+        var email = Email.create(EmailAddress.from("Commenter", "c@test.test"), "Re: RFR: " + pr.title(), reply)
                          .recipient(first.author())
                          .id(EmailAddress.from(UUID.randomUUID() + "@id.id"))
                          .header("In-Reply-To", first.id().toString())
                          .header("References", references)
                          .build();
@@ -113,10 +113,13 @@
             TestBotRunner.runPeriodicItems(readerBot);
 
             // The bridge should now have processed the reply
             var updated = pr.comments();
             assertEquals(2, updated.size());
+            assertTrue(updated.get(1).body().contains("Mailing list message from"));
+            assertTrue(updated.get(1).body().contains("[Commenter](mailto:c@test.test)"));
+            assertTrue(updated.get(1).body().contains("[test](mailto:test@" + listAddress.domain() + ")"));
         }
     }
 
     @Test
     void rememberBridged(TestInfo testInfo) throws IOException {
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -195,11 +195,11 @@
             assertEquals(1, conversations.size());
             var mail = conversations.get(0).first();
             assertEquals("RFR: 1234: This is a pull request", mail.subject());
             assertEquals(pr.author().fullName(), mail.author().fullName().orElseThrow());
             assertEquals(noreplyAddress(archive), mail.author().address());
-            assertEquals(from, mail.sender());
+            assertEquals(listAddress, mail.sender());
             assertEquals("val1", mail.headerValue("Extra1"));
             assertEquals("val2", mail.headerValue("Extra2"));
 
             // And there should be a webrev
             Repository.materialize(webrevFolder.path(), archive.url(), "webrev");
@@ -248,11 +248,11 @@
             conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             assertEquals(3, conversations.get(0).allMessages().size());
             for (var newMail : conversations.get(0).allMessages()) {
                 assertEquals(noreplyAddress(archive), newMail.author().address());
-                assertEquals(from, newMail.sender());
+                assertEquals(listAddress, newMail.sender());
             }
             assertTrue(conversations.get(0).allMessages().get(2).body().contains("This is a comment ðŸ˜„"));
         }
     }
 
@@ -338,11 +338,11 @@
             conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             assertEquals(3, conversations.get(0).allMessages().size());
             for (var newMail : conversations.get(0).allMessages()) {
                 assertEquals(noreplyAddress(archive), newMail.author().address());
-                assertEquals(from, newMail.sender());
+                assertEquals(listAddress, newMail.sender());
             }
         }
     }
 
     @Test
@@ -811,11 +811,11 @@
             var mailmanList = mailmanServer.getList(listAddress.address());
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             for (var newMail : conversations.get(0).allMessages()) {
                 assertEquals(noreplyAddress(archive), newMail.author().address());
-                assertEquals(from, newMail.sender());
+                assertEquals(listAddress, newMail.sender());
             }
 
             // Add a comment
             var commenterPr = commenter.pullRequest(pr.id());
             commenterPr.addReviewComment(masterHash, nextHash, reviewFile.toString(), 2, "Review comment");
@@ -931,11 +931,11 @@
             var mailmanList = mailmanServer.getList(listAddress.address());
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             for (var newMail : conversations.get(0).allMessages()) {
                 assertEquals(noreplyAddress(archive), newMail.author().address());
-                assertEquals(sender, newMail.sender());
+                assertEquals(listAddress, newMail.sender());
                 assertFalse(newMail.hasHeader("PR-Head-Hash"));
             }
             assertEquals("Re: [Rev 01] RFR: This is a pull request", conversations.get(0).allMessages().get(1).subject());
         }
     }
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -198,11 +198,11 @@
             TestBotRunner.runPeriodicItems(notifyBot);
             listServer.processIncoming();
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             var email = conversations.get(0).first();
-            assertEquals(sender, email.sender());
+            assertEquals(listAddress, email.sender());
             assertEquals(sender, email.author());
             assertEquals(email.recipients(), List.of(listAddress));
             assertTrue(email.subject().contains(": 23456789: More fixes"));
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash.abbreviate()));
@@ -254,11 +254,11 @@
             TestBotRunner.runPeriodicItems(notifyBot);
             listServer.processIncoming();
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             var email = conversations.get(0).first();
-            assertEquals(sender, email.sender());
+            assertEquals(listAddress, email.sender());
             assertEquals(EmailAddress.from("another_author", "another@author.example.com"), email.author());
             assertEquals(email.recipients(), List.of(listAddress));
             assertTrue(email.subject().contains(": 2 new changesets"));
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash1.abbreviate()));
@@ -304,11 +304,11 @@
             TestBotRunner.runPeriodicItems(notifyBot);
             listServer.processIncoming();
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             var email = conversations.get(0).first();
-            assertEquals(sender, email.sender());
+            assertEquals(listAddress, email.sender());
             assertEquals(EmailAddress.from("committer", "committer@test.test"), email.author());
             assertEquals(email.recipients(), List.of(listAddress));
             assertTrue(email.body().contains("Changeset: " + editHash.abbreviate()));
             assertTrue(email.body().contains("23456789: More fixes"));
             assertTrue(email.body().contains("Author:    author <author@test.test>"));
@@ -355,11 +355,11 @@
             TestBotRunner.runPeriodicItems(notifyBot);
             listServer.processIncoming();
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             var email = conversations.get(0).first();
-            assertEquals(sender, email.sender());
+            assertEquals(listAddress, email.sender());
             assertEquals(author, email.author());
             assertEquals(email.recipients(), List.of(listAddress));
             assertFalse(email.subject().contains("another"));
             assertTrue(email.subject().contains(": master: 2 new changesets"));
             assertTrue(email.body().contains("Changeset: " + editHash1.abbreviate()));
@@ -377,11 +377,12 @@
             listServer.processIncoming();
 
             conversations = mailmanList.conversations(Duration.ofDays(1));
             conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));
             email = conversations.get(0).first();
-            assertEquals(email.sender(), sender);
+            assertEquals(author, email.author());
+            assertEquals(listAddress, email.sender());
             assertEquals(email.recipients(), List.of(listAddress));
             assertTrue(email.subject().contains(": another: 456789AB: Yet more fixes"));
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash3.abbreviate()));
             assertTrue(email.body().contains("456789AB: Yet more fixes"));
@@ -448,11 +449,11 @@
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             var first = conversations.get(0).first();
             var email = conversations.get(0).replies(first).get(0);
-            assertEquals(sender, email.sender());
+            assertEquals(listAddress, email.sender());
             assertEquals(author, email.author());
             assertEquals(email.recipients(), List.of(listAddress));
             assertEquals("Re: [Integrated] RFR: My PR", email.subject());
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash.abbreviate()));
@@ -535,22 +536,22 @@
 
             var prConversation = conversations.get(0);
             var pushConversation = conversations.get(1);
 
             var prEmail = prConversation.replies(prConversation.first()).get(0);
-            assertEquals(sender, prEmail.sender());
+            assertEquals(listAddress, prEmail.sender());
             assertEquals(EmailAddress.from("testauthor", "ta@none.none"), prEmail.author());
             assertEquals(prEmail.recipients(), List.of(listAddress));
             assertEquals("Re: [Integrated] RFR: My PR", prEmail.subject());
             assertFalse(prEmail.subject().contains("master"));
             assertTrue(prEmail.body().contains("Changeset: " + editHash.abbreviate()));
             assertTrue(prEmail.body().contains("23456789: More fixes"));
             assertFalse(prEmail.body().contains("Committer"));
             assertFalse(prEmail.body().contains(masterHash.abbreviate()));
 
             var pushEmail = pushConversation.first();
-            assertEquals(sender, pushEmail.sender());
+            assertEquals(listAddress, pushEmail.sender());
             assertEquals(EmailAddress.from("testauthor", "ta@none.none"), pushEmail.author());
             assertEquals(pushEmail.recipients(), List.of(listAddress));
             assertTrue(pushEmail.subject().contains("23456789: More fixes"));
         }
     }
@@ -684,11 +685,11 @@
             TestBotRunner.runPeriodicItems(notifyBot);
             listServer.processIncoming();
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             var email = conversations.get(0).first();
-            assertEquals(sender, email.sender());
+            assertEquals(listAddress, email.sender());
             assertEquals(EmailAddress.from("testauthor", "ta@none.none"), email.author());
             assertEquals(email.recipients(), List.of(listAddress));
             assertEquals("git: test: created branch newbranch1 based on the branch master containing 2 unique commits", email.subject());
             assertTrue(email.body().contains("12345678: Some fixes"));
             assertTrue(email.hasHeader("extra1"));
@@ -705,11 +706,11 @@
 
             var newConversation = mailmanList.conversations(Duration.ofDays(1)).stream()
                                              .filter(c -> !c.equals(conversations.get(0)))
                                              .findFirst().orElseThrow();
             email = newConversation.first();
-            assertEquals(sender, email.sender());
+            assertEquals(listAddress, email.sender());
             assertEquals(sender, email.author());
             assertEquals(email.recipients(), List.of(listAddress));
             assertEquals("git: test: created branch newbranch2 based on the branch newbranch1 containing 0 unique commits", email.subject());
             assertEquals("The new branch newbranch2 is currently identical to the newbranch1 branch.", email.body());
         }
diff a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/Mbox.java b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/Mbox.java
--- a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/Mbox.java
+++ b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/Mbox.java
@@ -40,11 +40,11 @@
     private final static DateTimeFormatter ctimeFormat = DateTimeFormatter.ofPattern(
             "EEE LLL dd HH:mm:ss yyyy", Locale.US);
     private final static Pattern fromStringEncodePattern = Pattern.compile("^(>*From )", Pattern.MULTILINE);
     private final static Pattern fromStringDecodePattern = Pattern.compile("^>(>*From )", Pattern.MULTILINE);
 
-    private static List<Email> splitMbox(String mbox) {
+    private static List<Email> splitMbox(String mbox, EmailAddress sender) {
         // Initial split
         var messages = mboxMessagePattern.matcher(mbox).results()
                                          .map(match -> match.group(1))
                                          .filter(message -> message.length() > 0)
                                          .map(Mbox::decodeFromStrings)
@@ -55,12 +55,15 @@
         var parsedMails = new ArrayList<Email>();
         Collections.reverse(messages);
         for (var message : messages) {
             messageBuilder.insert(0, message);
             try {
-                var email = Email.parse(messageBuilder.toString());
-                parsedMails.add(email);
+                var email = Email.from(Email.parse(messageBuilder.toString()));
+                if (sender != null) {
+                    email.sender(sender);
+                }
+                parsedMails.add(email.build());
                 messageBuilder.setLength(0);
             } catch (RuntimeException ignored) {
             }
         }
 
@@ -77,11 +80,15 @@
         var fromStringMatcher = fromStringDecodePattern.matcher(body);
         return fromStringMatcher.replaceAll("$1");
     }
 
     public static List<Conversation> parseMbox(String mbox) {
-        var emails = splitMbox(mbox);
+        return parseMbox(mbox, null);
+    }
+
+    public static List<Conversation> parseMbox(String mbox, EmailAddress sender) {
+        var emails = splitMbox(mbox, sender);
         var idToMail = emails.stream().collect(Collectors.toMap(Email::id, Function.identity(), (a, b) -> a));
         var idToConversation = idToMail.values().stream()
                                        .filter(email -> !email.hasHeader("In-Reply-To"))
                                        .collect(Collectors.toMap(Email::id, Conversation::new));
 
diff a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java
--- a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java
+++ b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java
@@ -141,11 +141,11 @@
             }
         }
 
         if (newContent) {
             var concatenatedMbox = String.join("", actualPages);
-            var mails = Mbox.parseMbox(concatenatedMbox);
+            var mails = Mbox.parseMbox(concatenatedMbox, listAddress);
             var threshold = ZonedDateTime.now().minus(maxAge);
             cachedConversations = mails.stream()
                                        .filter(mail -> mail.first().date().isAfter(threshold))
                                        .collect(Collectors.toList());
         }
diff a/mailinglist/src/test/java/org/openjdk/skara/mailinglist/MailmanTests.java b/mailinglist/src/test/java/org/openjdk/skara/mailinglist/MailmanTests.java
--- a/mailinglist/src/test/java/org/openjdk/skara/mailinglist/MailmanTests.java
+++ b/mailinglist/src/test/java/org/openjdk/skara/mailinglist/MailmanTests.java
@@ -43,16 +43,20 @@
             var sender = EmailAddress.from("Test", "test@test.email");
             var mail = Email.create(sender, "Subject", "Body")
                             .recipient(EmailAddress.parse(listAddress))
                             .build();
             mailmanList.post(mail);
+            var expectedMail = Email.from(mail)
+                                    .sender(EmailAddress.parse(listAddress))
+                                    .build();
+
             testServer.processIncoming();
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             var conversation = conversations.get(0);
-            assertEquals(mail, conversation.first());
+            assertEquals(expectedMail, conversation.first());
         }
     }
 
     @Test
     void replies() throws IOException {
@@ -65,33 +69,40 @@
             var sentParent = Email.create(sender, "Subject", "Body")
                                   .recipient(EmailAddress.parse(listAddress))
                                   .build();
             mailmanList.post(sentParent);
             testServer.processIncoming();
+            var expectedParent = Email.from(sentParent)
+                                      .sender(EmailAddress.parse(listAddress))
+                                      .build();
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             var conversation = conversations.get(0);
-            assertEquals(sentParent, conversation.first());
+            assertEquals(expectedParent, conversation.first());
 
             var replier = EmailAddress.from("Replier", "replier@test.email");
             var sentReply = Email.create(replier, "Reply subject", "Reply body")
                                  .recipient(EmailAddress.parse(listAddress))
                                  .header("In-Reply-To", sentParent.id().toString())
                                  .build();
             mailmanList.post(sentReply);
+            var expectedReply = Email.from(sentReply)
+                                     .sender(EmailAddress.parse(listAddress))
+                                     .build();
+
             testServer.processIncoming();
 
             conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             conversation = conversations.get(0);
-            assertEquals(sentParent, conversation.first());
+            assertEquals(expectedParent, conversation.first());
 
             var replies = conversation.replies(conversation.first());
             assertEquals(1, replies.size());
             var reply = replies.get(0);
-            assertEquals(sentReply, reply);
+            assertEquals(expectedReply, reply);
         }
     }
 
     @Test
     void cached() throws IOException {
@@ -105,22 +116,25 @@
                             .recipient(EmailAddress.parse(listAddress))
                             .build();
             mailmanList.post(mail);
             testServer.processIncoming();
 
+            var expectedMail = Email.from(mail)
+                                    .sender(EmailAddress.parse(listAddress))
+                                    .build();
             {
                 var conversations = mailmanList.conversations(Duration.ofDays(1));
                 assertEquals(1, conversations.size());
                 var conversation = conversations.get(0);
-                assertEquals(mail, conversation.first());
+                assertEquals(expectedMail, conversation.first());
                 assertFalse(testServer.lastResponseCached());
             }
             {
                 var conversations = mailmanList.conversations(Duration.ofDays(1));
                 assertEquals(1, conversations.size());
                 var conversation = conversations.get(0);
-                assertEquals(mail, conversation.first());
+                assertEquals(expectedMail, conversation.first());
                 assertTrue(testServer.lastResponseCached());
             }
         }
     }
 
@@ -131,24 +145,28 @@
             var mailmanServer = MailingListServerFactory.createMailmanServer(testServer.getArchive(), testServer.getSMTP(),
                                                                              Duration.ofDays(1));
             var mailmanList = mailmanServer.getList(listAddress);
             var sender = EmailAddress.from("Test", "test@test.email");
             var mail1 = Email.create(sender, "Subject 1", "Body 1")
-                            .recipient(EmailAddress.parse(listAddress))
-                            .build();
+                             .recipient(EmailAddress.parse(listAddress))
+                             .build();
             var mail2 = Email.create(sender, "Subject 2", "Body 2")
                              .recipient(EmailAddress.parse(listAddress))
                              .build();
             new Thread(() -> {
                 mailmanList.post(mail1);
                 mailmanList.post(mail2);
             }).start();
+            var expectedMail = Email.from(mail1)
+                                    .sender(EmailAddress.parse(listAddress))
+                                    .build();
+
             testServer.processIncoming();
             assertThrows(RuntimeException.class, () -> testServer.processIncoming(Duration.ZERO));
 
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             var conversation = conversations.get(0);
-            assertEquals(mail1, conversation.first());
+            assertEquals(expectedMail, conversation.first());
         }
     }
 }
