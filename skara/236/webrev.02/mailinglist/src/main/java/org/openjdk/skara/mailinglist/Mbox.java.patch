diff a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/Mbox.java b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/Mbox.java
--- a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/Mbox.java
+++ b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/Mbox.java
@@ -40,11 +40,11 @@
     private final static DateTimeFormatter ctimeFormat = DateTimeFormatter.ofPattern(
             "EEE LLL dd HH:mm:ss yyyy", Locale.US);
     private final static Pattern fromStringEncodePattern = Pattern.compile("^(>*From )", Pattern.MULTILINE);
     private final static Pattern fromStringDecodePattern = Pattern.compile("^>(>*From )", Pattern.MULTILINE);
 
-    private static List<Email> splitMbox(String mbox) {
+    private static List<Email> splitMbox(String mbox, EmailAddress sender) {
         // Initial split
         var messages = mboxMessagePattern.matcher(mbox).results()
                                          .map(match -> match.group(1))
                                          .filter(message -> message.length() > 0)
                                          .map(Mbox::decodeFromStrings)
@@ -55,12 +55,15 @@
         var parsedMails = new ArrayList<Email>();
         Collections.reverse(messages);
         for (var message : messages) {
             messageBuilder.insert(0, message);
             try {
-                var email = Email.parse(messageBuilder.toString());
-                parsedMails.add(email);
+                var email = Email.from(Email.parse(messageBuilder.toString()));
+                if (sender != null) {
+                    email.sender(sender);
+                }
+                parsedMails.add(email.build());
                 messageBuilder.setLength(0);
             } catch (RuntimeException ignored) {
             }
         }
 
@@ -77,11 +80,15 @@
         var fromStringMatcher = fromStringDecodePattern.matcher(body);
         return fromStringMatcher.replaceAll("$1");
     }
 
     public static List<Conversation> parseMbox(String mbox) {
-        var emails = splitMbox(mbox);
+        return parseMbox(mbox, null);
+    }
+
+    public static List<Conversation> parseMbox(String mbox, EmailAddress sender) {
+        var emails = splitMbox(mbox, sender);
         var idToMail = emails.stream().collect(Collectors.toMap(Email::id, Function.identity(), (a, b) -> a));
         var idToConversation = idToMail.values().stream()
                                        .filter(email -> !email.hasHeader("In-Reply-To"))
                                        .collect(Collectors.toMap(Email::id, Conversation::new));
 
