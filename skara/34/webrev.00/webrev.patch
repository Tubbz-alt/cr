diff a/vcs/src/main/java/org/openjdk/skara/vcs/Range.java b/vcs/src/main/java/org/openjdk/skara/vcs/Range.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Range.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Range.java
@@ -47,10 +47,16 @@
         // as an unsigned int for the count part of the range
         var countString = s.substring(separatorIndex + 1, s.length());
         var count =
             countString.equals("18446744073709551615") ?  0 : Integer.parseInt(countString);
 
+        if (count == 0 && start != 0) {
+            // start is off-by-one when count is 0.
+            // but if start == 0, a file was added and we need a 0 here.
+            start++;
+        }
+
         return new Range(start, count);
     }
 
     public int start() {
         return this.start;
diff a/webrev/src/main/java/org/openjdk/skara/webrev/HunkCoalescer.java b/webrev/src/main/java/org/openjdk/skara/webrev/HunkCoalescer.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/HunkCoalescer.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/HunkCoalescer.java
@@ -172,18 +172,10 @@
         destEnd = Math.min(destEnd, destContent.size() + 1);
 
         var sourceCount = sourceEnd - sourceStart;
         var destCount = destEnd - destStart;
 
-        // For some reason git wants the start to be +1 when no lines have changed
-        if (sourceCount == numContextLines * 2) {
-            sourceStart++;
-        }
-        if (destCount == numContextLines * 2) {
-            destStart++;
-        }
-
         return new Header(new Range(sourceStart, sourceCount),
                           new Range(destStart, destCount));
     }
 
     private Context createContextBeforeGroup(Header header, Hunk first) {
@@ -187,20 +178,14 @@
     }
 
     private Context createContextBeforeGroup(Header header, Hunk first) {
         var sourceContextBeforeStart = header.source().start();
         var sourceContextBeforeEnd = first.source().range().start();
-        if (first.source().range().count() == 0) {
-            sourceContextBeforeEnd++;
-        }
         var sourceBeforeContextCount = sourceContextBeforeEnd - sourceContextBeforeStart;
 
         var destContextBeforeStart = header.target().start();
         var destContextBeforeEnd = first.target().range().start();
-        if (first.target().range().count() == 0) {
-            destContextBeforeEnd++;
-        }
         var destBeforeContextCount = destContextBeforeEnd - destContextBeforeStart;
 
         var beforeContextCount = Math.min(destBeforeContextCount, sourceBeforeContextCount);
         assert beforeContextCount <= numContextLines;
 
@@ -248,19 +233,12 @@
 
         return added;
     }
 
     private Context createContextAfterHunk(Hunk hunk, Hunk nextNonEmptySourceHunk, Hunk nextNonEmptyTargetHunk) {
-        boolean isOneRangeEmpty = hunk.source().range().count() == 0 ||
-                                  hunk.target().range().count() == 0;
-
         var sourceAfterContextStart = hunk.source().range().end();
         var sourceAfterContextEnd = hunk.source().range().end() + numContextLines;
-        if (hunk.source().range().count() == 0) {
-            sourceAfterContextStart++;
-            sourceAfterContextEnd++;
-        }
         sourceAfterContextEnd = Math.min(sourceAfterContextEnd, sourceContent.size() + 1);
         if (nextNonEmptySourceHunk != null) {
             var nextNonEmptySourceHunkStart = nextNonEmptySourceHunk.source().range().start();
             sourceAfterContextEnd = Math.min(sourceAfterContextEnd, nextNonEmptySourceHunkStart);
         }
@@ -266,14 +245,10 @@
         }
         var sourceAfterContextCount = sourceAfterContextEnd - sourceAfterContextStart;
 
         var destAfterContextStart = hunk.target().range().end();
         var destAfterContextEnd = hunk.target().range().end() + numContextLines;
-        if (hunk.target().range().count() == 0) {
-            destAfterContextStart++;
-            destAfterContextEnd++;
-        }
         destAfterContextEnd = Math.min(destAfterContextEnd, destContent.size() + 1);
         if (nextNonEmptyTargetHunk != null) {
             var nextNonEmptyTargetHunkStart = nextNonEmptyTargetHunk.target().range().start();
             destAfterContextEnd = Math.min(destAfterContextEnd, nextNonEmptyTargetHunkStart);
         }
