diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -98,32 +98,25 @@
             name = name.substring(0, name.length() - ".git".length());
         }
         return name;
     }
 
-    private static HostedRepository getHostedRepositoryFor(URI uri, GitCredentials credentials) throws IOException {
-        var host = Forge.from(uri, new Credential(credentials.username(), credentials.password()));
-        if (System.getenv("GIT_TOKEN") == null) {
-            GitCredentials.approve(credentials);
-        }
-        if (host.isEmpty() || !host.get().isValid()) {
-            exit("error: failed to connect to host " + uri);
-        }
-        var remoteRepo = host.get().repository(projectName(uri)).orElseThrow(() ->
+    private static HostedRepository getHostedRepositoryFor(URI uri, Forge host) throws IOException {
+        var remoteRepo = host.repository(projectName(uri)).orElseThrow(() ->
                 new IOException("Could not find repository at: " + uri.toString())
         );
         var parentRepo = remoteRepo.parent();
         var targetRepo = parentRepo.isPresent() ? parentRepo.get() : remoteRepo;
         return targetRepo;
     }
 
-    private static PullRequest getPullRequest(URI uri, GitCredentials credentials, Argument prId) throws IOException {
+    private static PullRequest getPullRequest(URI uri, Forge host, Argument prId) throws IOException {
         if (!prId.isPresent()) {
             exit("error: missing pull request identifier");
         }
 
-        var pr = getHostedRepositoryFor(uri, credentials).pullRequest(prId.asString());
+        var pr = getHostedRepositoryFor(uri, host).pullRequest(prId.asString());
         if (pr == null) {
             exit("error: could not fetch PR information");
         }
 
         return pr;
@@ -260,10 +253,14 @@
                   .optional(),
             Switch.shortcut("")
                   .fullname("no-decoration")
                   .helptext("Hide any decorations when listing PRs")
                   .optional(),
+            Switch.shortcut("")
+                  .fullname("no-token")
+                  .helptext("Do not use a personal access token (PAT). Only works for read-only operations.")
+                  .optional(),
             Switch.shortcut("")
                   .fullname("mercurial")
                   .helptext("Force use of Mercurial (hg)")
                   .optional(),
             Switch.shortcut("")
@@ -311,17 +308,40 @@
         var remote = arguments.get("remote").orString(isMercurial ? "default" : "origin");
         var remotePullPath = repo.pullPath(remote);
         var username = arguments.contains("username") ? arguments.get("username").asString() : null;
         var token = isMercurial ? System.getenv("HG_TOKEN") :  System.getenv("GIT_TOKEN");
         var uri = Remote.toWebURI(remotePullPath);
-        var credentials = GitCredentials.fill(uri.getHost(), uri.getPath(), username, token, uri.getScheme());
-        var host = Forge.from(uri, new Credential(credentials.username(), credentials.password()));
-        if (host.isEmpty() || !host.get().isValid()) {
-            exit("error: failed to connect to host " + uri);
+        var shouldUseToken = !arguments.contains("no-token");
+        var credentials = !shouldUseToken ?
+            null :
+            GitCredentials.fill(uri.getHost(), uri.getPath(), username, token, uri.getScheme());
+        var forgeURI = URI.create(uri.getScheme() + "://" + uri.getHost());
+        var forge = credentials == null ?
+            Forge.from(forgeURI) :
+            Forge.from(forgeURI, new Credential(credentials.username(), credentials.password()));
+        if (forge.isEmpty() || !forge.get().isValid()) {
+            if (!shouldUseToken) {
+                if (arguments.contains("verbose")) {
+                    System.err.println("");
+                }
+                System.err.println("warning: using git-pr with --no-token may result in rate limiting from " + forgeURI);
+                if (!arguments.contains("verbose")) {
+                    System.err.println("         Re-run git-pr with --verbose to see if you are being rate limited");
+                    System.err.println("");
+                }
+            }
+            exit("error: failed to connect to host: " + forgeURI);
         }
+        var host = forge.get();
 
         var action = arguments.at(0).asString();
+        if (!shouldUseToken &&
+            !List.of("list", "fetch", "show", "checkout", "apply").contains(action)) {
+            System.err.println("error: --no-token can only be used with read-only operations");
+            System.exit(1);
+        }
+
         if (action.equals("create")) {
             if (isMercurial) {
                 var currentBookmark = repo.currentBookmark();
                 if (!currentBookmark.isPresent()) {
                     System.err.println("error: no bookmark is active, you must be on an active bookmark");
@@ -418,11 +438,11 @@
                     System.err.println("");
                     System.err.println("(You can later restore the changes by running: hg unshelve)");
                     System.exit(1);
                 }
 
-                var remoteRepo = host.get().repository(projectName(uri)).orElseThrow(() ->
+                var remoteRepo = host.repository(projectName(uri)).orElseThrow(() ->
                         new IOException("Could not find repository at " + uri.toString())
                 );
                 if (token == null) {
                     GitCredentials.approve(credentials);
                 }
@@ -488,11 +508,11 @@
 
                 var pr = remoteRepo.createPullRequest(parentRepo, targetBranch, bookmark.name(), title, body);
                 if (arguments.contains("assignees")) {
                     var usernames = Arrays.asList(arguments.get("assignees").asString().split(","));
                     var assignees = usernames.stream()
-                                             .map(u -> host.get().user(u))
+                                             .map(u -> host.user(u))
                                              .collect(Collectors.toList());
                     pr.setAssignees(assignees);
                 }
                 System.out.println(pr.webUrl().toString());
                 Files.deleteIfExists(file);
@@ -577,11 +597,11 @@
                 System.err.println("");
                 System.err.println("(You can later restore the changes by running: git stash pop)");
                 System.exit(1);
             }
 
-            var remoteRepo = host.get().repository(projectName(uri)).orElseThrow(() ->
+            var remoteRepo = host.repository(projectName(uri)).orElseThrow(() ->
                     new IOException("Could not find repository at " + uri.toString())
             );
             if (token == null) {
                 GitCredentials.approve(credentials);
             }
@@ -647,28 +667,28 @@
 
             var pr = remoteRepo.createPullRequest(parentRepo, targetBranch, currentBranch.name(), title, body);
             if (arguments.contains("assignees")) {
                 var usernames = Arrays.asList(arguments.get("assignees").asString().split(","));
                 var assignees = usernames.stream()
-                                         .map(u -> host.get().user(u))
+                                         .map(u -> host.user(u))
                                          .collect(Collectors.toList());
                 pr.setAssignees(assignees);
             }
             System.out.println(pr.webUrl().toString());
             Files.deleteIfExists(file);
         } else if (action.equals("integrate") || action.equals("approve")) {
-            var pr = getPullRequest(uri, credentials, arguments.at(1));
+            var pr = getPullRequest(uri, host, arguments.at(1));
 
             if (action.equals("integrate")) {
                 pr.addComment("/integrate");
             } else if (action.equals("approve")) {
                 pr.addReview(Review.Verdict.APPROVED, "Looks good!");
             } else {
                 throw new IllegalStateException("unexpected action: " + action);
             }
         } else if (action.equals("list")) {
-            var remoteRepo = getHostedRepositoryFor(uri, credentials);
+            var remoteRepo = getHostedRepositoryFor(uri, host);
             var prs = remoteRepo.pullRequests();
 
             var ids = new ArrayList<String>();
             var titles = new ArrayList<String>();
             var authors = new ArrayList<String>();
@@ -756,11 +776,11 @@
             var prId = arguments.at(1);
             if (!prId.isPresent()) {
                 exit("error: missing pull request identifier");
             }
 
-            var remoteRepo = getHostedRepositoryFor(uri, credentials);
+            var remoteRepo = getHostedRepositoryFor(uri, host);
             var pr = remoteRepo.pullRequest(prId.asString());
             var repoUrl = remoteRepo.webUrl();
             var prHeadRef = pr.sourceRef();
             var isHgGit = isMercurial && Repository.exists(repo.root().resolve(".hg").resolve("git"));
             if (isHgGit) {
@@ -830,25 +850,25 @@
             var prId = arguments.at(1);
             if (!prId.isPresent()) {
                 exit("error: missing pull request identifier");
             }
 
-            var remoteRepo = getHostedRepositoryFor(uri, credentials);
+            var remoteRepo = getHostedRepositoryFor(uri, host);
             var pr = remoteRepo.pullRequest(prId.asString());
             pr.setState(PullRequest.State.CLOSED);
         } else if (action.equals("update")) {
             var prId = arguments.at(1);
             if (!prId.isPresent()) {
                 exit("error: missing pull request identifier");
             }
 
-            var remoteRepo = getHostedRepositoryFor(uri, credentials);
+            var remoteRepo = getHostedRepositoryFor(uri, host);
             var pr = remoteRepo.pullRequest(prId.asString());
             if (arguments.contains("assignees")) {
                 var usernames = Arrays.asList(arguments.get("assignees").asString().split(","));
                 var assignees = usernames.stream()
-                    .map(u -> host.get().user(u))
+                    .map(u -> host.user(u))
                     .collect(Collectors.toList());
                 pr.setAssignees(assignees);
             }
         } else {
             exit("error: unexpected action: " + action);
