diff a/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestBot.java b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestBot.java
--- a/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestBot.java
+++ b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestBot.java
@@ -39,11 +39,11 @@
     private final List<String> defaultJobs;
     private final String name;
     private final Path storage;
     private final HostedRepository repo;
     private final PullRequestUpdateCache cache;
-    private final Set<String> seen;
+    private final Map<String, Job.State> states;
 
     TestBot(ContinuousIntegration ci,
             String approversGroupId,
             List<String> availableJobs,
             List<String> defaultJobs,
@@ -56,11 +56,11 @@
         this.defaultJobs = defaultJobs;
         this.name = name;
         this.storage = storage;
         this.repo = repo;
         this.cache = new PullRequestUpdateCache();
-        this.seen = new HashSet<>();
+        this.states = new HashMap<>();
     }
 
     @Override
     public List<WorkItem> getPeriodicItems() {
         var ret = new ArrayList<WorkItem>();
@@ -82,20 +82,30 @@
                 var asterisk = "%2A";
                 var id = host + "-" + repoId  + "-"+ pr.id() + "-" + asterisk;
                 try {
                     var jobs = ci.query("id" + colon + id);
                     if (!jobs.isEmpty()) {
-                        if (jobs.stream().anyMatch(j -> j.isRunning() || !seen.contains(j.id()))) {
+                        var shouldUpdate = false;
+                        for (var job : jobs) {
+                            if (!states.containsKey(job.id())) {
+                                shouldUpdate = true;
+                            } else {
+                                if (!states.get(job.id()).equals(Job.State.COMPLETED)) {
+                                    shouldUpdate = true;
+                                }
+                            }
+                            states.put(job.id(), job.state());
+                        }
+                        if (shouldUpdate) {
                             ret.add(new TestWorkItem(ci,
                                                      approversGroupId,
                                                      availableJobs,
                                                      defaultJobs,
                                                      name,
                                                      storage,
                                                      pr));
                         }
-                        seen.addAll(jobs.stream().map(Job::id).collect(Collectors.toList()));
                     }
                 } catch (IOException e) {
                     throw new UncheckedIOException(e);
                 }
             }
