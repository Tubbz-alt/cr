diff a/cli/src/main/java/org/openjdk/skara/cli/GitCredentials.java b/cli/src/main/java/org/openjdk/skara/cli/GitCredentials.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitCredentials.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitCredentials.java
@@ -70,10 +70,13 @@
             var p = pb.start();
 
             var gitStdin = p.getOutputStream();
             String input = "host=" + host + "\n";
             if (path != null) {
+                if (path.startsWith("/")) {
+                    path = path.substring(1);
+                }
                 input += "path=" + path + "\n";
             }
             if (username != null) {
                 input += "username=" + username + "\n";
             }
diff a/cli/src/main/java/org/openjdk/skara/cli/GitFork.java b/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
@@ -123,11 +123,11 @@
         final var uri = URI.create(arguments.at(0).or(die("No URI for upstream repository provided")).asString());
         if (uri == null) {
             exit("Not a valid URI: " + uri);
         }
         final var hostName = uri.getHost();
-        var path = uri.getPath().substring(1); // trim leading '/'
+        var path = uri.getPath();
         final var protocol = uri.getScheme();
         final var token = System.getenv("GIT_TOKEN");
         final var username = arguments.contains("username") ? arguments.get("username").asString() : null;
         final var credentials = GitCredentials.fill(hostName, path, username, token, protocol);
 
@@ -138,10 +138,11 @@
         if (credentials.username() == null) {
             exit("No username for host " + hostName + " found, use git-credentials or the flag --username");
         }
 
         var host = Host.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
+        path = credentials.path();
         if (path.endsWith(".git")) {
             path = path.substring(0, path.length() - 4);
         }
 
         var fork = host.getRepository(path).fork();
diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -281,11 +281,11 @@
         var remote = arguments.get("remote").orString("origin");
         var remotePullPath = repo.pullPath(remote);
         var username = arguments.contains("username") ? arguments.get("username").asString() : null;
         var token = System.getenv("GIT_TOKEN");
         var uri = toURI(remotePullPath);
-        var credentials = GitCredentials.fill(uri.getHost(), uri.getPath().substring(1), username, token, uri.getScheme());
+        var credentials = GitCredentials.fill(uri.getHost(), uri.getPath(), username, token, uri.getScheme());
         var host = Host.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
 
         var action = arguments.at(0).asString();
         if (action.equals("create")) {
             var currentBranch = repo.currentBranch();
diff a/cli/src/main/java/org/openjdk/skara/cli/GitToken.java b/cli/src/main/java/org/openjdk/skara/cli/GitToken.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitToken.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitToken.java
@@ -76,14 +76,14 @@
 
         var command = arguments.at(0).asString();
         var uri = arguments.at(1).via(URI::create);
 
         if (command.equals("store")) {
-            var credentials = GitCredentials.fill(uri.getHost(), uri.getPath().substring(1), null, null, uri.getScheme());
+            var credentials = GitCredentials.fill(uri.getHost(), uri.getPath(), null, null, uri.getScheme());
             GitCredentials.approve(credentials);
         } else if (command.equals("revoke")) {
-            var credentials = GitCredentials.fill(uri.getHost(), uri.getPath().substring(1), null, null, uri.getScheme());
+            var credentials = GitCredentials.fill(uri.getHost(), uri.getPath(), null, null, uri.getScheme());
             GitCredentials.reject(credentials);
         } else {
             exit("error: unknown command: " + command);
         }
     }
