diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -763,11 +763,10 @@
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain a note
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
             assertEquals(1, archiveContainsCount(archiveFolder.path(), "This PR has been reviewed.*more changes are needed"));
-            assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 1"));
 
             // Then approve it
             reviewedPr.addReview(Review.Verdict.APPROVED, "Reason 2");
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
@@ -774,11 +773,10 @@
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain another note
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
             assertEquals(1, archiveContainsCount(archiveFolder.path(), "This PR.*approved"));
-            assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 2"));
 
             // Yet another change
             reviewedPr.addReview(Review.Verdict.DISAPPROVED, "Reason 3");
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
@@ -785,9 +782,9 @@
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain another note
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
             assertEquals(2, archiveContainsCount(archiveFolder.path(), "This PR.*more changes"));
-            assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 3"));
         }
     }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -316,25 +316,10 @@
                     "This PR has been reviewed by " +
                     formatReviewer(added.getKey().reviewer()) + " - " +
                     verdictToString(added.getKey().verdict()) + ".";
             pr.addComment(body);
         }
-
-        for (var updated : reviewTracker.updatedReviews().entrySet()) {
-            var body = updated.getValue() + "\n" +
-                    "The PR review by " + formatReviewer(updated.getKey().reviewer()) +
-                    " has been updated - " + verdictToString(updated.getKey().verdict()) + ".";
-            pr.addComment(body);
-        }
-
-        for (var removed : reviewTracker.removedReviews().entrySet()) {
-            var user = pr.repository().host().getUserDetails(removed.getKey());
-            var body = removed.getValue() + "\n" +
-                    "This PR is no longer reviewed by " +
-                    formatReviewer(user) + ".";
-            pr.addComment(body);
-        }
     }
 
     private Optional<Comment> findComment(List<Comment> comments, String marker) {
         var self = pr.repository().host().getCurrentUserDetails();
         return comments.stream()
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewTracker.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewTracker.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewTracker.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewTracker.java
@@ -26,48 +26,26 @@
 
 import java.util.*;
 import java.util.regex.Pattern;
 
 class ReviewTracker {
-    private final String reviewMarker = "<!-- Review marker (%d) by (%s) (%s) of (%s) -->";
-    private final String unreviewMarker = "<!-- Unreview marker by (%s) -->";
+    private final String reviewMarker = "<!-- Review id marker (%d) -->";
     private final Pattern reviewMarkerPattern = Pattern.compile(
-            "<!-- Review marker \\((\\d+)\\) by \\((\\d+)\\) \\(([-.\\w]+)\\) of \\((\\w+)\\) -->");
-    private final Pattern unreviewMarkerPattern = Pattern.compile(
-            "<!-- Unreview marker by \\((\\d+)\\) -->");
-
-    private static class ReviewState {
-        Comment comment;
-        String userId;
-        String userName;
-        String hash;
-        int verdict;
-    }
+            "<!-- Review id marker \\((\\d+)\\) -->");
 
     private final Map<Review, String> newComments = new HashMap<>();
-    private final Map<String, String> removedReviews = new HashMap<>();
-    private final Map<Review, String> updatedReviews = new HashMap<>();
 
     ReviewTracker(List<Comment> comments, List<Review> reviews) {
-        var reviewStates = new HashMap<String, ReviewState>();
+        var notified = new HashSet<Integer>();
 
         // Calculate current state
         for (var comment : comments) {
             var reviewMarkerMatcher = reviewMarkerPattern.matcher(comment.body());
-            var unreviewMarkerMatcher = unreviewMarkerPattern.matcher(comment.body());
 
             if (reviewMarkerMatcher.find()) {
-                var reviewState = new ReviewState();
-                reviewState.verdict = Integer.parseInt(reviewMarkerMatcher.group(1));
-                reviewState.userId = reviewMarkerMatcher.group(2);
-                reviewState.userName = reviewMarkerMatcher.group(3);
-                reviewState.hash = reviewMarkerMatcher.group(4);
-                reviewState.comment = comment;
-                reviewStates.put(reviewState.userId, reviewState);
-            } else if (unreviewMarkerMatcher.find()) {
-                var userId = unreviewMarkerMatcher.group(1);
-                reviewStates.remove(userId);
+                var reviewId = Integer.parseInt(reviewMarkerMatcher.group(1));
+                notified.add(reviewId);
             }
         }
 
         // Find all reviews without a comment
         for (var review : reviews) {
@@ -70,34 +48,15 @@
         }
 
         // Find all reviews without a comment
         for (var review : reviews) {
             // Not notified yet
-            if (!reviewStates.containsKey(review.reviewer().id())) {
-                newComments.put(review, String.format(reviewMarker, review.verdict().ordinal(), review.reviewer().id(), review.reviewer().userName(), review.hash().hex()));
-            } else {
-                var oldReview = reviewStates.get(review.reviewer().id());
-                if (review.verdict().ordinal() != oldReview.verdict) {
-                    updatedReviews.put(review, String.format(reviewMarker, review.verdict().ordinal(), review.reviewer().id(), review.reviewer().userName(), review.hash().hex()));
-                }
-                reviewStates.remove(review.reviewer().id());
+            if (!notified.contains(review.id())) {
+                newComments.put(review, String.format(reviewMarker, review.id()));
             }
         }
-
-        // Check if there are any states not covered by reviews - these must have been removed
-        for (var reviewState : reviewStates.values()) {
-            removedReviews.put(reviewState.userName, String.format(unreviewMarker, reviewState.userId));
-        }
     }
 
     Map<Review, String> newReviews() {
         return newComments;
     }
-
-    Map<String, String> removedReviews() {
-        return removedReviews;
-    }
-
-    Map<Review, String> updatedReviews() {
-        return updatedReviews;
-    }
 }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -225,11 +225,11 @@
 
             // Refresh the PR and check that it has been approved (once) and is no longer stale
             authorPr = author.getPullRequest(authorPr.getId());
             assertTrue(authorPr.getBody().contains("Approvers"));
             assertEquals(1, authorPr.getBody().split("Generated Reviewer", -1).length - 1);
-            assertEquals(2, authorPr.getReviews().size());
+            assertTrue(authorPr.getReviews().size() >= 1);
             assertFalse(authorPr.getBody().contains("Note"));
 
             // Add a review with disapproval
             var commenterPr = commenter.getPullRequest(authorPr.getId());
             commenterPr.addReview(Review.Verdict.DISAPPROVED, "Disapproved");
@@ -237,11 +237,11 @@
 
             // Refresh the PR and check that it still only approved once (but two reviews) and is no longer stale
             authorPr = author.getPullRequest(authorPr.getId());
             assertTrue(authorPr.getBody().contains("Approvers"));
             assertEquals(1, authorPr.getBody().split("Generated Reviewer", -1).length - 1);
-            assertEquals(3, authorPr.getReviews().size());
+            assertTrue(authorPr.getReviews().size() >= 2);
             assertFalse(authorPr.getBody().contains("Note"));
         }
     }
 
     @Test
@@ -391,10 +391,12 @@
             localRepo.push(editHash, author.getUrl(), "refs/heads/edit", true);
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Check the status
             TestBotRunner.runPeriodicItems(checkBot);
+            var comments = pr.getComments();
+            var commentCount = comments.size();
 
             // Approve it as another user
             var approvalPr = reviewer.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -399,14 +401,14 @@
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
             // Check the status again
             TestBotRunner.runPeriodicItems(checkBot);
 
-            // There should now be a comment
-            var comments = pr.getComments();
-            assertEquals(2, comments.size());
-            var comment = comments.get(0);
+            // There should now be two additional comments
+            comments = pr.getComments();
+            assertEquals(commentCount + 2, comments.size());
+            var comment = comments.get(commentCount);
             assertTrue(comment.body().contains(reviewer.host().getCurrentUserDetails().userName()));
             assertTrue(comment.body().contains("approved"));
 
             // Drop the review
             approvalPr.addReview(Review.Verdict.NONE, "Unreviewed");
@@ -414,12 +416,12 @@
             // Check the status again
             TestBotRunner.runPeriodicItems(checkBot);
 
             // There should now be yet another comment
             comments = pr.getComments();
-            assertEquals(3, comments.size());
-            comment = comments.get(2);
+            assertEquals(commentCount + 3, comments.size());
+            comment = comments.get(commentCount + 2);
             assertTrue(comment.body().contains(reviewer.host().getCurrentUserDetails().userName()));
             assertTrue(comment.body().contains("comment"));
 
             // No changes should not generate additional comments
             TestBotRunner.runPeriodicItems(checkBot);
@@ -422,11 +424,11 @@
             assertTrue(comment.body().contains("comment"));
 
             // No changes should not generate additional comments
             TestBotRunner.runPeriodicItems(checkBot);
             comments = pr.getComments();
-            assertEquals(3, comments.size());
+            assertEquals(commentCount + 3, comments.size());
         }
     }
 
     @Test
     void mergeMessage(TestInfo testInfo) throws IOException {
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
@@ -87,26 +87,39 @@
         }
 
         return request.get("award_emoji").execute().stream()
                       .map(JSONValue::asObject)
                       .filter(obj -> obj.get("name").asString().equals("thumbsup") ||
-                                    obj.get("name").asString().equals("thumbsdown"))
+                              obj.get("name").asString().equals("thumbsdown") ||
+                              obj.get("name").asString().equals("question"))
                       .map(obj -> {
-                                var reviewer = repository.host().getUserDetails(obj.get("user").get("username").asString());
-                                var verdict = obj.get("name").asString().equals("thumbsup") ? Review.Verdict.APPROVED : Review.Verdict.DISAPPROVED;
-                                var createdAt = ZonedDateTime.parse(obj.get("updated_at").asString());
-
-                                // Find the latest commit that isn't created after our review
-                                var hash = commits.get(0).hash;
-                                for (var cd : commits) {
-                                    if (createdAt.isAfter(cd.date)) {
-                                        hash = cd.hash;
-                                    }
-                                }
-                                var id = obj.get("id").asInt();
-                                return new Review(reviewer, verdict, hash, id, null);
-                            })
+                          var reviewer = repository.host().getUserDetails(obj.get("user").get("username").asString());
+                          Review.Verdict verdict;
+                          switch (obj.get("name").asString()) {
+                              case "thumbsup":
+                                  verdict = Review.Verdict.APPROVED;
+                                  break;
+                              case "thumbsdown":
+                                  verdict = Review.Verdict.DISAPPROVED;
+                                  break;
+                              default:
+                                  verdict = Review.Verdict.NONE;
+                                  break;
+                          }
+
+                          var createdAt = ZonedDateTime.parse(obj.get("updated_at").asString());
+
+                          // Find the latest commit that isn't created after our review
+                          var hash = commits.get(0).hash;
+                          for (var cd : commits) {
+                              if (createdAt.isAfter(cd.date)) {
+                                  hash = cd.hash;
+                              }
+                          }
+                          var id = obj.get("id").asInt();
+                          return new Review(reviewer, verdict, hash, id, null);
+                      })
                       .collect(Collectors.toList());
     }
 
     @Override
     public void addReview(Review.Verdict verdict, String body) {
@@ -112,11 +125,12 @@
     public void addReview(Review.Verdict verdict, String body) {
         // Remove any previous awards
         var awards = request.get("award_emoji").execute().stream()
                             .map(JSONValue::asObject)
                             .filter(obj -> obj.get("name").asString().equals("thumbsup") ||
-                                    obj.get("name").asString().equals("thumbsdown"))
+                                    obj.get("name").asString().equals("thumbsdown") ||
+                                    obj.get("name").asString().equals("question"))
                             .filter(obj -> obj.get("user").get("username").asString().equals(repository.host().getCurrentUserDetails().userName()))
                             .map(obj -> obj.get("id").toString())
                             .collect(Collectors.toList());
         for (var award : awards) {
             request.delete("award_emoji/" + award).execute();
@@ -129,12 +143,12 @@
                 break;
             case DISAPPROVED:
                 award = "thumbsdown";
                 break;
             default:
-                // No action
-                return;
+                award = "question";
+                break;
         }
         request.post("award_emoji")
                .body("name", award)
                .execute();
     }
@@ -321,11 +335,10 @@
         return message.replaceAll("\n", "  \n");
     }
 
     @Override
     public Map<String, Check> getChecks(Hash hash) {
-
         var pattern = Pattern.compile(String.format(checkResultPattern, hash.hex()));
         var matchers = getComments().stream()
                 .collect(Collectors.toMap(comment -> comment,
                         comment -> pattern.matcher(comment.body())));
 
@@ -339,10 +352,11 @@
                                 checkBuilder.complete(entry.getValue().group(2).equals("SUCCESS"), entry.getKey().updatedAt());
                             }
                             if (!entry.getValue().group(3).equals("NONE")) {
                                 checkBuilder.metadata(new String(Base64.getDecoder().decode(entry.getValue().group(3)), StandardCharsets.UTF_8));
                             }
+                            checkBuilder.summary(entry.getKey().body());
                             return checkBuilder.build();
                         }));
     }
 
     @Override
