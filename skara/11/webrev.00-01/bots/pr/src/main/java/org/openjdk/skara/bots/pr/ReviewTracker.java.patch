diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewTracker.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewTracker.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewTracker.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewTracker.java
@@ -26,48 +26,26 @@
 
 import java.util.*;
 import java.util.regex.Pattern;
 
 class ReviewTracker {
-    private final String reviewMarker = "<!-- Review marker (%d) by (%s) (%s) of (%s) -->";
-    private final String unreviewMarker = "<!-- Unreview marker by (%s) -->";
+    private final String reviewMarker = "<!-- Review id marker (%d) -->";
     private final Pattern reviewMarkerPattern = Pattern.compile(
-            "<!-- Review marker \\((\\d+)\\) by \\((\\d+)\\) \\(([-.\\w]+)\\) of \\((\\w+)\\) -->");
-    private final Pattern unreviewMarkerPattern = Pattern.compile(
-            "<!-- Unreview marker by \\((\\d+)\\) -->");
-
-    private static class ReviewState {
-        Comment comment;
-        String userId;
-        String userName;
-        String hash;
-        int verdict;
-    }
+            "<!-- Review id marker \\((\\d+)\\) -->");
 
     private final Map<Review, String> newComments = new HashMap<>();
-    private final Map<String, String> removedReviews = new HashMap<>();
-    private final Map<Review, String> updatedReviews = new HashMap<>();
 
     ReviewTracker(List<Comment> comments, List<Review> reviews) {
-        var reviewStates = new HashMap<String, ReviewState>();
+        var notified = new HashSet<Integer>();
 
         // Calculate current state
         for (var comment : comments) {
             var reviewMarkerMatcher = reviewMarkerPattern.matcher(comment.body());
-            var unreviewMarkerMatcher = unreviewMarkerPattern.matcher(comment.body());
 
             if (reviewMarkerMatcher.find()) {
-                var reviewState = new ReviewState();
-                reviewState.verdict = Integer.parseInt(reviewMarkerMatcher.group(1));
-                reviewState.userId = reviewMarkerMatcher.group(2);
-                reviewState.userName = reviewMarkerMatcher.group(3);
-                reviewState.hash = reviewMarkerMatcher.group(4);
-                reviewState.comment = comment;
-                reviewStates.put(reviewState.userId, reviewState);
-            } else if (unreviewMarkerMatcher.find()) {
-                var userId = unreviewMarkerMatcher.group(1);
-                reviewStates.remove(userId);
+                var reviewId = Integer.parseInt(reviewMarkerMatcher.group(1));
+                notified.add(reviewId);
             }
         }
 
         // Find all reviews without a comment
         for (var review : reviews) {
@@ -70,34 +48,15 @@
         }
 
         // Find all reviews without a comment
         for (var review : reviews) {
             // Not notified yet
-            if (!reviewStates.containsKey(review.reviewer().id())) {
-                newComments.put(review, String.format(reviewMarker, review.verdict().ordinal(), review.reviewer().id(), review.reviewer().userName(), review.hash().hex()));
-            } else {
-                var oldReview = reviewStates.get(review.reviewer().id());
-                if (review.verdict().ordinal() != oldReview.verdict) {
-                    updatedReviews.put(review, String.format(reviewMarker, review.verdict().ordinal(), review.reviewer().id(), review.reviewer().userName(), review.hash().hex()));
-                }
-                reviewStates.remove(review.reviewer().id());
+            if (!notified.contains(review.id())) {
+                newComments.put(review, String.format(reviewMarker, review.id()));
             }
         }
-
-        // Check if there are any states not covered by reviews - these must have been removed
-        for (var reviewState : reviewStates.values()) {
-            removedReviews.put(reviewState.userName, String.format(unreviewMarker, reviewState.userId));
-        }
     }
 
     Map<Review, String> newReviews() {
         return newComments;
     }
-
-    Map<String, String> removedReviews() {
-        return removedReviews;
-    }
-
-    Map<Review, String> updatedReviews() {
-        return updatedReviews;
-    }
 }
