diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
@@ -87,26 +87,39 @@
         }
 
         return request.get("award_emoji").execute().stream()
                       .map(JSONValue::asObject)
                       .filter(obj -> obj.get("name").asString().equals("thumbsup") ||
-                                    obj.get("name").asString().equals("thumbsdown"))
+                              obj.get("name").asString().equals("thumbsdown") ||
+                              obj.get("name").asString().equals("question"))
                       .map(obj -> {
-                                var reviewer = repository.host().getUserDetails(obj.get("user").get("username").asString());
-                                var verdict = obj.get("name").asString().equals("thumbsup") ? Review.Verdict.APPROVED : Review.Verdict.DISAPPROVED;
-                                var createdAt = ZonedDateTime.parse(obj.get("updated_at").asString());
-
-                                // Find the latest commit that isn't created after our review
-                                var hash = commits.get(0).hash;
-                                for (var cd : commits) {
-                                    if (createdAt.isAfter(cd.date)) {
-                                        hash = cd.hash;
-                                    }
-                                }
-                                var id = obj.get("id").asInt();
-                                return new Review(reviewer, verdict, hash, id, null);
-                            })
+                          var reviewer = repository.host().getUserDetails(obj.get("user").get("username").asString());
+                          Review.Verdict verdict;
+                          switch (obj.get("name").asString()) {
+                              case "thumbsup":
+                                  verdict = Review.Verdict.APPROVED;
+                                  break;
+                              case "thumbsdown":
+                                  verdict = Review.Verdict.DISAPPROVED;
+                                  break;
+                              default:
+                                  verdict = Review.Verdict.NONE;
+                                  break;
+                          }
+
+                          var createdAt = ZonedDateTime.parse(obj.get("updated_at").asString());
+
+                          // Find the latest commit that isn't created after our review
+                          var hash = commits.get(0).hash;
+                          for (var cd : commits) {
+                              if (createdAt.isAfter(cd.date)) {
+                                  hash = cd.hash;
+                              }
+                          }
+                          var id = obj.get("id").asInt();
+                          return new Review(reviewer, verdict, hash, id, null);
+                      })
                       .collect(Collectors.toList());
     }
 
     @Override
     public void addReview(Review.Verdict verdict, String body) {
@@ -112,11 +125,12 @@
     public void addReview(Review.Verdict verdict, String body) {
         // Remove any previous awards
         var awards = request.get("award_emoji").execute().stream()
                             .map(JSONValue::asObject)
                             .filter(obj -> obj.get("name").asString().equals("thumbsup") ||
-                                    obj.get("name").asString().equals("thumbsdown"))
+                                    obj.get("name").asString().equals("thumbsdown") ||
+                                    obj.get("name").asString().equals("question"))
                             .filter(obj -> obj.get("user").get("username").asString().equals(repository.host().getCurrentUserDetails().userName()))
                             .map(obj -> obj.get("id").toString())
                             .collect(Collectors.toList());
         for (var award : awards) {
             request.delete("award_emoji/" + award).execute();
@@ -129,12 +143,12 @@
                 break;
             case DISAPPROVED:
                 award = "thumbsdown";
                 break;
             default:
-                // No action
-                return;
+                award = "question";
+                break;
         }
         request.post("award_emoji")
                .body("name", award)
                .execute();
     }
@@ -321,11 +335,10 @@
         return message.replaceAll("\n", "  \n");
     }
 
     @Override
     public Map<String, Check> getChecks(Hash hash) {
-
         var pattern = Pattern.compile(String.format(checkResultPattern, hash.hex()));
         var matchers = getComments().stream()
                 .collect(Collectors.toMap(comment -> comment,
                         comment -> pattern.matcher(comment.body())));
 
@@ -339,10 +352,11 @@
                                 checkBuilder.complete(entry.getValue().group(2).equals("SUCCESS"), entry.getKey().updatedAt());
                             }
                             if (!entry.getValue().group(3).equals("NONE")) {
                                 checkBuilder.metadata(new String(Base64.getDecoder().decode(entry.getValue().group(3)), StandardCharsets.UTF_8));
                             }
+                            checkBuilder.summary(entry.getKey().body());
                             return checkBuilder.build();
                         }));
     }
 
     @Override
