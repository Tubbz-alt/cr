diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -495,10 +495,20 @@
             listServer.processIncoming();
 
             var nextHash = CheckableRepository.appendAndCommit(localRepo, "Yet one more line", "Fixing");
             localRepo.push(nextHash, author.getUrl(), "edit");
 
+            // Make sure that the push registered
+            var lastHeadHash = pr.getHeadHash();
+            var refreshCount = 0;
+            do {
+                pr = author.getPullRequest(pr.getId());
+                if (refreshCount++ > 100) {
+                    fail("The PR did not update after the new push");
+                }
+            } while (pr.getHeadHash().equals(lastHeadHash));
+
             // Run another archive pass
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
@@ -534,10 +544,21 @@
 
             // Ensure that additional updates are only reported once
             for (int i = 0; i < 3; ++i) {
                 var anotherHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fixing");
                 localRepo.push(anotherHash, author.getUrl(), "edit");
+
+                // Make sure that the push registered
+                lastHeadHash = pr.getHeadHash();
+                refreshCount = 0;
+                do {
+                    pr = author.getPullRequest(pr.getId());
+                    if (refreshCount++ > 100) {
+                        fail("The PR did not update after the new push");
+                    }
+                } while (pr.getHeadHash().equals(lastHeadHash));
+
                 TestBotRunner.runPeriodicItems(mlBot);
                 TestBotRunner.runPeriodicItems(mlBot);
                 listServer.processIncoming();
             }
             var updatedConversations = mailmanList.conversations(Duration.ofDays(1));
@@ -584,10 +605,20 @@
 
             var newLocalRepo = Repository.materialize(tempFolder.path().resolve("second"), author.getUrl(), "master");
             var newEditHash = CheckableRepository.appendAndCommit(newLocalRepo, "Another line", "Replaced msg");
             newLocalRepo.push(newEditHash, author.getUrl(), "edit", true);
 
+            // Make sure that the push registered
+            var lastHeadHash = pr.getHeadHash();
+            var refreshCount = 0;
+            do {
+                pr = author.getPullRequest(pr.getId());
+                if (refreshCount++ > 100) {
+                    fail("The PR did not update after the new push");
+                }
+            } while (pr.getHeadHash().equals(lastHeadHash));
+
             // Run another archive pass
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
 
             // The archive should reference the rebased push
@@ -723,11 +754,12 @@
 
             // Run an archive pass
             TestBotRunner.runPeriodicItems(mlBot);
 
             // First unapprove it
-            pr.addReview(Review.Verdict.DISAPPROVED);
+            var reviewedPr = credentials.getHostedRepository().getPullRequest(pr.getId());
+            reviewedPr.addReview(Review.Verdict.DISAPPROVED, "Reason 1");
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain a note
@@ -730,14 +762,15 @@
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain a note
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
-            assertEquals(1, archiveContainsCount(archiveFolder.path(), "This PR has now been reviewed.*more changes needed"));
+            assertEquals(1, archiveContainsCount(archiveFolder.path(), "This PR has been reviewed.*more changes are needed"));
+            assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 1"));
 
             // Then approve it
-            pr.addReview(Review.Verdict.APPROVED);
+            reviewedPr.addReview(Review.Verdict.APPROVED, "Reason 2");
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain another note
@@ -740,14 +773,15 @@
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain another note
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
-            assertEquals(1, archiveContainsCount(archiveFolder.path(), "The PR reviewed by.*has now been updated.*approved"));
+            assertEquals(1, archiveContainsCount(archiveFolder.path(), "This PR.*approved"));
+            assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 2"));
 
             // Yet another change
-            pr.addReview(Review.Verdict.DISAPPROVED);
+            reviewedPr.addReview(Review.Verdict.DISAPPROVED, "Reason 3");
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain another note
@@ -750,9 +785,10 @@
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain another note
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
-            assertEquals(1, archiveContainsCount(archiveFolder.path(), "The PR reviewed by.*has now been updated.*more changes"));
+            assertEquals(2, archiveContainsCount(archiveFolder.path(), "This PR.*more changes"));
+            assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 3"));
         }
     }
 }
