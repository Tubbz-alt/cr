diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -48,14 +48,28 @@
         targetHash = localRepo.fetch(repository.getUrl(), pr.getTargetRef());
         headHash = localRepo.fetch(repository.getUrl(), pr.getHeadHash().hex());
         baseHash = localRepo.mergeBase(targetHash, headHash);
     }
 
-    private String commitMessage(Namespace namespace, boolean isMerge) throws IOException {
-        var reviewers = pr.getReviews().stream()
-                          .filter(review -> review.verdict == Review.Verdict.APPROVED)
-                          .map(review -> review.reviewer.id())
+    /**
+     * The Review list is in chronological order, the latest one from a particular reviewer is the
+     * one that is "active".
+     * @param allReviews
+     * @return
+     */
+    static List<Review> filterActiveReviews(List<Review> allReviews) {
+        var reviewPerUser = new LinkedHashMap<HostUserDetails, Review>();
+        for (var review : allReviews) {
+            reviewPerUser.put(review.reviewer(), review);
+        }
+        return new ArrayList<>(reviewPerUser.values());
+    }
+
+    private String commitMessage(List<Review> activeReviews, Namespace namespace, boolean isMerge) throws IOException {
+        var reviewers = activeReviews.stream()
+                          .filter(review -> review.verdict() == Review.Verdict.APPROVED)
+                          .map(review -> review.reviewer().id())
                           .map(namespace::get)
                           .filter(Objects::nonNull)
                           .map(Contributor::username)
                           .collect(Collectors.toList());
 
@@ -68,11 +82,11 @@
                                          .contributors(additionalContributors)
                                          .reviewers(reviewers);
         return String.join("\n", commitMessage.format(CommitMessageFormatters.v1));
     }
 
-    private Hash commitSquashed(Namespace namespace, String censusDomain, String sponsorId) throws IOException {
+    private Hash commitSquashed(List<Review> activeReviews, Namespace namespace, String censusDomain, String sponsorId) throws IOException {
         localRepo.checkout(baseHash, true);
         localRepo.squash(headHash);
 
         Author committer;
         Author author;
@@ -91,15 +105,15 @@
             committer = new Author(sponsorContributor.fullName().orElseThrow(), sponsorContributor.username() + "@" + censusDomain);
         } else {
             committer = author;
         }
 
-        var commitMessage = commitMessage(namespace, false);
+        var commitMessage = commitMessage(activeReviews, namespace, false);
         return localRepo.commit(commitMessage, author.name(), author.email(), committer.name(), committer.email());
     }
 
-    private Hash commitMerge(Namespace namespace, String censusDomain) throws IOException {
+    private Hash commitMerge(List<Review> activeReviews, Namespace namespace, String censusDomain) throws IOException {
         localRepo.checkout(headHash, true);
 
         var contributor = namespace.get(pr.getAuthor().id());
         if (contributor == null) {
             throw new RuntimeException("Merges can only be performed by Committers");
@@ -105,19 +119,20 @@
             throw new RuntimeException("Merges can only be performed by Committers");
         }
 
         var author = new Author(contributor.fullName().orElseThrow(), contributor.username() + "@" + censusDomain);
 
-        var commitMessage = commitMessage(namespace, true);
+        var commitMessage = commitMessage(activeReviews, namespace, true);
         return localRepo.amend(commitMessage, author.name(), author.email(), author.name(), author.email());
     }
 
     Hash commit(Namespace namespace, String censusDomain, String sponsorId) throws IOException {
+        var activeReviews = filterActiveReviews(pr.getReviews());
         if (!pr.getTitle().startsWith("Merge")) {
-            return commitSquashed(namespace, censusDomain, sponsorId);
+            return commitSquashed(activeReviews, namespace, censusDomain, sponsorId);
         } else {
-            return commitMerge(namespace, censusDomain);
+            return commitMerge(activeReviews, namespace, censusDomain);
         }
     }
 
     List<Commit> divergingCommits() {
         try {
