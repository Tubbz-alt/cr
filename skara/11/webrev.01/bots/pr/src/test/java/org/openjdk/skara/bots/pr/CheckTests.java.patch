diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -69,11 +69,11 @@
             assertTrue(pr.getLabels().contains("rfr"));
             assertFalse(pr.getLabels().contains("ready"));
 
             // Approve it as another user
             var approvalPr = reviewer.getPullRequest(pr.getId());
-            approvalPr.addReview(Review.Verdict.APPROVED);
+            approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
             // Check the status again
             TestBotRunner.runPeriodicItems(checkBot);
 
             // The check should now be successful
@@ -117,11 +117,11 @@
             // The PR should not be flagged as ready for review
             assertFalse(pr.getLabels().contains("rfr"));
 
             // Approve it as another user
             var approvalPr = reviewer.getPullRequest(pr.getId());
-            approvalPr.addReview(Review.Verdict.APPROVED);
+            approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
             // Check the status
             TestBotRunner.runPeriodicItems(checkBot);
 
             // Verify that the check failed
@@ -191,11 +191,11 @@
             TestBotRunner.runPeriodicItems(checkBot);
             assertFalse(authorPr.getBody().contains("Approvers"));
 
             // Approve it
             var reviewerPr = reviewer.getPullRequest(authorPr.getId());
-            reviewerPr.addReview(Review.Verdict.APPROVED);
+            reviewerPr.addReview(Review.Verdict.APPROVED, "Approved");
             TestBotRunner.runPeriodicItems(checkBot);
 
             // Refresh the PR and check that it has been approved
             authorPr = author.getPullRequest(authorPr.getId());
             assertTrue(authorPr.getBody().contains("Approvers"));
@@ -218,11 +218,11 @@
             TestBotRunner.runPeriodicItems(checkBot);
             authorPr = author.getPullRequest(authorPr.getId());
             assertTrue(authorPr.getBody().contains("Note"));
 
             // Now we can approve it again
-            reviewerPr.addReview(Review.Verdict.APPROVED);
+            reviewerPr.addReview(Review.Verdict.APPROVED, "Approved");
             TestBotRunner.runPeriodicItems(checkBot);
 
             // Refresh the PR and check that it has been approved (once) and is no longer stale
             authorPr = author.getPullRequest(authorPr.getId());
             assertTrue(authorPr.getBody().contains("Approvers"));
@@ -225,16 +225,16 @@
 
             // Refresh the PR and check that it has been approved (once) and is no longer stale
             authorPr = author.getPullRequest(authorPr.getId());
             assertTrue(authorPr.getBody().contains("Approvers"));
             assertEquals(1, authorPr.getBody().split("Generated Reviewer", -1).length - 1);
-            assertEquals(1, authorPr.getReviews().size());
+            assertTrue(authorPr.getReviews().size() >= 1);
             assertFalse(authorPr.getBody().contains("Note"));
 
             // Add a review with disapproval
             var commenterPr = commenter.getPullRequest(authorPr.getId());
-            commenterPr.addReview(Review.Verdict.DISAPPROVED);
+            commenterPr.addReview(Review.Verdict.DISAPPROVED, "Disapproved");
             TestBotRunner.runPeriodicItems(checkBot);
 
             // Refresh the PR and check that it still only approved once (but two reviews) and is no longer stale
             authorPr = author.getPullRequest(authorPr.getId());
             assertTrue(authorPr.getBody().contains("Approvers"));
@@ -237,11 +237,11 @@
 
             // Refresh the PR and check that it still only approved once (but two reviews) and is no longer stale
             authorPr = author.getPullRequest(authorPr.getId());
             assertTrue(authorPr.getBody().contains("Approvers"));
             assertEquals(1, authorPr.getBody().split("Generated Reviewer", -1).length - 1);
-            assertEquals(2, authorPr.getReviews().size());
+            assertTrue(authorPr.getReviews().size() >= 2);
             assertFalse(authorPr.getBody().contains("Note"));
         }
     }
 
     @Test
@@ -277,11 +277,11 @@
             var check = checks.get("jcheck");
             assertEquals(CheckStatus.FAILURE, check.status());
 
             // Approve it as another user
             var approvalPr = reviewer.getPullRequest(pr.getId());
-            approvalPr.addReview(Review.Verdict.APPROVED);
+            approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
             // Check the status again
             TestBotRunner.runPeriodicItems(checkBot);
 
             // The check should still be failing
@@ -330,11 +330,11 @@
             assertTrue(pr.getLabels().contains("rfr"));
             assertFalse(pr.getLabels().contains("ready"));
 
             // Approve it as another user
             var approvalPr = reviewer.getPullRequest(pr.getId());
-            approvalPr.addReview(Review.Verdict.APPROVED);
+            approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
             // Check the status again
             TestBotRunner.runPeriodicItems(checkBot);
 
             // The check should now be successful
@@ -390,28 +391,29 @@
             localRepo.push(editHash, author.getUrl(), "refs/heads/edit", true);
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Check the status
             TestBotRunner.runPeriodicItems(checkBot);
+            var comments = pr.getComments();
+            var commentCount = comments.size();
 
             // Approve it as another user
             var approvalPr = reviewer.getPullRequest(pr.getId());
-            approvalPr.addReview(Review.Verdict.APPROVED);
+            approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
             // Check the status again
             TestBotRunner.runPeriodicItems(checkBot);
 
-            // There should now be a comment
-            var comments = pr.getComments();
-            assertEquals(2, comments.size());
-            var comment = comments.get(0);
+            // There should now be two additional comments
+            comments = pr.getComments();
+            assertEquals(commentCount + 2, comments.size());
+            var comment = comments.get(commentCount);
             assertTrue(comment.body().contains(reviewer.host().getCurrentUserDetails().userName()));
             assertTrue(comment.body().contains("approved"));
 
             // Drop the review
-            approvalPr.addReview(Review.Verdict.NONE);
+            approvalPr.addReview(Review.Verdict.NONE, "Unreviewed");
 
             // Check the status again
             TestBotRunner.runPeriodicItems(checkBot);
 
             // There should now be yet another comment
@@ -414,12 +416,12 @@
             // Check the status again
             TestBotRunner.runPeriodicItems(checkBot);
 
             // There should now be yet another comment
             comments = pr.getComments();
-            assertEquals(3, comments.size());
-            comment = comments.get(2);
+            assertEquals(commentCount + 3, comments.size());
+            comment = comments.get(commentCount + 2);
             assertTrue(comment.body().contains(reviewer.host().getCurrentUserDetails().userName()));
             assertTrue(comment.body().contains("comment"));
 
             // No changes should not generate additional comments
             TestBotRunner.runPeriodicItems(checkBot);
@@ -422,11 +424,11 @@
             assertTrue(comment.body().contains("comment"));
 
             // No changes should not generate additional comments
             TestBotRunner.runPeriodicItems(checkBot);
             comments = pr.getComments();
-            assertEquals(3, comments.size());
+            assertEquals(commentCount + 3, comments.size());
         }
     }
 
     @Test
     void mergeMessage(TestInfo testInfo) throws IOException {
@@ -452,11 +454,11 @@
             localRepo.push(editHash, author.getUrl(), "edit", true);
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
-            approvalPr.addReview(Review.Verdict.APPROVED);
+            approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
             // Get all messages up to date
             TestBotRunner.runPeriodicItems(mergeBot);
 
             // Push something unrelated to master
@@ -503,11 +505,11 @@
             localRepo.push(editHash, author.getUrl(), "edit", true);
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
-            approvalPr.addReview(Review.Verdict.APPROVED);
+            approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
             // Get all messages up to date
             TestBotRunner.runPeriodicItems(mergeBot);
 
             // Push something conflicting to master
