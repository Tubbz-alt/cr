diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
@@ -30,11 +30,11 @@
 import org.openjdk.skara.vcs.openjdk.*;
 
 import java.io.IOException;
 import java.net.URI;
 import java.nio.file.Path;
-import java.util.List;
+import java.util.*;
 import java.util.logging.Logger;
 
 public class IssueUpdater implements RepositoryUpdateConsumer, PullRequestUpdateConsumer {
     private final IssueProject issueProject;
     private final boolean reviewLink;
@@ -59,64 +59,80 @@
     public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) {
         for (var commit : commits) {
             var commitNotification = CommitFormatters.toTextBrief(repository, commit);
             var commitMessage = CommitMessageParsers.v1.parse(commit);
             for (var commitIssue : commitMessage.issues()) {
-                var issue = issueProject.issue(commitIssue.id());
-                if (issue.isEmpty()) {
+                var optionalIssue = issueProject.issue(commitIssue.id());
+                if (optionalIssue.isEmpty()) {
                     log.severe("Cannot update issue " + commitIssue.id() + " with commit " + commit.hash().abbreviate()
                                        + " - issue not found in issue project");
                     continue;
                 }
-                issue.get().addComment(commitNotification);
-                issue.get().setState(Issue.State.RESOLVED);
+                var issue = optionalIssue.get();
+                var existingComments = issue.comments();
+                var hashUrl = repository.webUrl(commit.hash()).toString();
+                var alreadyPostedComment = existingComments.stream()
+                                                           .filter(comment -> comment.author().equals(issueProject.issueTracker().currentUser()))
+                                                           .anyMatch(comment -> comment.body().contains(hashUrl));
+                if (!alreadyPostedComment) {
+                    issue.addComment(commitNotification);
+                }
+                issue.setState(Issue.State.RESOLVED);
 
                 if (commitLink) {
                     var linkBuilder = Link.create(repository.webUrl(commit.hash()), "Commit")
                                           .summary(repository.name() + "/" + commit.hash().abbreviate());
                     if (commitIcon != null) {
                         linkBuilder.iconTitle("Commit");
                         linkBuilder.iconUrl(commitIcon);
                     }
-                    issue.get().addLink(linkBuilder.build());
+                    issue.addLink(linkBuilder.build());
                 }
 
                 if (setFixVersion) {
-                    if (fixVersion == null) {
+                    var requestedVersion = fixVersion;
+                    if (requestedVersion == null) {
                         try {
                             var conf = localRepository.lines(Path.of(".jcheck/conf"), commit.hash());
                             if (conf.isPresent()) {
                                 var parsed = JCheckConfiguration.parse(conf.get());
                                 var version = parsed.general().version();
-                                version.ifPresent(v -> issue.get().addFixVersion(v));
+                                requestedVersion = version.orElse(null);
                             }
                         } catch (IOException e) {
                             throw new RuntimeException(e);
                         }
-                    } else {
-                        issue.get().addFixVersion(fixVersion);
+                    }
+
+                    if (requestedVersion != null) {
+                        issue.addFixVersion(requestedVersion);
                     }
                 }
             }
         }
     }
 
     @Override
-    public void handleOpenJDKTagCommits(HostedRepository repository, Repository loclRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) {
+    public void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) {
 
     }
 
     @Override
-    public void handleTagCommit(HostedRepository repository, Repository loclRepository, Commit commit, Tag tag, Tag.Annotated annotation) {
+    public void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) {
 
     }
 
     @Override
-    public void handleNewBranch(HostedRepository repository, Repository loclRepository, List<Commit> commits, Branch parent, Branch branch) {
+    public void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) {
 
     }
 
+    @Override
+    public boolean idempotent() {
+        return true;
+    }
+
     @Override
     public void handleNewIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
         var realIssue = issueProject.issue(issue.id());
         if (realIssue.isEmpty()) {
             log.warning("Pull request " + pr + " added unknown issue: " + issue.id());
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
@@ -104,6 +104,11 @@
     }
 
     @Override
     public void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) {
     }
+
+    @Override
+    public boolean idempotent() {
+        return false;
+    }
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -323,6 +323,11 @@
                          .recipient(recipient)
                          .headers(headers)
                          .build();
         list.post(email);
     }
+
+    @Override
+    public boolean idempotent() {
+        return false;
+    }
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java
@@ -26,6 +26,7 @@
 import org.openjdk.skara.vcs.openjdk.Issue;
 
 public interface PullRequestUpdateConsumer {
     void handleNewIssue(PullRequest pr, Issue issue);
     void handleRemovedIssue(PullRequest pr, Issue issue);
+    boolean idempotent();
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java
@@ -31,10 +31,11 @@
 public interface RepositoryUpdateConsumer {
     void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch);
     void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated);
     void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation);
     void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch);
+    boolean idempotent();
 
     default void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag) {
         handleOpenJDKTagCommits(repository, localRepository, commits, tag, null);
     }
     default void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag) {
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
@@ -53,11 +53,11 @@
         this.tagStorageBuilder = tagStorageBuilder;
         this.branchStorageBuilder = branchStorageBuilder;
         this.updaters = updaters;
     }
 
-    private void handleNewRef(Repository localRepo, Reference ref, Collection<Reference> allRefs) {
+    private void handleNewRef(Repository localRepo, Reference ref, Collection<Reference> allRefs, boolean runOnlyIdempotent) {
         // Figure out the best parent ref
         var candidates = new HashSet<>(allRefs);
         candidates.remove(ref);
         if (candidates.size() == 0) {
             log.warning("No parent candidates found for branch '" + ref.name() + "' - ignoring");
@@ -77,42 +77,52 @@
         if (bestParent.getValue().size() > 1000) {
             throw new RuntimeException("Excessive amount of unique commits on new branch " + ref.name() +
                                                " detected (" + bestParent.getValue().size() + ") - skipping notifications");
         }
         for (var updater : updaters) {
+            if (updater.idempotent() != runOnlyIdempotent) {
+                continue;
+            }
             var branch = new Branch(ref.name());
             var parent = new Branch(bestParent.getKey().name());
             updater.handleNewBranch(repository, localRepo, bestParent.getValue(), parent, branch);
         }
     }
 
-    private void handleUpdatedRef(Repository localRepo, Reference ref, List<Commit> commits) {
+    private void handleUpdatedRef(Repository localRepo, Reference ref, List<Commit> commits, boolean runOnlyIdempotent) {
         for (var updater : updaters) {
+            if (updater.idempotent() != runOnlyIdempotent) {
+                continue;
+            }
             var branch = new Branch(ref.name());
             updater.handleCommits(repository, localRepo, commits, branch);
         }
     }
 
     private void handleRef(Repository localRepo, UpdateHistory history, Reference ref, Collection<Reference> allRefs) throws IOException {
         var branch = new Branch(ref.name());
         var lastHash = history.branchHash(branch);
         if (lastHash.isEmpty()) {
             log.warning("No previous history found for branch '" + branch + "' - resetting mark");
+            handleNewRef(localRepo, ref, allRefs, true);
             history.setBranchHash(branch, ref.hash());
-            handleNewRef(localRepo, ref, allRefs);
+            handleNewRef(localRepo, ref, allRefs, false);
         } else {
             var commits = localRepo.commits(lastHash.get() + ".." + ref.hash()).asList();
             if (commits.size() == 0) {
                 return;
             }
-            history.setBranchHash(branch, ref.hash());
             if (commits.size() > 1000) {
+                history.setBranchHash(branch, ref.hash());
                 throw new RuntimeException("Excessive amount of new commits on branch " + branch.name() +
                                                    " detected (" + commits.size() + ") - skipping notifications");
             }
+
             Collections.reverse(commits);
-            handleUpdatedRef(localRepo, ref, commits);
+            handleUpdatedRef(localRepo, ref, commits, true);
+            history.setBranchHash(branch, ref.hash());
+            handleUpdatedRef(localRepo, ref, commits, false);
         }
     }
 
     private Optional<OpenJDKTag> existingPrevious(OpenJDKTag tag, Set<OpenJDKTag> allJdkTags) {
         while (true) {
@@ -158,13 +168,10 @@
                                 .filter(Optional::isPresent)
                                 .map(Optional::get)
                                 .sorted(Comparator.comparingInt(OpenJDKTag::buildNum))
                                 .collect(Collectors.toList());
         for (var tag : newJdkTags) {
-            // Update the history first - if there is a problem here we don't want to send out multiple updates
-            history.addTags(List.of(tag.tag()));
-
             var commits = new ArrayList<Commit>();
 
             // Try to determine which commits are new since the last build
             var previous = existingPrevious(tag, allJdkTags);
             if (previous.isPresent()) {
@@ -181,31 +188,48 @@
                 }
             }
 
             Collections.reverse(commits);
             var annotation = localRepo.annotate(tag.tag());
-            for (var updater : updaters) {
-                updater.handleOpenJDKTagCommits(repository, localRepo, commits, tag, annotation.orElse(null));
-            }
+
+            // Run all notifiers that can be safely re-run
+            updaters.stream()
+                    .filter(RepositoryUpdateConsumer::idempotent)
+                    .forEach(updater -> updater.handleOpenJDKTagCommits(repository, localRepo, commits, tag, annotation.orElse(null)));
+
+            // Now update the history
+            history.addTags(List.of(tag.tag()));
+
+            // Finally run all one-shot notifiers
+            updaters.stream()
+                    .filter(updater -> !updater.idempotent())
+                    .forEach(updater -> updater.handleOpenJDKTagCommits(repository, localRepo, commits, tag, annotation.orElse(null)));
         }
 
         var newNonJdkTags = newTags.stream()
                                    .filter(tag -> OpenJDKTag.create(tag).isEmpty())
                                    .collect(Collectors.toList());
         for (var tag : newNonJdkTags) {
-            // Update the history first - if there is a problem here we don't want to send out multiple updates
-            history.addTags(List.of(tag));
-
             var commit = localRepo.lookup(tag);
             if (commit.isEmpty()) {
                 throw new RuntimeException("Failed to lookup tag '" + tag.toString() + "'");
             }
 
             var annotation = localRepo.annotate(tag);
-            for (var updater : updaters) {
-                updater.handleTagCommit(repository, localRepo, commit.get(), tag, annotation.orElse(null));
-            }
+
+            // Run all notifiers that can be safely re-run
+            updaters.stream()
+                    .filter(RepositoryUpdateConsumer::idempotent)
+                    .forEach(updater -> updater.handleTagCommit(repository, localRepo, commit.get(), tag, annotation.orElse(null)));
+
+            // Now update the history
+            history.addTags(List.of(tag));
+
+            // Finally run all one-shot notifiers
+            updaters.stream()
+                    .filter(updater -> !updater.idempotent())
+                    .forEach(updater -> updater.handleTagCommit(repository, localRepo, commit.get(), tag, annotation.orElse(null)));
         }
     }
 
     private Repository fetchAll(Path dir, URI remote) throws IOException {
         Repository repo = null;
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -744,10 +744,62 @@
             assertEquals("git: test: created branch newbranch2 based on the branch newbranch1 containing 0 unique commits", email.subject());
             assertEquals("The new branch newbranch2 is currently identical to the newbranch1 branch.", email.body());
         }
     }
 
+    @Test
+    void testMailingListNoIdempotence(TestInfo testInfo) throws IOException {
+        try (var listServer = new TestMailmanServer();
+             var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var listAddress = EmailAddress.parse(listServer.createList("test"));
+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
+            var mailmanList = mailmanServer.getList(listAddress.address());
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var sender = EmailAddress.from("duke", "duke@duke.duke");
+            var updater = new MailingListUpdater(mailmanList, listAddress, sender, null, false, MailingListUpdater.Mode.ALL,
+                                                 Map.of("extra1", "value1", "extra2", "value2"), Pattern.compile("none"));
+            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
+                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+
+            // No mail should be sent on the first run as there is no history
+            TestBotRunner.runPeriodicItems(notifyBot);
+            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
+
+            // Save history state
+            var historyHash = localRepo.fetch(repo.url(), "history");
+
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
+            localRepo.push(editHash, repo.url(), "master");
+            TestBotRunner.runPeriodicItems(notifyBot);
+            listServer.processIncoming();
+
+            var conversations = mailmanList.conversations(Duration.ofDays(1));
+            assertEquals(1, conversations.size());
+
+            // Reset the history
+            localRepo.push(historyHash, repo.url(), "history", true);
+            TestBotRunner.runPeriodicItems(notifyBot);
+            listServer.processIncoming();
+
+            // There should now be a duplicate mail
+            conversations = mailmanList.conversations(Duration.ofDays(1));
+            assertEquals(2, conversations.size());
+        }
+    }
+
     @Test
     void testIssue(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var repo = credentials.getHostedRepository();
@@ -895,10 +947,80 @@
             // There should be no open issues
             assertEquals(0, issueProject.issues().size());
         }
     }
 
+    @Test
+    void testIssueIdempotence(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var commitIcon = URI.create("http://www.example.com/commit.png");
+            var updater = new IssueUpdater(issueProject, false, null, true, commitIcon, true, null);
+            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
+                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Save the state
+            var historyState = localRepo.fetch(repo.url(), "history");
+
+            // Create an issue and commit a fix
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
+            localRepo.push(editHash, repo.url(), "master");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The changeset should be reflected in a comment
+            var comments = issue.comments();
+            assertEquals(1, comments.size());
+            var comment = comments.get(0);
+            assertTrue(comment.body().contains(editHash.abbreviate()));
+
+            // And in a link
+            var links = issue.links();
+            assertEquals(1, links.size());
+            var link = links.get(0);
+            assertEquals(commitIcon, link.iconUrl().orElseThrow());
+            assertEquals("Commit", link.title());
+            assertEquals(repo.webUrl(editHash), link.uri());
+
+            // As well as a fixVersion
+            var fixVersions = issue.fixVersions();
+            assertEquals(1, fixVersions.size());
+            var fixVersion = fixVersions.get(0);
+            assertEquals("0.1", fixVersion);
+
+            // Wipe the history
+            localRepo.push(historyState, repo.url(), "history", true);
+
+            // Run it again
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // There should be no new comments, links or fixVersions
+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
+            assertEquals(1, updatedIssue.comments().size());
+            assertEquals(1, updatedIssue.links().size());
+            assertEquals(1, updatedIssue.fixVersions().size());
+
+            // There should be no open issues
+            assertEquals(0, issueProject.issues().size());
+        }
+    }
+
     @Test
     void testPullRequest(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var repo = credentials.getHostedRepository();
diff a/test/src/main/java/org/openjdk/skara/test/TestIssue.java b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssue.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
@@ -185,10 +185,11 @@
         return data.links;
     }
 
     @Override
     public void addLink(Link link) {
+        removeLink(link.uri());
         data.links.add(link);
         data.lastUpdate = ZonedDateTime.now();
     }
 
     @Override
