diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
@@ -35,13 +35,14 @@
 
 public class GitHubRepository implements HostedRepository {
     private final GitHubHost gitHubHost;
     private final String repository;
     private final RestRequest request;
-    private final JSONValue json;
     private final Pattern pullRequestPattern;
 
+    private JSONValue cachedJSON;
+
     GitHubRepository(GitHubHost gitHubHost, String repository) {
         this.gitHubHost = gitHubHost;
         this.repository = repository;
 
         var apiBase = URIBuilder
@@ -60,19 +61,26 @@
                 headers.add("Authorization");
                 headers.add("token " + token.get());
             }
             return headers;
         });
-        json = gitHubHost.getProjectInfo(repository);
+        this.cachedJSON = null;
         var urlPattern = gitHubHost.getWebURI("/" + repository + "/pull/").toString();
         pullRequestPattern = Pattern.compile(urlPattern + "(\\d+)");
     }
 
+    private JSONValue json() {
+        if (cachedJSON == null) {
+            cachedJSON = gitHubHost.getProjectInfo(repository);
+        }
+        return cachedJSON;
+    }
+
     @Override
     public Optional<HostedRepository> parent() {
-        if (json.get("fork").asBoolean()) {
-            var parent = json.get("parent").get("full_name").asString();
+        if (json().get("fork").asBoolean()) {
+            var parent = json().get("parent").get("full_name").asString();
             return Optional.of(new GitHubRepository(gitHubHost, parent));
         }
         return Optional.empty();
     }
 
@@ -203,11 +211,11 @@
         return gitHubHost.repository(response.get("full_name").asString()).orElseThrow(RuntimeException::new);
     }
 
     @Override
     public long id() {
-        return json.get("id").asLong();
+        return json().get("id").asLong();
     }
 
     @Override
     public Hash branchHash(String ref) {
         var branch = request.get("branches/" + ref).execute();
