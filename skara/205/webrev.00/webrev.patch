diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
@@ -84,10 +84,14 @@
                                            throw new UncheckedIOException(e);
                                        }
                                    })
                                    .min(Comparator.comparingInt(entry -> entry.getValue().size()))
                                    .orElseThrow();
+        if (bestParent.getValue().size() > 1000) {
+            throw new RuntimeException("Excessive amount of unique commits on new branch " + ref.name() +
+                                               " detected (" + bestParent.getValue().size() + ") - skipping notifications");
+        }
         for (var updater : updaters) {
             var branch = new Branch(ref.name());
             var parent = new Branch(bestParent.getKey().name());
             updater.handleNewBranch(repository, bestParent.getValue(), parent, branch);
         }
@@ -111,10 +115,14 @@
             var commits = localRepo.commits(lastHash.get() + ".." + ref.hash()).asList();
             if (commits.size() == 0) {
                 return;
             }
             history.setBranchHash(branch, ref.hash());
+            if (commits.size() > 1000) {
+                throw new RuntimeException("Excessive amount of new commits on branch " + branch.name() +
+                                                   " detected (" + commits.size() + ") - skipping notifications");
+            }
             Collections.reverse(commits);
             handleUpdatedRef(localRepo, ref, commits);
         }
     }
 
@@ -144,10 +152,16 @@
                 history.addTags(tags);
             }
             return;
         }
 
+        if (newTags.size() > 10) {
+            history.addTags(newTags);
+            throw new RuntimeException("Excessive amount of new tags detected (" + newTags.size() +
+                                               ") - skipping notifications");
+        }
+
         var allJdkTags = tags.stream()
                              .map(OpenJDKTag::create)
                              .filter(Optional::isPresent)
                              .map(Optional::get)
                              .collect(Collectors.toSet());
@@ -208,12 +222,20 @@
 
             var knownRefs = localRepo.remoteBranches("origin")
                                      .stream()
                                      .filter(ref -> branches.matcher(ref.name()).matches())
                                      .collect(Collectors.toList());
+            boolean hasBranchHistory = knownRefs.stream()
+                                                .map(ref -> history.branchHash(new Branch(ref.name())))
+                                                .anyMatch(Optional::isPresent);
             for (var ref : knownRefs) {
-                handleRef(localRepo, history, ref, knownRefs);
+                if (!hasBranchHistory) {
+                    log.warning("No previous history found for any branch - resetting mark for '" + ref.name() + "'");
+                    history.setBranchHash(new Branch(ref.name()), ref.hash());
+                } else {
+                    handleRef(localRepo, history, ref, knownRefs);
+                }
             }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
