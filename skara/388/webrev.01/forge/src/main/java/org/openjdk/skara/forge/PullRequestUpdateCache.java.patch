diff a/forge/src/main/java/org/openjdk/skara/forge/PullRequestUpdateCache.java b/forge/src/main/java/org/openjdk/skara/forge/PullRequestUpdateCache.java
--- a/forge/src/main/java/org/openjdk/skara/forge/PullRequestUpdateCache.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/PullRequestUpdateCache.java
@@ -27,30 +27,20 @@
 import java.time.ZonedDateTime;
 import java.util.*;
 import java.util.logging.Logger;
 
 public class PullRequestUpdateCache {
-    private final Map<HostedRepository, String> repositoryIds = new HashMap<>();
     private final Map<String, ZonedDateTime> lastUpdates = new HashMap<>();
-
     private final Logger log = Logger.getLogger("org.openjdk.skara.host");
 
-    private String getUniqueId(PullRequest pr) {
-        var repo = pr.repository();
-        if (!repositoryIds.containsKey(repo)) {
-            repositoryIds.put(repo, Integer.toString(repositoryIds.size()));
-        }
-        return repositoryIds.get(repo) + ";" + pr.id();
-    }
-
     public synchronized boolean needsUpdate(PullRequest pr) {
         // GitLab CE does not update this field on events such as adding an award
         if (pr instanceof GitLabMergeRequest) {
             return true;
         }
 
-        var uniqueId = getUniqueId(pr);
+        var uniqueId = pr.webUrl().toString();
         var update = pr.updatedAt();
 
         if (!lastUpdates.containsKey(uniqueId)) {
             lastUpdates.put(uniqueId, update);
             return true;
@@ -63,9 +53,9 @@
         log.info("Skipping update for " + pr.repository().name() + "#" + pr.id());
         return false;
     }
 
     public synchronized void invalidate(PullRequest pr) {
-        var uniqueId = getUniqueId(pr);
+        var uniqueId = pr.webUrl().toString();
         lastUpdates.remove(uniqueId);
     }
 }
