diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -9,10 +9,11 @@
 import java.net.URI;
 import java.nio.charset.StandardCharsets;
 import java.security.*;
 import java.time.*;
 import java.util.*;
+import java.util.function.Consumer;
 import java.util.logging.Logger;
 import java.util.stream.*;
 
 class ReviewArchive {
     private final PullRequest pr;
@@ -174,11 +175,11 @@
 
     private String getStableMessageId(EmailAddress uniqueMessageId) {
         return uniqueMessageId.localPart().split("\\.")[0];
     }
 
-    List<Email> generateNewEmails(List<Email> sentEmails, Duration cooldown, Repository localRepo, URI issueTracker, String issuePrefix, WebrevStorage.WebrevGenerator webrevGenerator, WebrevNotification webrevNotification, HostUserToEmailAuthor hostUserToEmailAuthor, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole) {
+    List<Email> generateNewEmails(List<Email> sentEmails, Duration cooldown, Repository localRepo, URI issueTracker, String issuePrefix, WebrevStorage.WebrevGenerator webrevGenerator, WebrevNotification webrevNotification, HostUserToEmailAuthor hostUserToEmailAuthor, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole, Consumer<Instant> retryConsumer) {
         var ret = new ArrayList<Email>();
         var allItems = generateArchiveItems(sentEmails, localRepo, issueTracker, issuePrefix, hostUserToEmailAuthor, hostUserToUserName, hostUserToRole, webrevGenerator, webrevNotification);
         var sentItemIds = sentItemIds(sentEmails);
         var unsentItems = allItems.stream()
                                   .filter(item -> !sentItemIds.contains(getStableMessageId(getUniqueMessageId(item.id()))))
@@ -187,12 +188,15 @@
             return ret;
         }
         var lastUpdate = unsentItems.stream()
                                     .map(ArchiveItem::updatedAt)
                                     .max(ZonedDateTime::compareTo).orElseThrow();
+        var mayUpdate = lastUpdate.plus(cooldown);
         if (lastUpdate.plus(cooldown).isAfter(ZonedDateTime.now())) {
             log.info("Waiting for new content to settle down - last update was at " + lastUpdate);
+            log.info("Retry again after " + mayUpdate);
+            retryConsumer.accept(mayUpdate.toInstant());
             return ret;
         }
 
         var combinedItems = collapsableItems(unsentItems);
         for (var itemList : combinedItems) {
