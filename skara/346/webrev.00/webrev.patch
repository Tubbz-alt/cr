diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
@@ -32,10 +32,12 @@
 import java.io.IOException;
 import java.net.URI;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.logging.Logger;
+import java.util.regex.Pattern;
+import java.util.stream.*;
 
 public class IssueUpdater implements RepositoryUpdateConsumer, PullRequestUpdateConsumer {
     private final IssueProject issueProject;
     private final boolean reviewLink;
     private final URI reviewIcon;
@@ -53,10 +55,152 @@
         this.commitIcon = commitIcon;
         this.setFixVersion = setFixVersion;
         this.fixVersion = fixVersion;
     }
 
+    private final static Set<String> primaryTypes = Set.of("Bug", "New Feature", "Enhancement", "Task", "Sub-task");
+
+    private boolean isPrimaryIssue(Issue issue) {
+        var properties = issue.properties();
+        if (!properties.containsKey("type")) {
+            throw new RuntimeException("Unknown type for issue " + issue);
+        }
+        var type = properties.get("type");
+        return primaryTypes.contains(type);
+    }
+
+    private final static Pattern majorVersionPattern = Pattern.compile("([0-9]+)(u[0-9]+)?");
+
+    /**
+     * Extracts the major version part of the string, if possible.
+     */
+    private Optional<String> majorVersion(String version) {
+        var matcher = majorVersionPattern.matcher(version);
+        if (matcher.matches()) {
+            return Optional.of(matcher.group(1));
+        } else {
+            return Optional.empty();
+        }
+    }
+
+    private List<Issue> findBackports(Issue primary) {
+        var links = primary.links();
+        return links.stream()
+                    .filter(l -> l.issue().isPresent())
+                    .map(l -> l.issue().get())
+                    .filter(i -> i.properties().containsKey("type"))
+                    .filter(i -> i.properties().get("type").equals("Backport"))
+                    .collect(Collectors.toList());
+    }
+
+    private boolean isNonScratchVersion(String version) {
+        return !version.startsWith("tbd") && !version.toLowerCase().equals("unknown");
+    }
+
+    /**
+     * Return true if the issue's fixVersionList matches fixVersion.
+     *
+     * fixVersionsList must contain one entry that is an exact match for fixVersions; any
+     * other entries must be scratch values.
+     */
+    private boolean matchVersion(Issue issue, String fixVersion) {
+        var nonScratch = issue.fixVersions().stream()
+                              .filter(this::isNonScratchVersion)
+                              .collect(Collectors.toList());
+        return nonScratch.size() == 1 && nonScratch.get(0).equals(fixVersion);
+    }
+
+    /**
+     * Return True if the issue's fixVersionList is a match for fixVersion, using "-pool" or "-open".
+     *
+     * If fixVersion has a major release of <N>, it matches the fixVersionList has an
+     * <N>-pool or <N>-open entry and all other entries are scratch values.
+     */
+    private boolean matchPoolVersion(Issue issue, String fixVersion) {
+        var majorVersion = majorVersion(fixVersion);
+        if (majorVersion.isEmpty()) {
+            return false;
+        }
+        var poolVersion = majorVersion.get() + "-pool";
+        var openVersion = majorVersion.get() + "-open";
+
+        var nonScratch = issue.fixVersions().stream()
+                              .filter(this::isNonScratchVersion)
+                              .collect(Collectors.toList());
+        return nonScratch.size() == 1 && (nonScratch.get(0).equals(poolVersion) || nonScratch.get(0).equals(openVersion));
+    }
+
+    /**
+     * Return True if fixVersionList is empty or contains only scratch values.
+     */
+    private boolean matchScratchVersion(Issue issue) {
+        var nonScratch = issue.fixVersions().stream()
+                              .filter(this::isNonScratchVersion)
+                              .collect(Collectors.toList());
+        return nonScratch.size() == 0;
+    }
+
+    /**
+     * Create a backport of issue.
+     */
+    private Issue createBackportIssue(Issue primary) {
+        var properties = primary.properties();
+        properties.put("type", "Backport");
+
+        var backport = primary.project().createIssue(primary.title(), primary.body().lines().collect(Collectors.toList()), properties);
+
+        var backportLink = Link.create(backport, "backported by").build();
+        primary.addLink(backportLink);;
+        return backport;
+    }
+
+    /**
+     * Return issue or one of its backports that applies to fixver.
+     *
+     * If the main issue       has the correct fixVersion, use it.
+     * If an existing Backport has the correct fixVersion, use it.
+     * If the main issue       has a matching <N>-pool fixVersion, use it.
+     * If an existing Backport has a matching <N>-pool fixVersion, use it.
+     * If the main issue       has a "scratch" fixVersion, use it.
+     * If an existing Backport has a "scratch" fixVersion, use it.
+     *
+     * Otherwise, create a new Backport.
+     *
+     * A "scratch" fixVersion is empty, "tbd.*", or "unknown".
+     */
+    private Issue findIssue(Issue primary, String fixVersion) {
+        log.info("Searching for properly versioned issue for primary issue " + primary.id());
+        var candidates = Stream.concat(Stream.of(primary), findBackports(primary).stream()).collect(Collectors.toList());
+        candidates.forEach(c -> log.fine("Candidate: " + c.id() + " with versions: " + String.join(",", c.fixVersions())));
+        var matchingVersionIssue = candidates.stream()
+                .filter(i -> matchVersion(i, fixVersion))
+                .findFirst();
+        if (matchingVersionIssue.isPresent()) {
+            log.info("Issue " + matchingVersionIssue.get().id() + " has a correct fixVersion");
+            return matchingVersionIssue.get();
+        }
+
+        var matchingPoolVersionIssue = candidates.stream()
+                .filter(i -> matchPoolVersion(i, fixVersion))
+                .findFirst();
+        if (matchingPoolVersionIssue.isPresent()) {
+            log.info("Issue " + matchingPoolVersionIssue.get().id() + " has a matching pool version");
+            return matchingPoolVersionIssue.get();
+        }
+
+        var matchingScratchVersionIssue = candidates.stream()
+                .filter(this::matchScratchVersion)
+                .findFirst();
+        if (matchingScratchVersionIssue.isPresent()) {
+            log.info("Issue " + matchingScratchVersionIssue.get().id() + " has a scratch fixVersion");
+            return matchingScratchVersionIssue.get();
+        }
+
+        log.info("Creating new backport for " + primary.id());
+        return createBackportIssue(primary);
+    }
+
     @Override
     public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) {
         for (var commit : commits) {
             var commitNotification = CommitFormatters.toTextBrief(repository, commit);
             var commitMessage = CommitMessageParsers.v1.parse(commit);
@@ -66,10 +210,40 @@
                     log.severe("Cannot update issue " + commitIssue.id() + " with commit " + commit.hash().abbreviate()
                                        + " - issue not found in issue project");
                     continue;
                 }
                 var issue = optionalIssue.get();
+
+                // We only update primary type issues
+                if (!isPrimaryIssue(issue)) {
+                    log.severe("Issue " + issue.id() + " isn't of a primary type - ignoring");
+                    // TODO: search for the primary issue
+                    continue;
+                }
+
+                // The actual issue to be updated can change depending on the fix version
+                String requestedVersion = null;
+                if (setFixVersion) {
+                    requestedVersion = fixVersion;
+                    if (requestedVersion == null) {
+                        try {
+                            var conf = localRepository.lines(Path.of(".jcheck/conf"), commit.hash());
+                            if (conf.isPresent()) {
+                                var parsed = JCheckConfiguration.parse(conf.get());
+                                var version = parsed.general().version();
+                                requestedVersion = version.orElse(null);
+                            }
+                        } catch (IOException e) {
+                            throw new RuntimeException(e);
+                        }
+                    }
+
+                    if (requestedVersion != null) {
+                        issue = findIssue(issue, requestedVersion);
+                    }
+                }
+
                 var existingComments = issue.comments();
                 var hashUrl = repository.webUrl(commit.hash()).toString();
                 var alreadyPostedComment = existingComments.stream()
                                                            .filter(comment -> comment.author().equals(issueProject.issueTracker().currentUser()))
                                                            .anyMatch(comment -> comment.body().contains(hashUrl));
@@ -87,25 +261,14 @@
                     }
                     issue.addLink(linkBuilder.build());
                 }
 
                 if (setFixVersion) {
-                    var requestedVersion = fixVersion;
-                    if (requestedVersion == null) {
-                        try {
-                            var conf = localRepository.lines(Path.of(".jcheck/conf"), commit.hash());
-                            if (conf.isPresent()) {
-                                var parsed = JCheckConfiguration.parse(conf.get());
-                                var version = parsed.general().version();
-                                requestedVersion = version.orElse(null);
-                            }
-                        } catch (IOException e) {
-                            throw new RuntimeException(e);
-                        }
-                    }
-
                     if (requestedVersion != null) {
+                        for (var oldVersion : issue.fixVersions()) {
+                            issue.removeFixVersion(oldVersion);
+                        }
                         issue.addFixVersion(requestedVersion);
                     }
                 }
             }
         }
@@ -157,8 +320,9 @@
         if (realIssue.isEmpty()) {
             log.warning("Pull request " + pr + " removed unknown issue: " + issue.id());
             return;
         }
 
-        realIssue.get().removeLink(pr.webUrl());
+        var link = Link.create(pr.webUrl(), "").build();
+        realIssue.get().removeLink(link);
     }
 }
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -913,11 +913,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in a comment
@@ -929,21 +929,18 @@
             // And in a link
             var links = issue.links();
             assertEquals(1, links.size());
             var link = links.get(0);
             assertEquals(commitIcon, link.iconUrl().orElseThrow());
-            assertEquals("Commit", link.title());
-            assertEquals(repo.webUrl(editHash), link.uri());
+            assertEquals("Commit", link.title().orElseThrow());
+            assertEquals(repo.webUrl(editHash), link.uri().orElseThrow());
 
             // As well as a fixVersion
             var fixVersions = issue.fixVersions();
             assertEquals(1, fixVersions.size());
             var fixVersion = fixVersions.get(0);
             assertEquals("0.1", fixVersion);
-
-            // There should be no open issues
-            assertEquals(0, issueProject.issues().size());
         }
     }
 
     @Test
     void testIssueNoVersion(TestInfo testInfo) throws IOException {
@@ -968,11 +965,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in a comment
@@ -982,13 +979,10 @@
             assertTrue(comment.body().contains(editHash.abbreviate()));
 
             // But not in the fixVersion
             var fixVersions = issue.fixVersions();
             assertEquals(0, fixVersions.size());
-
-            // There should be no open issues
-            assertEquals(0, issueProject.issues().size());
         }
     }
 
     @Test
     void testIssueConfiguredVersionNoCommit(TestInfo testInfo) throws IOException {
@@ -1013,11 +1007,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should not reflected in a comment
@@ -1033,13 +1027,10 @@
             assertEquals("2.0", fixVersion);
 
             // And no commit link
             var links = issue.links();
             assertEquals(0, links.size());
-
-            // There should be no open issues
-            assertEquals(0, issueProject.issues().size());
         }
     }
 
     @Test
     void testIssueIdempotence(TestInfo testInfo) throws IOException {
@@ -1067,11 +1058,11 @@
 
             // Save the state
             var historyState = localRepo.fetch(repo.url(), "history");
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in a comment
@@ -1083,12 +1074,12 @@
             // And in a link
             var links = issue.links();
             assertEquals(1, links.size());
             var link = links.get(0);
             assertEquals(commitIcon, link.iconUrl().orElseThrow());
-            assertEquals("Commit", link.title());
-            assertEquals(repo.webUrl(editHash), link.uri());
+            assertEquals("Commit", link.title().orElseThrow());
+            assertEquals(repo.webUrl(editHash), link.uri().orElseThrow());
 
             // As well as a fixVersion
             var fixVersions = issue.fixVersions();
             assertEquals(1, fixVersions.size());
             var fixVersion = fixVersions.get(0);
@@ -1103,13 +1094,141 @@
             // There should be no new comments, links or fixVersions
             var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
             assertEquals(1, updatedIssue.comments().size());
             assertEquals(1, updatedIssue.links().size());
             assertEquals(1, updatedIssue.fixVersions().size());
+        }
+    }
+
+    @Test
+    void testIssuePoolVersion(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of("appendable.txt"), Set.of(), null);
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var updater = new IssueUpdater(issueProject, false, null, false, null, true, "12u14");
+            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
+                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Create an issue and commit a fix
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            issue.addFixVersion("12-pool");
+            issue.addFixVersion("tbd13");
+            issue.addFixVersion("unknown");
+
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
+            localRepo.push(editHash, repo.url(), "master");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The fixVersion should have been updated
+            var fixVersions = issue.fixVersions();
+            assertEquals(1, fixVersions.size());
+            assertEquals("12u14", fixVersions.get(0));
+        }
+    }
+
+    @Test
+    void testIssuePoolOpenVersion(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of("appendable.txt"), Set.of(), null);
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var updater = new IssueUpdater(issueProject, false, null, false, null, true, "12u14");
+            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
+                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Create an issue and commit a fix
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            issue.addFixVersion("12-open");
+            issue.addFixVersion("tbd13");
+            issue.addFixVersion("unknown");
+
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
+            localRepo.push(editHash, repo.url(), "master");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The fixVersion should have been updated
+            var fixVersions = issue.fixVersions();
+            assertEquals(1, fixVersions.size());
+            assertEquals("12u14", fixVersions.get(0));
+        }
+    }
+
+    @Test
+    void testIssueBackport(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of("appendable.txt"), Set.of(), null);
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var updater = new IssueUpdater(issueProject, false, null, false, null, true, "12.0.2");
+            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
+                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Create an issue and commit a fix
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            issue.addFixVersion("13.0.1");
+
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
+            localRepo.push(editHash, repo.url(), "master");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The fixVersion should not have been updated
+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
+            var fixVersions = updatedIssue.fixVersions();
+            assertEquals(1, fixVersions.size());
+            assertEquals("13.0.1", fixVersions.get(0));
+
+            // There should be a link
+            var links = updatedIssue.links();
+            assertEquals(1, links.size());
+            var link = links.get(0);
+            var backport = link.issue().orElseThrow();
 
-            // There should be no open issues
-            assertEquals(0, issueProject.issues().size());
+            // The backport issue should have a correct fixVersion
+            var backportFixVersions = backport.fixVersions();
+            assertEquals(1, backportFixVersions.size());
+            assertEquals("12.0.2", backportFixVersions.get(0));
+            assertEquals("Backport", backport.properties().get("type"));
         }
     }
 
     @Test
     void testPullRequest(TestInfo testInfo) throws IOException {
@@ -1136,11 +1255,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and a pull request to fix it
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix that issue");
             localRepo.push(editHash, repo.url(), "edit", true);
             var pr = credentials.createPullRequest(repo, "edit", "master", issue.id() + ": Fix that issue");
             pr.setBody("\n\n## Issue\n[" + issue.id() + "](http://www.test.test/): The issue");
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -1168,37 +1287,37 @@
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The issue should now contain a link to the PR
             links = issue.links();
             assertEquals(1, links.size());
-            assertEquals(pr.webUrl(), links.get(0).uri());
+            assertEquals(pr.webUrl(), links.get(0).uri().orElseThrow());
             assertEquals(reviewIcon, links.get(0).iconUrl().orElseThrow());
 
             // Add another issue
-            var issue2 = issueProject.createIssue("This is another issue", List.of("Yes indeed"));
+            var issue2 = issueProject.createIssue("This is another issue", List.of("Yes indeed"), Map.of("type", "Enhancement"));
             pr.setBody("\n\n## Issues\n[" + issue.id() + "](http://www.test.test/): The issue\n[" + issue2.id() +
                                "](http://www.test2.test/): The second issue");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Both issues should contain a link to the PR
             var links1 = issue.links();
             assertEquals(1, links1.size());
-            assertEquals(pr.webUrl(), links1.get(0).uri());
+            assertEquals(pr.webUrl(), links1.get(0).uri().orElseThrow());
             var links2 = issue2.links();
             assertEquals(1, links2.size());
-            assertEquals(pr.webUrl(), links2.get(0).uri());
+            assertEquals(pr.webUrl(), links2.get(0).uri().orElseThrow());
 
             // Drop the first one
             pr.setBody("\n\n## Issue\n[" + issue2.id() + "](http://www.test2.test/): That other issue");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Only the second issue should now contain a link to the PR
             links1 = issue.links();
             assertEquals(0, links1.size());
             links2 = issue2.links();
             assertEquals(1, links2.size());
-            assertEquals(pr.webUrl(), links2.get(0).uri());
+            assertEquals(pr.webUrl(), links2.get(0).uri().orElseThrow());
         }
     }
 
     @Test
     void testPullRequestNoReview(TestInfo testInfo) throws IOException {
@@ -1224,11 +1343,11 @@
                                           Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")));
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and a pull request to fix it
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix that issue");
             localRepo.push(editHash, repo.url(), "edit", true);
             var pr = credentials.createPullRequest(repo, "edit", "master", issue.id() + ": Fix that issue");
             pr.setBody("\n\n## Issue\n[" + issue.id() + "](http://www.test.test/): The issue");
             TestBotRunner.runPeriodicItems(notifyBot);
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -806,11 +806,11 @@
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of("appendable.txt"),
                                                      Set.of("issues"), null);
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.url(), "master", true);
 
-            var issue1 = issues.createIssue("My first issue", List.of("Hello"));
+            var issue1 = issues.createIssue("My first issue", List.of("Hello"), Map.of());
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
             localRepo.push(editHash, author.url(), "edit", true);
             var pr = credentials.createPullRequest(author, "master", "edit", issue1.id() + ": This is a pull request");
@@ -826,11 +826,11 @@
 
             // And the body should contain the issue title
             assertTrue(pr.body().contains("My first issue"));
 
             // Change the issue
-            var issue2 = issues.createIssue("My second issue", List.of("Body"));
+            var issue2 = issues.createIssue("My second issue", List.of("Body"), Map.of());
             pr.setTitle(issue2.id() + ": This is a pull request");
 
             // Check the status again
             TestBotRunner.runPeriodicItems(checkBot);
 
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java
@@ -250,22 +250,22 @@
             localRepo.push(masterHash, author.url(), "master", true);
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
             localRepo.push(editHash, author.url(), "edit", true);
-            var issue1 = issues.createIssue("First", List.of("Hello"));
+            var issue1 = issues.createIssue("First", List.of("Hello"), Map.of());
             var pr = credentials.createPullRequest(author, "master", "edit",
                                                    issue1.id() + ": This is a pull request");
 
             // First check
             TestBotRunner.runPeriodicItems(prBot);
             assertTrue(pr.body().contains(issue1.id()));
             assertTrue(pr.body().contains("First"));
             assertTrue(pr.body().contains("## Issue\n"));
 
             // Add an extra issue
-            var issue2 = issues.createIssue("Second", List.of("There"));
+            var issue2 = issues.createIssue("Second", List.of("There"), Map.of());
             pr.addComment("/solves " + issue2.id() + ": Description");
 
             // Check that the body was updated
             TestBotRunner.runPeriodicItems(prBot);
             TestBotRunner.runPeriodicItems(prBot);
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
@@ -237,11 +237,11 @@
     public void addLink(Link link) {
 
     }
 
     @Override
-    public void removeLink(URI uri) {
+    public void removeLink(Link link) {
 
     }
 
     @Override
     public List<String> fixVersions() {
@@ -256,10 +256,25 @@
     @Override
     public void removeFixVersion(String fixVersion) {
 
     }
 
+    @Override
+    public Map<String, String> properties() {
+        return null;
+    }
+
+    @Override
+    public void setProperty(String name, String value) {
+
+    }
+
+    @Override
+    public void removePropery(String name) {
+
+    }
+
     @Override
     public void setTitle(String title) {
     }
 
     @Override
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -517,11 +517,11 @@
     public void addLink(Link link) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public void removeLink(URI uri) {
+    public void removeLink(Link link) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
     public List<String> fixVersions() {
@@ -535,6 +535,21 @@
 
     @Override
     public void removeFixVersion(String fixVersion) {
         throw new RuntimeException("not implemented yet");
     }
+
+    @Override
+    public Map<String, String> properties() {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void setProperty(String name, String value) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void removePropery(String name) {
+        throw new RuntimeException("not implemented yet");
+    }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
@@ -646,11 +646,11 @@
     public void addLink(Link link) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
-    public void removeLink(URI uri) {
+    public void removeLink(Link link) {
         throw new RuntimeException("not implemented yet");
     }
 
     @Override
     public List<String> fixVersions() {
@@ -664,6 +664,21 @@
 
     @Override
     public void removeFixVersion(String fixVersion) {
         throw new RuntimeException("not implemented yet");
     }
+
+    @Override
+    public Map<String, String> properties() {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void setProperty(String name, String value) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void removePropery(String name) {
+        throw new RuntimeException("not implemented yet");
+    }
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
@@ -150,13 +150,19 @@
 
     List<Link> links();
 
     void addLink(Link link);
 
-    void removeLink(URI uri);
+    void removeLink(Link link);
 
     List<String> fixVersions();
 
     void addFixVersion(String fixVersion);
 
     void removeFixVersion(String fixVersion);
+
+    Map<String, String> properties();
+
+    void setProperty(String name, String value);
+
+    void removePropery(String name);
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueLinkBuilder.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueLinkBuilder.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueLinkBuilder.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker;
+
+public class IssueLinkBuilder {
+    private final Issue linked;
+    private final String relationship;
+
+    IssueLinkBuilder(Issue issue, String relationship) {
+        this.linked = issue;
+        this.relationship = relationship;
+    }
+
+    public Link build() {
+        return new Link(null, null, relationship, null, null, null, null, null, false, linked);
+    }
+}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java
@@ -26,9 +26,9 @@
 import java.util.*;
 
 public interface IssueProject {
     IssueTracker issueTracker();
     URI webUrl();
-    Issue createIssue(String title, List<String> body);
+    Issue createIssue(String title, List<String> body, Map<String, String> properties);
     Optional<Issue> issue(String id);
     List<Issue> issues();
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Link.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Link.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Link.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Link.java
@@ -33,33 +33,43 @@
     private final URI iconUrl;
     private final String iconTitle;
     private final URI statusIconUrl;
     private final String statusIconTitle;
     private final boolean resolved;
+    private final Issue linked;
 
-    Link(URI uri, String title, String relationship, String summary, URI iconUrl, String iconTitle, URI statusIconUrl, String statusIconTitle, boolean resolved) {
+    Link(URI uri, String title, String relationship, String summary, URI iconUrl, String iconTitle, URI statusIconUrl, String statusIconTitle, boolean resolved, Issue linked) {
         this.uri = uri;
         this.title = title;
         this.relationship = relationship;
         this.summary = summary;
         this.iconUrl = iconUrl;
         this.iconTitle = iconTitle;
         this.statusIconUrl = statusIconUrl;
         this.statusIconTitle = statusIconTitle;
         this.resolved = resolved;
+        this.linked = linked;
     }
 
-    public static LinkBuilder create(URI uri, String title) {
-        return new LinkBuilder(uri, title);
+    public static WebLinkBuilder create(URI uri, String title) {
+        return new WebLinkBuilder(uri, title);
     }
 
-    public URI uri() {
-        return uri;
+    public static IssueLinkBuilder create(Issue issue, String relationship) {
+        return new IssueLinkBuilder(issue, relationship);
     }
 
-    public String title() {
-        return title;
+    public Optional<URI> uri() {
+        return Optional.ofNullable(uri);
+    }
+
+    public Optional<String> title() {
+        return Optional.ofNullable(title);
+    }
+
+    public Optional<Issue> issue() {
+        return Optional.ofNullable(linked);
     }
 
     public Optional<String> relationship() {
         return Optional.ofNullable(relationship);
     }
@@ -99,10 +109,11 @@
         Link link = (Link) o;
         return resolved == link.resolved &&
                 uri.equals(link.uri) &&
                 title.equals(link.title) &&
                 Objects.equals(relationship, link.relationship) &&
+                Objects.equals(linked, link.linked) &&
                 Objects.equals(summary, link.summary) &&
                 Objects.equals(iconUrl, link.iconUrl) &&
                 Objects.equals(iconTitle, link.iconTitle) &&
                 Objects.equals(statusIconUrl, link.statusIconUrl) &&
                 Objects.equals(statusIconTitle, link.statusIconTitle);
@@ -117,10 +128,11 @@
     public String toString() {
         return "Link{" +
                 "uri=" + uri +
                 ", title='" + title + '\'' +
                 ", relationship='" + relationship + '\'' +
+                ", linked='" + linked + '\'' +
                 ", summary='" + summary + '\'' +
                 ", iconUrl=" + iconUrl +
                 ", iconTitle='" + iconTitle + '\'' +
                 ", statusIconUrl=" + statusIconUrl +
                 ", statusIconTitle='" + statusIconTitle + '\'' +
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/LinkBuilder.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/LinkBuilder.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/LinkBuilder.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.issuetracker;
-
-import java.net.URI;
-
-public class LinkBuilder {
-    private final URI uri;
-    private final String title;
-
-    private String relationship;
-    private String summary;
-    private URI iconUrl;
-    private String iconTitle;
-    private URI statusIconUrl;
-    private String statusIconTitle;
-    private boolean resolved;
-
-    LinkBuilder(URI uri, String title) {
-        this.uri = uri;
-        this.title = title;
-    }
-
-    public LinkBuilder relationship(String relationship) {
-        this.relationship = relationship;
-        return this;
-    }
-
-    public LinkBuilder summary(String summary) {
-        this.summary = summary;
-        return this;
-    }
-
-    public LinkBuilder iconUrl(URI iconUrl) {
-        this.iconUrl = iconUrl;
-        return this;
-    }
-
-    public LinkBuilder iconTitle(String iconTitle) {
-        this.iconTitle = iconTitle;
-        return this;
-    }
-
-    public LinkBuilder statusIconUrl(URI statusIconUrl) {
-        this.statusIconUrl = statusIconUrl;
-        return this;
-    }
-
-    public LinkBuilder statusIconTitle(String statusIconTitle) {
-        this.statusIconTitle = statusIconTitle;
-        return this;
-    }
-
-    public LinkBuilder resolved(boolean resolved) {
-        this.resolved = resolved;
-        return this;
-    }
-
-    public Link build() {
-        return new Link(uri, title, relationship, summary, iconUrl, iconTitle, statusIconUrl, statusIconTitle, resolved);
-    }
-}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/WebLinkBuilder.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/WebLinkBuilder.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/WebLinkBuilder.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker;
+
+import java.net.URI;
+
+public class WebLinkBuilder {
+    private final URI uri;
+    private final String title;
+
+    private String relationship;
+    private String summary;
+    private URI iconUrl;
+    private String iconTitle;
+    private URI statusIconUrl;
+    private String statusIconTitle;
+    private boolean resolved;
+
+    WebLinkBuilder(URI uri, String title) {
+        this.uri = uri;
+        this.title = title;
+    }
+
+    public WebLinkBuilder relationship(String relationship) {
+        this.relationship = relationship;
+        return this;
+    }
+
+    public WebLinkBuilder summary(String summary) {
+        this.summary = summary;
+        return this;
+    }
+
+    public WebLinkBuilder iconUrl(URI iconUrl) {
+        this.iconUrl = iconUrl;
+        return this;
+    }
+
+    public WebLinkBuilder iconTitle(String iconTitle) {
+        this.iconTitle = iconTitle;
+        return this;
+    }
+
+    public WebLinkBuilder statusIconUrl(URI statusIconUrl) {
+        this.statusIconUrl = statusIconUrl;
+        return this;
+    }
+
+    public WebLinkBuilder statusIconTitle(String statusIconTitle) {
+        this.statusIconTitle = statusIconTitle;
+        return this;
+    }
+
+    public WebLinkBuilder resolved(boolean resolved) {
+        this.resolved = resolved;
+        return this;
+    }
+
+    public Link build() {
+        return new Link(uri, title, relationship, summary, iconUrl, iconTitle, statusIconUrl, statusIconTitle, resolved, null);
+    }
+}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
@@ -30,11 +30,11 @@
 import java.net.URI;
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
 import java.util.*;
 import java.util.logging.Logger;
-import java.util.stream.Collectors;
+import java.util.stream.*;
 
 public class JiraIssue implements Issue {
     private final JiraProject jiraProject;
     private final RestRequest request;
     private final JSONValue json;
@@ -331,26 +331,36 @@
     }
 
     @Override
     public List<Link> links() {
         var result = request.get("/remotelink").execute();
-        return result.stream()
-                     .map(JSONValue::asObject)
-                     .filter(obj -> obj.get("globalId").asString().startsWith("skaralink="))
-                     .map(this::parseLink)
-                     .collect(Collectors.toList());
+        var links = result.stream()
+                          .map(JSONValue::asObject)
+                          .filter(obj -> obj.get("globalId").asString().startsWith("skaralink="))
+                          .map(this::parseLink);
+        if (json.get("fields").contains("issuelinks")) {
+            var issueLinks = json.get("fields").get("issuelinks").stream()
+                                 .map(JSONValue::asObject)
+                                 .map(o -> Link.create(o.contains("inwardIssue") ? jiraProject.issue(o.get("inwardIssue").get("key").asString()).orElseThrow() :
+                                                               jiraProject.issue(o.get("outwardIssue").get("key").asString()).orElseThrow(),
+                                                       o.contains("inwardIssue") ? o.get("type").get("inward").asString() :
+                                                               o.get("type").get("outward").asString())
+                                               .build());
+
+            links = Stream.concat(issueLinks, links);
+        }
+        return links.collect(Collectors.toList());
     }
 
-    @Override
-    public void addLink(Link link) {
+    private void addWebLink(Link link) {
         if (!secure) {
             log.warning("Ignoring attempt to add link on issue with wrong security level");
             return;
         }
 
-        var query = JSON.object().put("globalId", "skaralink=" + link.uri().toString());
-        var object = JSON.object().put("url", link.uri().toString()).put("title", link.title());
+        var query = JSON.object().put("globalId", "skaralink=" + link.uri().orElseThrow().toString());
+        var object = JSON.object().put("url", link.uri().toString()).put("title", link.title().orElseThrow());
         var status = JSON.object().put("resolved", link.resolved());
         var icon = JSON.object();
         var statusIcon = JSON.object();
 
         query.put("object", object);
@@ -368,17 +378,71 @@
         request.post("/remotelink")
                .body(query)
                .execute();
     }
 
+    private boolean matchLinkType(JiraLinkType jiraLinkType, Link link) {
+        var relationship = link.relationship().orElseThrow().toLowerCase();
+        return (jiraLinkType.inward().toLowerCase().equals(relationship)) ||
+                (jiraLinkType.outward().toLowerCase().equals(relationship));
+    }
+
+    private boolean isOutwardLink(JiraLinkType jiraLinkType, Link link) {
+        var relationship = link.relationship().orElseThrow().toLowerCase();
+        return jiraLinkType.outward().toLowerCase().equals(relationship);
+    }
+
+    private void addIssueLink(Link link) {
+        var linkType = jiraProject.linkTypes().stream()
+                                  .filter(lt -> matchLinkType(lt, link))
+                                  .findAny().orElseThrow();
+
+        var query = JSON.object()
+                        .put("type", JSON.object().put("name", linkType.name()));
+        if (isOutwardLink(linkType, link)) {
+            query.put("inwardIssue", JSON.object().put("key", id()));
+            query.put("outwardIssue", JSON.object().put("key", link.issue().orElseThrow().id()));
+        } else {
+            query.put("outwardIssue", JSON.object().put("key", id()));
+            query.put("inwardIssue", JSON.object().put("key", link.issue().orElseThrow().id()));
+        }
+
+        jiraProject.executeLinkQuery(query);
+    }
+
     @Override
-    public void removeLink(URI uri) {
+    public void addLink(Link link) {
+        if (link.uri().isPresent() && link.title().isPresent()) {
+            addWebLink(link);
+        } else if (link.issue().isPresent() && link.relationship().isPresent()) {
+            addIssueLink(link);
+        } else {
+            throw new IllegalArgumentException("Unknown type of link: " + link);
+        }
+    }
+
+    private void removeWebLink(Link link) {
         request.delete("/remotelink")
-               .param("globalId", "skaralink=" + uri.toString())
+               .param("globalId", "skaralink=" + link.uri().orElseThrow().toString())
                .execute();
     }
 
+    private void removeIssueLink(Link link) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void removeLink(Link link) {
+        if (link.uri().isPresent()) {
+            removeWebLink(link);
+        } else if (link.issue().isPresent() && link.relationship().isPresent()) {
+            removeIssueLink(link);
+        } else {
+            throw new IllegalArgumentException("Unknown type of link: " + link);
+        }
+    }
+
     @Override
     public List<String> fixVersions() {
         return json.get("fields").get("fixVersions").stream()
                    .map(obj -> obj.get("id").asString())
                    .map(id -> jiraProject.fixVersionNameFromId(id).orElseThrow())
@@ -402,6 +466,23 @@
                                            .put("fixVersions", JSON.array().add(JSON.object()
                                                                                     .put("remove", JSON.object()
                                                                                                     .put("id", jiraProject.fixVersionIdFromName(fixVersion).orElseThrow())))));
         request.put("").body(query).execute();
     }
+
+    @Override
+    public Map<String, String> properties() {
+        var ret = new HashMap<String, String>();
+        ret.put("type", json.get("fields").get("issuetype").get("name").asString());
+        return ret;
+    }
+
+    @Override
+    public void setProperty(String name, String value) {
+
+    }
+
+    @Override
+    public void removePropery(String name) {
+
+    }
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraLinkType.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraLinkType.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraLinkType.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker.jira;
+
+public class JiraLinkType {
+    private final String name;
+    private final String inward;
+    private final String outward;
+
+    JiraLinkType(String name, String inward, String outward) {
+        this.name = name;
+        this.inward = inward;
+        this.outward = outward;
+    }
+
+    String name() {
+        return name;
+    }
+
+    String inward() {
+        return inward;
+    }
+
+    String outward() {
+        return outward;
+    }
+}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
@@ -26,20 +26,24 @@
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.network.*;
 
 import java.net.URI;
 import java.util.*;
+import java.util.logging.Logger;
 import java.util.stream.Collectors;
 
 public class JiraProject implements IssueProject {
     private final JiraHost jiraHost;
     private final String projectName;
     private final RestRequest request;
 
     private JSONObject projectMetadataCache = null;
     private Map<String, String> versionNameToId = null;
     private Map<String, String> versionIdToName = null;
+    private List<JiraLinkType> linkTypes = null;
+
+    private final Logger log = Logger.getLogger("org.openjdk.skara.issuetracker.jira");
 
     JiraProject(JiraHost host, RestRequest request, String projectName) {
         this.jiraHost = host;
         this.projectName = projectName;
         this.request = request;
@@ -87,10 +91,33 @@
     Optional<String> fixVersionIdFromName(String name) {
         populateVersionsIfNeeded();
         return Optional.ofNullable(versionNameToId.getOrDefault(name, null));
     }
 
+    private void populateLinkTypesIfNeeded() {
+        if (linkTypes != null) {
+            return;
+        }
+
+        linkTypes = request.get("issueLinkType").execute()
+                           .get("issueLinkTypes").stream()
+                           .map(JSONValue::asObject)
+                           .map(o -> new JiraLinkType(o.get("name").asString(),
+                                                      o.get("inward").asString(),
+                                                      o.get("outward").asString()))
+                           .collect(Collectors.toList());
+    }
+
+    List<JiraLinkType> linkTypes() {
+        populateLinkTypesIfNeeded();
+        return linkTypes;
+    }
+
+    void executeLinkQuery(JSONObject query) {
+        request.post("issueLink").body(query).execute();
+    }
+
     private String projectId() {
         return project().get("id").asString();
     }
 
     private String defaultIssueType() {
@@ -116,29 +143,58 @@
     public URI webUrl() {
         return URIBuilder.base(jiraHost.getUri()).setPath("/projects/" + projectName).build();
     }
 
     @Override
-    public Issue createIssue(String title, List<String> body) {
+    public Issue createIssue(String title, List<String> body, Map<String, String> properties) {
         var query = JSON.object();
         var fields = JSON.object()
                          .put("project", JSON.object()
                                              .put("id", projectId()))
-                         .put("issuetype", JSON.object()
-                                               .put("id", defaultIssueType()))
                          .put("components", JSON.array()
                                                 .add(JSON.object().put("id", defaultComponent())))
                          .put("summary", title)
                          .put("description", String.join("\n", body));
-        query.put("fields", fields);
 
+        var fixupFields = JSON.object();
+        for (var property : properties.entrySet()) {
+            switch (property.getKey()) {
+                case "type":
+                    if (!property.getValue().equals("Backport")) {
+                        fields.put("issuetype", JSON.object().put("id", issueTypes().get(property.getValue())));
+                    } else {
+                        fixupFields.put("issuetype", JSON.object().put("id", issueTypes().get(property.getValue())));
+                    }
+                    break;
+                default:
+                    log.warning("Unknown issue property: " + property.getKey());
+                    break;
+            }
+        }
+
+        if (!fields.contains("issuetype")) {
+            fields.put("issuetype", JSON.object().put("id", defaultIssueType()));
+        }
+        query.put("fields", fields);
         jiraHost.securityLevel().ifPresent(securityLevel -> fields.put("security", JSON.object()
                                                                                        .put("id", securityLevel)));
         var data = request.post("issue")
                           .body(query)
                           .execute();
 
+        // Workaround - some fields cannot be set immediately
+        if (properties.containsKey("type") && properties.get("type").equals("Backport")) {
+            var id = data.get("key").asString();
+            if (id.indexOf('-') < 0) {
+                id = projectName.toUpperCase() + "-" + id;
+            }
+            var updateQuery = JSON.object().put("fields", fixupFields);
+            request.put("issue/" + id)
+                   .body(updateQuery)
+                   .execute();
+        }
+
         return issue(data.get("key").asString()).orElseThrow();
     }
 
     @Override
     public Optional<Issue> issue(String id) {
diff a/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java b/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
--- a/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
+++ b/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
@@ -70,12 +70,10 @@
             assertEquals(1, updated.comments().size());
             assertEquals("Updated title", updated.title());
             assertEquals("Now it is updated", updated.comments().get(0).body());
 
             issue.setState(Issue.State.RESOLVED);
-            var issues = project.issues();
-            assertEquals(0, issues.size());
         }
     }
 
     @Test
     void addLink(TestInfo info) throws IOException {
@@ -101,11 +99,11 @@
 
             var links = issue.links();
             assertEquals(1, links.size());
             assertEquals(link, links.get(0));
 
-            issue.removeLink(URI.create("http://www.example.com/abc"));
+            issue.removeLink(link);
             links = issue.links();
             assertEquals(0, links.size());
         }
     }
 }
diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -25,11 +25,10 @@
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.network.URIBuilder;
-import org.openjdk.skara.proxy.HttpProxy;
 import org.openjdk.skara.vcs.*;
 
 import org.junit.jupiter.api.TestInfo;
 
 import java.io.*;
@@ -142,18 +141,20 @@
         }
     }
 
     private static class JiraCredentials implements Credentials {
         private final JSONObject config;
+        private final TestCredentials repoCredentials;
 
         JiraCredentials(JSONObject config) {
             this.config = config;
+            this.repoCredentials = new TestCredentials();
         }
 
         @Override
         public Forge createRepositoryHost(int userIndex) {
-            throw new RuntimeException("not supported");
+            return repoCredentials.createRepositoryHost(userIndex);
         }
 
         @Override
         public IssueTracker createIssueHost(int userIndex) {
             var hostUri = URIBuilder.base(config.get("host").asString()).build();
@@ -163,11 +164,11 @@
             return IssueTracker.from("jira", hostUri, pat, config);
         }
 
         @Override
         public HostedRepository getHostedRepository(Forge host) {
-            return host.repository(config.get("project").asString()).orElseThrow();
+            return repoCredentials.getHostedRepository(host);
         }
 
         @Override
         public IssueProject getIssueProject(IssueTracker host) {
             return host.project(config.get("project").asString());
@@ -361,11 +362,11 @@
     public PullRequest createPullRequest(HostedRepository hostedRepository, String targetRef, String sourceRef, String title) {
         return createPullRequest(hostedRepository, targetRef, sourceRef, title, false);
     }
 
     public Issue createIssue(IssueProject issueProject, String title) {
-        var issue = issueProject.createIssue(title, List.of());
+        var issue = issueProject.createIssue(title, List.of(), Map.of());
         issuesToBeClosed.add(issue);
         return issue;
     }
 
     public CensusBuilder getCensusBuilder() {
diff a/test/src/main/java/org/openjdk/skara/test/IssueData.java b/test/src/main/java/org/openjdk/skara/test/IssueData.java
--- a/test/src/main/java/org/openjdk/skara/test/IssueData.java
+++ b/test/src/main/java/org/openjdk/skara/test/IssueData.java
@@ -35,8 +35,9 @@
     final List<Comment> comments = new ArrayList<>();
     final Set<String> labels = new HashSet<>();
     final List<HostUser> assignees = new ArrayList<>();
     final List<Link> links = new ArrayList<>();
     final Set<String> fixVersions = new HashSet<>();
+    final Map<String, String> properties = new HashMap<>();
     ZonedDateTime created = ZonedDateTime.now();
     ZonedDateTime lastUpdate = created;
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -160,13 +160,13 @@
                                 .map(pr -> getPullRequest(repository, pr.getKey()))
                                 .filter(TestPullRequest::isOpen)
                                 .collect(Collectors.toList());
     }
 
-    TestIssue createIssue(TestIssueProject issueProject, String title, List<String> body) {
+    TestIssue createIssue(TestIssueProject issueProject, String title, List<String> body, Map<String, String> properties) {
         var id = issueProject.projectName().toUpperCase() + "-" + (data.issues.size() + 1);
-        var issue = TestIssue.createNew(issueProject, id, title, body);
+        var issue = TestIssue.createNew(issueProject, id, title, body, properties);
         data.issues.put(id ,issue);
         return issue;
     }
 
     TestIssue getIssue(TestIssueProject issueProject, String id) {
diff a/test/src/main/java/org/openjdk/skara/test/TestIssue.java b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssue.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
@@ -43,14 +43,15 @@
         this.author = author;;
         this.user = user;
         this.data = data;
     }
 
-    static TestIssue createNew(TestIssueProject issueProject, String id, String title, List<String> body) {
+    static TestIssue createNew(TestIssueProject issueProject, String id, String title, List<String> body, Map<String, String> properties) {
         var data = new IssueData();
         data.title = title;
         data.body = String.join("\n", body);
+        data.properties.putAll(properties);
         var issue = new TestIssue(issueProject, id, issueProject.issueTracker().currentUser(), issueProject.issueTracker().currentUser(), data);
         return issue;
     }
 
     static TestIssue createFrom(TestIssueProject issueProject, TestIssue other) {
@@ -185,18 +186,45 @@
         return data.links;
     }
 
     @Override
     public void addLink(Link link) {
-        removeLink(link.uri());
-        data.links.add(link);
+        if (link.uri().isPresent()) {
+            removeLink(link);
+            data.links.add(link);
+        } else if (link.issue().isPresent()) {
+            var existing = data.links.stream()
+                                     .filter(l -> l.issue().equals(link.issue()))
+                                     .findAny();
+            existing.ifPresent(data.links::remove);
+            data.links.add(link);
+            if (existing.isEmpty()) {
+                var reverse = Link.create(this, link.relationship().get()).build();
+                link.issue().get().addLink(reverse);
+            }
+        } else {
+            throw new IllegalArgumentException("Can't add unknown link type: " + link);
+        }
         data.lastUpdate = ZonedDateTime.now();
     }
 
     @Override
-    public void removeLink(URI uri) {
-        data.links.removeIf(link -> link.uri().equals(uri));
+    public void removeLink(Link link) {
+        if (link.uri().isPresent()) {
+            data.links.removeIf(l -> l.uri().equals(link.uri()));
+        } else if (link.issue().isPresent()) {
+            var existing = data.links.stream()
+                                     .filter(l -> l.issue().equals(link.issue()))
+                                     .findAny();
+            if (existing.isPresent()) {
+                data.links.remove(existing.get());
+                var reverse = Link.create(this, "").build();
+                link.issue().get().removeLink(reverse);
+            }
+        } else {
+            throw new IllegalArgumentException("Can't remove unknown link type: " + link);
+        }
         data.lastUpdate = ZonedDateTime.now();
     }
 
     @Override
     public List<String> fixVersions() {
@@ -212,6 +240,23 @@
     @Override
     public void removeFixVersion(String fixVersion) {
         data.fixVersions.remove(fixVersion);
         data.lastUpdate = ZonedDateTime.now();
     }
+
+    @Override
+    public Map<String, String> properties() {
+        return data.properties;
+    }
+
+    @Override
+    public void setProperty(String name, String value) {
+        data.properties.put(name, value);
+        data.lastUpdate = ZonedDateTime.now();
+    }
+
+    @Override
+    public void removePropery(String name) {
+        data.properties.remove(name);
+        data.lastUpdate = ZonedDateTime.now();
+    }
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java b/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
@@ -50,12 +50,12 @@
         this.host = host;
         this.projectName = projectName;
     }
 
     @Override
-    public Issue createIssue(String title, List<String> body) {
-        return host.createIssue(this, title, body);
+    public Issue createIssue(String title, List<String> body, Map<String, String> properties) {
+        return host.createIssue(this, title, body, properties);
     }
 
     @Override
     public Optional<Issue> issue(String id) {
         if (id.indexOf('-') < 0) {
