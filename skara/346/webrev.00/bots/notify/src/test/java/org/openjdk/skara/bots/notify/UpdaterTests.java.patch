diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -913,11 +913,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in a comment
@@ -929,21 +929,18 @@
             // And in a link
             var links = issue.links();
             assertEquals(1, links.size());
             var link = links.get(0);
             assertEquals(commitIcon, link.iconUrl().orElseThrow());
-            assertEquals("Commit", link.title());
-            assertEquals(repo.webUrl(editHash), link.uri());
+            assertEquals("Commit", link.title().orElseThrow());
+            assertEquals(repo.webUrl(editHash), link.uri().orElseThrow());
 
             // As well as a fixVersion
             var fixVersions = issue.fixVersions();
             assertEquals(1, fixVersions.size());
             var fixVersion = fixVersions.get(0);
             assertEquals("0.1", fixVersion);
-
-            // There should be no open issues
-            assertEquals(0, issueProject.issues().size());
         }
     }
 
     @Test
     void testIssueNoVersion(TestInfo testInfo) throws IOException {
@@ -968,11 +965,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in a comment
@@ -982,13 +979,10 @@
             assertTrue(comment.body().contains(editHash.abbreviate()));
 
             // But not in the fixVersion
             var fixVersions = issue.fixVersions();
             assertEquals(0, fixVersions.size());
-
-            // There should be no open issues
-            assertEquals(0, issueProject.issues().size());
         }
     }
 
     @Test
     void testIssueConfiguredVersionNoCommit(TestInfo testInfo) throws IOException {
@@ -1013,11 +1007,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should not reflected in a comment
@@ -1033,13 +1027,10 @@
             assertEquals("2.0", fixVersion);
 
             // And no commit link
             var links = issue.links();
             assertEquals(0, links.size());
-
-            // There should be no open issues
-            assertEquals(0, issueProject.issues().size());
         }
     }
 
     @Test
     void testIssueIdempotence(TestInfo testInfo) throws IOException {
@@ -1067,11 +1058,11 @@
 
             // Save the state
             var historyState = localRepo.fetch(repo.url(), "history");
 
             // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in a comment
@@ -1083,12 +1074,12 @@
             // And in a link
             var links = issue.links();
             assertEquals(1, links.size());
             var link = links.get(0);
             assertEquals(commitIcon, link.iconUrl().orElseThrow());
-            assertEquals("Commit", link.title());
-            assertEquals(repo.webUrl(editHash), link.uri());
+            assertEquals("Commit", link.title().orElseThrow());
+            assertEquals(repo.webUrl(editHash), link.uri().orElseThrow());
 
             // As well as a fixVersion
             var fixVersions = issue.fixVersions();
             assertEquals(1, fixVersions.size());
             var fixVersion = fixVersions.get(0);
@@ -1103,13 +1094,141 @@
             // There should be no new comments, links or fixVersions
             var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
             assertEquals(1, updatedIssue.comments().size());
             assertEquals(1, updatedIssue.links().size());
             assertEquals(1, updatedIssue.fixVersions().size());
+        }
+    }
+
+    @Test
+    void testIssuePoolVersion(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of("appendable.txt"), Set.of(), null);
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var updater = new IssueUpdater(issueProject, false, null, false, null, true, "12u14");
+            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
+                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Create an issue and commit a fix
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            issue.addFixVersion("12-pool");
+            issue.addFixVersion("tbd13");
+            issue.addFixVersion("unknown");
+
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
+            localRepo.push(editHash, repo.url(), "master");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The fixVersion should have been updated
+            var fixVersions = issue.fixVersions();
+            assertEquals(1, fixVersions.size());
+            assertEquals("12u14", fixVersions.get(0));
+        }
+    }
+
+    @Test
+    void testIssuePoolOpenVersion(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of("appendable.txt"), Set.of(), null);
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var updater = new IssueUpdater(issueProject, false, null, false, null, true, "12u14");
+            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
+                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Create an issue and commit a fix
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            issue.addFixVersion("12-open");
+            issue.addFixVersion("tbd13");
+            issue.addFixVersion("unknown");
+
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
+            localRepo.push(editHash, repo.url(), "master");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The fixVersion should have been updated
+            var fixVersions = issue.fixVersions();
+            assertEquals(1, fixVersions.size());
+            assertEquals("12u14", fixVersions.get(0));
+        }
+    }
+
+    @Test
+    void testIssueBackport(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of("appendable.txt"), Set.of(), null);
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var updater = new IssueUpdater(issueProject, false, null, false, null, true, "12.0.2");
+            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
+                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Create an issue and commit a fix
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
+            issue.addFixVersion("13.0.1");
+
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
+            localRepo.push(editHash, repo.url(), "master");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The fixVersion should not have been updated
+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
+            var fixVersions = updatedIssue.fixVersions();
+            assertEquals(1, fixVersions.size());
+            assertEquals("13.0.1", fixVersions.get(0));
+
+            // There should be a link
+            var links = updatedIssue.links();
+            assertEquals(1, links.size());
+            var link = links.get(0);
+            var backport = link.issue().orElseThrow();
 
-            // There should be no open issues
-            assertEquals(0, issueProject.issues().size());
+            // The backport issue should have a correct fixVersion
+            var backportFixVersions = backport.fixVersions();
+            assertEquals(1, backportFixVersions.size());
+            assertEquals("12.0.2", backportFixVersions.get(0));
+            assertEquals("Backport", backport.properties().get("type"));
         }
     }
 
     @Test
     void testPullRequest(TestInfo testInfo) throws IOException {
@@ -1136,11 +1255,11 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and a pull request to fix it
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix that issue");
             localRepo.push(editHash, repo.url(), "edit", true);
             var pr = credentials.createPullRequest(repo, "edit", "master", issue.id() + ": Fix that issue");
             pr.setBody("\n\n## Issue\n[" + issue.id() + "](http://www.test.test/): The issue");
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -1168,37 +1287,37 @@
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The issue should now contain a link to the PR
             links = issue.links();
             assertEquals(1, links.size());
-            assertEquals(pr.webUrl(), links.get(0).uri());
+            assertEquals(pr.webUrl(), links.get(0).uri().orElseThrow());
             assertEquals(reviewIcon, links.get(0).iconUrl().orElseThrow());
 
             // Add another issue
-            var issue2 = issueProject.createIssue("This is another issue", List.of("Yes indeed"));
+            var issue2 = issueProject.createIssue("This is another issue", List.of("Yes indeed"), Map.of("type", "Enhancement"));
             pr.setBody("\n\n## Issues\n[" + issue.id() + "](http://www.test.test/): The issue\n[" + issue2.id() +
                                "](http://www.test2.test/): The second issue");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Both issues should contain a link to the PR
             var links1 = issue.links();
             assertEquals(1, links1.size());
-            assertEquals(pr.webUrl(), links1.get(0).uri());
+            assertEquals(pr.webUrl(), links1.get(0).uri().orElseThrow());
             var links2 = issue2.links();
             assertEquals(1, links2.size());
-            assertEquals(pr.webUrl(), links2.get(0).uri());
+            assertEquals(pr.webUrl(), links2.get(0).uri().orElseThrow());
 
             // Drop the first one
             pr.setBody("\n\n## Issue\n[" + issue2.id() + "](http://www.test2.test/): That other issue");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Only the second issue should now contain a link to the PR
             links1 = issue.links();
             assertEquals(0, links1.size());
             links2 = issue2.links();
             assertEquals(1, links2.size());
-            assertEquals(pr.webUrl(), links2.get(0).uri());
+            assertEquals(pr.webUrl(), links2.get(0).uri().orElseThrow());
         }
     }
 
     @Test
     void testPullRequestNoReview(TestInfo testInfo) throws IOException {
@@ -1224,11 +1343,11 @@
                                           Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")));
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and a pull request to fix it
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("type", "Enhancement"));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix that issue");
             localRepo.push(editHash, repo.url(), "edit", true);
             var pr = credentials.createPullRequest(repo, "edit", "master", issue.id() + ": Fix that issue");
             pr.setBody("\n\n## Issue\n[" + issue.id() + "](http://www.test.test/): The issue");
             TestBotRunner.runPeriodicItems(notifyBot);
