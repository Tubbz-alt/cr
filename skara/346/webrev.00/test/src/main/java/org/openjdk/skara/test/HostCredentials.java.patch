diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -25,11 +25,10 @@
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.network.URIBuilder;
-import org.openjdk.skara.proxy.HttpProxy;
 import org.openjdk.skara.vcs.*;
 
 import org.junit.jupiter.api.TestInfo;
 
 import java.io.*;
@@ -142,18 +141,20 @@
         }
     }
 
     private static class JiraCredentials implements Credentials {
         private final JSONObject config;
+        private final TestCredentials repoCredentials;
 
         JiraCredentials(JSONObject config) {
             this.config = config;
+            this.repoCredentials = new TestCredentials();
         }
 
         @Override
         public Forge createRepositoryHost(int userIndex) {
-            throw new RuntimeException("not supported");
+            return repoCredentials.createRepositoryHost(userIndex);
         }
 
         @Override
         public IssueTracker createIssueHost(int userIndex) {
             var hostUri = URIBuilder.base(config.get("host").asString()).build();
@@ -163,11 +164,11 @@
             return IssueTracker.from("jira", hostUri, pat, config);
         }
 
         @Override
         public HostedRepository getHostedRepository(Forge host) {
-            return host.repository(config.get("project").asString()).orElseThrow();
+            return repoCredentials.getHostedRepository(host);
         }
 
         @Override
         public IssueProject getIssueProject(IssueTracker host) {
             return host.project(config.get("project").asString());
@@ -361,11 +362,11 @@
     public PullRequest createPullRequest(HostedRepository hostedRepository, String targetRef, String sourceRef, String title) {
         return createPullRequest(hostedRepository, targetRef, sourceRef, title, false);
     }
 
     public Issue createIssue(IssueProject issueProject, String title) {
-        var issue = issueProject.createIssue(title, List.of());
+        var issue = issueProject.createIssue(title, List.of(), Map.of());
         issuesToBeClosed.add(issue);
         return issue;
     }
 
     public CensusBuilder getCensusBuilder() {
