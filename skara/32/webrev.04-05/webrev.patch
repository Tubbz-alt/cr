diff a/args/src/main/java/org/openjdk/skara/args/Command.java b/args/src/main/java/org/openjdk/skara/args/Command.java
--- a/args/src/main/java/org/openjdk/skara/args/Command.java
+++ b/args/src/main/java/org/openjdk/skara/args/Command.java
@@ -20,9 +20,37 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.args;
 
-@FunctionalInterface
-public interface Command {
-    void execute(String[] args) throws Exception;
+public class Command implements Main {
+    private final String name;
+    private final String helpText;
+    private final Main main;
+
+    Command(String name, String helpText, Main main) {
+        this.name = name;
+        this.helpText = helpText;
+        this.main = main;
+    }
+
+    public String name() {
+        return name;
+    }
+
+    public String helpText() {
+        return helpText;
+    }
+
+    public Main main() {
+        return main;
+    }
+
+    public static CommandHelpText name(String name) {
+        return new CommandHelpText<>(Command::new, name);
+    }
+
+    @Override
+    public void main(String[] args) throws Exception {
+        main.main(args);
+    }
 }
diff a/args/src/main/java/org/openjdk/skara/args/CommandCtor.java b/args/src/main/java/org/openjdk/skara/args/CommandCtor.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/CommandCtor.java
@@ -0,0 +1,5 @@
+package org.openjdk.skara.args;
+
+public interface CommandCtor<T extends Command> {
+    T construct(String name, String helpText, Main main);
+}
diff a/args/src/main/java/org/openjdk/skara/args/CommandHelpText.java b/args/src/main/java/org/openjdk/skara/args/CommandHelpText.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/CommandHelpText.java
@@ -0,0 +1,15 @@
+package org.openjdk.skara.args;
+
+public class CommandHelpText<T extends Command> {
+    private final CommandCtor<T> ctor;
+    private final String name;
+
+    CommandHelpText(CommandCtor<T> ctor, String name) {
+        this.ctor = ctor;
+        this.name = name;
+    }
+
+    public CommandMain<T> helptext(String helpText) {
+        return new CommandMain<>(ctor, name, helpText);
+    }
+}
diff a/args/src/main/java/org/openjdk/skara/args/CommandMain.java b/args/src/main/java/org/openjdk/skara/args/CommandMain.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/CommandMain.java
@@ -0,0 +1,17 @@
+package org.openjdk.skara.args;
+
+public class CommandMain<T extends Command> {
+    private final CommandCtor<T> ctor;
+    private final String name;
+    private final String helpText;
+
+    CommandMain(CommandCtor<T> ctor, String name, String helpText) {
+        this.ctor = ctor;
+        this.name = name;
+        this.helpText = helpText;
+    }
+
+    public T main(Main main) {
+        return ctor.construct(name, helpText, main);
+    }
+}
diff a/args/src/main/java/org/openjdk/skara/args/Default.java b/args/src/main/java/org/openjdk/skara/args/Default.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/Default.java
@@ -0,0 +1,11 @@
+package org.openjdk.skara.args;
+
+public class Default extends Command {
+    Default(String name, String helpText, Main main) {
+        super(name, helpText, main);
+    }
+
+    public static CommandHelpText<Default> name(String name) {
+        return new CommandHelpText<>(Default::new, name);
+    }
+}
diff a/args/src/main/java/org/openjdk/skara/args/Executable.java b/args/src/main/java/org/openjdk/skara/args/Executable.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/Executable.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.args;
+
+@FunctionalInterface
+public interface Executable {
+    void execute() throws Exception;
+}
diff a/args/src/main/java/org/openjdk/skara/args/Main.java b/args/src/main/java/org/openjdk/skara/args/Main.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/Main.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.args;
+
+@FunctionalInterface
+public interface Main {
+    void main(String[] args) throws Exception;
+}
diff a/args/src/main/java/org/openjdk/skara/args/MultiCommandParser.java b/args/src/main/java/org/openjdk/skara/args/MultiCommandParser.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/MultiCommandParser.java
@@ -0,0 +1,97 @@
+/*
+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.args;
+
+import java.io.PrintStream;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+
+public class MultiCommandParser implements Main {
+
+    private final String programName;
+    private final String defaultCommand;
+    private final Map<String, Command> subCommands;
+
+    public MultiCommandParser(String programName, List<Command> commands) {
+        var defaults = commands.stream().filter(Default.class::isInstance).collect(Collectors.toList());
+        if (defaults.size() != 1) {
+            throw new IllegalStateException("Expecting exactly one default command");
+        }
+        this.defaultCommand = defaults.get(0).name();
+
+        this.programName = programName;
+        this.subCommands = commands.stream()
+                                   .collect(Collectors.toMap(
+                                           Command::name,
+                                           Function.identity()));
+        this.subCommands.put("help", helpCommand());
+    }
+
+    private Command helpCommand() {
+        return new Command("help", "print a help message", args -> showUsage());
+    }
+
+    public Executable parse(String[] args) {
+        if (args.length != 0) {
+            Command p = subCommands.get(args[0]);
+            if (p != null) {
+                String[] forwardedArgs = Arrays.copyOfRange(args, 1, args.length);
+                return () -> p.main(forwardedArgs);
+            } else {
+                return () -> {
+                    System.out.println("error: unknown subcommand: " + args[0]);
+                    showUsage();
+                };
+            }
+        } else {
+            return this::showUsage;
+        }
+    }
+
+    @Override
+    public void main(String[] args) throws Exception {
+
+    }
+
+    private void showUsage() {
+        showUsage(System.out);
+    }
+
+    private void showUsage(PrintStream ps) {
+        ps.print("usage: ");
+        ps.print(programName);
+        ps.print(subCommands.keySet().stream().collect(Collectors.joining("|", " <", ">")));
+        ps.println(" <input>");
+
+        int spacing = subCommands.keySet().stream().mapToInt(String::length).max().orElse(0);
+        spacing += 8; // some room
+
+        for (var subCommand : subCommands.values()) {
+            ps.println(String.format("  %-" + spacing + "s%s", subCommand.name(), subCommand.helpText()));
+        }
+    }
+
+}
diff a/args/src/main/java/org/openjdk/skara/args/SubCommandSwitch.java b/args/src/main/java/org/openjdk/skara/args/SubCommandSwitch.java
--- a/args/src/main/java/org/openjdk/skara/args/SubCommandSwitch.java
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.args;
-
-import java.io.PrintStream;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.stream.Collectors;
-
-public class SubCommandSwitch implements Command {
-
-    private static final SubCommandEntry errorCommand = new SubCommandEntry("", "",
-            args -> System.out.println("error: unknown subcommand: " + args[0]));
-
-    private final String programName;
-    private final String defaultCommand;
-    private final Map<String, SubCommandEntry> subCommands;
-
-    private SubCommandSwitch(String programName, String defaultCommand, Map<String, SubCommandEntry> subCommands) {
-        this.programName = programName;
-        this.subCommands = subCommands;
-        this.subCommands.put("help", helpCommand());
-        this.defaultCommand = defaultCommand;
-    }
-
-    private SubCommandEntry helpCommand() {
-        return new SubCommandEntry("help", "print a help message", args -> showUsage());
-    }
-
-    public static Builder builder(String programName) {
-        return new Builder(programName);
-    }
-
-    @Override
-    public void execute(String[] args) throws Exception {
-        if (args.length != 0) {
-            SubCommandEntry p = subCommands.get(args[0]);
-            if (p != null) {
-                String[] forwardedArgs = Arrays.copyOfRange(args, 1, args.length);
-                p.command.execute(forwardedArgs);
-            } else {
-                subCommands.getOrDefault(defaultCommand, errorCommand).command.execute(args);
-            }
-        } else {
-            showUsage();
-        }
-    }
-
-    private void showUsage() {
-        showUsage(System.out);
-    }
-
-    private void showUsage(PrintStream ps) {
-        ps.print("usage: ");
-        ps.print(programName);
-        ps.print(subCommands.keySet().stream().collect(Collectors.joining("|", " <", ">")));
-        ps.println(" <input>");
-
-        int spacing = subCommands.keySet().stream().mapToInt(String::length).max().orElse(0);
-        spacing += 8; // some room
-
-        for (var subCommand : subCommands.values()) {
-            ps.println(String.format("  %-" + spacing + "s%s", subCommand.name, subCommand.description));
-        }
-    }
-
-    private static class SubCommandEntry {
-        private final String name;
-        private final String description;
-        private final Command command;
-
-        public SubCommandEntry(String name, String description, Command command) {
-            this.name = name;
-            this.description = description;
-            this.command = command;
-        }
-    }
-
-    public static class Builder {
-        private final String programName;
-
-        private String defaultCommand;
-        private final Map<String,  SubCommandEntry> subCommands = new HashMap<>();
-
-        private Builder(String programName) {
-            this.programName = programName;
-        }
-
-        public Builder defaultCommand(String command, String description, Command action) {
-            subCommand(command, description, action);
-            this.defaultCommand = command;
-            return this;
-        }
-
-        public Builder subCommand(String command, String description, Command action) {
-            subCommands.put(command, new SubCommandEntry(command, description, action));
-            return this;
-        }
-
-        public SubCommandSwitch build() {
-            return new SubCommandSwitch(programName, defaultCommand, subCommands);
-        }
-    }
-}
diff a/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java b/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.cli;
 
-import org.openjdk.skara.args.Command;
+import org.openjdk.skara.args.Main;
 import org.openjdk.skara.vcs.Repository;
 
 import java.io.IOException;
 import java.nio.file.Path;
 import java.nio.charset.StandardCharsets;
@@ -34,11 +34,11 @@
 import java.util.Map;
 import java.util.TreeMap;
 
 public class GitSkara {
 
-    private static final Map<String, Command> commands = new TreeMap<>();
+    private static final Map<String, Main> commands = new TreeMap<>();
 
     private static void usage(String[] args) {
         var names = new ArrayList<String>();
         names.addAll(commands.keySet());
 
@@ -121,11 +121,11 @@
 
         var isEmpty = args.length == 0;
         var command = isEmpty ? "help" : args[0];
         var commandArgs = isEmpty ? new String[0] : Arrays.copyOfRange(args, 1, args.length);
         if (commands.containsKey(command)) {
-            commands.get(command).execute(commandArgs);
+            commands.get(command).main(commandArgs);
         } else {
             System.err.println("error: unknown command: " + command);
             usage(args);
         }
     }
diff a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
@@ -32,11 +32,10 @@
 import java.net.http.HttpClient;
 import java.net.http.HttpRequest;
 import java.net.http.HttpResponse;
 import java.nio.file.*;
 import java.util.*;
-import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 public class GitWebrev {
     private static void clearDirectory(Path directory) {
         try {
@@ -289,12 +288,19 @@
         client.send(patchFileRequest, HttpResponse.BodyHandlers.ofFile(patchFile));
         return patchFile;
     }
 
     public static void main(String[] args) throws Exception {
-        SubCommandSwitch.builder("git webrev")
-                .defaultCommand("generate", "generate a webrev", GitWebrev::generate)
-                .subCommand("apply", "apply a webrev from a webrev url", GitWebrev::apply)
-                .build()
-                .execute(args);
+        var commands = List.of(
+                    Default.name("generate")
+                           .helptext("generate a webrev")
+                           .main(GitWebrev::generate),
+                    Command.name("apply")
+                           .helptext("apply a webrev from a webrev url")
+                           .main(GitWebrev::apply)
+                );
+
+        var parser = new MultiCommandParser("git webrev", commands);
+        var command = parser.parse(args);
+        command.execute();
     }
 }
