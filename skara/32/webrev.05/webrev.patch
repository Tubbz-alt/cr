diff a/args/src/main/java/org/openjdk/skara/args/Command.java b/args/src/main/java/org/openjdk/skara/args/Command.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/Command.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.args;
+
+public class Command implements Main {
+    private final String name;
+    private final String helpText;
+    private final Main main;
+
+    Command(String name, String helpText, Main main) {
+        this.name = name;
+        this.helpText = helpText;
+        this.main = main;
+    }
+
+    public String name() {
+        return name;
+    }
+
+    public String helpText() {
+        return helpText;
+    }
+
+    public Main main() {
+        return main;
+    }
+
+    public static CommandHelpText name(String name) {
+        return new CommandHelpText<>(Command::new, name);
+    }
+
+    @Override
+    public void main(String[] args) throws Exception {
+        main.main(args);
+    }
+}
diff a/args/src/main/java/org/openjdk/skara/args/CommandCtor.java b/args/src/main/java/org/openjdk/skara/args/CommandCtor.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/CommandCtor.java
@@ -0,0 +1,5 @@
+package org.openjdk.skara.args;
+
+public interface CommandCtor<T extends Command> {
+    T construct(String name, String helpText, Main main);
+}
diff a/args/src/main/java/org/openjdk/skara/args/CommandHelpText.java b/args/src/main/java/org/openjdk/skara/args/CommandHelpText.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/CommandHelpText.java
@@ -0,0 +1,15 @@
+package org.openjdk.skara.args;
+
+public class CommandHelpText<T extends Command> {
+    private final CommandCtor<T> ctor;
+    private final String name;
+
+    CommandHelpText(CommandCtor<T> ctor, String name) {
+        this.ctor = ctor;
+        this.name = name;
+    }
+
+    public CommandMain<T> helptext(String helpText) {
+        return new CommandMain<>(ctor, name, helpText);
+    }
+}
diff a/args/src/main/java/org/openjdk/skara/args/CommandMain.java b/args/src/main/java/org/openjdk/skara/args/CommandMain.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/CommandMain.java
@@ -0,0 +1,17 @@
+package org.openjdk.skara.args;
+
+public class CommandMain<T extends Command> {
+    private final CommandCtor<T> ctor;
+    private final String name;
+    private final String helpText;
+
+    CommandMain(CommandCtor<T> ctor, String name, String helpText) {
+        this.ctor = ctor;
+        this.name = name;
+        this.helpText = helpText;
+    }
+
+    public T main(Main main) {
+        return ctor.construct(name, helpText, main);
+    }
+}
diff a/args/src/main/java/org/openjdk/skara/args/Default.java b/args/src/main/java/org/openjdk/skara/args/Default.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/Default.java
@@ -0,0 +1,11 @@
+package org.openjdk.skara.args;
+
+public class Default extends Command {
+    Default(String name, String helpText, Main main) {
+        super(name, helpText, main);
+    }
+
+    public static CommandHelpText<Default> name(String name) {
+        return new CommandHelpText<>(Default::new, name);
+    }
+}
diff a/args/src/main/java/org/openjdk/skara/args/Executable.java b/args/src/main/java/org/openjdk/skara/args/Executable.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/Executable.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.args;
+
+@FunctionalInterface
+public interface Executable {
+    void execute() throws Exception;
+}
diff a/args/src/main/java/org/openjdk/skara/args/Main.java b/args/src/main/java/org/openjdk/skara/args/Main.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/Main.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.args;
+
+@FunctionalInterface
+public interface Main {
+    void main(String[] args) throws Exception;
+}
diff a/args/src/main/java/org/openjdk/skara/args/MultiCommandParser.java b/args/src/main/java/org/openjdk/skara/args/MultiCommandParser.java
--- /dev/null
+++ b/args/src/main/java/org/openjdk/skara/args/MultiCommandParser.java
@@ -0,0 +1,97 @@
+/*
+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.args;
+
+import java.io.PrintStream;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+
+public class MultiCommandParser implements Main {
+
+    private final String programName;
+    private final String defaultCommand;
+    private final Map<String, Command> subCommands;
+
+    public MultiCommandParser(String programName, List<Command> commands) {
+        var defaults = commands.stream().filter(Default.class::isInstance).collect(Collectors.toList());
+        if (defaults.size() != 1) {
+            throw new IllegalStateException("Expecting exactly one default command");
+        }
+        this.defaultCommand = defaults.get(0).name();
+
+        this.programName = programName;
+        this.subCommands = commands.stream()
+                                   .collect(Collectors.toMap(
+                                           Command::name,
+                                           Function.identity()));
+        this.subCommands.put("help", helpCommand());
+    }
+
+    private Command helpCommand() {
+        return new Command("help", "print a help message", args -> showUsage());
+    }
+
+    public Executable parse(String[] args) {
+        if (args.length != 0) {
+            Command p = subCommands.get(args[0]);
+            if (p != null) {
+                String[] forwardedArgs = Arrays.copyOfRange(args, 1, args.length);
+                return () -> p.main(forwardedArgs);
+            } else {
+                return () -> {
+                    System.out.println("error: unknown subcommand: " + args[0]);
+                    showUsage();
+                };
+            }
+        } else {
+            return this::showUsage;
+        }
+    }
+
+    @Override
+    public void main(String[] args) throws Exception {
+
+    }
+
+    private void showUsage() {
+        showUsage(System.out);
+    }
+
+    private void showUsage(PrintStream ps) {
+        ps.print("usage: ");
+        ps.print(programName);
+        ps.print(subCommands.keySet().stream().collect(Collectors.joining("|", " <", ">")));
+        ps.println(" <input>");
+
+        int spacing = subCommands.keySet().stream().mapToInt(String::length).max().orElse(0);
+        spacing += 8; // some room
+
+        for (var subCommand : subCommands.values()) {
+            ps.println(String.format("  %-" + spacing + "s%s", subCommand.name(), subCommand.helpText()));
+        }
+    }
+
+}
diff a/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java b/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.cli;
 
+import org.openjdk.skara.args.Main;
 import org.openjdk.skara.vcs.Repository;
 
 import java.io.IOException;
 import java.nio.file.Path;
 import java.nio.charset.StandardCharsets;
@@ -30,19 +31,14 @@
 import java.util.Arrays;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
-import java.util.function.Consumer;
 
 public class GitSkara {
-    @FunctionalInterface
-    private interface Command {
-        void execute(String[] args) throws Exception;
-    }
 
-    private static final Map<String, Command> commands = new TreeMap<>();
+    private static final Map<String, Main> commands = new TreeMap<>();
 
     private static void usage(String[] args) {
         var names = new ArrayList<String>();
         names.addAll(commands.keySet());
 
@@ -125,11 +121,11 @@
 
         var isEmpty = args.length == 0;
         var command = isEmpty ? "help" : args[0];
         var commandArgs = isEmpty ? new String[0] : Arrays.copyOfRange(args, 1, args.length);
         if (commands.containsKey(command)) {
-            commands.get(command).execute(commandArgs);
+            commands.get(command).main(commandArgs);
         } else {
             System.err.println("error: unknown command: " + command);
             usage(args);
         }
     }
diff a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
@@ -27,14 +27,15 @@
 import org.openjdk.skara.webrev.*;
 
 import java.io.*;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.net.http.HttpClient;
+import java.net.http.HttpRequest;
+import java.net.http.HttpResponse;
 import java.nio.file.*;
 import java.util.*;
-import java.util.jar.Manifest;
-import java.util.stream.*;
 import java.util.regex.Pattern;
 
 public class GitWebrev {
     private static void clearDirectory(Path directory) {
         try {
@@ -77,11 +78,11 @@
             die(message);
             return null; // impossible
         }
     }
 
-    public static void main(String[] args) throws IOException {
+    private static void generate(String[] args) throws IOException {
         var flags = List.of(
             Option.shortcut("r")
                   .fullname("rev")
                   .describe("REV")
                   .helptext("Compare against a specified revision")
@@ -249,6 +250,57 @@
               .username(username)
               .issue(issue)
               .version(version)
               .generate(rev);
     }
+
+    private static void apply(String[] args) throws Exception {
+        var inputs = List.of(
+            Input.position(0)
+                .describe("webrev url")
+                .singular()
+                .required());
+
+        var parser = new ArgumentParser("git webrev apply", List.of(), inputs);
+        var arguments = parser.parse(args);
+
+        var cwd = Paths.get("").toAbsolutePath();
+        var repository = Repository.get(cwd).orElseGet(() -> {
+            System.err.println(String.format("error: %s is not a repository", cwd.toString()));
+            System.exit(1);
+            return null;
+        });
+
+        var inputString = arguments.at(0).asString();
+        var webrevMetaData = WebrevMetaData.fromWebrevURL(inputString);
+        var patchFileURI = webrevMetaData.patchURI()
+                .orElseThrow(() -> new IllegalStateException("Could not find patch file in webrev"));
+        var patchFile = downloadPatchFile(patchFileURI);
+
+        repository.apply(patchFile, false);
+    }
+
+    private static Path downloadPatchFile(URI uri) throws IOException, InterruptedException {
+        var client = HttpClient.newHttpClient();
+        var patchFile = Files.createTempFile("patch", ".patch");
+        var patchFileRequest = HttpRequest.newBuilder()
+                .uri(uri)
+                .build();
+        client.send(patchFileRequest, HttpResponse.BodyHandlers.ofFile(patchFile));
+        return patchFile;
+    }
+
+    public static void main(String[] args) throws Exception {
+        var commands = List.of(
+                    Default.name("generate")
+                           .helptext("generate a webrev")
+                           .main(GitWebrev::generate),
+                    Command.name("apply")
+                           .helptext("apply a webrev from a webrev url")
+                           .main(GitWebrev::apply)
+                );
+
+        var parser = new MultiCommandParser("git webrev", commands);
+        var command = parser.parse(args);
+        command.execute();
+    }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -99,10 +99,11 @@
     void merge(Hash hash, String strategy) throws IOException;
     void abortMerge() throws IOException;
     void addRemote(String name, String path) throws IOException;
     void setPaths(String remote, String pullPath, String pushPath) throws IOException;
     void apply(Diff diff, boolean force) throws IOException;
+    void apply(Path patchFile, boolean force)  throws IOException;
     void copy(Path from, Path to) throws IOException;
     void move(Path from, Path to) throws IOException;
     default void setPaths(String remote, String pullPath) throws IOException {
         setPaths(remote, pullPath, null);
     }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -961,10 +961,16 @@
     @Override
     public void apply(Diff diff, boolean force) throws IOException {
         // ignore force, no such concept in git
         var patchFile = Files.createTempFile("apply", ".patch");
         diff.toFile(patchFile);
+        apply(patchFile, force);
+        Files.delete(patchFile);
+    }
+
+    @Override
+    public void apply(Path patchFile, boolean force)  throws IOException {
         var cmd = new ArrayList<String>();
         cmd.addAll(List.of("git", "apply", "--index", "--unidiff-zero"));
         cmd.add(patchFile.toAbsolutePath().toString());
         try (var p = capture(cmd)) {
             await(p);
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -934,10 +934,16 @@
 
     @Override
     public void apply(Diff diff, boolean force) throws IOException {
         var patchFile = Files.createTempFile("import", ".patch");
         diff.toFile(patchFile);
+        apply(patchFile, force);
+        //Files.delete(patchFile);
+    }
+
+    @Override
+    public void apply(Path patchFile, boolean force) throws IOException {
         var cmd = new ArrayList<String>();
         cmd.addAll(List.of("hg", "import", "--no-commit"));
         if (force) {
             cmd.add("--force");
         }
@@ -943,11 +949,10 @@
         }
         cmd.add(patchFile.toAbsolutePath().toString());
         try (var p = capture(cmd)) {
             await(p);
         }
-        //Files.delete(patchFile);
     }
 
     @Override
     public void copy(Path from, Path to) throws IOException {
         try (var p = capture("hg", "copy", from.toString(), to.toString())) {
diff a/webrev/src/main/java/module-info.java b/webrev/src/main/java/module-info.java
--- a/webrev/src/main/java/module-info.java
+++ b/webrev/src/main/java/module-info.java
@@ -20,8 +20,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 module org.openjdk.skara.webrev {
     requires org.openjdk.skara.vcs;
+    requires java.net.http;
 
     exports org.openjdk.skara.webrev;
 }
diff a/webrev/src/main/java/org/openjdk/skara/webrev/WebrevMetaData.java b/webrev/src/main/java/org/openjdk/skara/webrev/WebrevMetaData.java
--- /dev/null
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/WebrevMetaData.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.webrev;
+
+import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.http.HttpClient;
+import java.net.http.HttpRequest;
+import java.net.http.HttpResponse;
+import java.util.Optional;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public class WebrevMetaData {
+    private static final Pattern findPatchPattern = Pattern.compile(
+            "[ ]*(?:<td>)?<a href=\".*\">(?<patchName>.*\\.patch)</a></td>(?:</tr>)?$");
+
+    private final Optional<URI> patchURI;
+
+    public WebrevMetaData(Optional<URI> patchURI) {
+        this.patchURI = patchURI;
+    }
+
+    public static WebrevMetaData fromWebrevURL(String uri) throws IOException, URISyntaxException, InterruptedException {
+        var sanatizedUri = sanitizeURI(uri);
+        var patchFile = getPatchFile(sanatizedUri);
+
+        return new WebrevMetaData(patchFile);
+    }
+
+    private static String dropSuffix(String s, String suffix) {
+        if (s.endsWith(suffix)) {
+            s = s.substring(0, s.length() - suffix.length());
+        }
+        return s;
+    }
+
+    private static URI sanitizeURI(String uri) throws URISyntaxException {
+        uri = dropSuffix(uri, "index.html");
+        return new URI(uri);
+    }
+
+    private static Optional<URI> getPatchFile(URI uri) throws IOException, InterruptedException {
+        var client = HttpClient.newHttpClient();
+        var findPatchFileRcequest = HttpRequest.newBuilder()
+                .uri(uri)
+                .build();
+        return client.send(findPatchFileRcequest, HttpResponse.BodyHandlers.ofLines())
+                .body()
+                .map(findPatchPattern::matcher)
+                .filter(Matcher::matches)
+                .findFirst()
+                .map(m -> m.group("patchName"))
+                .map(uri::resolve);
+    }
+
+    public Optional<URI> patchURI() {
+        return patchURI;
+    }
+}
