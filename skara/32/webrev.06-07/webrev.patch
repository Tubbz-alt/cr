diff a/args/src/main/java/org/openjdk/skara/args/MultiCommandParser.java b/args/src/main/java/org/openjdk/skara/args/MultiCommandParser.java
--- a/args/src/main/java/org/openjdk/skara/args/MultiCommandParser.java
+++ b/args/src/main/java/org/openjdk/skara/args/MultiCommandParser.java
@@ -27,20 +27,19 @@
 import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 
-public class MultiCommandParser implements Main {
-
+public class MultiCommandParser {
     private final String programName;
     private final String defaultCommand;
     private final Map<String, Command> subCommands;
 
     public MultiCommandParser(String programName, List<Command> commands) {
         var defaults = commands.stream().filter(Default.class::isInstance).collect(Collectors.toList());
         if (defaults.size() != 1) {
-            throw new IllegalStateException("Expecting exactly one default command");
+            throw new IllegalArgumentException("Expecting exactly one default command");
         }
         this.defaultCommand = defaults.get(0).name();
 
         this.programName = programName;
         this.subCommands = commands.stream()
@@ -54,28 +53,17 @@
         return new Command("help", "print a help message", args -> showUsage());
     }
 
     public Executable parse(String[] args) {
         if (args.length != 0) {
-            Command p = subCommands.get(args[0]);
+            var p = subCommands.get(args[0]);
             if (p != null) {
-                String[] forwardedArgs = Arrays.copyOfRange(args, 1, args.length);
+                var forwardedArgs = Arrays.copyOfRange(args, 1, args.length);
                 return () -> p.main(forwardedArgs);
-            } else {
-                return () -> {
-                    System.out.println("error: unknown subcommand: " + args[0]);
-                    showUsage();
-                };
             }
-        } else {
-            return this::showUsage;
         }
-    }
-
-    @Override
-    public void main(String[] args) throws Exception {
-
+        return () -> subCommands.get(defaultCommand).main(args);
     }
 
     private void showUsage() {
         showUsage(System.out);
     }
@@ -91,7 +79,6 @@
 
         for (var subCommand : subCommands.values()) {
             ps.println(String.format("  %-" + spacing + "s%s", subCommand.name(), subCommand.helpText()));
         }
     }
-
 }
diff a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
@@ -254,13 +254,13 @@
     }
 
     private static void apply(String[] args) throws Exception {
         var inputs = List.of(
             Input.position(0)
-                .describe("webrev url")
-                .singular()
-                .required());
+                 .describe("webrev url")
+                 .singular()
+                 .required());
 
         var parser = new ArgumentParser("git webrev apply", List.of(), inputs);
         var arguments = parser.parse(args);
 
         var cwd = Paths.get("").toAbsolutePath();
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -935,11 +935,11 @@
     @Override
     public void apply(Diff diff, boolean force) throws IOException {
         var patchFile = Files.createTempFile("import", ".patch");
         diff.toFile(patchFile);
         apply(patchFile, force);
-        //Files.delete(patchFile);
+        Files.delete(patchFile);
     }
 
     @Override
     public void apply(Path patchFile, boolean force) throws IOException {
         var cmd = new ArrayList<String>();
