diff a/email/src/main/java/org/openjdk/skara/email/SMTP.java b/email/src/main/java/org/openjdk/skara/email/SMTP.java
--- a/email/src/main/java/org/openjdk/skara/email/SMTP.java
+++ b/email/src/main/java/org/openjdk/skara/email/SMTP.java
@@ -23,37 +23,42 @@
 package org.openjdk.skara.email;
 
 import java.io.*;
 import java.net.Socket;
 import java.nio.charset.StandardCharsets;
+import java.time.Duration;
 import java.time.format.DateTimeFormatter;
 import java.util.regex.Pattern;
 
 /**
  * Limited SMTP client implementation - only compatibility requirement (currently) is the OpenJDK
  * mailing list servers.
  */
 public class SMTP {
     private static Pattern initReply = Pattern.compile("220 .*");
-    private static Pattern ehloReply = Pattern.compile("^250 HELP$");
+    private static Pattern ehloReply = Pattern.compile("^250 .*");
     private static Pattern mailReply = Pattern.compile("^250 .*");
     private static Pattern rcptReply = Pattern.compile("^250 .*");
     private static Pattern dataReply = Pattern.compile("354 Enter.*");
     private static Pattern doneReply = Pattern.compile("250 .*");
 
     public static void send(String server, EmailAddress recipient, Email email) throws IOException {
+        send(server, recipient, email, Duration.ofMinutes(30));
+    }
+
+    public static void send(String server, EmailAddress recipient, Email email, Duration timeout) throws IOException {
         var port = 25;
         if (server.contains(":")) {
             var parts = server.split(":", 2);
             server = parts[0];
             port = Integer.parseInt(parts[1]);
         }
         try (var socket = new Socket(server, port);
              var out = new OutputStreamWriter(socket.getOutputStream(), StandardCharsets.UTF_8);
              var in = new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8)) {
 
-            var session = new SMTPSession(in, out);
+            var session = new SMTPSession(in, out, timeout);
 
             session.waitForPattern(initReply);
             session.sendCommand("EHLO " + email.sender().domain(), ehloReply);
             session.sendCommand("MAIL FROM:" + email.sender().address(), mailReply);
             session.sendCommand("RCPT TO:<" + recipient.address() + ">", rcptReply);
diff a/email/src/main/java/org/openjdk/skara/email/SMTPSession.java b/email/src/main/java/org/openjdk/skara/email/SMTPSession.java
--- a/email/src/main/java/org/openjdk/skara/email/SMTPSession.java
+++ b/email/src/main/java/org/openjdk/skara/email/SMTPSession.java
@@ -21,44 +21,48 @@
  * questions.
  */
 package org.openjdk.skara.email;
 
 import java.io.*;
+import java.time.*;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class SMTPSession {
     private final static Logger log = Logger.getLogger("org.openjdk.skara.email");;
     private final BufferedReader in;
     private final BufferedWriter out;
+    private final Instant timeout;
 
-    public SMTPSession(InputStreamReader in, OutputStreamWriter out) {
+    public SMTPSession(InputStreamReader in, OutputStreamWriter out, Duration timeout) {
         this.in = new BufferedReader(in);
         this.out = new BufferedWriter(out);
+        this.timeout = Instant.now().plus(timeout);
     }
 
-    public void waitForPattern(Pattern expectedReply) throws IOException {
-        while (true) {
+    void waitForPattern(Pattern expectedReply) throws IOException {
+        while (Instant.now().isBefore(timeout)) {
             while (!in.ready()) {
                 try {
                     Thread.sleep(10);
                 } catch (InterruptedException ignored) {
                 }
             }
             var line = in.readLine();
             var matcher = expectedReply.matcher(line);
             log.fine("< " + line);
             if (matcher.matches()) {
-                break;
+                return;
             }
         }
+        throw new RuntimeException("Timeout waiting for pattern: " + expectedReply);
     }
 
     public List<String> readLinesUntil(Pattern end) throws IOException {
         var ret = new ArrayList<String>();
-        while (true) {
+        while (Instant.now().isBefore(timeout)) {
             while (!in.ready()) {
                 try {
                     Thread.sleep(10);
                 } catch (InterruptedException ignored) {
                 }
@@ -69,10 +73,11 @@
             if (matcher.matches()) {
                 return ret;
             }
             ret.add(line);
         }
+        throw new RuntimeException("Timeout reading response lines: " + end);
     }
 
     public void sendCommand(String command, Pattern expectedReply) throws IOException {
         log.fine("> " + command);
         out.write(command + "\n");
diff a/email/src/test/java/org/openjdk/skara/email/SMTPTests.java b/email/src/test/java/org/openjdk/skara/email/SMTPTests.java
--- a/email/src/test/java/org/openjdk/skara/email/SMTPTests.java
+++ b/email/src/test/java/org/openjdk/skara/email/SMTPTests.java
@@ -28,11 +28,11 @@
 
 import java.io.IOException;
 import java.time.Duration;
 import java.util.logging.Logger;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.*;
 
 class SMTPTests {
     private final static Logger log = Logger.getLogger("org.openjdk.skara.email");;
 
     @Test
@@ -82,6 +82,18 @@
             SMTP.send(server.address(), recipient, sentMail);
             var email = server.receive(Duration.ofSeconds(10));
             assertEquals(sentMail, email);
         }
     }
+
+    @Test
+    void timeout() throws IOException {
+        log.info("Hello");
+        try (var server = new SMTPServer()) {
+            var sender = EmailAddress.from("Test", "test@test.email");
+            var recipient = EmailAddress.from("Dest", "dest@dest.email");
+            var sentMail = Email.create(sender, "Subject", "Body").recipient(recipient).build();
+
+            assertThrows(RuntimeException.class, () -> SMTP.send(server.address(), recipient, sentMail, Duration.ZERO));
+        }
+    }
 }
diff a/test/src/main/java/org/openjdk/skara/test/SMTPServer.java b/test/src/main/java/org/openjdk/skara/test/SMTPServer.java
--- a/test/src/main/java/org/openjdk/skara/test/SMTPServer.java
+++ b/test/src/main/java/org/openjdk/skara/test/SMTPServer.java
@@ -84,11 +84,11 @@
             while (!serverSocket.isClosed()) {
                 try {
                     try (var socket = serverSocket.accept();
                          var input = new InputStreamReader(socket.getInputStream());
                          var output = new OutputStreamWriter(socket.getOutputStream())) {
-                        var session = new SMTPSession(input, output);
+                        var session = new SMTPSession(input, output, Duration.ofMinutes(10));
                         handleSession(session);
                     }
                 } catch (SocketException e) {
                     // Socket closed
                 } catch (IOException e) {
