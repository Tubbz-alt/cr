diff a/email/src/main/java/org/openjdk/skara/email/SMTPSession.java b/email/src/main/java/org/openjdk/skara/email/SMTPSession.java
--- a/email/src/main/java/org/openjdk/skara/email/SMTPSession.java
+++ b/email/src/main/java/org/openjdk/skara/email/SMTPSession.java
@@ -21,44 +21,48 @@
  * questions.
  */
 package org.openjdk.skara.email;
 
 import java.io.*;
+import java.time.*;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class SMTPSession {
     private final static Logger log = Logger.getLogger("org.openjdk.skara.email");;
     private final BufferedReader in;
     private final BufferedWriter out;
+    private final Instant timeout;
 
-    public SMTPSession(InputStreamReader in, OutputStreamWriter out) {
+    public SMTPSession(InputStreamReader in, OutputStreamWriter out, Duration timeout) {
         this.in = new BufferedReader(in);
         this.out = new BufferedWriter(out);
+        this.timeout = Instant.now().plus(timeout);
     }
 
-    public void waitForPattern(Pattern expectedReply) throws IOException {
-        while (true) {
+    void waitForPattern(Pattern expectedReply) throws IOException {
+        while (Instant.now().isBefore(timeout)) {
             while (!in.ready()) {
                 try {
                     Thread.sleep(10);
                 } catch (InterruptedException ignored) {
                 }
             }
             var line = in.readLine();
             var matcher = expectedReply.matcher(line);
             log.fine("< " + line);
             if (matcher.matches()) {
-                break;
+                return;
             }
         }
+        throw new RuntimeException("Timeout waiting for pattern: " + expectedReply);
     }
 
     public List<String> readLinesUntil(Pattern end) throws IOException {
         var ret = new ArrayList<String>();
-        while (true) {
+        while (Instant.now().isBefore(timeout)) {
             while (!in.ready()) {
                 try {
                     Thread.sleep(10);
                 } catch (InterruptedException ignored) {
                 }
@@ -69,10 +73,11 @@
             if (matcher.matches()) {
                 return ret;
             }
             ret.add(line);
         }
+        throw new RuntimeException("Timeout reading response lines: " + end);
     }
 
     public void sendCommand(String command, Pattern expectedReply) throws IOException {
         log.fine("> " + command);
         out.write(command + "\n");
