diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
@@ -32,14 +32,10 @@
 import java.util.logging.Logger;
 import java.util.regex.*;
 import java.util.stream.*;
 
 public class CommandWorkItem extends PullRequestWorkItem {
-    private final HostedRepository censusRepo;
-    private final String censusRef;
-    private final Map<String, String> external;
-
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
     private final String commandReplyMarker = "<!-- Jmerge command reply message (%s) -->";
     private final Pattern commandReplyPattern = Pattern.compile("<!-- Jmerge command reply message \\((\\S+)\\) -->");
 
@@ -54,11 +50,11 @@
 
     static class HelpCommand implements CommandHandler {
         static private Map<String, String> external = null;
 
         @Override
-        public void handle(PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
+        public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
             reply.println("Available commands:");
             Stream.concat(
                     commandHandlers.entrySet().stream()
                                    .map(entry -> entry.getKey() + " - " + entry.getValue().description()),
                     external.entrySet().stream()
@@ -70,19 +66,12 @@
         public String description() {
             return "shows this text";
         }
     }
 
-    CommandWorkItem(PullRequest pr, HostedRepository censusRepo, String censusRef, Map<String, String> external, Consumer<RuntimeException> errorHandler) {
-        super(pr, errorHandler);
-        this.censusRepo = censusRepo;
-        this.censusRef = censusRef;
-        this.external = external;
-
-        if (HelpCommand.external == null) {
-            HelpCommand.external = external;
-        }
+    CommandWorkItem(PullRequestBot bot, PullRequest pr, Consumer<RuntimeException> errorHandler) {
+        super(bot, pr, errorHandler);
     }
 
     private List<AbstractMap.SimpleEntry<String, Comment>> findCommandComments(List<Comment> comments) {
         var self = pr.repository().forge().currentUser();
         var handled = comments.stream()
@@ -117,13 +106,13 @@
         var commandWord = argSplit > 0 ? command.substring(0, argSplit) : command;
         var commandArgs = argSplit > 0 ? command.substring(argSplit + 1) : "";
 
         var handler = commandHandlers.get(commandWord);
         if (handler != null) {
-            handler.handle(pr, censusInstance, scratchPath, commandArgs, comment, allComments, printer);
+            handler.handle(bot, pr, censusInstance, scratchPath, commandArgs, comment, allComments, printer);
         } else {
-            if (!external.containsKey(commandWord)) {
+            if (!bot.externalCommands().containsKey(commandWord)) {
                 printer.print("Unknown command `");
                 printer.print(command);
                 printer.println("` - for a list of valid commands use `/help`.");
             } else {
                 // Do not reply to external commands
@@ -148,11 +137,15 @@
         if (unprocessedCommands.isEmpty()) {
             log.fine("No new merge commands found, stopping further processing");
             return;
         }
 
-        var census = CensusInstance.create(censusRepo, censusRef, scratchPath.resolve("census"), pr);
+        if (HelpCommand.external == null) {
+            HelpCommand.external = bot.externalCommands();
+        }
+
+        var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve("census"), pr);
         for (var entry : unprocessedCommands) {
             processCommand(pr, census, scratchPath.resolve("pr"), entry.getKey(), entry.getValue(), comments);
         }
     }
 }
