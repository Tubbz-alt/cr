diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -39,13 +39,15 @@
     private final PullRequest pr;
     private final Repository localRepo;
     private final Hash targetHash;
     private final Hash headHash;
     private final Hash baseHash;
+    private final boolean ignoreStaleReviews;
 
-    PullRequestInstance(Path localRepoPath, PullRequest pr) throws IOException  {
+    PullRequestInstance(Path localRepoPath, PullRequest pr, boolean ignoreStaleReviews) throws IOException  {
         this.pr = pr;
+        this.ignoreStaleReviews = ignoreStaleReviews;
         var repository = pr.repository();
 
         // Materialize the PR's target ref
         localRepo = Repository.materialize(localRepoPath, repository.url(),
                                            "+" + pr.targetRef() + ":pr_prinstance_" + repository.name());
@@ -68,16 +70,17 @@
         return new ArrayList<>(reviewPerUser.values());
     }
 
     private String commitMessage(List<Review> activeReviews, Namespace namespace, boolean isMerge) throws IOException {
         var reviewers = activeReviews.stream()
-                          .filter(review -> review.verdict() == Review.Verdict.APPROVED)
-                          .map(review -> review.reviewer().id())
-                          .map(namespace::get)
-                          .filter(Objects::nonNull)
-                          .map(Contributor::username)
-                          .collect(Collectors.toList());
+                                     .filter(review -> !ignoreStaleReviews || review.hash().equals(headHash))
+                                     .filter(review -> review.verdict() == Review.Verdict.APPROVED)
+                                     .map(review -> review.reviewer().id())
+                                     .map(namespace::get)
+                                     .filter(Objects::nonNull)
+                                     .map(Contributor::username)
+                                     .collect(Collectors.toList());
 
         var comments = pr.comments();
         var additionalContributors = Contributors.contributors(pr.repository().forge().currentUser(),
                                                                comments).stream()
                                                  .map(email -> Author.fromString(email.toString()))
