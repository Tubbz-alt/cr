diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -5,11 +5,10 @@
 import org.openjdk.skara.vcs.*;
 
 import java.net.URI;
 import java.time.format.DateTimeFormatter;
 import java.util.Arrays;
-import java.util.function.Predicate;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 class ArchiveMessages {
     private static String formatCommit(Commit commit) {
@@ -17,17 +16,11 @@
         var message = commit.message();
         if (message.size() == 0) {
             ret.append("<no commit message found>");
         } else {
             var abbrev = commit.hash().abbreviate();
-            var filler = "\t".repeat(((abbrev.length() + 4 /* additional spacing */) / 8 /* tab size */) + 1 /* rounding */);
-            ret.append(" - ").append(abbrev).append(":\t").append(message.get(0).strip());
-            message.stream()
-                   .skip(1)
-                   .map(String::strip)
-                   .filter(Predicate.not(String::isEmpty))
-                   .forEach(line -> ret.append("\n").append(filler).append("\t").append(line));
+            ret.append(" - ").append(abbrev).append(": ").append(message.get(0).strip());
         }
         return ret.toString();
     }
 
     private static final String infoSeparator = "----------------";
@@ -53,69 +46,65 @@
         return Arrays.stream(body.strip().split("\\R"))
                      .map(line -> line.length() > 0 ? line.charAt(0) == '>' ? ">" + line : "> " + line : "> ")
                      .collect(Collectors.joining("\n"));
     }
 
+    private static String replyFooter(PullRequestInstance prInstance) {
+        return "PR: " + prInstance.pr().getWebUrl();
+    }
+
     static String composeConversation(PullRequestInstance prInstance, URI webrev) {
         var commitMessages = prInstance.formatCommitMessages(prInstance.baseHash(), prInstance.headHash(), ArchiveMessages::formatCommit);
         var filteredBody = filterComments(prInstance.pr().getBody());
         if (filteredBody.isEmpty()) {
             filteredBody = prInstance.pr().getTitle().strip();
         }
         return filteredBody + "\n\n" +
                 infoSeparator + "\n\n" +
                 "Commits:\n" +
                 commitMessages + "\n\n" +
-                "Pull request:\n" +
-                prInstance.pr().getWebUrl() + "\n\n" +
-                "Webrev:\n" +
-                webrev.toString() + "\n\n" +
-                "Patch:\n" +
-                prInstance.diffUrl() + "\n\n" +
-                "Fetch command:\n" +
-                prInstance.fetchCommand();
+                "  Stats: " + prInstance.stats(prInstance.baseHash(), prInstance.headHash()) + "\n" +
+                "Changes: " + prInstance.changeUrl() + "\n" +
+                " Webrev: " + webrev.toString() + "\n" +
+                "  Patch: " + prInstance.diffUrl() + "\n" +
+                "  Fetch: " + prInstance.fetchCommand() + "\n\n" +
+                replyFooter(prInstance);
     }
 
     static String composeRebaseComment(PullRequestInstance prInstance, URI fullWebrev) {
         var commitMessages = prInstance.formatCommitMessages(prInstance.baseHash(), prInstance.headHash(), ArchiveMessages::formatCommit);
         return "The pull request has been updated with a complete new set of changes (possibly due to a rebase).\n\n" +
                 infoSeparator + "\n\n" +
                 "Commits:\n" +
                 commitMessages + "\n\n" +
-                "Pull request:\n" +
-                prInstance.pr().getWebUrl() + "\n\n" +
-                "Webrev:\n" +
-                fullWebrev.toString() + "\n\n" +
-                "Updated full patch:\n" +
-                prInstance.diffUrl() + "\n\n" +
-                "Fetch command:\n" +
-                prInstance.fetchCommand();
-    }
+                "  Stats: " + prInstance.stats(prInstance.baseHash(), prInstance.headHash()) + "\n" +
+                "Changes: " + prInstance.changeUrl() + "\n" +
+                " Webrev: " + fullWebrev.toString() + "\n" +
+                "  Patch: " + prInstance.diffUrl() + "\n" +
+                "  Fetch: " + prInstance.fetchCommand() + "\n\n" +
+                replyFooter(prInstance);    }
 
     static String composeIncrementalComment(Hash lastHead, PullRequestInstance prInstance, URI fullWebrev, URI incrementalWebrev) {
         var newCommitMessages = prInstance.formatCommitMessages(lastHead, prInstance.headHash(), ArchiveMessages::formatCommit);
         return "The pull request has been updated with additional changes.\n\n" +
                 infoSeparator + "\n\n" +
                 "Added commits:\n" +
                 newCommitMessages + "\n\n" +
-                "Pull request:\n" +
-                prInstance.pr().getWebUrl() + "\n\n" +
+                "  Stats: " + prInstance.stats(lastHead, prInstance.headHash()) + "\n" +
+                "Changes:\n\n" +
+                "  - all: " + prInstance.pr().getWebUrl() + "/files\n" +
+                "  - new: " + prInstance.changeUrl(lastHead, prInstance.headHash()) + "\n" +
                 "Webrevs:\n" +
                 " - full: " + fullWebrev.toString() + "\n" +
-                " - inc: " + incrementalWebrev.toString() + "\n\n" +
-                "Updated full patch:\n" +
-                prInstance.diffUrl() + "\n\n" +
-                "Fetch command:\n" +
-                prInstance.fetchCommand();
-    }
-
-    private static String composeReplyFooter(PullRequestInstance prInstance) {
-        return "PR: " + prInstance.pr().getWebUrl();
+                " - incr: " + incrementalWebrev.toString() + "\n" +
+                "  Patch: " + prInstance.diffUrl() + "\n" +
+                "  Fetch: " + prInstance.fetchCommand() + "\n\n" +
+                replyFooter(prInstance);
     }
 
     private static String filterParentBody(Email parent, PullRequestInstance prInstance) {
-        var parentFooter = ArchiveMessages.composeReplyFooter(prInstance);
+        var parentFooter = ArchiveMessages.replyFooter(prInstance);
         var filteredParentBody = parent.body().strip();
         if (filteredParentBody.endsWith(parentFooter)) {
             return filteredParentBody.substring(0, filteredParentBody.length() - parentFooter.length()).strip();
         } else {
             return filteredParentBody;
@@ -127,19 +116,19 @@
                 "\n" +
                 quoteBody(filterParentBody(parent, prInstance)) +
                 "\n\n" +
                 filterComments(body) +
                 "\n\n" +
-                composeReplyFooter(prInstance);
+                replyFooter(prInstance);
     }
 
     static String composeCombinedReply(Email parent, String body, PullRequestInstance prInstance) {
         return filterParentBody(parent, prInstance) +
                 "\n\n" +
                 filterComments(body) +
                 "\n\n" +
-                composeReplyFooter(prInstance);
+                replyFooter(prInstance);
     }
 
     static String reviewCommentBody(String body, Review.Verdict verdict, String user, String role) {
         var result = new StringBuilder(filterComments(body));
         if (verdict != Review.Verdict.NONE) {
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
@@ -65,15 +65,44 @@
 
     String diffUrl() {
         return pr.getWebUrl() + ".diff";
     }
 
+    String changeUrl() {
+        return pr.getWebUrl() + "/files";
+    }
+
+    String changeUrl(Hash base, Hash head) {
+        return pr.getWebUrl() + "/files/" + base.abbreviate() + ".." + head.abbreviate();
+    }
+
     String fetchCommand() {
         var repoUrl = pr.repository().getWebUrl();
         return "git fetch " + repoUrl + " " + pr.getSourceRef() + ":pull/" + pr.getId();
     }
 
+    String stats(Hash base, Hash head) {
+        try {
+            var diff = localRepo.diff(base, head);
+            var inserted = diff.added();
+            var deleted = diff.removed();
+            var modified = diff.modified();
+            var linesChanged = inserted + deleted + modified;
+            var filesChanged = diff.patches().size();
+            return String.format("%d line%ss in %d file%s changed: %d ins; %d del; %d mod",
+                                 linesChanged,
+                                 linesChanged == 1 ? "" : "s",
+                                 filesChanged,
+                                 filesChanged == 1 ? "" : "s",
+                                 inserted,
+                                 deleted,
+                                 modified);
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
+    }
+
     @FunctionalInterface
     interface CommitFormatter {
         String format(Commit commit);
     }
 
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -164,17 +164,17 @@
             // The archive should now contain an entry
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
             assertTrue(archiveContains(archiveFolder.path(), "This is a pull request"));
             assertTrue(archiveContains(archiveFolder.path(), "This should now be ready"));
             assertTrue(archiveContains(archiveFolder.path(), "Patch:"));
-            assertTrue(archiveContains(archiveFolder.path(), "Pull request:"));
+            assertTrue(archiveContains(archiveFolder.path(), "Changes:"));
             assertTrue(archiveContains(archiveFolder.path(), "Webrev:"));
             assertTrue(archiveContains(archiveFolder.path(), "http://www.test.test/"));
             assertTrue(archiveContains(archiveFolder.path(), "webrev.00"));
-            assertTrue(archiveContains(archiveFolder.path(), "Fetch command:"));
-            assertTrue(archiveContains(archiveFolder.path(), "^ - " + editHash.abbreviate() + ":\tChange msg"));
-            assertTrue(archiveContains(archiveFolder.path(), "^\t\t\tWith several lines"));
+            assertTrue(archiveContains(archiveFolder.path(), "Fetch:"));
+            assertTrue(archiveContains(archiveFolder.path(), "^ - " + editHash.abbreviate() + ": Change msg"));
+            assertFalse(archiveContains(archiveFolder.path(), "With several lines"));
 
             // The mailing list as well
             listServer.processIncoming();
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP());
             var mailmanList = mailmanServer.getList(listAddress.address());
@@ -740,11 +740,11 @@
             // The archive should reference the updated push
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
             assertTrue(archiveContains(archiveFolder.path(), "additional changes"));
             assertTrue(archiveContains(archiveFolder.path(), "full.*/" + pr.getId() + "/webrev.01"));
             assertTrue(archiveContains(archiveFolder.path(), "inc.*/" + pr.getId() + "/webrev.00-01"));
-            assertTrue(archiveContains(archiveFolder.path(), "Updated full patch"));
+            assertTrue(archiveContains(archiveFolder.path(), "Patch"));
             assertTrue(archiveContains(archiveFolder.path(), "Fetch"));
             assertTrue(archiveContains(archiveFolder.path(), "Fixing"));
 
             // The webrev comment should be updated
             var comments = pr.getComments();
@@ -858,11 +858,11 @@
             // The archive should reference the rebased push
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
             assertTrue(archiveContains(archiveFolder.path(), "complete new set of changes"));
             assertTrue(archiveContains(archiveFolder.path(), pr.getId() + "/webrev.01"));
             assertFalse(archiveContains(archiveFolder.path(), "Incremental"));
-            assertTrue(archiveContains(archiveFolder.path(), "Updated full patch"));
+            assertTrue(archiveContains(archiveFolder.path(), "Patch"));
             assertTrue(archiveContains(archiveFolder.path(), "Fetch"));
             assertTrue(archiveContains(archiveFolder.path(), "Original msg"));
             assertTrue(archiveContains(archiveFolder.path(), "Replaced msg"));
 
             // The webrev comment should be updated
