diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -638,12 +638,11 @@
             }
             return Optional.empty();
         }
     }
 
-    @Override
-    public List<FileEntry> files(Hash hash, List<Path> paths) throws IOException {
+    private List<FileEntry> allFiles(Hash hash, List<Path> paths) throws IOException {
         var ext = Files.createTempFile("ext", ".py");
         copyResource(EXT_PY, ext);
 
         var include = new HashSet<>(paths);
 
@@ -664,10 +663,30 @@
             }
             return entries;
         }
     }
 
+    @Override
+    public List<FileEntry> files(Hash hash, List<Path> paths) throws IOException {
+        if (paths.isEmpty()) {
+            return allFiles(hash, paths);
+        }
+
+        var entries = new ArrayList<FileEntry>();
+        var batchSize = 64;
+        var start = 0;
+        while (start < paths.size()) {
+            var end = start + batchSize;
+            if (end > paths.size()) {
+                end = paths.size();
+            }
+            entries.addAll(allFiles(hash, paths.subList(start, end)));
+            start = end;
+        }
+        return entries;
+    }
+
     @Override
     public List<StatusEntry> status(Hash from, Hash to) throws IOException {
         var ext = Files.createTempFile("ext", ".py");
         copyResource(EXT_PY, ext);
 
@@ -936,15 +955,32 @@
         try (var p = capture("hg", "move", from.toString(), to.toString())) {
             await(p);
         }
     }
 
-    @Override
-    public void remove(List<Path> paths) throws IOException {
-        var cmd = new ArrayList<>(List.of("hg", "rm"));
-        for (var p : paths) {
-            cmd.add(p.toString());
+    @FunctionalInterface
+    private static interface Operation {
+        void execute(List<Path> args) throws IOException;
+    }
+
+    private void batch(Operation op, List<Path> args) throws IOException {
+        var batchSize = 64;
+        var start = 0;
+        while (start < args.size()) {
+            var end = start + batchSize;
+            if (end > args.size()) {
+                end = args.size();
+            }
+            op.execute(args.subList(start, end));
+            start = end;
+        }
+    }
+
+    private void addAll(List<Path> paths) throws IOException {
+        var cmd = new ArrayList<>(List.of("hg", "add"));
+        for (var path : paths) {
+            cmd.add(path.toString());
         }
         try (var p = capture(cmd)) {
             await(p);
         }
     }
@@ -947,15 +983,14 @@
         try (var p = capture(cmd)) {
             await(p);
         }
     }
 
-    @Override
-    public void add(List<Path> paths) throws IOException {
-        var cmd = new ArrayList<>(List.of("hg", "add"));
-        for (var p : paths) {
-            cmd.add(p.toString());
+    private void removeAll(List<Path> paths) throws IOException {
+        var cmd = new ArrayList<>(List.of("hg", "rm"));
+        for (var path : paths) {
+            cmd.add(path.toString());
         }
         try (var p = capture(cmd)) {
             await(p);
         }
     }
@@ -958,10 +993,21 @@
         try (var p = capture(cmd)) {
             await(p);
         }
     }
 
+
+    @Override
+    public void remove(List<Path> paths) throws IOException {
+        batch(this::removeAll, paths);
+    }
+
+    @Override
+    public void add(List<Path> paths) throws IOException {
+        batch(this::addAll, paths);
+    }
+
     @Override
     public void addremove() throws IOException {
         try (var p = capture("hg", "addremove")) {
             await(p);
         }
