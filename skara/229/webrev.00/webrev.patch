diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
@@ -107,11 +107,11 @@
 
         for (var entry : config.get("issuetrackers").fields()) {
             if (entry.value().contains("jira")) {
                 var jira = entry.value().get("jira");
                 var uri = URIBuilder.base(jira.get("url").asString()).build();
-                ret.put(entry.name(), IssueTrackerFactory.createJiraHost(uri, null));
+                ret.put(entry.name(), IssueTracker.from("jira", uri, null, jira.asObject()));
             } else {
                 throw new ConfigurationError("Host " + entry.name());
             }
         }
 
diff a/forge/src/main/java/org/openjdk/skara/forge/ForgeFactory.java b/forge/src/main/java/org/openjdk/skara/forge/ForgeFactory.java
--- a/forge/src/main/java/org/openjdk/skara/forge/ForgeFactory.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/ForgeFactory.java
@@ -28,11 +28,10 @@
 import java.net.URI;
 import java.util.*;
 import java.util.stream.*;
 
 public interface ForgeFactory {
-
     /**
      * A user-friendly name for the given forge, used for configuration section naming. Should be lower case.
      * @return
      */
     String name();
@@ -45,7 +44,6 @@
 
     static List<ForgeFactory> getForgeFactories() {
         return StreamSupport.stream(ServiceLoader.load(ForgeFactory.class).spliterator(), false)
                             .collect(Collectors.toList());
     }
-
 }
diff a/issuetracker/src/main/java/module-info.java b/issuetracker/src/main/java/module-info.java
--- a/issuetracker/src/main/java/module-info.java
+++ b/issuetracker/src/main/java/module-info.java
@@ -31,6 +31,10 @@
     requires transitive org.openjdk.skara.host;
     requires java.net.http;
     requires java.logging;
 
     exports org.openjdk.skara.issuetracker;
+
+    uses org.openjdk.skara.issuetracker.IssueTrackerFactory;
+
+    provides org.openjdk.skara.issuetracker.IssueTrackerFactory with org.openjdk.skara.issuetracker.jira.JiraIssueTrackerFactory;
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Comment.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Comment.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Comment.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Comment.java
@@ -25,11 +25,10 @@
 import org.openjdk.skara.host.HostUser;
 
 import java.time.ZonedDateTime;
 
 public class Comment {
-
     private final String id;
     private final String body;
     private final HostUser author;
     private final ZonedDateTime createdAt;
     private final ZonedDateTime updatedAt;
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTracker.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTracker.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTracker.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTracker.java
@@ -20,10 +20,23 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.issuetracker;
 
-import org.openjdk.skara.host.Host;
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.json.JSONObject;
+
+import java.net.URI;
 
 public interface IssueTracker extends Host {
     IssueProject project(String name);
+
+    static IssueTracker from(String name, URI uri, Credential credential, JSONObject configuration) {
+        var factory = IssueTrackerFactory.getIssueTrackerFactories().stream()
+                                  .filter(f -> f.name().equals(name))
+                                  .findFirst();
+        if (factory.isEmpty()) {
+            throw new RuntimeException("No issue tracker factory named '" + name + "' found - check module path");
+        }
+        return factory.get().create(uri, credential, configuration);
+    }
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTrackerFactory.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTrackerFactory.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTrackerFactory.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTrackerFactory.java
@@ -20,17 +20,30 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.issuetracker;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.host.Credential;
+import org.openjdk.skara.json.JSONObject;
 
 import java.net.URI;
+import java.util.*;
+import java.util.stream.*;
 
-public class IssueTrackerFactory {
-    public static IssueTracker createJiraHost(URI uri, Credential credential) {
-        if (credential != null) {
-            throw new RuntimeException("authentication not implemented yet");
-        }
-        return new JiraHost(uri);
+public interface IssueTrackerFactory {
+    /**
+     * A user-friendly name for the given issue tracker, used for configuration section naming. Should be lower case.
+     * @return
+     */
+    String name();
+
+    /**
+     * Instantiate an instance of this issue tracker.
+     * @return
+     */
+    IssueTracker create(URI uri, Credential credential, JSONObject configuration);
+
+    static List<IssueTrackerFactory> getIssueTrackerFactories() {
+        return StreamSupport.stream(ServiceLoader.load(IssueTrackerFactory.class).spliterator(), false)
+                            .collect(Collectors.toList());
     }
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraHost.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraHost.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraHost.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.issuetracker;
-
-import org.openjdk.skara.host.*;
-import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.JSON;
-
-import java.net.URI;
-
-public class JiraHost implements IssueTracker {
-    private final URI uri;
-    private final RestRequest request;
-
-    public JiraHost(URI uri) {
-        this.uri = uri;
-
-        var baseApi = URIBuilder.base(uri)
-                                .setPath("/rest/api/2/")
-                                .build();
-        request = new RestRequest(baseApi);
-    }
-
-    URI getUri() {
-        return uri;
-    }
-
-    @Override
-    public boolean isValid() {
-        var version = request.get("serverInfo")
-                             .onError(r -> JSON.object().put("invalid", true))
-                             .execute();
-        return !version.contains("invalid");
-    }
-
-    @Override
-    public IssueProject project(String name) {
-        return new JiraProject(this, request, name);
-    }
-
-    @Override
-    public HostUser user(String username) {
-        throw new RuntimeException("needs authentication; not implemented yet");
-    }
-
-    @Override
-    public HostUser currentUser() {
-        throw new RuntimeException("needs authentication; not implemented yet");
-    }
-
-    @Override
-    public boolean isMemberOf(String groupId, HostUser user) {
-        throw new RuntimeException("not implemented yet");
-    }
-}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraIssue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraIssue.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraIssue.java
+++ /dev/null
@@ -1,146 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.issuetracker;
-
-import org.openjdk.skara.host.*;
-import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.JSONValue;
-
-import java.net.URI;
-import java.time.ZonedDateTime;
-import java.util.List;
-
-public class JiraIssue implements Issue {
-    private final JiraProject jiraProject;
-    private final RestRequest request;
-    private final JSONValue json;
-
-    JiraIssue(JiraProject jiraProject, RestRequest request, JSONValue json) {
-        this.jiraProject = jiraProject;
-        this.request = request;
-        this.json = json;
-    }
-
-    @Override
-    public IssueProject project() {
-        return jiraProject;
-    }
-
-    @Override
-    public String id() {
-        return json.get("key").asString();
-    }
-
-    @Override
-    public HostUser author() {
-        return new HostUser(json.get("fields").get("creator").get("key").asString(),
-                            json.get("fields").get("creator").get("name").asString(),
-                            json.get("fields").get("creator").get("displayName").asString());
-    }
-
-    @Override
-    public String title() {
-        return json.get("fields").get("summary").asString();
-    }
-
-    @Override
-    public void setTitle(String title) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public String body() {
-        if (json.get("fields").get("description").isNull()) {
-            return "";
-        } else {
-            return json.get("fields").get("description").asString();
-        }
-    }
-
-    @Override
-    public void setBody(String body) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public List<Comment> comments() {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public Comment addComment(String body) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public Comment updateComment(String id, String body) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public ZonedDateTime createdAt() {
-        return ZonedDateTime.parse(json.get("fields").get("created").asString());
-    }
-
-    @Override
-    public ZonedDateTime updatedAt() {
-        return ZonedDateTime.parse(json.get("fields").get("updated").asString());
-    }
-
-    @Override
-    public void setState(State state) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public void addLabel(String label) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public void removeLabel(String label) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public List<String> labels() {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public URI webUrl() {
-        return URIBuilder.base(jiraProject.webUrl())
-                         .setPath("/browse/" + id())
-                         .build();
-    }
-
-    @Override
-    public List<HostUser> assignees() {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public void setAssignees(List<HostUser> assignees) {
-        throw new RuntimeException("not implemented yet");
-    }
-}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraProject.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.issuetracker;
-
-import org.openjdk.skara.json.JSON;
-import org.openjdk.skara.network.*;
-
-import java.net.URI;
-import java.util.*;
-
-public class JiraProject implements IssueProject {
-    private final JiraHost jiraHost;
-    private final String projectName;
-    private final RestRequest request;
-
-    JiraProject(JiraHost host, RestRequest request, String projectName) {
-        this.jiraHost = host;
-        this.projectName = projectName;
-        this.request = request;
-    }
-
-    @Override
-    public IssueTracker issueTracker() {
-        return jiraHost;
-    }
-
-    @Override
-    public URI webUrl() {
-        return URIBuilder.base(jiraHost.getUri()).setPath("/projects/" + projectName).build();
-    }
-
-    @Override
-    public Issue createIssue(String title, List<String> body) {
-        throw new RuntimeException("needs authentication; not implemented yet");
-    }
-
-    @Override
-    public Optional<Issue> issue(String id) {
-        if (id.indexOf('-') < 0) {
-            id = projectName.toUpperCase() + "-" + id;
-        }
-        var issue = request.get("issue/" + id)
-                           .onError(r -> r.statusCode() == 404 ? JSON.object().put("NOT_FOUND", true) : null)
-                           .execute();
-        if (!issue.contains("NOT_FOUND")) {
-            return Optional.of(new JiraIssue(this, request, issue));
-        } else {
-            return Optional.empty();
-        }
-    }
-
-    @Override
-    public List<Issue> issues() {
-        var ret = new ArrayList<Issue>();
-        var issues = request.post("search")
-                            .body("jql", "project = " + projectName + " AND status in (Open, New)")
-                            .execute();
-        for (var issue : issues.get("issues").asArray()) {
-            ret.add(new JiraIssue(this, request, issue));
-        }
-        return ret;
-    }
-}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
@@ -0,0 +1,76 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker.jira;
+
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.network.*;
+import org.openjdk.skara.json.JSON;
+
+import java.net.URI;
+
+public class JiraHost implements IssueTracker {
+    private final URI uri;
+    private final RestRequest request;
+
+    JiraHost(URI uri) {
+        this.uri = uri;
+
+        var baseApi = URIBuilder.base(uri)
+                                .setPath("/rest/api/2/")
+                                .build();
+        request = new RestRequest(baseApi);
+    }
+
+    URI getUri() {
+        return uri;
+    }
+
+    @Override
+    public boolean isValid() {
+        var version = request.get("serverInfo")
+                             .onError(r -> JSON.object().put("invalid", true))
+                             .execute();
+        return !version.contains("invalid");
+    }
+
+    @Override
+    public IssueProject project(String name) {
+        return new JiraProject(this, request, name);
+    }
+
+    @Override
+    public HostUser user(String username) {
+        throw new RuntimeException("needs authentication; not implemented yet");
+    }
+
+    @Override
+    public HostUser currentUser() {
+        throw new RuntimeException("needs authentication; not implemented yet");
+    }
+
+    @Override
+    public boolean isMemberOf(String groupId, HostUser user) {
+        throw new RuntimeException("not implemented yet");
+    }
+}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
@@ -0,0 +1,147 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker.jira;
+
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.network.*;
+import org.openjdk.skara.json.JSONValue;
+
+import java.net.URI;
+import java.time.ZonedDateTime;
+import java.util.List;
+
+public class JiraIssue implements Issue {
+    private final JiraProject jiraProject;
+    private final RestRequest request;
+    private final JSONValue json;
+
+    JiraIssue(JiraProject jiraProject, RestRequest request, JSONValue json) {
+        this.jiraProject = jiraProject;
+        this.request = request;
+        this.json = json;
+    }
+
+    @Override
+    public IssueProject project() {
+        return jiraProject;
+    }
+
+    @Override
+    public String id() {
+        return json.get("key").asString();
+    }
+
+    @Override
+    public HostUser author() {
+        return new HostUser(json.get("fields").get("creator").get("key").asString(),
+                            json.get("fields").get("creator").get("name").asString(),
+                            json.get("fields").get("creator").get("displayName").asString());
+    }
+
+    @Override
+    public String title() {
+        return json.get("fields").get("summary").asString();
+    }
+
+    @Override
+    public void setTitle(String title) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public String body() {
+        if (json.get("fields").get("description").isNull()) {
+            return "";
+        } else {
+            return json.get("fields").get("description").asString();
+        }
+    }
+
+    @Override
+    public void setBody(String body) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public List<Comment> comments() {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public Comment addComment(String body) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public Comment updateComment(String id, String body) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public ZonedDateTime createdAt() {
+        return ZonedDateTime.parse(json.get("fields").get("created").asString());
+    }
+
+    @Override
+    public ZonedDateTime updatedAt() {
+        return ZonedDateTime.parse(json.get("fields").get("updated").asString());
+    }
+
+    @Override
+    public void setState(State state) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void addLabel(String label) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void removeLabel(String label) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public List<String> labels() {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public URI webUrl() {
+        return URIBuilder.base(jiraProject.webUrl())
+                         .setPath("/browse/" + id())
+                         .build();
+    }
+
+    @Override
+    public List<HostUser> assignees() {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void setAssignees(List<HostUser> assignees) {
+        throw new RuntimeException("not implemented yet");
+    }
+}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssueTrackerFactory.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssueTrackerFactory.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssueTrackerFactory.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker.jira;
+
+import org.openjdk.skara.host.Credential;
+import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.json.JSONObject;
+
+import java.net.URI;
+
+public class JiraIssueTrackerFactory implements IssueTrackerFactory {
+    @Override
+    public String name() {
+        return "jira";
+    }
+
+    @Override
+    public IssueTracker create(URI uri, Credential credential, JSONObject configuration) {
+        if (credential == null) {
+            return new JiraHost(uri);
+        } else {
+            throw new RuntimeException("authentication not implemented yet");
+        }
+    }
+}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
@@ -0,0 +1,84 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker.jira;
+
+import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.json.JSON;
+import org.openjdk.skara.network.*;
+
+import java.net.URI;
+import java.util.*;
+
+public class JiraProject implements IssueProject {
+    private final JiraHost jiraHost;
+    private final String projectName;
+    private final RestRequest request;
+
+    JiraProject(JiraHost host, RestRequest request, String projectName) {
+        this.jiraHost = host;
+        this.projectName = projectName;
+        this.request = request;
+    }
+
+    @Override
+    public IssueTracker issueTracker() {
+        return jiraHost;
+    }
+
+    @Override
+    public URI webUrl() {
+        return URIBuilder.base(jiraHost.getUri()).setPath("/projects/" + projectName).build();
+    }
+
+    @Override
+    public Issue createIssue(String title, List<String> body) {
+        throw new RuntimeException("needs authentication; not implemented yet");
+    }
+
+    @Override
+    public Optional<Issue> issue(String id) {
+        if (id.indexOf('-') < 0) {
+            id = projectName.toUpperCase() + "-" + id;
+        }
+        var issue = request.get("issue/" + id)
+                           .onError(r -> r.statusCode() == 404 ? JSON.object().put("NOT_FOUND", true) : null)
+                           .execute();
+        if (!issue.contains("NOT_FOUND")) {
+            return Optional.of(new JiraIssue(this, request, issue));
+        } else {
+            return Optional.empty();
+        }
+    }
+
+    @Override
+    public List<Issue> issues() {
+        var ret = new ArrayList<Issue>();
+        var issues = request.post("search")
+                            .body("jql", "project = " + projectName + " AND status in (Open, New)")
+                            .execute();
+        for (var issue : issues.get("issues").asArray()) {
+            ret.add(new JiraIssue(this, request, issue));
+        }
+        return ret;
+    }
+}
