diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
@@ -67,15 +68,21 @@
                 if (github.contains("url")) {
                     uri = URIBuilder.base(github.get("url").asString()).build();
                 } else {
                     uri = URIBuilder.base("https://github.com/").build();
                 }
+                URI webUri;
+                if (github.contains("weburl")) {
+                    webUri = URIBuilder.base(github.get("weburl").asString()).build();
+                } else {
+                    webUri = uri;
+                }
 
                 var keyFile = cwd.resolve(github.get("app").get("key").asString());
-                ret.put(entry.name(), HostFactory.createGitHubHost(uri, keyFile.toString(),
-                                                                   github.get("app").get("id").asString(), github.get("app").get("installation").asString()));
+                ret.put(entry.name(), HostFactory.createGitHubHost(uri, webUri, keyFile.toString(),
+                                                                   github.get("app").get("id").asString(),
+                                                                   github.get("app").get("installation").asString()));
             } else {
                 throw new ConfigurationError("Host " + entry.name());
             }
         }
 
diff a/host/src/main/java/org/openjdk/skara/host/HostFactory.java b/host/src/main/java/org/openjdk/skara/host/HostFactory.java
--- a/host/src/main/java/org/openjdk/skara/host/HostFactory.java
+++ b/host/src/main/java/org/openjdk/skara/host/HostFactory.java
@@ -26,13 +26,13 @@
 import org.openjdk.skara.host.gitlab.GitLabHost;
 
 import java.net.URI;
 
 public class HostFactory {
-    public static Host createGitHubHost(URI uri, String keyFile, String issue, String id) {
+    public static Host createGitHubHost(URI uri, URI webUri, String keyFile, String issue, String id) {
         var app = new GitHubApplication(keyFile, issue, id);
-        return new GitHubHost(uri, app);
+        return new GitHubHost(uri, app, webUri);
     }
 
     public static Host createGitHubHost(URI uri, PersonalAccessToken pat) {
         if (pat != null) {
             return new GitHubHost(uri, pat);
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
@@ -29,16 +30,18 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 
 public class GitHubHost implements Host {
     private final URI uri;
+    private final URI webUri;
     private final GitHubApplication application;
     private final PersonalAccessToken pat;
     private final RestRequest request;
 
-    public GitHubHost(URI uri, GitHubApplication application) {
+    public GitHubHost(URI uri, GitHubApplication application, URI webUri) {
         this.uri = uri;
+        this.webUri = webUri;
         this.application = application;
         this.pat = null;
 
         var baseApi = URIBuilder.base(uri)
                 .appendSubDomain("api")
@@ -52,10 +54,11 @@
                 "Accept", "application/vnd.github.antiope-preview+json"));
     }
 
     public GitHubHost(URI uri, PersonalAccessToken pat) {
         this.uri = uri;
+        this.webUri = uri;
         this.pat = pat;
         this.application = null;
 
         var baseApi = URIBuilder.base(uri)
                                 .appendSubDomain("api")
@@ -66,10 +69,11 @@
                 "Authorization", "token " + pat.token()));
     }
 
     public GitHubHost(URI uri) {
         this.uri = uri;
+        this.webUri = uri;
         this.pat = null;
         this.application = null;
 
         var baseApi = URIBuilder.base(uri)
                                 .appendSubDomain("api")
@@ -81,10 +85,14 @@
 
     public URI getURI() {
         return uri;
     }
 
+    URI getWebURI() {
+        return webUri;
+    }
+
     String getInstallationToken() {
         if (application != null) {
             return application.getInstallationToken();
         } else {
             return pat.token();
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
@@ -132,17 +132,17 @@
                 .build();
     }
 
     @Override
     public URI getWebUrl() {
-        return URIBuilder.base(gitHubHost.getURI())
+        return URIBuilder.base(gitHubHost.getWebURI())
                          .setPath("/" + repository)
                          .build();    }
 
     @Override
     public URI getWebUrl(Hash hash) {
-        return URIBuilder.base(gitHubHost.getURI())
+        return URIBuilder.base(gitHubHost.getWebURI())
                 .setPath("/" + repository + "/commit/" + hash.abbreviate())
                 .build();
     }
 
     @Override
diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -65,10 +65,11 @@
         public Host createNewHost(int userIndex) {
             var hostUri = URIBuilder.base(config.get("host").asString()).build();
             var apps = config.get("apps").asArray();
             var key = configDir.resolve(apps.get(userIndex).get("key").asString());
             return HostFactory.createGitHubHost(hostUri,
+                                                hostUri,
                                                 key.toString(),
                                                 apps.get(userIndex).get("id").asString(),
                                                 apps.get(userIndex).get("installation").asString());
         }
 
