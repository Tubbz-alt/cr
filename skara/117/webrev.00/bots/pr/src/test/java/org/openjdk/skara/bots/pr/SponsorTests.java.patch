diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SponsorTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SponsorTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SponsorTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SponsorTests.java
@@ -109,10 +109,12 @@
             }
 
             assertEquals("Generated Reviewer 1", headCommit.committer().name());
             assertEquals("integrationreviewer1@openjdk.java.net", headCommit.committer().email());
             assertTrue(pr.getLabels().contains("integrated"));
+            assertFalse(pr.getLabels().contains("ready"));
+            assertFalse(pr.getLabels().contains("sponsor"));
         }
     }
 
     @Test
     void sponsorNonAuthor(TestInfo testInfo) throws IOException {
@@ -301,15 +303,16 @@
             assertEquals(1, error);
 
             // Flag it as ready for integration again
             pr.addComment("/integrate");
             TestBotRunner.runPeriodicItems(mergeBot);
+            assertTrue(pr.getLabels().contains("sponsor"));
 
             // It should now be possible to sponsor
             reviewerPr.addComment("/sponsor");
             TestBotRunner.runPeriodicItems(mergeBot);
-            assertTrue(pr.getLabels().contains("sponsor"));
+            assertFalse(pr.getLabels().contains("sponsor"));
 
             // The bot should have pushed the commit
             var pushed = pr.getComments().stream()
                            .filter(comment -> comment.body().contains("Pushed as commit"))
                            .count();
