diff a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
--- a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
+++ b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
@@ -392,11 +392,12 @@
                 }
 
                 if (error == null) {
                     log.info("Pushing successful merge");
                     if (!isAncestor) {
-                        repo.commit("Merge", "duke", "duke@openjdk.org");
+                        repo.commit("Automatic merge of '" + fromBranch + "' into '" + toBranch + "'",
+                                "duke", "duke@openjdk.org");
                     }
                     repo.push(toBranch, target.url().toString(), false);
                 } else {
                     log.info("Got error: " + error.getMessage());
                     log.info("Aborting unsuccesful merge");
diff a/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java b/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
--- a/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
+++ b/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
@@ -107,11 +107,11 @@
             assertTrue(hashes.contains(toHashC));
 
             var known = Set.of(toHashA, fromHashB, toHashC);
             var merge = toCommits.stream().filter(c -> !known.contains(c.hash())).findAny().get();
             assertTrue(merge.isMerge());
-            assertEquals(List.of("Merge"), merge.message());
+            assertEquals(List.of(Automatic merge of 'master' into 'master'), merge.message());
             assertEquals("duke", merge.author().name());
             assertEquals("duke@openjdk.org", merge.author().email());
 
             assertEquals(0, toHostedRepo.pullRequests().size());
         }
@@ -536,11 +536,11 @@
             assertTrue(hashes.contains(toHashC));
 
             var known = Set.of(toHashA, fromHashB, toHashC);
             var merge = toCommits.stream().filter(c -> !known.contains(c.hash())).findAny().get();
             assertTrue(merge.isMerge());
-            assertEquals(List.of("Merge"), merge.message());
+            assertEquals(List.of(Automatic merge of 'master' into 'master'), merge.message());
             assertEquals("duke", merge.author().name());
             assertEquals("duke@openjdk.org", merge.author().email());
 
             assertEquals(0, toHostedRepo.pullRequests().size());
 
@@ -651,11 +651,11 @@
             assertTrue(hashes.contains(toHashC));
 
             var known = Set.of(toHashA, fromHashB, toHashC);
             var merge = toCommits.stream().filter(c -> !known.contains(c.hash())).findAny().get();
             assertTrue(merge.isMerge());
-            assertEquals(List.of("Merge"), merge.message());
+            assertEquals(List.of(Automatic merge of 'master' into 'master'), merge.message());
             assertEquals("duke", merge.author().name());
             assertEquals("duke@openjdk.org", merge.author().email());
 
             assertEquals(0, toHostedRepo.pullRequests().size());
 
@@ -772,11 +772,11 @@
             assertTrue(hashes.contains(toHashC));
 
             var known = Set.of(toHashA, fromHashB, toHashC);
             var merge = toCommits.stream().filter(c -> !known.contains(c.hash())).findAny().get();
             assertTrue(merge.isMerge());
-            assertEquals(List.of("Merge"), merge.message());
+            assertEquals(List.of(Automatic merge of 'master' into 'master'), merge.message());
             assertEquals("duke", merge.author().name());
             assertEquals("duke@openjdk.org", merge.author().email());
 
             assertEquals(0, toHostedRepo.pullRequests().size());
 
@@ -893,11 +893,11 @@
             assertTrue(hashes.contains(toHashC));
 
             var known = Set.of(toHashA, fromHashB, toHashC);
             var merge = toCommits.stream().filter(c -> !known.contains(c.hash())).findAny().get();
             assertTrue(merge.isMerge());
-            assertEquals(List.of("Merge"), merge.message());
+            assertEquals(List.of(Automatic merge of 'master' into 'master'), merge.message());
             assertEquals("duke", merge.author().name());
             assertEquals("duke@openjdk.org", merge.author().email());
 
             assertEquals(0, toHostedRepo.pullRequests().size());
 
@@ -1014,11 +1014,11 @@
             assertTrue(hashes.contains(toHashC));
 
             var known = Set.of(toHashA, fromHashB, toHashC);
             var merge = toCommits.stream().filter(c -> !known.contains(c.hash())).findAny().get();
             assertTrue(merge.isMerge());
-            assertEquals(List.of("Merge"), merge.message());
+            assertEquals(List.of(Automatic merge of 'master' into 'master'), merge.message());
             assertEquals("duke", merge.author().name());
             assertEquals("duke@openjdk.org", merge.author().email());
 
             assertEquals(0, toHostedRepo.pullRequests().size());
 
