diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
@@ -210,6 +210,10 @@
     }
 
     public Optional<String> upstreamFor(Branch b) throws IOException {
         return Optional.empty();
     }
+
+    public List<StatusEntry> status(Hash from, Hash to) throws IOException {
+        return Collections.emptyList();
+    }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
@@ -65,10 +65,11 @@
     default List<FileEntry> files(Hash h, Path... paths) throws IOException {
         return files(h, Arrays.asList(paths));
     }
 
     void dump(FileEntry entry, Path to) throws IOException;
+    List<StatusEntry> status(Hash from, Hash to) throws IOException;
     Diff diff(Hash base, Hash head) throws IOException;
     Diff diff(Hash head) throws IOException;
     List<String> config(String key) throws IOException;
     Repository copyTo(Path destination) throws IOException;
     String pullPath(String remote) throws IOException;
diff a/vcs/src/main/java/org/openjdk/skara/vcs/StatusEntry.java b/vcs/src/main/java/org/openjdk/skara/vcs/StatusEntry.java
--- /dev/null
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/StatusEntry.java
@@ -0,0 +1,98 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.vcs;
+
+import org.openjdk.skara.vcs.tools.PatchHeader;
+import java.nio.file.Path;
+import java.util.Objects;
+import java.util.Optional;
+
+public class StatusEntry {
+    public static final class Info {
+        private final Path path;
+        private final FileType type;
+        private final Hash hash;
+
+        private Info(Path path, FileType type, Hash hash) {
+            this.path = path;
+            this.type = type;
+            this.hash = hash;
+        }
+
+        private Info(Patch.Info info) {
+            this.path = info.path().orElse(null);
+            this.type = info.type().orElse(null);
+            this.hash = info.hash();
+        }
+
+        public Optional<Path> path() {
+            return Optional.ofNullable(path);
+        }
+
+        public Optional<FileType> type() {
+            return Optional.ofNullable(type);
+        }
+
+        public Hash hash() {
+            return hash;
+        }
+    }
+
+    private final Info source;
+    private final Info target;
+
+    private Status status;
+
+    public StatusEntry(Path sourcePath, FileType sourceFileType, Hash sourceHash,
+                       Path targetPath, FileType targetFileType, Hash targetHash,
+                       Status status) {
+        this.source = new Info(sourcePath, sourceFileType, sourceHash);
+        this.target = new Info(targetPath, targetFileType, targetHash);
+        this.status = status;
+    }
+
+    public StatusEntry(Patch patch) {
+        this.source = new Info(patch.source());
+        this.target = new Info(patch.target());
+        this.status = patch.status();
+    }
+
+    public Info source() {
+        return source;
+    }
+
+    public Info target() {
+        return target;
+    }
+
+    public Status status() {
+        return status;
+    }
+
+    public static StatusEntry fromRawLine(String line) {
+        var h = PatchHeader.fromRawLine(line);
+        return new StatusEntry(h.sourcePath(), h.sourceFileType(), h.sourceHash(),
+                               h.targetPath(), h.targetFileType(), h.targetHash(),
+                               h.status());
+    }
+}
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -739,10 +739,22 @@
             Files.createDirectories(to.getParent());
             Files.move(path, to, StandardCopyOption.REPLACE_EXISTING);
         }
     }
 
+    @Override
+    public List<StatusEntry> status(Hash from, Hash to) throws IOException {
+        try (var p = capture("git", "diff", "--raw", "--find-renames=99%", "--find-copies=99%", "--find-copies-harder", "--no-abbrev", "--no-color", from.hex(), to.hex())) {
+            var res = await(p);
+            var entries = new ArrayList<StatusEntry>();
+            for (var line : res.stdout()) {
+                entries.add(StatusEntry.fromRawLine(line));
+            }
+            return entries;
+        }
+    }
+
     @Override
     public Diff diff(Hash from) throws IOException {
         return diff(from, null);
     }
 
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -664,10 +664,26 @@
             }
             return entries;
         }
     }
 
+    @Override
+    public List<StatusEntry> status(Hash from, Hash to) throws IOException {
+        var ext = Files.createTempFile("ext", ".py");
+        copyResource(EXT_PY, ext);
+
+        try (var p = capture("hg", "--config", "extensions.diff-git-raw=" + ext.toAbsolutePath().toString(),
+                                               "diff-git-raw", from.hex(), to.hex())) {
+            var res = await(p);
+            var entries = new ArrayList<StatusEntry>();
+            for (var line : res.stdout()) {
+                entries.add(StatusEntry.fromRawLine(line));
+            }
+            return entries;
+        }
+    }
+
     @Override
     public void dump(FileEntry entry, Path to) throws IOException {
         var output = to.toAbsolutePath();
         try (var p = capture("hg", "cat", "--output=" + output.toString(),
                                           "--rev=" + entry.commit(),
@@ -692,11 +708,11 @@
     public Diff diff(Hash from, Hash to) throws IOException {
         var ext = Files.createTempFile("ext", ".py");
         copyResource(EXT_PY, ext);
 
         var cmd = new ArrayList<>(List.of("hg", "--config", "extensions.diff-git-raw=" + ext.toAbsolutePath(),
-                                                "diff-git-raw", from.hex()));
+                                                "diff-git-raw", "--patch", from.hex()));
         if (to != null) {
             cmd.add(to.hex());
         }
 
         var p = start(cmd);
diff a/vcs/src/main/resources/ext.py b/vcs/src/main/resources/ext.py
--- a/vcs/src/main/resources/ext.py
+++ b/vcs/src/main/resources/ext.py
@@ -63,11 +63,11 @@
     if mercurial.util.version().startswith("5"):
         return mercurial.match.exact(files, badfn)
     else:
         return mercurial.match.exact(root, cwd, files, badfn)
 
-def _diff_git_raw(repo, ctx1, ctx2, modified, added, removed):
+def _diff_git_raw(repo, ctx1, ctx2, modified, added, removed, showPatch):
     nullHash = '0' * 40
     removed_copy = set(removed)
 
     for path in added:
         fctx = ctx2.filectx(path)
@@ -98,16 +98,17 @@
                 writeln(':{} {} {} {} {}{}\t{}\t{}'.format(mode(parent), mode(fctx), nullHash, nullHash, operation, score, old_path, path))
         elif path in removed_copy:
             fctx = ctx1.filectx(path)
             writeln(':{} 000000 {} {} D\t{}'.format(mode(fctx), nullHash, nullHash, path))
 
-    writeln('')
+    if showPatch:
+        writeln('')
 
-    match = _match_exact(repo.root, repo.getcwd(), list(modified) + list(added) + list(removed_copy))
-    opts = mercurial.mdiff.diffopts(git=True, nodates=True, context=0, showfunc=True)
-    for d in mercurial.patch.diff(repo, ctx1.node(), ctx2.node(), match=match, opts=opts):
-        sys.stdout.write(d)
+        match = _match_exact(repo.root, repo.getcwd(), list(modified) + list(added) + list(removed_copy))
+        opts = mercurial.mdiff.diffopts(git=True, nodates=True, context=0, showfunc=True)
+        for d in mercurial.patch.diff(repo, ctx1.node(), ctx2.node(), match=match, opts=opts):
+            sys.stdout.write(d)
 
 def really_differs(repo, p1, p2, ctx, files):
     # workaround bug in hg (present since forever):
     # `hg status` can, for merge commits, report a file as modififed between one parent
     # and the merge even though it isn't. `hg diff` works correctly, so remove any "modified"
@@ -146,11 +147,11 @@
     revrange = mercurial.scmutil.revrange
 else:
     revsingle = mercurial.cmdutil.revsingle
     revrange = mercurial.cmdutil.revrange
 
-@command('diff-git-raw', [], 'hg diff-git-raw rev1 [rev2]')
+@command('diff-git-raw', [('', 'patch', False, '')], 'hg diff-git-raw rev1 [rev2]')
 def diff_git_raw(ui, repo, rev1, rev2=None, **opts):
     ctx1 = revsingle(repo, rev1)
 
     if rev2 != None:
         ctx2 = revsingle(repo, rev2)
@@ -158,11 +159,11 @@
     else:
         ctx2 = mercurial.context.workingctx(repo)
         status = repo.status(ctx1)
 
     modified, added, removed = [set(l) for l in status[:3]]
-    _diff_git_raw(repo, ctx1, ctx2, modified, added, removed)
+    _diff_git_raw(repo, ctx1, ctx2, modified, added, removed, opts['patch'])
 
 @command('log-git', [('', 'reverse', False, ''), ('l', 'limit', -1, '')],  'hg log-git <revisions>')
 def log_git(ui, repo, revs=None, **opts):
     if len(repo) == 0:
         return
@@ -181,11 +182,11 @@
         __dump_metadata(ctx)
         parents = ctx.parents()
 
         if len(parents) == 1:
             modified, added, removed = [set(l) for l in repo.status(parents[0], ctx)[:3]]
-            _diff_git_raw(repo, parents[0], ctx, modified, added, removed)
+            _diff_git_raw(repo, parents[0], ctx, modified, added, removed, True)
         else:
             p1 = parents[0]
             p2 = parents[1]
 
             modified_p1, added_p1, removed_p1 = [set(l) for l in repo.status(p1, ctx)[:3]]
@@ -203,13 +204,13 @@
             combined_modified_p1 = really_differs(repo, p1, p2, ctx, combined_modified_p1)
             combined_added_p1 = really_differs(repo, p1, p2, ctx, combined_added_p1)
             combined_modified_p2 = really_differs(repo, p1, p2, ctx, combined_modified_p2)
             combined_added_p2 = really_differs(repo, p1, p2, ctx, combined_added_p2)
 
-            _diff_git_raw(repo, p1, ctx, combined_modified_p1, combined_added_p1, removed_both)
+            _diff_git_raw(repo, p1, ctx, combined_modified_p1, combined_added_p1, removed_both, True)
             writeln('#@!_-=&')
-            _diff_git_raw(repo, p2, ctx, combined_modified_p2, combined_added_p2, removed_both)
+            _diff_git_raw(repo, p2, ctx, combined_modified_p2, combined_added_p2, removed_both, True)
 
         i += 1
         if i == limit:
             break
 
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -1659,6 +1659,36 @@
             r.dump(readme, tmp);
             assertEquals("Hello\n", Files.readString(tmp));
             Files.delete(tmp);
         }
     }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testStatus(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var r = Repository.init(dir.path(), vcs);
+            assertTrue(r.isClean());
+
+            var f = dir.path().resolve("README");
+            Files.writeString(f, "Hello\n");
+            r.add(f);
+            var initial = r.commit("Initial commit", "duke", "duke@openjdk.org");
+
+            var f2 = dir.path().resolve("CONTRIBUTING");
+            Files.writeString(f2, "Goodbye\n");
+            r.add(f2);
+            var second = r.commit("Second commit", "duke", "duke@openjdk.org");
+
+            var entries = r.status(initial, second);
+            assertEquals(1, entries.size());
+            var entry = entries.get(0);
+            assertTrue(entry.status().isAdded());
+            assertTrue(entry.source().path().isEmpty());
+            assertTrue(entry.source().type().isEmpty());
+
+            assertTrue(entry.target().path().isPresent());
+            assertEquals(Path.of("CONTRIBUTING"), entry.target().path().get());
+            assertTrue(entry.target().type().get().isRegular());
+        }
+    }
 }
