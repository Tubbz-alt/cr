diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
@@ -3,10 +3,11 @@
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.Comment;
 import org.openjdk.skara.vcs.*;
 
+import java.io.IOException;
 import java.net.URI;
 import java.time.ZonedDateTime;
 import java.util.*;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
@@ -57,11 +58,22 @@
                                     if (lastBase.equals(base)) {
                                         var incrementalWebrev = webrevGenerator.generate(lastHead, head, String.format("%02d-%02d", index - 1, index));
                                         webrevNotification.notify(incrementalWebrev, index, false);
                                         return ArchiveMessages.composeIncrementalFooter(pr, localRepo, fullWebrev, incrementalWebrev, head, lastHead);
                                     } else {
-                                        return ArchiveMessages.composeRebaseFooter(pr, localRepo, fullWebrev, base, head);
+                                        // It may be possible to auto-rebase the last head onto the new base to get an incremental webrev
+                                        try {
+                                            localRepo.checkout(lastHead, true);
+                                            localRepo.rebase(base, "duke", "duke@openjdk.org");
+                                            var rebasedLastHead = localRepo.head();
+                                            var incrementalWebrev = webrevGenerator.generate(rebasedLastHead, head, String.format("%02d-%02d", index - 1, index));
+                                            webrevNotification.notify(incrementalWebrev, index, false);
+                                            return ArchiveMessages.composeIncrementalFooter(pr, localRepo, fullWebrev, incrementalWebrev, head, lastHead);
+                                        } catch (IOException e) {
+                                            // If it doesn't work out we just post a full webrev
+                                            return ArchiveMessages.composeRebaseFooter(pr, localRepo, fullWebrev, base, head);
+                                        }
                                     }
                                });
     }
 
     static ArchiveItem from(PullRequest pr, Comment comment, HostUserToEmailAuthor hostUserToEmailAuthor, ArchiveItem parent) {
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -112,11 +112,19 @@
                 } else {
                     return "Previous commits in this pull request have been removed, probably due to a force push. " +
                             "The incremental views will show differences compared to the previous content of the PR.";
                 }
             } else {
-                return "The pull request has been updated with a new target base due to a merge or a rebase.";
+                try {
+                    localRepository.checkout(lastHead, true);
+                    localRepository.rebase(base, "duke", "duke@openjdk.org");
+                    var rebasedLastHead = localRepository.head();
+                    return "The pull request has been updated with a new target base due to a merge or a rebase. " +
+                            "The incremental webrev excludes the unrelated changes brought in by the merge/rebase.";
+                } catch (IOException e) {
+                    return "The pull request has been updated with a new target base due to a merge or a rebase.";
+                }
             }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -74,11 +74,11 @@
 
     private void pushMbox(Repository localRepo, String message) {
         try {
             localRepo.add(localRepo.root().resolve("."));
             var hash = localRepo.commit(message, bot.emailAddress().fullName().orElseThrow(), bot.emailAddress().address());
-            localRepo.push(hash, bot.archiveRepo().url(), "master");
+            localRepo.push(hash, bot.archiveRepo().url(), bot.archiveRef());
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -1008,10 +1008,92 @@
             }
             assertEquals("Re: [Rev 01] RFR: This is a pull request", conversations.get(0).allMessages().get(1).subject());
         }
     }
 
+    @Test
+    void incrementalAfterRebase(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory();
+             var archiveFolder = new TemporaryDirectory();
+             var listServer = new TestMailmanServer()) {
+            var author = credentials.getHostedRepository();
+            var archive = credentials.getHostedRepository();
+            var listAddress = EmailAddress.parse(listServer.createList("test"));
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.forge().currentUser().id());
+            var sender = EmailAddress.from("test", "test@test.mail");
+            var mlBot = new MailingListBridgeBot(sender, author, archive, "archive",
+                                                 censusBuilder.build(), "master",
+                                                 listAddress, Set.of(), Set.of(),
+                                                 listServer.getArchive(), listServer.getSMTP(),
+                                                 archive, "webrev", Path.of("test"),
+                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 Set.of(), Map.of(),
+                                                 URIBuilder.base("http://issues.test/browse/").build(),
+                                                 Map.of(), Duration.ZERO);
+
+            // Populate the projects repository
+            var reviewFile = Path.of("reviewfile.txt");
+            var localRepo = CheckableRepository.init(tempFolder.path().resolve("first"), author.repositoryType(), reviewFile);
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            localRepo.push(masterHash, author.url(), "master", true);
+            localRepo.push(masterHash, archive.url(), "webrev", true);
+            localRepo.push(masterHash, archive.url(), "archive", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "A line", "Original msg");
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
+            pr.setBody("This is now ready");
+
+            // Run an archive pass
+            TestBotRunner.runPeriodicItems(mlBot);
+            listServer.processIncoming();
+
+            // Push more stuff to master
+            localRepo.checkout(masterHash, true);
+            var unrelatedFile = localRepo.root().resolve("unrelated.txt");
+            Files.writeString(unrelatedFile, "Other things happens in master");
+            localRepo.add(unrelatedFile);
+            var newMasterHash = localRepo.commit("Unrelated change", "duke", "duke@openjdk.org");
+            localRepo.push(newMasterHash, author.url(), "master");
+
+            // And more stuff to the pr branch
+            localRepo.checkout(editHash, true);
+            CheckableRepository.appendAndCommit(localRepo, "Another line", "More updates");
+
+            // Merge master
+            localRepo.merge(newMasterHash);
+            var newEditHash = localRepo.commit("Latest changes from master", "duke", "duke@openjdk.org");
+            localRepo.push(newEditHash, author.url(), "edit");
+
+            // Make sure that the push registered
+            var lastHeadHash = pr.headHash();
+            var refreshCount = 0;
+            do {
+                pr = author.pullRequest(pr.id());
+                if (refreshCount++ > 100) {
+                    fail("The PR did not update after the new push");
+                }
+            } while (pr.headHash().equals(lastHeadHash));
+
+            // Run another archive pass
+            TestBotRunner.runPeriodicItems(mlBot);
+            listServer.processIncoming();
+
+            // The archive should reference the rebased push
+            Repository.materialize(archiveFolder.path(), archive.url(), "archive");
+            assertTrue(archiveContains(archiveFolder.path(), "updated with a new target base"));
+            assertTrue(archiveContains(archiveFolder.path(), "excludes the unrelated changes"));
+            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/webrev.01"));
+            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/webrev.00-01"));
+            assertTrue(archiveContains(archiveFolder.path(), "Original msg"));
+            assertTrue(archiveContains(archiveFolder.path(), "More updates"));
+        }
+    }
+
     @Test
     void skipAddingExistingWebrev(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
