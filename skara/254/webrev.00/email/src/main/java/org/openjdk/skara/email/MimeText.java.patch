diff a/email/src/main/java/org/openjdk/skara/email/MimeText.java b/email/src/main/java/org/openjdk/skara/email/MimeText.java
--- a/email/src/main/java/org/openjdk/skara/email/MimeText.java
+++ b/email/src/main/java/org/openjdk/skara/email/MimeText.java
@@ -22,42 +22,72 @@
  */
 package org.openjdk.skara.email;
 
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.StandardCharsets;
-import java.util.Base64;
+import java.util.*;
 import java.util.regex.Pattern;
 
 public class MimeText {
     private final static Pattern encodePattern = Pattern.compile("([^\\x00-\\x7f]+)");
     private final static Pattern decodePattern = Pattern.compile("=\\?([A-Za-z0-9_.-]+)\\?([bBqQ])\\?(.*?)\\?=");
     private final static Pattern decodeQuotedPrintablePattern = Pattern.compile("=([0-9A-F]{2})");
 
     public static String encode(String raw) {
-        var quoteMatcher = encodePattern.matcher(raw);
-        return quoteMatcher.replaceAll(mo -> "=?UTF-8?B?" + Base64.getEncoder().encodeToString(String.valueOf(mo.group(1)).getBytes(StandardCharsets.UTF_8)) + "?=");
+        var words = raw.split(" ");
+        var encodedWords = new ArrayList<String>();
+        var lastEncoded = false;
+        for (var word : words) {
+            var needsQuotePattern = encodePattern.matcher(word);
+            if (needsQuotePattern.find()) {
+                if (lastEncoded) {
+                    // Spaces between encoded words are ignored, so add an explicit one
+                    encodedWords.add("=?UTF-8?B?IA==?=");
+                }
+                encodedWords.add("=?UTF-8?B?" + Base64.getEncoder().encodeToString(word.getBytes(StandardCharsets.UTF_8)) + "?=");
+                lastEncoded = true;
+            } else {
+                encodedWords.add(word);
+                lastEncoded = false;
+            }
+        }
+        return String.join(" ", encodedWords);
     }
 
     public static String decode(String encoded) {
+        var decoded = new StringBuilder();
         var quotedMatcher = decodePattern.matcher(encoded);
-        return quotedMatcher.replaceAll(mo -> {
-            try {
-                if (mo.group(2).toUpperCase().equals("B")) {
-                    return new String(Base64.getDecoder().decode(mo.group(3)), mo.group(1));
-                } else {
-                    var quotedPrintableMatcher = decodeQuotedPrintablePattern.matcher(mo.group(3));
-                    return quotedPrintableMatcher.replaceAll(qmo -> {
-                        var byteValue = new byte[1];
-                        byteValue[0] = (byte)Integer.parseInt(qmo.group(1), 16);
-                        try {
-                            return new String(byteValue, mo.group(1));
-                        } catch (UnsupportedEncodingException e) {
-                            throw new RuntimeException(e);
-                        }
-                    });
+        var lastMatchEnd = 0;
+        while (quotedMatcher.find()) {
+            if (quotedMatcher.start() > lastMatchEnd) {
+                var separator = encoded.substring(lastMatchEnd, quotedMatcher.start());
+                if (!separator.isBlank()) {
+                    decoded.append(separator);
+                }
+            }
+            if (quotedMatcher.group(2).toUpperCase().equals("B")) {
+                try {
+                    decoded.append(new String(Base64.getDecoder().decode(quotedMatcher.group(3)), quotedMatcher.group(1)));
+                } catch (UnsupportedEncodingException e) {
+                    throw new RuntimeException(e);
                 }
-            } catch (UnsupportedEncodingException e) {
-                throw new RuntimeException(e);
+            } else {
+                var quotedDecodedSpaces = quotedMatcher.group(3).replace("_", " ");
+                var quotedPrintableMatcher = decodeQuotedPrintablePattern.matcher(quotedDecodedSpaces);
+                decoded.append(quotedPrintableMatcher.replaceAll(qmo -> {
+                    var byteValue = new byte[1];
+                    byteValue[0] = (byte)Integer.parseInt(qmo.group(1), 16);
+                    try {
+                        return new String(byteValue, quotedMatcher.group(1));
+                    } catch (UnsupportedEncodingException e) {
+                        throw new RuntimeException(e);
+                    }
+                }));
             }
-        });
+            lastMatchEnd = quotedMatcher.end();
+        }
+        if (lastMatchEnd < encoded.length()) {
+            decoded.append(encoded, lastMatchEnd, encoded.length());
+        }
+        return decoded.toString();
     }
 }
