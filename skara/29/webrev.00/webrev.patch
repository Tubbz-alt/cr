diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -699,10 +699,14 @@
     public Hash head() throws IOException {
         return resolve("HEAD").orElseThrow(() -> new IllegalStateException("HEAD ref is not present"));
     }
 
     public static Optional<Repository> get(Path p) throws IOException {
+        if (!Files.exists(p)) {
+            return Optional.empty();
+        }
+
         var r = new GitRepository(p);
         return r.exists() ? Optional.of(new GitRepository(r.root())) : Optional.empty();
     }
 
     @Override
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -393,10 +393,14 @@
         }
     }
 
     @Override
     public boolean exists() throws IOException {
+        if (!Files.exists(dir)) {
+            return false;
+        }
+
         try {
             root();
             return true;
         } catch (IOException e) {
             return false;
@@ -655,10 +659,14 @@
             return res.stdout();
         }
     }
 
     public static Optional<Repository> get(Path p) throws IOException {
+        if (!Files.exists(p)) {
+            return Optional.empty();
+        }
+
         var r = new HgRepository(p);
         return r.exists() ? Optional.of(new HgRepository(r.root())) : Optional.empty();
     }
 
     @Override
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.vcs;
 
 import org.openjdk.skara.test.TemporaryDirectory;
 
+import org.junit.jupiter.api.Test;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.EnumSource;
 
 import java.io.IOException;
 import java.net.URI;
@@ -1427,7 +1429,13 @@
             r.add(readWriteExecutableFile);
             var hash2 = r.commit("Added read-write executable file", "duke", "duke@openjdk.java.net");
             assertEquals(Optional.of(List.of("echo 'goodbye'")), r.lines(readWriteExecutableFile, hash2));
         }
     }
+
+    @Test
+    void testGetAndExistsOnNonExistingDirectory() throws IOException {
+        var nonExistingDirectory = Path.of("this", "does", "not", "exist");
+        assertEquals(Optional.empty(), Repository.get(nonExistingDirectory));
+        assertEquals(false, Repository.exists(nonExistingDirectory));
+    }
 }
