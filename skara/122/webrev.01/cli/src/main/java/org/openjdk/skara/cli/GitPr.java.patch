diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -154,10 +154,13 @@
         pb.inheritIO();
         await(pb.start());
     }
 
     private static URI toURI(String remotePath) throws IOException {
+        if (remotePath.startsWith("git+")) {
+            remotePath = remotePath.substring(4);
+        }
         if (remotePath.startsWith("http")) {
             return URI.create(remotePath);
         } else if (remotePath.startsWith("ssh://")) {
             var sshURI = URI.create(remotePath);
             return URI.create("https://" + sshURI.getHost() + sshURI.getPath());
@@ -235,10 +238,14 @@
                   .optional(),
             Switch.shortcut("")
                   .fullname("no-decoration")
                   .helptext("Hide any decorations when listing PRs")
                   .optional(),
+            Switch.shortcut("")
+                  .fullname("mercurial")
+                  .helptext("Force use of Mercurial (hg)")
+                  .optional(),
             Switch.shortcut("")
                   .fullname("verbose")
                   .helptext("Turn on verbose output")
                   .optional(),
             Switch.shortcut("")
@@ -274,13 +281,14 @@
             Logging.setup(level);
         }
 
         HttpProxy.setup();
 
+        var isMercurial = arguments.contains("mercurial");
         var cwd = Path.of("").toAbsolutePath();
         var repo = Repository.get(cwd).orElseThrow(() -> new IOException("no git repository found at " + cwd.toString()));
-        var remote = arguments.get("remote").orString("origin");
+        var remote = arguments.get("remote").orString(isMercurial ? "default" : "origin");
         var remotePullPath = repo.pullPath(remote);
         var username = arguments.contains("username") ? arguments.get("username").asString() : null;
         var token = System.getenv("GIT_TOKEN");
         var uri = toURI(remotePullPath);
         var credentials = GitCredentials.fill(uri.getHost(), uri.getPath(), username, token, uri.getScheme());
