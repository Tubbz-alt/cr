diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitIterator.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitIterator.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitIterator.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitIterator.java
@@ -60,10 +60,19 @@
             }
 
             var metadata = GitCommitMetadata.read(reader);
 
             line = reader.readLine();   // read empty line before patches
+            if (line == null || line.equals(commitDelimiter)) {
+                // commit without patches
+                var parentDiffs = new ArrayList<Diff>();
+                for (var parentHash : metadata.parents()) {
+                    parentDiffs.add(new Diff(parentHash, metadata.hash(), Collections.emptyList()));
+                }
+                return new Commit(metadata, parentDiffs);
+            }
+
             if (!line.equals("")) {
                 throw new IllegalStateException("Unexpected line: " + line);
             }
 
             var hash = metadata.hash();
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -1460,6 +1460,67 @@
             assertTrue(patch.target().path().isPresent());
             var path = patch.target().path().get();
             assertEquals(Path.of("hello world.txt"), path);
         }
     }
+
+    @Test
+    void testSingleEmptyCommit() throws IOException, InterruptedException {
+        try (var dir = new TemporaryDirectory()) {
+            var r = Repository.init(dir.path(), VCS.GIT);
+            assertTrue(r.isClean());
+
+            // must ust git directly to be able to pass --allow-empty
+            var pb = new ProcessBuilder("git", "commit", "--message", "An empty commit", "--allow-empty");
+            pb.environment().put("GIT_AUTHOR_NAME", "duke");
+            pb.environment().put("GIT_AUTHOR_EMAIL", "duke@openjdk.org");
+            pb.environment().put("GIT_COMMITTER_NAME", "duke");
+            pb.environment().put("GIT_COMMITTER_EMAIL", "duke@openjdk.org");
+            pb.directory(dir.path().toFile());
+
+            var res = pb.start().waitFor();
+            assertEquals(0, res);
+
+            var commits = r.commits().asList();
+            assertEquals(1, commits.size());
+            var commit = commits.get(0);
+            assertEquals("duke", commit.author().name());
+            assertEquals("duke@openjdk.org", commit.author().email());
+            assertEquals("duke", commit.committer().name());
+            assertEquals("duke@openjdk.org", commit.committer().email());
+            assertEquals(List.of("An empty commit"), commit.message());
+        }
+    }
+
+    @Test
+    void testEmptyCommitWithParent() throws IOException, InterruptedException {
+        try (var dir = new TemporaryDirectory()) {
+            var r = Repository.init(dir.path(), VCS.GIT);
+            assertTrue(r.isClean());
+
+            var f = Files.createFile(dir.path().resolve("hello.txt"));
+            Files.writeString(f, "Hello world\n");
+            r.add(f);
+            r.commit("Initial commit", "duke", "duke@openjdk.org");
+
+            // must ust git directly to be able to pass --allow-empty
+            var pb = new ProcessBuilder("git", "commit", "--message", "An empty commit", "--allow-empty");
+            pb.environment().put("GIT_AUTHOR_NAME", "duke");
+            pb.environment().put("GIT_AUTHOR_EMAIL", "duke@openjdk.org");
+            pb.environment().put("GIT_COMMITTER_NAME", "duke");
+            pb.environment().put("GIT_COMMITTER_EMAIL", "duke@openjdk.org");
+            pb.directory(dir.path().toFile());
+
+            var res = pb.start().waitFor();
+            assertEquals(0, res);
+
+            var commits = r.commits().asList();
+            assertEquals(2, commits.size());
+            var commit = commits.get(0);
+            assertEquals("duke", commit.author().name());
+            assertEquals("duke@openjdk.org", commit.author().email());
+            assertEquals("duke", commit.committer().name());
+            assertEquals("duke@openjdk.org", commit.committer().email());
+            assertEquals(List.of("An empty commit"), commit.message());
+        }
+    }
 }
