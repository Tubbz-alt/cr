diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -87,17 +87,16 @@
         }
 
         return ((names.size() == 1) && emails.size() == 1);
     }
 
-    private Optional<HostedRepository> mergeSourceRepository() {
+    private Optional<String> mergeSourceRepository() {
         var repoMatcher = mergeSourcePattern.matcher(pr.getTitle());
         if (!repoMatcher.matches()) {
             return Optional.empty();
         }
-        var mergeSourceRepo = pr.repository().host().getRepository(repoMatcher.group(1));
-        return Optional.of(mergeSourceRepo);
+        return Optional.of(repoMatcher.group(1));
     }
 
     private Optional<String> mergeSourceBranch() {
         var branchMatcher = mergeSourcePattern.matcher(pr.getTitle());
         if (!branchMatcher.matches()) {
@@ -131,20 +129,25 @@
                 }
 
                 var sourceRepo = mergeSourceRepository();
                 var sourceBranch = mergeSourceBranch();
                 if (sourceBranch.isPresent() && sourceRepo.isPresent()) {
-                    Hash sourceHash = null;
                     try {
-                        sourceHash = prInstance.localRepo().fetch(sourceRepo.get().getUrl(), sourceBranch.get());
-                    } catch (IOException e) {
-                        ret.add("Could not fetch branch `" + sourceBranch.get() + "` from project `" +
-                                        sourceRepo.get().getName() + "` - check that they are correct.");
-                    }
-                    if (sourceHash != null) {
-                        if (!prInstance.localRepo().isAncestor(commits.get(1).hash(), sourceHash)) {
-                            ret.add("The merge contains commits that are not ancestors of the source");
+                        var mergeSourceRepo = pr.repository().host().getRepository(sourceRepo.get());
+                        try {
+                            var sourceHash = prInstance.localRepo().fetch(mergeSourceRepo.getUrl(), sourceBranch.get());
+                            if (!prInstance.localRepo().isAncestor(commits.get(1).hash(), sourceHash)) {
+                                ret.add("The merge contains commits that are not ancestors of the source");
+                            }
+                        } catch (IOException e) {
+                            ret.add("Could not fetch branch `" + sourceBranch.get() + "` from project `" +
+                                            sourceRepo.get() + "` - check that they are correct.");
                         }
+                    } catch (RuntimeException e) {
+                        ret.add("Could not find project `" +
+                                        sourceRepo.get() + "` - check that it is correct.");
                     }
                 } else {
                     ret.add("Could not determine the source for this merge. A Merge PR title must be specified on the format: " +
                             "Merge `project`:`branch` to allow verification of the merge contents.");
                 }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
@@ -73,11 +73,11 @@
             localRepo.add(unrelated);
             localRepo.commit("Unrelated", "some", "some@one");
             localRepo.merge(otherHash2);
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + ":other");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + ":other");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -152,11 +152,11 @@
             localRepo.add(unrelated);
             var updatedMaster = localRepo.commit("Unrelated", "some", "some@one");
             localRepo.merge(otherHash2);
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + ":other");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + ":other");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -238,11 +238,11 @@
             localRepo.add(unrelated);
             localRepo.commit("Unrelated", "some", "some@one");
             localRepo.merge(otherHash);
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + ":other");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + ":other");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -293,11 +293,11 @@
             localRepo.add(unrelated);
             localRepo.commit("Unrelated", "some", "some@one");
             localRepo.merge(otherHash);
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + "xyz" + ":other");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + "xyz" + ":other");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -313,11 +313,11 @@
                           .filter(comment -> comment.body().contains("did not complete successfully"))
                           .count();
             assertEquals(1, error, () -> pr.getComments().stream().map(Comment::body).collect(Collectors.joining("\n\n")));
 
             var check = pr.getChecks(mergeHash).get("jcheck");
-            assertEquals("- Could not fetch branch `other` from project `" + credentials.getHostedRepository().getName() + "xyz` - check that they are correct.", check.summary().orElseThrow());
+            assertEquals("- Could not find project `" + author.getName() + "xyz` - check that it is correct.", check.summary().orElseThrow());
         }
     }
 
     @Test
     void invalidSourceBranch(TestInfo testInfo) throws IOException {
@@ -351,11 +351,11 @@
             localRepo.add(unrelated);
             localRepo.commit("Unrelated", "some", "some@one");
             localRepo.merge(otherHash);
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + ":otherxyz");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + ":otherxyz");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -371,11 +371,11 @@
                           .filter(comment -> comment.body().contains("did not complete successfully"))
                           .count();
             assertEquals(1, error, () -> pr.getComments().stream().map(Comment::body).collect(Collectors.joining("\n\n")));
 
             var check = pr.getChecks(mergeHash).get("jcheck");
-            assertEquals("- Could not fetch branch `otherxyz` from project `" + credentials.getHostedRepository().getName() + "` - check that they are correct.", check.summary().orElseThrow());
+            assertEquals("- Could not fetch branch `otherxyz` from project `" + author.getName() + "` - check that they are correct.", check.summary().orElseThrow());
         }
     }
 
     @Test
     void wrongSourceBranch(TestInfo testInfo) throws IOException {
@@ -414,11 +414,11 @@
             localRepo.add(unrelated);
             localRepo.commit("Unrelated", "some", "some@one");
             localRepo.merge(other1Hash, "ours");
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + ":other2");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + ":other2");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -472,11 +472,11 @@
             localRepo.add(unrelated);
             localRepo.commit("Unrelated", "some", "some@one");
             localRepo.merge(otherHash);
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + ":other");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + ":other");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -544,11 +544,11 @@
             mergeCmd.check();
 
             //localRepo.merge(otherHash);
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + ":other");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + ":other");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
diff a/build.gradle b/build.gradle
--- a/build.gradle
+++ b/build.gradle
@@ -51,11 +51,10 @@
     test {
         useJUnitPlatform()
 
         if (findProperty('credentials')) {
             systemProperty "credentials", findProperty('credentials')
-            System.getProperties().findAll { it.key.toString().toLowerCase().contains('proxy') }.each { systemProperty it.key, it.value }
         }
 
         testLogging {
             events "passed", "skipped", "failed"
         }
diff a/test/build.gradle b/test/build.gradle
--- a/test/build.gradle
+++ b/test/build.gradle
@@ -31,10 +31,11 @@
     implementation project(':vcs')
     implementation project(':bot')
     implementation project(':host')
     implementation project(':email')
     implementation project(':mailinglist')
+    implementation project(':proxy')
 
     implementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
     implementation 'org.junit.jupiter:junit-jupiter-params:5.3.1'
     runtimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
 }
diff a/test/src/main/java/module-info.java b/test/src/main/java/module-info.java
--- a/test/src/main/java/module-info.java
+++ b/test/src/main/java/module-info.java
@@ -29,10 +29,11 @@
     requires org.openjdk.skara.bot;
     requires org.openjdk.skara.json;
     requires org.openjdk.skara.host;
     requires org.openjdk.skara.email;
     requires org.openjdk.skara.mailinglist;
+    requires org.openjdk.skara.proxy;
 
     requires org.junit.jupiter.api;
 
     exports org.openjdk.skara.test;
 }
diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -23,10 +23,11 @@
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.host.network.URIBuilder;
 import org.openjdk.skara.json.*;
+import org.openjdk.skara.proxy.HttpProxy;
 import org.openjdk.skara.vcs.*;
 
 import org.junit.jupiter.api.TestInfo;
 
 import java.io.*;
@@ -168,10 +169,12 @@
         nextHostIndex++;
         return host;
     }
 
     public HostCredentials(TestInfo testInfo) throws IOException  {
+        HttpProxy.setup();
+
         var credentialsFile = System.getProperty("credentials");
         testName = testInfo.getDisplayName();
 
         // If no credentials have been specified, use the test host implementation
         if (credentialsFile == null) {
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -84,10 +84,13 @@
     public HostedRepository getRepository(String name) {
         Repository localRepository;
         if (data.repositories.containsKey(name)) {
             localRepository = data.repositories.get(name);
         } else {
+            if (data.repositories.size() > 0) {
+                throw new RuntimeException("A test host can only manage a single repository");
+            }
             localRepository = createLocalRepository();
             data.repositories.put(name, localRepository);
         }
         return new TestHostedRepository(this, name, localRepository);
     }
