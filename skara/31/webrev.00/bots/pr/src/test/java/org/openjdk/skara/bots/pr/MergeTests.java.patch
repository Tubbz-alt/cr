diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
@@ -73,11 +73,11 @@
             localRepo.add(unrelated);
             localRepo.commit("Unrelated", "some", "some@one");
             localRepo.merge(otherHash2);
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + ":other");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + ":other");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -152,11 +152,11 @@
             localRepo.add(unrelated);
             var updatedMaster = localRepo.commit("Unrelated", "some", "some@one");
             localRepo.merge(otherHash2);
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + ":other");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + ":other");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -238,11 +238,11 @@
             localRepo.add(unrelated);
             localRepo.commit("Unrelated", "some", "some@one");
             localRepo.merge(otherHash);
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + ":other");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + ":other");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -293,11 +293,11 @@
             localRepo.add(unrelated);
             localRepo.commit("Unrelated", "some", "some@one");
             localRepo.merge(otherHash);
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + "xyz" + ":other");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + "xyz" + ":other");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -313,11 +313,11 @@
                           .filter(comment -> comment.body().contains("did not complete successfully"))
                           .count();
             assertEquals(1, error, () -> pr.getComments().stream().map(Comment::body).collect(Collectors.joining("\n\n")));
 
             var check = pr.getChecks(mergeHash).get("jcheck");
-            assertEquals("- Could not fetch branch `other` from project `" + credentials.getHostedRepository().getName() + "xyz` - check that they are correct.", check.summary().orElseThrow());
+            assertEquals("- Could not find project `" + author.getName() + "xyz` - check that it is correct.", check.summary().orElseThrow());
         }
     }
 
     @Test
     void invalidSourceBranch(TestInfo testInfo) throws IOException {
@@ -351,11 +351,11 @@
             localRepo.add(unrelated);
             localRepo.commit("Unrelated", "some", "some@one");
             localRepo.merge(otherHash);
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + ":otherxyz");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + ":otherxyz");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -371,11 +371,11 @@
                           .filter(comment -> comment.body().contains("did not complete successfully"))
                           .count();
             assertEquals(1, error, () -> pr.getComments().stream().map(Comment::body).collect(Collectors.joining("\n\n")));
 
             var check = pr.getChecks(mergeHash).get("jcheck");
-            assertEquals("- Could not fetch branch `otherxyz` from project `" + credentials.getHostedRepository().getName() + "` - check that they are correct.", check.summary().orElseThrow());
+            assertEquals("- Could not fetch branch `otherxyz` from project `" + author.getName() + "` - check that they are correct.", check.summary().orElseThrow());
         }
     }
 
     @Test
     void wrongSourceBranch(TestInfo testInfo) throws IOException {
@@ -414,11 +414,11 @@
             localRepo.add(unrelated);
             localRepo.commit("Unrelated", "some", "some@one");
             localRepo.merge(other1Hash, "ours");
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + ":other2");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + ":other2");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -472,11 +472,11 @@
             localRepo.add(unrelated);
             localRepo.commit("Unrelated", "some", "some@one");
             localRepo.merge(otherHash);
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + ":other");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + ":other");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
@@ -544,11 +544,11 @@
             mergeCmd.check();
 
             //localRepo.merge(otherHash);
             var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
             localRepo.push(mergeHash, author.getUrl(), "edit", true);
-            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + credentials.getHostedRepository().getName() + ":other");
+            var pr = credentials.createPullRequest(author, "master", "edit", "Merge " + author.getName() + ":other");
 
             // Approve it as another user
             var approvalPr = integrator.getPullRequest(pr.getId());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
