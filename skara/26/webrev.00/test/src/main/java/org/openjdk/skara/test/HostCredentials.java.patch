diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -195,11 +195,11 @@
                 // If the branch does not exist, we'll try to create it
                 localRepo = Repository.init(repoFolder, VCS.GIT);
             }
 
             if (Files.exists(lockFile)) {
-                var currentLock = Files.readString(lockFile, StandardCharsets.UTF_8);
+                var currentLock = Files.readString(lockFile, StandardCharsets.UTF_8).strip();
                 var lockTime = ZonedDateTime.parse(currentLock, DateTimeFormatter.ISO_DATE_TIME);
                 if (lockTime.isBefore(ZonedDateTime.now().minus(Duration.ofMinutes(10)))) {
                     log.info("Stale lock encountered - overwriting it");
                 } else {
                     log.info("Active lock encountered - waiting");
@@ -206,13 +206,11 @@
                     return false;
                 }
             }
 
             // The lock either doesn't exist or is stale, try to grab it
-            Files.writeString(lockFile, ZonedDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME), StandardCharsets.UTF_8);
-            localRepo.add(lockFile);
-            var lockHash = localRepo.commit("Lock", "test", "test@test.test");
+            var lockHash = commitLock(localRepo);
             localRepo.push(lockHash, repo.getUrl(), "testlock");
             log.info("Obtained credentials lock");
 
             // If no exception occurs (such as the push fails), we have obtained the lock
             return true;
@@ -229,10 +227,19 @@
             var lockHash = localRepo.commit("Unlock", "test", "test@test.test");
             localRepo.push(lockHash, repo.getUrl(), "testlock");
         }
     }
 
+    public Hash commitLock(Repository localRepo) throws IOException {
+        var lockFile = localRepo.root().resolve("lock.txt");
+        Files.writeString(lockFile, ZonedDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME), StandardCharsets.UTF_8);
+        localRepo.add(lockFile);
+        var lockHash = localRepo.commit("Lock", "test", "test@test.test");
+        localRepo.branch(lockHash, "testlock");
+        return lockHash;
+    }
+
     public HostedRepository getHostedRepository() {
         var host = getHost();
         var repo = credentials.getHostedRepository(host);
 
         while (credentialsLock == null) {
