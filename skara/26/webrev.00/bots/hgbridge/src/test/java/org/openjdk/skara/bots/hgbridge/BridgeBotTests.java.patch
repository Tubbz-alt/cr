diff a/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java b/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
--- a/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
+++ b/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
@@ -31,11 +32,14 @@
 
 import org.junit.jupiter.api.*;
 
 import java.io.*;
 import java.net.URI;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
+import java.time.ZonedDateTime;
+import java.time.format.DateTimeFormatter;
 import java.util.*;
 import java.util.stream.Collectors;
 
 import static org.junit.jupiter.api.Assertions.*;
 
@@ -40,11 +43,10 @@
 
 import static org.junit.jupiter.api.Assertions.*;
 
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
 class BridgeBotTests {
-
     private List<String> runHgCommand(Repository repository, String... params) throws IOException {
         List<String> finalParams = new ArrayList<>();
         finalParams.add("hg");
         finalParams.addAll(List.of("--config", "extensions.strip="));
 
@@ -110,10 +112,18 @@
         // Export the beginning of the jtreg repository
         sourceFolder = new TemporaryDirectory();
         try {
             var localRepo = Repository.materialize(sourceFolder.path(), URIBuilder.base("http://hg.openjdk.java.net/code-tools/jtreg").build(), "default");
             runHgCommand(localRepo, "strip", "-r", "b2511c725d81");
+
+            // Create a lockfile in the mercurial repo, as it will overwrite the existing lock in the remote git repo
+            runHgCommand(localRepo, "update", "null");
+            runHgCommand(localRepo, "branch", "testlock");
+            var lockFile = localRepo.root().resolve("lock.txt");
+            Files.writeString(lockFile, ZonedDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME), StandardCharsets.UTF_8);
+            localRepo.add(lockFile);
+            localRepo.commit("Lock", "duke", "Duke <duke@openjdk.java.net>");
         } catch (IOException e) {
             Assumptions.assumeTrue(false, "Failed to connect to hg.openjdk.java.net - skipping tests");
         }
         this.source = sourceFolder.path().toUri();
     }
@@ -130,10 +140,11 @@
              var gitFolder = new TemporaryDirectory();
              var storageFolder = new TemporaryDirectory();
              var storageFolder2 = new TemporaryDirectory()) {
             // Export a partial version of a hg repository
             var localHgRepo = Repository.materialize(hgFolder.path(), source, "default");
+            localHgRepo.fetch(source, "testlock");
             var destinationRepo = credentials.getHostedRepository();
             var config = new TestExporterConfig(localHgRepo.root().toUri(), destinationRepo);
             var bridge = new JBridgeBot(config, storageFolder.path());
 
             runHgCommand(localHgRepo, "strip", "-r", "bd7a3ed1210f");
@@ -254,11 +265,13 @@
             // Materialize it and ensure that it contains a known commit
             var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.getUrl(), "master");
             var localGitCommits = getCommitHashes(localGitRepo);
             assertTrue(localGitCommits.contains("9cb6a5b843c0e9f6d45273a1a6f5c98979ab0766"));
 
-            // Push something else to overwrite it
+            // Push something else to overwrite it (but retain the lock)
             var localRepo = CheckableRepository.init(gitFolder2.path(), destinationRepo.getRepositoryType());
+            credentials.commitLock(localRepo);
             localRepo.pushAll(destinationRepo.getUrl());
 
             // Materialize it again and ensure that the known commit is now gone
             localGitRepo = Repository.materialize(gitFolder3.path(), destinationRepo.getUrl(), "master");
             localGitCommits = getCommitHashes(localGitRepo);
@@ -342,10 +354,11 @@
              var gitFolder = new TemporaryDirectory();
              var storageFolder = new TemporaryDirectory();
              var storageFolder2 = new TemporaryDirectory()) {
             // Export a hg repository with unreachable commits
             var localHgRepo = Repository.materialize(hgFolder.path(), source, "default");
+            localHgRepo.fetch(source, "testlock");
             var destinationRepo = credentials.getHostedRepository();
             var config = new TestExporterConfig(localHgRepo.root().toUri(), destinationRepo);
             var bridge = new JBridgeBot(config, storageFolder.path());
 
             runHgCommand(localHgRepo, "update", "-r", "5");
