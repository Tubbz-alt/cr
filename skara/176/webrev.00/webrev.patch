diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
@@ -84,10 +84,14 @@
                                                                        github.get("app").get("installation").asString()));
                 } else {
                     var pat = new PersonalAccessToken(github.get("username").asString(), github.get("pat").asString());
                     ret.put(entry.name(), HostFactory.createGitHubHost(uri, pat));
                 }
+            } else if (entry.value().contains("jira")) {
+                var jira = entry.value().get("jira");
+                var uri = URIBuilder.base(jira.get("url").asString()).build();
+                ret.put(entry.name(), HostFactory.createJiraHost(uri, null));
             } else {
                 throw new ConfigurationError("Host " + entry.name());
             }
         }
 
diff a/host/src/main/java/org/openjdk/skara/host/HostFactory.java b/host/src/main/java/org/openjdk/skara/host/HostFactory.java
--- a/host/src/main/java/org/openjdk/skara/host/HostFactory.java
+++ b/host/src/main/java/org/openjdk/skara/host/HostFactory.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.host;
 
 import org.openjdk.skara.host.github.*;
 import org.openjdk.skara.host.gitlab.GitLabHost;
+import org.openjdk.skara.host.jira.JiraHost;
 
 import java.net.URI;
 import java.util.regex.Pattern;
 
 public class HostFactory {
@@ -48,10 +49,17 @@
         } else {
             return new GitLabHost(uri);
         }
     }
 
+    public static Host createJiraHost(URI uri, PersonalAccessToken pat) {
+        if (pat != null) {
+            throw new RuntimeException("authentication not implemented yet");
+        }
+        return new JiraHost(uri);
+    }
+
     public static Host createFromURI(URI uri, PersonalAccessToken pat) throws IllegalArgumentException {
         // Short-circuit
         if (uri.toString().contains("github")) {
             return createGitHubHost(uri, pat);
         } else if (uri.toString().contains("gitlab")) {
diff a/host/src/main/java/org/openjdk/skara/host/HostUserDetails.java b/host/src/main/java/org/openjdk/skara/host/HostUserDetails.java
--- a/host/src/main/java/org/openjdk/skara/host/HostUserDetails.java
+++ b/host/src/main/java/org/openjdk/skara/host/HostUserDetails.java
@@ -24,25 +24,31 @@
 
 import java.util.Objects;
 import java.util.function.Supplier;
 
 public class HostUserDetails {
-    private final int id;
+    private final String id;
     private final String username;
     private final Supplier<String> nameSupplier;
     private String name;
 
-    public HostUserDetails(int id, String username, String name) {
+    public HostUserDetails(String id, String username, Supplier<String> nameSupplier) {
         this.id = id;
         this.username = username;
-        this.nameSupplier = () -> name;
+        this.nameSupplier = nameSupplier;
+    }
+
+    public HostUserDetails(String id, String username, String name) {
+        this(id, username, () -> name);
+    }
+
+    public HostUserDetails(int id, String username, String name) {
+        this(String.valueOf(id), username, name);
     }
 
     public HostUserDetails(int id, String username, Supplier<String> nameSupplier) {
-        this.id = id;
-        this.username = username;
-        this.nameSupplier = nameSupplier;
+        this(String.valueOf(id), username, nameSupplier);
     }
 
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -50,21 +56,21 @@
         }
         if (o == null || getClass() != o.getClass()) {
             return false;
         }
         HostUserDetails that = (HostUserDetails) o;
-        return id == that.id &&
+        return id.equals(that.id) &&
                 Objects.equals(username, that.username);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(id, username);
     }
 
     public String id() {
-        return String.valueOf(id);
+        return id;
     }
 
     public String userName() {
         return username;
     }
diff a/host/src/main/java/org/openjdk/skara/host/jira/JiraHost.java b/host/src/main/java/org/openjdk/skara/host/jira/JiraHost.java
--- /dev/null
+++ b/host/src/main/java/org/openjdk/skara/host/jira/JiraHost.java
@@ -0,0 +1,80 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.host.jira;
+
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.host.network.*;
+import org.openjdk.skara.json.JSON;
+
+import java.net.URI;
+
+public class JiraHost implements Host {
+    private final URI uri;
+    private final RestRequest request;
+
+    public JiraHost(URI uri) {
+        this.uri = uri;
+
+        var baseApi = URIBuilder.base(uri)
+                                .setPath("/rest/api/2/")
+                                .build();
+        request = new RestRequest(baseApi);
+    }
+
+    URI getUri() {
+        return uri;
+    }
+
+    @Override
+    public boolean isValid() {
+        var version = request.get("serverInfo")
+                             .onError(r -> JSON.object().put("invalid", true))
+                             .execute();
+        return !version.contains("invalid");
+    }
+
+    @Override
+    public HostedRepository getRepository(String name) {
+        throw new RuntimeException("Jira does not support repositories");
+    }
+
+    @Override
+    public IssueProject getIssueProject(String name) {
+        return new JiraProject(this, request, name);
+    }
+
+    @Override
+    public HostUserDetails getUserDetails(String username) {
+        throw new RuntimeException("needs authentication; not implemented yet");
+    }
+
+    @Override
+    public HostUserDetails getCurrentUserDetails() {
+        throw new RuntimeException("needs authentication; not implemented yet");
+    }
+
+    @Override
+    public boolean supportsReviewBody() {
+        return false;
+    }
+}
diff a/host/src/main/java/org/openjdk/skara/host/jira/JiraIssue.java b/host/src/main/java/org/openjdk/skara/host/jira/JiraIssue.java
--- /dev/null
+++ b/host/src/main/java/org/openjdk/skara/host/jira/JiraIssue.java
@@ -0,0 +1,146 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.host.jira;
+
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.host.network.*;
+import org.openjdk.skara.json.JSONValue;
+
+import java.net.URI;
+import java.time.ZonedDateTime;
+import java.util.List;
+
+public class JiraIssue implements Issue {
+    private final JiraProject jiraProject;
+    private final RestRequest request;
+    private final JSONValue json;
+
+    JiraIssue(JiraProject jiraProject, RestRequest request, JSONValue json) {
+        this.jiraProject = jiraProject;
+        this.request = request;
+        this.json = json;
+    }
+
+    @Override
+    public IssueProject project() {
+        return jiraProject;
+    }
+
+    @Override
+    public String getId() {
+        return json.get("key").asString();
+    }
+
+    @Override
+    public HostUserDetails getAuthor() {
+        return new HostUserDetails(json.get("fields").get("creator").get("key").asString(),
+                                   json.get("fields").get("creator").get("name").asString(),
+                                   json.get("fields").get("creator").get("displayName").asString());
+    }
+
+    @Override
+    public String getTitle() {
+        return json.get("fields").get("summary").asString();
+    }
+
+    @Override
+    public void setTitle(String title) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public String getBody() {
+        if (json.get("fields").get("description").isNull()) {
+            return "";
+        } else {
+            return json.get("fields").get("description").asString();
+        }
+    }
+
+    @Override
+    public void setBody(String body) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public List<Comment> getComments() {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public Comment addComment(String body) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public Comment updateComment(String id, String body) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public ZonedDateTime getCreated() {
+        return ZonedDateTime.parse(json.get("fields").get("created").asString());
+    }
+
+    @Override
+    public ZonedDateTime getUpdated() {
+        return ZonedDateTime.parse(json.get("fields").get("updated").asString());
+    }
+
+    @Override
+    public void setState(State state) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void addLabel(String label) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void removeLabel(String label) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public List<String> getLabels() {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public URI getWebUrl() {
+        return URIBuilder.base(jiraProject.getWebUrl())
+                         .setPath("/browse/" + getId())
+                         .build();
+    }
+
+    @Override
+    public List<HostUserDetails> getAssignees() {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void setAssignees(List<HostUserDetails> assignees) {
+        throw new RuntimeException("not implemented yet");
+    }
+}
diff a/host/src/main/java/org/openjdk/skara/host/jira/JiraProject.java b/host/src/main/java/org/openjdk/skara/host/jira/JiraProject.java
--- /dev/null
+++ b/host/src/main/java/org/openjdk/skara/host/jira/JiraProject.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.host.jira;
+
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.host.network.*;
+import org.openjdk.skara.json.JSON;
+
+import java.net.URI;
+import java.util.*;
+
+public class JiraProject implements IssueProject {
+    private final JiraHost jiraHost;
+    private final String projectName;
+    private final RestRequest request;
+
+    JiraProject(JiraHost host, RestRequest request, String projectName) {
+        this.jiraHost = host;
+        this.projectName = projectName;
+        this.request = request;
+    }
+
+    @Override
+    public Host host() {
+        return jiraHost;
+    }
+
+    @Override
+    public URI getWebUrl() {
+        return URIBuilder.base(jiraHost.getUri()).setPath("/projects/" + projectName).build();
+    }
+
+    @Override
+    public Issue createIssue(String title, List<String> body) {
+        throw new RuntimeException("needs authentication; not implemented yet");
+    }
+
+    @Override
+    public Optional<Issue> getIssue(String id) {
+        var issue = request.get("issue/" + id)
+                           .onError(r -> r.statusCode() == 404 ? JSON.object().put("NOT_FOUND", true) : null)
+                           .execute();
+        if (!issue.contains("NOT_FOUND")) {
+            return Optional.of(new JiraIssue(this, request, issue));
+        } else {
+            return Optional.empty();
+        }
+    }
+
+    @Override
+    public List<Issue> getIssues() {
+        var ret = new ArrayList<Issue>();
+        var issues = request.post("search")
+                            .body("jql", "project = " + projectName + " AND status in (Open, New)")
+                            .execute();
+        for (var issue : issues.get("issues").asArray()) {
+            ret.add(new JiraIssue(this, request, issue));
+        }
+        return ret;
+    }
+}
