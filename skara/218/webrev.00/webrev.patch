diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -1006,6 +1006,41 @@
             // The PR should still not be ready for review as it is a draft
             assertFalse(pr.labels().contains("rfr"));
             assertFalse(pr.labels().contains("ready"));
         }
     }
+
+    @Test
+    void excessiveFailures(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var reviewer = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
+            var checkBot = new PullRequestBot(author, censusBuilder.build(), "master");
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            localRepo.push(masterHash, author.url(), "master", true);
+
+            // Make a change with a corresponding PR containing more errors than at least GitHub can handle in a check
+            var badContent = "\tline   \n".repeat(200);
+            var editHash = CheckableRepository.appendAndCommit(localRepo, badContent);
+            localRepo.push(editHash, author.url(), "refs/heads/edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit",
+                                                   "This is a pull request", true);
+
+            // Check the status
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // Verify that the check failed
+            var checks = pr.checks(editHash);
+            assertEquals(1, checks.size());
+            var check = checks.get("jcheck");
+            assertEquals(CheckStatus.FAILURE, check.status());
+        }
+    }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/GitHubPullRequest.java
@@ -345,11 +345,11 @@
             var outputQuery = JSON.object();
             outputQuery.put("title", check.title().get());
             outputQuery.put("summary", check.summary().get());
 
             var annotations = JSON.array();
-            for (var annotation : check.annotations()) {
+            for (var annotation : check.annotations().subList(0, Math.min(check.annotations().size(), 50))) {
                 var annotationQuery = JSON.object();
                 annotationQuery.put("path", annotation.path());
                 annotationQuery.put("start_line", annotation.startLine());
                 annotationQuery.put("end_line", annotation.endLine());
                 annotation.startColumn().ifPresent(startColumn -> annotationQuery.put("start_column", startColumn));
