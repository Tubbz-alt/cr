diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -964,10 +964,11 @@
             var titles = new ArrayList<String>();
             var authors = new ArrayList<String>();
             var assignees = new ArrayList<String>();
             var labels = new ArrayList<String>();
             var issues = new ArrayList<String>();
+            var branches = new ArrayList<String>();
 
             var authorsOption = getOption("authors", "list", arguments);
             var filterAuthors = authorsOption == null ?
                 Set.of() :
                 new HashSet<>(Arrays.asList(authorsOption.split(",")));
@@ -985,17 +986,18 @@
             var issuesOption = getOption("issues", "list", arguments);
             var filterIssues = issuesOption == null ?
                 Set.of() :
                 Arrays.asList(issuesOption.split(","));
 
-            var defaultColumns = List.of("id", "title", "authors", "assignees", "labels", "issues");
+            var defaultColumns = List.of("id", "title", "authors", "assignees", "labels", "issues", "branch");
             var columnValues = Map.of(defaultColumns.get(0), ids,
                                       defaultColumns.get(1), titles,
                                       defaultColumns.get(2), authors,
                                       defaultColumns.get(3), assignees,
                                       defaultColumns.get(4), labels,
-                                      defaultColumns.get(5), issues);
+                                      defaultColumns.get(5), issues,
+                                      defaultColumns.get(6), branches);
             var columnsOption = getOption("columns", "list", arguments);
             var columns = columnsOption == null ?
                 defaultColumns :
                 Arrays.asList(columnsOption.split(","));
             if (columns != defaultColumns) {
@@ -1036,10 +1038,17 @@
                 titles.add(pr.title());
                 authors.add(prAuthor);
                 assignees.add(String.join(",", prAssignees));
                 labels.add(String.join(",", prLabels));
                 issues.add(String.join(",", prIssues));
+
+                if (pr.author().userName().equals(credentials.username()) &&
+                    pr.sourceRepository().webUrl().equals(uri)) {
+                    branches.add(pr.sourceRef());
+                } else {
+                    branches.add("");
+                }
             }
 
 
             String fmt = "";
             for (var column : columns.subList(0, columns.size() - 1)) {
@@ -1071,11 +1080,11 @@
             }
 
             var remoteRepo = getHostedRepositoryFor(uri, repo, host);
             var pr = remoteRepo.pullRequest(prId.asString());
             var repoUrl = remoteRepo.webUrl();
-            var prHeadRef = pr.sourceRef();
+            var prHeadRef = pr.fetchRef();
             var isHgGit = isMercurial && Repository.exists(repo.root().resolve(".hg").resolve("git"));
             if (isHgGit) {
                 var hgGitRepo = Repository.get(repo.root().resolve(".hg").resolve("git")).get();
                 var hgGitFetchHead = hgGitRepo.fetch(repoUrl, prHeadRef);
 
@@ -1113,11 +1122,11 @@
                 }
 
                 return;
             }
 
-            var fetchHead = repo.fetch(repoUrl, pr.sourceRef());
+            var fetchHead = repo.fetch(repoUrl, pr.fetchRef());
             if (action.equals("fetch")) {
                 var branchName = getOption("branch", "fetch", arguments);
                 if (branchName != null) {
                     repo.branch(fetchHead, branchName);
                 } else {
