diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -90,11 +90,11 @@
         return pr.webUrl() + ".diff";
     }
 
     private static String fetchCommand(PullRequest pr) {
         var repoUrl = pr.repository().webUrl();
-        return "git fetch " + repoUrl + " " + pr.sourceRef() + ":pull/" + pr.id();
+        return "git fetch " + repoUrl + " " + pr.fetchRef() + ":pull/" + pr.id();
     }
 
     static String composeConversation(PullRequest pr, Hash base, Hash head) {
         var filteredBody = filterComments(pr.body());
         if (filteredBody.isEmpty()) {
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
@@ -58,11 +58,11 @@
 
     private String generatePlaceholder(PullRequest pr, Hash base, Hash head) {
         return "This file was too large to be included in the published webrev, and has been replaced with " +
                 "this placeholder message. It is possible to generate the original content locally by " +
                 "following these instructions:\n\n" +
-                "  $ git fetch " + pr.repository().webUrl() + " " + pr.sourceRef() + "\n" +
+                "  $ git fetch " + pr.repository().webUrl() + " " + pr.fetchRef() + "\n" +
                 "  $ git checkout " + head.hex() + "\n" +
                 "  $ git webrev -r " + base.hex() + "\n";
     }
 
     private void replaceContent(Path file, String placeholder) {
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
@@ -82,15 +82,25 @@
     @Override
     public Hash headHash() {
         return headHash;
     }
 
+    @Override
+    public String fetchRef() {
+        return null;
+    }
+
     @Override
     public String sourceRef() {
         return null;
     }
 
+    @Override
+    public HostedRepository sourceRepository() {
+        return null;
+    }
+
     @Override
     public String targetRef() {
         return null;
     }
 
diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -964,10 +964,11 @@
             var titles = new ArrayList<String>();
             var authors = new ArrayList<String>();
             var assignees = new ArrayList<String>();
             var labels = new ArrayList<String>();
             var issues = new ArrayList<String>();
+            var branches = new ArrayList<String>();
 
             var authorsOption = getOption("authors", "list", arguments);
             var filterAuthors = authorsOption == null ?
                 Set.of() :
                 new HashSet<>(Arrays.asList(authorsOption.split(",")));
@@ -985,17 +986,18 @@
             var issuesOption = getOption("issues", "list", arguments);
             var filterIssues = issuesOption == null ?
                 Set.of() :
                 Arrays.asList(issuesOption.split(","));
 
-            var defaultColumns = List.of("id", "title", "authors", "assignees", "labels", "issues");
+            var defaultColumns = List.of("id", "title", "authors", "assignees", "labels", "issues", "branch");
             var columnValues = Map.of(defaultColumns.get(0), ids,
                                       defaultColumns.get(1), titles,
                                       defaultColumns.get(2), authors,
                                       defaultColumns.get(3), assignees,
                                       defaultColumns.get(4), labels,
-                                      defaultColumns.get(5), issues);
+                                      defaultColumns.get(5), issues,
+                                      defaultColumns.get(6), branches);
             var columnsOption = getOption("columns", "list", arguments);
             var columns = columnsOption == null ?
                 defaultColumns :
                 Arrays.asList(columnsOption.split(","));
             if (columns != defaultColumns) {
@@ -1036,10 +1038,17 @@
                 titles.add(pr.title());
                 authors.add(prAuthor);
                 assignees.add(String.join(",", prAssignees));
                 labels.add(String.join(",", prLabels));
                 issues.add(String.join(",", prIssues));
+
+                if (pr.author().userName().equals(credentials.username()) &&
+                    pr.sourceRepository().webUrl().equals(uri)) {
+                    branches.add(pr.sourceRef());
+                } else {
+                    branches.add("");
+                }
             }
 
 
             String fmt = "";
             for (var column : columns.subList(0, columns.size() - 1)) {
@@ -1071,11 +1080,11 @@
             }
 
             var remoteRepo = getHostedRepositoryFor(uri, repo, host);
             var pr = remoteRepo.pullRequest(prId.asString());
             var repoUrl = remoteRepo.webUrl();
-            var prHeadRef = pr.sourceRef();
+            var prHeadRef = pr.fetchRef();
             var isHgGit = isMercurial && Repository.exists(repo.root().resolve(".hg").resolve("git"));
             if (isHgGit) {
                 var hgGitRepo = Repository.get(repo.root().resolve(".hg").resolve("git")).get();
                 var hgGitFetchHead = hgGitRepo.fetch(repoUrl, prHeadRef);
 
@@ -1113,11 +1122,11 @@
                 }
 
                 return;
             }
 
-            var fetchHead = repo.fetch(repoUrl, pr.sourceRef());
+            var fetchHead = repo.fetch(repoUrl, pr.fetchRef());
             if (action.equals("fetch")) {
                 var branchName = getOption("branch", "fetch", arguments);
                 if (branchName != null) {
                     repo.branch(fetchHead, branchName);
                 } else {
diff a/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java
@@ -70,16 +70,28 @@
      * Hash of the current head of the request.
      * @return
      */
     Hash headHash();
 
+    /**
+     * Returns the name of the ref used for fetching the pull request.
+     * @return
+     */
+    String fetchRef();
+
     /**
      * Returns the name of the ref the request is created from.
      * @return
      */
     String sourceRef();
 
+    /**
+     * Returns the repository the request is created from.
+     * @return
+     */
+    HostedRepository sourceRepository();
+
     /**
      * Returns the name of the ref the request is intended to be merged into.
      * @return
      */
     String targetRef();
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -214,14 +214,24 @@
     public Hash headHash() {
         return new Hash(json.get("head").get("sha").asString());
     }
 
     @Override
-    public String sourceRef() {
+    public String fetchRef() {
         return "pull/" + id() + "/head";
     }
 
+    @Override
+    public String sourceRef() {
+        return json.get("head").get("ref").asString();
+    }
+
+    @Override
+    public HostedRepository sourceRepository() {
+        return new GitHubRepository(host, json.get("head").get("repo").get("full_name").asString());
+    }
+
     @Override
     public String targetRef() {
         return json.get("base").get("ref").asString();
     }
 
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
@@ -254,14 +254,25 @@
     public Hash headHash() {
         return new Hash(json.get("sha").asString());
     }
 
     @Override
-    public String sourceRef() {
+    public String fetchRef() {
         return "merge-requests/" + id() + "/head";
     }
 
+    @Override
+    public String sourceRef() {
+        return json.get("source_branch").asString();
+    }
+
+    @Override
+    public HostedRepository sourceRepository() {
+        return new GitLabRepository((GitLabHost) repository.forge(),
+                                    json.get("head").get("source_project_id").asString());
+    }
+
     @Override
     public String targetRef() {
         return json.get("target_branch").asString();
     }
 
diff a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
--- a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
@@ -131,15 +131,25 @@
     @Override
     public Hash headHash() {
         return data.headHash;
     }
 
+    @Override
+    public String fetchRef() {
+        return sourceRef;
+    }
+
     @Override
     public String sourceRef() {
         return sourceRef;
     }
 
+    @Override
+    public HostedRepository sourceRepository() {
+        return repository;
+    }
+
     @Override
     public String targetRef() {
         return targetRef;
     }
 
