diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
@@ -37,17 +37,19 @@
 import java.util.stream.Collectors;
 
 class JNotifyBot implements Bot, WorkItem {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
     private final HostedRepository repository;
+    private final Path storagePath;
     private final Branch branch;
     private final StorageBuilder<Tag> tagStorageBuilder;
     private final StorageBuilder<ResolvedBranch> branchStorageBuilder;
     private final List<UpdateConsumer> updaters;
 
-    JNotifyBot(HostedRepository repository, String branch, StorageBuilder<Tag> tagStorageBuilder, StorageBuilder<ResolvedBranch> branchStorageBuilder, List<UpdateConsumer> updaters) {
+    JNotifyBot(HostedRepository repository, Path storagePath, String branch, StorageBuilder<Tag> tagStorageBuilder, StorageBuilder<ResolvedBranch> branchStorageBuilder, List<UpdateConsumer> updaters) {
         this.repository = repository;
+        this.storagePath = storagePath;
         this.branch = new Branch(branch);
         this.tagStorageBuilder = tagStorageBuilder;
         this.branchStorageBuilder = branchStorageBuilder;
         this.updaters = updaters;
     }
@@ -63,14 +65,14 @@
         }
         return false;
     }
 
     private void handleBranch(Repository localRepo, UpdateHistory history, Branch branch) throws IOException {
-        var curHead = localRepo.resolve("HEAD").orElseThrow(IOException::new);
+        var curHead = localRepo.resolve("FETCH_HEAD").orElseThrow(IOException::new);
 
         var lastRef = history.branchHash(branch);
-        if (!lastRef.isPresent()) {
+        if (lastRef.isEmpty()) {
             log.warning("No previous history found for branch '" + branch + "' - resetting mark");
             history.setBranchHash(branch, curHead);
             return;
         }
 
@@ -133,15 +135,15 @@
     }
 
     @Override
     public void run(Path scratchPath) {
         var sanitizedUrl = URLEncoder.encode(repository.getUrl().toString(), StandardCharsets.UTF_8);
-        var path = scratchPath.resolve("notify").resolve(sanitizedUrl);
+        var path = storagePath.resolve(sanitizedUrl);
         var historyPath = scratchPath.resolve("notify").resolve("history");
 
         try {
-            var localRepo = Repository.materialize(path, repository.getUrl(), branch.name());
+            var localRepo = Repository.materialize(path, repository.getUrl(), branch.name(), false);
             var history = UpdateHistory.create(tagStorageBuilder, historyPath.resolve("tags"), branchStorageBuilder, historyPath.resolve("branches"));
             handleBranch(localRepo, history, branch);
             handleTags(localRepo, history);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java
@@ -75,11 +75,11 @@
 
             var tagStorageBuilder = new StorageBuilder<Tag>(repoName + ".tags.txt")
                     .remoteRepository(databaseRepo, databaseRef, databaseName, databaseEmail, "Added tag for " + repoName);
             var branchStorageBuilder = new StorageBuilder<ResolvedBranch>(repoName + ".branches.txt")
                     .remoteRepository(databaseRepo, databaseRef, databaseName, databaseEmail, "Added branch hash for " + repoName);
-            var bot = new JNotifyBot(configuration.repository(repoName), branch, tagStorageBuilder, branchStorageBuilder, updaters);
+            var bot = new JNotifyBot(configuration.repository(repoName), configuration.storageFolder(), branch, tagStorageBuilder, branchStorageBuilder, updaters);
             ret.add(bot);
         }
 
         return ret;
     }
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -59,30 +59,33 @@
     }
 
     @Test
     void testJsonUpdaterBranch(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
-             var tempFolder = new TemporaryDirectory();
-             var jsonFolder = new TemporaryDirectory()) {
+             var tempFolder = new TemporaryDirectory()) {
             var repo = credentials.getHostedRepository();
-            var localRepo = CheckableRepository.init(tempFolder.path(), repo.getRepositoryType());
+            var localRepoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(localRepoFolder, repo.getRepositoryType());
             credentials.commitLock(localRepo);
             localRepo.pushAll(repo.getUrl());
 
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
+            var jsonFolder = tempFolder.path().resolve("json");
+            Files.createDirectory(jsonFolder);
+            var storageFolder = tempFolder.path().resolve("storage");
 
-            var updater = new JsonUpdater(jsonFolder.path(), "12", "team");
-            var notifyBot = new JNotifyBot(repo, "master", tagStorage, branchStorage, List.of(updater));
+            var updater = new JsonUpdater(jsonFolder, "12", "team");
+            var notifyBot = new JNotifyBot(repo, storageFolder, "master", tagStorage, branchStorage, List.of(updater));
 
             TestBotRunner.runPeriodicItems(notifyBot);
-            assertEquals(List.of(), findJsonFiles(jsonFolder.path(), ""));
+            assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "One more line", "12345678: Fixes");
             localRepo.push(editHash, repo.getUrl(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
-            var jsonFiles = findJsonFiles(jsonFolder.path(), "");
+            var jsonFiles = findJsonFiles(jsonFolder, "");
             assertEquals(1, jsonFiles.size());
             var jsonData = Files.readString(jsonFiles.get(0), StandardCharsets.UTF_8);
             var json = JSON.parse(jsonData);
             assertEquals(1, json.asArray().size());
             assertEquals(repo.getWebUrl(editHash).toString(), json.asArray().get(0).get("url").asString());
@@ -93,14 +96,14 @@
     }
 
     @Test
     void testJsonUpdaterTag(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
-             var tempFolder = new TemporaryDirectory();
-             var jsonFolder = new TemporaryDirectory()) {
+             var tempFolder = new TemporaryDirectory()) {
             var repo = credentials.getHostedRepository();
-            var localRepo = CheckableRepository.init(tempFolder.path(), repo.getRepositoryType());
+            var localRepoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(localRepoFolder, repo.getRepositoryType());
             credentials.commitLock(localRepo);
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.tag(masterHash, "jdk-12+1", "Added tag 1", "Duke", "duke@openjdk.java.net");
             localRepo.pushAll(repo.getUrl());
 
@@ -104,16 +107,19 @@
             localRepo.tag(masterHash, "jdk-12+1", "Added tag 1", "Duke", "duke@openjdk.java.net");
             localRepo.pushAll(repo.getUrl());
 
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
+            var jsonFolder = tempFolder.path().resolve("json");
+            Files.createDirectory(jsonFolder);
+            var storageFolder =tempFolder.path().resolve("storage");
 
-            var updater = new JsonUpdater(jsonFolder.path(), "12", "team");
-            var notifyBot = new JNotifyBot(repo, "master", tagStorage, branchStorage, List.of(updater));
+            var updater = new JsonUpdater(jsonFolder, "12", "team");
+            var notifyBot = new JNotifyBot(repo, storageFolder, "master", tagStorage, branchStorage, List.of(updater));
 
             TestBotRunner.runPeriodicItems(notifyBot);
-            assertEquals(List.of(), findJsonFiles(jsonFolder.path(), ""));
+            assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
             localRepo.fetch(repo.getUrl(), "history:history");
             localRepo.tag(editHash, "jdk-12+2", "Added tag 2", "Duke", "duke@openjdk.java.net");
             localRepo.pushAll(repo.getUrl());
@@ -117,11 +123,11 @@
             localRepo.fetch(repo.getUrl(), "history:history");
             localRepo.tag(editHash, "jdk-12+2", "Added tag 2", "Duke", "duke@openjdk.java.net");
             localRepo.pushAll(repo.getUrl());
 
             TestBotRunner.runPeriodicItems(notifyBot);
-            var jsonFiles = findJsonFiles(jsonFolder.path(), "");
+            var jsonFiles = findJsonFiles(jsonFolder, "");
             assertEquals(2, jsonFiles.size());
 
             for (var file : jsonFiles) {
                 var jsonData = Files.readString(file, StandardCharsets.UTF_8);
                 var json = JSON.parse(jsonData);
@@ -152,15 +158,16 @@
             credentials.commitLock(localRepo);
             localRepo.pushAll(repo.getUrl());
 
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var recipient = EmailAddress.from("list", "list@list.list");
             var updater = new MailingListUpdater(smtpServer.address(), recipient, sender);
-            var notifyBot = new JNotifyBot(repo, "master", tagStorage, branchStorage, List.of(updater));
+            var notifyBot = new JNotifyBot(repo, storageFolder, "master", tagStorage, branchStorage, List.of(updater));
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> smtpServer.receive(Duration.ofMillis(1)));
 
@@ -189,15 +196,16 @@
             credentials.commitLock(localRepo);
             localRepo.pushAll(repo.getUrl());
 
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var recipient = EmailAddress.from("list", "list@list.list");
             var updater = new MailingListUpdater(smtpServer.address(), recipient, sender);
-            var notifyBot = new JNotifyBot(repo, "master", tagStorage, branchStorage, List.of(updater));
+            var notifyBot = new JNotifyBot(repo, storageFolder, "master", tagStorage, branchStorage, List.of(updater));
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> smtpServer.receive(Duration.ofMillis(1)));
 
@@ -230,15 +238,16 @@
             credentials.commitLock(localRepo);
             localRepo.pushAll(repo.getUrl());
 
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var recipient = EmailAddress.from("list", "list@list.list");
             var updater = new MailingListUpdater(smtpServer.address(), recipient, sender);
-            var notifyBot = new JNotifyBot(repo, "master", tagStorage, branchStorage, List.of(updater));
+            var notifyBot = new JNotifyBot(repo, storageFolder, "master", tagStorage, branchStorage, List.of(updater));
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> smtpServer.receive(Duration.ofMillis(1)));
 
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -141,10 +141,14 @@
     static boolean exists(Path p) throws IOException {
         return get(p).isPresent();
     }
 
     static Repository materialize(Path p, URI remote, String ref) throws IOException {
+        return materialize(p, remote, ref, true);
+    }
+
+    static Repository materialize(Path p, URI remote, String ref, boolean checkout) throws IOException {
         var localRepo = remote.getPath().endsWith(".git") ?
             Repository.init(p, VCS.GIT) : Repository.init(p, VCS.HG);
         if (!localRepo.exists()) {
             localRepo.init();
         } else if (!localRepo.isHealthy()) {
@@ -157,16 +161,18 @@
             }
         }
 
         var baseHash = localRepo.fetch(remote, ref);
 
-        try {
-            localRepo.checkout(baseHash, true);
-        } catch (IOException e) {
-            localRepo.reinitialize();
-            baseHash = localRepo.fetch(remote, ref);
-            localRepo.checkout(baseHash, true);
+        if (checkout) {
+            try {
+                localRepo.checkout(baseHash, true);
+            } catch (IOException e) {
+                localRepo.reinitialize();
+                baseHash = localRepo.fetch(remote, ref);
+                localRepo.checkout(baseHash, true);
+            }
         }
 
         return localRepo;
     }
 
