diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
@@ -37,17 +37,19 @@
 import java.util.stream.Collectors;
 
 class JNotifyBot implements Bot, WorkItem {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
     private final HostedRepository repository;
+    private final Path storagePath;
     private final Branch branch;
     private final StorageBuilder<Tag> tagStorageBuilder;
     private final StorageBuilder<ResolvedBranch> branchStorageBuilder;
     private final List<UpdateConsumer> updaters;
 
-    JNotifyBot(HostedRepository repository, String branch, StorageBuilder<Tag> tagStorageBuilder, StorageBuilder<ResolvedBranch> branchStorageBuilder, List<UpdateConsumer> updaters) {
+    JNotifyBot(HostedRepository repository, Path storagePath, String branch, StorageBuilder<Tag> tagStorageBuilder, StorageBuilder<ResolvedBranch> branchStorageBuilder, List<UpdateConsumer> updaters) {
         this.repository = repository;
+        this.storagePath = storagePath;
         this.branch = new Branch(branch);
         this.tagStorageBuilder = tagStorageBuilder;
         this.branchStorageBuilder = branchStorageBuilder;
         this.updaters = updaters;
     }
@@ -63,14 +65,14 @@
         }
         return false;
     }
 
     private void handleBranch(Repository localRepo, UpdateHistory history, Branch branch) throws IOException {
-        var curHead = localRepo.resolve("HEAD").orElseThrow(IOException::new);
+        var curHead = localRepo.resolve("FETCH_HEAD").orElseThrow(IOException::new);
 
         var lastRef = history.branchHash(branch);
-        if (!lastRef.isPresent()) {
+        if (lastRef.isEmpty()) {
             log.warning("No previous history found for branch '" + branch + "' - resetting mark");
             history.setBranchHash(branch, curHead);
             return;
         }
 
@@ -133,15 +135,15 @@
     }
 
     @Override
     public void run(Path scratchPath) {
         var sanitizedUrl = URLEncoder.encode(repository.getUrl().toString(), StandardCharsets.UTF_8);
-        var path = scratchPath.resolve("notify").resolve(sanitizedUrl);
+        var path = storagePath.resolve(sanitizedUrl);
         var historyPath = scratchPath.resolve("notify").resolve("history");
 
         try {
-            var localRepo = Repository.materialize(path, repository.getUrl(), branch.name());
+            var localRepo = Repository.materialize(path, repository.getUrl(), branch.name(), false);
             var history = UpdateHistory.create(tagStorageBuilder, historyPath.resolve("tags"), branchStorageBuilder, historyPath.resolve("branches"));
             handleBranch(localRepo, history, branch);
             handleTags(localRepo, history);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
