diff a/Unzip.java b/Unzip.java
--- /dev/null
+++ b/Unzip.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+import java.io.IOException;
+import java.nio.file.Path;
+import java.nio.file.Files;
+import java.util.zip.ZipInputStream;
+
+public class Unzip {
+    private static void unzip(Path zipFile, Path dest) throws IOException {
+        var stream = new ZipInputStream(Files.newInputStream(zipFile));
+        for (var entry = stream.getNextEntry(); entry != null; entry = stream.getNextEntry()) {
+            var path = dest.resolve(entry.getName());
+            if (entry.isDirectory()) {
+                Files.createDirectories(path);
+            } else {
+                if (Files.exists(path)) {
+                    Files.delete(path);
+                }
+                Files.copy(stream, path);
+            }
+        }
+    }
+
+    public static void main(String[] args) throws IOException {
+        unzip(Path.of(args[0]), Path.of(args[1]));
+    }
+}
diff a/deps.env b/deps.env
--- /dev/null
+++ b/deps.env
@@ -0,0 +1,11 @@
+JDK_LINUX_URL="https://download.java.net/java/GA/jdk12/GPL/openjdk-12_linux-x64_bin.tar.gz"
+JDK_LINUX_SHA256="b43bc15f4934f6d321170419f2c24451486bc848a2179af5e49d10721438dd56"
+
+JDK_MACOS_URL="https://download.java.net/java/GA/jdk12/GPL/openjdk-12_osx-x64_bin.tar.gz"
+JDK_MACOS_SHA256="52164a04db4d3fdfe128cfc7b868bc4dae52d969f03d53ae9d4239fe783e1a3a"
+
+JDK_WINDOWS_URL="https://download.java.net/java/GA/jdk12/GPL/openjdk-12_windows-x64_bin.zip"
+JDK_WINDOWS_SHA256="35a8d018f420fb05fe7c2aa9933122896ca50bd23dbd373e90d8e2f3897c4e92"
+
+GRADLE_URL="https://services.gradle.org/distributions/gradle-5.2.1-bin.zip"
+GRADLE_SHA256="748c33ff8d216736723be4037085b8dc342c6a0f309081acf682c9803e407357"
diff a/gradlew b/gradlew
--- a/gradlew
+++ b/gradlew
@@ -65,52 +65,52 @@
 }
 
 extract_tar() {
     FILENAME="$1"
     DIRECTORY="$2"
-    STRIP="$3"
     mkdir -p "${DIRECTORY}"
 
-    tar -xf "${FILENAME}" --strip-components=${STRIP} -C "${DIRECTORY}"
+    tar -xf "${FILENAME}" -C "${DIRECTORY}"
 }
 
 extract_zip() {
     FILENAME="$1"
     DIRECTORY="$2"
 
     mkdir -p "${DIRECTORY}"
-    unzip "${FILENAME}" -d "${DIRECTORY}"
+    unzip "${FILENAME}" -d "${DIRECTORY}" > /dev/null
 }
 
 DIR=$(dirname $0)
 OS=$(uname)
 
-if [ "$1" = "--jdk" ]; then
-    JDK_URL="$2"
-    JDK_SHA256=''
-    shift
-    shift
-else
-    if [ "${OS}" = "Linux" ]; then
-        JDK_URL='https://download.java.net/java/GA/jdk12/GPL/openjdk-12_linux-x64_bin.tar.gz'
-        JDK_SHA256='b43bc15f4934f6d321170419f2c24451486bc848a2179af5e49d10721438dd56'
-    elif [ "${OS}" = "Darwin" ]; then
-        JDK_URL='https://download.java.net/java/GA/jdk12/GPL/openjdk-12_osx-x64_bin.tar.gz'
-        JDK_SHA256='52164a04db4d3fdfe128cfc7b868bc4dae52d969f03d53ae9d4239fe783e1a3a'
-    else
-        die "error: unknown operating system: ${OS}"
-    fi
-fi
-
-if [ "${OS}" = "Linux" ]; then
-    STRIP=1
-elif [ "${OS}" = "Darwin" ]; then
-    STRIP=2
-fi
+. $(dirname "${0}")/deps.env
+case "${OS}" in
+    Linux )
+        JDK_URL="${JDK_LINUX_URL}"
+        JDK_SHA256="${JDK_LINUX_SHA256}"
+        ;;
+    Darwin )
+        JDK_URL="${JDK_MACOS_URL}"
+        JDK_SHA256="${JDK_MACOS_SHA256}"
+        ;;
+    CYGWIN_NT* )
+        JDK_URL="${JDK_WINDOWS_URL}"
+        JDK_SHA256="${JDK_WINDOWS_SHA256}"
+        ;;
+    *)
+        echo "error: unknown operating system ${OS}"
+        exit 1
+        ;;
+esac
 
 JDK_FILENAME="${DIR}/.jdk/$(basename ${JDK_URL})"
-JDK_DIR="${DIR}/.jdk/$(basename -s '.tar.gz' ${JDK_URL})"
+if [ "${OS}" = "Linux" -o "${OS}" = "Darwin" ]; then
+    JDK_DIR="${DIR}/.jdk/$(basename -s '.tar.gz' ${JDK_URL})"
+else
+    JDK_DIR="${DIR}/.jdk/$(basename -s '.zip' ${JDK_URL})"
+fi
 
 if [ ! -d "${JDK_DIR}" ]; then
     mkdir -p ${DIR}/.jdk
     if [ ! -f "${JDK_FILENAME}" ]; then
         if [ -f "${JDK_URL}" ]; then
@@ -121,15 +121,30 @@
             download ${JDK_URL} "${JDK_FILENAME}"
             checksum "${JDK_FILENAME}" ${JDK_SHA256}
         fi
     fi
     echo "Extracting JDK..."
-    extract_tar "${JDK_FILENAME}" "${JDK_DIR}" ${STRIP}
+    if [ "${OS}" = "Linux" -o "${OS}" = "Darwin" ]; then
+        extract_tar "${JDK_FILENAME}" "${JDK_DIR}"
+    else
+        extract_zip "${JDK_FILENAME}" "${JDK_DIR}"
+    fi
 fi
 
-GRADLE_URL="https://services.gradle.org/distributions/gradle-5.2.1-bin.zip"
-GRADLE_SHA256="748c33ff8d216736723be4037085b8dc342c6a0f309081acf682c9803e407357"
+if [ "${OS}" = "Darwin" ]; then
+    EXECUTABLE_FILTER='-perm +111'
+    LAUNCHER='java'
+elif [ "${OS}" = "Linux" ]; then
+    EXECUTABLE_FILTER='-executable'
+    LAUNCHER='java'
+else
+    LAUNCHER='java.exe'
+fi
+
+JAVA_LAUNCHER=$(find "${JDK_DIR}" -type f ${EXECUTABLE_FILTER} | grep ".*/bin/${LAUNCHER}$")
+export JAVA_HOME="$(dirname $(dirname ${JAVA_LAUNCHER}))"
+
 GRADLE_FILENAME="${DIR}/.gradle/$(basename ${GRADLE_URL})"
 GRADLE_DIR="${DIR}/.gradle/$(basename -s '.zip' ${GRADLE_URL})"
 
 if [ ! -d "${GRADLE_DIR}" ]; then
     mkdir -p "${DIR}/.gradle"
@@ -137,15 +152,18 @@
         echo "Downloading Gradle..."
         download ${GRADLE_URL} "${GRADLE_FILENAME}"
     fi
     checksum ${GRADLE_FILENAME} ${GRADLE_SHA256}
     echo "Extracting Gradle..."
-    extract_zip "${GRADLE_FILENAME}" "${GRADLE_DIR}"
+    "${JAVA_LAUNCHER}" "${DIR}"/Unzip.java "${GRADLE_FILENAME}" "${GRADLE_DIR}"
 fi
 
-if [ "${OS}" = "Darwin" ]; then
-    export JAVA_HOME="${JDK_DIR}/Contents/Home"
-elif [ "${OS}" = "Linux" ]; then
-    export JAVA_HOME="${JDK_DIR}"
+GRADLE_LAUNCHER=$(find "${GRADLE_DIR}" | grep '.*/bin/gradle$')
+chmod u+x "${GRADLE_LAUNCHER}"
+
+if [ "${OS}" = "Linux" ]; then
+    export LC_ALL=en_US.UTF-8
+    export LANG=en_US.UTF-8
+    export LANGUAGE=en_US.UTF-8
 fi
 
-exec "${GRADLE_DIR}/gradle-5.2.1/bin/gradle" "$@"
+exec "${GRADLE_LAUNCHER}" "$@"
diff a/gradlew.bat b/gradlew.bat
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -18,43 +18,49 @@
 rem
 rem Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 rem or visit www.oracle.com if you need additional information or have any
 rem questions.
 
-if exist %~dp0\.jdk\openjdk-12_windows-x64_bin goto gradle
+for /f "tokens=1,2 delims==" %%A in (deps.env) do (set %%A=%%~B)
+for /f %%i in ("%JDK_WINDOWS_URL%") do set JDK_WINDOWS_DIR=%%~ni
+for /f %%i in ("%GRADLE_URL%") do set GRADLE_DIR=%%~ni
+
+if exist %~dp0\.jdk\%JDK_WINDOWS_DIR% goto gradle
 
 echo Downloading JDK...
-mkdir %~dp0\.jdk
-curl -O https://download.java.net/java/GA/jdk12/GPL/openjdk-12_windows-x64_bin.zip -o openjdk-12_windows-x64_bin.zip
-move openjdk-12_windows-x64_bin.zip %~dp0\.jdk\
-for /f "tokens=*" %%i in ('@certutil -hashfile %~dp0/.jdk/openjdk-12_windows-x64_bin.zip sha256 ^| find /v "hash of file" ^| find /v "CertUtil"') do set SHA256JDK=%%i
-if "%SHA256JDK%" == "35a8d018f420fb05fe7c2aa9933122896ca50bd23dbd373e90d8e2f3897c4e92" (goto extractJdk)
+mkdir %~dp0\.jdk\temp
+curl -L %JDK_WINDOWS_URL% -o %JDK_WINDOWS_DIR%.zip
+move %JDK_WINDOWS_DIR%.zip %~dp0\.jdk\
+for /f "tokens=*" %%i in ('@certutil -hashfile %~dp0/.jdk/%JDK_WINDOWS_DIR%.zip sha256 ^| find /v "hash of file" ^| find /v "CertUtil"') do set SHA256JDK=%%i
+if "%SHA256JDK%" == "%JDK_WINDOWS_SHA256%" (goto extractJdk)
 echo Invalid SHA256 for JDK detected (%SHA256JDK%)
 goto done
 
 :extractJdk
 echo Extracting JDK...
-tar -xf %~dp0/.jdk/openjdk-12_windows-x64_bin.zip -C %~dp0/.jdk
-ren %~dp0\.jdk\jdk-12 openjdk-12_windows-x64_bin
+tar -xf %~dp0/.jdk/%JDK_WINDOWS_DIR%.zip -C %~dp0/.jdk/temp
+for /d %%i in (%~dp0\.jdk\temp\*) do move %%i %~dp0\.jdk\%JDK_WINDOWS_DIR%
+rmdir %~dp0\.jdk\temp
 
 :gradle
-if exist %~dp0\.gradle\gradle-5.2.1-bin goto run
+if exist %~dp0\.gradle\%GRADLE_DIR% goto run
 
 echo Downloading Gradle...
-mkdir %~dp0\.gradle
-curl -OL https://services.gradle.org/distributions/gradle-5.2.1-bin.zip -o gradle-5.2.1-bin.zip
-move gradle-5.2.1-bin.zip %~dp0\.gradle\
-for /f "tokens=*" %%i in ('@certutil -hashfile %~dp0/.gradle/gradle-5.2.1-bin.zip sha256 ^| find /v "hash of file" ^| find /v "CertUtil"') do set SHA256GRADLE=%%i
-if "%SHA256GRADLE%" == "748c33ff8d216736723be4037085b8dc342c6a0f309081acf682c9803e407357" (goto extractGradle)
+mkdir %~dp0\.gradle\temp
+curl -L %GRADLE_URL% -o %GRADLE_DIR%.zip
+move %GRADLE_DIR%.zip %~dp0\.gradle\
+for /f "tokens=*" %%i in ('@certutil -hashfile %~dp0/.gradle/%GRADLE_DIR%.zip sha256 ^| find /v "hash of file" ^| find /v "CertUtil"') do set SHA256GRADLE=%%i
+if "%SHA256GRADLE%" == "%GRADLE_SHA256%" (goto extractGradle)
 echo Invalid SHA256 for Gradle detected (%SHA256GRADLE%)
 goto done
 
 :extractGradle
 echo Extracting Gradle...
-tar -xf %~dp0/.gradle/gradle-5.2.1-bin.zip -C %~dp0/.gradle
-ren %~dp0\.gradle\gradle-5.2.1 gradle-5.2.1-bin
+tar -xf %~dp0/.gradle/%GRADLE_DIR%.zip -C %~dp0/.gradle/temp
+for /d %%i in (%~dp0\.gradle\temp\*) do move %%i %~dp0\.gradle\%GRADLE_DIR%
+rmdir %~dp0\.gradle\temp
 
 :run
-set JAVA_HOME=%~dp0/.jdk/openjdk-12_windows-x64_bin
-%~dp0\.gradle\gradle-5.2.1-bin\bin\gradle %*
+set JAVA_HOME=%~dp0/.jdk/%JDK_WINDOWS_DIR%
+%~dp0\.gradle\%GRADLE_DIR%\bin\gradle %*
 
 :done
