diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -357,38 +357,45 @@
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
             localRepo.push(editHash, author.getUrl(), "edit", true);
             var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
             pr.setBody("This is now ready");
+            pr.addComment("Avoid combining");
+
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
+            listServer.processIncoming();
 
             // Make two file specific comments
             pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, "Review comment");
             pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, "Another review comment");
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
 
             // The archive should contain a combined entry
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
-            assertEquals(1, archiveContainsCount(archiveFolder.path(), "^On.*wrote:"));
+            assertEquals(2, archiveContainsCount(archiveFolder.path(), "^On.*wrote:"));
 
             // As well as the mailing list
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP());
             var mailmanList = mailmanServer.getList(listAddress.address());
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             var mail = conversations.get(0).first();
             assertEquals("RFR: This is a pull request", mail.subject());
-            assertEquals(2, conversations.get(0).allMessages().size());
+            assertEquals(3, conversations.get(0).allMessages().size());
+
+            var commentReply = conversations.get(0).replies(mail).get(0);
+            assertEquals(2, commentReply.body().split("^On.*wrote:").length);
+            assertTrue(commentReply.body().contains("Avoid combining\n\n"), commentReply.body());
 
-            var reply = conversations.get(0).replies(mail).get(0);
-            assertEquals(2, reply.body().split("^On.*wrote:").length);
-            assertEquals(2, reply.body().split("> This is now ready").length, reply.body());
-            assertEquals("Re: RFR: This is a pull request", reply.subject());
-            assertTrue(reply.body().contains("Review comment\n\n"), reply.body());
-            assertTrue(reply.body().contains("Another review comment"), reply.body());
+            var reviewReply = conversations.get(0).replies(mail).get(1);
+            assertEquals(2, reviewReply.body().split("^On.*wrote:").length);
+            assertEquals(2, reviewReply.body().split("> This is now ready").length, reviewReply.body());
+            assertEquals("Re: RFR: This is a pull request", reviewReply.subject());
+            assertTrue(reviewReply.body().contains("Review comment\n\n"), reviewReply.body());
+            assertTrue(reviewReply.body().contains("Another review comment"), reviewReply.body());
         }
     }
 
     @Test
     void commentThreading(TestInfo testInfo) throws IOException {
@@ -444,24 +451,31 @@
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
             listServer.processIncoming();
             listServer.processIncoming();
 
+            // Finally some approvals
+            pr.addReview(Review.Verdict.APPROVED, "Nice");
+            reviewPr.addReview(Review.Verdict.APPROVED, "Looks fine");
+            TestBotRunner.runPeriodicItems(mlBot);
+            listServer.processIncoming();
+            listServer.processIncoming();
+
             // Sanity check the archive
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
-            assertEquals(6, archiveContainsCount(archiveFolder.path(), "^On.*wrote:"));
+            assertEquals(8, archiveContainsCount(archiveFolder.path(), "^On.*wrote:"));
 
             // Check the mailing list
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP());
             var mailmanList = mailmanServer.getList(listAddress.address());
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             var mail = conversations.get(0).first();
             assertEquals("RFR: This is a pull request", mail.subject());
-            assertEquals(7, conversations.get(0).allMessages().size());
+            assertEquals(9, conversations.get(0).allMessages().size());
 
-            // There should be two separate threads
+            // There should be four separate threads
             var thread1 = conversations.get(0).replies(mail).get(0);
             assertEquals(2, thread1.body().split("^On.*wrote:").length);
             assertEquals(2, thread1.body().split("> This is now ready").length, thread1.body());
             assertEquals("Re: RFR: This is a pull request", thread1.subject());
             assertTrue(thread1.body().contains("Review comment\n\n"), thread1.body());
@@ -483,10 +497,15 @@
             assertTrue(thread2.body().contains("Another review comment"), thread2.body());
             var thread2reply1 = conversations.get(0).replies(thread2).get(0);
             assertTrue(thread2reply1.body().contains("Sounds good"));
             var thread2reply2 = conversations.get(0).replies(thread2reply1).get(0);
             assertTrue(thread2reply2.body().contains("Thanks"));
+
+            var thread3 = conversations.get(0).replies(mail).get(2);
+            assertEquals("Re: RFR: This is a pull request", thread3.subject());
+            var thread4 = conversations.get(0).replies(mail).get(3);
+            assertEquals("Re: Approved and Reviewed by integrationreviewer1", thread4.subject());
         }
     }
 
     @Test
     void reviewContext(TestInfo testInfo) throws IOException {
@@ -1002,11 +1021,11 @@
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
             assertEquals(1, archiveContainsCount(archiveFolder.path(), "Review status set to Approved"));
             if (author.host().supportsReviewBody()) {
                 assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 2"));
             }
-            assertEquals(1, archiveContainsCount(archiveFolder.path(), "This PR has been marked as Reviewed by integrationreviewer1."));
+            assertEquals(1, archiveContainsCount(archiveFolder.path(), "Re: Approved and Reviewed by integrationreviewer1"));
 
             // Yet another change
             reviewedPr.addReview(Review.Verdict.DISAPPROVED, "Reason 3");
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
