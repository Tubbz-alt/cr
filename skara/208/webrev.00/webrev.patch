diff a/bot/build.gradle b/bot/build.gradle
--- a/bot/build.gradle
+++ b/bot/build.gradle
@@ -30,10 +30,12 @@
 }
 
 dependencies {
     implementation project(':host')
     implementation project(':network')
+    implementation project(':issuetracker')
+    implementation project(':forge')
     implementation project(':vcs')
     implementation project(':json')
     implementation project(':census')
 }
 
diff a/bot/src/main/java/module-info.java b/bot/src/main/java/module-info.java
--- a/bot/src/main/java/module-info.java
+++ b/bot/src/main/java/module-info.java
@@ -20,10 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 module org.openjdk.skara.bot {
     requires transitive org.openjdk.skara.host;
+    requires transitive org.openjdk.skara.issuetracker;
+    requires transitive org.openjdk.skara.forge;
     requires transitive org.openjdk.skara.json;
     requires transitive org.openjdk.skara.census;
     requires org.openjdk.skara.network;
     requires org.openjdk.skara.vcs;
     requires java.logging;
diff a/bot/src/main/java/org/openjdk/skara/bot/BotConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotConfiguration.java
@@ -20,11 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bot;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.HostedRepository;
+import org.openjdk.skara.issuetracker.IssueProject;
 import org.openjdk.skara.json.JSONObject;
 
 import java.nio.file.Path;
 
 public interface BotConfiguration {
diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
@@ -20,11 +20,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bot;
 
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.json.JSONObject;
 import org.openjdk.skara.vcs.VCS;
 
 import java.io.*;
@@ -36,12 +38,12 @@
 import java.util.regex.Pattern;
 
 public class BotRunnerConfiguration {
     private final Logger log;
     private final JSONObject config;
-    private final Map<String, RepositoryHost> repositoryHosts;
-    private final Map<String, IssueHost> issueHosts;
+    private final Map<String, Forge> repositoryHosts;
+    private final Map<String, IssueTracker> issueHosts;
     private final Map<String, HostedRepository> repositories;
 
     private BotRunnerConfiguration(JSONObject config, Path cwd) throws ConfigurationError {
         this.config = config;
         log = Logger.getLogger("org.openjdk.skara.bot");
@@ -49,23 +51,23 @@
         repositoryHosts = parseRepositoryHosts(config, cwd);
         issueHosts = parseIssueHosts(config, cwd);
         repositories = parseRepositories(config);
     }
 
-    private Map<String, RepositoryHost> parseRepositoryHosts(JSONObject config, Path cwd) throws ConfigurationError {
-        Map<String, RepositoryHost> ret = new HashMap<>();
+    private Map<String, Forge> parseRepositoryHosts(JSONObject config, Path cwd) throws ConfigurationError {
+        Map<String, Forge> ret = new HashMap<>();
 
         if (!config.contains("hosts")) {
             return ret;
         }
 
         for (var entry : config.get("hosts").fields()) {
             if (entry.value().contains("gitlab")) {
                 var gitlab = entry.value().get("gitlab");
                 var uri = URIBuilder.base(gitlab.get("url").asString()).build();
                 var pat = new PersonalAccessToken(gitlab.get("username").asString(), gitlab.get("pat").asString());
-                ret.put(entry.name(), HostFactory.createGitLabHost(uri, pat));
+                ret.put(entry.name(), ForgeFactory.createGitLabHost(uri, pat));
             } else if (entry.value().contains("github")) {
                 var github = entry.value().get("github");
                 URI uri;
                 if (github.contains("url")) {
                     uri = URIBuilder.base(github.get("url").asString()).build();
@@ -79,37 +81,37 @@
                     webUriReplacement = github.get("weburl").get("replacement").asString();
                 }
 
                 if (github.contains("app")) {
                     var keyFile = cwd.resolve(github.get("app").get("key").asString());
-                    ret.put(entry.name(), HostFactory.createGitHubHost(uri, webUriPattern, webUriReplacement, keyFile.toString(),
+                    ret.put(entry.name(), ForgeFactory.createGitHubHost(uri, webUriPattern, webUriReplacement, keyFile.toString(),
                                                                        github.get("app").get("id").asString(),
                                                                        github.get("app").get("installation").asString()));
                 } else {
                     var pat = new PersonalAccessToken(github.get("username").asString(), github.get("pat").asString());
-                    ret.put(entry.name(), HostFactory.createGitHubHost(uri, pat));
+                    ret.put(entry.name(), ForgeFactory.createGitHubHost(uri, pat));
                 }
             } else {
                 throw new ConfigurationError("Host " + entry.name());
             }
         }
 
         return ret;
     }
 
-    private Map<String, IssueHost> parseIssueHosts(JSONObject config, Path cwd) throws ConfigurationError {
-        Map<String, IssueHost> ret = new HashMap<>();
+    private Map<String, IssueTracker> parseIssueHosts(JSONObject config, Path cwd) throws ConfigurationError {
+        Map<String, IssueTracker> ret = new HashMap<>();
 
         if (!config.contains("hosts")) {
             return ret;
         }
 
         for (var entry : config.get("hosts").fields()) {
             if (entry.value().contains("jira")) {
                 var jira = entry.value().get("jira");
                 var uri = URIBuilder.base(jira.get("url").asString()).build();
-                ret.put(entry.name(), HostFactory.createJiraHost(uri, null));
+                ret.put(entry.name(), IssueTrackerFactory.createJiraHost(uri, null));
             } else {
                 throw new ConfigurationError("Host " + entry.name());
             }
         }
 
diff a/bots/cli/build.gradle b/bots/cli/build.gradle
--- a/bots/cli/build.gradle
+++ b/bots/cli/build.gradle
@@ -49,10 +49,12 @@
     implementation project(':vcs')
     implementation project(':jcheck')
     implementation project(':host')
     implementation project(':network')
     implementation project(':bot')
+    implementation project(':forge')
+    implementation project(':issuetracker')
     implementation project(':census')
     implementation project(':json')
     implementation project(':ini')
     implementation project(':process')
     implementation project(':args')
diff a/bots/forward/build.gradle b/bots/forward/build.gradle
--- a/bots/forward/build.gradle
+++ b/bots/forward/build.gradle
@@ -31,10 +31,12 @@
 }
 
 dependencies {
     implementation project(':host')
     implementation project(':bot')
+    implementation project(':forge')
+    implementation project(':issuetracker')
     implementation project(':census')
     implementation project(':json')
     implementation project(':vcs')
 
     testImplementation project(':test')
diff a/bots/forward/src/main/java/org/openjdk/skara/bots/forward/ForwardBot.java b/bots/forward/src/main/java/org/openjdk/skara/bots/forward/ForwardBot.java
--- a/bots/forward/src/main/java/org/openjdk/skara/bots/forward/ForwardBot.java
+++ b/bots/forward/src/main/java/org/openjdk/skara/bots/forward/ForwardBot.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.forward;
 
 import org.openjdk.skara.bot.*;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.vcs.*;
 
 import java.io.IOException;
 import java.io.UncheckedIOException;
 import java.nio.charset.StandardCharsets;
diff a/bots/hgbridge/build.gradle b/bots/hgbridge/build.gradle
--- a/bots/hgbridge/build.gradle
+++ b/bots/hgbridge/build.gradle
@@ -32,10 +32,12 @@
 
 dependencies {
     implementation project(':bot')
     implementation project(':vcs')
     implementation project(':host')
+    implementation project(':forge')
+    implementation project(':issuetracker')
     implementation project(':census')
     implementation project(':process')
     implementation project(':json')
     implementation project(':network')
 
diff a/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/ExporterConfig.java b/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/ExporterConfig.java
--- a/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/ExporterConfig.java
+++ b/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/ExporterConfig.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.hgbridge;
 
-import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.convert.*;
 
 import java.io.IOException;
diff a/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java b/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
--- a/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
+++ b/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.hgbridge;
 
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.process.Process;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Tag;
diff a/bots/merge/build.gradle b/bots/merge/build.gradle
--- a/bots/merge/build.gradle
+++ b/bots/merge/build.gradle
@@ -30,10 +30,12 @@
     }
 }
 
 dependencies {
     implementation project(':host')
+    implementation project(':forge')
+    implementation project(':issuetracker')
     implementation project(':bot')
     implementation project(':census')
     implementation project(':json')
     implementation project(':vcs')
 
diff a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
--- a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
+++ b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.merge;
 
 import org.openjdk.skara.bot.*;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.vcs.*;
 
 import java.io.IOException;
 import java.io.UncheckedIOException;
 import java.nio.charset.StandardCharsets;
@@ -87,11 +87,11 @@
             var title = "Cannot automatically merge " + from.name() + ":" + fromBranch.name();
             var marker = "<!-- MERGE CONFLICTS -->";
             for (var pr : to.pullRequests()) {
                 if (pr.title().equals(title) &&
                     pr.body().startsWith(marker) &&
-                    to.host().currentUser().equals(pr.author())) {
+                    to.forge().currentUser().equals(pr.author())) {
                     var lines = pr.body().split("\n");
                     var head = new Hash(lines[1].substring(5, 45));
                     if (repo.contains(originToBranch, head)) {
                         log.info("Closing resolved merge conflict PR " + pr.id());
                         pr.addComment("Merge conflicts have been resolved, closing this PR");
diff a/bots/mirror/build.gradle b/bots/mirror/build.gradle
--- a/bots/mirror/build.gradle
+++ b/bots/mirror/build.gradle
@@ -30,10 +30,12 @@
     }
 }
 
 dependencies {
     implementation project(':host')
+    implementation project(':forge')
+    implementation project(':issuetracker')
     implementation project(':bot')
     implementation project(':census')
     implementation project(':json')
     implementation project(':vcs')
 
diff a/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java b/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
--- a/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
+++ b/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.mirror;
 
 import org.openjdk.skara.bot.*;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.vcs.*;
 
 import java.io.IOException;
 import java.io.UncheckedIOException;
 import java.nio.charset.StandardCharsets;
diff a/bots/mlbridge/build.gradle b/bots/mlbridge/build.gradle
--- a/bots/mlbridge/build.gradle
+++ b/bots/mlbridge/build.gradle
@@ -32,10 +32,12 @@
 
 dependencies {
     implementation project(':bot')
     implementation project(':mailinglist')
     implementation project(':host')
+    implementation project(':forge')
+    implementation project(':issuetracker')
     implementation project(':network')
     implementation project(':census')
     implementation project(':vcs')
     implementation project(':jcheck')
     implementation project(':json')
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -1,9 +1,9 @@
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.email.Email;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.Review;
 import org.openjdk.skara.vcs.*;
 
 import java.net.URI;
 import java.time.format.DateTimeFormatter;
 import java.util.Arrays;
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -22,11 +22,13 @@
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.bot.WorkItem;
 import org.openjdk.skara.email.*;
+import org.openjdk.skara.forge.PullRequest;
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.Comment;
 import org.openjdk.skara.mailinglist.*;
 import org.openjdk.skara.vcs.Repository;
 
 import java.io.*;
 import java.net.URI;
@@ -117,11 +119,11 @@
     }
 
     private final static Pattern commandPattern = Pattern.compile("^/.*$");
 
     private boolean ignoreComment(HostUser author, String body) {
-        if (pr.repository().host().currentUser().equals(author)) {
+        if (pr.repository().forge().currentUser().equals(author)) {
             return true;
         }
         if (bot.ignoredUsers().contains(author.userName())) {
             return true;
         }
@@ -142,11 +144,11 @@
     private static final String webrevHeaderMarker = "<!-- mlbridge webrev header -->";
     private static final String webrevListMarker = "<!-- mlbridge webrev list -->";
 
     private void updateWebrevComment(List<Comment> comments, int index, URI fullWebrev, URI incWebrev) {
         var existing = comments.stream()
-                               .filter(comment -> comment.author().equals(pr.repository().host().currentUser()))
+                               .filter(comment -> comment.author().equals(pr.repository().forge().currentUser()))
                                .filter(comment -> comment.body().contains(webrevCommentMarker))
                                .findAny();
         var comment = webrevCommentMarker + "\n";
         comment += webrevHeaderMarker + "\n";
         comment += "### Webrevs" + "\n";
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CensusInstance.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CensusInstance.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CensusInstance.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CensusInstance.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.census.*;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.jcheck.JCheckConfiguration;
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.net.URLEncoder;
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
@@ -22,11 +22,11 @@
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.bot.WorkItem;
 import org.openjdk.skara.email.*;
-import org.openjdk.skara.host.PullRequest;
+import org.openjdk.skara.forge.PullRequest;
 
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.logging.Logger;
@@ -75,11 +75,11 @@
     public void run(Path scratchPath) {
         var comments = pr.comments();
 
         var alreadyBridged = new HashSet<EmailAddress>();
         for (var comment : comments) {
-            if (!comment.author().equals(pr.repository().host().currentUser())) {
+            if (!comment.author().equals(pr.repository().forge().currentUser())) {
                 continue;
             }
             var matcher = bridgedMailId.matcher(comment.body());
             if (!matcher.find()) {
                 continue;
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBot.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBot.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBot.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBot.java
@@ -22,11 +22,11 @@
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.bot.*;
 import org.openjdk.skara.email.*;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.mailinglist.*;
 
 import java.util.*;
 import java.util.concurrent.*;
 import java.util.logging.Logger;
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
@@ -22,11 +22,11 @@
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.bot.*;
 import org.openjdk.skara.email.EmailAddress;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 
 import java.net.URI;
 import java.nio.file.Path;
 import java.time.Duration;
 import java.util.*;
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
@@ -22,11 +22,11 @@
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.bot.*;
 import org.openjdk.skara.email.EmailAddress;
-import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.mailinglist.MailingListServerFactory;
 
 import java.nio.file.Path;
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.mlbridge;
 
-import org.openjdk.skara.host.PullRequest;
+import org.openjdk.skara.forge.PullRequest;
 import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.Issue;
 
 import java.io.*;
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -1,10 +1,12 @@
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.census.Contributor;
 import org.openjdk.skara.email.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.Comment;
 import org.openjdk.skara.vcs.Hash;
 
 import java.net.URI;
 import java.nio.charset.StandardCharsets;
 import java.security.*;
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.email.EmailAddress;
-import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.webrev.Webrev;
 
 import java.io.*;
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.email.*;
-import org.openjdk.skara.host.PullRequest;
+import org.openjdk.skara.forge.PullRequest;
 import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.mailinglist.*;
 import org.openjdk.skara.test.*;
 
 import org.junit.jupiter.api.*;
@@ -60,15 +60,15 @@
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var ignored = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master",
                                                  listAddress,
-                                                 Set.of(ignored.host().currentUser().userName()),
+                                                 Set.of(ignored.forge().currentUser().userName()),
                                                  Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
                                                  URIBuilder.base("http://www.test.test/").build(),
                                                  Set.of(), Map.of(),
@@ -126,15 +126,15 @@
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var ignored = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master",
                                                  listAddress,
-                                                 Set.of(ignored.host().currentUser().userName()),
+                                                 Set.of(ignored.forge().currentUser().userName()),
                                                  Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
                                                  URIBuilder.base("http://www.test.test/").build(),
                                                  Set.of(), Map.of(),
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.email.EmailAddress;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.mailinglist.MailingListServerFactory;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Repository;
 
@@ -91,12 +91,12 @@
     private long countSubstrings(String string, String substring) {
         return Pattern.compile(substring).matcher(string).results().count();
     }
 
     private String noreplyAddress(HostedRepository repository) {
-        return "test+" + repository.host().currentUser().id() + "+" +
-                repository.host().currentUser().userName() +
+        return "test+" + repository.forge().currentUser().id() + "+" +
+                repository.forge().currentUser().userName() +
                 "@openjdk.java.net";
     }
 
     @Test
     void simpleArchive(TestInfo testInfo) throws IOException {
@@ -108,19 +108,19 @@
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var ignored = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master", listAddress,
-                                                 Set.of(ignored.host().currentUser().userName()),
+                                                 Set.of(ignored.forge().currentUser().userName()),
                                                  Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
                                                  URIBuilder.base("http://www.test.test/").build(),
-                                                 Set.of("rfr"), Map.of(ignored.host().currentUser().userName(),
+                                                 Set.of("rfr"), Map.of(ignored.forge().currentUser().userName(),
                                                                        Pattern.compile("ready")),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of("Extra1", "val1", "Extra2", "val2"),
                                                  Duration.ZERO);
 
@@ -204,11 +204,11 @@
             // And there should be a webrev
             Repository.materialize(webrevFolder.path(), archive.url(), "webrev");
             assertTrue(webrevContains(webrevFolder.path(), "1 lines changed"));
             var comments = pr.comments();
             var webrevComments = comments.stream()
-                                         .filter(comment -> comment.author().equals(author.host().currentUser()))
+                                         .filter(comment -> comment.author().equals(author.forge().currentUser()))
                                          .filter(comment -> comment.body().contains("webrev"))
                                          .filter(comment -> comment.body().contains(editHash.hex()))
                                          .collect(Collectors.toList());
             assertEquals(1, webrevComments.size());
 
@@ -265,14 +265,14 @@
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var ignored = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master", listAddress,
-                                                 Set.of(ignored.host().currentUser().userName()),
+                                                 Set.of(ignored.forge().currentUser().userName()),
                                                  Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
                                                  URIBuilder.base("http://www.test.test/").build(),
                                                  Set.of(), Map.of(),
@@ -353,11 +353,11 @@
              var listServer = new TestMailmanServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(),
                                                  listServer.getSMTP(),
@@ -440,12 +440,12 @@
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addReviewer(reviewer.host().currentUser().id())
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addReviewer(reviewer.forge().currentUser().id())
+                                           .addAuthor(author.forge().currentUser().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(),
                                                  listServer.getSMTP(),
@@ -523,11 +523,11 @@
             assertTrue(thread1.body().contains("Review comment\n\n"), thread1.body());
             assertFalse(thread1.body().contains("Another review comment"), thread1.body());
             var thread1reply1 = conversations.get(0).replies(thread1).get(0);
             assertTrue(thread1reply1.body().contains("I agree"));
             assertEquals(noreplyAddress(archive), thread1reply1.author().address());
-            assertEquals(archive.host().currentUser().fullName(), thread1reply1.author().fullName().orElseThrow());
+            assertEquals(archive.forge().currentUser().fullName(), thread1reply1.author().fullName().orElseThrow());
             var thread1reply2 = conversations.get(0).replies(thread1reply1).get(0);
             assertTrue(thread1reply2.body().contains("Great"));
             assertEquals("integrationreviewer1@openjdk.java.net", thread1reply2.author().address());
             assertEquals("Generated Reviewer 1", thread1reply2.author().fullName().orElseThrow());
 
@@ -558,11 +558,11 @@
              var listServer = new TestMailmanServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(),
                                                  listServer.getSMTP(),
@@ -609,11 +609,11 @@
              var listServer = new TestMailmanServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(),
                                                  listServer.getSMTP(),
@@ -679,11 +679,11 @@
              var listServer = new TestMailmanServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
@@ -738,11 +738,11 @@
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var commenter = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
@@ -797,11 +797,11 @@
             assertTrue(archiveContains(archiveFolder.path(), "Fixing"));
 
             // The webrev comment should be updated
             var comments = pr.comments();
             var webrevComments = comments.stream()
-                                         .filter(comment -> comment.author().equals(author.host().currentUser()))
+                                         .filter(comment -> comment.author().equals(author.forge().currentUser()))
                                          .filter(comment -> comment.body().contains("webrev"))
                                          .filter(comment -> comment.body().contains(nextHash.hex()))
                                          .filter(comment -> comment.body().contains(editHash.hex()))
                                          .collect(Collectors.toList());
             assertEquals(1, webrevComments.size());
@@ -859,11 +859,11 @@
              var listServer = new TestMailmanServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var sender = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(sender, author, archive, censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
@@ -918,11 +918,11 @@
             assertTrue(archiveContains(archiveFolder.path(), "Replaced msg"));
 
             // The webrev comment should be updated
             var comments = pr.comments();
             var webrevComments = comments.stream()
-                                         .filter(comment -> comment.author().equals(author.host().currentUser()))
+                                         .filter(comment -> comment.author().equals(author.forge().currentUser()))
                                          .filter(comment -> comment.body().contains("webrev"))
                                          .filter(comment -> comment.body().contains(newEditHash.hex()))
                                          .collect(Collectors.toList());
             assertEquals(1, webrevComments.size());
 
@@ -950,15 +950,15 @@
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var ignored = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master",
                                                  listAddress,
-                                                 Set.of(ignored.host().currentUser().userName()),
+                                                 Set.of(ignored.forge().currentUser().userName()),
                                                  Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
                                                  URIBuilder.base("http://www.test.test/").build(),
                                                  Set.of(), Map.of(),
@@ -988,11 +988,11 @@
             assertTrue(archiveContains(archiveFolder.path(), editHash.abbreviate()));
 
             // And there should be a webrev comment
             var comments = pr.comments();
             var webrevComments = comments.stream()
-                                         .filter(comment -> comment.author().equals(author.host().currentUser()))
+                                         .filter(comment -> comment.author().equals(author.forge().currentUser()))
                                          .filter(comment -> comment.body().contains("webrev"))
                                          .filter(comment -> comment.body().contains(editHash.hex()))
                                          .collect(Collectors.toList());
             assertEquals(1, webrevComments.size());
             assertEquals(1, countSubstrings(webrevComments.get(0).body(), "webrev.00"));
@@ -1004,11 +1004,11 @@
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The webrev comment should not contain duplicate entries
             comments = pr.comments();
             webrevComments = comments.stream()
-                                         .filter(comment -> comment.author().equals(author.host().currentUser()))
+                                         .filter(comment -> comment.author().equals(author.forge().currentUser()))
                                          .filter(comment -> comment.body().contains("webrev"))
                                          .filter(comment -> comment.body().contains(editHash.hex()))
                                          .collect(Collectors.toList());
             assertEquals(1, webrevComments.size());
             assertEquals(1, countSubstrings(webrevComments.get(0).body(), "webrev.00"));
@@ -1025,12 +1025,12 @@
             var archive = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var from = EmailAddress.from("test", "test@test.mail");
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addReviewer(reviewer.host().currentUser().id())
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addReviewer(reviewer.forge().currentUser().id())
+                                           .addAuthor(author.forge().currentUser().id());
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
                                                  URIBuilder.base("http://www.test.test/").build(),
@@ -1063,11 +1063,11 @@
 
             // The archive should contain a note
             Repository.materialize(archiveFolder.path(), archive.url(), "master");
             assertEquals(1, archiveContainsCount(archiveFolder.path(), "Disapproved by "));
             assertEquals(1, archiveContainsCount(archiveFolder.path(), " by integrationreviewer1"));
-            if (author.host().supportsReviewBody()) {
+            if (author.forge().supportsReviewBody()) {
                 assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 1"));
             }
 
             // Then approve it
             reviewedPr.addReview(Review.Verdict.APPROVED, "Reason 2");
@@ -1076,11 +1076,11 @@
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain another note
             Repository.materialize(archiveFolder.path(), archive.url(), "master");
             assertEquals(1, archiveContainsCount(archiveFolder.path(), "Approved by "));
-            if (author.host().supportsReviewBody()) {
+            if (author.forge().supportsReviewBody()) {
                 assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 2"));
             }
             assertEquals(1, archiveContainsCount(archiveFolder.path(), "Re: \\[Approved\\] RFR:"));
 
             // Yet another change
@@ -1090,11 +1090,11 @@
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain another note
             Repository.materialize(archiveFolder.path(), archive.url(), "master");
             assertEquals(2, archiveContainsCount(archiveFolder.path(), "Disapproved by "));
-            if (author.host().supportsReviewBody()) {
+            if (author.forge().supportsReviewBody()) {
                 assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 3"));
             }
         }
     }
 
@@ -1107,15 +1107,15 @@
             var author = credentials.getHostedRepository();
             var ignored = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master",
                                                  listAddress,
-                                                 Set.of(ignored.host().currentUser().userName()),
+                                                 Set.of(ignored.forge().currentUser().userName()),
                                                  Set.of(Pattern.compile("ignore this comment", Pattern.MULTILINE | Pattern.DOTALL)),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
                                                  URIBuilder.base("http://www.test.test/").build(),
                                                  Set.of(), Map.of(),
diff a/bots/notify/build.gradle b/bots/notify/build.gradle
--- a/bots/notify/build.gradle
+++ b/bots/notify/build.gradle
@@ -32,10 +32,12 @@
 
 dependencies {
     implementation project(':host')
     implementation project(':network')
     implementation project(':bot')
+    implementation project(':forge')
+    implementation project(':issuetracker')
     implementation project(':json')
     implementation project(':census')
     implementation project(':vcs')
     implementation project(':jcheck')
     implementation project(':email')
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.bot.*;
-import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.storage.StorageBuilder;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.OpenJDKTag;
 
 import java.io.*;
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.notify;
 
-import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.*;
 
 import java.nio.file.Path;
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.email.*;
-import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.mailinglist.*;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.OpenJDKTag;
 
 import java.io.*;
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateConsumer.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateConsumer.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateConsumer.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateConsumer.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.notify;
 
-import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.OpenJDKTag;
 
 import java.util.List;
 
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdateHistoryTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdateHistoryTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdateHistoryTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdateHistoryTests.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.notify;
 
-import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.storage.StorageBuilder;
 import org.openjdk.skara.test.HostCredentials;
 import org.openjdk.skara.vcs.Tag;
 import org.openjdk.skara.vcs.*;
 
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.email.*;
-import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.mailinglist.MailingListServerFactory;
 import org.openjdk.skara.storage.StorageBuilder;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Tag;
diff a/bots/pr/build.gradle b/bots/pr/build.gradle
--- a/bots/pr/build.gradle
+++ b/bots/pr/build.gradle
@@ -30,10 +30,12 @@
     }
 }
 
 dependencies {
     implementation project(':bot')
+    implementation project(':forge')
+    implementation project(':issuetracker')
     implementation project(':vcs')
     implementation project(':jcheck')
     implementation project(':host')
     implementation project(':census')
     implementation project(':ini')
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AllowCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AllowCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AllowCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/AllowCommand.java
@@ -20,20 +20,21 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.issuetracker.Comment;
 
 import java.io.PrintWriter;
 import java.nio.file.Path;
 import java.util.List;
 
 public class AllowCommand implements CommandHandler {
     @Override
     public void handle(PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
-        var botUser = pr.repository().host().currentUser();
+        var botUser = pr.repository().forge().currentUser();
         var vetoers = Veto.vetoers(botUser, allComments);
 
         if (!vetoers.contains(comment.author().id())) {
             reply.println("You have not rejected this change");
             return;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CensusInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CensusInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CensusInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CensusInstance.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.census.*;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.jcheck.JCheckConfiguration;
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.net.URLEncoder;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -20,11 +20,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.Issue;
 
 import java.io.*;
 import java.util.*;
@@ -133,11 +135,11 @@
 
                 var sourceRepo = mergeSourceRepository();
                 var sourceBranch = mergeSourceBranch();
                 if (sourceBranch.isPresent() && sourceRepo.isPresent()) {
                     try {
-                        var mergeSourceRepo = pr.repository().host().repository(sourceRepo.get());
+                        var mergeSourceRepo = pr.repository().forge().repository(sourceRepo.get());
                         try {
                             var sourceHash = prInstance.localRepo().fetch(mergeSourceRepo.url(), sourceBranch.get());
                             if (!prInstance.localRepo().isAncestor(commits.get(1).hash(), sourceHash)) {
                                 ret.add("The merge contains commits that are not ancestors of the source");
                             }
@@ -331,11 +333,11 @@
             pr.addComment(body);
         }
     }
 
     private Optional<Comment> findComment(List<Comment> comments, String marker) {
-        var self = pr.repository().host().currentUser();
+        var self = pr.repository().forge().currentUser();
         return comments.stream()
                        .filter(comment -> comment.author().equals(self))
                        .filter(comment -> comment.body().contains(marker))
                        .findAny();
     }
@@ -474,11 +476,11 @@
             // Calculate and update the status message if needed
             var statusMessage = getStatusMessage(activeReviews, visitor);
             var updatedBody = updateStatusMessage(statusMessage);
 
             // Post / update approval messages (only needed if the review itself can't contain a body)
-            if (!pr.repository().host().supportsReviewBody()) {
+            if (!pr.repository().forge().supportsReviewBody()) {
                 updateReviewedMessages(comments, allReviews);
             }
 
             var commit = prInstance.localRepo().lookup(localHash).orElseThrow();
             var commitMessage = String.join("\n", commit.message());
@@ -495,11 +497,11 @@
                 newLabels.remove("outdated");
             }
 
             // Ensure that the ready for sponsor label is up to date
             newLabels.remove("sponsor");
-            var readyHash = ReadyForSponsorTracker.latestReadyForSponsor(pr.repository().host().currentUser(), comments);
+            var readyHash = ReadyForSponsorTracker.latestReadyForSponsor(pr.repository().forge().currentUser(), comments);
             if (readyHash.isPresent() && readyForIntegration) {
                 var acceptedHash = readyHash.get();
                 if (pr.headHash().equals(acceptedHash)) {
                     newLabels.add("sponsor");
                 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
@@ -20,11 +20,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.vcs.Hash;
 
 import java.io.*;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
@@ -77,11 +79,11 @@
                                         .filter(review -> review.verdict() == Review.Verdict.APPROVED)
                                         .map(review -> encodeReviewer(review.reviewer(), censusInstance) + review.hash().hex())
                                         .sorted()
                                         .collect(Collectors.joining());
             var commentString = comments.stream()
-                                        .filter(comment -> comment.author().id().equals(pr.repository().host().currentUser().id()))
+                                        .filter(comment -> comment.author().id().equals(pr.repository().forge().currentUser().id()))
                                         .flatMap(comment -> comment.body().lines())
                                         .filter(line -> metadataComments.matcher(line).find())
                                         .collect(Collectors.joining());
             var labelString = labels.stream()
                                     .sorted()
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandHandler.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandHandler.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandHandler.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandHandler.java
@@ -20,11 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.issuetracker.Comment;
 
 import java.io.PrintWriter;
 import java.nio.file.Path;
 import java.util.List;
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
@@ -20,11 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.issuetracker.Comment;
 
 import java.io.*;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.function.Consumer;
@@ -52,11 +53,11 @@
 
     static class HelpCommand implements CommandHandler {
         static private Map<String, String> external = null;
 
         @Override
-        public void handle(PullRequest pr, CensusInstance censusInstance, Path scratchPath,  String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
+        public void handle(PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
             reply.println("Available commands:");
             Stream.concat(
                     commandHandlers.entrySet().stream()
                                    .map(entry -> entry.getKey() + " - " + entry.getValue().description()),
                     external.entrySet().stream()
@@ -80,11 +81,11 @@
             HelpCommand.external = external;
         }
     }
 
     private List<AbstractMap.SimpleEntry<String, Comment>> findCommandComments(List<Comment> comments) {
-        var self = pr.repository().host().currentUser();
+        var self = pr.repository().forge().currentUser();
         var handled = comments.stream()
                               .filter(comment -> comment.author().equals(self))
                               .map(comment -> commandReplyPattern.matcher(comment.body()))
                               .filter(Matcher::find)
                               .map(matcher -> matcher.group(1))
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java
@@ -21,11 +21,12 @@
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.email.EmailAddress;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.issuetracker.Comment;
 
 import java.io.PrintWriter;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.regex.Pattern;
@@ -51,11 +52,11 @@
             case "add":
                 reply.println(Contributors.addContributorMarker(contributor));
                 reply.println("Contributor `" + contributor.toString() + "` successfully added.");
                 break;
             case "remove":
-                var existing = new HashSet<>(Contributors.contributors(pr.repository().host().currentUser(), allComments));
+                var existing = new HashSet<>(Contributors.contributors(pr.repository().forge().currentUser(), allComments));
                 if (existing.contains(contributor)) {
                     reply.println(Contributors.removeContributorMarker(contributor));
                     reply.println("Contributor `" + contributor.toString() + "` successfully removed.");
                 } else {
                     reply.println("Contributor `" + contributor.toString() + "` was not found.");
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Contributors.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Contributors.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Contributors.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Contributors.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.email.EmailAddress;
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.Comment;
 
 import java.util.*;
 import java.util.regex.*;
 import java.util.stream.Collectors;
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
@@ -20,11 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.issuetracker.Comment;
 
 import java.io.*;
 import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.PullRequest;
+import org.openjdk.skara.forge.PullRequest;
 import org.openjdk.skara.vcs.Hash;
 
 import java.io.*;
 import java.nio.file.Path;
 import java.util.*;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
@@ -21,11 +21,12 @@
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.bot.*;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.issuetracker.IssueProject;
 import org.openjdk.skara.json.JSONValue;
 import org.openjdk.skara.vcs.Hash;
 
 import java.util.*;
 import java.util.concurrent.*;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.jcheck.*;
 import org.openjdk.skara.jcheck.Check;
 import org.openjdk.skara.vcs.Hash;
 
 import java.util.*;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -21,10 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.census.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.jcheck.JCheck;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.Issue;
 import org.openjdk.skara.vcs.openjdk.*;
@@ -74,16 +75,16 @@
                           .filter(Objects::nonNull)
                           .map(Contributor::username)
                           .collect(Collectors.toList());
 
         var comments = pr.comments();
-        var additionalContributors = Contributors.contributors(pr.repository().host().currentUser(),
+        var additionalContributors = Contributors.contributors(pr.repository().forge().currentUser(),
                                                                comments).stream()
                                                  .map(email -> Author.fromString(email.toString()))
                                                  .collect(Collectors.toList());
 
-        var summary = Summary.summary(pr.repository().host().currentUser(), comments);
+        var summary = Summary.summary(pr.repository().forge().currentUser(), comments);
         var issue = Issue.fromString(pr.title());
         var commitMessageBuilder = issue.map(CommitMessage::title).orElseGet(() -> CommitMessage.title(isMerge ? "Merge" : pr.title()));
         commitMessageBuilder.contributors(additionalContributors)
                                          .reviewers(reviewers);
         summary.ifPresent(commitMessageBuilder::summary);
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestWorkItem.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.bot.WorkItem;
-import org.openjdk.skara.host.PullRequest;
+import org.openjdk.skara.forge.PullRequest;
 
 import java.util.function.Consumer;
 
 abstract class PullRequestWorkItem implements WorkItem {
     private final Consumer<RuntimeException> errorHandler;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReadyForSponsorTracker.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReadyForSponsorTracker.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReadyForSponsorTracker.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReadyForSponsorTracker.java
@@ -21,10 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.Comment;
 import org.openjdk.skara.vcs.Hash;
 
 import java.util.*;
 import java.util.regex.*;
 import java.util.stream.Collectors;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/RejectCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/RejectCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/RejectCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/RejectCommand.java
@@ -20,11 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.issuetracker.Comment;
 
 import java.io.PrintWriter;
 import java.nio.file.Path;
 import java.util.List;
 
@@ -38,11 +39,11 @@
         if (!ProjectPermissions.mayReview(censusInstance, comment.author())) {
             reply.println("Only [Reviewers](http://openjdk.java.net/bylaws#reviewer) are allowed to reject changes.");
             return;
         }
 
-        var botUser = pr.repository().host().currentUser();
+        var botUser = pr.repository().forge().currentUser();
         var vetoers = Veto.vetoers(botUser, allComments);
 
         if (vetoers.contains(comment.author().id())) {
             reply.println("You have already rejected this change.");
             return;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewTracker.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewTracker.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewTracker.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewTracker.java
@@ -20,11 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.Review;
+import org.openjdk.skara.issuetracker.Comment;
 
 import java.util.*;
 import java.util.regex.Pattern;
 
 class ReviewTracker {
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
@@ -20,11 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.issuetracker.Comment;
 
 import java.io.*;
 import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
@@ -43,11 +44,11 @@
         if (!ProjectPermissions.mayCommit(censusInstance, comment.author())) {
             reply.println("Only [Committers](http://openjdk.java.net/bylaws#committer) are allowed to sponsor changes.");
             return;
         }
 
-        var readyHash = ReadyForSponsorTracker.latestReadyForSponsor(pr.repository().host().currentUser(), allComments);
+        var readyHash = ReadyForSponsorTracker.latestReadyForSponsor(pr.repository().forge().currentUser(), allComments);
         if (readyHash.isEmpty()) {
             reply.println("The change author (@" + pr.author().userName() + ") must issue an `integrate` command before the integration can be sponsored.");
             return;
         }
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Summary.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Summary.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Summary.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Summary.java
@@ -21,10 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.Comment;
 
 import java.nio.charset.StandardCharsets;
 import java.util.*;
 import java.util.regex.*;
 import java.util.stream.Collectors;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SummaryCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SummaryCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SummaryCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SummaryCommand.java
@@ -20,11 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.issuetracker.Comment;
 
 import java.io.PrintWriter;
 import java.nio.file.Path;
 import java.util.List;
 
@@ -34,11 +35,11 @@
         if (!comment.author().equals(pr.author())) {
             reply.println("Only the author (@" + pr.author().userName() + ") is allowed to issue the `summary` command.");
             return;
         }
 
-        var currentSummary = Summary.summary(pr.repository().host().currentUser(), allComments);
+        var currentSummary = Summary.summary(pr.repository().forge().currentUser(), allComments);
 
         if (args.isBlank()) {
             if (currentSummary.isPresent()) {
                 reply.println("Removing existing summary");
                 reply.println(Summary.setSummaryMarker(""));
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Veto.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Veto.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Veto.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/Veto.java
@@ -21,10 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.Comment;
 
 import java.util.*;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.test.*;
 
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
@@ -42,12 +42,12 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -97,12 +97,12 @@
 
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -171,13 +171,13 @@
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
             var commenter = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id())
-                                           .addReviewer(commenter.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id())
+                                           .addReviewer(commenter.forge().currentUser().id());
 
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
@@ -252,11 +252,11 @@
              var tempFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addReviewer(author.host().currentUser().id());
+                                           .addReviewer(author.forge().currentUser().id());
 
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
@@ -294,11 +294,11 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -345,12 +345,12 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -425,15 +425,15 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             // This test is only relevant on hosts not supporting proper review comment bodies
-            assumeTrue(!author.host().supportsReviewBody());
+            assumeTrue(!author.forge().supportsReviewBody());
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -458,11 +458,11 @@
 
             // There should now be two additional comments
             comments = pr.comments();
             assertEquals(commentCount + 2, comments.size());
             var comment = comments.get(commentCount);
-            assertTrue(comment.body().contains(reviewer.host().currentUser().userName()));
+            assertTrue(comment.body().contains(reviewer.forge().currentUser().userName()));
             assertTrue(comment.body().contains("approved"));
 
             // Drop the review
             approvalPr.addReview(Review.Verdict.NONE, "Unreviewed");
 
@@ -471,11 +471,11 @@
 
             // There should now be yet another comment
             comments = pr.comments();
             assertEquals(commentCount + 3, comments.size());
             comment = comments.get(commentCount + 2);
-            assertTrue(comment.body().contains(reviewer.host().currentUser().userName()));
+            assertTrue(comment.body().contains(reviewer.forge().currentUser().userName()));
             assertTrue(comment.body().contains("comment"));
 
             // No changes should not generate additional comments
             TestBotRunner.runPeriodicItems(checkBot);
             comments = pr.comments();
@@ -490,12 +490,12 @@
              var pushedFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -541,12 +541,12 @@
              var pushedFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -612,12 +612,12 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master", Map.of(), Map.of(),
                                               Map.of("block", "Test Blocker"), Set.of(), Map.of());
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
@@ -661,12 +661,12 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master", Map.of(), Map.of(),
                                               Map.of(), Set.of("good-to-go"), Map.of());
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
@@ -703,14 +703,14 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master", Map.of(), Map.of(),
-                                              Map.of(), Set.of(), Map.of(reviewer.host().currentUser().userName(), Pattern.compile("proceed")));
+                                              Map.of(), Set.of(), Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("proceed")));
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.url(), "master", true);
@@ -746,12 +746,12 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master", Map.of(), Map.of(),
                                               Map.of(), Set.of(), Map.of());
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of("appendable.txt"),
@@ -794,12 +794,12 @@
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
             var issues = credentials.getIssueProject();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master", Map.of(), Map.of(),
                                               Map.of(), Set.of(), Map.of(), issues);
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of("appendable.txt"),
@@ -926,12 +926,12 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -977,12 +977,12 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CommandTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CommandTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CommandTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CommandTests.java
@@ -38,11 +38,11 @@
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -73,11 +73,11 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.Review;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Repository;
 
 import org.junit.jupiter.api.*;
 
@@ -40,12 +40,12 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addReviewer(integrator.host().currentUser().id())
-                                           .addCommitter(author.host().currentUser().id());
+                                           .addReviewer(integrator.forge().currentUser().id())
+                                           .addCommitter(author.forge().currentUser().id());
             var prBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepoFolder = tempFolder.path().resolve("localrepo");
             var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
@@ -154,11 +154,11 @@
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var external = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
@@ -20,11 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.issuetracker.Comment;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Repository;
 
 import org.junit.jupiter.api.*;
 
@@ -44,13 +45,13 @@
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -105,13 +106,13 @@
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var committer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addCommitter(committer.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addCommitter(committer.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -154,11 +155,11 @@
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -189,11 +190,11 @@
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository - but without any checks enabled
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of("appendable.txt"),
                                                      Set.of());
@@ -231,11 +232,11 @@
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -266,11 +267,11 @@
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -312,13 +313,13 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -394,11 +395,11 @@
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var external = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -430,12 +431,12 @@
              var pushedFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -484,12 +485,12 @@
              var tempFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -535,12 +536,12 @@
              var tempFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/LabelerTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/LabelerTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/LabelerTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/LabelerTests.java
@@ -42,12 +42,12 @@
             var reviewer = credentials.getHostedRepository();
 
             var labelPatterns = Map.of("test1", List.of(Pattern.compile("a.txt")),
                                        "test2", List.of(Pattern.compile("b.txt")));
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var labelBot = new PullRequestBot(author, censusBuilder.build(), "master", labelPatterns, Map.of(), Map.of(), Set.of(), Map.of());
 
             // Populate the projects repository
             var localRepoFolder = tempFolder.path();
             var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
@@ -20,11 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.Review;
+import org.openjdk.skara.issuetracker.Comment;
 import org.openjdk.skara.process.Process;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.*;
 
 import org.junit.jupiter.api.*;
@@ -45,12 +46,12 @@
              var tempFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepoFolder = tempFolder.path().resolve("localrepo");
             var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
@@ -127,12 +128,12 @@
              var tempFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepoFolder = tempFolder.path().resolve("localrepo");
             var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
@@ -219,12 +220,12 @@
              var tempFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepoFolder = tempFolder.path().resolve("localrepo");
             var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
@@ -274,12 +275,12 @@
              var tempFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepoFolder = tempFolder.path().resolve("localrepo");
             var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
@@ -332,12 +333,12 @@
              var tempFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepoFolder = tempFolder.path().resolve("localrepo");
             var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
@@ -390,12 +391,12 @@
              var tempFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepoFolder = tempFolder.path().resolve("localrepo");
             var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
@@ -453,12 +454,12 @@
              var tempFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepoFolder = tempFolder.path().resolve("localrepo");
             var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
@@ -511,12 +512,12 @@
             // Need to force merge unrelated histories
             assumeTrue(author.repositoryType().equals(VCS.GIT));
 
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepoFolder = tempFolder.path().resolve("localrepo");
             var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/PullRequestAsserts.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/PullRequestAsserts.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/PullRequestAsserts.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/PullRequestAsserts.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.PullRequest;
+import org.openjdk.skara.forge.PullRequest;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class PullRequestAsserts {
     public static void assertLastCommentContains(PullRequest pr, String contains) {
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SponsorTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SponsorTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SponsorTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SponsorTests.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.Review;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Repository;
 
 import org.junit.jupiter.api.*;
 
@@ -41,13 +41,13 @@
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addReviewer(reviewer.forge().currentUser().id());
             if (isAuthor) {
-                censusBuilder.addAuthor(author.host().currentUser().id());
+                censusBuilder.addAuthor(author.forge().currentUser().id());
             }
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
@@ -132,11 +132,11 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -166,11 +166,11 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -202,11 +202,11 @@
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -238,11 +238,11 @@
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -328,13 +328,13 @@
 
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(integrator.host().currentUser().id())
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id())
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -394,11 +394,11 @@
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addReviewer(reviewer.host().currentUser().id());
+                                           .addReviewer(reviewer.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -473,12 +473,12 @@
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addReviewer(reviewer.host().currentUser().id())
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addReviewer(reviewer.forge().currentUser().id())
+                                           .addAuthor(author.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SummaryTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SummaryTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SummaryTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SummaryTests.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.host.Review;
+import org.openjdk.skara.forge.Review;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Repository;
 
 import org.junit.jupiter.api.*;
 
@@ -40,12 +40,12 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addReviewer(integrator.host().currentUser().id())
-                                           .addCommitter(author.host().currentUser().id());
+                                           .addReviewer(integrator.forge().currentUser().id())
+                                           .addCommitter(author.forge().currentUser().id());
             var prBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepoFolder = tempFolder.path().resolve("localrepo");
             var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
@@ -140,11 +140,11 @@
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var external = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/VetoTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/VetoTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/VetoTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/VetoTests.java
@@ -20,11 +20,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
+import org.openjdk.skara.forge.Review;
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.Comment;
 import org.openjdk.skara.test.*;
 
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
@@ -89,11 +91,11 @@
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id());
             var prBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -125,12 +127,12 @@
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var vetoer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addCommitter(vetoer.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addCommitter(vetoer.forge().currentUser().id());
             var prBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
@@ -163,12 +165,12 @@
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var vetoer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addCommitter(author.host().currentUser().id())
-                                           .addReviewer(vetoer.host().currentUser().id());
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(vetoer.forge().currentUser().id());
 
             var prBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
@@ -233,12 +235,12 @@
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var vetoer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
-                                           .addAuthor(author.host().currentUser().id())
-                                           .addReviewer(vetoer.host().currentUser().id());
+                                           .addAuthor(author.forge().currentUser().id())
+                                           .addReviewer(vetoer.forge().currentUser().id());
 
             var prBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
diff a/bots/submit/build.gradle b/bots/submit/build.gradle
--- a/bots/submit/build.gradle
+++ b/bots/submit/build.gradle
@@ -31,10 +31,12 @@
 }
 
 dependencies {
     implementation project(':bot')
     implementation project(':host')
+    implementation project(':forge')
+    implementation project(':issuetracker')
     implementation project(':census')
     implementation project(':json')
     implementation project(':vcs')
 
     testImplementation project(':test')
diff a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/CheckUpdater.java b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/CheckUpdater.java
--- a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/CheckUpdater.java
+++ b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/CheckUpdater.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.submit;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 
 import java.time.*;
 import java.util.logging.Logger;
 
 public class CheckUpdater implements Runnable {
diff a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/ShellExecutor.java b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/ShellExecutor.java
--- a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/ShellExecutor.java
+++ b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/ShellExecutor.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.submit;
 
-import org.openjdk.skara.host.CheckBuilder;
+import org.openjdk.skara.forge.CheckBuilder;
 
 import java.io.*;
 import java.nio.file.Path;
 import java.time.*;
 import java.util.*;
diff a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBot.java b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBot.java
--- a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBot.java
+++ b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBot.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.submit;
 
 import org.openjdk.skara.bot.*;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 
 import java.util.List;
 import java.util.stream.Collectors;
 
 public class SubmitBot implements Bot {
diff a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java
--- a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java
+++ b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.submit;
 
 import org.openjdk.skara.bot.WorkItem;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.vcs.Repository;
 
 import java.io.*;
 import java.nio.file.Path;
 import java.time.*;
diff a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitExecutor.java b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitExecutor.java
--- a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitExecutor.java
+++ b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitExecutor.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.submit;
 
-import org.openjdk.skara.host.CheckBuilder;
+import org.openjdk.skara.forge.CheckBuilder;
 
 import java.time.Duration;
 import java.nio.file.Path;
 
 public interface SubmitExecutor {
diff a/bots/submit/src/test/java/org/openjdk/skara/bots/submit/CheckUpdaterTests.java b/bots/submit/src/test/java/org/openjdk/skara/bots/submit/CheckUpdaterTests.java
--- a/bots/submit/src/test/java/org/openjdk/skara/bots/submit/CheckUpdaterTests.java
+++ b/bots/submit/src/test/java/org/openjdk/skara/bots/submit/CheckUpdaterTests.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.submit;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.test.*;
 
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
diff a/bots/submit/src/test/java/org/openjdk/skara/bots/submit/ShellExecutorTests.java b/bots/submit/src/test/java/org/openjdk/skara/bots/submit/ShellExecutorTests.java
--- a/bots/submit/src/test/java/org/openjdk/skara/bots/submit/ShellExecutorTests.java
+++ b/bots/submit/src/test/java/org/openjdk/skara/bots/submit/ShellExecutorTests.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.submit;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.test.TemporaryDirectory;
 import org.openjdk.skara.vcs.Hash;
 
 import org.junit.jupiter.api.Test;
 
diff a/bots/submit/src/test/java/org/openjdk/skara/bots/submit/SubmitBotTests.java b/bots/submit/src/test/java/org/openjdk/skara/bots/submit/SubmitBotTests.java
--- a/bots/submit/src/test/java/org/openjdk/skara/bots/submit/SubmitBotTests.java
+++ b/bots/submit/src/test/java/org/openjdk/skara/bots/submit/SubmitBotTests.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.submit;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.test.*;
 
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
diff a/bots/topological/build.gradle b/bots/topological/build.gradle
--- a/bots/topological/build.gradle
+++ b/bots/topological/build.gradle
@@ -31,10 +31,12 @@
     }
 }
 
 dependencies {
     implementation project(':host')
+    implementation project(':forge')
+    implementation project(':issuetracker')
     implementation project(':bot')
     implementation project(':census')
     implementation project(':json')
     implementation project(':vcs')
 
diff a/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
--- a/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
+++ b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.topological;
 
 import org.openjdk.skara.bot.*;
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.vcs.*;
 
 import java.io.IOException;
 import java.io.UncheckedIOException;
 import java.nio.charset.StandardCharsets;
diff a/cli/build.gradle b/cli/build.gradle
--- a/cli/build.gradle
+++ b/cli/build.gradle
@@ -36,10 +36,12 @@
     implementation project(':jcheck')
     implementation project(':vcs')
     implementation project(':webrev')
     implementation project(':json')
     implementation project(':host')
+    implementation project(':forge')
+    implementation project(':issuetracker')
     implementation project(':proxy')
     implementation project(':ssh')
 }
 
 
diff a/cli/src/main/java/module-info.java b/cli/src/main/java/module-info.java
--- a/cli/src/main/java/module-info.java
+++ b/cli/src/main/java/module-info.java
@@ -26,10 +26,11 @@
     requires org.openjdk.skara.census;
     requires org.openjdk.skara.webrev;
     requires org.openjdk.skara.args;
     requires org.openjdk.skara.json;
     requires org.openjdk.skara.host;
+    requires org.openjdk.skara.forge;
     requires org.openjdk.skara.proxy;
     requires org.openjdk.skara.ssh;
 
     requires java.net.http;
     requires java.logging;
diff a/cli/src/main/java/org/openjdk/skara/cli/GitFork.java b/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
@@ -21,10 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.cli;
 
 import org.openjdk.skara.args.*;
+import org.openjdk.skara.forge.Forge;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.vcs.Repository;
 import org.openjdk.skara.proxy.HttpProxy;
 
 import java.io.IOException;
@@ -143,11 +144,11 @@
 
         if (credentials.username() == null) {
             exit("No username for host " + hostName + " found, use git-credentials or the flag --username");
         }
 
-        var host = RepositoryHost.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
+        var host = Forge.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
         if (path.endsWith(".git")) {
             path = path.substring(0, path.length() - 4);
         }
         if (path.startsWith("/")) {
             path = path.substring(1);
diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -21,24 +21,25 @@
  * questions.
  */
 package org.openjdk.skara.cli;
 
 import org.openjdk.skara.args.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.vcs.*;
-import org.openjdk.skara.vcs.openjdk.*;
 import org.openjdk.skara.proxy.HttpProxy;
+import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;
 
 import java.io.IOException;
 import java.net.URI;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
 import java.util.*;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
 import java.util.logging.Level;
-import java.nio.charset.StandardCharsets;
 
 public class GitPr {
     private static void exit(String fmt, Object...args) {
         System.err.println(String.format(fmt, args));
         System.exit(1);
@@ -98,11 +99,11 @@
         }
         return name;
     }
 
     private static HostedRepository getHostedRepositoryFor(URI uri, GitCredentials credentials) throws IOException {
-        var host = RepositoryHost.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
+        var host = Forge.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
         if (System.getenv("GIT_TOKEN") == null) {
             GitCredentials.approve(credentials);
         }
         var remoteRepo = host.repository(projectName(uri));
         var parentRepo = remoteRepo.parent();
@@ -306,11 +307,11 @@
         var remotePullPath = repo.pullPath(remote);
         var username = arguments.contains("username") ? arguments.get("username").asString() : null;
         var token = isMercurial ? System.getenv("HG_TOKEN") :  System.getenv("GIT_TOKEN");
         var uri = Remote.toWebURI(remotePullPath);
         var credentials = GitCredentials.fill(uri.getHost(), uri.getPath(), username, token, uri.getScheme());
-        var host = RepositoryHost.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
+        var host = Forge.from(uri, new PersonalAccessToken(credentials.username(), credentials.password()));
 
         var action = arguments.at(0).asString();
         if (action.equals("create")) {
             if (isMercurial) {
                 var currentBookmark = repo.currentBookmark();
diff a/forge/build.gradle b/forge/build.gradle
--- /dev/null
+++ b/forge/build.gradle
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+module {
+    name = 'org.openjdk.skara.forge'
+    test {
+        requires 'org.openjdk.skara.test'
+        requires 'org.junit.jupiter.api'
+        requires 'jdk.httpserver'
+        opens 'org.openjdk.skara.forge' to 'org.junit.platform.commons'
+    }
+}
+
+dependencies {
+    implementation project(':vcs')
+    implementation project(':census')
+    implementation project(':json')
+    implementation project(':ini')
+    implementation project(':process')
+    implementation project(':email')
+    implementation project(':network')
+    implementation project(':host')
+    implementation project(':issuetracker')
+
+    testImplementation project(':test')
+}
+
+publishing {
+    publications {
+        forge(MavenPublication) {
+            from components.java
+        }
+    }
+}
diff a/forge/src/main/java/module-info.java b/forge/src/main/java/module-info.java
--- /dev/null
+++ b/forge/src/main/java/module-info.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+module org.openjdk.skara.forge {
+    requires org.openjdk.skara.vcs;
+    requires org.openjdk.skara.census;
+    requires org.openjdk.skara.json;
+    requires org.openjdk.skara.ini;
+    requires org.openjdk.skara.process;
+    requires org.openjdk.skara.email;
+    requires org.openjdk.skara.network;
+    requires transitive org.openjdk.skara.issuetracker;
+    requires transitive org.openjdk.skara.host;
+    requires java.net.http;
+    requires java.logging;
+
+    exports org.openjdk.skara.forge;
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/Check.java b/forge/src/main/java/org/openjdk/skara/forge/Check.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/Check.java
@@ -0,0 +1,88 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.vcs.Hash;
+
+import java.time.ZonedDateTime;
+import java.util.*;
+
+public class Check {
+    private final ZonedDateTime startedAt;
+    private final ZonedDateTime completedAt;
+    private final CheckStatus status;
+    private final Hash hash;
+    private final String metadata;
+    private final String title;
+    private final String summary;
+    private final List<CheckAnnotation> annotations;
+    private final String name;
+
+    Check(String name, Hash hash, CheckStatus status, ZonedDateTime startedAt, ZonedDateTime completedAt, String metadata, String title, String summary, List<CheckAnnotation> annotations) {
+        this.name = name;
+        this.hash = hash;
+        this.status = status;
+        this.startedAt = startedAt;
+        this.completedAt = completedAt;
+        this.metadata = metadata;
+        this.title = title;
+        this.summary = summary;
+        this.annotations = annotations;
+    }
+
+    public String name() {
+        return name;
+    }
+
+    public Hash hash() {
+        return hash;
+    }
+
+    public CheckStatus status() {
+        return status;
+    }
+
+    public ZonedDateTime startedAt() {
+        return startedAt;
+    }
+
+    public Optional<ZonedDateTime> completedAt() {
+        return Optional.ofNullable(completedAt);
+    }
+
+    public Optional<String> title() {
+        return Optional.ofNullable(title);
+    }
+
+    public Optional<String> summary() {
+        return Optional.ofNullable(summary);
+    }
+
+    public Optional<String> metadata() {
+        return Optional.ofNullable(metadata);
+    }
+
+    public List<CheckAnnotation> annotations() {
+        return annotations;
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/CheckAnnotation.java b/forge/src/main/java/org/openjdk/skara/forge/CheckAnnotation.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/CheckAnnotation.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import java.util.Optional;
+
+public class CheckAnnotation {
+    public final String path;
+    private final int startLine;
+    private final int endLine;
+    private final Integer startColumn;
+    private final Integer endColumn;
+    private final String title;
+    private final String message;
+    private final CheckAnnotationLevel level;
+
+    CheckAnnotation(String path, int startLine, int endLine, CheckAnnotationLevel level, Integer startColumn, Integer endColumn, String title, String message) {
+        this.path = path;
+        this.startLine = startLine;
+        this.endLine = endLine;
+        this.startColumn = startColumn;
+        this.endColumn = endColumn;
+        this.title = title;
+        this.message = message;
+        this.level = level;
+    }
+
+    public String path() {
+        return path;
+    }
+
+    public int startLine() {
+        return startLine;
+    }
+
+    public int endLine() {
+        return endLine;
+    }
+
+    public Optional<Integer> startColumn() {
+        return Optional.ofNullable(startColumn);
+    }
+
+    public Optional<Integer> endColumn() {
+        return Optional.ofNullable(endColumn);
+    }
+
+    public Optional<String> title() {
+        return Optional.ofNullable(title);
+    }
+
+    public String message() {
+        return message;
+    }
+
+    public CheckAnnotationLevel level() {
+        return level;
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/CheckAnnotationBuilder.java b/forge/src/main/java/org/openjdk/skara/forge/CheckAnnotationBuilder.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/CheckAnnotationBuilder.java
@@ -0,0 +1,67 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+public class CheckAnnotationBuilder {
+
+    private final String path;
+    private final int startLine;
+    private final int endLine;
+    private final CheckAnnotationLevel level;
+    private final String message;
+
+    private Integer startColumn;
+    private Integer endColumn;
+    private String title;
+
+    private CheckAnnotationBuilder(String path, int startLine, int endLine, CheckAnnotationLevel level, String message) {
+        this.path = path;
+        this.startLine = startLine;
+        this.endLine = endLine;
+        this.level = level;
+        this.message = message;
+    }
+
+    public static CheckAnnotationBuilder create(String path, int startLine, int endLine, CheckAnnotationLevel level, String message) {
+        return new CheckAnnotationBuilder(path, startLine, endLine, level, message);
+    }
+
+    public CheckAnnotationBuilder startColumn(int startColumn) {
+        this.startColumn = startColumn;
+        return this;
+    }
+
+    public CheckAnnotationBuilder endColumn(int endColumn) {
+        this.endColumn = endColumn;
+        return this;
+    }
+
+    public CheckAnnotationBuilder title(String title) {
+        this.title = title;
+        return this;
+    }
+
+    public CheckAnnotation build() {
+        return new CheckAnnotation(path, startLine, endLine, level, startColumn, endColumn, title, message);
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/CheckAnnotationLevel.java b/forge/src/main/java/org/openjdk/skara/forge/CheckAnnotationLevel.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/CheckAnnotationLevel.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+public enum CheckAnnotationLevel {
+    NOTICE,
+    WARNING,
+    FAILURE
+}
diff a/host/src/main/java/org/openjdk/skara/host/CheckBuilder.java b/forge/src/main/java/org/openjdk/skara/forge/CheckBuilder.java
--- a/host/src/main/java/org/openjdk/skara/host/CheckBuilder.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/CheckBuilder.java
@@ -18,11 +18,11 @@
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package org.openjdk.skara.host;
+package org.openjdk.skara.forge;
 
 import org.openjdk.skara.vcs.Hash;
 
 import java.time.*;
 import java.util.*;
diff a/forge/src/main/java/org/openjdk/skara/forge/CheckStatus.java b/forge/src/main/java/org/openjdk/skara/forge/CheckStatus.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/CheckStatus.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+public enum CheckStatus {
+    IN_PROGRESS,
+    SUCCESS,
+    FAILURE,
+    CANCELLED
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/Forge.java b/forge/src/main/java/org/openjdk/skara/forge/Forge.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/Forge.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.host.*;
+
+import java.net.URI;
+
+public interface Forge extends Host {
+    HostedRepository repository(String name);
+    boolean supportsReviewBody();
+
+    static Forge from(URI uri, PersonalAccessToken pat) {
+        return ForgeFactory.createFromURI(uri, pat);
+    }
+    static Forge from(URI uri) {
+        return ForgeFactory.createFromURI(uri, null);
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/ForgeFactory.java b/forge/src/main/java/org/openjdk/skara/forge/ForgeFactory.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/ForgeFactory.java
@@ -0,0 +1,77 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.host.*;
+
+import java.net.URI;
+import java.util.regex.Pattern;
+
+public class ForgeFactory {
+    public static Forge createGitHubHost(URI uri, Pattern webUriPattern, String webUriReplacement, String keyFile, String issue, String id) {
+        var app = new GitHubApplication(keyFile, issue, id);
+        return new GitHubHost(uri, app, webUriPattern, webUriReplacement);
+    }
+
+    public static Forge createGitHubHost(URI uri, PersonalAccessToken pat) {
+        if (pat != null) {
+            return new GitHubHost(uri, pat);
+        } else {
+            return new GitHubHost(uri);
+        }
+    }
+
+    public static Forge createGitLabHost(URI uri, PersonalAccessToken pat) {
+        if (pat != null) {
+            return new GitLabHost(uri, pat);
+        } else {
+            return new GitLabHost(uri);
+        }
+    }
+
+    public static Forge createFromURI(URI uri, PersonalAccessToken pat) throws IllegalArgumentException {
+        // Short-circuit
+        if (uri.toString().contains("github")) {
+            return createGitHubHost(uri, pat);
+        } else if (uri.toString().contains("gitlab")) {
+            return createGitLabHost(uri, pat);
+        }
+
+        try {
+            var gitLabHost = createGitLabHost(uri, pat);
+            if (gitLabHost.isValid()) {
+                return gitLabHost;
+            }
+        } catch (RuntimeException e) {
+            try {
+                var gitHubHost = createGitHubHost(uri, pat);
+                if (gitHubHost.isValid()) {
+                    return gitHubHost;
+                }
+            } catch (RuntimeException ignored) {
+            }
+        }
+
+        throw new IllegalArgumentException("Unable to detect host type from URI: " + uri);
+    }
+}
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubApplication.java b/forge/src/main/java/org/openjdk/skara/forge/GitHubApplication.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubApplication.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/GitHubApplication.java
@@ -18,11 +18,11 @@
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package org.openjdk.skara.host.github;
+package org.openjdk.skara.forge;
 
 import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.json.*;
 
 import java.io.*;
diff a/forge/src/main/java/org/openjdk/skara/forge/GitHubHost.java b/forge/src/main/java/org/openjdk/skara/forge/GitHubHost.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/GitHubHost.java
@@ -0,0 +1,216 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.network.*;
+import org.openjdk.skara.json.*;
+
+import java.net.*;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.regex.Pattern;
+
+public class GitHubHost implements Forge {
+    private final URI uri;
+    private final Pattern webUriPattern;
+    private final String webUriReplacement;
+    private final GitHubApplication application;
+    private final PersonalAccessToken pat;
+    private final RestRequest request;
+    private HostUser currentUser;
+
+    public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement) {
+        this.uri = uri;
+        this.webUriPattern = webUriPattern;
+        this.webUriReplacement = webUriReplacement;
+        this.application = application;
+        this.pat = null;
+
+        var baseApi = URIBuilder.base(uri)
+                .appendSubDomain("api")
+                .setPath("/")
+                .build();
+
+        request = new RestRequest(baseApi, () -> Arrays.asList(
+                "Authorization", "token " + getInstallationToken(),
+                "Accept", "application/vnd.github.machine-man-preview+json",
+                "Accept", "application/vnd.github.antiope-preview+json"));
+    }
+
+    public GitHubHost(URI uri, PersonalAccessToken pat) {
+        this.uri = uri;
+        this.webUriPattern = null;
+        this.webUriReplacement = null;
+        this.pat = pat;
+        this.application = null;
+
+        var baseApi = URIBuilder.base(uri)
+                                .appendSubDomain("api")
+                                .setPath("/")
+                                .build();
+
+        request = new RestRequest(baseApi, () -> Arrays.asList(
+                "Authorization", "token " + pat.token()));
+    }
+
+    public GitHubHost(URI uri) {
+        this.uri = uri;
+        this.webUriPattern = null;
+        this.webUriReplacement = null;
+        this.pat = null;
+        this.application = null;
+
+        var baseApi = URIBuilder.base(uri)
+                                .appendSubDomain("api")
+                                .setPath("/")
+                                .build();
+
+        request = new RestRequest(baseApi);
+    }
+
+    public URI getURI() {
+        return uri;
+    }
+
+    URI getWebURI(String endpoint) {
+        var baseWebUri = URIBuilder.base(uri)
+                                   .setPath(endpoint)
+                                   .build();
+
+        if (webUriPattern == null) {
+            return baseWebUri;
+        }
+
+        var matcher = webUriPattern.matcher(baseWebUri.toString());
+        if (!matcher.matches()) {
+            return baseWebUri;
+
+        }
+        return URIBuilder.base(matcher.replaceAll(webUriReplacement)).build();
+    }
+
+    String getInstallationToken() {
+        if (application != null) {
+            return application.getInstallationToken();
+        } else {
+            return pat.token();
+        }
+    }
+
+    private String getFullName(String userName) {
+        var details = user(userName);
+        return details.fullName();
+    }
+
+    // Most GitHub API's return user information in this format
+    HostUser parseUserField(JSONValue json) {
+        return parseUserObject(json.get("user"));
+    }
+
+    HostUser parseUserObject(JSONValue json) {
+        return new HostUser(json.get("id").asInt(), json.get("login").asString(),
+                            () -> getFullName(json.get("login").asString()));
+    }
+
+    @Override
+    public boolean isValid() {
+        var endpoints = request.get("")
+                               .onError(response -> JSON.of())
+                               .execute();
+        return !endpoints.isNull();
+    }
+
+    JSONObject getProjectInfo(String name) {
+        var project = request.get("repos/" + name)
+                             .execute();
+        return project.asObject();
+    }
+
+    JSONObject runSearch(String query) {
+        var result = request.get("search/issues")
+                            .param("q", query)
+                            .execute();
+        return result.asObject();
+    }
+
+    @Override
+    public HostedRepository repository(String name) {
+        return new GitHubRepository(this, name);
+    }
+
+    @Override
+    public HostUser user(String username) {
+        var details = request.get("users/" + URLEncoder.encode(username, StandardCharsets.UTF_8)).execute().asObject();
+
+        // Always present
+        var login = details.get("login").asString();
+        var id = details.get("id").asInt();
+
+        var name = details.get("name").asString();
+        if (name == null) {
+            name = login;
+        }
+        return new HostUser(id, login, name);
+    }
+
+    @Override
+    public HostUser currentUser() {
+        if (currentUser == null) {
+            if (application != null) {
+                var appDetails = application.getAppDetails();
+                var appName = appDetails.get("name").asString() + "[bot]";
+                currentUser = user(appName);
+            } else if (pat != null) {
+                currentUser = user(pat.userName());
+            } else {
+                throw new IllegalStateException("No credentials present");
+            }
+        }
+        return currentUser;
+    }
+
+    @Override
+    public boolean supportsReviewBody() {
+        return true;
+    }
+
+    @Override
+    public boolean isMemberOf(String groupId, HostUser user) {
+        long gid = 0L;
+        try {
+            gid = Long.parseLong(groupId);
+        } catch (NumberFormatException e) {
+            throw new IllegalArgumentException("Group id is not a number: " + groupId);
+        }
+        var username = URLEncoder.encode(user.userName(), StandardCharsets.UTF_8);
+        var orgs = request.get("users/" + username + "/orgs").execute().asArray();
+        for (var org : orgs) {
+            if (org.get("id").asLong() == gid) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/GitHubPullRequest.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/GitHubPullRequest.java
@@ -0,0 +1,474 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.network.*;
+import org.openjdk.skara.json.*;
+import org.openjdk.skara.vcs.Hash;
+
+import java.net.URI;
+import java.time.*;
+import java.time.format.DateTimeFormatter;
+import java.util.*;
+import java.util.logging.Logger;
+import java.util.stream.Collectors;
+
+public class GitHubPullRequest implements PullRequest {
+    private final JSONValue json;
+    private final RestRequest request;
+    private final GitHubHost host;
+    private final GitHubRepository repository;
+    private final Logger log = Logger.getLogger("org.openjdk.skara.host");
+
+    GitHubPullRequest(GitHubRepository repository, JSONValue jsonValue, RestRequest request) {
+        this.host = (GitHubHost)repository.forge();
+        this.repository = repository;
+        this.request = request;
+        this.json = jsonValue;
+    }
+
+    @Override
+    public HostedRepository repository() {
+        return repository;
+    }
+
+    @Override
+    public IssueProject project() {
+        return null;
+    }
+
+    @Override
+    public String id() {
+        return json.get("number").toString();
+    }
+
+    @Override
+    public HostUser author() {
+        return host.parseUserField(json);
+    }
+
+    @Override
+    public List<Review> reviews() {
+        var reviews = request.get("pulls/" + json.get("number").toString() + "/reviews").execute().stream()
+                             .map(JSONValue::asObject)
+                             .filter(obj -> !(obj.get("state").asString().equals("COMMENTED") && obj.get("body").asString().isEmpty()))
+                             .map(obj -> {
+                                 var reviewer = host.parseUserField(obj);
+                                 var hash = new Hash(obj.get("commit_id").asString());
+                                 Review.Verdict verdict;
+                                 switch (obj.get("state").asString()) {
+                                     case "APPROVED":
+                                         verdict = Review.Verdict.APPROVED;
+                                         break;
+                                     case "CHANGES_REQUESTED":
+                                         verdict = Review.Verdict.DISAPPROVED;
+                                         break;
+                                     default:
+                                         verdict = Review.Verdict.NONE;
+                                         break;
+                                 }
+                                 var id = obj.get("id").asInt();
+                                 var body = obj.get("body").asString();
+                                 return new Review(reviewer, verdict, hash, id, body);
+                             })
+                             .collect(Collectors.toList());
+        return reviews;
+    }
+
+    @Override
+    public void addReview(Review.Verdict verdict, String body) {
+        var query = JSON.object();
+        switch (verdict) {
+            case APPROVED:
+                query.put("event", "APPROVE");
+                break;
+            case DISAPPROVED:
+                query.put("event", "REQUEST_CHANGES");
+                break;
+            case NONE:
+                query.put("event", "COMMENT");
+                break;
+        }
+        query.put("body", body);
+        request.post("pulls/" + json.get("number").toString() + "/reviews")
+               .body(query)
+               .execute();
+    }
+
+    private ReviewComment parseReviewComment(ReviewComment parent, JSONObject json, PositionMapper diff) {
+        var author = host.parseUserField(json);
+        var threadId = parent == null ? json.get("id").toString() : parent.threadId();
+        var comment = new ReviewComment(parent,
+                                        threadId,
+                                        new Hash(json.get("commit_id").asString()),
+                                        json.get("path").asString(),
+                                        diff.positionToLine(json.get("path").asString(), json.get("original_position").asInt()),
+                                        json.get("id").toString(),
+                                        json.get("body").asString(),
+                                        author,
+                                        ZonedDateTime.parse(json.get("created_at").asString()),
+                                        ZonedDateTime.parse(json.get("updated_at").asString()));
+        return comment;
+    }
+
+    @Override
+    public ReviewComment addReviewComment(Hash base, Hash hash, String path, int line, String body) {
+        var rawDiff = request.get("pulls/" + json.get("number").toString())
+                             .header("Accept", "application/vnd.github.v3.diff")
+                             .executeUnparsed();
+        var diff = PositionMapper.parse(rawDiff);
+
+        var query = JSON.object()
+                .put("body", body)
+                .put("commit_id", hash.hex())
+                .put("path", path)
+                .put("position", diff.lineToPosition(path, line));
+        var response = request.post("pulls/" + json.get("number").toString() + "/comments")
+                .body(query)
+                .execute();
+        return parseReviewComment(null, response.asObject(), diff);
+    }
+
+    @Override
+    public ReviewComment addReviewCommentReply(ReviewComment parent, String body) {
+        var rawDiff = request.get("pulls/" + json.get("number").toString())
+                             .header("Accept", "application/vnd.github.v3.diff")
+                             .executeUnparsed();
+        var diff = PositionMapper.parse(rawDiff);
+
+        var query = JSON.object()
+                        .put("body", body)
+                .put("in_reply_to", Integer.parseInt(parent.threadId()));
+        var response = request.post("pulls/" + json.get("number").toString() + "/comments")
+                .body(query)
+                .execute();
+        return parseReviewComment(parent, response.asObject(), diff);
+    }
+
+    @Override
+    public List<ReviewComment> reviewComments() {
+        var rawDiff = request.get("pulls/" + json.get("number").toString())
+                          .header("Accept", "application/vnd.github.v3.diff")
+                          .executeUnparsed();
+        var diff = PositionMapper.parse(rawDiff);
+
+        var ret = new ArrayList<ReviewComment>();
+        var reviewComments = request.get("pulls/" + json.get("number").toString() + "/comments").execute().stream()
+                                    .map(JSONValue::asObject)
+                                    .collect(Collectors.toList());
+        var idToComment = new HashMap<String, ReviewComment>();
+
+        for (var reviewComment : reviewComments) {
+            ReviewComment parent = null;
+            if (reviewComment.contains("in_reply_to_id")) {
+                parent = idToComment.get(reviewComment.get("in_reply_to_id").toString());
+            }
+            var comment = parseReviewComment(parent, reviewComment, diff);
+            idToComment.put(comment.id(), comment);
+            ret.add(comment);
+        }
+
+        return ret;
+    }
+
+    @Override
+    public Hash headHash() {
+        return new Hash(json.get("head").get("sha").asString());
+    }
+
+    @Override
+    public String sourceRef() {
+        return "pull/" + id() + "/head";
+    }
+
+    @Override
+    public String targetRef() {
+        return json.get("base").get("ref").asString();
+    }
+
+    @Override
+    public Hash targetHash() {
+        return repository.branchHash(targetRef());
+    }
+
+    @Override
+    public String title() {
+        return json.get("title").asString();
+    }
+
+    @Override
+    public void setTitle(String title) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public String body() {
+        var body = json.get("body").asString();
+        if (body == null) {
+            body = "";
+        }
+        return body;
+    }
+
+    @Override
+    public void setBody(String body) {
+        request.patch("pulls/" + json.get("number").toString())
+               .body("body", body)
+               .execute();
+    }
+
+    private Comment parseComment(JSONValue comment) {
+        var ret = new Comment(Integer.toString(comment.get("id").asInt()),
+                              comment.get("body").asString(),
+                              host.parseUserField(comment),
+                              ZonedDateTime.parse(comment.get("created_at").asString()),
+                              ZonedDateTime.parse(comment.get("updated_at").asString()));
+        return ret;
+    }
+
+    @Override
+    public List<Comment> comments() {
+        return request.get("issues/" + json.get("number").toString() + "/comments").execute().stream()
+                .map(this::parseComment)
+                .collect(Collectors.toList());
+    }
+
+    @Override
+    public Comment addComment(String body) {
+        var comment = request.post("issues/" + json.get("number").toString() + "/comments")
+                .body("body", body)
+                .execute();
+        return parseComment(comment);
+    }
+
+    @Override
+    public Comment updateComment(String id, String body) {
+        var comment = request.patch("issues/comments/" + id)
+                .body("body", body)
+                .execute();
+        return parseComment(comment);
+    }
+
+    @Override
+    public ZonedDateTime createdAt() {
+        return ZonedDateTime.parse(json.get("created_at").asString());
+    }
+
+    @Override
+    public ZonedDateTime updatedAt() {
+        return ZonedDateTime.parse(json.get("updated_at").asString());
+    }
+
+    @Override
+    public Map<String, Check> checks(Hash hash) {
+        var checks = request.get("commits/" + hash.hex() + "/check-runs").execute();
+
+        return checks.get("check_runs").stream()
+                .collect(Collectors.toMap(c -> c.get("name").asString(),
+                        c -> {
+                            var checkBuilder = CheckBuilder.create(c.get("name").asString(), new Hash(c.get("head_sha").asString()));
+                            checkBuilder.startedAt(ZonedDateTime.parse(c.get("started_at").asString()));
+
+                            var completed = c.get("status").asString().equals("completed");
+                            if (completed) {
+                                var conclusion = c.get("conclusion").asString();
+                                var completedAt = ZonedDateTime.parse(c.get("completed_at").asString());
+                                switch (conclusion) {
+                                    case "cancelled":
+                                        checkBuilder.cancel(completedAt);
+                                        break;
+                                    case "success":
+                                        checkBuilder.complete(true, completedAt);
+                                        break;
+                                    case "failure":
+                                        checkBuilder.complete(false, completedAt);
+                                        break;
+                                    default:
+                                        throw new IllegalStateException("Unexpected conclusion: " + conclusion);
+                                }
+                            }
+                            if (c.contains("external_id")) {
+                                checkBuilder.metadata(c.get("external_id").asString());
+                            }
+                            if (c.contains("output")) {
+                                var output = c.get("output").asObject();
+                                if (output.contains("title")) {
+                                    checkBuilder.title(output.get("title").asString());
+                                }
+                                if (output.contains("summary")) {
+                                    checkBuilder.summary(output.get("summary").asString());
+                                }
+                            }
+
+                            return checkBuilder.build();
+                        }));
+    }
+
+    @Override
+    public void createCheck(Check check) {
+        // update and create are currenly identical operations, both do an HTTP
+        // POST to the /repos/:owner/:repo/check-runs endpoint. There is an additional
+        // endpoint explicitly for updating check-runs, but that is not currently used.
+        updateCheck(check);
+    }
+
+    @Override
+    public void updateCheck(Check check) {
+        var completedQuery = JSON.object();
+        completedQuery.put("name", check.name());
+        completedQuery.put("head_branch", json.get("head").get("ref"));
+        completedQuery.put("head_sha", check.hash().hex());
+
+        if (check.title().isPresent() && check.summary().isPresent()) {
+            var outputQuery = JSON.object();
+            outputQuery.put("title", check.title().get());
+            outputQuery.put("summary", check.summary().get());
+
+            var annotations = JSON.array();
+            for (var annotation : check.annotations()) {
+                var annotationQuery = JSON.object();
+                annotationQuery.put("path", annotation.path());
+                annotationQuery.put("start_line", annotation.startLine());
+                annotationQuery.put("end_line", annotation.endLine());
+                annotation.startColumn().ifPresent(startColumn -> annotationQuery.put("start_column", startColumn));
+                annotation.endColumn().ifPresent(endColumn -> annotationQuery.put("end_column", endColumn));
+                switch (annotation.level()) {
+                    case NOTICE:
+                        annotationQuery.put("annotation_level", "notice");
+                        break;
+                    case WARNING:
+                        annotationQuery.put("annotation_level", "warning");
+                        break;
+                    case FAILURE:
+                        annotationQuery.put("annotation_level", "failure");
+                        break;
+                }
+
+                annotationQuery.put("message", annotation.message());
+                annotation.title().ifPresent(title -> annotationQuery.put("title", title));
+                annotations.add(annotationQuery);
+            }
+
+            outputQuery.put("annotations", annotations);
+            completedQuery.put("output", outputQuery);
+        }
+
+        if (check.status() == CheckStatus.IN_PROGRESS) {
+            completedQuery.put("status", "in_progress");
+        } else {
+            completedQuery.put("status", "completed");
+            completedQuery.put("conclusion", check.status().name().toLowerCase());
+            completedQuery.put("completed_at", check.completedAt().orElse(ZonedDateTime.now(ZoneOffset.UTC))
+                    .format(DateTimeFormatter.ISO_INSTANT));
+        }
+
+        completedQuery.put("started_at", check.startedAt().format(DateTimeFormatter.ISO_INSTANT));
+        check.metadata().ifPresent(metadata -> completedQuery.put("external_id", metadata));
+
+        request.post("check-runs").body(completedQuery).execute();
+    }
+
+    @Override
+    public URI changeUrl() {
+        return URIBuilder.base(webUrl()).appendPath("/files").build();
+    }
+
+    @Override
+    public URI changeUrl(Hash base) {
+        return URIBuilder.base(webUrl()).appendPath("/files/" + base.abbreviate() + ".." + headHash().abbreviate()).build();
+    }
+
+    @Override
+    public boolean isDraft() {
+        return json.get("draft").asBoolean();
+    }
+
+    @Override
+    public void setState(State state) {
+        request.patch("pulls/" + json.get("number").toString())
+               .body("state", state == State.CLOSED ? "closed" : "open")
+               .execute();
+    }
+
+    @Override
+    public void addLabel(String label) {
+        var query = JSON.object().put("labels", JSON.array().add(label));
+        request.post("issues/" + json.get("number").toString() + "/labels")
+               .body(query)
+               .execute();
+    }
+
+    @Override
+    public void removeLabel(String label) {
+        request.delete("issues/" + json.get("number").toString() + "/labels/" + label)
+               .onError(r -> {
+                   // The GitHub API explicitly states that 404 is the response for deleting labels currently not set
+                   if (r.statusCode() == 404) {
+                       return JSONValue.fromNull();
+                   }
+                   throw new RuntimeException("Invalid response");
+               })
+               .execute();
+    }
+
+    @Override
+    public List<String> labels() {
+        return request.get("issues/" + json.get("number").toString() + "/labels").execute().stream()
+                      .map(JSONValue::asObject)
+                      .map(obj -> obj.get("name").asString())
+                      .sorted()
+                      .collect(Collectors.toList());
+    }
+
+    @Override
+    public URI webUrl() {
+        var host = (GitHubHost)repository.forge();
+        var endpoint = "/" + repository.name() + "/pull/" + id();
+        return host.getWebURI(endpoint);
+    }
+
+    @Override
+    public String toString() {
+        return "GitHubPullRequest #" + id() + " by " + author();
+    }
+
+    @Override
+    public List<HostUser> assignees() {
+        return json.get("assignees").asArray()
+                                    .stream()
+                                    .map(host::parseUserObject)
+                                    .collect(Collectors.toList());
+    }
+
+    @Override
+    public void setAssignees(List<HostUser> assignees) {
+        var assignee_ids = JSON.array();
+        for (var assignee : assignees) {
+            assignee_ids.add(assignee.userName());
+        }
+        var param = JSON.object().put("assignees", assignee_ids);
+        request.patch("issues/" + json.get("number").toString()).body(param).execute();
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/GitHubRepository.java b/forge/src/main/java/org/openjdk/skara/forge/GitHubRepository.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/GitHubRepository.java
@@ -0,0 +1,206 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.issuetracker.Issue;
+import org.openjdk.skara.network.*;
+import org.openjdk.skara.json.*;
+import org.openjdk.skara.vcs.*;
+
+import java.net.URI;
+import java.nio.charset.StandardCharsets;
+import java.util.*;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+
+public class GitHubRepository implements HostedRepository {
+    private final GitHubHost gitHubHost;
+    private final String repository;
+    private final RestRequest request;
+    private final JSONValue json;
+    private final Pattern pullRequestPattern;
+
+    GitHubRepository(GitHubHost gitHubHost, String repository) {
+        this.gitHubHost = gitHubHost;
+        this.repository = repository;
+
+        var apiBase = URIBuilder
+                .base(gitHubHost.getURI())
+                .appendSubDomain("api")
+                .setPath("/repos/" + repository + "/")
+                .build();
+        request = new RestRequest(apiBase, () -> Arrays.asList(
+                "Authorization", "token " + gitHubHost.getInstallationToken(),
+                "Accept", "application/vnd.github.machine-man-preview+json",
+                "Accept", "application/vnd.github.antiope-preview+json",
+                "Accept", "application/vnd.github.shadow-cat-preview+json"));
+        json = gitHubHost.getProjectInfo(repository);
+        var urlPattern = gitHubHost.getWebURI("/" + repository + "/pull/").toString();
+        pullRequestPattern = Pattern.compile(urlPattern + "(\\d+)");
+    }
+
+    @Override
+    public Optional<HostedRepository> parent() {
+        if (json.get("fork").asBoolean()) {
+            var parent = json.get("parent").get("full_name").asString();
+            return Optional.of(new GitHubRepository(gitHubHost, parent));
+        }
+        return Optional.empty();
+    }
+
+    @Override
+    public Forge forge() {
+        return gitHubHost;
+    }
+
+    @Override
+    public PullRequest createPullRequest(HostedRepository target,
+                                         String targetRef,
+                                         String sourceRef,
+                                         String title,
+                                         List<String> body,
+                                         boolean draft) {
+        if (!(target instanceof GitHubRepository)) {
+            throw new IllegalArgumentException("target repository must be a GitHub repository");
+        }
+
+        var upstream = (GitHubRepository) target;
+        var user = forge().currentUser().userName();
+        var namespace = user.endsWith("[bot]") ? "" : user + ":";
+        var params = JSON.object()
+                         .put("title", title)
+                         .put("head", namespace + sourceRef)
+                         .put("base", targetRef)
+                         .put("body", String.join("\n", body))
+                         .put("draft", draft);
+        var pr = upstream.request.post("pulls")
+                                 .body(params)
+                                 .execute();
+
+        return new GitHubPullRequest(upstream, pr, request);
+    }
+
+    @Override
+    public PullRequest pullRequest(String id) {
+        var pr = request.get("pulls/" + id).execute();
+        return new GitHubPullRequest(this, pr, request);
+    }
+
+    @Override
+    public List<PullRequest> pullRequests() {
+        return request.get("pulls").execute().asArray().stream()
+                      .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))
+                      .collect(Collectors.toList());
+    }
+
+    @Override
+    public List<PullRequest> findPullRequestsWithComment(String author, String body) {
+        var query = "\"" + body + "\" in:comments type:pr repo:" + repository;
+        if (author != null) {
+            query += " commenter:" + author;
+        }
+        var result = gitHubHost.runSearch(query);
+        return result.get("items").stream()
+                .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))
+                .collect(Collectors.toList());
+    }
+
+    @Override
+    public Optional<PullRequest> parsePullRequestUrl(String url) {
+        var matcher = pullRequestPattern.matcher(url);
+        if (matcher.find()) {
+            return Optional.of(pullRequest(matcher.group(1)));
+        } else {
+            return Optional.empty();
+        }
+    }
+
+    @Override
+    public String name() {
+        return repository;
+    }
+
+    @Override
+    public URI url() {
+        return URIBuilder
+                .base(gitHubHost.getURI())
+                .setPath("/" + repository + ".git")
+                .setAuthentication("x-access-token:" + gitHubHost.getInstallationToken())
+                .build();
+    }
+
+    @Override
+    public URI webUrl() {
+        var endpoint = "/" + repository;
+        return gitHubHost.getWebURI(endpoint);
+    }
+
+    @Override
+    public URI webUrl(Hash hash) {
+        var endpoint = "/" + repository + "/commit/" + hash.abbreviate();
+        return gitHubHost.getWebURI(endpoint);
+    }
+
+    @Override
+    public VCS repositoryType() {
+        return VCS.GIT;
+    }
+
+    @Override
+    public String fileContents(String filename, String ref) {
+        var conf = request.get("contents/" + filename)
+                          .param("ref", ref)
+                          .execute().asObject();
+        // Content may contain newline characters
+        return conf.get("content").asString().lines()
+                   .map(line -> new String(Base64.getDecoder().decode(line), StandardCharsets.UTF_8))
+                   .collect(Collectors.joining());
+    }
+
+    @Override
+    public String namespace() {
+        return URIBuilder.base(gitHubHost.getURI()).build().getHost();
+    }
+
+    @Override
+    public Optional<WebHook> parseWebHook(JSONValue body) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public HostedRepository fork() {
+        var response = request.post("forks").execute();
+        return gitHubHost.repository(response.get("full_name").asString());
+    }
+
+    @Override
+    public long id() {
+        return json.get("id").asLong();
+    }
+
+    @Override
+    public Hash branchHash(String ref) {
+        var branch = request.get("branches/" + ref).execute();
+        return new Hash(branch.get("commit").get("sha").asString());
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/GitLabHost.java b/forge/src/main/java/org/openjdk/skara/forge/GitLabHost.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/GitLabHost.java
@@ -0,0 +1,154 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.network.*;
+import org.openjdk.skara.json.*;
+
+import java.net.*;
+import java.nio.charset.StandardCharsets;
+import java.util.*;
+
+public class GitLabHost implements Forge {
+    private final URI uri;
+    private final PersonalAccessToken pat;
+    private final RestRequest request;
+
+    public GitLabHost(URI uri, PersonalAccessToken pat) {
+        this.uri = uri;
+        this.pat = pat;
+
+        var baseApi = URIBuilder.base(uri)
+                                .setPath("/api/v4/")
+                                .build();
+        request = new RestRequest(baseApi, () -> Arrays.asList("Private-Token", pat.token()));
+    }
+
+    public GitLabHost(URI uri) {
+        this.uri = uri;
+        this.pat = null;
+
+        var baseApi = URIBuilder.base(uri)
+                                .setPath("/api/v4/")
+                                .build();
+        request = new RestRequest(baseApi);
+    }
+
+    public URI getUri() {
+        return uri;
+    }
+
+    public Optional<PersonalAccessToken> getPat() {
+        return Optional.ofNullable(pat);
+    }
+
+    @Override
+    public boolean isValid() {
+        var version = request.get("version")
+                              .onError(r -> JSON.object().put("invalid", true))
+                              .execute();
+        return !version.contains("invalid");
+    }
+
+    JSONObject getProjectInfo(String name) {
+        var encodedName = URLEncoder.encode(name, StandardCharsets.US_ASCII);
+
+        var project = request.get("projects/" + encodedName)
+                                     .onError(r -> r.statusCode() == 404 ? JSON.object().put("retry", true) : null)
+                                     .execute();
+        if (project.contains("retry")) {
+            // Depending on web server configuration, GitLab may need double escaping of project names
+            encodedName = URLEncoder.encode(encodedName, StandardCharsets.US_ASCII);
+            project = request.get("projects/" + encodedName)
+                                     .onError(r -> r.statusCode() == 404 ? JSON.object().put("retry", true) : null)
+                                     .execute();
+        }
+        return project.asObject();
+    }
+
+    @Override
+    public HostedRepository repository(String name) {
+        return new GitLabRepository(this, name);
+    }
+
+    private HostUser parseUserDetails(JSONObject details) {
+        var id = details.get("id").asInt();
+        var username = details.get("username").asString();
+        var name = details.get("name").asString();
+        return new HostUser(id, username, name);
+    }
+
+    @Override
+    public HostUser user(String username) {
+        var details = request.get("users").param("username", username).execute().asArray();
+        if (details.size() != 1) {
+            throw new RuntimeException("Couldn't find user: " + username);
+        }
+
+        return parseUserDetails(details.get(0).asObject());
+    }
+
+    @Override
+    public HostUser currentUser() {
+        var details = request.get("user").execute().asObject();
+        return parseUserDetails(details);
+    }
+
+    @Override
+    public boolean supportsReviewBody() {
+        // GitLab CE does not support this
+        return false;
+    }
+
+    boolean isProjectForkComplete(String name) {
+        var project = getProjectInfo(name);
+        if (project.contains("import_status")) {
+            var status = project.get("import_status").asString();
+            switch (status) {
+                case "finished":
+                    return true;
+                case "started":
+                    return false;
+                default:
+                    throw new RuntimeException("Unknown fork status: " + status);
+            }
+        } else {
+            throw new RuntimeException("Project does not seem to be a fork");
+        }
+    }
+
+    @Override
+    public boolean isMemberOf(String groupId, HostUser user) {
+        long gid = 0L;
+        try {
+            gid = Long.parseLong(groupId);
+        } catch (NumberFormatException e) {
+            throw new IllegalArgumentException("Group id is not a number: " + groupId);
+        }
+        var details = request.get("groups/" + gid + "/members/" + user.id())
+                             .onError(r -> JSON.of())
+                             .execute();
+        return !details.isNull();
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/GitLabMergeRequest.java b/forge/src/main/java/org/openjdk/skara/forge/GitLabMergeRequest.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/GitLabMergeRequest.java
@@ -0,0 +1,607 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.network.*;
+import org.openjdk.skara.json.*;
+import org.openjdk.skara.vcs.Hash;
+
+import java.net.URI;
+import java.nio.charset.StandardCharsets;
+import java.time.ZonedDateTime;
+import java.util.*;
+import java.util.logging.Logger;
+import java.util.regex.Pattern;
+import java.util.stream.*;
+
+public class GitLabMergeRequest implements PullRequest {
+
+    private final JSONValue json;
+    private final RestRequest request;
+    private final Logger log = Logger.getLogger("org.openjdk.skara.host");;
+    private final GitLabRepository repository;
+
+    GitLabMergeRequest(GitLabRepository repository, JSONValue jsonValue, RestRequest request) {
+        this.repository = repository;
+        this.json = jsonValue;
+        this.request = request.restrict("merge_requests/" + json.get("iid").toString() + "/");
+    }
+
+    @Override
+    public HostedRepository repository() {
+        return repository;
+    }
+
+    @Override
+    public IssueProject project() {
+        return null;
+    }
+
+    @Override
+    public String id() {
+        return json.get("iid").toString();
+    }
+
+    @Override
+    public HostUser author() {
+        return repository.forge().user(json.get("author").get("username").asString());
+    }
+
+    @Override
+    public List<Review> reviews() {
+
+        class CommitDate {
+            private Hash hash;
+            private ZonedDateTime date;
+        }
+
+        var commits = request.get("commits").execute().stream()
+                             .map(JSONValue::asObject)
+                             .map(obj -> {
+                                 var ret = new CommitDate();
+                                 ret.hash = new Hash(obj.get("id").asString());
+                                 ret.date = ZonedDateTime.parse(obj.get("created_at").asString());
+                                 return ret;
+                             })
+                             .sorted(Comparator.comparing(cd -> cd.date))
+                             .collect(Collectors.toList());
+
+        if (commits.size() == 0) {
+            throw new RuntimeException("Reviews on a PR without any commits?");
+        }
+
+        return request.get("award_emoji").execute().stream()
+                      .map(JSONValue::asObject)
+                      .filter(obj -> obj.get("name").asString().equals("thumbsup") ||
+                              obj.get("name").asString().equals("thumbsdown") ||
+                              obj.get("name").asString().equals("question"))
+                      .map(obj -> {
+                          var reviewer = repository.forge().user(obj.get("user").get("username").asString());
+                          Review.Verdict verdict;
+                          switch (obj.get("name").asString()) {
+                              case "thumbsup":
+                                  verdict = Review.Verdict.APPROVED;
+                                  break;
+                              case "thumbsdown":
+                                  verdict = Review.Verdict.DISAPPROVED;
+                                  break;
+                              default:
+                                  verdict = Review.Verdict.NONE;
+                                  break;
+                          }
+
+                          var createdAt = ZonedDateTime.parse(obj.get("updated_at").asString());
+
+                          // Find the latest commit that isn't created after our review
+                          var hash = commits.get(0).hash;
+                          for (var cd : commits) {
+                              if (createdAt.isAfter(cd.date)) {
+                                  hash = cd.hash;
+                              }
+                          }
+                          var id = obj.get("id").asInt();
+                          return new Review(reviewer, verdict, hash, id, null);
+                      })
+                      .collect(Collectors.toList());
+    }
+
+    @Override
+    public void addReview(Review.Verdict verdict, String body) {
+        // Remove any previous awards
+        var awards = request.get("award_emoji").execute().stream()
+                            .map(JSONValue::asObject)
+                            .filter(obj -> obj.get("name").asString().equals("thumbsup") ||
+                                    obj.get("name").asString().equals("thumbsdown") ||
+                                    obj.get("name").asString().equals("question"))
+                            .filter(obj -> obj.get("user").get("username").asString().equals(repository.forge().currentUser().userName()))
+                            .map(obj -> obj.get("id").toString())
+                            .collect(Collectors.toList());
+        for (var award : awards) {
+            request.delete("award_emoji/" + award).execute();
+        }
+
+        String award;
+        switch (verdict) {
+            case APPROVED:
+                award = "thumbsup";
+                break;
+            case DISAPPROVED:
+                award = "thumbsdown";
+                break;
+            default:
+                award = "question";
+                break;
+        }
+        request.post("award_emoji")
+               .body("name", award)
+               .execute();
+    }
+
+    private ReviewComment parseReviewComment(String discussionId, ReviewComment parent, JSONObject note) {
+        var comment = new ReviewComment(parent,
+                                        discussionId,
+                                        new Hash(note.get("position").get("head_sha").asString()),
+                                        note.get("position").get("new_path").asString(),
+                                        note.get("position").get("new_line").asInt(),
+                                        note.get("id").toString(),
+                                        note.get("body").asString(),
+                                        new HostUser(note.get("author").get("id").asInt(),
+                                                     note.get("author").get("username").asString(),
+                                                     note.get("author").get("name").asString()),
+                                        ZonedDateTime.parse(note.get("created_at").asString()),
+                                        ZonedDateTime.parse(note.get("updated_at").asString()));
+        return comment;
+    }
+
+    @Override
+    public ReviewComment addReviewComment(Hash base, Hash hash, String path, int line, String body) {
+        log.fine("Posting a new review comment");
+        var query = JSON.object()
+                        .put("body", body)
+                        .put("position", JSON.object()
+                                             .put("base_sha", base.hex())
+                                             .put("start_sha", base.hex())
+                                             .put("head_sha", hash.hex())
+                                             .put("position_type", "text")
+                                             .put("new_path", path)
+                                             .put("new_line", line));
+        var comments = request.post("discussions").body(query).execute();
+        if (comments.get("notes").asArray().size() != 1) {
+            throw new RuntimeException("Failed to create review comment");
+        }
+        var parsedComment = parseReviewComment(comments.get("id").asString(), null,
+                                               comments.get("notes").asArray().get(0).asObject());
+        log.fine("Id of new review comment: " + parsedComment.id());
+        return parsedComment;
+    }
+
+    @Override
+    public ReviewComment addReviewCommentReply(ReviewComment parent, String body) {
+        var discussionId = parent.threadId();
+        var comment = request.post("discussions/" + discussionId + "/notes")
+                             .body("body", body)
+                             .execute();
+        return parseReviewComment(discussionId, parent, comment.asObject());
+    }
+
+    private List<ReviewComment> parseDiscussion(JSONObject discussion) {
+        var ret = new ArrayList<ReviewComment>();
+        ReviewComment parent = null;
+        for (var note : discussion.get("notes").asArray()) {
+            // Ignore system generated comments
+            if (note.get("system").asBoolean()) {
+                continue;
+            }
+            // Ignore plain comments
+            if (!note.contains("position")) {
+                continue;
+            }
+
+            var comment = parseReviewComment(discussion.get("id").asString(), parent, note.asObject());
+            parent = comment;
+            ret.add(comment);
+        }
+
+        return ret;
+    }
+
+    @Override
+    public List<ReviewComment> reviewComments() {
+        return request.get("discussions").execute().stream()
+                      .filter(entry -> !entry.get("individual_note").asBoolean())
+                      .flatMap(entry -> parseDiscussion(entry.asObject()).stream())
+                      .collect(Collectors.toList());
+    }
+
+    @Override
+    public Hash headHash() {
+        return new Hash(json.get("sha").asString());
+    }
+
+    @Override
+    public String sourceRef() {
+        return "merge-requests/" + id() + "/head";
+    }
+
+    @Override
+    public String targetRef() {
+        return json.get("target_branch").asString();
+    }
+
+    @Override
+    public Hash targetHash() {
+        return repository.branchHash(targetRef());
+    }
+
+    @Override
+    public String title() {
+        return json.get("title").asString();
+    }
+
+    @Override
+    public void setTitle(String title) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public String body() {
+        var body = json.get("description").asString();
+        if (body == null) {
+            body = "";
+        }
+        return body;
+    }
+
+    @Override
+    public void setBody(String body) {
+        request.put("")
+               .body("description", body)
+               .execute();
+    }
+
+    private Comment parseComment(JSONValue comment) {
+        var ret = new Comment(comment.get("id").toString(),
+                              comment.get("body").asString(),
+                              new HostUser(comment.get("author").get("id").asInt(),
+                                           comment.get("author").get("username").asString(),
+                                           comment.get("author").get("name").asString()),
+                              ZonedDateTime.parse(comment.get("created_at").asString()),
+                              ZonedDateTime.parse(comment.get("updated_at").asString()));
+        return ret;
+    }
+
+    @Override
+    public List<Comment> comments() {
+        return request.get("notes").param("sort", "asc").execute().stream()
+                      .filter(entry -> !entry.contains("position")) // Ignore comments with a position - they are review comments
+                      .filter(entry -> !entry.get("system").asBoolean()) // Ignore system generated comments
+                .map(this::parseComment)
+                .collect(Collectors.toList());
+    }
+
+    @Override
+    public Comment addComment(String body) {
+        log.fine("Posting a new comment");
+        var comment = request.post("notes")
+                             .body("body", body)
+                             .execute();
+        var parsedComment = parseComment(comment);
+        log.fine("Id of new comment: " + parsedComment.id());
+        return parsedComment;
+    }
+
+    @Override
+    public Comment updateComment(String id, String body) {
+        log.fine("Updating existing comment " + id);
+        var comment = request.put("notes/" + id)
+                             .body("body", body)
+                             .execute();
+        var parsedComment = parseComment(comment);
+        log.fine("Id of updated comment: " + parsedComment.id());
+        return parsedComment;
+    }
+
+    @Override
+    public ZonedDateTime createdAt() {
+        return ZonedDateTime.parse(json.get("created_at").asString());
+    }
+
+    @Override
+    public ZonedDateTime updatedAt() {
+        return ZonedDateTime.parse(json.get("updated_at").asString());
+    }
+
+    private final String checkMarker = "<!-- Merge request status check message (%s) -->";
+    private final String checkResultMarker = "<!-- Merge request status check result (%s) (%s) (%s) (%s) -->";
+    private final String checkResultPattern = "<!-- Merge request status check result \\(([-\\w]+)\\) \\((\\w+)\\) \\(%s\\) \\((\\S+)\\) -->";
+
+    private Optional<Comment> getStatusCheckComment(String name) {
+        var marker = String.format(checkMarker, name);
+
+        return comments().stream()
+                         .filter(c -> c.body().contains(marker))
+                         .findFirst();
+    }
+
+    private String encodeMarkdown(String message) {
+        return message.replaceAll("\n", "  \n");
+    }
+
+    private final Pattern checkBodyPattern = Pattern.compile("^##### ([^\\n\\r]*)\\R(.*)",
+                                                             Pattern.DOTALL | Pattern.MULTILINE);
+
+    @Override
+    public Map<String, Check> checks(Hash hash) {
+        var pattern = Pattern.compile(String.format(checkResultPattern, hash.hex()));
+        var matchers = comments().stream()
+                                 .collect(Collectors.toMap(comment -> comment,
+                        comment -> pattern.matcher(comment.body())));
+
+        return matchers.entrySet().stream()
+                .filter(entry -> entry.getValue().find())
+                .collect(Collectors.toMap(entry -> entry.getValue().group(1),
+                        entry -> {
+                            var checkBuilder = CheckBuilder.create(entry.getValue().group(1), hash);
+                            checkBuilder.startedAt(entry.getKey().createdAt());
+                            var status = entry.getValue().group(2);
+                            var completedAt = entry.getKey().updatedAt();
+                            switch (status) {
+                                case "RUNNING":
+                                    // do nothing
+                                    break;
+                                case "SUCCESS":
+                                    checkBuilder.complete(true, completedAt);
+                                    break;
+                                case "FAILURE":
+                                    checkBuilder.complete(false, completedAt);
+                                    break;
+                                case "CANCELLED":
+                                    checkBuilder.cancel(completedAt);
+                                    break;
+                                default:
+                                    throw new IllegalStateException("Unknown status: " + status);
+                            }
+                            if (!entry.getValue().group(3).equals("NONE")) {
+                                checkBuilder.metadata(new String(Base64.getDecoder().decode(entry.getValue().group(3)), StandardCharsets.UTF_8));
+                            }
+                            var checkBodyMatcher = checkBodyPattern.matcher(entry.getKey().body());
+                            if (checkBodyMatcher.find()) {
+                                // escapeMarkdown adds an additional space before the newline
+                                var title = checkBodyMatcher.group(1);
+                                var nonEscapedTitle = title.substring(0, title.length() - 2);
+                                checkBuilder.title(nonEscapedTitle);
+                                checkBuilder.summary(checkBodyMatcher.group(2));
+                            }
+                            return checkBuilder.build();
+                        }));
+    }
+
+    private String statusFor(Check check) {
+        switch (check.status()) {
+            case IN_PROGRESS:
+                return "RUNNING";
+            case SUCCESS:
+                return "SUCCESS";
+            case FAILURE:
+                return "FAILURE";
+            case CANCELLED:
+                return "CANCELLED";
+            default:
+                throw new RuntimeException("Unknown check status");
+        }
+    }
+
+    private String metadataFor(Check check) {
+        if (check.metadata().isPresent()) {
+            return Base64.getEncoder().encodeToString(check.metadata().get().getBytes(StandardCharsets.UTF_8));
+        }
+        return "NONE";
+    }
+
+    private String linkToDiff(String path, Hash hash, int line) {
+        return "[" + path + " line " + line + "](" + URIBuilder.base(repository.url())
+                         .setPath("/" + repository.name()+ "/blob/" + hash.hex() + "/" + path)
+                         .setAuthentication(null)
+                         .build() + "#L" + Integer.toString(line) + ")";
+    }
+
+    private String bodyFor(Check check) {
+        var status = check.status();
+        String body;
+        switch (status) {
+            case IN_PROGRESS:
+                body = ":hourglass_flowing_sand: The merge request check **" + check.name() + "** is currently running...";
+                break;
+            case SUCCESS:
+                body = ":tada: The merge request check **" + check.name() + "** completed successfully!";
+                break;
+            case FAILURE:
+                body = ":warning: The merge request check **" + check.name() + "** identified the following issues:";
+                break;
+            case CANCELLED:
+                body = ":x: The merge request check **" + check.name() + "** has been cancelled.";
+                break;
+            default:
+                throw new RuntimeException("Unknown check status");
+        }
+
+        if ( check.title().isPresent() && check.summary().isPresent()) {
+            body += encodeMarkdown("\n" + "##### " + check.title().get() + "\n" + check.summary().get());
+
+            for (var annotation : check.annotations()) {
+                var annotationString = "  - ";
+                switch (annotation.level()) {
+                    case NOTICE:
+                        annotationString += "Notice: ";
+                        break;
+                    case WARNING:
+                        annotationString += "Warning: ";
+                        break;
+                    case FAILURE:
+                        annotationString += "Failure: ";
+                        break;
+                }
+                annotationString += linkToDiff(annotation.path(), check.hash(), annotation.startLine());
+                annotationString += "\n    - " + annotation.message().lines().collect(Collectors.joining("\n    - "));
+
+                body += "\n" + annotationString;
+            }
+        }
+
+        return body;
+    }
+
+    private void updateCheckComment(Optional<Comment> previous, Check check) {
+        var status = statusFor(check);
+        var metadata = metadataFor(check);
+        var markers = String.format(checkMarker, check.name()) + "\n" +
+                      String.format(checkResultMarker,
+                                    check.name(),
+                                    status,
+                                    check.hash(),
+                                    metadata);
+
+        var body = bodyFor(check);
+        var message = markers + "\n" + body;
+        previous.ifPresentOrElse(
+                p  -> updateComment(p.id(), message),
+                () -> addComment(message));
+    }
+
+    @Override
+    public void createCheck(Check check) {
+        log.info("Looking for previous status check comment");
+
+        var previous = getStatusCheckComment(check.name());
+        updateCheckComment(previous, check);
+    }
+
+    @Override
+    public void updateCheck(Check check) {
+        log.info("Looking for previous status check comment");
+
+        var previous = getStatusCheckComment(check.name())
+                .orElseGet(() -> addComment("Progress deleted?"));
+        updateCheckComment(Optional.of(previous), check);
+    }
+
+    @Override
+    public URI changeUrl() {
+        return URIBuilder.base(webUrl()).appendPath("/diffs").build();
+    }
+
+    @Override
+    public URI changeUrl(Hash base) {
+        return URIBuilder.base(webUrl()).appendPath("/diffs")
+                         .setQuery(Map.of("start_sha", base.hex()))
+                         .build();
+    }
+
+    @Override
+    public boolean isDraft() {
+        return json.get("work_in_progress").asBoolean();
+    }
+
+
+    @Override
+    public void setState(State state) {
+        request.put("")
+               .body("state_event", state == State.CLOSED ? "close" : "reopen")
+               .execute();
+    }
+
+    @Override
+    public void addLabel(String label) {
+        // GitLab does not allow adding/removing single labels, only setting the full list
+        // We retrieve the list again here to try to minimize the race condition window
+        var currentJson = request.get("").execute().asObject();
+        var labels = Stream.concat(currentJson.get("labels").stream()
+                .map(JSONValue::asString),
+                List.of(label).stream())
+                .collect(Collectors.toSet());
+        request.put("")
+               .body("labels", String.join(",", labels))
+               .execute();
+    }
+
+    @Override
+    public void removeLabel(String label) {
+        var currentJson = request.get("").execute().asObject();
+        var labels = currentJson.get("labels").stream()
+                .map(JSONValue::asString)
+                .filter(l -> !l.equals(label))
+                .collect(Collectors.toSet());
+        request.put("")
+               .body("labels", String.join(",", labels))
+               .execute();
+    }
+
+    @Override
+    public List<String> labels() {
+        var currentJson = request.get("").execute().asObject();
+        return currentJson.get("labels").stream()
+                .map(JSONValue::asString)
+                .sorted()
+                .collect(Collectors.toList());
+    }
+
+    @Override
+    public URI webUrl() {
+        return URIBuilder.base(repository.webUrl())
+                         .setPath("/" + repository.name() + "/merge_requests/" + id())
+                         .build();
+    }
+
+    @Override
+    public String toString() {
+        return "GitLabMergeRequest #" + id() + " by " + author();
+    }
+
+    @Override
+    public List<HostUser> assignees() {
+        var assignee = json.get("assignee").asObject();
+        if (assignee != null) {
+            var user = repository.forge().user(assignee.get("username").asString());
+            return List.of(user);
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public void setAssignees(List<HostUser> assignees) {
+        var id = assignees.size() == 0 ? 0 : Integer.valueOf(assignees.get(0).id());
+        var param = JSON.object().put("assignee_id", id);
+        request.put().body(param).execute();
+        if (assignees.size() > 1) {
+            var rest = assignees.subList(1, assignees.size());
+            var usernames = rest.stream()
+                                .map(HostUser::userName)
+                                .map(username -> "@" + username)
+                                .collect(Collectors.joining(" "));
+            var comment = usernames + " can you have a look at this merge request?";
+            addComment(comment);
+        }
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/GitLabRepository.java b/forge/src/main/java/org/openjdk/skara/forge/GitLabRepository.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/GitLabRepository.java
@@ -0,0 +1,250 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.json.*;
+import org.openjdk.skara.network.*;
+import org.openjdk.skara.vcs.*;
+
+import java.net.*;
+import java.nio.charset.StandardCharsets;
+import java.time.Duration;
+import java.util.*;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+
+public class GitLabRepository implements HostedRepository {
+    private final GitLabHost gitLabHost;
+    private final String projectName;
+    private final RestRequest request;
+    private final JSONValue json;
+    private final Pattern mergeRequestPattern;
+
+    public GitLabRepository(GitLabHost gitLabHost, String projectName) {
+        this.gitLabHost = gitLabHost;
+        json = gitLabHost.getProjectInfo(projectName);
+        this.projectName = json.get("path_with_namespace").asString();
+
+        var id = json.get("id").asInt();
+        var baseApi = URIBuilder.base(gitLabHost.getUri())
+                .setPath("/api/v4/projects/" + id + "/")
+                .build();
+
+        request = gitLabHost.getPat()
+                            .map(pat -> new RestRequest(baseApi, () -> Arrays.asList("Private-Token", pat.token())))
+                            .orElseGet(() -> new RestRequest(baseApi));
+
+        var urlPattern = URIBuilder.base(gitLabHost.getUri())
+                                   .setPath("/" + projectName + "/merge_requests/").build();
+        mergeRequestPattern = Pattern.compile(urlPattern.toString() + "(\\d+)");
+    }
+
+    @Override
+    public Forge forge() {
+        return gitLabHost;
+    }
+
+    @Override
+    public Optional<HostedRepository> parent() {
+        if (json.contains("forked_from_project")) {
+            var parent = json.get("forked_from_project").get("path_with_namespace").asString();
+            return Optional.of(new GitLabRepository(gitLabHost, parent));
+        }
+        return Optional.empty();
+    }
+
+    @Override
+    public PullRequest createPullRequest(HostedRepository target,
+                                         String targetRef,
+                                         String sourceRef,
+                                         String title,
+                                         List<String> body,
+                                         boolean draft) {
+        if (!(target instanceof GitLabRepository)) {
+            throw new IllegalArgumentException("target must be a GitLab repository");
+        }
+
+        var pr = request.post("merge_requests")
+                        .body("source_branch", sourceRef)
+                        .body("target_branch", targetRef)
+                        .body("title", draft ? "WIP: " : "" + title)
+                        .body("description", String.join("\n", body))
+                        .body("target_project_id", Long.toString(target.id()))
+                        .execute();
+
+        var targetRepo = (GitLabRepository) target;
+        return new GitLabMergeRequest(targetRepo, pr, targetRepo.request);
+    }
+
+    @Override
+    public PullRequest pullRequest(String id) {
+        var pr = request.get("merge_requests/" + id).execute();
+        return new GitLabMergeRequest(this, pr, request);
+    }
+
+    @Override
+    public List<PullRequest> pullRequests() {
+        return request.get("merge_requests")
+                      .param("state", "opened")
+                      .execute().stream()
+                      .map(value -> new GitLabMergeRequest(this, value, request))
+                      .collect(Collectors.toList());
+    }
+
+    @Override
+    public List<PullRequest> findPullRequestsWithComment(String author, String body) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public Optional<PullRequest> parsePullRequestUrl(String url) {
+        var matcher = mergeRequestPattern.matcher(url);
+        if (matcher.find()) {
+            return Optional.of(pullRequest(matcher.group(1)));
+        } else {
+            return Optional.empty();
+        }
+    }
+
+    @Override
+    public String name() {
+        return projectName;
+    }
+
+    @Override
+    public URI url() {
+        var builder = URIBuilder
+                .base(gitLabHost.getUri())
+                .setPath("/" + projectName + ".git");
+        gitLabHost.getPat().ifPresent(pat -> builder.setAuthentication(pat.userName() + ":" + pat.token()));
+        return builder.build();
+    }
+
+    @Override
+    public URI webUrl() {
+        return URIBuilder.base(gitLabHost.getUri())
+                         .setPath("/" + projectName)
+                         .build();
+    }
+
+    @Override
+    public URI webUrl(Hash hash) {
+        return URIBuilder.base(gitLabHost.getUri())
+                         .setPath("/" + projectName + "/commit/" + hash.abbreviate())
+                         .build();
+    }
+
+    @Override
+    public VCS repositoryType() {
+        return VCS.GIT;
+    }
+
+    @Override
+    public String fileContents(String filename, String ref) {
+        var confName = URLEncoder.encode(filename, StandardCharsets.UTF_8);
+        var conf = request.get("repository/files/" + confName)
+                          .param("ref", ref)
+                          .onError(response -> {
+                              // Retry once with additional escaping of the path fragment
+                              var escapedConfName = URLEncoder.encode(confName, StandardCharsets.UTF_8);
+                              return request.get("repository/files/" + escapedConfName)
+                                            .param("ref", ref).execute();
+                          })
+                          .execute();
+        var content = Base64.getDecoder().decode(conf.get("content").asString());
+        return new String(content, StandardCharsets.UTF_8);
+    }
+
+    @Override
+    public String namespace() {
+        return URIBuilder.base(gitLabHost.getUri()).build().getHost();
+    }
+
+    @Override
+    public Optional<WebHook> parseWebHook(JSONValue body) {
+        if (!body.contains("object_kind")) {
+            return Optional.empty();
+        }
+        if (!body.contains("project") || !body.get("project").contains("path_with_namespace")) {
+            return Optional.empty();
+        }
+        if (!body.get("project").get("path_with_namespace").asString().equals(projectName)) {
+            return Optional.empty();
+        }
+
+        int id = -1;
+
+        if (body.get("object_kind").asString().equals("merge_request")) {
+            if (!body.contains("object_attributes") || !body.get("object_attributes").contains("iid")) {
+                return Optional.empty();
+            }
+            id = body.get("object_attributes").get("iid").asInt();
+        }
+
+        if (body.contains("merge_request")) {
+            if (!body.get("merge_request").contains("iid")) {
+                return Optional.empty();
+            }
+            id = body.get("merge_request").get("iid").asInt();
+        }
+
+        if (id != -1) {
+            var pr = pullRequest(Integer.toString(id));
+            var webHook = new WebHook(List.of(pr));
+            return Optional.of(webHook);
+        } else {
+            return Optional.empty();
+        }
+    }
+
+    @Override
+    public HostedRepository fork() {
+        var namespace = gitLabHost.currentUser().userName();
+        request.post("fork")
+               .body("namespace", namespace)
+               .onError(r -> r.statusCode() == 409 ? JSON.object().put("exists", true) : null)
+               .execute();
+        var nameOnlyStart = projectName.lastIndexOf('/');
+        var nameOnly = nameOnlyStart >= 0 ? projectName.substring(nameOnlyStart + 1) : projectName;
+        var forkedRepoName = namespace + "/" + nameOnly;
+        while (!gitLabHost.isProjectForkComplete(forkedRepoName)) {
+            try {
+                Thread.sleep(Duration.ofSeconds(1).toMillis());
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+        }
+        return gitLabHost.repository(forkedRepoName);
+    }
+
+    @Override
+    public long id() {
+        return json.get("id").asLong();
+    }
+
+    @Override
+    public Hash branchHash(String ref) {
+        var branch = request.get("repository/branches/" + ref).execute();
+        return new Hash(branch.get("commit").get("id").asString());
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java b/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.json.JSONValue;
+import org.openjdk.skara.vcs.*;
+
+import java.net.URI;
+import java.util.*;
+
+public interface HostedRepository {
+    Forge forge();
+    PullRequest createPullRequest(HostedRepository target,
+                                  String targetRef,
+                                  String sourceRef,
+                                  String title,
+                                  List<String> body,
+                                  boolean draft);
+    PullRequest pullRequest(String id);
+    List<PullRequest> pullRequests();
+    List<PullRequest> findPullRequestsWithComment(String author, String body);
+    Optional<PullRequest> parsePullRequestUrl(String url);
+    String name();
+    Optional<HostedRepository> parent();
+    URI url();
+    URI webUrl();
+    URI webUrl(Hash hash);
+    VCS repositoryType();
+    String fileContents(String filename, String ref);
+    String namespace();
+    Optional<WebHook> parseWebHook(JSONValue body);
+    HostedRepository fork();
+    long id();
+    Hash branchHash(String ref);
+
+    default PullRequest createPullRequest(HostedRepository target,
+                                          String targetRef,
+                                          String sourceRef,
+                                          String title,
+                                          List<String> body) {
+        return createPullRequest(target, targetRef, sourceRef, title, body, false);
+    }
+}
diff a/host/src/main/java/org/openjdk/skara/host/github/PositionMapper.java b/forge/src/main/java/org/openjdk/skara/forge/PositionMapper.java
--- a/host/src/main/java/org/openjdk/skara/host/github/PositionMapper.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/PositionMapper.java
@@ -18,11 +18,11 @@
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package org.openjdk.skara.host.github;
+package org.openjdk.skara.forge;
 
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
diff a/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java
@@ -0,0 +1,126 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.issuetracker.Issue;
+import org.openjdk.skara.vcs.Hash;
+
+import java.net.URI;
+import java.util.*;
+
+public interface PullRequest extends Issue {
+    HostedRepository repository();
+
+    /**
+     * List of reviews, in descending chronological order.
+     * @return
+     */
+    List<Review> reviews();
+
+    /**
+     * Adds a review with the given verdict.
+     */
+    void addReview(Review.Verdict verdict, String body);
+
+    /**
+     * Add a file specific comment.
+     * @param hash
+     * @param path
+     * @param line
+     * @param body
+     * @return
+     */
+    ReviewComment addReviewComment(Hash base, Hash hash, String path, int line, String body);
+
+    /**
+     * Reply to a file specific comment.
+     * @param parent
+     * @param body
+     * @return
+     */
+    ReviewComment addReviewCommentReply(ReviewComment parent, String body);
+
+    /**
+     * Get all file specific comments.
+     * @return
+     */
+    List<ReviewComment> reviewComments();
+
+    /**
+     * Hash of the current head of the request.
+     * @return
+     */
+    Hash headHash();
+
+    /**
+     * Returns the name of the ref the request is created from.
+     * @return
+     */
+    String sourceRef();
+
+    /**
+     * Returns the name of the ref the request is intended to be merged into.
+     * @return
+     */
+    String targetRef();
+
+    /**
+     * Returns the current head of the ref the request is intended to be merged into.
+     * @return
+     */
+    Hash targetHash();
+
+    /**
+     * List of completed checks on the given hash.
+     * @return
+     */
+    Map<String, Check> checks(Hash hash);
+
+    /**
+     * Creates a new check.
+     * @param check
+     */
+    void createCheck(Check check);
+
+    /**
+     * Updates an existing check.
+     * @param check
+     */
+    void updateCheck(Check check);
+
+    /**
+     * Returns a link that will lead to the list of changes done in the request.
+     */
+    URI changeUrl();
+
+    /**
+     * Returns a link that will lead to the list of changes with the specified base.
+     */
+    URI changeUrl(Hash base);
+
+    /**
+     * Returns true if the request is in draft mode.
+     * @return
+     */
+    boolean isDraft();
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/PullRequestUpdateCache.java b/forge/src/main/java/org/openjdk/skara/forge/PullRequestUpdateCache.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/PullRequestUpdateCache.java
@@ -0,0 +1,69 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import java.time.ZonedDateTime;
+import java.util.*;
+import java.util.logging.Logger;
+
+public class PullRequestUpdateCache {
+    private final Map<HostedRepository, String> repositoryIds = new HashMap<>();
+    private final Map<String, ZonedDateTime> lastUpdates = new HashMap<>();
+
+    private final Logger log = Logger.getLogger("org.openjdk.skara.host");
+
+    private String getUniqueId(PullRequest pr) {
+        var repo = pr.repository();
+        if (!repositoryIds.containsKey(repo)) {
+            repositoryIds.put(repo, Integer.toString(repositoryIds.size()));
+        }
+        return repositoryIds.get(repo) + ";" + pr.id();
+    }
+
+    public synchronized boolean needsUpdate(PullRequest pr) {
+        // GitLab CE does not update this field on events such as adding an award
+        if (pr instanceof GitLabMergeRequest) {
+            return true;
+        }
+
+        var uniqueId = getUniqueId(pr);
+        var update = pr.updatedAt();
+
+        if (!lastUpdates.containsKey(uniqueId)) {
+            lastUpdates.put(uniqueId, update);
+            return true;
+        }
+        var lastUpdate = lastUpdates.get(uniqueId);
+        if (lastUpdate.isBefore(update)) {
+            lastUpdates.put(uniqueId, update);
+            return true;
+        }
+        log.info("Skipping update for " + pr.repository().name() + "#" + pr.id());
+        return false;
+    }
+
+    public synchronized void invalidate(PullRequest pr) {
+        var uniqueId = getUniqueId(pr);
+        lastUpdates.remove(uniqueId);
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/Review.java b/forge/src/main/java/org/openjdk/skara/forge/Review.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/Review.java
@@ -0,0 +1,70 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.host.HostUser;
+import org.openjdk.skara.vcs.Hash;
+
+import java.util.Optional;
+
+public class Review {
+    private final HostUser reviewer;
+    private final Verdict verdict;
+    private final Hash hash;
+    private final int id;
+    private final String body;
+
+    public Review(HostUser reviewer, Verdict verdict, Hash hash, int id, String body) {
+        this.reviewer = reviewer;
+        this.verdict = verdict;
+        this.hash = hash;
+        this.id = id;
+        this.body = body;
+    }
+
+    public HostUser reviewer() {
+        return reviewer;
+    }
+
+    public Verdict verdict() {
+        return verdict;
+    }
+
+    public Hash hash() {
+        return hash;
+    }
+
+    public int id() {
+        return id;
+    }
+
+    public Optional<String> body() {
+        return Optional.ofNullable(body);
+    }
+
+    public enum Verdict {
+        NONE,
+        APPROVED,
+        DISAPPROVED
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/ReviewComment.java b/forge/src/main/java/org/openjdk/skara/forge/ReviewComment.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/ReviewComment.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.host.HostUser;
+import org.openjdk.skara.issuetracker.Comment;
+import org.openjdk.skara.vcs.Hash;
+
+import java.time.ZonedDateTime;
+import java.util.Optional;
+
+public class ReviewComment extends Comment {
+    private final ReviewComment parent;
+    private final String threadId;
+    private final Hash hash;
+    private final String path;
+    private final int line;
+
+    public ReviewComment(ReviewComment parent, String threadId, Hash hash, String path, int line, String id, String body, HostUser author, ZonedDateTime createdAt, ZonedDateTime updatedAt) {
+        super(id, body, author, createdAt, updatedAt);
+
+        this.parent = parent;
+        this.threadId = threadId;
+        this.hash = hash;
+        this.path = path;
+        this.line = line;
+    }
+
+    public Optional<ReviewComment> parent() {
+        return Optional.ofNullable(parent);
+    }
+
+    public Hash hash() {
+        return hash;
+    }
+
+    public String path() {
+        return path;
+    }
+
+    public int line() {
+        return line;
+    }
+
+    public String threadId() {
+        return threadId;
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/WebHook.java b/forge/src/main/java/org/openjdk/skara/forge/WebHook.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/WebHook.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import java.util.List;
+
+public class WebHook {
+
+    private final List<PullRequest> updatedPullRequests;
+
+    public WebHook(List<PullRequest> updatedPullRequests) {
+        this.updatedPullRequests = updatedPullRequests;
+    }
+
+    public List<PullRequest> updatedPullRequests() {
+        return updatedPullRequests;
+    }
+}
diff a/forge/src/test/java/org/openjdk/skara/forge/CheckBuilderTests.java b/forge/src/test/java/org/openjdk/skara/forge/CheckBuilderTests.java
--- /dev/null
+++ b/forge/src/test/java/org/openjdk/skara/forge/CheckBuilderTests.java
@@ -0,0 +1,108 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.vcs.Hash;
+
+import org.junit.jupiter.api.Test;
+
+import java.time.ZonedDateTime;
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+class CheckBuilderTests {
+    @Test
+    void testFrom() {
+        var hash = new Hash("0".repeat(40));
+        var name = "test";
+        var title = "title";
+        var summary = "summary";
+        var metadata = "metadata";
+        var annotation = CheckAnnotationBuilder.create("README", 0, 1, CheckAnnotationLevel.NOTICE, "Message")
+                                               .build();
+        var startedAt = ZonedDateTime.now();
+        var completedAt = ZonedDateTime.now();
+        var success = true;
+
+        var existing = CheckBuilder.create(name, hash)
+                                   .title(title)
+                                   .summary(summary)
+                                   .metadata(metadata)
+                                   .annotation(annotation)
+                                   .startedAt(startedAt)
+                                   .complete(success, completedAt)
+                                   .build();
+        var dup = CheckBuilder.from(existing)
+                              .build();
+
+        assertEquals(existing.name(), dup.name());
+        assertEquals(existing.hash(), dup.hash());
+        assertEquals(existing.status(), dup.status());
+        assertEquals(existing.startedAt(), dup.startedAt());
+        assertEquals(existing.completedAt(), dup.completedAt());
+        assertEquals(existing.title(), dup.title());
+        assertEquals(existing.summary(), dup.summary());
+        assertEquals(existing.metadata(), dup.metadata());
+        assertEquals(existing.annotations(), dup.annotations());
+
+        var newTitle = "new title";
+        var newSummary = "new summary";
+        var newMetadata = "new metadata";
+        var newAnnotation = CheckAnnotationBuilder.create("FILE", 0, 1, CheckAnnotationLevel.NOTICE, "Message")
+                                                  .build();
+        var newStartedAt = ZonedDateTime.now();
+        var newCompletedAt = ZonedDateTime.now();
+        var newSuccess = false;
+
+        var modified = CheckBuilder.from(existing)
+                                   .title(newTitle)
+                                   .summary(newSummary)
+                                   .metadata(newMetadata)
+                                   .annotation(newAnnotation)
+                                   .startedAt(newStartedAt)
+                                   .complete(newSuccess, newCompletedAt)
+                                   .build();
+
+        // existing check should not have changed
+        assertEquals(dup.name(), existing.name());
+        assertEquals(dup.hash(), existing.hash());
+        assertEquals(dup.status(), existing.status());
+        assertEquals(dup.startedAt(), existing.startedAt());
+        assertEquals(dup.completedAt(), existing.completedAt());
+        assertEquals(dup.title(), existing.title());
+        assertEquals(dup.summary(), existing.summary());
+        assertEquals(dup.metadata(), existing.metadata());
+        assertEquals(dup.annotations(), existing.annotations());
+
+        // modified should have new values except name and hash and inherit annotations
+        assertEquals(existing.name(), modified.name());
+        assertEquals(existing.hash(), modified.hash());
+        assertEquals(newStartedAt, modified.startedAt());
+        assertEquals(newCompletedAt, modified.completedAt().get());
+        assertEquals(newTitle, modified.title().get());
+        assertEquals(newSummary, modified.summary().get());
+        assertEquals(newMetadata, modified.metadata().get());
+        assertEquals(List.of(annotation, newAnnotation), modified.annotations());
+    }
+}
diff a/forge/src/test/java/org/openjdk/skara/forge/GitHubApplicationTests.java b/forge/src/test/java/org/openjdk/skara/forge/GitHubApplicationTests.java
--- /dev/null
+++ b/forge/src/test/java/org/openjdk/skara/forge/GitHubApplicationTests.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.junit.jupiter.api.*;
+
+import java.time.Duration;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+public class GitHubApplicationTests {
+
+    @Test
+    public void tokenSetSimple() {
+        Token t = new Token(() -> "a", Duration.ofHours(1));
+        assertEquals("a", t.toString());
+    }
+
+    private final String[] sequence = {"a", "b", "c"};
+    private int sequenceIndex = 0;
+    private String sequenceGenerator() {
+        return sequence[sequenceIndex++];
+    }
+
+    @Test
+    public void tokenCache() {
+        sequenceIndex = 0;
+        Token t = new Token(this::sequenceGenerator, Duration.ofHours(1));
+        assertEquals("a", t.toString());
+        assertEquals("a", t.toString());
+    }
+
+    @Test
+    public void tokenExpiration() {
+        sequenceIndex = 0;
+        Token t = new Token(this::sequenceGenerator, Duration.ZERO);
+        assertEquals("a", t.toString());
+        assertEquals("b", t.toString());
+    }
+
+    private String badGenerator() throws Token.GeneratorError {
+        throw new Token.GeneratorError("error");
+    }
+
+    @Test
+    public void tokenGeneratorError() {
+        Token t = new Token(this::badGenerator, Duration.ZERO);
+        assertThrows(GitHubApplicationError.class, () -> t.toString());
+    }
+
+}
diff a/forge/src/test/java/org/openjdk/skara/forge/GitHubHostTests.java b/forge/src/test/java/org/openjdk/skara/forge/GitHubHostTests.java
--- /dev/null
+++ b/forge/src/test/java/org/openjdk/skara/forge/GitHubHostTests.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.network.URIBuilder;
+import org.openjdk.skara.test.TemporaryDirectory;
+
+import org.junit.jupiter.api.*;
+
+import java.io.IOException;
+import java.net.*;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.*;
+import java.util.regex.Pattern;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+public class GitHubHostTests {
+    private void generateKeyfile(Path path) throws IOException {
+        // This key was randomly generated for this test only
+        Files.writeString(path, "-----BEGIN PRIVATE KEY-----\n" +
+                "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDAFzH+URXAvOoL\n" +
+                "0NSdIePQTTVsan13c+7D9tAilJAtRcxUjOz2lMZYBzrdsVYGbktfseEvF6o9dyoX\n" +
+                "X/py6DM0QqBNW/0uEv1ouS44po0VvykHVXrAq0u8E8HHFtr09VQSO/ceXrFd6haQ\n" +
+                "aCckbdp1TPn1q8w+U2bRkqUji7zzfwll6AaB4dhKZ1v5NFuff1PWmuk2x7b0u2yR\n" +
+                "uANLHLqmNB4ik7bUTiIyacXeVSZRZRFGwJjd+1WnyiybwV6QbQ0nndw6iaz2wGWt\n" +
+                "XDif7DJE0axMReUZVKJLqMagS5R5ra6FdlnUPw0nbJMwnDOLk9ofSfne0LTSTD6K\n" +
+                "/VZ26izbAgMBAAECggEBALF0vDq1reLgo1dHFSQUquFEcpY1yrMP5wQifyVzGb65\n" +
+                "PIrfpgomZxXrl/Y2XcKTIg7FxcI7moouDDSL9lMxMByXcIAG+14VLQYSDSFIvA3b\n" +
+                "C4w666wSk2Ss29eQxbaG7aPqweDMmg6osy+1CHQfCDJVapYKoCTz54i0cNrlvSk0\n" +
+                "FZ3o99uAvAcLtrsqbnXO57NXQVajoSH0bkMZd+TuZqEIX3CzHoNEVhzvqaKedqA6\n" +
+                "Cd22Y2m6cnW0H10Chko05FtskLYD+jw275LiUtInplBtG3n5/uDIamsOPo9XG8i0\n" +
+                "a4rxaJYsRqXYqDOEjLi/QCUrYBtJ+gqT/qMOTjAoKAECgYEA/VPdvc03vScjIu4T\n" +
+                "vNXjXxv81HZPm/IoTYTgvTvrEqErQ/CIwTQJer1XUJ9M43n+XkVZsMKkUIMlwt2+\n" +
+                "G0wBwYkDUgIXFEJhb170BVgwyZHE+Djr0E7NunbAv/oQu8AfQzk5HZpcQwxVg8w8\n" +
+                "Vj2ecLb4GK0D9iJ4zLwlsRw2RukCgYEAwh30AG7gq5y9Mj/BusuDvyNZZKjE/pJz\n" +
+                "HtC7a/OzOyr+Bpr2VBxVDeEFth22bd/a4ohv1QcwNAa2LzelNfQRQURq/vqpDmuj\n" +
+                "g0ESQavh3i3Tax2LXO582HWueuNL+8Ufyb6WDJDvYuz0F3WBJhxixP3I7VgMhPWV\n" +
+                "tK/wEEDDwyMCgYEArR3M4NIHDzpZppsv3dIE6ZAEvWSEjrtzk1YFBwyVXkvJd0o/\n" +
+                "Clj3SWtu6eeS8bkCfYXC/ypkg6i7+2jxa1ILuShanoZTI0Mhtqwa8jQMUxNMmZy8\n" +
+                "ecQAjzZsDkVjfgqS0quePn6oIiGhpsnBSeYeCkTfUm2Z0XBJQRAqadgvt1ECgYBK\n" +
+                "FAgzyhxvIUeKT45s7JGAdcr9gPJ8fAL2tY1wqvWxFL0QZD6w5ocG3uLBFyGxWIY9\n" +
+                "gPe8ghvBHvaTmlav+k5DbAqw95Ngb29c/Y4sBZ4SncZa0FGIy3JVYMOPHgK3OAjj\n" +
+                "gpncfcr9I5QbB7qbgqWmq3rsKHfOnbHd3G5upWiPpQKBgCaPW2vyT/nfCvfh0z//\n" +
+                "QSv0//4zy7pDdOolP5ZRsUo5cU4aiv4XgTSglR2jEJyr4bMYCN/+4tnqp0tIUzt1\n" +
+                "RWJhXLU1dm4QhCTccWMAyQgktn3SB5Ww3+qyLr1klUwkO+rx8kkNjv3rC/u5EzQ9\n" +
+                "q3DJ9in4wyYBNPVDB5kJom5i\n" +
+                "-----END PRIVATE KEY-----", StandardCharsets.UTF_8);
+    }
+
+    @Test
+    void webUriPatternReplacement() throws IOException, URISyntaxException {
+        try (var tempFolder = new TemporaryDirectory()) {
+            var key = tempFolder.path().resolve("key.pem");
+            generateKeyfile(key);
+            var app = new GitHubApplication(key.toString(), "y", "z");
+            var host = new GitHubHost(URIBuilder.base("http://www.example.com").build(),
+                                      app, Pattern.compile("^(http://www.example.com)/test/(.*)$"), "$1/another/$2");
+            assertEquals(new URI("http://www.example.com/another/hello"), host.getWebURI("/test/hello"));
+        }
+    }
+}
diff a/host/src/test/java/org/openjdk/skara/host/github/PositionMapperTests.java b/forge/src/test/java/org/openjdk/skara/forge/PositionMapperTests.java
--- a/host/src/test/java/org/openjdk/skara/host/github/PositionMapperTests.java
+++ b/forge/src/test/java/org/openjdk/skara/forge/PositionMapperTests.java
@@ -18,13 +18,13 @@
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package org.openjdk.skara.host.github;
+package org.openjdk.skara.forge;
 
-import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.*;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 class PositionMapperTests {
     private static final String diff = "diff --git a/vcs/src/main/java/org/openjdk/skara/vcs/Range.java b/vcs/src/main/java/org/openjdk/skara/vcs/Range.java\n" +
diff a/host/build.gradle b/host/build.gradle
--- a/host/build.gradle
+++ b/host/build.gradle
@@ -26,12 +26,10 @@
     test {
         requires 'org.openjdk.skara.test'
         requires 'org.junit.jupiter.api'
         requires 'jdk.httpserver'
         opens 'org.openjdk.skara.host' to 'org.junit.platform.commons'
-        opens 'org.openjdk.skara.host.network' to 'org.junit.platform.commons'
-        opens 'org.openjdk.skara.host.github' to 'org.junit.platform.commons'
     }
 }
 
 dependencies {
     implementation project(':vcs')
diff a/host/src/main/java/org/openjdk/skara/host/Check.java b/host/src/main/java/org/openjdk/skara/host/Check.java
--- a/host/src/main/java/org/openjdk/skara/host/Check.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import org.openjdk.skara.vcs.Hash;
-
-import java.time.ZonedDateTime;
-import java.util.*;
-
-public class Check {
-    private final ZonedDateTime startedAt;
-    private final ZonedDateTime completedAt;
-    private final CheckStatus status;
-    private final Hash hash;
-    private final String metadata;
-    private final String title;
-    private final String summary;
-    private final List<CheckAnnotation> annotations;
-    private final String name;
-
-    Check(String name, Hash hash, CheckStatus status, ZonedDateTime startedAt, ZonedDateTime completedAt, String metadata, String title, String summary, List<CheckAnnotation> annotations) {
-        this.name = name;
-        this.hash = hash;
-        this.status = status;
-        this.startedAt = startedAt;
-        this.completedAt = completedAt;
-        this.metadata = metadata;
-        this.title = title;
-        this.summary = summary;
-        this.annotations = annotations;
-    }
-
-    public String name() {
-        return name;
-    }
-
-    public Hash hash() {
-        return hash;
-    }
-
-    public CheckStatus status() {
-        return status;
-    }
-
-    public ZonedDateTime startedAt() {
-        return startedAt;
-    }
-
-    public Optional<ZonedDateTime> completedAt() {
-        return Optional.ofNullable(completedAt);
-    }
-
-    public Optional<String> title() {
-        return Optional.ofNullable(title);
-    }
-
-    public Optional<String> summary() {
-        return Optional.ofNullable(summary);
-    }
-
-    public Optional<String> metadata() {
-        return Optional.ofNullable(metadata);
-    }
-
-    public List<CheckAnnotation> annotations() {
-        return annotations;
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/CheckAnnotation.java b/host/src/main/java/org/openjdk/skara/host/CheckAnnotation.java
--- a/host/src/main/java/org/openjdk/skara/host/CheckAnnotation.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import java.util.Optional;
-
-public class CheckAnnotation {
-    public final String path;
-    private final int startLine;
-    private final int endLine;
-    private final Integer startColumn;
-    private final Integer endColumn;
-    private final String title;
-    private final String message;
-    private final CheckAnnotationLevel level;
-
-    CheckAnnotation(String path, int startLine, int endLine, CheckAnnotationLevel level, Integer startColumn, Integer endColumn, String title, String message) {
-        this.path = path;
-        this.startLine = startLine;
-        this.endLine = endLine;
-        this.startColumn = startColumn;
-        this.endColumn = endColumn;
-        this.title = title;
-        this.message = message;
-        this.level = level;
-    }
-
-    public String path() {
-        return path;
-    }
-
-    public int startLine() {
-        return startLine;
-    }
-
-    public int endLine() {
-        return endLine;
-    }
-
-    public Optional<Integer> startColumn() {
-        return Optional.ofNullable(startColumn);
-    }
-
-    public Optional<Integer> endColumn() {
-        return Optional.ofNullable(endColumn);
-    }
-
-    public Optional<String> title() {
-        return Optional.ofNullable(title);
-    }
-
-    public String message() {
-        return message;
-    }
-
-    public CheckAnnotationLevel level() {
-        return level;
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/CheckAnnotationBuilder.java b/host/src/main/java/org/openjdk/skara/host/CheckAnnotationBuilder.java
--- a/host/src/main/java/org/openjdk/skara/host/CheckAnnotationBuilder.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-public class CheckAnnotationBuilder {
-
-    private final String path;
-    private final int startLine;
-    private final int endLine;
-    private final CheckAnnotationLevel level;
-    private final String message;
-
-    private Integer startColumn;
-    private Integer endColumn;
-    private String title;
-
-    private CheckAnnotationBuilder(String path, int startLine, int endLine, CheckAnnotationLevel level, String message) {
-        this.path = path;
-        this.startLine = startLine;
-        this.endLine = endLine;
-        this.level = level;
-        this.message = message;
-    }
-
-    public static CheckAnnotationBuilder create(String path, int startLine, int endLine, CheckAnnotationLevel level, String message) {
-        return new CheckAnnotationBuilder(path, startLine, endLine, level, message);
-    }
-
-    public CheckAnnotationBuilder startColumn(int startColumn) {
-        this.startColumn = startColumn;
-        return this;
-    }
-
-    public CheckAnnotationBuilder endColumn(int endColumn) {
-        this.endColumn = endColumn;
-        return this;
-    }
-
-    public CheckAnnotationBuilder title(String title) {
-        this.title = title;
-        return this;
-    }
-
-    public CheckAnnotation build() {
-        return new CheckAnnotation(path, startLine, endLine, level, startColumn, endColumn, title, message);
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/CheckAnnotationLevel.java b/host/src/main/java/org/openjdk/skara/host/CheckAnnotationLevel.java
--- a/host/src/main/java/org/openjdk/skara/host/CheckAnnotationLevel.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-public enum CheckAnnotationLevel {
-    NOTICE,
-    WARNING,
-    FAILURE
-}
diff a/host/src/main/java/org/openjdk/skara/host/CheckStatus.java b/host/src/main/java/org/openjdk/skara/host/CheckStatus.java
--- a/host/src/main/java/org/openjdk/skara/host/CheckStatus.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-public enum CheckStatus {
-    IN_PROGRESS,
-    SUCCESS,
-    FAILURE,
-    CANCELLED
-}
diff a/host/src/main/java/org/openjdk/skara/host/Comment.java b/host/src/main/java/org/openjdk/skara/host/Comment.java
--- a/host/src/main/java/org/openjdk/skara/host/Comment.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import java.time.ZonedDateTime;
-
-public class Comment {
-
-    private final String id;
-    private final String body;
-    private final HostUser author;
-    private final ZonedDateTime createdAt;
-    private final ZonedDateTime updatedAt;
-
-    public Comment(String id, String body, HostUser author, ZonedDateTime createdAt, ZonedDateTime updatedAt) {
-        this.id = id;
-        this.body = body;
-        this.author = author;
-        this.createdAt = createdAt;
-        this.updatedAt = updatedAt;
-    }
-
-    public String id() {
-        return id;
-    }
-
-    public String body() {
-        return body;
-    }
-
-    public HostUser author() {
-        return author;
-    }
-
-    public ZonedDateTime createdAt() {
-        return createdAt;
-    }
-
-    public ZonedDateTime updatedAt() {
-        return updatedAt;
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/Host.java b/host/src/main/java/org/openjdk/skara/host/Host.java
--- a/host/src/main/java/org/openjdk/skara/host/Host.java
+++ b/host/src/main/java/org/openjdk/skara/host/Host.java
@@ -20,12 +20,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.host;
 
-import java.net.URI;
-
 public interface Host {
     boolean isValid();
     HostUser user(String username);
     HostUser currentUser();
     boolean isMemberOf(String groupId, HostUser user);
diff a/host/src/main/java/org/openjdk/skara/host/HostFactory.java b/host/src/main/java/org/openjdk/skara/host/HostFactory.java
--- a/host/src/main/java/org/openjdk/skara/host/HostFactory.java
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import org.openjdk.skara.host.github.*;
-import org.openjdk.skara.host.gitlab.GitLabHost;
-import org.openjdk.skara.host.jira.JiraHost;
-
-import java.net.URI;
-import java.util.regex.Pattern;
-
-public class HostFactory {
-    public static RepositoryHost createGitHubHost(URI uri, Pattern webUriPattern, String webUriReplacement, String keyFile, String issue, String id) {
-        var app = new GitHubApplication(keyFile, issue, id);
-        return new GitHubHost(uri, app, webUriPattern, webUriReplacement);
-    }
-
-    public static RepositoryHost createGitHubHost(URI uri, PersonalAccessToken pat) {
-        if (pat != null) {
-            return new GitHubHost(uri, pat);
-        } else {
-            return new GitHubHost(uri);
-        }
-    }
-
-    public static RepositoryHost createGitLabHost(URI uri, PersonalAccessToken pat) {
-        if (pat != null) {
-            return new GitLabHost(uri, pat);
-        } else {
-            return new GitLabHost(uri);
-        }
-    }
-
-    public static IssueHost createJiraHost(URI uri, PersonalAccessToken pat) {
-        if (pat != null) {
-            throw new RuntimeException("authentication not implemented yet");
-        }
-        return new JiraHost(uri);
-    }
-
-    public static RepositoryHost createFromURI(URI uri, PersonalAccessToken pat) throws IllegalArgumentException {
-        // Short-circuit
-        if (uri.toString().contains("github")) {
-            return createGitHubHost(uri, pat);
-        } else if (uri.toString().contains("gitlab")) {
-            return createGitLabHost(uri, pat);
-        }
-
-        try {
-            var gitLabHost = createGitLabHost(uri, pat);
-            if (gitLabHost.isValid()) {
-                return gitLabHost;
-            }
-        } catch (RuntimeException e) {
-            try {
-                var gitHubHost = createGitHubHost(uri, pat);
-                if (gitHubHost.isValid()) {
-                    return gitHubHost;
-                }
-            } catch (RuntimeException ignored) {
-            }
-        }
-
-        throw new IllegalArgumentException("Unable to detect host type from URI: " + uri);
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/HostedRepository.java b/host/src/main/java/org/openjdk/skara/host/HostedRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/HostedRepository.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import org.openjdk.skara.json.JSONValue;
-import org.openjdk.skara.vcs.*;
-
-import java.net.URI;
-import java.util.*;
-
-public interface HostedRepository extends IssueProject {
-    RepositoryHost host();
-    PullRequest createPullRequest(HostedRepository target,
-                                  String targetRef,
-                                  String sourceRef,
-                                  String title,
-                                  List<String> body,
-                                  boolean draft);
-    PullRequest pullRequest(String id);
-    List<PullRequest> pullRequests();
-    List<PullRequest> findPullRequestsWithComment(String author, String body);
-    Optional<PullRequest> parsePullRequestUrl(String url);
-    String name();
-    Optional<HostedRepository> parent();
-    URI url();
-    URI webUrl(Hash hash);
-    VCS repositoryType();
-    String fileContents(String filename, String ref);
-    String namespace();
-    Optional<WebHook> parseWebHook(JSONValue body);
-    HostedRepository fork();
-    long id();
-    Hash branchHash(String ref);
-
-    default PullRequest createPullRequest(HostedRepository target,
-                                          String targetRef,
-                                          String sourceRef,
-                                          String title,
-                                          List<String> body) {
-        return createPullRequest(target, targetRef, sourceRef, title, body, false);
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/Issue.java b/host/src/main/java/org/openjdk/skara/host/Issue.java
--- a/host/src/main/java/org/openjdk/skara/host/Issue.java
+++ /dev/null
@@ -1,147 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import java.net.URI;
-import java.time.ZonedDateTime;
-import java.util.List;
-
-public interface Issue {
-    /**
-     * Project containing the issue.
-     * @return
-     */
-    IssueProject project();
-
-    /**
-     * The repository-specific identifier.
-     * @return
-     */
-    String id();
-
-    /**
-     * The host-specific author name.
-     * @return
-     */
-    HostUser author();
-
-    /**
-     * Title of the request.
-     * @return
-     */
-    String title();
-
-    /**
-     * Update the title of the request.
-     * @param title
-     */
-    void setTitle(String title);
-
-    /**
-     * The main body of the request.
-     * @return
-     */
-    String body();
-
-    /**
-     * Update the main body of the request.
-     * @param body
-     */
-    void setBody(String body);
-
-    /**
-     * All comments on the issue, in ascending creation time order.
-     * @return
-     */
-    List<Comment> comments();
-
-    /**
-     * Posts a new comment.
-     * @param body
-     */
-    Comment addComment(String body);
-
-    /**
-     * Updates an existing comment.
-     * @param id
-     * @param body
-     */
-    Comment updateComment(String id, String body);
-
-    /**
-     * When the request was created.
-     * @return
-     */
-    ZonedDateTime createdAt();
-
-    /**
-     * When the request was last updated.
-     * @return
-     */
-    ZonedDateTime updatedAt();
-
-    enum State {
-        OPEN,
-        CLOSED
-    }
-
-    /**
-     * Set the state.
-     * @param state Desired state
-     */
-    void setState(State state);
-
-    /**
-     * Adds the given label.
-     * @param label
-     */
-    void addLabel(String label);
-
-    /**
-     * Removes the given label.
-     * @param label
-     */
-    void removeLabel(String label);
-
-    /**
-     * Retrieves all the currently set labels.
-     * @return
-     */
-    List<String> labels();
-
-    /**
-     * Returns a link that will lead to the issue.
-     */
-    URI webUrl();
-
-    /**
-     * Returns all usernames assigned to the issue.
-     */
-    List<HostUser> assignees();
-
-    /**
-     * Update the list of assignees.
-     * @param assignees
-     */
-    void setAssignees(List<HostUser> assignees);
-}
diff a/host/src/main/java/org/openjdk/skara/host/IssueHost.java b/host/src/main/java/org/openjdk/skara/host/IssueHost.java
--- a/host/src/main/java/org/openjdk/skara/host/IssueHost.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-public interface IssueHost extends Host {
-    IssueProject project(String name);
-}
diff a/host/src/main/java/org/openjdk/skara/host/IssueProject.java b/host/src/main/java/org/openjdk/skara/host/IssueProject.java
--- a/host/src/main/java/org/openjdk/skara/host/IssueProject.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import java.net.URI;
-import java.util.*;
-
-public interface IssueProject {
-    Host host();
-    URI webUrl();
-    Issue createIssue(String title, List<String> body);
-    Optional<Issue> issue(String id);
-    List<Issue> issues();
-}
diff a/host/src/main/java/org/openjdk/skara/host/PullRequest.java b/host/src/main/java/org/openjdk/skara/host/PullRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/PullRequest.java
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import org.openjdk.skara.vcs.Hash;
-
-import java.net.URI;
-import java.util.*;
-
-public interface PullRequest extends Issue {
-    HostedRepository repository();
-
-    /**
-     * List of reviews, in descending chronological order.
-     * @return
-     */
-    List<Review> reviews();
-
-    /**
-     * Adds a review with the given verdict.
-     */
-    void addReview(Review.Verdict verdict, String body);
-
-    /**
-     * Add a file specific comment.
-     * @param hash
-     * @param path
-     * @param line
-     * @param body
-     * @return
-     */
-    ReviewComment addReviewComment(Hash base, Hash hash, String path, int line, String body);
-
-    /**
-     * Reply to a file specific comment.
-     * @param parent
-     * @param body
-     * @return
-     */
-    ReviewComment addReviewCommentReply(ReviewComment parent, String body);
-
-    /**
-     * Get all file specific comments.
-     * @return
-     */
-    List<ReviewComment> reviewComments();
-
-    /**
-     * Hash of the current head of the request.
-     * @return
-     */
-    Hash headHash();
-
-    /**
-     * Returns the name of the ref the request is created from.
-     * @return
-     */
-    String sourceRef();
-
-    /**
-     * Returns the name of the ref the request is intended to be merged into.
-     * @return
-     */
-    String targetRef();
-
-    /**
-     * Returns the current head of the ref the request is intended to be merged into.
-     * @return
-     */
-    Hash targetHash();
-
-    /**
-     * List of completed checks on the given hash.
-     * @return
-     */
-    Map<String, Check> checks(Hash hash);
-
-    /**
-     * Creates a new check.
-     * @param check
-     */
-    void createCheck(Check check);
-
-    /**
-     * Updates an existing check.
-     * @param check
-     */
-    void updateCheck(Check check);
-
-    /**
-     * Returns a link that will lead to the list of changes done in the request.
-     */
-    URI changeUrl();
-
-    /**
-     * Returns a link that will lead to the list of changes with the specified base.
-     */
-    URI changeUrl(Hash base);
-
-    /**
-     * Returns true if the request is in draft mode.
-     * @return
-     */
-    boolean isDraft();
-}
diff a/host/src/main/java/org/openjdk/skara/host/PullRequestUpdateCache.java b/host/src/main/java/org/openjdk/skara/host/PullRequestUpdateCache.java
--- a/host/src/main/java/org/openjdk/skara/host/PullRequestUpdateCache.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import org.openjdk.skara.host.gitlab.GitLabMergeRequest;
-
-import java.time.ZonedDateTime;
-import java.util.*;
-import java.util.logging.Logger;
-
-public class PullRequestUpdateCache {
-    private final Map<HostedRepository, String> repositoryIds = new HashMap<>();
-    private final Map<String, ZonedDateTime> lastUpdates = new HashMap<>();
-
-    private final Logger log = Logger.getLogger("org.openjdk.skara.host");
-
-    private String getUniqueId(PullRequest pr) {
-        var repo = pr.repository();
-        if (!repositoryIds.containsKey(repo)) {
-            repositoryIds.put(repo, Integer.toString(repositoryIds.size()));
-        }
-        return repositoryIds.get(repo) + ";" + pr.id();
-    }
-
-    public synchronized boolean needsUpdate(PullRequest pr) {
-        // GitLab CE does not update this field on events such as adding an award
-        if (pr instanceof GitLabMergeRequest) {
-            return true;
-        }
-
-        var uniqueId = getUniqueId(pr);
-        var update = pr.updatedAt();
-
-        if (!lastUpdates.containsKey(uniqueId)) {
-            lastUpdates.put(uniqueId, update);
-            return true;
-        }
-        var lastUpdate = lastUpdates.get(uniqueId);
-        if (lastUpdate.isBefore(update)) {
-            lastUpdates.put(uniqueId, update);
-            return true;
-        }
-        log.info("Skipping update for " + pr.repository().name() + "#" + pr.id());
-        return false;
-    }
-
-    public synchronized void invalidate(PullRequest pr) {
-        var uniqueId = getUniqueId(pr);
-        lastUpdates.remove(uniqueId);
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/RepositoryHost.java b/host/src/main/java/org/openjdk/skara/host/RepositoryHost.java
--- a/host/src/main/java/org/openjdk/skara/host/RepositoryHost.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import java.net.URI;
-
-public interface RepositoryHost extends Host {
-    HostedRepository repository(String name);
-    boolean supportsReviewBody();
-
-    static RepositoryHost from(URI uri, PersonalAccessToken pat) {
-        return HostFactory.createFromURI(uri, pat);
-    }
-    static RepositoryHost from(URI uri) {
-        return HostFactory.createFromURI(uri, null);
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/Review.java b/host/src/main/java/org/openjdk/skara/host/Review.java
--- a/host/src/main/java/org/openjdk/skara/host/Review.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import org.openjdk.skara.vcs.Hash;
-
-import java.util.Optional;
-
-public class Review {
-    private final HostUser reviewer;
-    private final Verdict verdict;
-    private final Hash hash;
-    private final int id;
-    private final String body;
-
-    public Review(HostUser reviewer, Verdict verdict, Hash hash, int id, String body) {
-        this.reviewer = reviewer;
-        this.verdict = verdict;
-        this.hash = hash;
-        this.id = id;
-        this.body = body;
-    }
-
-    public HostUser reviewer() {
-        return reviewer;
-    }
-
-    public Verdict verdict() {
-        return verdict;
-    }
-
-    public Hash hash() {
-        return hash;
-    }
-
-    public int id() {
-        return id;
-    }
-
-    public Optional<String> body() {
-        return Optional.ofNullable(body);
-    }
-
-    public enum Verdict {
-        NONE,
-        APPROVED,
-        DISAPPROVED
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/ReviewComment.java b/host/src/main/java/org/openjdk/skara/host/ReviewComment.java
--- a/host/src/main/java/org/openjdk/skara/host/ReviewComment.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import org.openjdk.skara.vcs.Hash;
-
-import java.time.ZonedDateTime;
-import java.util.Optional;
-
-public class ReviewComment extends Comment {
-    private final ReviewComment parent;
-    private final String threadId;
-    private final Hash hash;
-    private final String path;
-    private final int line;
-
-    public ReviewComment(ReviewComment parent, String threadId, Hash hash, String path, int line, String id, String body, HostUser author, ZonedDateTime createdAt, ZonedDateTime updatedAt) {
-        super(id, body, author, createdAt, updatedAt);
-
-        this.parent = parent;
-        this.threadId = threadId;
-        this.hash = hash;
-        this.path = path;
-        this.line = line;
-    }
-
-    public Optional<ReviewComment> parent() {
-        return Optional.ofNullable(parent);
-    }
-
-    public Hash hash() {
-        return hash;
-    }
-
-    public String path() {
-        return path;
-    }
-
-    public int line() {
-        return line;
-    }
-
-    public String threadId() {
-        return threadId;
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/WebHook.java b/host/src/main/java/org/openjdk/skara/host/WebHook.java
--- a/host/src/main/java/org/openjdk/skara/host/WebHook.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import java.util.List;
-
-public class WebHook {
-
-    private final List<PullRequest> updatedPullRequests;
-
-    public WebHook(List<PullRequest> updatedPullRequests) {
-        this.updatedPullRequests = updatedPullRequests;
-    }
-
-    public List<PullRequest> updatedPullRequests() {
-        return updatedPullRequests;
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
+++ /dev/null
@@ -1,216 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host.github;
-
-import org.openjdk.skara.host.*;
-import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.*;
-
-import java.net.*;
-import java.nio.charset.StandardCharsets;
-import java.util.Arrays;
-import java.util.regex.Pattern;
-
-public class GitHubHost implements RepositoryHost {
-    private final URI uri;
-    private final Pattern webUriPattern;
-    private final String webUriReplacement;
-    private final GitHubApplication application;
-    private final PersonalAccessToken pat;
-    private final RestRequest request;
-    private HostUser currentUser;
-
-    public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement) {
-        this.uri = uri;
-        this.webUriPattern = webUriPattern;
-        this.webUriReplacement = webUriReplacement;
-        this.application = application;
-        this.pat = null;
-
-        var baseApi = URIBuilder.base(uri)
-                .appendSubDomain("api")
-                .setPath("/")
-                .build();
-
-        request = new RestRequest(baseApi, () -> Arrays.asList(
-                "Authorization", "token " + getInstallationToken(),
-                "Accept", "application/vnd.github.machine-man-preview+json",
-                "Accept", "application/vnd.github.antiope-preview+json"));
-    }
-
-    public GitHubHost(URI uri, PersonalAccessToken pat) {
-        this.uri = uri;
-        this.webUriPattern = null;
-        this.webUriReplacement = null;
-        this.pat = pat;
-        this.application = null;
-
-        var baseApi = URIBuilder.base(uri)
-                                .appendSubDomain("api")
-                                .setPath("/")
-                                .build();
-
-        request = new RestRequest(baseApi, () -> Arrays.asList(
-                "Authorization", "token " + pat.token()));
-    }
-
-    public GitHubHost(URI uri) {
-        this.uri = uri;
-        this.webUriPattern = null;
-        this.webUriReplacement = null;
-        this.pat = null;
-        this.application = null;
-
-        var baseApi = URIBuilder.base(uri)
-                                .appendSubDomain("api")
-                                .setPath("/")
-                                .build();
-
-        request = new RestRequest(baseApi);
-    }
-
-    public URI getURI() {
-        return uri;
-    }
-
-    URI getWebURI(String endpoint) {
-        var baseWebUri = URIBuilder.base(uri)
-                                   .setPath(endpoint)
-                                   .build();
-
-        if (webUriPattern == null) {
-            return baseWebUri;
-        }
-
-        var matcher = webUriPattern.matcher(baseWebUri.toString());
-        if (!matcher.matches()) {
-            return baseWebUri;
-
-        }
-        return URIBuilder.base(matcher.replaceAll(webUriReplacement)).build();
-    }
-
-    String getInstallationToken() {
-        if (application != null) {
-            return application.getInstallationToken();
-        } else {
-            return pat.token();
-        }
-    }
-
-    private String getFullName(String userName) {
-        var details = user(userName);
-        return details.fullName();
-    }
-
-    // Most GitHub API's return user information in this format
-    HostUser parseUserField(JSONValue json) {
-        return parseUserObject(json.get("user"));
-    }
-
-    HostUser parseUserObject(JSONValue json) {
-        return new HostUser(json.get("id").asInt(), json.get("login").asString(),
-                            () -> getFullName(json.get("login").asString()));
-    }
-
-    @Override
-    public boolean isValid() {
-        var endpoints = request.get("")
-                               .onError(response -> JSON.of())
-                               .execute();
-        return !endpoints.isNull();
-    }
-
-    JSONObject getProjectInfo(String name) {
-        var project = request.get("repos/" + name)
-                             .execute();
-        return project.asObject();
-    }
-
-    JSONObject runSearch(String query) {
-        var result = request.get("search/issues")
-                            .param("q", query)
-                            .execute();
-        return result.asObject();
-    }
-
-    @Override
-    public HostedRepository repository(String name) {
-        return new GitHubRepository(this, name);
-    }
-
-    @Override
-    public HostUser user(String username) {
-        var details = request.get("users/" + URLEncoder.encode(username, StandardCharsets.UTF_8)).execute().asObject();
-
-        // Always present
-        var login = details.get("login").asString();
-        var id = details.get("id").asInt();
-
-        var name = details.get("name").asString();
-        if (name == null) {
-            name = login;
-        }
-        return new HostUser(id, login, name);
-    }
-
-    @Override
-    public HostUser currentUser() {
-        if (currentUser == null) {
-            if (application != null) {
-                var appDetails = application.getAppDetails();
-                var appName = appDetails.get("name").asString() + "[bot]";
-                currentUser = user(appName);
-            } else if (pat != null) {
-                currentUser = user(pat.userName());
-            } else {
-                throw new IllegalStateException("No credentials present");
-            }
-        }
-        return currentUser;
-    }
-
-    @Override
-    public boolean supportsReviewBody() {
-        return true;
-    }
-
-    @Override
-    public boolean isMemberOf(String groupId, HostUser user) {
-        long gid = 0L;
-        try {
-            gid = Long.parseLong(groupId);
-        } catch (NumberFormatException e) {
-            throw new IllegalArgumentException("Group id is not a number: " + groupId);
-        }
-        var username = URLEncoder.encode(user.userName(), StandardCharsets.UTF_8);
-        var orgs = request.get("users/" + username + "/orgs").execute().asArray();
-        for (var org : orgs) {
-            if (org.get("id").asLong() == gid) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
+++ /dev/null
@@ -1,473 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host.github;
-
-import org.openjdk.skara.host.*;
-import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.*;
-import org.openjdk.skara.vcs.Hash;
-
-import java.net.URI;
-import java.time.*;
-import java.time.format.DateTimeFormatter;
-import java.util.*;
-import java.util.logging.Logger;
-import java.util.stream.Collectors;
-
-public class GitHubPullRequest implements PullRequest {
-    private final JSONValue json;
-    private final RestRequest request;
-    private final GitHubHost host;
-    private final GitHubRepository repository;
-    private final Logger log = Logger.getLogger("org.openjdk.skara.host");
-
-    GitHubPullRequest(GitHubRepository repository, JSONValue jsonValue, RestRequest request) {
-        this.host = (GitHubHost)repository.host();
-        this.repository = repository;
-        this.request = request;
-        this.json = jsonValue;
-    }
-
-    @Override
-    public HostedRepository repository() {
-        return repository;
-    }
-
-    @Override
-    public IssueProject project() {
-        return repository;
-    }
-
-    @Override
-    public String id() {
-        return json.get("number").toString();
-    }
-
-    @Override
-    public HostUser author() {
-        return host.parseUserField(json);
-    }
-
-    @Override
-    public List<Review> reviews() {
-        var reviews = request.get("pulls/" + json.get("number").toString() + "/reviews").execute().stream()
-                             .map(JSONValue::asObject)
-                             .filter(obj -> !(obj.get("state").asString().equals("COMMENTED") && obj.get("body").asString().isEmpty()))
-                             .map(obj -> {
-                                 var reviewer = host.parseUserField(obj);
-                                 var hash = new Hash(obj.get("commit_id").asString());
-                                 Review.Verdict verdict;
-                                 switch (obj.get("state").asString()) {
-                                     case "APPROVED":
-                                         verdict = Review.Verdict.APPROVED;
-                                         break;
-                                     case "CHANGES_REQUESTED":
-                                         verdict = Review.Verdict.DISAPPROVED;
-                                         break;
-                                     default:
-                                         verdict = Review.Verdict.NONE;
-                                         break;
-                                 }
-                                 var id = obj.get("id").asInt();
-                                 var body = obj.get("body").asString();
-                                 return new Review(reviewer, verdict, hash, id, body);
-                             })
-                             .collect(Collectors.toList());
-        return reviews;
-    }
-
-    @Override
-    public void addReview(Review.Verdict verdict, String body) {
-        var query = JSON.object();
-        switch (verdict) {
-            case APPROVED:
-                query.put("event", "APPROVE");
-                break;
-            case DISAPPROVED:
-                query.put("event", "REQUEST_CHANGES");
-                break;
-            case NONE:
-                query.put("event", "COMMENT");
-                break;
-        }
-        query.put("body", body);
-        request.post("pulls/" + json.get("number").toString() + "/reviews")
-               .body(query)
-               .execute();
-    }
-
-    private ReviewComment parseReviewComment(ReviewComment parent, JSONObject json, PositionMapper diff) {
-        var author = host.parseUserField(json);
-        var threadId = parent == null ? json.get("id").toString() : parent.threadId();
-        var comment = new ReviewComment(parent,
-                                        threadId,
-                                        new Hash(json.get("commit_id").asString()),
-                                        json.get("path").asString(),
-                                        diff.positionToLine(json.get("path").asString(), json.get("original_position").asInt()),
-                                        json.get("id").toString(),
-                                        json.get("body").asString(),
-                                        author,
-                                        ZonedDateTime.parse(json.get("created_at").asString()),
-                                        ZonedDateTime.parse(json.get("updated_at").asString()));
-        return comment;
-    }
-
-    @Override
-    public ReviewComment addReviewComment(Hash base, Hash hash, String path, int line, String body) {
-        var rawDiff = request.get("pulls/" + json.get("number").toString())
-                             .header("Accept", "application/vnd.github.v3.diff")
-                             .executeUnparsed();
-        var diff = PositionMapper.parse(rawDiff);
-
-        var query = JSON.object()
-                .put("body", body)
-                .put("commit_id", hash.hex())
-                .put("path", path)
-                .put("position", diff.lineToPosition(path, line));
-        var response = request.post("pulls/" + json.get("number").toString() + "/comments")
-                .body(query)
-                .execute();
-        return parseReviewComment(null, response.asObject(), diff);
-    }
-
-    @Override
-    public ReviewComment addReviewCommentReply(ReviewComment parent, String body) {
-        var rawDiff = request.get("pulls/" + json.get("number").toString())
-                             .header("Accept", "application/vnd.github.v3.diff")
-                             .executeUnparsed();
-        var diff = PositionMapper.parse(rawDiff);
-
-        var query = JSON.object()
-                        .put("body", body)
-                .put("in_reply_to", Integer.parseInt(parent.threadId()));
-        var response = request.post("pulls/" + json.get("number").toString() + "/comments")
-                .body(query)
-                .execute();
-        return parseReviewComment(parent, response.asObject(), diff);
-    }
-
-    @Override
-    public List<ReviewComment> reviewComments() {
-        var rawDiff = request.get("pulls/" + json.get("number").toString())
-                          .header("Accept", "application/vnd.github.v3.diff")
-                          .executeUnparsed();
-        var diff = PositionMapper.parse(rawDiff);
-
-        var ret = new ArrayList<ReviewComment>();
-        var reviewComments = request.get("pulls/" + json.get("number").toString() + "/comments").execute().stream()
-                                    .map(JSONValue::asObject)
-                                    .collect(Collectors.toList());
-        var idToComment = new HashMap<String, ReviewComment>();
-
-        for (var reviewComment : reviewComments) {
-            ReviewComment parent = null;
-            if (reviewComment.contains("in_reply_to_id")) {
-                parent = idToComment.get(reviewComment.get("in_reply_to_id").toString());
-            }
-            var comment = parseReviewComment(parent, reviewComment, diff);
-            idToComment.put(comment.id(), comment);
-            ret.add(comment);
-        }
-
-        return ret;
-    }
-
-    @Override
-    public Hash headHash() {
-        return new Hash(json.get("head").get("sha").asString());
-    }
-
-    @Override
-    public String sourceRef() {
-        return "pull/" + id() + "/head";
-    }
-
-    @Override
-    public String targetRef() {
-        return json.get("base").get("ref").asString();
-    }
-
-    @Override
-    public Hash targetHash() {
-        return repository.branchHash(targetRef());
-    }
-
-    @Override
-    public String title() {
-        return json.get("title").asString();
-    }
-
-    @Override
-    public void setTitle(String title) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public String body() {
-        var body = json.get("body").asString();
-        if (body == null) {
-            body = "";
-        }
-        return body;
-    }
-
-    @Override
-    public void setBody(String body) {
-        request.patch("pulls/" + json.get("number").toString())
-               .body("body", body)
-               .execute();
-    }
-
-    private Comment parseComment(JSONValue comment) {
-        var ret = new Comment(Integer.toString(comment.get("id").asInt()),
-                              comment.get("body").asString(),
-                              host.parseUserField(comment),
-                              ZonedDateTime.parse(comment.get("created_at").asString()),
-                              ZonedDateTime.parse(comment.get("updated_at").asString()));
-        return ret;
-    }
-
-    @Override
-    public List<Comment> comments() {
-        return request.get("issues/" + json.get("number").toString() + "/comments").execute().stream()
-                .map(this::parseComment)
-                .collect(Collectors.toList());
-    }
-
-    @Override
-    public Comment addComment(String body) {
-        var comment = request.post("issues/" + json.get("number").toString() + "/comments")
-                .body("body", body)
-                .execute();
-        return parseComment(comment);
-    }
-
-    @Override
-    public Comment updateComment(String id, String body) {
-        var comment = request.patch("issues/comments/" + id)
-                .body("body", body)
-                .execute();
-        return parseComment(comment);
-    }
-
-    @Override
-    public ZonedDateTime createdAt() {
-        return ZonedDateTime.parse(json.get("created_at").asString());
-    }
-
-    @Override
-    public ZonedDateTime updatedAt() {
-        return ZonedDateTime.parse(json.get("updated_at").asString());
-    }
-
-    @Override
-    public Map<String, Check> checks(Hash hash) {
-        var checks = request.get("commits/" + hash.hex() + "/check-runs").execute();
-
-        return checks.get("check_runs").stream()
-                .collect(Collectors.toMap(c -> c.get("name").asString(),
-                        c -> {
-                            var checkBuilder = CheckBuilder.create(c.get("name").asString(), new Hash(c.get("head_sha").asString()));
-                            checkBuilder.startedAt(ZonedDateTime.parse(c.get("started_at").asString()));
-
-                            var completed = c.get("status").asString().equals("completed");
-                            if (completed) {
-                                var conclusion = c.get("conclusion").asString();
-                                var completedAt = ZonedDateTime.parse(c.get("completed_at").asString());
-                                switch (conclusion) {
-                                    case "cancelled":
-                                        checkBuilder.cancel(completedAt);
-                                        break;
-                                    case "success":
-                                        checkBuilder.complete(true, completedAt);
-                                        break;
-                                    case "failure":
-                                        checkBuilder.complete(false, completedAt);
-                                        break;
-                                    default:
-                                        throw new IllegalStateException("Unexpected conclusion: " + conclusion);
-                                }
-                            }
-                            if (c.contains("external_id")) {
-                                checkBuilder.metadata(c.get("external_id").asString());
-                            }
-                            if (c.contains("output")) {
-                                var output = c.get("output").asObject();
-                                if (output.contains("title")) {
-                                    checkBuilder.title(output.get("title").asString());
-                                }
-                                if (output.contains("summary")) {
-                                    checkBuilder.summary(output.get("summary").asString());
-                                }
-                            }
-
-                            return checkBuilder.build();
-                        }));
-    }
-
-    @Override
-    public void createCheck(Check check) {
-        // update and create are currenly identical operations, both do an HTTP
-        // POST to the /repos/:owner/:repo/check-runs endpoint. There is an additional
-        // endpoint explicitly for updating check-runs, but that is not currently used.
-        updateCheck(check);
-    }
-
-    @Override
-    public void updateCheck(Check check) {
-        var completedQuery = JSON.object();
-        completedQuery.put("name", check.name());
-        completedQuery.put("head_branch", json.get("head").get("ref"));
-        completedQuery.put("head_sha", check.hash().hex());
-
-        if (check.title().isPresent() && check.summary().isPresent()) {
-            var outputQuery = JSON.object();
-            outputQuery.put("title", check.title().get());
-            outputQuery.put("summary", check.summary().get());
-
-            var annotations = JSON.array();
-            for (var annotation : check.annotations()) {
-                var annotationQuery = JSON.object();
-                annotationQuery.put("path", annotation.path());
-                annotationQuery.put("start_line", annotation.startLine());
-                annotationQuery.put("end_line", annotation.endLine());
-                annotation.startColumn().ifPresent(startColumn -> annotationQuery.put("start_column", startColumn));
-                annotation.endColumn().ifPresent(endColumn -> annotationQuery.put("end_column", endColumn));
-                switch (annotation.level()) {
-                    case NOTICE:
-                        annotationQuery.put("annotation_level", "notice");
-                        break;
-                    case WARNING:
-                        annotationQuery.put("annotation_level", "warning");
-                        break;
-                    case FAILURE:
-                        annotationQuery.put("annotation_level", "failure");
-                        break;
-                }
-
-                annotationQuery.put("message", annotation.message());
-                annotation.title().ifPresent(title -> annotationQuery.put("title", title));
-                annotations.add(annotationQuery);
-            }
-
-            outputQuery.put("annotations", annotations);
-            completedQuery.put("output", outputQuery);
-        }
-
-        if (check.status() == CheckStatus.IN_PROGRESS) {
-            completedQuery.put("status", "in_progress");
-        } else {
-            completedQuery.put("status", "completed");
-            completedQuery.put("conclusion", check.status().name().toLowerCase());
-            completedQuery.put("completed_at", check.completedAt().orElse(ZonedDateTime.now(ZoneOffset.UTC))
-                    .format(DateTimeFormatter.ISO_INSTANT));
-        }
-
-        completedQuery.put("started_at", check.startedAt().format(DateTimeFormatter.ISO_INSTANT));
-        check.metadata().ifPresent(metadata -> completedQuery.put("external_id", metadata));
-
-        request.post("check-runs").body(completedQuery).execute();
-    }
-
-    @Override
-    public URI changeUrl() {
-        return URIBuilder.base(webUrl()).appendPath("/files").build();
-    }
-
-    @Override
-    public URI changeUrl(Hash base) {
-        return URIBuilder.base(webUrl()).appendPath("/files/" + base.abbreviate() + ".." + headHash().abbreviate()).build();
-    }
-
-    @Override
-    public boolean isDraft() {
-        return json.get("draft").asBoolean();
-    }
-
-    @Override
-    public void setState(State state) {
-        request.patch("pulls/" + json.get("number").toString())
-               .body("state", state == State.CLOSED ? "closed" : "open")
-               .execute();
-    }
-
-    @Override
-    public void addLabel(String label) {
-        var query = JSON.object().put("labels", JSON.array().add(label));
-        request.post("issues/" + json.get("number").toString() + "/labels")
-               .body(query)
-               .execute();
-    }
-
-    @Override
-    public void removeLabel(String label) {
-        request.delete("issues/" + json.get("number").toString() + "/labels/" + label)
-               .onError(r -> {
-                   // The GitHub API explicitly states that 404 is the response for deleting labels currently not set
-                   if (r.statusCode() == 404) {
-                       return JSONValue.fromNull();
-                   }
-                   throw new RuntimeException("Invalid response");
-               })
-               .execute();
-    }
-
-    @Override
-    public List<String> labels() {
-        return request.get("issues/" + json.get("number").toString() + "/labels").execute().stream()
-                      .map(JSONValue::asObject)
-                      .map(obj -> obj.get("name").asString())
-                      .sorted()
-                      .collect(Collectors.toList());
-    }
-
-    @Override
-    public URI webUrl() {
-        var host = (GitHubHost)repository.host();
-        var endpoint = "/" + repository.name() + "/pull/" + id();
-        return host.getWebURI(endpoint);
-    }
-
-    @Override
-    public String toString() {
-        return "GitHubPullRequest #" + id() + " by " + author();
-    }
-
-    @Override
-    public List<HostUser> assignees() {
-        return json.get("assignees").asArray()
-                                    .stream()
-                                    .map(host::parseUserObject)
-                                    .collect(Collectors.toList());
-    }
-
-    @Override
-    public void setAssignees(List<HostUser> assignees) {
-        var assignee_ids = JSON.array();
-        for (var assignee : assignees) {
-            assignee_ids.add(assignee.userName());
-        }
-        var param = JSON.object().put("assignees", assignee_ids);
-        request.patch("issues/" + json.get("number").toString()).body(param).execute();
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
+++ /dev/null
@@ -1,221 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host.github;
-
-import org.openjdk.skara.host.*;
-import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.*;
-import org.openjdk.skara.vcs.*;
-
-import java.net.URI;
-import java.nio.charset.StandardCharsets;
-import java.util.*;
-import java.util.regex.Pattern;
-import java.util.stream.Collectors;
-
-public class GitHubRepository implements HostedRepository {
-    private final GitHubHost gitHubHost;
-    private final String repository;
-    private final RestRequest request;
-    private final JSONValue json;
-    private final Pattern pullRequestPattern;
-
-    GitHubRepository(GitHubHost gitHubHost, String repository) {
-        this.gitHubHost = gitHubHost;
-        this.repository = repository;
-
-        var apiBase = URIBuilder
-                .base(gitHubHost.getURI())
-                .appendSubDomain("api")
-                .setPath("/repos/" + repository + "/")
-                .build();
-        request = new RestRequest(apiBase, () -> Arrays.asList(
-                "Authorization", "token " + gitHubHost.getInstallationToken(),
-                "Accept", "application/vnd.github.machine-man-preview+json",
-                "Accept", "application/vnd.github.antiope-preview+json",
-                "Accept", "application/vnd.github.shadow-cat-preview+json"));
-        json = gitHubHost.getProjectInfo(repository);
-        var urlPattern = gitHubHost.getWebURI("/" + repository + "/pull/").toString();
-        pullRequestPattern = Pattern.compile(urlPattern + "(\\d+)");
-    }
-
-    @Override
-    public Optional<HostedRepository> parent() {
-        if (json.get("fork").asBoolean()) {
-            var parent = json.get("parent").get("full_name").asString();
-            return Optional.of(new GitHubRepository(gitHubHost, parent));
-        }
-        return Optional.empty();
-    }
-
-    @Override
-    public RepositoryHost host() {
-        return gitHubHost;
-    }
-
-    @Override
-    public Issue createIssue(String title, List<String> body) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public Optional<Issue> issue(String id) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public List<Issue> issues() {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public PullRequest createPullRequest(HostedRepository target,
-                                         String targetRef,
-                                         String sourceRef,
-                                         String title,
-                                         List<String> body,
-                                         boolean draft) {
-        if (!(target instanceof GitHubRepository)) {
-            throw new IllegalArgumentException("target repository must be a GitHub repository");
-        }
-
-        var upstream = (GitHubRepository) target;
-        var user = host().currentUser().userName();
-        var namespace = user.endsWith("[bot]") ? "" : user + ":";
-        var params = JSON.object()
-                         .put("title", title)
-                         .put("head", namespace + sourceRef)
-                         .put("base", targetRef)
-                         .put("body", String.join("\n", body))
-                         .put("draft", draft);
-        var pr = upstream.request.post("pulls")
-                                 .body(params)
-                                 .execute();
-
-        return new GitHubPullRequest(upstream, pr, request);
-    }
-
-    @Override
-    public PullRequest pullRequest(String id) {
-        var pr = request.get("pulls/" + id).execute();
-        return new GitHubPullRequest(this, pr, request);
-    }
-
-    @Override
-    public List<PullRequest> pullRequests() {
-        return request.get("pulls").execute().asArray().stream()
-                      .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))
-                      .collect(Collectors.toList());
-    }
-
-    @Override
-    public List<PullRequest> findPullRequestsWithComment(String author, String body) {
-        var query = "\"" + body + "\" in:comments type:pr repo:" + repository;
-        if (author != null) {
-            query += " commenter:" + author;
-        }
-        var result = gitHubHost.runSearch(query);
-        return result.get("items").stream()
-                .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))
-                .collect(Collectors.toList());
-    }
-
-    @Override
-    public Optional<PullRequest> parsePullRequestUrl(String url) {
-        var matcher = pullRequestPattern.matcher(url);
-        if (matcher.find()) {
-            return Optional.of(pullRequest(matcher.group(1)));
-        } else {
-            return Optional.empty();
-        }
-    }
-
-    @Override
-    public String name() {
-        return repository;
-    }
-
-    @Override
-    public URI url() {
-        return URIBuilder
-                .base(gitHubHost.getURI())
-                .setPath("/" + repository + ".git")
-                .setAuthentication("x-access-token:" + gitHubHost.getInstallationToken())
-                .build();
-    }
-
-    @Override
-    public URI webUrl() {
-        var endpoint = "/" + repository;
-        return gitHubHost.getWebURI(endpoint);
-    }
-
-    @Override
-    public URI webUrl(Hash hash) {
-        var endpoint = "/" + repository + "/commit/" + hash.abbreviate();
-        return gitHubHost.getWebURI(endpoint);
-    }
-
-    @Override
-    public VCS repositoryType() {
-        return VCS.GIT;
-    }
-
-    @Override
-    public String fileContents(String filename, String ref) {
-        var conf = request.get("contents/" + filename)
-                          .param("ref", ref)
-                          .execute().asObject();
-        // Content may contain newline characters
-        return conf.get("content").asString().lines()
-                   .map(line -> new String(Base64.getDecoder().decode(line), StandardCharsets.UTF_8))
-                   .collect(Collectors.joining());
-    }
-
-    @Override
-    public String namespace() {
-        return URIBuilder.base(gitHubHost.getURI()).build().getHost();
-    }
-
-    @Override
-    public Optional<WebHook> parseWebHook(JSONValue body) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public HostedRepository fork() {
-        var response = request.post("forks").execute();
-        return gitHubHost.repository(response.get("full_name").asString());
-    }
-
-    @Override
-    public long id() {
-        return json.get("id").asLong();
-    }
-
-    @Override
-    public Hash branchHash(String ref) {
-        var branch = request.get("branches/" + ref).execute();
-        return new Hash(branch.get("commit").get("sha").asString());
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
+++ /dev/null
@@ -1,154 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host.gitlab;
-
-import org.openjdk.skara.host.*;
-import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.*;
-
-import java.net.*;
-import java.nio.charset.StandardCharsets;
-import java.util.*;
-
-public class GitLabHost implements RepositoryHost {
-    private final URI uri;
-    private final PersonalAccessToken pat;
-    private final RestRequest request;
-
-    public GitLabHost(URI uri, PersonalAccessToken pat) {
-        this.uri = uri;
-        this.pat = pat;
-
-        var baseApi = URIBuilder.base(uri)
-                                .setPath("/api/v4/")
-                                .build();
-        request = new RestRequest(baseApi, () -> Arrays.asList("Private-Token", pat.token()));
-    }
-
-    public GitLabHost(URI uri) {
-        this.uri = uri;
-        this.pat = null;
-
-        var baseApi = URIBuilder.base(uri)
-                                .setPath("/api/v4/")
-                                .build();
-        request = new RestRequest(baseApi);
-    }
-
-    public URI getUri() {
-        return uri;
-    }
-
-    public Optional<PersonalAccessToken> getPat() {
-        return Optional.ofNullable(pat);
-    }
-
-    @Override
-    public boolean isValid() {
-        var version = request.get("version")
-                              .onError(r -> JSON.object().put("invalid", true))
-                              .execute();
-        return !version.contains("invalid");
-    }
-
-    JSONObject getProjectInfo(String name) {
-        var encodedName = URLEncoder.encode(name, StandardCharsets.US_ASCII);
-
-        var project = request.get("projects/" + encodedName)
-                                     .onError(r -> r.statusCode() == 404 ? JSON.object().put("retry", true) : null)
-                                     .execute();
-        if (project.contains("retry")) {
-            // Depending on web server configuration, GitLab may need double escaping of project names
-            encodedName = URLEncoder.encode(encodedName, StandardCharsets.US_ASCII);
-            project = request.get("projects/" + encodedName)
-                                     .onError(r -> r.statusCode() == 404 ? JSON.object().put("retry", true) : null)
-                                     .execute();
-        }
-        return project.asObject();
-    }
-
-    @Override
-    public HostedRepository repository(String name) {
-        return new GitLabRepository(this, name);
-    }
-
-    private HostUser parseUserDetails(JSONObject details) {
-        var id = details.get("id").asInt();
-        var username = details.get("username").asString();
-        var name = details.get("name").asString();
-        return new HostUser(id, username, name);
-    }
-
-    @Override
-    public HostUser user(String username) {
-        var details = request.get("users").param("username", username).execute().asArray();
-        if (details.size() != 1) {
-            throw new RuntimeException("Couldn't find user: " + username);
-        }
-
-        return parseUserDetails(details.get(0).asObject());
-    }
-
-    @Override
-    public HostUser currentUser() {
-        var details = request.get("user").execute().asObject();
-        return parseUserDetails(details);
-    }
-
-    @Override
-    public boolean supportsReviewBody() {
-        // GitLab CE does not support this
-        return false;
-    }
-
-    boolean isProjectForkComplete(String name) {
-        var project = getProjectInfo(name);
-        if (project.contains("import_status")) {
-            var status = project.get("import_status").asString();
-            switch (status) {
-                case "finished":
-                    return true;
-                case "started":
-                    return false;
-                default:
-                    throw new RuntimeException("Unknown fork status: " + status);
-            }
-        } else {
-            throw new RuntimeException("Project does not seem to be a fork");
-        }
-    }
-
-    @Override
-    public boolean isMemberOf(String groupId, HostUser user) {
-        long gid = 0L;
-        try {
-            gid = Long.parseLong(groupId);
-        } catch (NumberFormatException e) {
-            throw new IllegalArgumentException("Group id is not a number: " + groupId);
-        }
-        var details = request.get("groups/" + gid + "/members/" + user.id())
-                             .onError(r -> JSON.of())
-                             .execute();
-        return !details.isNull();
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
+++ /dev/null
@@ -1,606 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host.gitlab;
-
-import org.openjdk.skara.host.*;
-import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.*;
-import org.openjdk.skara.vcs.Hash;
-
-import java.net.URI;
-import java.nio.charset.StandardCharsets;
-import java.time.ZonedDateTime;
-import java.util.*;
-import java.util.logging.Logger;
-import java.util.regex.Pattern;
-import java.util.stream.*;
-
-public class GitLabMergeRequest implements PullRequest {
-
-    private final JSONValue json;
-    private final RestRequest request;
-    private final Logger log = Logger.getLogger("org.openjdk.skara.host");;
-    private final GitLabRepository repository;
-
-    GitLabMergeRequest(GitLabRepository repository, JSONValue jsonValue, RestRequest request) {
-        this.repository = repository;
-        this.json = jsonValue;
-        this.request = request.restrict("merge_requests/" + json.get("iid").toString() + "/");
-    }
-
-    @Override
-    public HostedRepository repository() {
-        return repository;
-    }
-
-    @Override
-    public IssueProject project() {
-        return repository;
-    }
-
-    @Override
-    public String id() {
-        return json.get("iid").toString();
-    }
-
-    @Override
-    public HostUser author() {
-        return repository.host().user(json.get("author").get("username").asString());
-    }
-
-    @Override
-    public List<Review> reviews() {
-
-        class CommitDate {
-            private Hash hash;
-            private ZonedDateTime date;
-        }
-
-        var commits = request.get("commits").execute().stream()
-                             .map(JSONValue::asObject)
-                             .map(obj -> {
-                                 var ret = new CommitDate();
-                                 ret.hash = new Hash(obj.get("id").asString());
-                                 ret.date = ZonedDateTime.parse(obj.get("created_at").asString());
-                                 return ret;
-                             })
-                             .sorted(Comparator.comparing(cd -> cd.date))
-                             .collect(Collectors.toList());
-
-        if (commits.size() == 0) {
-            throw new RuntimeException("Reviews on a PR without any commits?");
-        }
-
-        return request.get("award_emoji").execute().stream()
-                      .map(JSONValue::asObject)
-                      .filter(obj -> obj.get("name").asString().equals("thumbsup") ||
-                              obj.get("name").asString().equals("thumbsdown") ||
-                              obj.get("name").asString().equals("question"))
-                      .map(obj -> {
-                          var reviewer = repository.host().user(obj.get("user").get("username").asString());
-                          Review.Verdict verdict;
-                          switch (obj.get("name").asString()) {
-                              case "thumbsup":
-                                  verdict = Review.Verdict.APPROVED;
-                                  break;
-                              case "thumbsdown":
-                                  verdict = Review.Verdict.DISAPPROVED;
-                                  break;
-                              default:
-                                  verdict = Review.Verdict.NONE;
-                                  break;
-                          }
-
-                          var createdAt = ZonedDateTime.parse(obj.get("updated_at").asString());
-
-                          // Find the latest commit that isn't created after our review
-                          var hash = commits.get(0).hash;
-                          for (var cd : commits) {
-                              if (createdAt.isAfter(cd.date)) {
-                                  hash = cd.hash;
-                              }
-                          }
-                          var id = obj.get("id").asInt();
-                          return new Review(reviewer, verdict, hash, id, null);
-                      })
-                      .collect(Collectors.toList());
-    }
-
-    @Override
-    public void addReview(Review.Verdict verdict, String body) {
-        // Remove any previous awards
-        var awards = request.get("award_emoji").execute().stream()
-                            .map(JSONValue::asObject)
-                            .filter(obj -> obj.get("name").asString().equals("thumbsup") ||
-                                    obj.get("name").asString().equals("thumbsdown") ||
-                                    obj.get("name").asString().equals("question"))
-                            .filter(obj -> obj.get("user").get("username").asString().equals(repository.host().currentUser().userName()))
-                            .map(obj -> obj.get("id").toString())
-                            .collect(Collectors.toList());
-        for (var award : awards) {
-            request.delete("award_emoji/" + award).execute();
-        }
-
-        String award;
-        switch (verdict) {
-            case APPROVED:
-                award = "thumbsup";
-                break;
-            case DISAPPROVED:
-                award = "thumbsdown";
-                break;
-            default:
-                award = "question";
-                break;
-        }
-        request.post("award_emoji")
-               .body("name", award)
-               .execute();
-    }
-
-    private ReviewComment parseReviewComment(String discussionId, ReviewComment parent, JSONObject note) {
-        var comment = new ReviewComment(parent,
-                                        discussionId,
-                                        new Hash(note.get("position").get("head_sha").asString()),
-                                        note.get("position").get("new_path").asString(),
-                                        note.get("position").get("new_line").asInt(),
-                                        note.get("id").toString(),
-                                        note.get("body").asString(),
-                                        new HostUser(note.get("author").get("id").asInt(),
-                                                     note.get("author").get("username").asString(),
-                                                     note.get("author").get("name").asString()),
-                                        ZonedDateTime.parse(note.get("created_at").asString()),
-                                        ZonedDateTime.parse(note.get("updated_at").asString()));
-        return comment;
-    }
-
-    @Override
-    public ReviewComment addReviewComment(Hash base, Hash hash, String path, int line, String body) {
-        log.fine("Posting a new review comment");
-        var query = JSON.object()
-                        .put("body", body)
-                        .put("position", JSON.object()
-                                             .put("base_sha", base.hex())
-                                             .put("start_sha", base.hex())
-                                             .put("head_sha", hash.hex())
-                                             .put("position_type", "text")
-                                             .put("new_path", path)
-                                             .put("new_line", line));
-        var comments = request.post("discussions").body(query).execute();
-        if (comments.get("notes").asArray().size() != 1) {
-            throw new RuntimeException("Failed to create review comment");
-        }
-        var parsedComment = parseReviewComment(comments.get("id").asString(), null,
-                                               comments.get("notes").asArray().get(0).asObject());
-        log.fine("Id of new review comment: " + parsedComment.id());
-        return parsedComment;
-    }
-
-    @Override
-    public ReviewComment addReviewCommentReply(ReviewComment parent, String body) {
-        var discussionId = parent.threadId();
-        var comment = request.post("discussions/" + discussionId + "/notes")
-                             .body("body", body)
-                             .execute();
-        return parseReviewComment(discussionId, parent, comment.asObject());
-    }
-
-    private List<ReviewComment> parseDiscussion(JSONObject discussion) {
-        var ret = new ArrayList<ReviewComment>();
-        ReviewComment parent = null;
-        for (var note : discussion.get("notes").asArray()) {
-            // Ignore system generated comments
-            if (note.get("system").asBoolean()) {
-                continue;
-            }
-            // Ignore plain comments
-            if (!note.contains("position")) {
-                continue;
-            }
-
-            var comment = parseReviewComment(discussion.get("id").asString(), parent, note.asObject());
-            parent = comment;
-            ret.add(comment);
-        }
-
-        return ret;
-    }
-
-    @Override
-    public List<ReviewComment> reviewComments() {
-        return request.get("discussions").execute().stream()
-                      .filter(entry -> !entry.get("individual_note").asBoolean())
-                      .flatMap(entry -> parseDiscussion(entry.asObject()).stream())
-                      .collect(Collectors.toList());
-    }
-
-    @Override
-    public Hash headHash() {
-        return new Hash(json.get("sha").asString());
-    }
-
-    @Override
-    public String sourceRef() {
-        return "merge-requests/" + id() + "/head";
-    }
-
-    @Override
-    public String targetRef() {
-        return json.get("target_branch").asString();
-    }
-
-    @Override
-    public Hash targetHash() {
-        return repository.branchHash(targetRef());
-    }
-
-    @Override
-    public String title() {
-        return json.get("title").asString();
-    }
-
-    @Override
-    public void setTitle(String title) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public String body() {
-        var body = json.get("description").asString();
-        if (body == null) {
-            body = "";
-        }
-        return body;
-    }
-
-    @Override
-    public void setBody(String body) {
-        request.put("")
-               .body("description", body)
-               .execute();
-    }
-
-    private Comment parseComment(JSONValue comment) {
-        var ret = new Comment(comment.get("id").toString(),
-                              comment.get("body").asString(),
-                              new HostUser(comment.get("author").get("id").asInt(),
-                                           comment.get("author").get("username").asString(),
-                                           comment.get("author").get("name").asString()),
-                              ZonedDateTime.parse(comment.get("created_at").asString()),
-                              ZonedDateTime.parse(comment.get("updated_at").asString()));
-        return ret;
-    }
-
-    @Override
-    public List<Comment> comments() {
-        return request.get("notes").param("sort", "asc").execute().stream()
-                      .filter(entry -> !entry.contains("position")) // Ignore comments with a position - they are review comments
-                      .filter(entry -> !entry.get("system").asBoolean()) // Ignore system generated comments
-                .map(this::parseComment)
-                .collect(Collectors.toList());
-    }
-
-    @Override
-    public Comment addComment(String body) {
-        log.fine("Posting a new comment");
-        var comment = request.post("notes")
-                             .body("body", body)
-                             .execute();
-        var parsedComment = parseComment(comment);
-        log.fine("Id of new comment: " + parsedComment.id());
-        return parsedComment;
-    }
-
-    @Override
-    public Comment updateComment(String id, String body) {
-        log.fine("Updating existing comment " + id);
-        var comment = request.put("notes/" + id)
-                             .body("body", body)
-                             .execute();
-        var parsedComment = parseComment(comment);
-        log.fine("Id of updated comment: " + parsedComment.id());
-        return parsedComment;
-    }
-
-    @Override
-    public ZonedDateTime createdAt() {
-        return ZonedDateTime.parse(json.get("created_at").asString());
-    }
-
-    @Override
-    public ZonedDateTime updatedAt() {
-        return ZonedDateTime.parse(json.get("updated_at").asString());
-    }
-
-    private final String checkMarker = "<!-- Merge request status check message (%s) -->";
-    private final String checkResultMarker = "<!-- Merge request status check result (%s) (%s) (%s) (%s) -->";
-    private final String checkResultPattern = "<!-- Merge request status check result \\(([-\\w]+)\\) \\((\\w+)\\) \\(%s\\) \\((\\S+)\\) -->";
-
-    private Optional<Comment> getStatusCheckComment(String name) {
-        var marker = String.format(checkMarker, name);
-
-        return comments().stream()
-                         .filter(c -> c.body().contains(marker))
-                         .findFirst();
-    }
-
-    private String encodeMarkdown(String message) {
-        return message.replaceAll("\n", "  \n");
-    }
-
-    private final Pattern checkBodyPattern = Pattern.compile("^##### ([^\\n\\r]*)\\R(.*)",
-                                                             Pattern.DOTALL | Pattern.MULTILINE);
-
-    @Override
-    public Map<String, Check> checks(Hash hash) {
-        var pattern = Pattern.compile(String.format(checkResultPattern, hash.hex()));
-        var matchers = comments().stream()
-                                 .collect(Collectors.toMap(comment -> comment,
-                        comment -> pattern.matcher(comment.body())));
-
-        return matchers.entrySet().stream()
-                .filter(entry -> entry.getValue().find())
-                .collect(Collectors.toMap(entry -> entry.getValue().group(1),
-                        entry -> {
-                            var checkBuilder = CheckBuilder.create(entry.getValue().group(1), hash);
-                            checkBuilder.startedAt(entry.getKey().createdAt());
-                            var status = entry.getValue().group(2);
-                            var completedAt = entry.getKey().updatedAt();
-                            switch (status) {
-                                case "RUNNING":
-                                    // do nothing
-                                    break;
-                                case "SUCCESS":
-                                    checkBuilder.complete(true, completedAt);
-                                    break;
-                                case "FAILURE":
-                                    checkBuilder.complete(false, completedAt);
-                                    break;
-                                case "CANCELLED":
-                                    checkBuilder.cancel(completedAt);
-                                    break;
-                                default:
-                                    throw new IllegalStateException("Unknown status: " + status);
-                            }
-                            if (!entry.getValue().group(3).equals("NONE")) {
-                                checkBuilder.metadata(new String(Base64.getDecoder().decode(entry.getValue().group(3)), StandardCharsets.UTF_8));
-                            }
-                            var checkBodyMatcher = checkBodyPattern.matcher(entry.getKey().body());
-                            if (checkBodyMatcher.find()) {
-                                // escapeMarkdown adds an additional space before the newline
-                                var title = checkBodyMatcher.group(1);
-                                var nonEscapedTitle = title.substring(0, title.length() - 2);
-                                checkBuilder.title(nonEscapedTitle);
-                                checkBuilder.summary(checkBodyMatcher.group(2));
-                            }
-                            return checkBuilder.build();
-                        }));
-    }
-
-    private String statusFor(Check check) {
-        switch (check.status()) {
-            case IN_PROGRESS:
-                return "RUNNING";
-            case SUCCESS:
-                return "SUCCESS";
-            case FAILURE:
-                return "FAILURE";
-            case CANCELLED:
-                return "CANCELLED";
-            default:
-                throw new RuntimeException("Unknown check status");
-        }
-    }
-
-    private String metadataFor(Check check) {
-        if (check.metadata().isPresent()) {
-            return Base64.getEncoder().encodeToString(check.metadata().get().getBytes(StandardCharsets.UTF_8));
-        }
-        return "NONE";
-    }
-
-    private String linkToDiff(String path, Hash hash, int line) {
-        return "[" + path + " line " + line + "](" + URIBuilder.base(repository.url())
-                         .setPath("/" + repository.name()+ "/blob/" + hash.hex() + "/" + path)
-                         .setAuthentication(null)
-                         .build() + "#L" + Integer.toString(line) + ")";
-    }
-
-    private String bodyFor(Check check) {
-        var status = check.status();
-        String body;
-        switch (status) {
-            case IN_PROGRESS:
-                body = ":hourglass_flowing_sand: The merge request check **" + check.name() + "** is currently running...";
-                break;
-            case SUCCESS:
-                body = ":tada: The merge request check **" + check.name() + "** completed successfully!";
-                break;
-            case FAILURE:
-                body = ":warning: The merge request check **" + check.name() + "** identified the following issues:";
-                break;
-            case CANCELLED:
-                body = ":x: The merge request check **" + check.name() + "** has been cancelled.";
-                break;
-            default:
-                throw new RuntimeException("Unknown check status");
-        }
-
-        if ( check.title().isPresent() && check.summary().isPresent()) {
-            body += encodeMarkdown("\n" + "##### " + check.title().get() + "\n" + check.summary().get());
-
-            for (var annotation : check.annotations()) {
-                var annotationString = "  - ";
-                switch (annotation.level()) {
-                    case NOTICE:
-                        annotationString += "Notice: ";
-                        break;
-                    case WARNING:
-                        annotationString += "Warning: ";
-                        break;
-                    case FAILURE:
-                        annotationString += "Failure: ";
-                        break;
-                }
-                annotationString += linkToDiff(annotation.path(), check.hash(), annotation.startLine());
-                annotationString += "\n    - " + annotation.message().lines().collect(Collectors.joining("\n    - "));
-
-                body += "\n" + annotationString;
-            }
-        }
-
-        return body;
-    }
-
-    private void updateCheckComment(Optional<Comment> previous, Check check) {
-        var status = statusFor(check);
-        var metadata = metadataFor(check);
-        var markers = String.format(checkMarker, check.name()) + "\n" +
-                      String.format(checkResultMarker,
-                                    check.name(),
-                                    status,
-                                    check.hash(),
-                                    metadata);
-
-        var body = bodyFor(check);
-        var message = markers + "\n" + body;
-        previous.ifPresentOrElse(
-                p  -> updateComment(p.id(), message),
-                () -> addComment(message));
-    }
-
-    @Override
-    public void createCheck(Check check) {
-        log.info("Looking for previous status check comment");
-
-        var previous = getStatusCheckComment(check.name());
-        updateCheckComment(previous, check);
-    }
-
-    @Override
-    public void updateCheck(Check check) {
-        log.info("Looking for previous status check comment");
-
-        var previous = getStatusCheckComment(check.name())
-                .orElseGet(() -> addComment("Progress deleted?"));
-        updateCheckComment(Optional.of(previous), check);
-    }
-
-    @Override
-    public URI changeUrl() {
-        return URIBuilder.base(webUrl()).appendPath("/diffs").build();
-    }
-
-    @Override
-    public URI changeUrl(Hash base) {
-        return URIBuilder.base(webUrl()).appendPath("/diffs")
-                         .setQuery(Map.of("start_sha", base.hex()))
-                         .build();
-    }
-
-    @Override
-    public boolean isDraft() {
-        return json.get("work_in_progress").asBoolean();
-    }
-
-
-    @Override
-    public void setState(State state) {
-        request.put("")
-               .body("state_event", state == State.CLOSED ? "close" : "reopen")
-               .execute();
-    }
-
-    @Override
-    public void addLabel(String label) {
-        // GitLab does not allow adding/removing single labels, only setting the full list
-        // We retrieve the list again here to try to minimize the race condition window
-        var currentJson = request.get("").execute().asObject();
-        var labels = Stream.concat(currentJson.get("labels").stream()
-                .map(JSONValue::asString),
-                List.of(label).stream())
-                .collect(Collectors.toSet());
-        request.put("")
-               .body("labels", String.join(",", labels))
-               .execute();
-    }
-
-    @Override
-    public void removeLabel(String label) {
-        var currentJson = request.get("").execute().asObject();
-        var labels = currentJson.get("labels").stream()
-                .map(JSONValue::asString)
-                .filter(l -> !l.equals(label))
-                .collect(Collectors.toSet());
-        request.put("")
-               .body("labels", String.join(",", labels))
-               .execute();
-    }
-
-    @Override
-    public List<String> labels() {
-        var currentJson = request.get("").execute().asObject();
-        return currentJson.get("labels").stream()
-                .map(JSONValue::asString)
-                .sorted()
-                .collect(Collectors.toList());
-    }
-
-    @Override
-    public URI webUrl() {
-        return URIBuilder.base(repository.webUrl())
-                         .setPath("/" + repository.name() + "/merge_requests/" + id())
-                         .build();
-    }
-
-    @Override
-    public String toString() {
-        return "GitLabMergeRequest #" + id() + " by " + author();
-    }
-
-    @Override
-    public List<HostUser> assignees() {
-        var assignee = json.get("assignee").asObject();
-        if (assignee != null) {
-            var user = repository.host().user(assignee.get("username").asString());
-            return List.of(user);
-        }
-        return Collections.emptyList();
-    }
-
-    @Override
-    public void setAssignees(List<HostUser> assignees) {
-        var id = assignees.size() == 0 ? 0 : Integer.valueOf(assignees.get(0).id());
-        var param = JSON.object().put("assignee_id", id);
-        request.put().body(param).execute();
-        if (assignees.size() > 1) {
-            var rest = assignees.subList(1, assignees.size());
-            var usernames = rest.stream()
-                                .map(HostUser::userName)
-                                .map(username -> "@" + username)
-                                .collect(Collectors.joining(" "));
-            var comment = usernames + " can you have a look at this merge request?";
-            addComment(comment);
-        }
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java
+++ /dev/null
@@ -1,266 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host.gitlab;
-
-import org.openjdk.skara.host.*;
-import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.*;
-import org.openjdk.skara.vcs.*;
-
-import java.net.*;
-import java.nio.charset.StandardCharsets;
-import java.time.Duration;
-import java.util.*;
-import java.util.regex.Pattern;
-import java.util.stream.Collectors;
-
-public class GitLabRepository implements HostedRepository {
-    private final GitLabHost gitLabHost;
-    private final String projectName;
-    private final RestRequest request;
-    private final JSONValue json;
-    private final Pattern mergeRequestPattern;
-
-    public GitLabRepository(GitLabHost gitLabHost, String projectName) {
-        this.gitLabHost = gitLabHost;
-        json = gitLabHost.getProjectInfo(projectName);
-        this.projectName = json.get("path_with_namespace").asString();
-
-        var id = json.get("id").asInt();
-        var baseApi = URIBuilder.base(gitLabHost.getUri())
-                .setPath("/api/v4/projects/" + id + "/")
-                .build();
-
-        request = gitLabHost.getPat()
-                            .map(pat -> new RestRequest(baseApi, () -> Arrays.asList("Private-Token", pat.token())))
-                            .orElseGet(() -> new RestRequest(baseApi));
-
-        var urlPattern = URIBuilder.base(gitLabHost.getUri())
-                                   .setPath("/" + projectName + "/merge_requests/").build();
-        mergeRequestPattern = Pattern.compile(urlPattern.toString() + "(\\d+)");
-    }
-
-    @Override
-    public RepositoryHost host() {
-        return gitLabHost;
-    }
-
-    @Override
-    public Issue createIssue(String title, List<String> body) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public Optional<Issue> issue(String id) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public List<Issue> issues() {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public Optional<HostedRepository> parent() {
-        if (json.contains("forked_from_project")) {
-            var parent = json.get("forked_from_project").get("path_with_namespace").asString();
-            return Optional.of(new GitLabRepository(gitLabHost, parent));
-        }
-        return Optional.empty();
-    }
-
-    @Override
-    public PullRequest createPullRequest(HostedRepository target,
-                                         String targetRef,
-                                         String sourceRef,
-                                         String title,
-                                         List<String> body,
-                                         boolean draft) {
-        if (!(target instanceof GitLabRepository)) {
-            throw new IllegalArgumentException("target must be a GitLab repository");
-        }
-
-        var pr = request.post("merge_requests")
-                        .body("source_branch", sourceRef)
-                        .body("target_branch", targetRef)
-                        .body("title", draft ? "WIP: " : "" + title)
-                        .body("description", String.join("\n", body))
-                        .body("target_project_id", Long.toString(target.id()))
-                        .execute();
-
-        var targetRepo = (GitLabRepository) target;
-        return new GitLabMergeRequest(targetRepo, pr, targetRepo.request);
-    }
-
-    @Override
-    public PullRequest pullRequest(String id) {
-        var pr = request.get("merge_requests/" + id).execute();
-        return new GitLabMergeRequest(this, pr, request);
-    }
-
-    @Override
-    public List<PullRequest> pullRequests() {
-        return request.get("merge_requests")
-                      .param("state", "opened")
-                      .execute().stream()
-                      .map(value -> new GitLabMergeRequest(this, value, request))
-                      .collect(Collectors.toList());
-    }
-
-    @Override
-    public List<PullRequest> findPullRequestsWithComment(String author, String body) {
-        throw new RuntimeException("not implemented yet");
-    }
-
-    @Override
-    public Optional<PullRequest> parsePullRequestUrl(String url) {
-        var matcher = mergeRequestPattern.matcher(url);
-        if (matcher.find()) {
-            return Optional.of(pullRequest(matcher.group(1)));
-        } else {
-            return Optional.empty();
-        }
-    }
-
-    @Override
-    public String name() {
-        return projectName;
-    }
-
-    @Override
-    public URI url() {
-        var builder = URIBuilder
-                .base(gitLabHost.getUri())
-                .setPath("/" + projectName + ".git");
-        gitLabHost.getPat().ifPresent(pat -> builder.setAuthentication(pat.userName() + ":" + pat.token()));
-        return builder.build();
-    }
-
-    @Override
-    public URI webUrl() {
-        return URIBuilder.base(gitLabHost.getUri())
-                         .setPath("/" + projectName)
-                         .build();
-    }
-
-    @Override
-    public URI webUrl(Hash hash) {
-        return URIBuilder.base(gitLabHost.getUri())
-                         .setPath("/" + projectName + "/commit/" + hash.abbreviate())
-                         .build();
-    }
-
-    @Override
-    public VCS repositoryType() {
-        return VCS.GIT;
-    }
-
-    @Override
-    public String fileContents(String filename, String ref) {
-        var confName = URLEncoder.encode(filename, StandardCharsets.UTF_8);
-        var conf = request.get("repository/files/" + confName)
-                          .param("ref", ref)
-                          .onError(response -> {
-                              // Retry once with additional escaping of the path fragment
-                              var escapedConfName = URLEncoder.encode(confName, StandardCharsets.UTF_8);
-                              return request.get("repository/files/" + escapedConfName)
-                                            .param("ref", ref).execute();
-                          })
-                          .execute();
-        var content = Base64.getDecoder().decode(conf.get("content").asString());
-        return new String(content, StandardCharsets.UTF_8);
-    }
-
-    @Override
-    public String namespace() {
-        return URIBuilder.base(gitLabHost.getUri()).build().getHost();
-    }
-
-    @Override
-    public Optional<WebHook> parseWebHook(JSONValue body) {
-        if (!body.contains("object_kind")) {
-            return Optional.empty();
-        }
-        if (!body.contains("project") || !body.get("project").contains("path_with_namespace")) {
-            return Optional.empty();
-        }
-        if (!body.get("project").get("path_with_namespace").asString().equals(projectName)) {
-            return Optional.empty();
-        }
-
-        int id = -1;
-
-        if (body.get("object_kind").asString().equals("merge_request")) {
-            if (!body.contains("object_attributes") || !body.get("object_attributes").contains("iid")) {
-                return Optional.empty();
-            }
-            id = body.get("object_attributes").get("iid").asInt();
-        }
-
-        if (body.contains("merge_request")) {
-            if (!body.get("merge_request").contains("iid")) {
-                return Optional.empty();
-            }
-            id = body.get("merge_request").get("iid").asInt();
-        }
-
-        if (id != -1) {
-            var pr = pullRequest(Integer.toString(id));
-            var webHook = new WebHook(List.of(pr));
-            return Optional.of(webHook);
-        } else {
-            return Optional.empty();
-        }
-    }
-
-    @Override
-    public HostedRepository fork() {
-        var namespace = gitLabHost.currentUser().userName();
-        request.post("fork")
-               .body("namespace", namespace)
-               .onError(r -> r.statusCode() == 409 ? JSON.object().put("exists", true) : null)
-               .execute();
-        var nameOnlyStart = projectName.lastIndexOf('/');
-        var nameOnly = nameOnlyStart >= 0 ? projectName.substring(nameOnlyStart + 1) : projectName;
-        var forkedRepoName = namespace + "/" + nameOnly;
-        while (!gitLabHost.isProjectForkComplete(forkedRepoName)) {
-            try {
-                Thread.sleep(Duration.ofSeconds(1).toMillis());
-            } catch (InterruptedException e) {
-                e.printStackTrace();
-            }
-        }
-        return gitLabHost.repository(forkedRepoName);
-    }
-
-    @Override
-    public long id() {
-        return json.get("id").asLong();
-    }
-
-    @Override
-    public Hash branchHash(String ref) {
-        var branch = request.get("repository/branches/" + ref).execute();
-        return new Hash(branch.get("commit").get("id").asString());
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/jira/JiraHost.java b/host/src/main/java/org/openjdk/skara/host/jira/JiraHost.java
--- a/host/src/main/java/org/openjdk/skara/host/jira/JiraHost.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host.jira;
-
-import org.openjdk.skara.host.*;
-import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.JSON;
-
-import java.net.URI;
-
-public class JiraHost implements IssueHost {
-    private final URI uri;
-    private final RestRequest request;
-
-    public JiraHost(URI uri) {
-        this.uri = uri;
-
-        var baseApi = URIBuilder.base(uri)
-                                .setPath("/rest/api/2/")
-                                .build();
-        request = new RestRequest(baseApi);
-    }
-
-    URI getUri() {
-        return uri;
-    }
-
-    @Override
-    public boolean isValid() {
-        var version = request.get("serverInfo")
-                             .onError(r -> JSON.object().put("invalid", true))
-                             .execute();
-        return !version.contains("invalid");
-    }
-
-    @Override
-    public IssueProject project(String name) {
-        return new JiraProject(this, request, name);
-    }
-
-    @Override
-    public HostUser user(String username) {
-        throw new RuntimeException("needs authentication; not implemented yet");
-    }
-
-    @Override
-    public HostUser currentUser() {
-        throw new RuntimeException("needs authentication; not implemented yet");
-    }
-
-    @Override
-    public boolean isMemberOf(String groupId, HostUser user) {
-        throw new RuntimeException("not implemented yet");
-    }
-}
diff a/host/src/main/java/org/openjdk/skara/host/jira/JiraProject.java b/host/src/main/java/org/openjdk/skara/host/jira/JiraProject.java
--- a/host/src/main/java/org/openjdk/skara/host/jira/JiraProject.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host.jira;
-
-import org.openjdk.skara.host.*;
-import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.JSON;
-
-import java.net.URI;
-import java.util.*;
-
-public class JiraProject implements IssueProject {
-    private final JiraHost jiraHost;
-    private final String projectName;
-    private final RestRequest request;
-
-    JiraProject(JiraHost host, RestRequest request, String projectName) {
-        this.jiraHost = host;
-        this.projectName = projectName;
-        this.request = request;
-    }
-
-    @Override
-    public Host host() {
-        return jiraHost;
-    }
-
-    @Override
-    public URI webUrl() {
-        return URIBuilder.base(jiraHost.getUri()).setPath("/projects/" + projectName).build();
-    }
-
-    @Override
-    public Issue createIssue(String title, List<String> body) {
-        throw new RuntimeException("needs authentication; not implemented yet");
-    }
-
-    @Override
-    public Optional<Issue> issue(String id) {
-        if (id.indexOf('-') < 0) {
-            id = projectName.toUpperCase() + "-" + id;
-        }
-        var issue = request.get("issue/" + id)
-                           .onError(r -> r.statusCode() == 404 ? JSON.object().put("NOT_FOUND", true) : null)
-                           .execute();
-        if (!issue.contains("NOT_FOUND")) {
-            return Optional.of(new JiraIssue(this, request, issue));
-        } else {
-            return Optional.empty();
-        }
-    }
-
-    @Override
-    public List<Issue> issues() {
-        var ret = new ArrayList<Issue>();
-        var issues = request.post("search")
-                            .body("jql", "project = " + projectName + " AND status in (Open, New)")
-                            .execute();
-        for (var issue : issues.get("issues").asArray()) {
-            ret.add(new JiraIssue(this, request, issue));
-        }
-        return ret;
-    }
-}
diff a/host/src/test/java/org/openjdk/skara/host/CheckBuilderTests.java b/host/src/test/java/org/openjdk/skara/host/CheckBuilderTests.java
--- a/host/src/test/java/org/openjdk/skara/host/CheckBuilderTests.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import org.openjdk.skara.vcs.Hash;
-
-import java.time.ZonedDateTime;
-import java.util.List;
-
-import org.junit.jupiter.api.Test;
-import static org.junit.jupiter.api.Assertions.*;
-
-class CheckBuilderTests {
-    @Test
-    void testFrom() {
-        var hash = new Hash("0".repeat(40));
-        var name = "test";
-        var title = "title";
-        var summary = "summary";
-        var metadata = "metadata";
-        var annotation = CheckAnnotationBuilder.create("README", 0, 1, CheckAnnotationLevel.NOTICE, "Message")
-                                               .build();
-        var startedAt = ZonedDateTime.now();
-        var completedAt = ZonedDateTime.now();
-        var success = true;
-
-        var existing = CheckBuilder.create(name, hash)
-                                   .title(title)
-                                   .summary(summary)
-                                   .metadata(metadata)
-                                   .annotation(annotation)
-                                   .startedAt(startedAt)
-                                   .complete(success, completedAt)
-                                   .build();
-        var dup = CheckBuilder.from(existing)
-                              .build();
-
-        assertEquals(existing.name(), dup.name());
-        assertEquals(existing.hash(), dup.hash());
-        assertEquals(existing.status(), dup.status());
-        assertEquals(existing.startedAt(), dup.startedAt());
-        assertEquals(existing.completedAt(), dup.completedAt());
-        assertEquals(existing.title(), dup.title());
-        assertEquals(existing.summary(), dup.summary());
-        assertEquals(existing.metadata(), dup.metadata());
-        assertEquals(existing.annotations(), dup.annotations());
-
-        var newTitle = "new title";
-        var newSummary = "new summary";
-        var newMetadata = "new metadata";
-        var newAnnotation = CheckAnnotationBuilder.create("FILE", 0, 1, CheckAnnotationLevel.NOTICE, "Message")
-                                                  .build();
-        var newStartedAt = ZonedDateTime.now();
-        var newCompletedAt = ZonedDateTime.now();
-        var newSuccess = false;
-
-        var modified = CheckBuilder.from(existing)
-                                   .title(newTitle)
-                                   .summary(newSummary)
-                                   .metadata(newMetadata)
-                                   .annotation(newAnnotation)
-                                   .startedAt(newStartedAt)
-                                   .complete(newSuccess, newCompletedAt)
-                                   .build();
-
-        // existing check should not have changed
-        assertEquals(dup.name(), existing.name());
-        assertEquals(dup.hash(), existing.hash());
-        assertEquals(dup.status(), existing.status());
-        assertEquals(dup.startedAt(), existing.startedAt());
-        assertEquals(dup.completedAt(), existing.completedAt());
-        assertEquals(dup.title(), existing.title());
-        assertEquals(dup.summary(), existing.summary());
-        assertEquals(dup.metadata(), existing.metadata());
-        assertEquals(dup.annotations(), existing.annotations());
-
-        // modified should have new values except name and hash and inherit annotations
-        assertEquals(existing.name(), modified.name());
-        assertEquals(existing.hash(), modified.hash());
-        assertEquals(newStartedAt, modified.startedAt());
-        assertEquals(newCompletedAt, modified.completedAt().get());
-        assertEquals(newTitle, modified.title().get());
-        assertEquals(newSummary, modified.summary().get());
-        assertEquals(newMetadata, modified.metadata().get());
-        assertEquals(List.of(annotation, newAnnotation), modified.annotations());
-    }
-}
diff a/host/src/test/java/org/openjdk/skara/host/HostTests.java b/host/src/test/java/org/openjdk/skara/host/HostTests.java
--- a/host/src/test/java/org/openjdk/skara/host/HostTests.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host;
-
-import java.io.IOException;
-
-import org.openjdk.skara.test.HostCredentials;
-
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.TestInfo;
-import static org.junit.jupiter.api.Assertions.assertFalse;
-
-public class HostTests {
-    @Test
-    public void isMemberOfNegativeTests(TestInfo info) throws IOException {
-        try (var credentials = new HostCredentials(info)) {
-            var host = credentials.getHostedRepository().host();
-            var madeUpGroupIdThatCannotContainTestMember = "1234567890";
-            assertFalse(host.isMemberOf(madeUpGroupIdThatCannotContainTestMember, host.currentUser()));
-        }
-    }
-}
diff a/host/src/test/java/org/openjdk/skara/host/github/GitHubApplicationTests.java b/host/src/test/java/org/openjdk/skara/host/github/GitHubApplicationTests.java
--- a/host/src/test/java/org/openjdk/skara/host/github/GitHubApplicationTests.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host.github;
-
-import org.junit.jupiter.api.Test;
-
-import java.time.Duration;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-public class GitHubApplicationTests {
-
-    @Test
-    public void tokenSetSimple() {
-        Token t = new Token(() -> "a", Duration.ofHours(1));
-        assertEquals("a", t.toString());
-    }
-
-    private final String[] sequence = {"a", "b", "c"};
-    private int sequenceIndex = 0;
-    private String sequenceGenerator() {
-        return sequence[sequenceIndex++];
-    }
-
-    @Test
-    public void tokenCache() {
-        sequenceIndex = 0;
-        Token t = new Token(this::sequenceGenerator, Duration.ofHours(1));
-        assertEquals("a", t.toString());
-        assertEquals("a", t.toString());
-    }
-
-    @Test
-    public void tokenExpiration() {
-        sequenceIndex = 0;
-        Token t = new Token(this::sequenceGenerator, Duration.ZERO);
-        assertEquals("a", t.toString());
-        assertEquals("b", t.toString());
-    }
-
-    private String badGenerator() throws Token.GeneratorError {
-        throw new Token.GeneratorError("error");
-    }
-
-    @Test
-    public void tokenGeneratorError() {
-        Token t = new Token(this::badGenerator, Duration.ZERO);
-        assertThrows(GitHubApplicationError.class, () -> t.toString());
-    }
-
-}
diff a/host/src/test/java/org/openjdk/skara/host/github/GitHubHostTests.java b/host/src/test/java/org/openjdk/skara/host/github/GitHubHostTests.java
--- a/host/src/test/java/org/openjdk/skara/host/github/GitHubHostTests.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.host.github;
-
-import org.openjdk.skara.network.URIBuilder;
-import org.openjdk.skara.test.TemporaryDirectory;
-
-import org.junit.jupiter.api.Test;
-
-import java.io.IOException;
-import java.net.*;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.*;
-import java.util.regex.Pattern;
-
-import static org.junit.jupiter.api.Assertions.assertEquals;
-
-public class GitHubHostTests {
-    private void generateKeyfile(Path path) throws IOException {
-        // This key was randomly generated for this test only
-        Files.writeString(path, "-----BEGIN PRIVATE KEY-----\n" +
-                "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDAFzH+URXAvOoL\n" +
-                "0NSdIePQTTVsan13c+7D9tAilJAtRcxUjOz2lMZYBzrdsVYGbktfseEvF6o9dyoX\n" +
-                "X/py6DM0QqBNW/0uEv1ouS44po0VvykHVXrAq0u8E8HHFtr09VQSO/ceXrFd6haQ\n" +
-                "aCckbdp1TPn1q8w+U2bRkqUji7zzfwll6AaB4dhKZ1v5NFuff1PWmuk2x7b0u2yR\n" +
-                "uANLHLqmNB4ik7bUTiIyacXeVSZRZRFGwJjd+1WnyiybwV6QbQ0nndw6iaz2wGWt\n" +
-                "XDif7DJE0axMReUZVKJLqMagS5R5ra6FdlnUPw0nbJMwnDOLk9ofSfne0LTSTD6K\n" +
-                "/VZ26izbAgMBAAECggEBALF0vDq1reLgo1dHFSQUquFEcpY1yrMP5wQifyVzGb65\n" +
-                "PIrfpgomZxXrl/Y2XcKTIg7FxcI7moouDDSL9lMxMByXcIAG+14VLQYSDSFIvA3b\n" +
-                "C4w666wSk2Ss29eQxbaG7aPqweDMmg6osy+1CHQfCDJVapYKoCTz54i0cNrlvSk0\n" +
-                "FZ3o99uAvAcLtrsqbnXO57NXQVajoSH0bkMZd+TuZqEIX3CzHoNEVhzvqaKedqA6\n" +
-                "Cd22Y2m6cnW0H10Chko05FtskLYD+jw275LiUtInplBtG3n5/uDIamsOPo9XG8i0\n" +
-                "a4rxaJYsRqXYqDOEjLi/QCUrYBtJ+gqT/qMOTjAoKAECgYEA/VPdvc03vScjIu4T\n" +
-                "vNXjXxv81HZPm/IoTYTgvTvrEqErQ/CIwTQJer1XUJ9M43n+XkVZsMKkUIMlwt2+\n" +
-                "G0wBwYkDUgIXFEJhb170BVgwyZHE+Djr0E7NunbAv/oQu8AfQzk5HZpcQwxVg8w8\n" +
-                "Vj2ecLb4GK0D9iJ4zLwlsRw2RukCgYEAwh30AG7gq5y9Mj/BusuDvyNZZKjE/pJz\n" +
-                "HtC7a/OzOyr+Bpr2VBxVDeEFth22bd/a4ohv1QcwNAa2LzelNfQRQURq/vqpDmuj\n" +
-                "g0ESQavh3i3Tax2LXO582HWueuNL+8Ufyb6WDJDvYuz0F3WBJhxixP3I7VgMhPWV\n" +
-                "tK/wEEDDwyMCgYEArR3M4NIHDzpZppsv3dIE6ZAEvWSEjrtzk1YFBwyVXkvJd0o/\n" +
-                "Clj3SWtu6eeS8bkCfYXC/ypkg6i7+2jxa1ILuShanoZTI0Mhtqwa8jQMUxNMmZy8\n" +
-                "ecQAjzZsDkVjfgqS0quePn6oIiGhpsnBSeYeCkTfUm2Z0XBJQRAqadgvt1ECgYBK\n" +
-                "FAgzyhxvIUeKT45s7JGAdcr9gPJ8fAL2tY1wqvWxFL0QZD6w5ocG3uLBFyGxWIY9\n" +
-                "gPe8ghvBHvaTmlav+k5DbAqw95Ngb29c/Y4sBZ4SncZa0FGIy3JVYMOPHgK3OAjj\n" +
-                "gpncfcr9I5QbB7qbgqWmq3rsKHfOnbHd3G5upWiPpQKBgCaPW2vyT/nfCvfh0z//\n" +
-                "QSv0//4zy7pDdOolP5ZRsUo5cU4aiv4XgTSglR2jEJyr4bMYCN/+4tnqp0tIUzt1\n" +
-                "RWJhXLU1dm4QhCTccWMAyQgktn3SB5Ww3+qyLr1klUwkO+rx8kkNjv3rC/u5EzQ9\n" +
-                "q3DJ9in4wyYBNPVDB5kJom5i\n" +
-                "-----END PRIVATE KEY-----", StandardCharsets.UTF_8);
-    }
-
-    @Test
-    void webUriPatternReplacement() throws IOException, URISyntaxException {
-        try (var tempFolder = new TemporaryDirectory()) {
-            var key = tempFolder.path().resolve("key.pem");
-            generateKeyfile(key);
-            var app = new GitHubApplication(key.toString(), "y", "z");
-            var host = new GitHubHost(URIBuilder.base("http://www.example.com").build(),
-                                      app, Pattern.compile("^(http://www.example.com)/test/(.*)$"), "$1/another/$2");
-            assertEquals(new URI("http://www.example.com/another/hello"), host.getWebURI("/test/hello"));
-        }
-    }
-}
diff a/issuetracker/build.gradle b/issuetracker/build.gradle
--- /dev/null
+++ b/issuetracker/build.gradle
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+module {
+    name = 'org.openjdk.skara.issuetracker'
+    test {
+        requires 'org.openjdk.skara.test'
+        requires 'org.junit.jupiter.api'
+        requires 'jdk.httpserver'
+        opens 'org.openjdk.skara.issuetracker' to 'org.junit.platform.commons'
+    }
+}
+
+dependencies {
+    implementation project(':vcs')
+    implementation project(':census')
+    implementation project(':json')
+    implementation project(':ini')
+    implementation project(':process')
+    implementation project(':email')
+    implementation project(':network')
+    implementation project(':host')
+
+    testImplementation project(':test')
+}
+
+publishing {
+    publications {
+        issuetracker(MavenPublication) {
+            from components.java
+        }
+    }
+}
diff a/issuetracker/src/main/java/module-info.java b/issuetracker/src/main/java/module-info.java
--- /dev/null
+++ b/issuetracker/src/main/java/module-info.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+module org.openjdk.skara.issuetracker {
+    requires org.openjdk.skara.vcs;
+    requires org.openjdk.skara.census;
+    requires org.openjdk.skara.json;
+    requires org.openjdk.skara.ini;
+    requires org.openjdk.skara.process;
+    requires org.openjdk.skara.email;
+    requires org.openjdk.skara.network;
+    requires transitive org.openjdk.skara.host;
+    requires java.net.http;
+    requires java.logging;
+
+    exports org.openjdk.skara.issuetracker;
+}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Comment.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Comment.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Comment.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker;
+
+import org.openjdk.skara.host.HostUser;
+
+import java.time.ZonedDateTime;
+
+public class Comment {
+
+    private final String id;
+    private final String body;
+    private final HostUser author;
+    private final ZonedDateTime createdAt;
+    private final ZonedDateTime updatedAt;
+
+    public Comment(String id, String body, HostUser author, ZonedDateTime createdAt, ZonedDateTime updatedAt) {
+        this.id = id;
+        this.body = body;
+        this.author = author;
+        this.createdAt = createdAt;
+        this.updatedAt = updatedAt;
+    }
+
+    public String id() {
+        return id;
+    }
+
+    public String body() {
+        return body;
+    }
+
+    public HostUser author() {
+        return author;
+    }
+
+    public ZonedDateTime createdAt() {
+        return createdAt;
+    }
+
+    public ZonedDateTime updatedAt() {
+        return updatedAt;
+    }
+}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
@@ -0,0 +1,149 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker;
+
+import org.openjdk.skara.host.HostUser;
+
+import java.net.URI;
+import java.time.ZonedDateTime;
+import java.util.List;
+
+public interface Issue {
+    /**
+     * Project containing the issue.
+     * @return
+     */
+    IssueProject project();
+
+    /**
+     * The repository-specific identifier.
+     * @return
+     */
+    String id();
+
+    /**
+     * The host-specific author name.
+     * @return
+     */
+    HostUser author();
+
+    /**
+     * Title of the request.
+     * @return
+     */
+    String title();
+
+    /**
+     * Update the title of the request.
+     * @param title
+     */
+    void setTitle(String title);
+
+    /**
+     * The main body of the request.
+     * @return
+     */
+    String body();
+
+    /**
+     * Update the main body of the request.
+     * @param body
+     */
+    void setBody(String body);
+
+    /**
+     * All comments on the issue, in ascending creation time order.
+     * @return
+     */
+    List<Comment> comments();
+
+    /**
+     * Posts a new comment.
+     * @param body
+     */
+    Comment addComment(String body);
+
+    /**
+     * Updates an existing comment.
+     * @param id
+     * @param body
+     */
+    Comment updateComment(String id, String body);
+
+    /**
+     * When the request was created.
+     * @return
+     */
+    ZonedDateTime createdAt();
+
+    /**
+     * When the request was last updated.
+     * @return
+     */
+    ZonedDateTime updatedAt();
+
+    enum State {
+        OPEN,
+        CLOSED
+    }
+
+    /**
+     * Set the state.
+     * @param state Desired state
+     */
+    void setState(State state);
+
+    /**
+     * Adds the given label.
+     * @param label
+     */
+    void addLabel(String label);
+
+    /**
+     * Removes the given label.
+     * @param label
+     */
+    void removeLabel(String label);
+
+    /**
+     * Retrieves all the currently set labels.
+     * @return
+     */
+    List<String> labels();
+
+    /**
+     * Returns a link that will lead to the issue.
+     */
+    URI webUrl();
+
+    /**
+     * Returns all usernames assigned to the issue.
+     */
+    List<HostUser> assignees();
+
+    /**
+     * Update the list of assignees.
+     * @param assignees
+     */
+    void setAssignees(List<HostUser> assignees);
+}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker;
+
+import java.net.URI;
+import java.util.*;
+
+public interface IssueProject {
+    IssueTracker issueTracker();
+    URI webUrl();
+    Issue createIssue(String title, List<String> body);
+    Optional<Issue> issue(String id);
+    List<Issue> issues();
+}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTracker.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTracker.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTracker.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker;
+
+import org.openjdk.skara.host.Host;
+
+public interface IssueTracker extends Host {
+    IssueProject project(String name);
+}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTrackerFactory.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTrackerFactory.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueTrackerFactory.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker;
+
+import org.openjdk.skara.host.*;
+
+import java.net.URI;
+
+public class IssueTrackerFactory {
+    public static IssueTracker createJiraHost(URI uri, PersonalAccessToken pat) {
+        if (pat != null) {
+            throw new RuntimeException("authentication not implemented yet");
+        }
+        return new JiraHost(uri);
+    }
+}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraHost.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraHost.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraHost.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker;
+
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.network.*;
+import org.openjdk.skara.json.JSON;
+
+import java.net.URI;
+
+public class JiraHost implements IssueTracker {
+    private final URI uri;
+    private final RestRequest request;
+
+    public JiraHost(URI uri) {
+        this.uri = uri;
+
+        var baseApi = URIBuilder.base(uri)
+                                .setPath("/rest/api/2/")
+                                .build();
+        request = new RestRequest(baseApi);
+    }
+
+    URI getUri() {
+        return uri;
+    }
+
+    @Override
+    public boolean isValid() {
+        var version = request.get("serverInfo")
+                             .onError(r -> JSON.object().put("invalid", true))
+                             .execute();
+        return !version.contains("invalid");
+    }
+
+    @Override
+    public IssueProject project(String name) {
+        return new JiraProject(this, request, name);
+    }
+
+    @Override
+    public HostUser user(String username) {
+        throw new RuntimeException("needs authentication; not implemented yet");
+    }
+
+    @Override
+    public HostUser currentUser() {
+        throw new RuntimeException("needs authentication; not implemented yet");
+    }
+
+    @Override
+    public boolean isMemberOf(String groupId, HostUser user) {
+        throw new RuntimeException("not implemented yet");
+    }
+}
diff a/host/src/main/java/org/openjdk/skara/host/jira/JiraIssue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraIssue.java
--- a/host/src/main/java/org/openjdk/skara/host/jira/JiraIssue.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraIssue.java
@@ -18,11 +18,11 @@
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package org.openjdk.skara.host.jira;
+package org.openjdk.skara.issuetracker;
 
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.network.*;
 import org.openjdk.skara.json.JSONValue;
 
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraProject.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/JiraProject.java
@@ -0,0 +1,83 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker;
+
+import org.openjdk.skara.json.JSON;
+import org.openjdk.skara.network.*;
+
+import java.net.URI;
+import java.util.*;
+
+public class JiraProject implements IssueProject {
+    private final JiraHost jiraHost;
+    private final String projectName;
+    private final RestRequest request;
+
+    JiraProject(JiraHost host, RestRequest request, String projectName) {
+        this.jiraHost = host;
+        this.projectName = projectName;
+        this.request = request;
+    }
+
+    @Override
+    public IssueTracker issueTracker() {
+        return jiraHost;
+    }
+
+    @Override
+    public URI webUrl() {
+        return URIBuilder.base(jiraHost.getUri()).setPath("/projects/" + projectName).build();
+    }
+
+    @Override
+    public Issue createIssue(String title, List<String> body) {
+        throw new RuntimeException("needs authentication; not implemented yet");
+    }
+
+    @Override
+    public Optional<Issue> issue(String id) {
+        if (id.indexOf('-') < 0) {
+            id = projectName.toUpperCase() + "-" + id;
+        }
+        var issue = request.get("issue/" + id)
+                           .onError(r -> r.statusCode() == 404 ? JSON.object().put("NOT_FOUND", true) : null)
+                           .execute();
+        if (!issue.contains("NOT_FOUND")) {
+            return Optional.of(new JiraIssue(this, request, issue));
+        } else {
+            return Optional.empty();
+        }
+    }
+
+    @Override
+    public List<Issue> issues() {
+        var ret = new ArrayList<Issue>();
+        var issues = request.post("search")
+                            .body("jql", "project = " + projectName + " AND status in (Open, New)")
+                            .execute();
+        for (var issue : issues.get("issues").asArray()) {
+            ret.add(new JiraIssue(this, request, issue));
+        }
+        return ret;
+    }
+}
diff a/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java b/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
--- /dev/null
+++ b/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker;
+
+import org.openjdk.skara.test.HostCredentials;
+
+import org.junit.jupiter.api.*;
+
+import java.io.IOException;
+
+import static org.junit.jupiter.api.Assertions.assertFalse;
+
+class IssueTrackerTests {
+    @Test
+    void isMemberOfNegativeTests(TestInfo info) throws IOException {
+        try (var credentials = new HostCredentials(info)) {
+            var host = credentials.getIssueProject().issueTracker();
+            var madeUpGroupIdThatCannotContainTestMember = "1234567890";
+            assertFalse(host.isMemberOf(madeUpGroupIdThatCannotContainTestMember, host.currentUser()));
+        }
+    }
+}
diff a/settings.gradle b/settings.gradle
--- a/settings.gradle
+++ b/settings.gradle
@@ -39,10 +39,12 @@
 include 'ssh'
 include 'test'
 include 'vcs'
 include 'webrev'
 include 'network'
+include 'forge'
+include 'issuetracker'
 
 include 'bots:cli'
 include 'bots:forward'
 include 'bots:hgbridge'
 include 'bots:merge'
diff a/storage/build.gradle b/storage/build.gradle
--- a/storage/build.gradle
+++ b/storage/build.gradle
@@ -31,10 +31,12 @@
 }
 
 dependencies {
     implementation project(':network')
     implementation project(':host')
+    implementation project(':forge')
+    implementation project(':issuetracker')
     implementation project(':vcs')
 }
 
 publishing {
     publications {
diff a/storage/src/main/java/module-info.java b/storage/src/main/java/module-info.java
--- a/storage/src/main/java/module-info.java
+++ b/storage/src/main/java/module-info.java
@@ -21,9 +21,10 @@
  * questions.
  */
 module org.openjdk.skara.storage {
     requires org.openjdk.skara.network;
     requires org.openjdk.skara.host;
+    requires org.openjdk.skara.forge;
     requires org.openjdk.skara.vcs;
 
     exports org.openjdk.skara.storage;
 }
diff a/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java b/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java
--- a/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java
+++ b/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.storage;
 
-import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.nio.file.*;
 import java.util.*;
diff a/storage/src/main/java/org/openjdk/skara/storage/StorageBuilder.java b/storage/src/main/java/org/openjdk/skara/storage/StorageBuilder.java
--- a/storage/src/main/java/org/openjdk/skara/storage/StorageBuilder.java
+++ b/storage/src/main/java/org/openjdk/skara/storage/StorageBuilder.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.storage;
 
-import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.forge.HostedRepository;
 
 import java.nio.file.Path;
 
 public class StorageBuilder<T> {
     private final String fileName;
diff a/test/build.gradle b/test/build.gradle
--- a/test/build.gradle
+++ b/test/build.gradle
@@ -30,10 +30,12 @@
     implementation project(':census')
     implementation project(':vcs')
     implementation project(':bot')
     implementation project(':host')
     implementation project(':network')
+    implementation project(':forge')
+    implementation project(':issuetracker')
     implementation project(':email')
     implementation project(':mailinglist')
     implementation project(':proxy')
 
     implementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
diff a/test/src/main/java/module-info.java b/test/src/main/java/module-info.java
--- a/test/src/main/java/module-info.java
+++ b/test/src/main/java/module-info.java
@@ -28,10 +28,12 @@
     requires org.openjdk.skara.vcs;
     requires org.openjdk.skara.bot;
     requires org.openjdk.skara.json;
     requires org.openjdk.skara.host;
     requires org.openjdk.skara.network;
+    requires org.openjdk.skara.issuetracker;
+    requires org.openjdk.skara.forge;
     requires org.openjdk.skara.email;
     requires org.openjdk.skara.mailinglist;
     requires org.openjdk.skara.proxy;
 
     requires org.junit.jupiter.api;
diff a/test/src/main/java/org/openjdk/skara/test/CensusBuilder.java b/test/src/main/java/org/openjdk/skara/test/CensusBuilder.java
--- a/test/src/main/java/org/openjdk/skara/test/CensusBuilder.java
+++ b/test/src/main/java/org/openjdk/skara/test/CensusBuilder.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.test;
 
+import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.nio.file.*;
diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -20,11 +20,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.test;
 
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.proxy.HttpProxy;
 import org.openjdk.skara.vcs.*;
 
@@ -46,14 +48,14 @@
     private int nextHostIndex;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.test");
 
     private interface Credentials {
-        RepositoryHost createRepositoryHost(int userIndex);
-        IssueHost createIssueHost(int userIndex);
-        HostedRepository getHostedRepository(RepositoryHost host);
-        IssueProject getIssueProject(IssueHost host);
+        Forge createRepositoryHost(int userIndex);
+        IssueTracker createIssueHost(int userIndex);
+        HostedRepository getHostedRepository(Forge host);
+        IssueProject getIssueProject(IssueTracker host);
         String getNamespaceName();
         default void close() {}
     }
 
     private static class GitHubCredentials implements Credentials {
@@ -64,34 +66,34 @@
             this.config = config;
             this.configDir = configDir;
         }
 
         @Override
-        public RepositoryHost createRepositoryHost(int userIndex) {
+        public Forge createRepositoryHost(int userIndex) {
             var hostUri = URIBuilder.base(config.get("host").asString()).build();
             var apps = config.get("apps").asArray();
             var key = configDir.resolve(apps.get(userIndex).get("key").asString());
-            return HostFactory.createGitHubHost(hostUri,
+            return ForgeFactory.createGitHubHost(hostUri,
                                                 null,
                                                 null,
                                                 key.toString(),
                                                 apps.get(userIndex).get("id").asString(),
                                                 apps.get(userIndex).get("installation").asString());
         }
 
         @Override
-        public IssueHost createIssueHost(int userIndex) {
+        public IssueTracker createIssueHost(int userIndex) {
             throw new RuntimeException("not implemented yet");
         }
 
         @Override
-        public HostedRepository getHostedRepository(RepositoryHost host) {
+        public HostedRepository getHostedRepository(Forge host) {
             return host.repository(config.get("project").asString());
         }
 
         @Override
-        public IssueProject getIssueProject(IssueHost host) {
+        public IssueProject getIssueProject(IssueTracker host) {
             return host.project(config.get("project").asString());
         }
 
         @Override
         public String getNamespaceName() {
@@ -105,30 +107,30 @@
         GitLabCredentials(JSONObject config) {
             this.config = config;
         }
 
         @Override
-        public RepositoryHost createRepositoryHost(int userIndex) {
+        public Forge createRepositoryHost(int userIndex) {
             var hostUri = URIBuilder.base(config.get("host").asString()).build();
             var users = config.get("users").asArray();
             var pat = new PersonalAccessToken(users.get(userIndex).get("name").asString(),
                                               users.get(userIndex).get("pat").asString());
-            return HostFactory.createGitLabHost(hostUri, pat);
+            return ForgeFactory.createGitLabHost(hostUri, pat);
         }
 
         @Override
-        public IssueHost createIssueHost(int userIndex) {
+        public IssueTracker createIssueHost(int userIndex) {
             throw new RuntimeException("not implemented yet");
         }
 
         @Override
-        public HostedRepository getHostedRepository(RepositoryHost host) {
+        public HostedRepository getHostedRepository(Forge host) {
             return host.repository(config.get("project").asString());
         }
 
         @Override
-        public IssueProject getIssueProject(IssueHost host) {
+        public IssueProject getIssueProject(IssueTracker host) {
             return host.project(config.get("project").asString());
         }
 
         @Override
         public String getNamespaceName() {
@@ -153,26 +155,26 @@
             }
             return hosts.get(hosts.size() - 1);
         }
 
         @Override
-        public RepositoryHost createRepositoryHost(int userIndex) {
+        public Forge createRepositoryHost(int userIndex) {
             return createHost(userIndex);
         }
 
         @Override
-        public IssueHost createIssueHost(int userIndex) {
+        public IssueTracker createIssueHost(int userIndex) {
             return createHost(userIndex);
         }
 
         @Override
-        public HostedRepository getHostedRepository(RepositoryHost host) {
+        public HostedRepository getHostedRepository(Forge host) {
             return host.repository("test");
         }
 
         @Override
-        public IssueProject getIssueProject(IssueHost host) {
+        public IssueProject getIssueProject(IssueTracker host) {
             return host.project("test");
         }
 
         @Override
         public String getNamespaceName() {
@@ -198,17 +200,17 @@
             default:
                 throw new RuntimeException("Unknown entry type: " + entry.get("type").asString());
         }
     }
 
-    private RepositoryHost getRepositoryHost() {
+    private Forge getRepositoryHost() {
         var host = credentials.createRepositoryHost(nextHostIndex);
         nextHostIndex++;
         return host;
     }
 
-    private IssueHost getIssueHost() {
+    private IssueTracker getIssueHost() {
         var host = credentials.createIssueHost(nextHostIndex);
         nextHostIndex++;
         return host;
     }
 
diff a/test/src/main/java/org/openjdk/skara/test/IssueData.java b/test/src/main/java/org/openjdk/skara/test/IssueData.java
--- a/test/src/main/java/org/openjdk/skara/test/IssueData.java
+++ b/test/src/main/java/org/openjdk/skara/test/IssueData.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.test;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
 
 import java.time.ZonedDateTime;
 import java.util.*;
 
 class IssueData {
diff a/test/src/main/java/org/openjdk/skara/test/PullRequestData.java b/test/src/main/java/org/openjdk/skara/test/PullRequestData.java
--- a/test/src/main/java/org/openjdk/skara/test/PullRequestData.java
+++ b/test/src/main/java/org/openjdk/skara/test/PullRequestData.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.test;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.vcs.Hash;
 
 import java.util.*;
 
 class PullRequestData extends IssueData {
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -20,20 +20,22 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.test;
 
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
 import java.util.*;
 import java.util.stream.Collectors;
 
-public class TestHost implements RepositoryHost, IssueHost {
+public class TestHost implements Forge, IssueTracker {
     private final int currentUser;
     private HostData data;
 
     private static class HostData {
         final List<HostUser> users = new ArrayList<>();
diff a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.test;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.json.JSONValue;
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.net.*;
@@ -46,11 +46,11 @@
         this.localRepository = localRepository;
         pullRequestPattern = Pattern.compile(url().toString() + "/pr/" + "(\\d+)");
     }
 
     @Override
-    public RepositoryHost host() {
+    public Forge forge() {
         return host;
     }
 
     @Override
     public Optional<HostedRepository> parent() {
diff a/test/src/main/java/org/openjdk/skara/test/TestIssue.java b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssue.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
@@ -21,10 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.network.URIBuilder;
 
 import java.net.URI;
 import java.time.ZonedDateTime;
 import java.util.*;
@@ -46,16 +47,16 @@
 
     static TestIssue createNew(TestIssueProject issueProject, String id, String title, List<String> body) {
         var data = new IssueData();
         data.title = title;
         data.body = String.join("\n", body);
-        var issue = new TestIssue(issueProject, id, issueProject.host().currentUser(), issueProject.host().currentUser(), data);
+        var issue = new TestIssue(issueProject, id, issueProject.issueTracker().currentUser(), issueProject.issueTracker().currentUser(), data);
         return issue;
     }
 
     static TestIssue createFrom(TestIssueProject issueProject, TestIssue other) {
-        var issue = new TestIssue(issueProject, other.id, other.author, issueProject.host().currentUser(), other.data);
+        var issue = new TestIssue(issueProject, other.id, other.author, issueProject.issueTracker().currentUser(), other.data);
         return issue;
     }
 
     @Override
     public IssueProject project() {
diff a/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java b/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.test;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.network.URIBuilder;
 
 import java.net.URI;
 import java.util.*;
 
@@ -35,11 +35,11 @@
     String projectName() {
         return projectName;
     }
 
     @Override
-    public Host host() {
+    public IssueTracker issueTracker() {
         return host;
     }
 
     @Override
     public URI webUrl() {
diff a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
--- a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
@@ -20,11 +20,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.test;
 
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.IssueProject;
 import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.vcs.Hash;
 
 import java.io.*;
 import java.net.*;
@@ -60,16 +62,16 @@
     static TestPullRequest createNew(TestHostedRepository repository, String id, String targetRef, String sourceRef, String title, List<String> body, boolean draft) {
         var data = new PullRequestData();
         data.title = title;
         data.body = String.join("\n", body);
         data.draft = draft;
-        var pr = new TestPullRequest(repository, id, repository.host().currentUser(), repository.host().currentUser(), targetRef, sourceRef, data);
+        var pr = new TestPullRequest(repository, id, repository.forge().currentUser(), repository.forge().currentUser(), targetRef, sourceRef, data);
         return pr;
     }
 
     static TestPullRequest createFrom(TestHostedRepository repository, TestPullRequest other) {
-        var pr = new TestPullRequest(repository, other.id, other.author, repository.host().currentUser(), other.targetRef, other.sourceRef, other.data);
+        var pr = new TestPullRequest(repository, other.id, other.author, repository.forge().currentUser(), other.targetRef, other.sourceRef, other.data);
         return pr;
     }
 
     @Override
     public HostedRepository repository() {
@@ -87,11 +89,11 @@
     }
 
     @Override
     public void addReview(Review.Verdict verdict, String body) {
         try {
-            var review = new Review(repository.host().currentUser(),
+            var review = new Review(repository.forge().currentUser(),
                                     verdict, repository.localRepository().resolve(sourceRef).orElseThrow(),
                                     data.reviews.size(),
                                     body);
 
             data.reviews.add(review);
