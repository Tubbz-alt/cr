diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -20,11 +20,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.test;
 
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.proxy.HttpProxy;
 import org.openjdk.skara.vcs.*;
 
@@ -46,14 +48,14 @@
     private int nextHostIndex;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.test");
 
     private interface Credentials {
-        RepositoryHost createRepositoryHost(int userIndex);
-        IssueHost createIssueHost(int userIndex);
-        HostedRepository getHostedRepository(RepositoryHost host);
-        IssueProject getIssueProject(IssueHost host);
+        Forge createRepositoryHost(int userIndex);
+        IssueTracker createIssueHost(int userIndex);
+        HostedRepository getHostedRepository(Forge host);
+        IssueProject getIssueProject(IssueTracker host);
         String getNamespaceName();
         default void close() {}
     }
 
     private static class GitHubCredentials implements Credentials {
@@ -64,34 +66,34 @@
             this.config = config;
             this.configDir = configDir;
         }
 
         @Override
-        public RepositoryHost createRepositoryHost(int userIndex) {
+        public Forge createRepositoryHost(int userIndex) {
             var hostUri = URIBuilder.base(config.get("host").asString()).build();
             var apps = config.get("apps").asArray();
             var key = configDir.resolve(apps.get(userIndex).get("key").asString());
-            return HostFactory.createGitHubHost(hostUri,
+            return ForgeFactory.createGitHubHost(hostUri,
                                                 null,
                                                 null,
                                                 key.toString(),
                                                 apps.get(userIndex).get("id").asString(),
                                                 apps.get(userIndex).get("installation").asString());
         }
 
         @Override
-        public IssueHost createIssueHost(int userIndex) {
+        public IssueTracker createIssueHost(int userIndex) {
             throw new RuntimeException("not implemented yet");
         }
 
         @Override
-        public HostedRepository getHostedRepository(RepositoryHost host) {
+        public HostedRepository getHostedRepository(Forge host) {
             return host.repository(config.get("project").asString());
         }
 
         @Override
-        public IssueProject getIssueProject(IssueHost host) {
+        public IssueProject getIssueProject(IssueTracker host) {
             return host.project(config.get("project").asString());
         }
 
         @Override
         public String getNamespaceName() {
@@ -105,30 +107,30 @@
         GitLabCredentials(JSONObject config) {
             this.config = config;
         }
 
         @Override
-        public RepositoryHost createRepositoryHost(int userIndex) {
+        public Forge createRepositoryHost(int userIndex) {
             var hostUri = URIBuilder.base(config.get("host").asString()).build();
             var users = config.get("users").asArray();
             var pat = new PersonalAccessToken(users.get(userIndex).get("name").asString(),
                                               users.get(userIndex).get("pat").asString());
-            return HostFactory.createGitLabHost(hostUri, pat);
+            return ForgeFactory.createGitLabHost(hostUri, pat);
         }
 
         @Override
-        public IssueHost createIssueHost(int userIndex) {
+        public IssueTracker createIssueHost(int userIndex) {
             throw new RuntimeException("not implemented yet");
         }
 
         @Override
-        public HostedRepository getHostedRepository(RepositoryHost host) {
+        public HostedRepository getHostedRepository(Forge host) {
             return host.repository(config.get("project").asString());
         }
 
         @Override
-        public IssueProject getIssueProject(IssueHost host) {
+        public IssueProject getIssueProject(IssueTracker host) {
             return host.project(config.get("project").asString());
         }
 
         @Override
         public String getNamespaceName() {
@@ -153,26 +155,26 @@
             }
             return hosts.get(hosts.size() - 1);
         }
 
         @Override
-        public RepositoryHost createRepositoryHost(int userIndex) {
+        public Forge createRepositoryHost(int userIndex) {
             return createHost(userIndex);
         }
 
         @Override
-        public IssueHost createIssueHost(int userIndex) {
+        public IssueTracker createIssueHost(int userIndex) {
             return createHost(userIndex);
         }
 
         @Override
-        public HostedRepository getHostedRepository(RepositoryHost host) {
+        public HostedRepository getHostedRepository(Forge host) {
             return host.repository("test");
         }
 
         @Override
-        public IssueProject getIssueProject(IssueHost host) {
+        public IssueProject getIssueProject(IssueTracker host) {
             return host.project("test");
         }
 
         @Override
         public String getNamespaceName() {
@@ -198,17 +200,17 @@
             default:
                 throw new RuntimeException("Unknown entry type: " + entry.get("type").asString());
         }
     }
 
-    private RepositoryHost getRepositoryHost() {
+    private Forge getRepositoryHost() {
         var host = credentials.createRepositoryHost(nextHostIndex);
         nextHostIndex++;
         return host;
     }
 
-    private IssueHost getIssueHost() {
+    private IssueTracker getIssueHost() {
         var host = credentials.createIssueHost(nextHostIndex);
         nextHostIndex++;
         return host;
     }
 
