diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
@@ -20,11 +20,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bot;
 
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.json.JSONObject;
 import org.openjdk.skara.vcs.VCS;
 
 import java.io.*;
@@ -36,12 +38,12 @@
 import java.util.regex.Pattern;
 
 public class BotRunnerConfiguration {
     private final Logger log;
     private final JSONObject config;
-    private final Map<String, RepositoryHost> repositoryHosts;
-    private final Map<String, IssueHost> issueHosts;
+    private final Map<String, Forge> repositoryHosts;
+    private final Map<String, IssueTracker> issueHosts;
     private final Map<String, HostedRepository> repositories;
 
     private BotRunnerConfiguration(JSONObject config, Path cwd) throws ConfigurationError {
         this.config = config;
         log = Logger.getLogger("org.openjdk.skara.bot");
@@ -49,23 +51,23 @@
         repositoryHosts = parseRepositoryHosts(config, cwd);
         issueHosts = parseIssueHosts(config, cwd);
         repositories = parseRepositories(config);
     }
 
-    private Map<String, RepositoryHost> parseRepositoryHosts(JSONObject config, Path cwd) throws ConfigurationError {
-        Map<String, RepositoryHost> ret = new HashMap<>();
+    private Map<String, Forge> parseRepositoryHosts(JSONObject config, Path cwd) throws ConfigurationError {
+        Map<String, Forge> ret = new HashMap<>();
 
         if (!config.contains("hosts")) {
             return ret;
         }
 
         for (var entry : config.get("hosts").fields()) {
             if (entry.value().contains("gitlab")) {
                 var gitlab = entry.value().get("gitlab");
                 var uri = URIBuilder.base(gitlab.get("url").asString()).build();
                 var pat = new PersonalAccessToken(gitlab.get("username").asString(), gitlab.get("pat").asString());
-                ret.put(entry.name(), HostFactory.createGitLabHost(uri, pat));
+                ret.put(entry.name(), ForgeFactory.createGitLabHost(uri, pat));
             } else if (entry.value().contains("github")) {
                 var github = entry.value().get("github");
                 URI uri;
                 if (github.contains("url")) {
                     uri = URIBuilder.base(github.get("url").asString()).build();
@@ -79,37 +81,37 @@
                     webUriReplacement = github.get("weburl").get("replacement").asString();
                 }
 
                 if (github.contains("app")) {
                     var keyFile = cwd.resolve(github.get("app").get("key").asString());
-                    ret.put(entry.name(), HostFactory.createGitHubHost(uri, webUriPattern, webUriReplacement, keyFile.toString(),
+                    ret.put(entry.name(), ForgeFactory.createGitHubHost(uri, webUriPattern, webUriReplacement, keyFile.toString(),
                                                                        github.get("app").get("id").asString(),
                                                                        github.get("app").get("installation").asString()));
                 } else {
                     var pat = new PersonalAccessToken(github.get("username").asString(), github.get("pat").asString());
-                    ret.put(entry.name(), HostFactory.createGitHubHost(uri, pat));
+                    ret.put(entry.name(), ForgeFactory.createGitHubHost(uri, pat));
                 }
             } else {
                 throw new ConfigurationError("Host " + entry.name());
             }
         }
 
         return ret;
     }
 
-    private Map<String, IssueHost> parseIssueHosts(JSONObject config, Path cwd) throws ConfigurationError {
-        Map<String, IssueHost> ret = new HashMap<>();
+    private Map<String, IssueTracker> parseIssueHosts(JSONObject config, Path cwd) throws ConfigurationError {
+        Map<String, IssueTracker> ret = new HashMap<>();
 
         if (!config.contains("hosts")) {
             return ret;
         }
 
         for (var entry : config.get("hosts").fields()) {
             if (entry.value().contains("jira")) {
                 var jira = entry.value().get("jira");
                 var uri = URIBuilder.base(jira.get("url").asString()).build();
-                ret.put(entry.name(), HostFactory.createJiraHost(uri, null));
+                ret.put(entry.name(), IssueTrackerFactory.createJiraHost(uri, null));
             } else {
                 throw new ConfigurationError("Host " + entry.name());
             }
         }
 
