diff a/bots/mlbridge/src/main/java/module-info.java b/bots/mlbridge/src/main/java/module-info.java
--- a/bots/mlbridge/src/main/java/module-info.java
+++ b/bots/mlbridge/src/main/java/module-info.java
@@ -30,8 +30,9 @@
     requires org.openjdk.skara.json;
     requires org.openjdk.skara.email;
     requires org.openjdk.skara.webrev;
     requires org.openjdk.skara.network;
     requires java.logging;
+    requires java.net.http;
 
     provides org.openjdk.skara.bot.BotFactory with org.openjdk.skara.bots.mlbridge.MailingListBridgeBotFactory;
 }
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
@@ -28,21 +28,25 @@
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.webrev.Webrev;
 
 import java.io.*;
 import java.net.URI;
+import java.net.http.*;
 import java.nio.file.*;
-import java.util.Comparator;
+import java.time.*;
+import java.util.*;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.logging.Logger;
 import java.util.stream.Collectors;
 
 class WebrevStorage {
     private final HostedRepository storage;
     private final String storageRef;
     private final Path baseFolder;
     private final URI baseUri;
     private final EmailAddress author;
+    private final Logger log = Logger.getLogger("org.openjdk.skara.bots.mlbridge");
 
     WebrevStorage(HostedRepository storage, String ref, Path baseFolder, URI baseUri, EmailAddress author) {
         this.baseFolder = baseFolder;
         this.baseUri = baseUri;
         this.storage = storage;
@@ -139,10 +143,37 @@
         } catch (IOException io) {
             throw new RuntimeException(io);
         }
     }
 
+    private void awaitPublication(URI uri, Duration timeout) throws IOException {
+        var end = Instant.now().plus(timeout);
+        var uriBuilder = URIBuilder.base(uri);
+        var client = HttpClient.newBuilder()
+                               .connectTimeout(Duration.ofSeconds(30))
+                               .build();
+        while (Instant.now().isBefore(end)) {
+            var uncachedUri = uriBuilder.setQuery(Map.of("nocache", UUID.randomUUID().toString())).build();
+            var request = HttpRequest.newBuilder(uncachedUri)
+                                     .timeout(Duration.ofSeconds(30))
+                                     .GET()
+                                     .build();
+            try {
+                var response = client.send(request, HttpResponse.BodyHandlers.ofString());
+                if (response.statusCode() < 400) {
+                    // Success!
+                    return;
+                }
+                log.info(response.statusCode() + " when checking " + uncachedUri + " - waiting...");
+                Thread.sleep(Duration.ofSeconds(10).toMillis());
+            } catch (InterruptedException ignored) {
+            }
+        }
+
+        throw new RuntimeException("No success response from " + uri + " within " + timeout);
+    }
+
     private URI createAndArchive(PullRequest pr, Repository localRepository, Path scratchPath, Hash base, Hash head, String identifier) {
         try {
             var localStorage = Repository.materialize(scratchPath, storage.url(),
                                                       "+" + storageRef + ":mlbridge_webrevs");
             var relativeFolder = baseFolder.resolve(String.format("%s/webrev.%s", pr.id(), identifier));
@@ -154,11 +185,13 @@
             generate(pr, localRepository, outputFolder, base, head);
             var placeholder = generatePlaceholder(pr, base, head);
             if (!localStorage.isClean()) {
                 push(localStorage, outputFolder, baseFolder.resolve(pr.id()).toString(), placeholder);
             }
-            return URIBuilder.base(baseUri).appendPath(relativeFolder.toString().replace('\\', '/')).build();
+            var uri = URIBuilder.base(baseUri).appendPath(relativeFolder.toString().replace('\\', '/')).build();
+            awaitPublication(uri, Duration.ofMinutes(30));
+            return uri;
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
@@ -54,11 +54,12 @@
 
     @Test
     void simpleArchive(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var ignored = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
@@ -69,11 +70,11 @@
                                                  listAddress,
                                                  Set.of(ignored.forge().currentUser().userName()),
                                                  Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // The mailing list as well
@@ -124,11 +125,12 @@
 
     @Test
     void rememberBridged(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var ignored = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
@@ -139,11 +141,11 @@
                                                  listAddress,
                                                  Set.of(ignored.forge().currentUser().userName()),
                                                  Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // The mailing list as well
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -102,11 +102,12 @@
     void simpleArchive(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
              var webrevFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var ignored = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
@@ -116,11 +117,11 @@
                                                  censusBuilder.build(), "master", listAddress,
                                                  Set.of(ignored.forge().currentUser().userName()),
                                                  Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of("rfr"), Map.of(ignored.forge().currentUser().userName(),
                                                                        Pattern.compile("ready")),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of("Extra1", "val1", "Extra2", "val2"),
                                                  Duration.ZERO);
@@ -178,11 +179,11 @@
             assertTrue(archiveContains(archiveFolder.path(), "This is a pull request"));
             assertTrue(archiveContains(archiveFolder.path(), "This should now be ready"));
             assertTrue(archiveContains(archiveFolder.path(), "Patch:"));
             assertTrue(archiveContains(archiveFolder.path(), "Changes:"));
             assertTrue(archiveContains(archiveFolder.path(), "Webrev:"));
-            assertTrue(archiveContains(archiveFolder.path(), "http://www.test.test/"));
+            assertTrue(archiveContains(archiveFolder.path(), webrevServer.uri().toString()));
             assertTrue(archiveContains(archiveFolder.path(), "webrev.00"));
             assertTrue(archiveContains(archiveFolder.path(), "Issue:"));
             assertTrue(archiveContains(archiveFolder.path(), "http://issues.test/browse/TSTPRJ-1234"));
             assertTrue(archiveContains(archiveFolder.path(), "Fetch:"));
             assertTrue(archiveContains(archiveFolder.path(), "^ - " + editHash.abbreviate() + ": Change msg"));
@@ -260,11 +261,12 @@
     @Test
     void reviewComment(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var ignored = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
@@ -274,11 +276,11 @@
                                                  censusBuilder.build(), "master", listAddress,
                                                  Set.of(ignored.forge().currentUser().userName()),
                                                  Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // Populate the projects repository
@@ -350,11 +352,12 @@
     @Test
     void combineComments(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.forge().currentUser().id());
@@ -363,11 +366,11 @@
                                                  censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(),
                                                  listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // Populate the projects repository
@@ -437,11 +440,12 @@
     @Test
     void commentThreading(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
@@ -452,11 +456,11 @@
                                                  censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(),
                                                  listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // Populate the projects repository
@@ -561,11 +565,12 @@
     @Test
     void commentThreadingSeparated(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
@@ -575,11 +580,11 @@
             var mlBot = new MailingListBridgeBot(from, author, archive, "master", censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(),
                                                  listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // Populate the projects repository
@@ -618,11 +623,12 @@
     @Test
     void reviewContext(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.forge().currentUser().id());
@@ -631,11 +637,11 @@
                                                  censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(),
                                                  listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // Populate the projects repository
@@ -670,11 +676,12 @@
     @Test
     void multipleReviewContexts(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.forge().currentUser().id());
@@ -683,11 +690,11 @@
                                                  censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(),
                                                  listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // Populate the projects repository
@@ -741,11 +748,12 @@
     @Test
     void filterComments(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.forge().currentUser().id());
@@ -753,11 +761,11 @@
             var mlBot = new MailingListBridgeBot(from, author, archive, "master",
                                                  censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // Populate the projects repository
@@ -800,11 +808,12 @@
     @Test
     void incrementalChanges(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var commenter = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
@@ -813,11 +822,11 @@
             var mlBot = new MailingListBridgeBot(from, author, archive, "master",
                                                  censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // Populate the projects repository
@@ -923,11 +932,12 @@
     @Test
     void rebased(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.forge().currentUser().id());
@@ -935,11 +945,11 @@
             var mlBot = new MailingListBridgeBot(sender, author, archive, "master",
                                                  censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // Populate the projects repository
@@ -1013,11 +1023,12 @@
     @Test
     void incrementalAfterRebase(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.forge().currentUser().id());
@@ -1025,11 +1036,11 @@
             var mlBot = new MailingListBridgeBot(sender, author, archive, "archive",
                                                  censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // Populate the projects repository
@@ -1096,11 +1107,12 @@
     void skipAddingExistingWebrev(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
              var webrevFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var ignored = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
@@ -1111,11 +1123,11 @@
                                                  listAddress,
                                                  Set.of(ignored.forge().currentUser().userName()),
                                                  Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // Populate the projects repository
@@ -1171,11 +1183,12 @@
     @Test
     void notifyReviewVerdicts(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var from = EmailAddress.from("test", "test@test.mail");
@@ -1185,11 +1198,11 @@
             var mlBot = new MailingListBridgeBot(from, author, archive, "master",
                                                  censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // Populate the projects repository
@@ -1255,11 +1268,12 @@
     @Test
     void ignoreComments(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
-             var listServer = new TestMailmanServer()) {
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var ignored = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
@@ -1270,11 +1284,11 @@
                                                  listAddress,
                                                  Set.of(ignored.forge().currentUser().userName()),
                                                  Set.of(Pattern.compile("ignore this comment", Pattern.MULTILINE | Pattern.DOTALL)),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
-                                                 URIBuilder.base("http://www.test.test/").build(),
+                                                 webrevServer.uri(),
                                                  Set.of(), Map.of(),
                                                  URIBuilder.base("http://issues.test/browse/").build(),
                                                  Map.of(), Duration.ZERO);
 
             // Populate the projects repository
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/WebrevStorageTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/WebrevStorageTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/WebrevStorageTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/WebrevStorageTests.java
@@ -21,26 +21,26 @@
  * questions.
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.email.EmailAddress;
-import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Repository;
 
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
 import java.nio.file.*;
 
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.*;
 
 class WebrevStorageTests {
     @Test
     void overwriteExisting(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
-             var tempFolder = new TemporaryDirectory()) {
+             var tempFolder = new TemporaryDirectory();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
 
             // Populate the projects repository
             var reviewFile = Path.of("reviewfile.txt");
@@ -48,27 +48,33 @@
             var localRepo = CheckableRepository.init(repoFolder, author.repositoryType(), reviewFile);
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.url(), "master", true);
             localRepo.push(masterHash, archive.url(), "webrev", true);
 
+            // Check that the web link wasn't verified yet
+            assertFalse(webrevServer.isChecked());
+
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
             localRepo.push(editHash, author.url(), "edit", true);
             var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
             pr.addLabel("rfr");
             pr.setBody("This is now ready");
 
             var from = EmailAddress.from("test", "test@test.mail");
             var storage = new WebrevStorage(archive, "webrev", Path.of("test"),
-                                            URIBuilder.base("http://www.test.test/").build(), from);
+                                            webrevServer.uri(), from);
 
             var prFolder = tempFolder.path().resolve("pr");
             var prRepo = Repository.materialize(prFolder, pr.repository().url(), "edit");
             var scratchFolder = tempFolder.path().resolve("scratch");
             var generator = storage.generator(pr, prRepo, scratchFolder);
             generator.generate(masterHash, editHash, "00");
 
+            // Check that the web link has been verified now
+            assertTrue(webrevServer.isChecked());
+
             // Update the local repository and check that the webrev has been generated
             Repository.materialize(repoFolder, archive.url(), "webrev");
             assertTrue(Files.exists(repoFolder.resolve("test/" + pr.id() + "/webrev.00/index.html")));
 
             // Create it again - it will overwrite the previous one
@@ -79,11 +85,12 @@
     }
 
     @Test
     void dropLarge(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
-             var tempFolder = new TemporaryDirectory()) {
+             var tempFolder = new TemporaryDirectory();
+             var webrevServer = new TestWebrevServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
 
             // Populate the projects repository
             var reviewFile = Path.of("reviewfile.txt");
@@ -105,11 +112,11 @@
             pr.addLabel("rfr");
             pr.setBody("This is now ready");
 
             var from = EmailAddress.from("test", "test@test.mail");
             var storage = new WebrevStorage(archive, "webrev", Path.of("test"),
-                                            URIBuilder.base("http://www.test.test/").build(), from);
+                                            webrevServer.uri(), from);
 
             var prFolder = tempFolder.path().resolve("pr");
             var prRepo = Repository.materialize(prFolder, pr.repository().url(), "edit");
             var scratchFolder = tempFolder.path().resolve("scratch");
             var generator = storage.generator(pr, prRepo, scratchFolder);
diff a/test/src/main/java/org/openjdk/skara/test/TestWebrevServer.java b/test/src/main/java/org/openjdk/skara/test/TestWebrevServer.java
--- /dev/null
+++ b/test/src/main/java/org/openjdk/skara/test/TestWebrevServer.java
@@ -0,0 +1,69 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.test;
+
+import com.sun.net.httpserver.*;
+import org.openjdk.skara.network.URIBuilder;
+
+import java.io.*;
+import java.net.*;
+import java.nio.charset.StandardCharsets;
+
+public class TestWebrevServer implements AutoCloseable {
+    private final HttpServer httpServer;
+    private boolean checked = false;
+
+    private class Handler implements HttpHandler {
+        @Override
+        public void handle(HttpExchange exchange) throws IOException {
+            var response = "ok!";
+            var responseBytes = response.getBytes(StandardCharsets.UTF_8);
+            exchange.sendResponseHeaders(200, responseBytes.length);
+            OutputStream outputStream = exchange.getResponseBody();
+            outputStream.write(responseBytes);
+            outputStream.close();
+            checked = true;
+        }
+    }
+
+    public TestWebrevServer() throws IOException {
+        InetSocketAddress address = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);
+        httpServer = HttpServer.create(address, 0);
+        httpServer.createContext("/webrevs", new Handler());
+        httpServer.setExecutor(null);
+        httpServer.start();
+    }
+
+    public URI uri() {
+        return URIBuilder.base("http://" + httpServer.getAddress().getHostString() + ":" +  httpServer.getAddress().getPort() + "/webrevs/").build();
+    }
+
+    public boolean isChecked() {
+        return checked;
+    }
+
+    @Override
+    public void close() throws IOException {
+        httpServer.stop(0);
+    }
+}
