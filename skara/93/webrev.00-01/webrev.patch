diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -163,11 +163,11 @@
 
     private void updateCheckBuilder(CheckBuilder checkBuilder, PullRequestCheckIssueVisitor visitor, List<String> additionalErrors) {
         if (visitor.isReadyForReview() && additionalErrors.isEmpty()) {
             checkBuilder.complete(true);
         } else {
-            var summary = Stream.concat(visitor.getIssues().stream(), additionalErrors.stream())
+            var summary = Stream.concat(visitor.getMessages().stream(), additionalErrors.stream())
                                 .sorted()
                                 .map(m -> "- " + m)
                                 .collect(Collectors.joining("\n"));
             checkBuilder.summary(summary);
             for (var annotation : visitor.getAnnotations()) {
@@ -177,11 +177,11 @@
         }
     }
 
     private void updateReadyForReview(PullRequestCheckIssueVisitor visitor, List<String> additionalErrors) {
         // If there are no issues at all, the PR is already reviewed
-        if (visitor.getIssues().isEmpty() && additionalErrors.isEmpty()) {
+        if (visitor.getMessages().isEmpty() && additionalErrors.isEmpty()) {
             pr.removeLabel("rfr");
             return;
         }
 
         // Additional errors are not allowed
@@ -444,11 +444,11 @@
                 updateReviewedMessages(comments, allReviews);
             }
 
             var commit = prInstance.localRepo().lookup(localHash).orElseThrow();
             var commitMessage = String.join("\n", commit.message());
-            var readyForIntegration = visitor.getIssues().isEmpty() && additionalErrors.isEmpty();
+            var readyForIntegration = visitor.getMessages().isEmpty() && additionalErrors.isEmpty();
             updateMergeReadyComment(readyForIntegration, commitMessage, comments, activeReviews, rebasePossible);
             if (readyForIntegration) {
                 newLabels.add("ready");
             } else {
                 newLabels.remove("ready");
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
@@ -77,14 +77,14 @@
             var path = scratchPath.resolve("pr.integrate").resolve(sanitizedUrl);
 
             var prInstance = new PullRequestInstance(path, pr);
             var hash = prInstance.commit(censusInstance.namespace(), censusInstance.configuration().census().domain(), null);
             var issues = prInstance.executeChecks(hash, censusInstance);
-            if (!issues.getIssues().isEmpty()) {
+            if (!issues.getMessages().isEmpty()) {
                 reply.print("Your merge request cannot be fulfilled at this time, as ");
                 reply.println("your changes failed the final jcheck:");
-                issues.getIssues().stream()
+                issues.getMessages().stream()
                       .map(line -> " * " + line)
                       .forEach(reply::println);
                 return;
             }
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java
@@ -51,11 +51,11 @@
     PullRequestCheckIssueVisitor(Set<Check> enabledChecks) {
         this.enabledChecks = enabledChecks;
         readyForReview = true;
     }
 
-    List<String> getIssues() {
+    List<String> getMessages() {
         return new ArrayList<>(messages);
     }
 
     Map<String, Boolean> getChecks() {
         return enabledChecks.stream()
