diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -21,13 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.jcheck.JCheck;
 import org.openjdk.skara.vcs.*;
-import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;
 
 import java.io.IOException;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
@@ -161,38 +159,23 @@
         }
 
         return ret;
     }
 
-    private PullRequestCheckIssueVisitor executeChecks(Hash localHash) throws Exception {
-        log.fine("Changes committed to local repository, executing checks...");
-
-        var checks = JCheck.checks(prInstance.localRepo(), censusInstance.census(), localHash);
-        var visitor = new PullRequestCheckIssueVisitor(checks);
-        try (var issues = JCheck.check(prInstance.localRepo(), censusInstance.census(), CommitMessageParsers.v1, "HEAD~1..HEAD",
-                                       localHash, new HashMap<>(), new HashSet<>())) {
-            for (var issue : issues) {
-                issue.accept(visitor);
-            }
-        }
-
-        return visitor;
-    }
-
     private void updateCheckBuilder(CheckBuilder checkBuilder, PullRequestCheckIssueVisitor visitor, List<String> additionalErrors) {
-        var summary = Stream.concat(visitor.getIssues().stream(), additionalErrors.stream())
-                            .sorted()
-                            .map(m -> "- " + m)
-                            .collect(Collectors.joining("\n"));
-        if (summary.length() > 0) {
+        if (visitor.isReadyForReview() && additionalErrors.isEmpty()) {
+            checkBuilder.complete(true);
+        } else {
+            var summary = Stream.concat(visitor.getIssues().stream(), additionalErrors.stream())
+                                .sorted()
+                                .map(m -> "- " + m)
+                                .collect(Collectors.joining("\n"));
             checkBuilder.summary(summary);
             for (var annotation : visitor.getAnnotations()) {
                 checkBuilder.annotation(annotation);
             }
             checkBuilder.complete(false);
-        } else {
-            checkBuilder.complete(true);
         }
     }
 
     private void updateReadyForReview(PullRequestCheckIssueVisitor visitor, List<String> additionalErrors) {
         // If there are no issues at all, the PR is already reviewed
@@ -444,11 +427,11 @@
             log.info("Starting to run jcheck on PR head");
             pr.createCheck(checkBuilder.build());
             var localHash = prInstance.commit(censusInstance.namespace(), censusDomain, null);
 
             // Determine current status
-            var visitor = executeChecks(localHash);
+            var visitor = prInstance.executeChecks(localHash, censusInstance);
             var additionalErrors = botSpecificChecks();
             updateCheckBuilder(checkBuilder, visitor, additionalErrors);
             updateReadyForReview(visitor, additionalErrors);
             var rebasePossible = prInstance.rebasePossible(localHash);
 
@@ -461,13 +444,13 @@
                 updateReviewedMessages(comments, allReviews);
             }
 
             var commit = prInstance.localRepo().lookup(localHash).orElseThrow();
             var commitMessage = String.join("\n", commit.message());
-            updateMergeReadyComment(checkBuilder.build().status() == CheckStatus.SUCCESS, commitMessage,
-                                    comments, activeReviews, rebasePossible);
-            if (checkBuilder.build().status() == CheckStatus.SUCCESS) {
+            var readyForIntegration = visitor.getIssues().isEmpty() && additionalErrors.isEmpty();
+            updateMergeReadyComment(readyForIntegration, commitMessage, comments, activeReviews, rebasePossible);
+            if (readyForIntegration) {
                 newLabels.add("ready");
             } else {
                 newLabels.remove("ready");
             }
             if (!rebasePossible) {
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
@@ -69,25 +69,11 @@
         if (pr.getLabels().contains("rejected")) {
             reply.println("The change is currently blocked from integration by a rejection.");
             return;
         }
 
-        if (!pr.getTitle().startsWith("Merge")) {
-            if (!ProjectPermissions.mayCommit(censusInstance, pr.getAuthor())) {
-                reply.println(ReadyForSponsorTracker.addIntegrationMarker(pr.getHeadHash()));
-                reply.println("Your change (at version " + pr.getHeadHash() + ") is now ready to be sponsored by a Committer.");
-                pr.addLabel("sponsor");
-                return;
-            }
-        } else {
-            if (!ProjectPermissions.mayCommit(censusInstance, pr.getAuthor())) {
-                reply.println("Merges require Committer status.");
-                return;
-            }
-        }
-
-        // Execute merge
+        // Run a final jcheck to ensure the change has been properly reviewed
         try {
             var sanitizedUrl = URLEncoder.encode(pr.repository().getWebUrl().toString(), StandardCharsets.UTF_8);
             var path = scratchPath.resolve("pr.integrate").resolve(sanitizedUrl);
 
             var prInstance = new PullRequestInstance(path, pr);
@@ -90,10 +76,36 @@
             var sanitizedUrl = URLEncoder.encode(pr.repository().getWebUrl().toString(), StandardCharsets.UTF_8);
             var path = scratchPath.resolve("pr.integrate").resolve(sanitizedUrl);
 
             var prInstance = new PullRequestInstance(path, pr);
             var hash = prInstance.commit(censusInstance.namespace(), censusInstance.configuration().census().domain(), null);
+            var issues = prInstance.executeChecks(hash, censusInstance);
+            if (!issues.getIssues().isEmpty()) {
+                reply.print("Your merge request cannot be fulfilled at this time, as ");
+                reply.println("your changes failed the final jcheck:");
+                issues.getIssues().stream()
+                      .map(line -> " * " + line)
+                      .forEach(reply::println);
+                return;
+            }
+
+            // Finally check if the author is allowed to perform the actual push
+            if (!pr.getTitle().startsWith("Merge")) {
+                if (!ProjectPermissions.mayCommit(censusInstance, pr.getAuthor())) {
+                    reply.println(ReadyForSponsorTracker.addIntegrationMarker(pr.getHeadHash()));
+                    reply.println("Your change (at version " + pr.getHeadHash() + ") is now ready to be sponsored by a Committer.");
+                    pr.addLabel("sponsor");
+                    return;
+                }
+            } else {
+                if (!ProjectPermissions.mayCommit(censusInstance, pr.getAuthor())) {
+                    reply.println("Merges require Committer status.");
+                    return;
+                }
+            }
+
+            // Rebase and push it!
             var rebasedHash = prInstance.rebase(hash, reply);
             if (rebasedHash.isPresent()) {
                 reply.println("Pushed as commit " + rebasedHash.get().hex() + ".");
                 prInstance.localRepo().push(rebasedHash.get(), pr.repository().getUrl(), pr.getTargetRef());
                 pr.setState(PullRequest.State.CLOSED);
@@ -97,14 +109,15 @@
                 reply.println("Pushed as commit " + rebasedHash.get().hex() + ".");
                 prInstance.localRepo().push(rebasedHash.get(), pr.repository().getUrl(), pr.getTargetRef());
                 pr.setState(PullRequest.State.CLOSED);
                 pr.addLabel("integrated");
             }
-        } catch (IOException e) {
+
+        } catch (Exception e) {
             log.throwing("IntegrateCommand", "handle", e);
-            reply.println("An error occurred during integration");
-            throw new UncheckedIOException(e);
+            reply.println("An error occurred during final integration jcheck");
+            throw new RuntimeException(e);
         }
     }
 
     @Override
     public String description() {
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java
@@ -99,10 +99,11 @@
     @Override
     public void visit(SelfReviewIssue e)
     {
         messages.add("Self-reviews are not allowed");
         failedChecks.add(e.check().getClass());
+        readyForReview = false;
     }
 
     @Override
     public void visit(TooFewReviewersIssue e) {
         messages.add(String.format("Too few reviewers found (have %d, need at least %d)", e.numActual(), e.numRequired()));
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.census.*;
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.jcheck.JCheck;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.*;
 
 import java.io.*;
 import java.nio.file.Path;
@@ -209,6 +210,19 @@
             patch.target().path().ifPresent(ret::add);
             patch.source().path().ifPresent(ret::add);
         }
         return ret;
     }
+
+    PullRequestCheckIssueVisitor executeChecks(Hash localHash, CensusInstance censusInstance) throws Exception {
+        var checks = JCheck.checks(localRepo(), censusInstance.census(), localHash);
+        var visitor = new PullRequestCheckIssueVisitor(checks);
+        try (var issues = JCheck.check(localRepo(), censusInstance.census(), CommitMessageParsers.v1, "HEAD~1..HEAD",
+                                       localHash, new HashMap<>(), new HashSet<>())) {
+            for (var issue : issues) {
+                issue.accept(visitor);
+            }
+        }
+
+        return visitor;
+    }
 }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -59,15 +59,15 @@
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Check the status
             TestBotRunner.runPeriodicItems(checkBot);
 
-            // Verify that the check failed
+            // Verify that the check succeeded
             var checks = pr.getChecks(editHash);
             assertEquals(1, checks.size());
             var check = checks.get("jcheck");
-            assertEquals(CheckStatus.FAILURE, check.status());
+            assertEquals(CheckStatus.SUCCESS, check.status());
 
             // The PR should now be ready for review
             assertTrue(pr.getLabels().contains("rfr"));
             assertFalse(pr.getLabels().contains("ready"));
 
@@ -362,15 +362,15 @@
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Check the status
             TestBotRunner.runPeriodicItems(checkBot);
 
-            // Verify that the check failed
+            // Verify that the check passed
             var checks = pr.getChecks(editHash);
             assertEquals(1, checks.size());
             var check = checks.get("jcheck");
-            assertEquals(CheckStatus.FAILURE, check.status());
+            assertEquals(CheckStatus.SUCCESS, check.status());
 
             // The PR should now be ready for review
             assertTrue(pr.getLabels().contains("rfr"));
             assertFalse(pr.getLabels().contains("ready"));
 
@@ -408,10 +408,16 @@
             TestBotRunner.runPeriodicItems(checkBot);
 
             // The PR is now neither ready for review nor integration
             assertFalse(pr.getLabels().contains("rfr"));
             assertFalse(pr.getLabels().contains("ready"));
+
+            // The check should now be failing
+            checks = pr.getChecks(addedHash);
+            assertEquals(1, checks.size());
+            check = checks.get("jcheck");
+            assertEquals(CheckStatus.FAILURE, check.status());
         }
     }
 
     @Test
     void individualReviewComments(TestInfo testInfo) throws IOException {
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
@@ -28,10 +28,11 @@
 
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
 import java.nio.file.Files;
+import java.util.stream.Collectors;
 
 import static org.junit.jupiter.api.Assertions.*;
 
 class IntegrateTests {
     @Test
@@ -176,11 +177,11 @@
             assertEquals(1, error);
         }
     }
 
     @Test
-    void failedCheck(TestInfo testInfo) throws IOException {
+    void notReviewed(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
@@ -200,10 +201,44 @@
 
             // Attempt a merge
             pr.addComment("/integrate");
             TestBotRunner.runPeriodicItems(mergeBot);
 
+            // The bot should reply with an error message
+            var error = pr.getComments().stream()
+                          .filter(comment -> comment.body().contains("merge request cannot be fulfilled at this time"))
+                          .filter(comment -> comment.body().contains("failed the final jcheck"))
+                          .count();
+            assertEquals(1, error, pr.getComments().stream().map(Comment::body).collect(Collectors.joining("\n---\n")));
+        }
+    }
+
+    @Test
+    void failedCheck(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.host().getCurrentUserDetails().id());
+            var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.getUrl(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "trailing whitespace   ");
+            localRepo.push(editHash, author.getUrl(), "refs/heads/edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+
+            // Attempt a merge
+            pr.addComment("/integrate");
+            TestBotRunner.runPeriodicItems(mergeBot);
+
             // The bot should reply with an error message
             var error = pr.getComments().stream()
                           .filter(comment -> comment.body().contains("merge request cannot be fulfilled at this time"))
                           .filter(comment -> comment.body().contains("status check"))
                           .filter(comment -> comment.body().contains("did not complete successfully"))
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
@@ -224,12 +224,12 @@
             var masterHash = localRepo.resolve("master").orElseThrow();
             assertFalse(CheckableRepository.hasBeenEdited(localRepo));
             localRepo.push(masterHash, author.getUrl(), "master", true);
 
             // Make a change in another branch that will not pass jcheck
-            var otherHash = CheckableRepository.appendAndCommit(localRepo, "Change in other",
-                                                                "Unreviewed change in other");
+            var otherHash = CheckableRepository.appendAndCommit(localRepo, "Change in other with trails..   ",
+                                                                "Bad change in other");
             localRepo.push(otherHash, author.getUrl(), "other", true);
 
             // Go back to the original master
             localRepo.checkout(masterHash, true);
 
