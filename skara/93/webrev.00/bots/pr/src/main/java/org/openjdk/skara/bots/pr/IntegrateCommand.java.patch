diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
@@ -69,25 +69,11 @@
         if (pr.getLabels().contains("rejected")) {
             reply.println("The change is currently blocked from integration by a rejection.");
             return;
         }
 
-        if (!pr.getTitle().startsWith("Merge")) {
-            if (!ProjectPermissions.mayCommit(censusInstance, pr.getAuthor())) {
-                reply.println(ReadyForSponsorTracker.addIntegrationMarker(pr.getHeadHash()));
-                reply.println("Your change (at version " + pr.getHeadHash() + ") is now ready to be sponsored by a Committer.");
-                pr.addLabel("sponsor");
-                return;
-            }
-        } else {
-            if (!ProjectPermissions.mayCommit(censusInstance, pr.getAuthor())) {
-                reply.println("Merges require Committer status.");
-                return;
-            }
-        }
-
-        // Execute merge
+        // Run a final jcheck to ensure the change has been properly reviewed
         try {
             var sanitizedUrl = URLEncoder.encode(pr.repository().getWebUrl().toString(), StandardCharsets.UTF_8);
             var path = scratchPath.resolve("pr.integrate").resolve(sanitizedUrl);
 
             var prInstance = new PullRequestInstance(path, pr);
@@ -90,10 +76,36 @@
             var sanitizedUrl = URLEncoder.encode(pr.repository().getWebUrl().toString(), StandardCharsets.UTF_8);
             var path = scratchPath.resolve("pr.integrate").resolve(sanitizedUrl);
 
             var prInstance = new PullRequestInstance(path, pr);
             var hash = prInstance.commit(censusInstance.namespace(), censusInstance.configuration().census().domain(), null);
+            var issues = prInstance.executeChecks(hash, censusInstance);
+            if (!issues.getIssues().isEmpty()) {
+                reply.print("Your merge request cannot be fulfilled at this time, as ");
+                reply.println("your changes failed the final jcheck:");
+                issues.getIssues().stream()
+                      .map(line -> " * " + line)
+                      .forEach(reply::println);
+                return;
+            }
+
+            // Finally check if the author is allowed to perform the actual push
+            if (!pr.getTitle().startsWith("Merge")) {
+                if (!ProjectPermissions.mayCommit(censusInstance, pr.getAuthor())) {
+                    reply.println(ReadyForSponsorTracker.addIntegrationMarker(pr.getHeadHash()));
+                    reply.println("Your change (at version " + pr.getHeadHash() + ") is now ready to be sponsored by a Committer.");
+                    pr.addLabel("sponsor");
+                    return;
+                }
+            } else {
+                if (!ProjectPermissions.mayCommit(censusInstance, pr.getAuthor())) {
+                    reply.println("Merges require Committer status.");
+                    return;
+                }
+            }
+
+            // Rebase and push it!
             var rebasedHash = prInstance.rebase(hash, reply);
             if (rebasedHash.isPresent()) {
                 reply.println("Pushed as commit " + rebasedHash.get().hex() + ".");
                 prInstance.localRepo().push(rebasedHash.get(), pr.repository().getUrl(), pr.getTargetRef());
                 pr.setState(PullRequest.State.CLOSED);
@@ -97,14 +109,15 @@
                 reply.println("Pushed as commit " + rebasedHash.get().hex() + ".");
                 prInstance.localRepo().push(rebasedHash.get(), pr.repository().getUrl(), pr.getTargetRef());
                 pr.setState(PullRequest.State.CLOSED);
                 pr.addLabel("integrated");
             }
-        } catch (IOException e) {
+
+        } catch (Exception e) {
             log.throwing("IntegrateCommand", "handle", e);
-            reply.println("An error occurred during integration");
-            throw new UncheckedIOException(e);
+            reply.println("An error occurred during final integration jcheck");
+            throw new RuntimeException(e);
         }
     }
 
     @Override
     public String description() {
