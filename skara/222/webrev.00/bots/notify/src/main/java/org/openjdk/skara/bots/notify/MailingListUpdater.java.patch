diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -42,27 +42,29 @@
     private final EmailAddress sender;
     private final EmailAddress author;
     private final boolean includeBranch;
     private final Mode mode;
     private final Map<String, String> headers;
+    private final Pattern allowedAuthorDomains;
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.notify");
 
     enum Mode {
         ALL,
         PR,
         PR_ONLY
     }
 
     MailingListUpdater(MailingList list, EmailAddress recipient, EmailAddress sender, EmailAddress author,
-                       boolean includeBranch, Mode mode, Map<String, String> headers) {
+                       boolean includeBranch, Mode mode, Map<String, String> headers, Pattern allowedAuthorDomains) {
         this.list = list;
         this.recipient = recipient;
         this.sender = sender;
         this.author = author;
         this.includeBranch = includeBranch;
+        this.allowedAuthorDomains = allowedAuthorDomains;
     }
 
     private String patchToText(Patch patch) {
         if (patch.status().isAdded()) {
             return "+ " + patch.target().path().orElseThrow();
@@ -99,11 +101,17 @@
         return writer.toString();
     }
 
     private EmailAddress commitsToAuthor(List<Commit> commits) {
         var commit = commits.get(commits.size() - 1);
-        return EmailAddress.from(commit.committer().name(), commit.committer().email());
+        var commitAddress = EmailAddress.from(commit.committer().name(), commit.committer().email());
+        var allowedAuthorMatcher = allowedAuthorDomains.matcher(commitAddress.domain());
+        if (!allowedAuthorMatcher.matches()) {
+            return sender;
+        } else {
+            return commitAddress;
+        }
     }
 
     private String commitsToSubject(HostedRepository repository, List<Commit> commits, Branch branch) {
         var subject = new StringBuilder();
         subject.append(repository.repositoryType().shortName());
