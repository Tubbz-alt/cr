diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
@@ -88,10 +88,24 @@
         for (var updater : updaters) {
             updater.handleCommits(repository, newCommits, branch);
         }
     }
 
+    private Optional<OpenJDKTag> existingPrevious(OpenJDKTag tag, Set<OpenJDKTag> allJdkTags) {
+        while (true) {
+            var candidate = tag.previous();
+            if (candidate.isEmpty()) {
+                return Optional.empty();
+            }
+            tag = candidate.get();
+            if (!allJdkTags.contains(tag)) {
+                continue;
+            }
+            return Optional.of(tag);
+        }
+    }
+
     private void handleTags(Repository localRepo, UpdateHistory history) throws IOException {
         var tags = localRepo.tags();
         var newTags = tags.stream()
                           .filter(tag -> !history.hasTag(tag))
                           .collect(Collectors.toList());
@@ -102,20 +116,25 @@
                 tags.forEach(history::addTag);
             }
             return;
         }
 
-        var jdkTags = newTags.stream()
+        var allJdkTags = tags.stream()
+                             .map(OpenJDKTag::create)
+                             .filter(Optional::isPresent)
+                             .map(Optional::get)
+                             .collect(Collectors.toSet());
+        var newJdkTags = newTags.stream()
                              .map(OpenJDKTag::create)
                              .filter(Optional::isPresent)
                              .map(Optional::get)
                              .sorted(Comparator.comparingInt(OpenJDKTag::buildNum))
                              .collect(Collectors.toList());
 
-        for (var tag : jdkTags) {
-            var previous = tag.previous();
-            if (!previous.isPresent()) {
+        for (var tag : newJdkTags) {
+            var previous = existingPrevious(tag, allJdkTags);
+            if (previous.isEmpty()) {
                 log.warning("No previous tag found for '" + tag.tag() + "' - ignoring");
                 continue;
             }
             var commits = localRepo.commits(previous.get().tag() + ".." + tag.tag()).asList();
             if (commits.size() == 0) {
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -121,29 +121,46 @@
             assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
             localRepo.fetch(repo.getUrl(), "history:history");
             localRepo.tag(editHash, "jdk-12+2", "Added tag 2", "Duke", "duke@openjdk.java.net");
+            var editHash2 = CheckableRepository.appendAndCommit(localRepo, "Another line", "34567890: Even more fixes");
+            localRepo.tag(editHash2, "jdk-12+4", "Added tag 3", "Duke", "duke@openjdk.java.net");
             localRepo.pushAll(repo.getUrl());
 
             TestBotRunner.runPeriodicItems(notifyBot);
             var jsonFiles = findJsonFiles(jsonFolder, "");
-            assertEquals(2, jsonFiles.size());
+            assertEquals(3, jsonFiles.size());
 
             for (var file : jsonFiles) {
                 var jsonData = Files.readString(file, StandardCharsets.UTF_8);
                 var json = JSON.parse(jsonData);
-                assertEquals(1, json.asArray().size());
-                assertEquals(List.of("23456789"), json.asArray().get(0).get("issue").asArray().stream()
-                                                      .map(JSONValue::asString)
-                                                      .collect(Collectors.toList()));
 
                 if (json.asArray().get(0).contains("date")) {
+                    assertEquals(2, json.asArray().size());
+                    assertEquals(List.of("23456789"), json.asArray().get(0).get("issue").asArray().stream()
+                                                          .map(JSONValue::asString)
+                                                          .collect(Collectors.toList()));
                     assertEquals(repo.getWebUrl(editHash).toString(), json.asArray().get(0).get("url").asString());
                     assertEquals("team", json.asArray().get(0).get("build").asString());
+                    assertEquals(List.of("34567890"), json.asArray().get(1).get("issue").asArray().stream()
+                                                          .map(JSONValue::asString)
+                                                          .collect(Collectors.toList()));
+                    assertEquals(repo.getWebUrl(editHash2).toString(), json.asArray().get(1).get("url").asString());
+                    assertEquals("team", json.asArray().get(1).get("build").asString());
                 } else {
-                    assertEquals("b02", json.asArray().get(0).get("build").asString());
+                    assertEquals(1, json.asArray().size());
+                    if (json.asArray().get(0).get("build").asString().equals("b02")) {
+                        assertEquals(List.of("23456789"), json.asArray().get(0).get("issue").asArray().stream()
+                                                              .map(JSONValue::asString)
+                                                              .collect(Collectors.toList()));
+                    } else {
+                        assertEquals("b04", json.asArray().get(0).get("build").asString());
+                        assertEquals(List.of("34567890"), json.asArray().get(0).get("issue").asArray().stream()
+                                                              .map(JSONValue::asString)
+                                                              .collect(Collectors.toList()));
+                    }
                 }
             }
         }
     }
 
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/OpenJDKTag.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/OpenJDKTag.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/OpenJDKTag.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/OpenJDKTag.java
@@ -104,11 +104,11 @@
      * Build number.
      *
      * @return
      */
     public int buildNum() {
-        return Integer.valueOf(buildNum);
+        return Integer.parseInt(buildNum);
     }
 
     /**
      * Tag of the previous build (if any).
      *
@@ -124,6 +124,27 @@
         var formattedBuildNum = String.format(buildPrefix.equals("+") ? "%d" : "%02d", previousBuildNum);
         var tagName = prefix + buildPrefix + formattedBuildNum;
         var tag = new Tag(tagName);
         return create(tag);
     }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        OpenJDKTag that = (OpenJDKTag) o;
+        return tag.equals(that.tag) &&
+                prefix.equals(that.prefix) &&
+                version.equals(that.version) &&
+                buildPrefix.equals(that.buildPrefix) &&
+                buildNum.equals(that.buildNum);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(tag, prefix, version, buildPrefix, buildNum);
+    }
 }
