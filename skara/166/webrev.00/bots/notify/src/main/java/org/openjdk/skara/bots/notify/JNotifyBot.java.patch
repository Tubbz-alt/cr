diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
@@ -88,10 +88,24 @@
         for (var updater : updaters) {
             updater.handleCommits(repository, newCommits, branch);
         }
     }
 
+    private Optional<OpenJDKTag> existingPrevious(OpenJDKTag tag, Set<OpenJDKTag> allJdkTags) {
+        while (true) {
+            var candidate = tag.previous();
+            if (candidate.isEmpty()) {
+                return Optional.empty();
+            }
+            tag = candidate.get();
+            if (!allJdkTags.contains(tag)) {
+                continue;
+            }
+            return Optional.of(tag);
+        }
+    }
+
     private void handleTags(Repository localRepo, UpdateHistory history) throws IOException {
         var tags = localRepo.tags();
         var newTags = tags.stream()
                           .filter(tag -> !history.hasTag(tag))
                           .collect(Collectors.toList());
@@ -102,20 +116,25 @@
                 tags.forEach(history::addTag);
             }
             return;
         }
 
-        var jdkTags = newTags.stream()
+        var allJdkTags = tags.stream()
+                             .map(OpenJDKTag::create)
+                             .filter(Optional::isPresent)
+                             .map(Optional::get)
+                             .collect(Collectors.toSet());
+        var newJdkTags = newTags.stream()
                              .map(OpenJDKTag::create)
                              .filter(Optional::isPresent)
                              .map(Optional::get)
                              .sorted(Comparator.comparingInt(OpenJDKTag::buildNum))
                              .collect(Collectors.toList());
 
-        for (var tag : jdkTags) {
-            var previous = tag.previous();
-            if (!previous.isPresent()) {
+        for (var tag : newJdkTags) {
+            var previous = existingPrevious(tag, allJdkTags);
+            if (previous.isEmpty()) {
                 log.warning("No previous tag found for '" + tag.tag() + "' - ignoring");
                 continue;
             }
             var commits = localRepo.commits(previous.get().tag() + ".." + tag.tag()).asList();
             if (commits.size() == 0) {
