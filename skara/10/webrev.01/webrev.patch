diff a/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java b/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
@@ -31,14 +32,18 @@
 
 import java.io.IOException;
 import java.net.*;
 import java.nio.file.*;
 import java.util.*;
+import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 import java.util.logging.Level;
 
 public class GitJCheck {
+
+    private static final Pattern urlPattern = Pattern.compile("^https?://.*", Pattern.CASE_INSENSITIVE);
+
     public static void main(String[] args) throws Exception {
         var flags = List.of(
             Option.shortcut("r")
                   .fullname("rev")
                   .describe("REV")
@@ -154,11 +158,13 @@
                 return config.isEmpty() ? fallback : config.get(0);
             } catch (IOException e) {
                 return fallback;
             }
         });
-        var census = Files.exists(Path.of(endpoint)) ? Census.parse(Path.of(endpoint)) : Census.from(URI.create(endpoint));
+        var census = !isURL(endpoint)
+                ? Census.parse(Path.of(endpoint))
+                : Census.from(URI.create(endpoint));
         var isLocal = arguments.contains("local");
         if (!isLocal) {
             var lines = repo.config("jcheck.local");
             if (lines.size() == 1) {
                 var value = lines.get(0).toUpperCase();
@@ -169,7 +177,10 @@
                 error.accept(visitor);
             }
         }
     }
+
+    private static boolean isURL(String s) {
+        return urlPattern.matcher(s).matches();
+    }
 }
