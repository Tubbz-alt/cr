diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunner.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunner.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunner.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunner.java
@@ -175,11 +175,10 @@
                     log.finest("Waiting for flighted tasks");
                 }
             }
             try {
                 Thread.sleep(1);
-                watchdog();
             } catch (InterruptedException e) {
                 log.warning("Exception during queue drain");
                 log.throwing("BotRunner", "drain", e);
             }
         }
@@ -257,11 +256,14 @@
             log.log(Level.FINE, "Done processing incoming rest request", TaskPhases.END);
         }
     }
 
     public void run() {
-        log.info("Starting BotRunner execution, will run forever.");
+        run(Duration.ofDays(10 * 365));
+    }
+
+    public void run(Duration timeout) {
         log.info("Periodic task interval: " + config.scheduledExecutionPeriod());
         log.info("Concurrency: " + config.concurrency());
 
         RestReceiver restReceiver = null;
         if (config.restReceiverPort().isPresent()) {
@@ -278,11 +280,11 @@
                                      config.scheduledExecutionPeriod().toMillis(), TimeUnit.MILLISECONDS);
         executor.scheduleAtFixedRate(this::checkPeriodicItems, 0,
                                      config.scheduledExecutionPeriod().toMillis(), TimeUnit.MILLISECONDS);
 
         try {
-            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);
+            executor.awaitTermination(timeout.toMillis(), TimeUnit.MILLISECONDS);
         } catch (InterruptedException e) {
             e.printStackTrace();
         }
 
         if (restReceiver != null) {
diff a/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java b/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java
--- a/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java
+++ b/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java
@@ -274,16 +274,15 @@
         Assertions.assertFalse(item6.hasRun);
         assertTrue(item7.hasRun);
     }
 
     @Test
-    @DisabledOnOs(OS.WINDOWS)
     void watchdogTrigger() throws TimeoutException {
         var countdownLatch = new CountDownLatch(1);
         var item = new TestBlockedWorkItem(countdownLatch);
         var bot = new TestBot(item);
-        var runner = new BotRunner(config("{ \"runner\": { \"watchdog\": \"PT0.01S\" } }"), List.of(bot));
+        var runner = new BotRunner(config("{ \"runner\": { \"watchdog\": \"PT0.01S\", \"interval\": \"PT0.001S\" } }"), List.of(bot));
 
         var errors = new ArrayList<String>();
         var log = Logger.getLogger("org.openjdk.skara.bot");
         log.addHandler(new Handler() {
             @Override
@@ -300,11 +299,11 @@
             @Override
             public void close() throws SecurityException {
             }
         });
 
-        assertThrows(TimeoutException.class, () -> runner.runOnce(Duration.ofMillis(100)));
+        runner.run(Duration.ofMillis(100));
         assertTrue(errors.size() > 0);
-        assertTrue(errors.size() <= 10);
+        assertTrue(errors.size() <= 100);
         countdownLatch.countDown();
     }
 }
