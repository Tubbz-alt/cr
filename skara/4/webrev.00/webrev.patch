diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -36,29 +37,36 @@
     private final CheckWorkItem workItem;
     private final PullRequest pr;
     private final PullRequestInstance prInstance;
     private final List<Comment> comments;
     private final List<Review> reviews;
+    private final Set<String> labels;
     private final CensusInstance censusInstance;
+    private final Map<String, String> blockingLabels;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
     private final String progressMarker = "<!-- Anything below this marker will be automatically updated, please do not edit manually! -->";
     private final String mergeReadyMarker = "<!-- PullRequestBot merge is ready comment -->";
     private final Pattern mergeSourcePattern = Pattern.compile("^Merge ([-/\\w]+):([-\\w]+$)");
-    private CheckRun(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments, List<Review> reviews, CensusInstance censusInstance) {
+    private final Set<String> newLabels;
+
+    private CheckRun(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
+                     List<Review> reviews, Set<String> labels, CensusInstance censusInstance, Map<String, String> blockingLabels) {
         this.workItem = workItem;
         this.pr = pr;
         this.prInstance = prInstance;
         this.comments = comments;
         this.reviews = reviews;
+        this.labels = new HashSet<>(labels);
+        this.newLabels = new HashSet<>(labels);
         this.censusInstance = censusInstance;
+        this.blockingLabels = blockingLabels;
     }
 
     static void execute(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
-                        List<Review> reviews, CensusInstance censusInstance) {
-        var run = new CheckRun(workItem, pr, prInstance, comments, reviews, censusInstance);
+                        List<Review> reviews, Set<String> labels, CensusInstance censusInstance, Map<String, String> blockingLabels) {
+        var run = new CheckRun(workItem, pr, prInstance, comments, reviews, labels, censusInstance, blockingLabels);
         run.checkStatus();
     }
 
     // For unknown contributors, check that all commits have the same name and email
     private boolean checkCommitAuthor(List<Commit> commits) throws IOException {
@@ -139,10 +147,16 @@
                             "Merge `project`:`branch` to allow verification of the merge contents.");
                 }
             }
         }
 
+        for (var blocker : blockingLabels.entrySet()) {
+            if (labels.contains(blocker.getKey())) {
+                ret.add(blocker.getValue());
+            }
+        }
+
         return ret;
     }
 
     private PullRequestCheckIssueVisitor executeChecks(Hash localHash) throws Exception {
         log.fine("Changes committed to local repository, executing checks...");
@@ -182,19 +196,19 @@
             return;
         }
 
         // Additional errors are not allowed
         if (!additionalErrors.isEmpty()) {
-            pr.removeLabel("rfr");
+            newLabels.remove("rfr");
             return;
         }
 
         // Check if the visitor found any issues that should be resolved before reviewing
         if (visitor.isReadyForReview()) {
-            pr.addLabel("rfr");
+            newLabels.add("rfr");
         } else {
-            pr.removeLabel("rfr");
+            newLabels.remove("rfr");
         }
     }
 
     private String getRole(String username) {
         var project = censusInstance.project();
@@ -458,24 +472,27 @@
             var commit = prInstance.localRepo().lookup(localHash).orElseThrow();
             var commitMessage = String.join("\n", commit.message());
             updateMergeReadyComment(checkBuilder.build().status() == CheckStatus.SUCCESS, commitMessage,
                                     comments, reviews, rebasePossible);
             if (checkBuilder.build().status() == CheckStatus.SUCCESS) {
-                pr.addLabel("ready");
+                newLabels.add("ready");
+            } else {
+                newLabels.remove("ready");
             }
             if (!rebasePossible) {
-                pr.addLabel("outdated");
+                newLabels.add("outdated");
             } else {
-                pr.removeLabel("outdated");
+                newLabels.remove("outdated");
             }
 
             // Calculate current metadata to avoid unnecessary future checks
-            var metadata = workItem.getMetadata(pr.getTitle(), updatedBody, pr.getComments(), reviews, censusInstance, pr.getTargetHash());
+            var metadata = workItem.getMetadata(pr.getTitle(), updatedBody, pr.getComments(), reviews, newLabels, censusInstance, pr.getTargetHash());
             checkBuilder.metadata(metadata);
         } catch (Exception e) {
             log.throwing("CommitChecker", "checkStatus", e);
-            var metadata = workItem.getMetadata(pr.getTitle(), pr.getBody(), pr.getComments(), reviews, censusInstance, pr.getTargetHash());
+            newLabels.remove("ready");
+            var metadata = workItem.getMetadata(pr.getTitle(), pr.getBody(), pr.getComments(), reviews, newLabels, censusInstance, pr.getTargetHash());
             checkBuilder.metadata(metadata);
             checkBuilder.title("Exception occurred during jcheck");
             checkBuilder.summary(e.getMessage());
             checkBuilder.complete(false);
         }
@@ -480,10 +496,19 @@
             checkBuilder.complete(false);
         }
         var check = checkBuilder.build();
         pr.updateCheck(check);
-        if (checkBuilder.build().status() != CheckStatus.SUCCESS) {
-            pr.removeLabel("ready");
+
+        // Synchronize the wanted set of labels
+        for (var newLabel : newLabels) {
+            if (!labels.contains(newLabel)) {
+                pr.addLabel(newLabel);
+            }
+        }
+        for (var oldLabel : labels) {
+            if (!newLabels.contains(oldLabel)) {
+                pr.removeLabel(oldLabel);
+            }
         }
     }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
@@ -37,18 +38,20 @@
 
 class CheckWorkItem implements WorkItem {
     private final PullRequest pr;
     private final HostedRepository censusRepo;
     private final String censusRef;
+    private final Map<String, String> blockingLabels;
 
     private final Pattern metadataComments = Pattern.compile("<!-- (add|remove) contributor");
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
-    CheckWorkItem(PullRequest pr, HostedRepository censusRepo, String censusRef) {
+    CheckWorkItem(PullRequest pr, HostedRepository censusRepo, String censusRef, Map<String, String> blockingLabels) {
         this.pr = pr;
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
+        this.blockingLabels = blockingLabels;
     }
 
     private String encodeReviewer(HostUserDetails reviewer, CensusInstance censusInstance) {
         var census = censusInstance.census();
         var project = censusInstance.project();
@@ -64,11 +66,12 @@
                     project.isReviewer(userName, censusVersion) + project.isCommitter(userName, censusVersion) +
                     project.isAuthor(userName, censusVersion);
         }
     }
 
-    String getMetadata(String title, String body, List<Comment> comments, List<Review> reviews, CensusInstance censusInstance, Hash target) {
+    String getMetadata(String title, String body, List<Comment> comments, List<Review> reviews, Set<String> labels,
+                       CensusInstance censusInstance, Hash target) {
         try {
             var approverString = reviews.stream()
                                         .filter(review -> review.verdict == Review.Verdict.APPROVED)
                                         .map(review -> encodeReviewer(review.reviewer, censusInstance) + review.hash.hex())
                                         .sorted()
@@ -75,15 +79,19 @@
             var commentString = comments.stream()
                                         .filter(comment -> comment.author().id().equals(pr.repository().host().getCurrentUserDetails().id()))
                                         .flatMap(comment -> comment.body().lines())
                                         .filter(line -> metadataComments.matcher(line).find())
                                         .collect(Collectors.joining());
+            var labelString = labels.stream()
+                                    .sorted()
+                                    .collect(Collectors.joining());
             var digest = MessageDigest.getInstance("SHA-256");
             digest.update(title.getBytes(StandardCharsets.UTF_8));
             digest.update(body.getBytes(StandardCharsets.UTF_8));
             digest.update(approverString.getBytes(StandardCharsets.UTF_8));
             digest.update(commentString.getBytes(StandardCharsets.UTF_8));
+            digest.update(labelString.getBytes(StandardCharsets.UTF_8));
             digest.update(target.hex().getBytes(StandardCharsets.UTF_8));
 
             return Base64.getUrlEncoder().encodeToString(digest.digest());
         } catch (NoSuchAlgorithmException e) {
             throw new RuntimeException("Cannot find SHA-256");
@@ -89,14 +96,14 @@
         } catch (NoSuchAlgorithmException e) {
             throw new RuntimeException("Cannot find SHA-256");
         }
     }
 
-    private boolean currentCheckValid(CensusInstance censusInstance, List<Comment> comments, List<Review> reviews) {
+    private boolean currentCheckValid(CensusInstance censusInstance, List<Comment> comments, List<Review> reviews, Set<String> labels) {
         var hash = pr.getHeadHash();
         var targetHash = pr.getTargetHash();
-        var metadata = getMetadata(pr.getTitle(), pr.getBody(),comments, reviews, censusInstance, targetHash);
+        var metadata = getMetadata(pr.getTitle(), pr.getBody(),comments, reviews, labels, censusInstance, targetHash);
         var currentChecks = pr.getChecks(hash);
 
         if (currentChecks.containsKey("jcheck")) {
             var check = currentChecks.get("jcheck");
             // Check if the currently running check seems stale - perhaps the checker failed to complete
@@ -147,16 +155,16 @@
     public void run(Path scratchPath) {
         // First determine if the current state of the PR has already been checked
         var census = CensusInstance.create(censusRepo, censusRef, scratchPath.resolve("census"), pr);
         var comments = pr.getComments();
         var reviews = pr.getReviews();
+        var labels = new HashSet(pr.getLabels());
 
-        if (!currentCheckValid(census, comments, reviews)) {
+        if (!currentCheckValid(census, comments, reviews, labels)) {
             try {
                 var prInstance = new PullRequestInstance(scratchPath.resolve("pr"), pr);
-                CheckRun.execute(this, pr, prInstance, comments, reviews, census);
+                CheckRun.execute(this, pr, prInstance, comments, reviews, labels, census, blockingLabels);
             } catch (IOException e) {
                 throw new UncheckedIOException(e);
             }
         }
     }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
@@ -34,24 +35,25 @@
     private final HostedRepository remoteRepo;
     private final HostedRepository censusRepo;
     private final String censusRef;
     private final Map<String, List<Pattern>> labelPatterns;
     private final Map<String, String> externalCommands;
+    private final Map<String, String> blockingLabels;
     private final ConcurrentMap<Hash, Boolean> currentLabels = new ConcurrentHashMap<>();
 
     PullRequestBot(HostedRepository repo, HostedRepository censusRepo, String censusRef, Map<String,
-            List<Pattern>> labelPatterns, Map<String, String> externalCommands) {
+            List<Pattern>> labelPatterns, Map<String, String> externalCommands, Map<String, String> blockingLabels) {
         remoteRepo = repo;
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
         this.labelPatterns = labelPatterns;
         this.externalCommands = externalCommands;
+        this.blockingLabels = blockingLabels;
     }
 
     PullRequestBot(HostedRepository repo, HostedRepository censusRepo, String censusRef) {
-        this(repo, censusRepo, censusRef, Map.of(), Map.of());
+        this(repo, censusRepo, censusRef, Map.of(), Map.of(), Map.of());
     }
 
     private List<WorkItem> getWorkItems(List<PullRequest> pullRequests) {
         var ret = new LinkedList<WorkItem>();
 
@@ -54,11 +56,11 @@
 
     private List<WorkItem> getWorkItems(List<PullRequest> pullRequests) {
         var ret = new LinkedList<WorkItem>();
 
         for (var pr : pullRequests) {
-            ret.add(new CheckWorkItem(pr, censusRepo, censusRef));
+            ret.add(new CheckWorkItem(pr, censusRepo, censusRef, blockingLabels));
             ret.add(new CommandWorkItem(pr, censusRepo, censusRef, externalCommands));
             ret.add(new LabelerWorkItem(pr, labelPatterns, currentLabels));
         }
 
         return ret;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
@@ -45,10 +45,17 @@
             for (var command : specific.get("external").fields()) {
                 external.put(command.name(), command.value().asString());
             }
         }
 
+        var blockers = new HashMap<String, String>();
+        if (specific.contains("blockers")) {
+            for (var blocker : specific.get("blockers").fields()) {
+                blockers.put(blocker.name(), blocker.value().asString());
+            }
+        }
+
         for (var repo : specific.get("repositories").fields()) {
             var censusName = repo.value().get("census").asString();
             var censusRepo = configuration.repository(specific.get("census").get(censusName).get("repository").asString());
             var censusRef = specific.get("census").get(censusName).get("ref").asString();
 
@@ -60,11 +67,11 @@
                                         .map(Pattern::compile)
                                         .collect(Collectors.toList());
                     labelPatterns.put(label.name(), patterns);
                 }
             }
-            var bot = new PullRequestBot(configuration.repository(repo.name()), censusRepo, censusRef, labelPatterns, external);
+            var bot = new PullRequestBot(configuration.repository(repo.name()), censusRepo, censusRef, labelPatterns, external, blockers);
             ret.add(bot);
         }
 
         return ret;
     }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -27,10 +27,11 @@
 
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
 import java.nio.file.Files;
+import java.util.Map;
 
 import static org.junit.jupiter.api.Assertions.*;
 
 class CheckTests {
     @Test
@@ -540,7 +542,55 @@
 
             // The PR should not be flagged as outdated
             assertFalse(pr.getLabels().contains("outdated"));
         }
     }
+
+    @Test
+    void blockingLabel(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var reviewer = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.host().getCurrentUserDetails().id())
+                                           .addReviewer(reviewer.host().getCurrentUserDetails().id());
+            var checkBot = new PullRequestBot(author, censusBuilder.build(), "master", Map.of(), Map.of(),
+                                              Map.of("block", "Test Blocker"));
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            localRepo.push(masterHash, author.getUrl(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.getUrl(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+            pr.addLabel("block");
+
+            // Check the status
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // Verify that the check failed
+            var checks = pr.getChecks(editHash);
+            assertEquals(1, checks.size());
+            var check = checks.get("jcheck");
+            assertEquals(CheckStatus.FAILURE, check.status());
+            assertTrue(check.summary().orElseThrow().contains("Test Blocker"));
+
+            // The PR should not yet be ready for review
+            assertTrue(pr.getLabels().contains("block"));
+            assertFalse(pr.getLabels().contains("rfr"));
+            assertFalse(pr.getLabels().contains("ready"));
+
+            // Check the status again
+            pr.removeLabel("block");
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // The PR should now be ready for review
+            assertTrue(pr.getLabels().contains("rfr"));
+            assertFalse(pr.getLabels().contains("ready"));
+        }
+    }
 }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/LabelerTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/LabelerTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/LabelerTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/LabelerTests.java
@@ -44,11 +44,11 @@
             var labelPatterns = Map.of("test1", List.of(Pattern.compile("a.txt")),
                                        "test2", List.of(Pattern.compile("b.txt")));
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.host().getCurrentUserDetails().id())
                                            .addReviewer(reviewer.host().getCurrentUserDetails().id());
-            var labelBot = new PullRequestBot(author, censusBuilder.build(), "master", labelPatterns, Map.of());
+            var labelBot = new PullRequestBot(author, censusBuilder.build(), "master", labelPatterns, Map.of(), Map.of());
 
             // Populate the projects repository
             var localRepoFolder = tempFolder.path();
             var localRepo = CheckableRepository.init(localRepoFolder, author.getRepositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
