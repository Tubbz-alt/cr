diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -36,29 +37,36 @@
     private final CheckWorkItem workItem;
     private final PullRequest pr;
     private final PullRequestInstance prInstance;
     private final List<Comment> comments;
     private final List<Review> reviews;
+    private final Set<String> labels;
     private final CensusInstance censusInstance;
+    private final Map<String, String> blockingLabels;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
     private final String progressMarker = "<!-- Anything below this marker will be automatically updated, please do not edit manually! -->";
     private final String mergeReadyMarker = "<!-- PullRequestBot merge is ready comment -->";
     private final Pattern mergeSourcePattern = Pattern.compile("^Merge ([-/\\w]+):([-\\w]+$)");
-    private CheckRun(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments, List<Review> reviews, CensusInstance censusInstance) {
+    private final Set<String> newLabels;
+
+    private CheckRun(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
+                     List<Review> reviews, Set<String> labels, CensusInstance censusInstance, Map<String, String> blockingLabels) {
         this.workItem = workItem;
         this.pr = pr;
         this.prInstance = prInstance;
         this.comments = comments;
         this.reviews = reviews;
+        this.labels = new HashSet<>(labels);
+        this.newLabels = new HashSet<>(labels);
         this.censusInstance = censusInstance;
+        this.blockingLabels = blockingLabels;
     }
 
     static void execute(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
-                        List<Review> reviews, CensusInstance censusInstance) {
-        var run = new CheckRun(workItem, pr, prInstance, comments, reviews, censusInstance);
+                        List<Review> reviews, Set<String> labels, CensusInstance censusInstance, Map<String, String> blockingLabels) {
+        var run = new CheckRun(workItem, pr, prInstance, comments, reviews, labels, censusInstance, blockingLabels);
         run.checkStatus();
     }
 
     // For unknown contributors, check that all commits have the same name and email
     private boolean checkCommitAuthor(List<Commit> commits) throws IOException {
@@ -139,10 +147,16 @@
                             "Merge `project`:`branch` to allow verification of the merge contents.");
                 }
             }
         }
 
+        for (var blocker : blockingLabels.entrySet()) {
+            if (labels.contains(blocker.getKey())) {
+                ret.add(blocker.getValue());
+            }
+        }
+
         return ret;
     }
 
     private PullRequestCheckIssueVisitor executeChecks(Hash localHash) throws Exception {
         log.fine("Changes committed to local repository, executing checks...");
@@ -182,19 +196,19 @@
             return;
         }
 
         // Additional errors are not allowed
         if (!additionalErrors.isEmpty()) {
-            pr.removeLabel("rfr");
+            newLabels.remove("rfr");
             return;
         }
 
         // Check if the visitor found any issues that should be resolved before reviewing
         if (visitor.isReadyForReview()) {
-            pr.addLabel("rfr");
+            newLabels.add("rfr");
         } else {
-            pr.removeLabel("rfr");
+            newLabels.remove("rfr");
         }
     }
 
     private String getRole(String username) {
         var project = censusInstance.project();
@@ -458,24 +472,27 @@
             var commit = prInstance.localRepo().lookup(localHash).orElseThrow();
             var commitMessage = String.join("\n", commit.message());
             updateMergeReadyComment(checkBuilder.build().status() == CheckStatus.SUCCESS, commitMessage,
                                     comments, reviews, rebasePossible);
             if (checkBuilder.build().status() == CheckStatus.SUCCESS) {
-                pr.addLabel("ready");
+                newLabels.add("ready");
+            } else {
+                newLabels.remove("ready");
             }
             if (!rebasePossible) {
-                pr.addLabel("outdated");
+                newLabels.add("outdated");
             } else {
-                pr.removeLabel("outdated");
+                newLabels.remove("outdated");
             }
 
             // Calculate current metadata to avoid unnecessary future checks
-            var metadata = workItem.getMetadata(pr.getTitle(), updatedBody, pr.getComments(), reviews, censusInstance, pr.getTargetHash());
+            var metadata = workItem.getMetadata(pr.getTitle(), updatedBody, pr.getComments(), reviews, newLabels, censusInstance, pr.getTargetHash());
             checkBuilder.metadata(metadata);
         } catch (Exception e) {
             log.throwing("CommitChecker", "checkStatus", e);
-            var metadata = workItem.getMetadata(pr.getTitle(), pr.getBody(), pr.getComments(), reviews, censusInstance, pr.getTargetHash());
+            newLabels.remove("ready");
+            var metadata = workItem.getMetadata(pr.getTitle(), pr.getBody(), pr.getComments(), reviews, newLabels, censusInstance, pr.getTargetHash());
             checkBuilder.metadata(metadata);
             checkBuilder.title("Exception occurred during jcheck");
             checkBuilder.summary(e.getMessage());
             checkBuilder.complete(false);
         }
@@ -480,10 +496,19 @@
             checkBuilder.complete(false);
         }
         var check = checkBuilder.build();
         pr.updateCheck(check);
-        if (checkBuilder.build().status() != CheckStatus.SUCCESS) {
-            pr.removeLabel("ready");
+
+        // Synchronize the wanted set of labels
+        for (var newLabel : newLabels) {
+            if (!labels.contains(newLabel)) {
+                pr.addLabel(newLabel);
+            }
+        }
+        for (var oldLabel : labels) {
+            if (!newLabels.contains(oldLabel)) {
+                pr.removeLabel(oldLabel);
+            }
         }
     }
 }
