diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -763,10 +763,13 @@
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain a note
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
             assertEquals(1, archiveContainsCount(archiveFolder.path(), "This PR has been reviewed.*more changes are needed"));
+            if (author.host().supportsReviewBody()) {
+                assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 1"));
+            }
 
             // Then approve it
             reviewedPr.addReview(Review.Verdict.APPROVED, "Reason 2");
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
@@ -773,10 +776,13 @@
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain another note
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
             assertEquals(1, archiveContainsCount(archiveFolder.path(), "This PR.*approved"));
+            if (author.host().supportsReviewBody()) {
+                assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 2"));
+            }
 
             // Yet another change
             reviewedPr.addReview(Review.Verdict.DISAPPROVED, "Reason 3");
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
@@ -782,9 +789,11 @@
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain another note
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
             assertEquals(2, archiveContainsCount(archiveFolder.path(), "This PR.*more changes"));
+            if (author.host().supportsReviewBody()) {
+                assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 3"));
+            }
         }
     }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -452,12 +452,14 @@
 
             // Calculate and update the status message if needed
             var statusMessage = getStatusMessage(activeReviews, visitor);
             var updatedBody = updateStatusMessage(statusMessage);
 
-            // Post / update approval messages
-            updateReviewedMessages(comments, allReviews);
+            // Post / update approval messages (only needed if the review itself can't contain a body)
+            if (!pr.repository().host().supportsReviewBody()) {
+                updateReviewedMessages(comments, allReviews);
+            }
 
             var commit = prInstance.localRepo().lookup(localHash).orElseThrow();
             var commitMessage = String.join("\n", commit.message());
             updateMergeReadyComment(checkBuilder.build().status() == CheckStatus.SUCCESS, commitMessage,
                                     comments, activeReviews, rebasePossible);
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -30,10 +30,11 @@
 import java.io.IOException;
 import java.nio.file.Files;
 import java.util.Map;
 
 import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assumptions.assumeTrue;
 
 class CheckTests {
     @Test
     void simpleCommit(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
@@ -374,10 +375,13 @@
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
+            // This test is only relevant on hosts not supporting proper review comment bodies
+            assumeTrue(!author.host().supportsReviewBody());
+
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.host().getCurrentUserDetails().id())
                                            .addReviewer(reviewer.host().getCurrentUserDetails().id());
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master");
 
diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -423,11 +423,11 @@
             var pr = getPullRequest(uri, credentials, arguments.at(1));
 
             if (action.equals("integrate")) {
                 pr.addComment("/integrate");
             } else if (action.equals("approve")) {
-                pr.addReview(Review.Verdict.APPROVED);
+                pr.addReview(Review.Verdict.APPROVED, "Looks good!");
             } else {
                 throw new IllegalStateException("unexpected action: " + action);
             }
         } else if (action.equals("list")) {
             var remoteRepo = getHostedRepositoryFor(uri, credentials);
diff a/host/src/main/java/org/openjdk/skara/host/Host.java b/host/src/main/java/org/openjdk/skara/host/Host.java
--- a/host/src/main/java/org/openjdk/skara/host/Host.java
+++ b/host/src/main/java/org/openjdk/skara/host/Host.java
@@ -27,10 +27,11 @@
 public interface Host {
     boolean isValid();
     HostedRepository getRepository(String name);
     HostUserDetails getUserDetails(String username);
     HostUserDetails getCurrentUserDetails();
+    boolean supportsReviewBody();
 
     static Host from(URI uri, PersonalAccessToken pat) {
         return HostFactory.createFromURI(uri, pat);
     }
 
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
@@ -175,7 +176,11 @@
                 throw new IllegalStateException("No credentials present");
             }
         }
         return currentUser;
     }
+
+    @Override
+    public boolean supportsReviewBody() {
+        return true;
+    }
 }
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
+++ b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabHost.java
@@ -113,10 +113,16 @@
     public HostUserDetails getCurrentUserDetails() {
         var details = request.get("user").execute().asObject();
         return parseUserDetails(details);
     }
 
+    @Override
+    public boolean supportsReviewBody() {
+        // GitLab CE does not support this
+        return false;
+    }
+
     boolean isProjectForkComplete(String name) {
         var project = getProjectInfo(name);
         if (project.contains("import_status")) {
             var status = project.get("import_status").asString();
             switch (status) {
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -103,10 +103,15 @@
     @Override
     public HostUserDetails getCurrentUserDetails() {
         return data.users.get(currentUser);
     }
 
+    @Override
+    public boolean supportsReviewBody() {
+        return true;
+    }
+
     void close() {
         if (currentUser == 0) {
             data.folders.forEach(TemporaryDirectory::close);
         }
     }
