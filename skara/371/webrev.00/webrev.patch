diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
@@ -21,15 +21,20 @@
  * questions.
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.email.EmailAddress;
-import org.openjdk.skara.forge.*;
+import org.openjdk.skara.forge.HostedRepository;
+import org.openjdk.skara.forge.PullRequest;
 import org.openjdk.skara.network.URIBuilder;
-import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.vcs.Repository;
+import org.openjdk.skara.vcs.Hash;
 import org.openjdk.skara.webrev.Webrev;
 import org.openjdk.skara.version.Version;
+import org.openjdk.skara.vcs.openjdk.Issue;
+import org.openjdk.skara.jcheck.JCheckConfiguration;
+import org.openjdk.skara.issuetracker.IssueTracker;
 
 import java.io.*;
 import java.net.URI;
 import java.net.http.*;
 import java.nio.file.*;
@@ -55,14 +60,27 @@
         this.author = author;
     }
 
     private void generate(PullRequest pr, Repository localRepository, Path folder, Hash base, Hash head) throws IOException {
         Files.createDirectories(folder);
-        Webrev.repository(localRepository)
-              .output(folder)
-              .version(Version.fromManifest().orElse("unknown"))
-              .generate(base, head);
+        var builder = Webrev.repository(localRepository)
+                            .output(folder)
+                            .version(Version.fromManifest().orElse("unknown"));
+
+        var issue = Issue.fromString(pr.title());
+        if (issue.isPresent()) {
+            var conf = JCheckConfiguration.from(localRepository);
+            var project = conf.general().jbs() != null ? conf.general().jbs() : conf.general().project();
+            var id = issue.get().id();
+            var issueTracker = IssueTracker.from("jira", URI.create("https://bugs.openjdk.java.net"));
+            var hostedIssue = issueTracker.project(project).issue(id);
+            if (hostedIssue.isPresent()) {
+                builder = builder.issue(hostedIssue.get().webUrl().toString());
+            }
+        }
+
+        builder.generate(base, head);
     }
 
     private String generatePlaceholder(PullRequest pr, Hash base, Hash head) {
         return "This file was too large to be included in the published webrev, and has been replaced with " +
                 "this placeholder message. It is possible to generate the original content locally by " +
