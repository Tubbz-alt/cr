diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -7,11 +7,13 @@
 import org.openjdk.skara.vcs.*;
 
 import java.net.URI;
 import java.nio.charset.StandardCharsets;
 import java.security.*;
+import java.time.*;
 import java.util.*;
+import java.util.logging.Logger;
 import java.util.stream.*;
 
 class ReviewArchive {
     private final PullRequest pr;
     private final EmailAddress sender;
@@ -20,10 +22,12 @@
 
     private final List<Comment> comments = new ArrayList<>();
     private final List<Review> reviews = new ArrayList<>();
     private final List<ReviewComment> reviewComments = new ArrayList<>();
 
+    private final Logger log = Logger.getLogger("org.openjdk.skara.bots.mlbridge");
+
     ReviewArchive(PullRequest pr, EmailAddress sender, Hash base, Hash head) {
         this.pr = pr;
         this.sender = sender;
         this.base = base;
         this.head = head;
@@ -170,19 +174,29 @@
 
     private String getStableMessageId(EmailAddress uniqueMessageId) {
         return uniqueMessageId.localPart().split("\\.")[0];
     }
 
-    List<Email> generateNewEmails(List<Email> sentEmails, Repository localRepo, URI issueTracker, String issuePrefix, WebrevStorage.WebrevGenerator webrevGenerator, WebrevNotification webrevNotification, HostUserToEmailAuthor hostUserToEmailAuthor, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole) {
+    List<Email> generateNewEmails(List<Email> sentEmails, Duration cooldown, Repository localRepo, URI issueTracker, String issuePrefix, WebrevStorage.WebrevGenerator webrevGenerator, WebrevNotification webrevNotification, HostUserToEmailAuthor hostUserToEmailAuthor, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole) {
+        var ret = new ArrayList<Email>();
         var allItems = generateArchiveItems(sentEmails, localRepo, issueTracker, issuePrefix, hostUserToEmailAuthor, hostUserToUserName, hostUserToRole, webrevGenerator, webrevNotification);
         var sentItemIds = sentItemIds(sentEmails);
         var unsentItems = allItems.stream()
                                   .filter(item -> !sentItemIds.contains(getStableMessageId(getUniqueMessageId(item.id()))))
                                   .collect(Collectors.toList());
+        if (unsentItems.isEmpty()) {
+            return ret;
+        }
+        var lastUpdate = unsentItems.stream()
+                                    .map(ArchiveItem::updatedAt)
+                                    .max(ZonedDateTime::compareTo).orElseThrow();
+        if (lastUpdate.plus(cooldown).isAfter(ZonedDateTime.now())) {
+            log.info("Waiting for new content to settle down - last update was at " + lastUpdate);
+            return ret;
+        }
 
         var combinedItems = collapsableItems(unsentItems);
-        var ret = new ArrayList<Email>();
         for (var itemList : combinedItems) {
             // Simply combine all message bodies
             var body = new StringBuilder();
             for (var item : itemList) {
                 if (body.length() > 0) {
