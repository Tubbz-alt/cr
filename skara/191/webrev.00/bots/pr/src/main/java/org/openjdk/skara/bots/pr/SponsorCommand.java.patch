diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
@@ -70,25 +70,49 @@
         try {
             var sanitizedUrl = URLEncoder.encode(pr.repository().getWebUrl().toString(), StandardCharsets.UTF_8);
             var path = scratchPath.resolve("pr.sponsor").resolve(sanitizedUrl);
 
             var prInstance = new PullRequestInstance(path, pr);
-            var hash = prInstance.commit(censusInstance.namespace(), censusInstance.configuration().census().domain(),
+            var localHash = prInstance.commit(censusInstance.namespace(), censusInstance.configuration().census().domain(),
                                          comment.author().id());
-            var rebasedHash = prInstance.rebase(hash, reply);
-            if (rebasedHash.isPresent()) {
+            var rebaseMessage = new StringWriter();
+            var rebaseWriter = new PrintWriter(rebaseMessage);
+            var rebasedHash = prInstance.rebase(localHash, rebaseWriter);
+            if (rebasedHash.isEmpty()) {
+                return;
+            } else {
+                if (!rebasedHash.get().equals(localHash)) {
+                    localHash = rebasedHash.get();
+                }
+            }
+
+            var issues = prInstance.executeChecks(localHash, censusInstance);
+            if (!issues.getMessages().isEmpty()) {
+                reply.print("Your merge request cannot be fulfilled at this time, as ");
+                reply.println("your changes failed the final jcheck:");
+                issues.getMessages().stream()
+                      .map(line -> " * " + line)
+                      .forEach(reply::println);
+                return;
+            }
+
+            if (!localHash.equals(pr.getTargetHash())) {
+                reply.println(rebaseMessage.toString());
                 reply.println("Pushed as commit " + rebasedHash.get().hex() + ".");
                 prInstance.localRepo().push(rebasedHash.get(), pr.repository().getUrl(), pr.getTargetRef());
                 pr.setState(PullRequest.State.CLOSED);
                 pr.addLabel("integrated");
                 pr.removeLabel("sponsor");
                 pr.removeLabel("ready");
+            } else {
+                reply.print("Warning! This commit did not result in any changes! ");
+                reply.println("No push attempt will be made.");
             }
-        } catch (IOException e) {
+        } catch (Exception e) {
             log.throwing("SponsorCommand", "handle", e);
             reply.println("An error occurred during sponsored integration");
-            throw new UncheckedIOException(e);
+            throw new RuntimeException(e);
         }
     }
 
     @Override
     public String description() {
