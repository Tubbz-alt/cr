diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
@@ -75,12 +75,23 @@
         try {
             var sanitizedUrl = URLEncoder.encode(pr.repository().getWebUrl().toString(), StandardCharsets.UTF_8);
             var path = scratchPath.resolve("pr.integrate").resolve(sanitizedUrl);
 
             var prInstance = new PullRequestInstance(path, pr);
-            var hash = prInstance.commit(censusInstance.namespace(), censusInstance.configuration().census().domain(), null);
-            var issues = prInstance.executeChecks(hash, censusInstance);
+            var localHash = prInstance.commit(censusInstance.namespace(), censusInstance.configuration().census().domain(), null);
+            var rebaseMessage = new StringWriter();
+            var rebaseWriter = new PrintWriter(rebaseMessage);
+            var rebasedHash = prInstance.rebase(localHash, rebaseWriter);
+            if (rebasedHash.isEmpty()) {
+                return;
+            } else {
+                if (!rebasedHash.get().equals(localHash)) {
+                    localHash = rebasedHash.get();
+                }
+            }
+
+            var issues = prInstance.executeChecks(localHash, censusInstance);
             if (!issues.getMessages().isEmpty()) {
                 reply.print("Your merge request cannot be fulfilled at this time, as ");
                 reply.println("your changes failed the final jcheck:");
                 issues.getMessages().stream()
                       .map(line -> " * " + line)
@@ -102,22 +113,21 @@
                     return;
                 }
             }
 
             // Rebase and push it!
-            var rebasedHash = prInstance.rebase(hash, reply);
-            if (rebasedHash.isPresent() && !rebasedHash.get().equals(pr.getTargetHash())) {
+            if (!localHash.equals(pr.getTargetHash())) {
+                reply.println(rebaseMessage.toString());
                 reply.println("Pushed as commit " + rebasedHash.get().hex() + ".");
                 prInstance.localRepo().push(rebasedHash.get(), pr.repository().getUrl(), pr.getTargetRef());
                 pr.setState(PullRequest.State.CLOSED);
                 pr.addLabel("integrated");
                 pr.removeLabel("ready");
-
         } catch (Exception e) {
             log.throwing("IntegrateCommand", "handle", e);
             reply.println("An error occurred during final integration jcheck");
             throw new RuntimeException(e);
         }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
@@ -27,11 +27,12 @@
 import org.openjdk.skara.vcs.Repository;
 
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
-import java.nio.file.Files;
+import java.nio.file.*;
+import java.util.Set;
 import java.util.stream.Collectors;
 
 import static org.junit.jupiter.api.Assertions.*;
 
 class IntegrateTests {
@@ -191,21 +192,29 @@
             var integrator = credentials.getHostedRepository();
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.host().getCurrentUserDetails().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
-            // Populate the projects repository
-            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
+            // Populate the projects repository - but without any checks enabled
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType(), Path.of("appendable.txt"),
+                                                     Set.of());
             var masterHash = localRepo.resolve("master").orElseThrow();
             assertFalse(CheckableRepository.hasBeenEdited(localRepo));
             localRepo.push(masterHash, author.getUrl(), "master", true);
 
             // Make a change with a corresponding PR
+            // Now enable checks
+            localRepo.checkout(masterHash, true);
+            CheckableRepository.init(tempFolder.path(), author.getRepositoryType(), Path.of("appendable.txt"),
+                                     Set.of("author", "reviewers", "whitespace"));
+            var updatedHash = localRepo.resolve("HEAD").orElseThrow();
+            localRepo.push(updatedHash, author.getUrl(), "master", true);
+
             // Attempt a merge
             pr.addComment("/integrate");
             TestBotRunner.runPeriodicItems(mergeBot);
 
             // The bot should reply with an error message
