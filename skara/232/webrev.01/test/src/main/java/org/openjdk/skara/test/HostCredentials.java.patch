diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -23,12 +23,12 @@
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.issuetracker.*;
-import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.json.*;
+import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.proxy.HttpProxy;
 import org.openjdk.skara.vcs.*;
 
 import org.junit.jupiter.api.TestInfo;
 
@@ -42,10 +42,11 @@
 
 public class HostCredentials implements AutoCloseable {
     private final String testName;
     private final Credentials credentials;
     private final List<PullRequest> pullRequestsToBeClosed = new ArrayList<>();
+    private final List<Issue> issuesToBeClosed = new ArrayList<>();
     private HostedRepository credentialsLock;
     private int nextHostIndex;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.test");
 
@@ -139,10 +140,47 @@
         public String getNamespaceName() {
             return config.get("namespace").asString();
         }
     }
 
+    private static class JiraCredentials implements Credentials {
+        private final JSONObject config;
+
+        JiraCredentials(JSONObject config) {
+            this.config = config;
+        }
+
+        @Override
+        public Forge createRepositoryHost(int userIndex) {
+            throw new RuntimeException("not supported");
+        }
+
+        @Override
+        public IssueTracker createIssueHost(int userIndex) {
+            var hostUri = URIBuilder.base(config.get("host").asString()).build();
+            var users = config.get("users").asArray();
+            var pat = new Credential(users.get(userIndex).get("name").asString(),
+                                     users.get(userIndex).get("pat").asString());
+            return IssueTracker.from("jira", hostUri, pat, null);
+        }
+
+        @Override
+        public HostedRepository getHostedRepository(Forge host) {
+            return host.repository(config.get("project").asString());
+        }
+
+        @Override
+        public IssueProject getIssueProject(IssueTracker host) {
+            return host.project(config.get("project").asString());
+        }
+
+        @Override
+        public String getNamespaceName() {
+            return config.get("namespace").asString();
+        }
+    }
+
     private static class TestCredentials implements Credentials {
         private final List<TestHost> hosts = new ArrayList<>();
         private final List<HostUser> users = List.of(
                 new HostUser(1, "user1", "User Number 1"),
                 new HostUser(2, "user2", "User Number 2"),
@@ -198,10 +236,12 @@
         switch (entry.get("type").asString()) {
             case "gitlab":
                 return new GitLabCredentials(entry);
             case "github":
                 return new GitHubCredentials(entry, credentialsPath);
+            case "jira":
+                return new JiraCredentials(entry);
             default:
                 throw new RuntimeException("Unknown entry type: " + entry.get("type").asString());
         }
     }
 
@@ -320,19 +360,28 @@
 
     public PullRequest createPullRequest(HostedRepository hostedRepository, String targetRef, String sourceRef, String title) {
         return createPullRequest(hostedRepository, targetRef, sourceRef, title, false);
     }
 
+    public Issue createIssue(IssueProject issueProject, String title) {
+        var issue = issueProject.createIssue(title, List.of());
+        issuesToBeClosed.add(issue);
+        return issue;
+    }
+
     public CensusBuilder getCensusBuilder() {
         return CensusBuilder.create(credentials.getNamespaceName());
     }
 
     @Override
     public void close() {
         for (var pr : pullRequestsToBeClosed) {
             pr.setState(PullRequest.State.CLOSED);
         }
+        for (var issue : issuesToBeClosed) {
+            issue.setState(Issue.State.CLOSED);
+        }
         if (credentialsLock != null) {
             try {
                 releaseLock(credentialsLock);
                 log.info("Released credentials lock for " + testName);
             } catch (IOException e) {
