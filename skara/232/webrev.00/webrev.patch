diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
@@ -20,16 +20,17 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.issuetracker.jira;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.json.*;
 import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.JSON;
 
 import java.net.URI;
+import java.util.Arrays;
 
 public class JiraHost implements IssueTracker {
     private final URI uri;
     private final RestRequest request;
 
@@ -40,10 +41,18 @@
                                 .setPath("/rest/api/2/")
                                 .build();
         request = new RestRequest(baseApi);
     }
 
+    JiraHost(URI uri, JiraVault jiraVault) {
+        this.uri = uri;
+        var baseApi = URIBuilder.base(uri)
+                                .setPath("/rest/api/2/")
+                                .build();
+        request = new RestRequest(baseApi, () -> Arrays.asList("Cookie", jiraVault.getCookie()));
+    }
+
     URI getUri() {
         return uri;
     }
 
     @Override
@@ -57,20 +66,40 @@
     @Override
     public IssueProject project(String name) {
         return new JiraProject(this, request, name);
     }
 
+    private JSONObject userData(String name) {
+        var data = request.get("user")
+                          .param("username", name)
+                          .execute();
+        return data.asObject();
+    }
+
     @Override
     public HostUser user(String username) {
         throw new RuntimeException("needs authentication; not implemented yet");
     }
 
     @Override
     public HostUser currentUser() {
-        throw new RuntimeException("needs authentication; not implemented yet");
+        var data = request.get("myself").execute();
+        var user = new HostUser(data.get("name").asString(),
+                                data.get("name").asString(),
+                                data.get("displayName").asString());
+        return user;
     }
 
     @Override
     public boolean isMemberOf(String groupId, HostUser user) {
-        throw new RuntimeException("not implemented yet");
+        var data = request.get("user")
+                          .param("username", user.id())
+                          .param("expand", "groups")
+                          .execute();
+        for (var group : data.get("groups").get("items").asArray()) {
+            if (group.get("name").asString().equals(groupId)) {
+                return true;
+            }
+        }
+        return false;
     }
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
@@ -22,22 +22,26 @@
  */
 package org.openjdk.skara.issuetracker.jira;
 
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.json.*;
 import org.openjdk.skara.network.*;
-import org.openjdk.skara.json.JSONValue;
 
 import java.net.URI;
 import java.time.ZonedDateTime;
+import java.time.format.DateTimeFormatter;
 import java.util.List;
+import java.util.stream.Collectors;
 
 public class JiraIssue implements Issue {
     private final JiraProject jiraProject;
     private final RestRequest request;
     private final JSONValue json;
 
+    private static final DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
+
     JiraIssue(JiraProject jiraProject, RestRequest request, JSONValue json) {
         this.jiraProject = jiraProject;
         this.request = request;
         this.json = json;
     }
@@ -64,11 +68,14 @@
         return json.get("fields").get("summary").asString();
     }
 
     @Override
     public void setTitle(String title) {
-        throw new RuntimeException("not implemented yet");
+        var query = JSON.object()
+                        .put("fields", JSON.object()
+                                           .put("summary", title));
+        request.put("").body(query).execute();
     }
 
     @Override
     public String body() {
         if (json.get("fields").get("description").isNull()) {
@@ -78,56 +85,102 @@
         }
     }
 
     @Override
     public void setBody(String body) {
-        throw new RuntimeException("not implemented yet");
+        var query = JSON.object()
+                        .put("fields", JSON.object()
+                                           .put("description", body));
+        request.put("").body(query).execute();
+    }
+
+    private Comment parseComment(JSONValue json) {
+        return new Comment(json.get("id").asString(),
+                           json.get("body").asString(),
+                           new HostUser(json.get("author").get("name").asString(),
+                                        json.get("author").get("name").asString(),
+                                        json.get("author").get("displayName").asString()),
+                           ZonedDateTime.parse(json.get("created").asString(), dateFormat),
+                           ZonedDateTime.parse(json.get("updated").asString(), dateFormat));
     }
 
     @Override
     public List<Comment> comments() {
-        throw new RuntimeException("not implemented yet");
+        var comments = request.get("/comment")
+                              .param("maxResults", "1000")
+                              .execute();
+        return comments.get("comments").stream()
+                       .map(this::parseComment)
+                       .collect(Collectors.toList());
     }
 
     @Override
     public Comment addComment(String body) {
-        throw new RuntimeException("not implemented yet");
+        var json = request.post("/comment")
+                          .body("body", body)
+                          .execute();
+        return parseComment(json);
     }
 
     @Override
     public Comment updateComment(String id, String body) {
-        throw new RuntimeException("not implemented yet");
+        var json = request.put("/comment/" + id)
+                          .body("body", body)
+                          .execute();
+        return parseComment(json);
     }
 
     @Override
     public ZonedDateTime createdAt() {
-        return ZonedDateTime.parse(json.get("fields").get("created").asString());
+        return ZonedDateTime.parse(json.get("fields").get("created").asString(), dateFormat);
     }
 
     @Override
     public ZonedDateTime updatedAt() {
-        return ZonedDateTime.parse(json.get("fields").get("updated").asString());
+        return ZonedDateTime.parse(json.get("fields").get("updated").asString(), dateFormat);
     }
 
     @Override
     public void setState(State state) {
-        throw new RuntimeException("not implemented yet");
+        var transitions = request.get("/transitions").execute();
+        var wantedStateName = state == State.CLOSED ? "Closed" : "Open";
+        for (var transition : transitions.get("transitions").asArray()) {
+            if (transition.get("to").get("name").asString().equals(wantedStateName)) {
+                var query = JSON.object()
+                                .put("transition", JSON.object()
+                                                       .put("id", transition.get("id").asString()));
+                request.post("/transitions")
+                       .body(query)
+                       .execute();
+                return;
+            }
+        }
     }
 
     @Override
     public void addLabel(String label) {
-        throw new RuntimeException("not implemented yet");
+        var query = JSON.object()
+                        .put("update", JSON.object()
+                                           .put("labels", JSON.array().add(JSON.object()
+                                                                               .put("add", label))));
+        request.put("").body(query).execute();
     }
 
     @Override
     public void removeLabel(String label) {
-        throw new RuntimeException("not implemented yet");
+        var query = JSON.object()
+                        .put("update", JSON.object()
+                                           .put("labels", JSON.array().add(JSON.object()
+                                                                               .put("remove", label))));
+        request.put("").body(query).execute();
     }
 
     @Override
     public List<String> labels() {
-        throw new RuntimeException("not implemented yet");
+        return json.get("fields").get("labels").stream()
+                   .map(JSONValue::asString)
+                   .collect(Collectors.toList());
     }
 
     @Override
     public URI webUrl() {
         return URIBuilder.base(jiraProject.webUrl())
@@ -135,13 +188,34 @@
                          .build();
     }
 
     @Override
     public List<HostUser> assignees() {
-        throw new RuntimeException("not implemented yet");
+        var assignee = json.get("fields").get("assignee");
+        if (assignee.isNull()) {
+            return List.of();
+        }
+
+        var user = new HostUser(assignee.get("name").asString(),
+                                assignee.get("name").asString(),
+                                assignee.get("displayName").asString());
+        return List.of(user);
     }
 
     @Override
     public void setAssignees(List<HostUser> assignees) {
-        throw new RuntimeException("not implemented yet");
+        String assignee;
+        switch (assignees.size()) {
+            case 0:
+                assignee = null;
+                break;
+            case 1:
+                assignee = assignees.get(0).id();
+                break;
+            default:
+                throw new RuntimeException("multiple assignees not supported");
+        }
+        request.put("/assignee")
+               .body("name", assignee)
+               .execute();
     }
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssueTrackerFactory.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssueTrackerFactory.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssueTrackerFactory.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssueTrackerFactory.java
@@ -23,10 +23,11 @@
 package org.openjdk.skara.issuetracker.jira;
 
 import org.openjdk.skara.host.Credential;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.json.JSONObject;
+import org.openjdk.skara.network.URIBuilder;
 
 import java.net.URI;
 
 public class JiraIssueTrackerFactory implements IssueTrackerFactory {
     @Override
@@ -37,9 +38,15 @@
     @Override
     public IssueTracker create(URI uri, Credential credential, JSONObject configuration) {
         if (credential == null) {
             return new JiraHost(uri);
         } else {
-            throw new RuntimeException("authentication not implemented yet");
+            if (credential.username().startsWith("https://")) {
+                var vaultUrl = URIBuilder.base(credential.username()).build();
+                var jiraVault = new JiraVault(vaultUrl, credential.password());
+                return new JiraHost(uri, jiraVault);
+            } else {
+                throw new RuntimeException("basic authentication not implemented yet");
+            }
         }
     }
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
@@ -21,27 +21,66 @@
  * questions.
  */
 package org.openjdk.skara.issuetracker.jira;
 
 import org.openjdk.skara.issuetracker.*;
-import org.openjdk.skara.json.JSON;
+import org.openjdk.skara.json.*;
 import org.openjdk.skara.network.*;
 
 import java.net.URI;
 import java.util.*;
 
 public class JiraProject implements IssueProject {
     private final JiraHost jiraHost;
     private final String projectName;
     private final RestRequest request;
 
+    private JSONObject projectMetadataCache = null;
+
     JiraProject(JiraHost host, RestRequest request, String projectName) {
         this.jiraHost = host;
         this.projectName = projectName;
         this.request = request;
     }
 
+    private JSONObject project() {
+        if (projectMetadataCache == null) {
+            projectMetadataCache = request.get("project/" + projectName).execute().asObject();
+        }
+        return projectMetadataCache;
+    }
+
+    private Map<String, String> issueTypes() {
+        var ret = new HashMap<String, String>();
+        for (var type : project().get("issueTypes").asArray()) {
+            ret.put(type.get("name").asString(), type.get("id").asString());
+        }
+        return ret;
+    }
+
+    private Map<String, String> components() {
+        var ret = new HashMap<String, String>();
+        for (var type : project().get("components").asArray()) {
+            ret.put(type.get("name").asString(), type.get("id").asString());
+        }
+        return ret;
+    }
+
+    private String projectId() {
+        return project().get("id").asString();
+    }
+
+    private String defaultIssueType() {
+        return issueTypes().values().stream()
+                           .min(Comparator.naturalOrder()).orElseThrow();
+    }
+
+    private String defaultComponent() {
+        return components().values().stream()
+                           .min(Comparator.naturalOrder()).orElseThrow();
+    }
+
     @Override
     public IssueTracker issueTracker() {
         return jiraHost;
     }
 
@@ -50,23 +89,39 @@
         return URIBuilder.base(jiraHost.getUri()).setPath("/projects/" + projectName).build();
     }
 
     @Override
     public Issue createIssue(String title, List<String> body) {
-        throw new RuntimeException("needs authentication; not implemented yet");
+        var query = JSON.object()
+                        .put("fields", JSON.object()
+                                           .put("project", JSON.object()
+                                                               .put("id", projectId()))
+                                           .put("issuetype", JSON.object()
+                                                                 .put("id", defaultIssueType()))
+                                           .put("components", JSON.array()
+                                                                  .add(JSON.object().put("id", defaultComponent())))
+                                           .put("summary", title)
+                                           .put("description", String.join("\n", body)));
+
+        var data = request.post("issue")
+                          .body(query)
+                          .execute();
+
+        return issue(data.get("key").asString()).orElseThrow();
     }
 
     @Override
     public Optional<Issue> issue(String id) {
         if (id.indexOf('-') < 0) {
             id = projectName.toUpperCase() + "-" + id;
         }
-        var issue = request.get("issue/" + id)
+        var issueRequest = request.restrict("issue/" + id);
+        var issue = issueRequest.get("")
                            .onError(r -> r.statusCode() == 404 ? JSON.object().put("NOT_FOUND", true) : null)
                            .execute();
         if (!issue.contains("NOT_FOUND")) {
-            return Optional.of(new JiraIssue(this, request, issue));
+            return Optional.of(new JiraIssue(this, issueRequest, issue));
         } else {
             return Optional.empty();
         }
     }
 
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraVault.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraVault.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraVault.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker.jira;
+
+import org.openjdk.skara.network.RestRequest;
+
+import java.net.URI;
+import java.time.*;
+import java.util.Arrays;
+import java.util.logging.Logger;
+
+class JiraVault {
+    private final RestRequest request;
+    private final Logger log = Logger.getLogger("org.openjdk.skara.issuetracker.jira");
+
+    private String cookie;
+    private Instant expires;
+
+    JiraVault(URI vaultUri, String vaultToken) {
+        request = new RestRequest(vaultUri, () -> Arrays.asList(
+                "X-Vault-Token", vaultToken
+        ));
+    }
+
+    String getCookie() {
+        if ((cookie == null) || Instant.now().isAfter(expires)) {
+            var result = request.get("").execute();
+            cookie = result.get("data").get("cookie.name").asString() + "=" + result.get("data").get("cookie.value").asString();
+            expires = Instant.now().plus(Duration.ofSeconds(result.get("lease_duration").asInt()).dividedBy(2));
+            log.info("Renewed Jira token (" + cookie + ") - expires " + expires);
+        }
+        return cookie;
+    }
+}
diff a/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java b/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
--- a/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
+++ b/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
@@ -25,18 +25,42 @@
 import org.openjdk.skara.test.HostCredentials;
 
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
+import java.util.List;
 
-import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.*;
 
 class IssueTrackerTests {
     @Test
     void isMemberOfNegativeTests(TestInfo info) throws IOException {
         try (var credentials = new HostCredentials(info)) {
             var host = credentials.getIssueProject().issueTracker();
             var madeUpGroupIdThatCannotContainTestMember = "1234567890";
             assertFalse(host.isMemberOf(madeUpGroupIdThatCannotContainTestMember, host.currentUser()));
         }
     }
+
+    @Test
+    void simple(TestInfo info) throws IOException {
+        try (var credentials = new HostCredentials(info)) {
+            var project = credentials.getIssueProject();
+            var issue = credentials.createIssue(project, "Test issue");
+            issue.setTitle("Updated title");
+            issue.setBody("This is now the body");
+            var comment = issue.addComment("This is a comment");
+            issue.updateComment(comment.id(), "Now it is updated");
+            issue.addLabel("label");
+            issue.addLabel("another");
+            issue.removeLabel("label");
+            issue.setAssignees(List.of(project.issueTracker().currentUser()));
+
+            var updated = project.issue(issue.id()).orElseThrow();
+            assertEquals(List.of("another"), updated.labels());
+            assertEquals(List.of(project.issueTracker().currentUser()), updated.assignees());
+            assertEquals(1, updated.comments().size());
+            assertEquals("Updated title", updated.title());
+            assertEquals("Now it is updated", updated.comments().get(0).body());
+        }
+    }
 }
diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -23,12 +23,12 @@
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.issuetracker.*;
-import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.json.*;
+import org.openjdk.skara.network.URIBuilder;
 import org.openjdk.skara.proxy.HttpProxy;
 import org.openjdk.skara.vcs.*;
 
 import org.junit.jupiter.api.TestInfo;
 
@@ -42,10 +42,11 @@
 
 public class HostCredentials implements AutoCloseable {
     private final String testName;
     private final Credentials credentials;
     private final List<PullRequest> pullRequestsToBeClosed = new ArrayList<>();
+    private final List<Issue> issuesToBeClosed = new ArrayList<>();
     private HostedRepository credentialsLock;
     private int nextHostIndex;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.test");
 
@@ -139,10 +140,47 @@
         public String getNamespaceName() {
             return config.get("namespace").asString();
         }
     }
 
+    private static class JiraCredentials implements Credentials {
+        private final JSONObject config;
+
+        JiraCredentials(JSONObject config) {
+            this.config = config;
+        }
+
+        @Override
+        public Forge createRepositoryHost(int userIndex) {
+            throw new RuntimeException("not supported");
+        }
+
+        @Override
+        public IssueTracker createIssueHost(int userIndex) {
+            var hostUri = URIBuilder.base(config.get("host").asString()).build();
+            var users = config.get("users").asArray();
+            var pat = new Credential(users.get(userIndex).get("name").asString(),
+                                     users.get(userIndex).get("pat").asString());
+            return IssueTracker.from("jira", hostUri, pat, null);
+        }
+
+        @Override
+        public HostedRepository getHostedRepository(Forge host) {
+            return host.repository(config.get("project").asString());
+        }
+
+        @Override
+        public IssueProject getIssueProject(IssueTracker host) {
+            return host.project(config.get("project").asString());
+        }
+
+        @Override
+        public String getNamespaceName() {
+            return config.get("namespace").asString();
+        }
+    }
+
     private static class TestCredentials implements Credentials {
         private final List<TestHost> hosts = new ArrayList<>();
         private final List<HostUser> users = List.of(
                 new HostUser(1, "user1", "User Number 1"),
                 new HostUser(2, "user2", "User Number 2"),
@@ -198,10 +236,12 @@
         switch (entry.get("type").asString()) {
             case "gitlab":
                 return new GitLabCredentials(entry);
             case "github":
                 return new GitHubCredentials(entry, credentialsPath);
+            case "jira":
+                return new JiraCredentials(entry);
             default:
                 throw new RuntimeException("Unknown entry type: " + entry.get("type").asString());
         }
     }
 
@@ -320,19 +360,28 @@
 
     public PullRequest createPullRequest(HostedRepository hostedRepository, String targetRef, String sourceRef, String title) {
         return createPullRequest(hostedRepository, targetRef, sourceRef, title, false);
     }
 
+    public Issue createIssue(IssueProject issueProject, String title) {
+        var issue = issueProject.createIssue(title, List.of());
+        issuesToBeClosed.add(issue);
+        return issue;
+    }
+
     public CensusBuilder getCensusBuilder() {
         return CensusBuilder.create(credentials.getNamespaceName());
     }
 
     @Override
     public void close() {
         for (var pr : pullRequestsToBeClosed) {
             pr.setState(PullRequest.State.CLOSED);
         }
+        for (var issue : issuesToBeClosed) {
+            issue.setState(Issue.State.CLOSED);
+        }
         if (credentialsLock != null) {
             try {
                 releaseLock(credentialsLock);
                 log.info("Released credentials lock for " + testName);
             } catch (IOException e) {
diff a/test/src/main/java/org/openjdk/skara/test/IssueData.java b/test/src/main/java/org/openjdk/skara/test/IssueData.java
--- a/test/src/main/java/org/openjdk/skara/test/IssueData.java
+++ b/test/src/main/java/org/openjdk/skara/test/IssueData.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.test;
 
+import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.*;
 
 import java.time.ZonedDateTime;
 import java.util.*;
 
@@ -31,8 +32,9 @@
     Issue.State state = Issue.State.OPEN;
     String body = "";
     String title = "";
     final List<Comment> comments = new ArrayList<>();
     final Set<String> labels = new HashSet<>();
+    final List<HostUser> assignees = new ArrayList<>();
     ZonedDateTime created = ZonedDateTime.now();
     ZonedDateTime lastUpdate = created;
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestIssue.java b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssue.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
@@ -168,13 +168,15 @@
         return URIBuilder.base(issueProject.webUrl()).appendPath(id).build();
     }
 
     @Override
     public List<HostUser> assignees() {
-        throw new RuntimeException("not implemented yet");
+        return new ArrayList<>(data.assignees);
     }
 
     @Override
     public void setAssignees(List<HostUser> assignees) {
-        throw new RuntimeException("not implemented yet");
+        data.assignees.clear();
+        data.assignees.addAll(assignees);
+        data.lastUpdate = ZonedDateTime.now();
     }
 }
