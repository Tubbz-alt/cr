diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
@@ -27,10 +27,11 @@
 import org.openjdk.skara.json.JSONValue;
 import org.openjdk.skara.vcs.Hash;
 
 import java.util.*;
 import java.util.concurrent.*;
+import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 class PullRequestBot implements Bot {
     private final HostedRepository remoteRepo;
     private final HostedRepository censusRepo;
@@ -36,15 +37,20 @@
     private final HostedRepository censusRepo;
     private final String censusRef;
     private final Map<String, List<Pattern>> labelPatterns;
     private final Map<String, String> externalCommands;
     private final Map<String, String> blockingLabels;
+    private final Set<String> readyLabels;
+    private final Map<String, Pattern> readyComments;
     private final ConcurrentMap<Hash, Boolean> currentLabels = new ConcurrentHashMap<>();
     private final PullRequestUpdateCache updateCache;
+    private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
-    PullRequestBot(HostedRepository repo, HostedRepository censusRepo, String censusRef, Map<String,
-            List<Pattern>> labelPatterns, Map<String, String> externalCommands, Map<String, String> blockingLabels) {
+    PullRequestBot(HostedRepository repo, HostedRepository censusRepo, String censusRef,
+                   Map<String, List<Pattern>> labelPatterns, Map<String, String> externalCommands,
+                   Map<String, String> blockingLabels, Set<String> readyLabels,
+                   Map<String, Pattern> readyComments) {
         remoteRepo = repo;
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
         this.labelPatterns = labelPatterns;
         this.externalCommands = externalCommands;
@@ -47,15 +53,47 @@
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
         this.labelPatterns = labelPatterns;
         this.externalCommands = externalCommands;
         this.blockingLabels = blockingLabels;
+        this.readyLabels = readyLabels;
+        this.readyComments = readyComments;
         this.updateCache = new PullRequestUpdateCache();
     }
 
     PullRequestBot(HostedRepository repo, HostedRepository censusRepo, String censusRef) {
-        this(repo, censusRepo, censusRef, Map.of(), Map.of(), Map.of());
+        this(repo, censusRepo, censusRef, Map.of(), Map.of(), Map.of(), Set.of(), Map.of());
+    }
+
+    private boolean isReady(PullRequest pr) {
+        var labels = new HashSet<>(pr.getLabels());
+        for (var readyLabel : readyLabels) {
+            if (!labels.contains(readyLabel)) {
+                log.fine("PR is not yet ready - missing label '" + readyLabel + "'");
+                return false;
+            }
+        }
+
+        var comments = pr.getComments();
+        for (var readyComment : readyComments.entrySet()) {
+            var commentFound = false;
+            for (var comment : comments) {
+                if (comment.author().userName().equals(readyComment.getKey())) {
+                    var matcher = readyComment.getValue().matcher(comment.body());
+                    if (matcher.find()) {
+                        commentFound = true;
+                        break;
+                    }
+                }
+            }
+            if (!commentFound) {
+                log.fine("PR is not yet ready - missing ready comment from '" + readyComment.getKey() +
+                                 "containing '" + readyComment.getValue().pattern() + "'");
+                return false;
+            }
+        }
+        return true;
     }
 
     private List<WorkItem> getWorkItems(List<PullRequest> pullRequests) {
         var ret = new LinkedList<WorkItem>();
 
@@ -59,10 +97,14 @@
     private List<WorkItem> getWorkItems(List<PullRequest> pullRequests) {
         var ret = new LinkedList<WorkItem>();
 
         for (var pr : pullRequests) {
             if (updateCache.needsUpdate(pr)) {
+                if (!isReady(pr)) {
+                    continue;
+                }
+
                 ret.add(new CheckWorkItem(pr, censusRepo, censusRef, blockingLabels));
                 ret.add(new CommandWorkItem(pr, censusRepo, censusRef, externalCommands));
                 ret.add(new LabelerWorkItem(pr, labelPatterns, currentLabels));
             }
         }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
@@ -52,10 +52,18 @@
             for (var blocker : specific.get("blockers").fields()) {
                 blockers.put(blocker.name(), blocker.value().asString());
             }
         }
 
+        var readyLabels = specific.get("ready").get("labels").stream()
+                                  .map(JSONValue::asString)
+                                  .collect(Collectors.toSet());
+        var readyComments = specific.get("ready").get("comments").stream()
+                                    .map(JSONValue::asObject)
+                                    .collect(Collectors.toMap(obj -> obj.get("user").asString(),
+                                                              obj -> Pattern.compile(obj.get("pattern").asString())));
+
         for (var repo : specific.get("repositories").fields()) {
             var censusName = repo.value().get("census").asString();
             var censusRepo = configuration.repository(specific.get("census").get(censusName).get("repository").asString());
             var censusRef = specific.get("census").get(censusName).get("ref").asString();
 
@@ -67,11 +75,12 @@
                                         .map(Pattern::compile)
                                         .collect(Collectors.toList());
                     labelPatterns.put(label.name(), patterns);
                 }
             }
-            var bot = new PullRequestBot(configuration.repository(repo.name()), censusRepo, censusRef, labelPatterns, external, blockers);
+            var bot = new PullRequestBot(configuration.repository(repo.name()), censusRepo, censusRef, labelPatterns,
+                                         external, blockers, readyLabels, readyComments);
             ret.add(bot);
         }
 
         return ret;
     }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -27,11 +27,12 @@
 
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
 import java.nio.file.Files;
-import java.util.Map;
+import java.util.*;
+import java.util.regex.Pattern;
 
 import static org.junit.jupiter.api.Assertions.*;
 import static org.junit.jupiter.api.Assumptions.assumeTrue;
 
 class CheckTests {
@@ -560,11 +561,11 @@
 
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.host().getCurrentUserDetails().id())
                                            .addReviewer(reviewer.host().getCurrentUserDetails().id());
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master", Map.of(), Map.of(),
-                                              Map.of("block", "Test Blocker"));
+                                              Map.of("block", "Test Blocker"), Set.of(), Map.of());
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.getUrl(), "master", true);
@@ -597,6 +598,92 @@
             // The PR should now be ready for review
             assertTrue(pr.getLabels().contains("rfr"));
             assertFalse(pr.getLabels().contains("ready"));
         }
     }
+
+    @Test
+    void missingReadyLabel(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var reviewer = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.host().getCurrentUserDetails().id())
+                                           .addReviewer(reviewer.host().getCurrentUserDetails().id());
+            var checkBot = new PullRequestBot(author, censusBuilder.build(), "master", Map.of(), Map.of(),
+                                              Map.of(), Set.of("good-to-go"), Map.of());
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            localRepo.push(masterHash, author.getUrl(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.getUrl(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+
+            // Check the status
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // Verify that no checks have been run
+            var checks = pr.getChecks(editHash);
+            assertEquals(0, checks.size());
+
+            // The PR should not yet be ready for review
+            assertFalse(pr.getLabels().contains("rfr"));
+
+            // Check the status again
+            pr.addLabel("good-to-go");
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // The PR should now be ready for review
+            assertTrue(pr.getLabels().contains("rfr"));
+        }
+    }
+
+    @Test
+    void missingReadyComment(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var reviewer = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.host().getCurrentUserDetails().id())
+                                           .addReviewer(reviewer.host().getCurrentUserDetails().id());
+            var checkBot = new PullRequestBot(author, censusBuilder.build(), "master", Map.of(), Map.of(),
+                                              Map.of(), Set.of(), Map.of(reviewer.host().getCurrentUserDetails().userName(), Pattern.compile("proceed")));
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            localRepo.push(masterHash, author.getUrl(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.getUrl(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+
+            // Check the status
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // Verify that no checks have been run
+            var checks = pr.getChecks(editHash);
+            assertEquals(0, checks.size());
+
+            // The PR should not yet be ready for review
+            assertFalse(pr.getLabels().contains("rfr"));
+
+            // Check the status again
+            var reviewerPr = reviewer.getPullRequest(pr.getId());
+            reviewerPr.addComment("proceed");
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // The PR should now be ready for review
+            assertTrue(pr.getLabels().contains("rfr"));
+        }
+    }
+
 }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/LabelerTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/LabelerTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/LabelerTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/LabelerTests.java
@@ -44,11 +44,11 @@
             var labelPatterns = Map.of("test1", List.of(Pattern.compile("a.txt")),
                                        "test2", List.of(Pattern.compile("b.txt")));
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.host().getCurrentUserDetails().id())
                                            .addReviewer(reviewer.host().getCurrentUserDetails().id());
-            var labelBot = new PullRequestBot(author, censusBuilder.build(), "master", labelPatterns, Map.of(), Map.of());
+            var labelBot = new PullRequestBot(author, censusBuilder.build(), "master", labelPatterns, Map.of(), Map.of(), Set.of(), Map.of());
 
             // Populate the projects repository
             var localRepoFolder = tempFolder.path();
             var localRepo = CheckableRepository.init(localRepoFolder, author.getRepositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
