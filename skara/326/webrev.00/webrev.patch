diff a/cli/src/main/java/org/openjdk/skara/cli/GitInfo.java b/cli/src/main/java/org/openjdk/skara/cli/GitInfo.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitInfo.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitInfo.java
@@ -22,20 +22,24 @@
  */
 package org.openjdk.skara.cli;
 
 import org.openjdk.skara.args.*;
 import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.issuetracker.IssueTracker;
 import org.openjdk.skara.jcheck.*;
 import org.openjdk.skara.vcs.openjdk.*;
 
+import java.io.IOException;
+import java.net.URI;
 import java.nio.file.Path;
+import java.util.*;
 import java.util.function.Supplier;
 import java.util.logging.Level;
-import java.io.IOException;
-import java.util.List;
 
 public class GitInfo {
+    private static final URI JBS = URI.create("https://bugs.openjdk.java.net");
+
     private static void exit(String fmt, Object...args) {
         System.err.println(String.format(fmt, args));
         System.exit(1);
     }
 
@@ -44,10 +48,15 @@
             exit(fmt, args);
             return new IOException();
         };
     }
 
+    private static String jbsProject(ReadOnlyRepository repo) throws IOException {
+        var conf = JCheckConfiguration.from(repo);
+        return conf.general().jbs().toUpperCase();
+    }
+
     public static void main(String[] args) throws IOException {
         var flags = List.of(
             Switch.shortcut("m")
                   .fullname("mercurial")
                   .helptext("Deprecated: force use of mercurial")
@@ -56,16 +65,20 @@
                   .fullname("no-decoration")
                   .helptext("Do not prefix lines with any decoration")
                   .optional(),
             Switch.shortcut("")
                   .fullname("issues")
-                  .helptext("Show issues")
+                  .helptext("Show link(s) to issue(s)")
                   .optional(),
             Switch.shortcut("")
                   .fullname("reviewers")
                   .helptext("Show reviewers")
                   .optional(),
+            Switch.shortcut("")
+                  .fullname("review")
+                  .helptext("Show link to review")
+                  .optional(),
             Switch.shortcut("")
                   .fullname("summary")
                   .helptext("Show summary (if present)")
                   .optional(),
             Switch.shortcut("")
@@ -143,10 +156,26 @@
             var decoration = useDecoration? "Reviewer: " : "";
             for (var reviewer : message.reviewers()) {
                 System.out.println(decoration + reviewer);
             }
         }
+        if (arguments.contains("review")) {
+            var decoration = useDecoration? "Review: " : "";
+            var project = jbsProject(repo);
+            if (message.issues().size() == 1) {
+                var issueId = message.issues().get(0).id();
+                var issueTracker = IssueTracker.from("jira", JBS);
+                var issue = issueTracker.project(project).issue(issueId);
+                if (issue.isPresent()) {
+                    for (var link : issue.get().links()) {
+                        if (link.title().equals("Review")) {
+                            System.out.println(decoration + link.uri().toString());
+                        }
+                    }
+                }
+            }
+        }
         if (arguments.contains("summary")) {
             var decoration = useDecoration? "Summary: " : "";
             for (var line : message.summaries()) {
                 System.out.println(decoration + line);
             }
@@ -158,26 +187,20 @@
                 System.out.println(decoration + coAuthor.toString());
             }
         }
         if (arguments.contains("issues")) {
             var decoration = useDecoration? "Issue: " : "";
-            var lines = repo.lines(Path.of(".jcheck/conf"), hash);
-
-            String uri = null;
-            if (lines.isPresent()) {
-                var jbs = "https://bugs.openjdk.java.net/browse/";
-                var conf = JCheckConfiguration.parse(lines.get());
-                var project = conf.general().project().toUpperCase();
-                uri = jbs + project + "-";
-            }
-
+            var project = jbsProject(repo);
+            var uri = JBS + "/browse/" + project + "-";
             for (var issue : message.issues()) {
                 if (uri != null) {
                     var id = issue.id();
                     System.out.println(decoration + uri + id);
                 } else {
                     System.out.println(decoration + issue.toString());
                 }
             }
+
+
         }
     }
 }
diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheckConfiguration.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheckConfiguration.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheckConfiguration.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheckConfiguration.java
@@ -139,13 +139,19 @@
             return new JCheckConfiguration(convert(ini));
         }
         return new JCheckConfiguration(ini);
     }
 
-    public static JCheckConfiguration from(Repository r, Hash h, Path p) throws IOException {
+    public static JCheckConfiguration from(ReadOnlyRepository r, Hash h, Path p) throws IOException {
         return parse(r.lines(p, h).orElse(Collections.emptyList()));
     }
 
-    public static JCheckConfiguration from(Repository r, Hash h) throws IOException {
+    public static JCheckConfiguration from(ReadOnlyRepository r, Hash h) throws IOException {
         return from(r, h, Path.of(".jcheck", "conf"));
     }
+
+    public static JCheckConfiguration from(ReadOnlyRepository r) throws IOException {
+        var master = r.resolve("master")
+                      .orElseThrow(() -> new IOException("Cannot resolve 'master' branch"));
+        return from(r, master, Path.of(".jcheck", "conf"));
+    }
 }
