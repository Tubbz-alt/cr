diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
@@ -20,11 +20,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.bot.WorkItem;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.vcs.Hash;
 
 import java.io.*;
 import java.nio.charset.StandardCharsets;
@@ -35,26 +34,23 @@
 import java.util.function.Consumer;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
-class CheckWorkItem implements WorkItem {
-    private final PullRequest pr;
+class CheckWorkItem extends PullRequestWorkItem {
     private final HostedRepository censusRepo;
     private final String censusRef;
     private final Map<String, String> blockingLabels;
-    private final Consumer<RuntimeException> errorHandler;
 
     private final Pattern metadataComments = Pattern.compile("<!-- (add|remove) contributor");
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
     CheckWorkItem(PullRequest pr, HostedRepository censusRepo, String censusRef, Map<String, String> blockingLabels, Consumer<RuntimeException> errorHandler) {
-        this.pr = pr;
+        super(pr, errorHandler);
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
         this.blockingLabels = blockingLabels;
-        this.errorHandler = errorHandler;
     }
 
     private String encodeReviewer(HostUserDetails reviewer, CensusInstance censusInstance) {
         var census = censusInstance.census();
         var project = censusInstance.project();
@@ -137,25 +133,10 @@
     @Override
     public String toString() {
         return "CheckWorkItem@" + pr.repository().getName() + "#" + pr.getId();
     }
 
-    @Override
-    public boolean concurrentWith(WorkItem other) {
-        if (!(other instanceof CheckWorkItem)) {
-            return true;
-        }
-        CheckWorkItem otherItem = (CheckWorkItem)other;
-        if (!pr.getId().equals(otherItem.pr.getId())) {
-            return true;
-        }
-        if (!pr.repository().getName().equals(otherItem.pr.repository().getName())) {
-            return true;
-        }
-        return false;
-    }
-
     @Override
     public void run(Path scratchPath) {
         // First determine if the current state of the PR has already been checked
         var census = CensusInstance.create(censusRepo, censusRef, scratchPath.resolve("census"), pr);
         var comments = pr.getComments();
@@ -171,11 +152,6 @@
             } catch (IOException e) {
                 throw new UncheckedIOException(e);
             }
         }
     }
-
-    @Override
-    public void handleRuntimeException(RuntimeException e) {
-        errorHandler.accept(e);
-    }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
@@ -31,16 +31,14 @@
 import java.util.function.Consumer;
 import java.util.logging.Logger;
 import java.util.regex.*;
 import java.util.stream.*;
 
-public class CommandWorkItem implements WorkItem {
-    private final PullRequest pr;
+public class CommandWorkItem extends PullRequestWorkItem {
     private final HostedRepository censusRepo;
     private final String censusRef;
     private final Map<String, String> external;
-    private final Consumer<RuntimeException> errorHandler;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
     private final String commandReplyMarker = "<!-- Jmerge command reply message (%s) -->";
     private final Pattern commandReplyPattern = Pattern.compile("<!-- Jmerge command reply message \\((\\S+)\\) -->");
@@ -72,15 +70,14 @@
             return "shows this text";
         }
     }
 
     CommandWorkItem(PullRequest pr, HostedRepository censusRepo, String censusRef, Map<String, String> external, Consumer<RuntimeException> errorHandler) {
-        this.pr = pr;
+        super(pr, errorHandler);
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
         this.external = external;
-        this.errorHandler = errorHandler;
 
         if (HelpCommand.external == null) {
             HelpCommand.external = external;
         }
     }
@@ -134,25 +131,10 @@
         }
 
         pr.addComment(writer.toString());
     }
 
-    @Override
-    public boolean concurrentWith(WorkItem other) {
-        if (!(other instanceof CommandWorkItem)) {
-            return true;
-        }
-        CommandWorkItem otherItem = (CommandWorkItem)other;
-        if (!pr.getId().equals(otherItem.pr.getId())) {
-            return true;
-        }
-        if (!pr.repository().getName().equals(otherItem.pr.repository().getName())) {
-            return true;
-        }
-        return false;
-    }
-
     @Override
     public void run(Path scratchPath) {
         log.info("Looking for merge commands");
 
         var comments = pr.getComments();
@@ -166,11 +148,6 @@
         var census = CensusInstance.create(censusRepo, censusRef, scratchPath.resolve("census"), pr);
         for (var entry : unprocessedCommands) {
             processCommand(pr, census, scratchPath.resolve("pr"), entry.getKey(), entry.getValue(), comments);
         }
     }
-
-    @Override
-    public void handleRuntimeException(RuntimeException e) {
-        errorHandler.accept(e);
-    }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
@@ -20,11 +20,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.bot.WorkItem;
 import org.openjdk.skara.host.PullRequest;
 import org.openjdk.skara.vcs.Hash;
 
 import java.io.*;
 import java.nio.file.Path;
@@ -27,26 +26,23 @@
 import org.openjdk.skara.vcs.Hash;
 
 import java.io.*;
 import java.nio.file.Path;
 import java.util.*;
-import java.util.concurrent.*;
+import java.util.concurrent.ConcurrentMap;
 import java.util.function.Consumer;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
-public class LabelerWorkItem implements WorkItem {
-    private final PullRequest pr;
+public class LabelerWorkItem extends PullRequestWorkItem {
     private final Map<String, List<Pattern>> labelPatterns;
     private final ConcurrentMap<Hash, Boolean> currentLabels;
-    private final Consumer<RuntimeException> errorHandler;
 
     LabelerWorkItem(PullRequest pr, Map<String, List<Pattern>> labelPatterns, ConcurrentMap<Hash, Boolean> currentLabels, Consumer<RuntimeException> errorHandler) {
-        this.pr = pr;
+        super(pr, errorHandler);
         this.labelPatterns = labelPatterns;
         this.currentLabels = currentLabels;
-        this.errorHandler = errorHandler;
     }
 
     @Override
     public String toString() {
         return "LabelerWorkItem@" + pr.repository().getName() + "#" + pr.getId();
@@ -50,25 +46,10 @@
     @Override
     public String toString() {
         return "LabelerWorkItem@" + pr.repository().getName() + "#" + pr.getId();
     }
 
-    @Override
-    public boolean concurrentWith(WorkItem other) {
-        if (!(other instanceof LabelerWorkItem)) {
-            return true;
-        }
-        LabelerWorkItem otherItem = (LabelerWorkItem) other;
-        if (!pr.getId().equals(otherItem.pr.getId())) {
-            return true;
-        }
-        if (!pr.repository().getName().equals(otherItem.pr.repository().getName())) {
-            return true;
-        }
-        return false;
-    }
-
     private Set<String> getLabels(PullRequestInstance prInstance) throws IOException {
         var labels = new HashSet<String>();
         var files = prInstance.changedFiles();
         for (var file : files) {
             for (var label : labelPatterns.entrySet()) {
@@ -109,11 +90,6 @@
             this.currentLabels.put(pr.getHeadHash(), Boolean.TRUE);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
-
-    @Override
-    public void handleRuntimeException(RuntimeException e) {
-        errorHandler.accept(e);
-    }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestWorkItem.java
--- /dev/null
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestWorkItem.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.pr;
+
+import org.openjdk.skara.bot.WorkItem;
+import org.openjdk.skara.host.PullRequest;
+
+import java.util.function.Consumer;
+
+abstract class PullRequestWorkItem implements WorkItem {
+    private final Consumer<RuntimeException> errorHandler;
+    final PullRequest pr;
+
+    PullRequestWorkItem(PullRequest pr, Consumer<RuntimeException> errorHandler) {
+        this.pr = pr;
+        this.errorHandler = errorHandler;
+    }
+
+    @Override
+    public final boolean concurrentWith(WorkItem other) {
+        if (!(other instanceof PullRequestWorkItem)) {
+            return true;
+        }
+        PullRequestWorkItem otherItem = (PullRequestWorkItem)other;
+        if (!pr.getId().equals(otherItem.pr.getId())) {
+            return true;
+        }
+        if (!pr.repository().getName().equals(otherItem.pr.repository().getName())) {
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public final void handleRuntimeException(RuntimeException e) {
+        errorHandler.accept(e);
+    }
+}
