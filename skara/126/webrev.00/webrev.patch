diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -187,11 +187,11 @@
 
     private String latestHeadSubject() {
         try {
             var latestCommit = prInstance.localRepo().lookup(prInstance.headHash()).orElseThrow(RuntimeException::new);
             var firstLine = latestCommit.message().size() > 0 ? latestCommit.message().get(0) : prInstance.pr().getTitle();
-            return String.format("%02d: %s", revisionCount(), firstLine);
+            return String.format("Re: %02d: %s", revisionCount(), firstLine);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
@@ -259,10 +259,13 @@
     private void addReplyCommon(Email parent, HostUserDetails author, String subject, String body, EmailAddress id) {
         var references = parent.id().toString();
         if (parent.hasHeader("References")) {
             references = parent.headerValue("References") + " " + references;
         }
+        if (!subject.startsWith("Re: ")) {
+            subject = "Re: " + subject;
+        }
 
         // Collapse self-replies and replies-to-same that have been created in this run
         var collapsable = findCollapsable(parent, author);
         if (collapsable.isPresent()) {
             // Drop the parent
@@ -274,10 +277,11 @@
             collapsed += getStableMessageId(parentEmail.id());
 
             var reply = ArchiveMessages.composeCombinedReply(parentEmail, body, prInstance);
             var email = Email.from(parentEmail)
                              .body(reply)
+                             .subject(subject)
                              .id(id)
                              .header("PR-Collapsed-IDs", collapsed)
                              .header("PR-Sequence", Integer.toString(existing.size() + generated.size()))
                              .build();
             generated.add(email);
@@ -331,11 +335,11 @@
             if (!existingIds.containsKey(getStableMessageId(id))) {
                 var parent = topCommentForHash(review.hash());
                 var userName = contributor != null ? contributor.username() : review.reviewer().userName() + "@" + censusInstance.namespace().name();
                 var userRole = contributor != null ? projectRole(contributor, censusInstance) : "none";
                 var replyBody = ArchiveMessages.reviewCommentBody(review.body().get(), review.verdict(), userName, userRole);
-                addReplyCommon(parent, review.reviewer(), "Re: RFR: " + prInstance.pr().getTitle(), replyBody, id);
+                addReplyCommon(parent, review.reviewer(), parent.subject(), replyBody, id);
             }
         }
 
         if (contributor != null) {
             var isReviewer = censusInstance.project().isReviewer(contributor.username(), censusInstance.configuration().census().version());
@@ -369,11 +373,11 @@
             }
             body.append("\n");
         }
         body.append(reviewComment.body());
 
-        addReplyCommon(parent, reviewComment.author(), "Re: RFR: " + prInstance.pr().getTitle(), body.toString(), id);
+        addReplyCommon(parent, reviewComment.author(), parent.subject(), body.toString(), id);
     }
 
     List<Email> generatedEmails() {
         return generated;
     }
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -657,10 +657,11 @@
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
              var listServer = new TestMailmanServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
+            var commenter = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.host().getCurrentUserDetails().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master",
@@ -733,10 +734,16 @@
             for (var newMail : conversations.get(0).allMessages()) {
                 assertEquals(from.address(), newMail.author().address());
                 assertEquals(from, newMail.sender());
             }
 
+            // Add a comment
+            var commenterPr = commenter.getPullRequest(pr.getId());
+            commenterPr.addReviewComment(masterHash, nextHash, reviewFile.toString(), 2, "Review comment");
+            TestBotRunner.runPeriodicItems(mlBot);
+            listServer.processIncoming();
+
             // Ensure that additional updates are only reported once
             for (int i = 0; i < 3; ++i) {
                 var anotherHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fixing");
                 localRepo.push(anotherHash, author.getUrl(), "edit");
 
@@ -755,11 +762,14 @@
                 listServer.processIncoming();
             }
             var updatedConversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, updatedConversations.size());
             var conversation = updatedConversations.get(0);
-            assertEquals(5, conversation.allMessages().size());
+            assertEquals(6, conversation.allMessages().size());
+            assertEquals("Re: 01: Fixing", conversation.allMessages().get(1).subject());
+            assertEquals("Re: 01: Fixing", conversation.allMessages().get(2).subject());
+            assertEquals("Re: 04: Fixing", conversation.allMessages().get(5).subject());
         }
     }
 
     @Test
     void rebased(TestInfo testInfo) throws IOException {
@@ -841,10 +851,11 @@
             assertEquals(1, conversations.size());
             for (var newMail : conversations.get(0).allMessages()) {
                 assertEquals(from.address(), newMail.author().address());
                 assertEquals(from, newMail.sender());
             }
+            assertEquals("Re: 01: Replaced msg", conversations.get(0).allMessages().get(1).subject());
         }
     }
 
     @Test
     void skipAddingExistingWebrev(TestInfo testInfo) throws IOException {
