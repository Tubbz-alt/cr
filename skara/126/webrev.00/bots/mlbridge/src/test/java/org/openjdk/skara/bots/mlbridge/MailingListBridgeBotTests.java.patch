diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -657,10 +657,11 @@
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
              var listServer = new TestMailmanServer()) {
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
+            var commenter = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.host().getCurrentUserDetails().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master",
@@ -733,10 +734,16 @@
             for (var newMail : conversations.get(0).allMessages()) {
                 assertEquals(from.address(), newMail.author().address());
                 assertEquals(from, newMail.sender());
             }
 
+            // Add a comment
+            var commenterPr = commenter.getPullRequest(pr.getId());
+            commenterPr.addReviewComment(masterHash, nextHash, reviewFile.toString(), 2, "Review comment");
+            TestBotRunner.runPeriodicItems(mlBot);
+            listServer.processIncoming();
+
             // Ensure that additional updates are only reported once
             for (int i = 0; i < 3; ++i) {
                 var anotherHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fixing");
                 localRepo.push(anotherHash, author.getUrl(), "edit");
 
@@ -755,11 +762,14 @@
                 listServer.processIncoming();
             }
             var updatedConversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, updatedConversations.size());
             var conversation = updatedConversations.get(0);
-            assertEquals(5, conversation.allMessages().size());
+            assertEquals(6, conversation.allMessages().size());
+            assertEquals("Re: 01: Fixing", conversation.allMessages().get(1).subject());
+            assertEquals("Re: 01: Fixing", conversation.allMessages().get(2).subject());
+            assertEquals("Re: 04: Fixing", conversation.allMessages().get(5).subject());
         }
     }
 
     @Test
     void rebased(TestInfo testInfo) throws IOException {
@@ -841,10 +851,11 @@
             assertEquals(1, conversations.size());
             for (var newMail : conversations.get(0).allMessages()) {
                 assertEquals(from.address(), newMail.author().address());
                 assertEquals(from, newMail.sender());
             }
+            assertEquals("Re: 01: Replaced msg", conversations.get(0).allMessages().get(1).subject());
         }
     }
 
     @Test
     void skipAddingExistingWebrev(TestInfo testInfo) throws IOException {
