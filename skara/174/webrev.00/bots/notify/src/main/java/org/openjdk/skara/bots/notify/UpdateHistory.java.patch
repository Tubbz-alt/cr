diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateHistory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateHistory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateHistory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateHistory.java
@@ -42,15 +42,15 @@
                       .map(line -> line.split(" "))
                       .map(entry -> new ResolvedBranch(new Branch(entry[0]), new Hash(entry[1])))
                       .collect(Collectors.toSet());
     }
 
-    private String serializeBranches(ResolvedBranch added, Set<ResolvedBranch> existing) {
+    private String serializeBranches(Collection<ResolvedBranch> added, Set<ResolvedBranch> existing) {
         var updatedBranches = existing.stream()
-                .collect(Collectors.toMap(ResolvedBranch::branch,
-                                          ResolvedBranch::hash));
-        updatedBranches.put(added.branch(), added.hash());
+                                      .collect(Collectors.toMap(ResolvedBranch::branch,
+                                                                ResolvedBranch::hash));
+        added.forEach(a -> updatedBranches.put(a.branch(), a.hash()));
         return updatedBranches.entrySet().stream()
                               .map(entry -> entry.getKey().toString() + " " + entry.getValue().toString())
                               .sorted()
                               .collect(Collectors.joining("\n"));
     }
@@ -59,13 +59,13 @@
         return current.lines()
                       .map(Tag::new)
                       .collect(Collectors.toSet());
     }
 
-    private String serializeTags(Tag added, Set<Tag> existing) {
+    private String serializeTags(Collection<Tag> added, Set<Tag> existing) {
         return Stream.concat(existing.stream(),
-                             Stream.of(added))
+                             added.stream())
                      .map(Tag::toString)
                      .sorted()
                      .collect(Collectors.joining("\n"));
     }
 
@@ -95,16 +95,16 @@
 
     static UpdateHistory create(StorageBuilder<Tag> tagStorageBuilder, Path tagLocation, StorageBuilder<ResolvedBranch> branchStorageBuilder, Path branchLocation) {
         return new UpdateHistory(tagStorageBuilder, tagLocation, branchStorageBuilder, branchLocation);
     }
 
-    void addTag(Tag tag) {
-        tagStorage.put(tag);
+    void addTags(Collection<Tag> addedTags) {
+        tagStorage.put(addedTags);
         var newTags = currentTags();
 
-        if (tags != null) {
-            for (var existingTag : tags) {
+        if (addedTags != null) {
+            for (var existingTag : addedTags) {
                 if (!newTags.contains(existingTag)) {
                     throw new RuntimeException("Tag '" + existingTag + "' has been removed");
                 }
             }
         }
