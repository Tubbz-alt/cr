diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
@@ -111,11 +111,11 @@
                           .collect(Collectors.toList());
 
         if (tags.size() == newTags.size()) {
             if (tags.size() > 0) {
                 log.warning("No previous tag history found - ignoring all current tags");
-                tags.forEach(history::addTag);
+                history.addTags(tags);
             }
             return;
         }
 
         var allJdkTags = tags.stream()
@@ -140,11 +140,11 @@
             if (commits.size() == 0) {
                 continue;
             }
 
             // Update the history first - if there is a problem here we don't want to send out multiple updates
-            history.addTag(tag.tag());
+            history.addTags(List.of(tag.tag()));
 
             Collections.reverse(commits);
             for (var updater : updaters) {
                 updater.handleTagCommits(repository, commits, tag);
             }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateHistory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateHistory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateHistory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateHistory.java
@@ -42,15 +42,15 @@
                       .map(line -> line.split(" "))
                       .map(entry -> new ResolvedBranch(new Branch(entry[0]), new Hash(entry[1])))
                       .collect(Collectors.toSet());
     }
 
-    private String serializeBranches(ResolvedBranch added, Set<ResolvedBranch> existing) {
+    private String serializeBranches(Collection<ResolvedBranch> added, Set<ResolvedBranch> existing) {
         var updatedBranches = existing.stream()
-                .collect(Collectors.toMap(ResolvedBranch::branch,
-                                          ResolvedBranch::hash));
-        updatedBranches.put(added.branch(), added.hash());
+                                      .collect(Collectors.toMap(ResolvedBranch::branch,
+                                                                ResolvedBranch::hash));
+        added.forEach(a -> updatedBranches.put(a.branch(), a.hash()));
         return updatedBranches.entrySet().stream()
                               .map(entry -> entry.getKey().toString() + " " + entry.getValue().toString())
                               .sorted()
                               .collect(Collectors.joining("\n"));
     }
@@ -59,13 +59,13 @@
         return current.lines()
                       .map(Tag::new)
                       .collect(Collectors.toSet());
     }
 
-    private String serializeTags(Tag added, Set<Tag> existing) {
+    private String serializeTags(Collection<Tag> added, Set<Tag> existing) {
         return Stream.concat(existing.stream(),
-                             Stream.of(added))
+                             added.stream())
                      .map(Tag::toString)
                      .sorted()
                      .collect(Collectors.joining("\n"));
     }
 
@@ -95,16 +95,16 @@
 
     static UpdateHistory create(StorageBuilder<Tag> tagStorageBuilder, Path tagLocation, StorageBuilder<ResolvedBranch> branchStorageBuilder, Path branchLocation) {
         return new UpdateHistory(tagStorageBuilder, tagLocation, branchStorageBuilder, branchLocation);
     }
 
-    void addTag(Tag tag) {
-        tagStorage.put(tag);
+    void addTags(Collection<Tag> addedTags) {
+        tagStorage.put(addedTags);
         var newTags = currentTags();
 
-        if (tags != null) {
-            for (var existingTag : tags) {
+        if (addedTags != null) {
+            for (var existingTag : addedTags) {
                 if (!newTags.contains(existingTag)) {
                     throw new RuntimeException("Tag '" + existingTag + "' has been removed");
                 }
             }
         }
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdateHistoryTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdateHistoryTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdateHistoryTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdateHistoryTests.java
@@ -20,23 +20,23 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.notify;
 
-import org.junit.jupiter.api.*;
-
 import org.openjdk.skara.host.HostedRepository;
 import org.openjdk.skara.storage.StorageBuilder;
-import org.openjdk.skara.test.*;
-import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.test.HostCredentials;
 import org.openjdk.skara.vcs.Tag;
+import org.openjdk.skara.vcs.*;
+
+import org.junit.jupiter.api.*;
 
 import java.io.IOException;
 import java.nio.file.Files;
+import java.util.*;
 
 import static org.junit.jupiter.api.Assertions.*;
-import static org.junit.jupiter.api.Assertions.assertEquals;
 
 class UpdateHistoryTests {
     private String resetHostedRepository(HostedRepository repository) throws IOException {
         var folder = Files.createTempDirectory("updatehistory");
         var localRepository = Repository.init(folder, repository.getRepositoryType());
@@ -62,12 +62,11 @@
         try (var credentials = new HostCredentials(testInfo)) {
             var repository = credentials.getHostedRepository();
             var ref = resetHostedRepository(repository);
             var history = createHistory(repository, ref);
 
-            history.addTag(new Tag("1"));
-            history.addTag(new Tag("2"));
+            history.addTags(List.of(new Tag("1"), new Tag("2")));
 
             assertTrue(history.hasTag(new Tag("1")));
             assertTrue(history.hasTag(new Tag("2")));
 
             var newHistory = createHistory(repository, ref);
@@ -104,12 +103,11 @@
         try (var credentials = new HostCredentials(testInfo)) {
             var repository = credentials.getHostedRepository();
             var ref = resetHostedRepository(repository);
             var history = createHistory(repository, ref);
 
-            history.addTag(new Tag("1"));
-            history.addTag(new Tag("2"));
+            history.addTags(List.of(new Tag("1"), new Tag("2")));
 
             assertTrue(history.hasTag(new Tag("1")));
             assertTrue(history.hasTag(new Tag("2")));
 
             var history1 = createHistory(repository, ref);
@@ -122,12 +120,12 @@
             assertTrue(history2.hasTag(new Tag("1")));
             assertTrue(history2.hasTag(new Tag("2")));
             assertFalse(history2.hasTag(new Tag("3")));
             assertFalse(history2.hasTag(new Tag("4")));
 
-            history1.addTag(new Tag("3"));
-            history2.addTag(new Tag("4"));
+            history1.addTags(Set.of(new Tag("3")));
+            history2.addTags(Set.of(new Tag("4")));
 
             assertTrue(history1.hasTag(new Tag("3")));
             assertFalse(history1.hasTag(new Tag("4")));
             assertTrue(history2.hasTag(new Tag("3")));
             assertTrue(history2.hasTag(new Tag("4")));
diff a/storage/src/main/java/org/openjdk/skara/storage/FileStorage.java b/storage/src/main/java/org/openjdk/skara/storage/FileStorage.java
--- a/storage/src/main/java/org/openjdk/skara/storage/FileStorage.java
+++ b/storage/src/main/java/org/openjdk/skara/storage/FileStorage.java
@@ -50,12 +50,12 @@
         }
         return Collections.unmodifiableSet(deserializer.deserialize(current));
     }
 
     @Override
-    public void put(T item) {
-        var updated = serializer.serialize(item, current());
+    public void put(Collection<T> items) {
+        var updated = serializer.serialize(items, current());
         if (current.equals(updated)) {
             return;
         }
         try {
             Files.writeString(file, updated, StandardCharsets.UTF_8);
diff a/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java b/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java
--- a/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java
+++ b/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java
@@ -25,11 +25,11 @@
 import org.openjdk.skara.host.HostedRepository;
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.nio.file.*;
-import java.util.Set;
+import java.util.*;
 
 class HostedRepositoryStorage<T> implements Storage<T> {
     private final HostedRepository hostedRepository;
     private final String ref;
     private final String fileName;
@@ -78,18 +78,18 @@
     public Set<T> current() {
         return repositoryStorage.current();
     }
 
     @Override
-    public void put(T item) {
+    public void put(Collection<T> items) {
         int retryCount = 0;
         IOException lastException = null;
         Hash lastRemoteHash = null;
 
         while (retryCount < 10) {
             // Update our local storage
-            repositoryStorage.put(item);
+            repositoryStorage.put(items);
             var updated = repositoryStorage.current();
             if (current.equals(updated)) {
                 return;
             }
 
diff a/storage/src/main/java/org/openjdk/skara/storage/RepositoryStorage.java b/storage/src/main/java/org/openjdk/skara/storage/RepositoryStorage.java
--- a/storage/src/main/java/org/openjdk/skara/storage/RepositoryStorage.java
+++ b/storage/src/main/java/org/openjdk/skara/storage/RepositoryStorage.java
@@ -23,11 +23,11 @@
 package org.openjdk.skara.storage;
 
 import org.openjdk.skara.vcs.Repository;
 
 import java.io.*;
-import java.util.Set;
+import java.util.*;
 
 class RepositoryStorage<T> implements Storage<T> {
     private final Repository repository;
     private final String fileName;
     private final String authorName;
@@ -64,12 +64,12 @@
     public Set<T> current() {
         return fileStorage.current();
     }
 
     @Override
-    public void put(T item) {
-        fileStorage.put(item);
+    public void put(Collection<T> items) {
+        fileStorage.put(items);
         var updated = current();
         if (current.equals(updated)) {
             return;
         }
         current = updated;
diff a/storage/src/main/java/org/openjdk/skara/storage/Storage.java b/storage/src/main/java/org/openjdk/skara/storage/Storage.java
--- a/storage/src/main/java/org/openjdk/skara/storage/Storage.java
+++ b/storage/src/main/java/org/openjdk/skara/storage/Storage.java
@@ -20,23 +20,27 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.storage;
 
-import java.util.Set;
+import java.util.*;
 
 public interface Storage<T> {
     /**
      * The current set of stored items. Concurrent changes to permanent storage may not be
      * detected until updates are attempted.
      * @return
      */
     Set<T> current();
 
     /**
-     * Add a new item or update an existing one. Flushes to permanent storage if needed. The
+     * Add new items and/or update existing ones. Flushes to permanent storage if needed. The
      * Storage instance may not be used concurrently, but the backing storage may have been updated
      * concurrently from a different instance. In that case the put operation will be retried.
      * @param item
      */
-    void put(T item);
+    void put(Collection<T> item);
+
+    default void put(T item) {
+        put(List.of(item));
+    }
 }
diff a/storage/src/main/java/org/openjdk/skara/storage/StorageSerializer.java b/storage/src/main/java/org/openjdk/skara/storage/StorageSerializer.java
--- a/storage/src/main/java/org/openjdk/skara/storage/StorageSerializer.java
+++ b/storage/src/main/java/org/openjdk/skara/storage/StorageSerializer.java
@@ -20,10 +20,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.storage;
 
-import java.util.Set;
+import java.util.*;
 
 public interface StorageSerializer<T> {
-    String serialize(T added, Set<T> existing);
+    String serialize(Collection<T> added, Set<T> existing);
 }
diff a/storage/src/test/java/org/openjdk/skara/storage/FileStorageTests.java b/storage/src/test/java/org/openjdk/skara/storage/FileStorageTests.java
--- a/storage/src/test/java/org/openjdk/skara/storage/FileStorageTests.java
+++ b/storage/src/test/java/org/openjdk/skara/storage/FileStorageTests.java
@@ -31,16 +31,16 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 class FileStorageTests {
     private FileStorage<String> stringStorage(Path fileName) {
-        return new FileStorage<String>(fileName, (added, cur) -> Stream.concat(cur.stream(), Stream.of(added))
-                                                                       .sorted()
-                                                                       .collect(Collectors.joining(";")),
-                                       cur -> Arrays.stream(cur.split(";"))
-                                                    .filter(str -> !str.isEmpty())
-                                                    .collect(Collectors.toSet()));
+        return new FileStorage<>(fileName, (added, cur) -> Stream.concat(cur.stream(), added.stream())
+                                                                 .sorted()
+                                                                 .collect(Collectors.joining(";")),
+                                 cur -> Arrays.stream(cur.split(";"))
+                                              .filter(str -> !str.isEmpty())
+                                              .collect(Collectors.toSet()));
     }
 
     @Test
     void simple() throws IOException {
         var tmpFile = Files.createTempFile("filestorage", ".txt");
@@ -51,10 +51,22 @@
         assertEquals(Set.of("hello there"), storage.current());
 
         Files.delete(tmpFile);
     }
 
+    @Test
+    void multiple() throws IOException {
+        var tmpFile = Files.createTempFile("filestorage", ".txt");
+        var storage = stringStorage(tmpFile);
+
+        assertEquals(Set.of(), storage.current());
+        storage.put(List.of("hello", "there"));
+        assertEquals(Set.of("hello", "there"), storage.current());
+
+        Files.delete(tmpFile);
+    }
+
     @Test
     void retained() throws IOException {
         var tmpFile = Files.createTempFile("filestorage", ".txt");
         var storage = stringStorage(tmpFile);
 
diff a/storage/src/test/java/org/openjdk/skara/storage/RepositoryStorageTests.java b/storage/src/test/java/org/openjdk/skara/storage/RepositoryStorageTests.java
--- a/storage/src/test/java/org/openjdk/skara/storage/RepositoryStorageTests.java
+++ b/storage/src/test/java/org/openjdk/skara/storage/RepositoryStorageTests.java
@@ -20,30 +20,31 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.storage;
 
+import org.openjdk.skara.vcs.*;
+
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.EnumSource;
-import org.openjdk.skara.vcs.*;
 
 import java.io.IOException;
-import java.nio.file.*;
+import java.nio.file.Files;
 import java.util.*;
 import java.util.stream.*;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 class RepositoryStorageTests {
     private RepositoryStorage<String> stringStorage(Repository repository) {
-        return new RepositoryStorage<String>(repository, "db.txt", "Duke", "duke@openjdk.java.net", "Test update",
-                                             (added, cur) -> Stream.concat(cur.stream(), Stream.of(added))
-                                                                   .sorted()
-                                                                   .collect(Collectors.joining(";")),
-                                             cur -> Arrays.stream(cur.split(";"))
-                                                          .filter(str -> !str.isEmpty())
-                                                          .collect(Collectors.toSet()));
+        return new RepositoryStorage<>(repository, "db.txt", "Duke", "duke@openjdk.java.net", "Test update",
+                                       (added, cur) -> Stream.concat(cur.stream(), added.stream())
+                                                             .sorted()
+                                                             .collect(Collectors.joining(";")),
+                                       cur -> Arrays.stream(cur.split(";"))
+                                                    .filter(str -> !str.isEmpty())
+                                                    .collect(Collectors.toSet()));
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
     void simple(VCS vcs) throws IOException {
@@ -54,10 +55,22 @@
         assertEquals(Set.of(), storage.current());
         storage.put("hello there");
         assertEquals(Set.of("hello there"), storage.current());
     }
 
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void multiple(VCS vcs) throws IOException {
+        var tmpDir = Files.createTempDirectory("repositorystorage");
+        var repository = Repository.init(tmpDir, vcs);
+        var storage = stringStorage(repository);
+
+        assertEquals(Set.of(), storage.current());
+        storage.put(Set.of("hello", "there"));
+        assertEquals(Set.of("hello", "there"), storage.current());
+    }
+
     @ParameterizedTest
     @EnumSource(VCS.class)
     void retained(VCS vcs) throws IOException {
         var tmpDir = Files.createTempDirectory("repositorystorage");
         var repository = Repository.init(tmpDir, vcs);
