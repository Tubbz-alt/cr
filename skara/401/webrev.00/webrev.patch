diff a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
--- a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
+++ b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
@@ -224,11 +224,11 @@
 
     @Override
     public void run(Path scratchPath) {
         try {
             var sanitizedUrl =
-                URLEncoder.encode(target.webUrl().toString(), StandardCharsets.UTF_8);
+                URLEncoder.encode(fork.webUrl().toString(), StandardCharsets.UTF_8);
             var dir = storage.resolve(sanitizedUrl);
 
             Repository repo = null;
             if (!Files.exists(dir)) {
                 log.info("Cloning " + fork.name());
@@ -239,16 +239,10 @@
                 repo = Repository.get(dir).orElseThrow(() -> {
                         return new RuntimeException("Repository in " + dir + " has vanished");
                 });
             }
 
-
-            // Must set up user.name and user.email for pull to work
-            var username = fork.forge().currentUser().userName();
-            repo.config("user", "name", username, false);
-            repo.config("user", "email", username + "@openjdk.org", false);
-
             // Sync personal fork
             var remoteBranches = repo.remoteBranches(target.url().toString());
             for (var branch : remoteBranches) {
                 var fetchHead = repo.fetch(target.url(), branch.hash().hex());
                 repo.push(fetchHead, fork.url(), branch.name());
@@ -266,12 +260,15 @@
                 var fromBranch = spec.fromBranch();
 
                 log.info("Deciding whether to merge " + fromRepo.name() + ":" + fromBranch.name() + " to " + toBranch.name());
 
                 // Checkout the branch to merge into
-                repo.pull(fork.url().toString(), toBranch.name());
                 repo.checkout(toBranch, false);
+                var remoteBranch = new Branch(repo.upstreamFor(toBranch).orElseThrow(() ->
+                    new IllegalStateException("Could not get remote branch name for " + toBranch.name())
+                ));
+                repo.merge(remoteBranch); // should always be a fast-forward merge
 
                 // Check if merge conflict pull request is present
                 var shouldMerge = true;
                 var title = "Cannot automatically merge " + fromRepo.name() + ":" + fromBranch.name() + " to " + toBranch.name();
                 var marker = "<!-- MERGE CONFLICTS -->";
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -100,10 +100,11 @@
     Branch branch(Hash hash, String branchName) throws IOException;
     void prune(Branch branch, String remote) throws IOException;
     void delete(Branch b) throws IOException;
     void rebase(Hash hash, String committerName, String committerEmail) throws IOException;
     void merge(Hash hash) throws IOException;
+    void merge(Branch branch) throws IOException;
     void merge(Hash hash, String strategy) throws IOException;
     void abortMerge() throws IOException;
     void addRemote(String name, String path) throws IOException;
     void setPaths(String remote, String pullPath, String pushPath) throws IOException;
     void apply(Diff diff, boolean force) throws IOException;
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -914,23 +914,32 @@
         return new GitRepository(destination);
     }
 
     @Override
     public void merge(Hash h) throws IOException {
-        merge(h, null);
+        merge(h.hex(), null);
+    }
+
+    @Override
+    public void merge(Branch b) throws IOException {
+        merge(b.name(), null);
     }
 
     @Override
     public void merge(Hash h, String strategy) throws IOException {
+        merge(h.hex(), strategy);
+    }
+
+    private void merge(String ref, String strategy) throws IOException {
         var cmd = new ArrayList<String>();
         cmd.addAll(List.of("git", "-c", "user.name=unused", "-c", "user.email=unused",
                            "merge", "--no-commit"));
         if (strategy != null) {
             cmd.add("-s");
             cmd.add(strategy);
         }
-        cmd.add(h.hex());
+        cmd.add(ref);
         try (var p = capture(cmd)) {
             await(p);
         }
     }
 
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -855,19 +855,28 @@
         return new HgRepository(destination.toAbsolutePath());
     }
 
     @Override
     public void merge(Hash h) throws IOException {
-        merge(h, null);
+        merge(h.hex(), null);
     }
 
     @Override
-    public void merge(Hash h, String stragegy) throws IOException {
+    public void merge(Branch b) throws IOException {
+        merge(b.name(), null);
+    }
+
+    @Override
+    public void merge(Hash h, String strategy) throws IOException {
+        merge(h.hex(), strategy);
+    }
+
+    private void merge(String ref, String strategy) throws IOException {
         var cmd = new ArrayList<String>();
-        cmd.addAll(List.of("hg", "merge", "--rev=" + h.hex()));
-        if (stragegy != null) {
-            cmd.add("--tool=" + stragegy);
+        cmd.addAll(List.of("hg", "merge", "--rev=" + ref));
+        if (strategy != null) {
+            cmd.add("--tool=" + strategy);
         }
         try (var p = capture(cmd)) {
             await(p);
         }
     }
