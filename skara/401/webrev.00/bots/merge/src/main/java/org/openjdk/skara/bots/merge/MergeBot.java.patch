diff a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
--- a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
+++ b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
@@ -224,11 +224,11 @@
 
     @Override
     public void run(Path scratchPath) {
         try {
             var sanitizedUrl =
-                URLEncoder.encode(target.webUrl().toString(), StandardCharsets.UTF_8);
+                URLEncoder.encode(fork.webUrl().toString(), StandardCharsets.UTF_8);
             var dir = storage.resolve(sanitizedUrl);
 
             Repository repo = null;
             if (!Files.exists(dir)) {
                 log.info("Cloning " + fork.name());
@@ -239,16 +239,10 @@
                 repo = Repository.get(dir).orElseThrow(() -> {
                         return new RuntimeException("Repository in " + dir + " has vanished");
                 });
             }
 
-
-            // Must set up user.name and user.email for pull to work
-            var username = fork.forge().currentUser().userName();
-            repo.config("user", "name", username, false);
-            repo.config("user", "email", username + "@openjdk.org", false);
-
             // Sync personal fork
             var remoteBranches = repo.remoteBranches(target.url().toString());
             for (var branch : remoteBranches) {
                 var fetchHead = repo.fetch(target.url(), branch.hash().hex());
                 repo.push(fetchHead, fork.url(), branch.name());
@@ -266,12 +260,15 @@
                 var fromBranch = spec.fromBranch();
 
                 log.info("Deciding whether to merge " + fromRepo.name() + ":" + fromBranch.name() + " to " + toBranch.name());
 
                 // Checkout the branch to merge into
-                repo.pull(fork.url().toString(), toBranch.name());
                 repo.checkout(toBranch, false);
+                var remoteBranch = new Branch(repo.upstreamFor(toBranch).orElseThrow(() ->
+                    new IllegalStateException("Could not get remote branch name for " + toBranch.name())
+                ));
+                repo.merge(remoteBranch); // should always be a fast-forward merge
 
                 // Check if merge conflict pull request is present
                 var shouldMerge = true;
                 var title = "Cannot automatically merge " + fromRepo.name() + ":" + fromBranch.name() + " to " + toBranch.name();
                 var marker = "<!-- MERGE CONFLICTS -->";
