diff a/process/src/main/java/org/openjdk/skara/process/Execution.java b/process/src/main/java/org/openjdk/skara/process/Execution.java
--- a/process/src/main/java/org/openjdk/skara/process/Execution.java
+++ b/process/src/main/java/org/openjdk/skara/process/Execution.java
@@ -26,11 +26,10 @@
 import java.nio.file.Files;
 import java.time.*;
 import java.util.*;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Logger;
-import java.util.stream.Collectors;
 
 public class Execution implements AutoCloseable {
 
     private final List<ProcessBuilder> processBuilders;
     private final Process.OutputOption outputOption;
@@ -136,56 +135,10 @@
                 processBuilder.redirectError(ProcessBuilder.Redirect.DISCARD);
             }
         }
     }
 
-    private void startProcessPipe() throws IOException {
-        cmd = processBuilders.stream()
-                             .map(p -> String.join(" ", p.command()))
-                             .collect(Collectors.joining(" | "));
-        log.fine("Executing pipeline '" + cmd + "'");
-
-        prepareRedirects();
-        start = Instant.now();
-
-        processes = ProcessBuilder.startPipeline(processBuilders);
-    }
-
-    private void waitForProcessPipe() throws IOException, InterruptedException {
-        var remainingTimeout = Duration.from(timeout);
-        for (var process : processes) {
-            var terminated = false;
-            try {
-                terminated = process.waitFor(timeout.toMillis(), TimeUnit.MILLISECONDS);
-                if (terminated) {
-                    var processStatus = process.exitValue();
-                    if (processStatus != 0) {
-                        // Set the final status to the rightmost command to exit with a non-zero status,
-                        // similar to pipefail in shells
-                        status = processStatus;
-                    }
-                }
-            } catch (InterruptedException e) {
-                status = -1;
-                break;
-            }
-
-            if (!terminated) {
-                log.warning("Command '" + cmd + "' didn't finish in " + timeout + ", attempting to terminate...");
-                try {
-                    process.destroyForcibly().waitFor();
-                } catch (InterruptedException e) {
-                    log.warning("Failed to terminate command");
-                    throw new RuntimeException("Failed to terminate timeouted command '" + cmd + "'");
-                }
-                throw new InterruptedException("Command '" + cmd + "' didn't finish in " + timeout + ", terminated");
-            }
-            remainingTimeout = remainingTimeout.minus(Duration.between(start, Instant.now()));
-            start = Instant.now();
-        }
-    }
-
     private void startProcess() throws IOException {
         cmd = String.join(" ", getLastProcessBuilder().command());
         log.fine("Executing '" + cmd + "'");
 
         prepareRedirects();
@@ -251,15 +204,11 @@
         this.timeout = timeout;
 
         finished = false;
 
         try {
-            if (processBuilders.size() == 1) {
-                startProcess();
-            } else {
-                startProcessPipe();
-            }
+            startProcess();
         } catch (IOException e) {
             log.throwing("Process", "execute", e);
             finished = true;
             exception = e;
             status = -1;
@@ -269,15 +218,11 @@
 
     public Result await() {
         synchronized (this) {
             if (!finished) {
                 try {
-                    if (processBuilders.size() == 1) {
-                        waitForProcess();
-                    } else {
-                        waitForProcessPipe();
-                    }
+                    waitForProcess();
                 } catch (IOException | InterruptedException e) {
                     status = -1;
                     exception = e;
                 }
 
diff a/process/src/main/java/org/openjdk/skara/process/Process.java b/process/src/main/java/org/openjdk/skara/process/Process.java
--- a/process/src/main/java/org/openjdk/skara/process/Process.java
+++ b/process/src/main/java/org/openjdk/skara/process/Process.java
@@ -66,16 +66,10 @@
         public Description environ(String key, String value) {
             getCurrentProcessBuilderSetup().environment.put(key, value);
             return this;
         }
 
-        public Description pipe(String... command) {
-            var setup = new ProcessBuilderSetup(command);
-            processBuilderSetups.add(setup);
-            return this;
-        }
-
         public Description timeout(Duration timeout) {
             this.timeout = timeout;
             return this;
         }
 
diff a/process/src/test/java/org/openjdk/skara/process/ProcessTests.java b/process/src/test/java/org/openjdk/skara/process/ProcessTests.java
--- a/process/src/test/java/org/openjdk/skara/process/ProcessTests.java
+++ b/process/src/test/java/org/openjdk/skara/process/ProcessTests.java
@@ -45,22 +45,10 @@
         ConsoleHandler handler = new ConsoleHandler();
         handler.setLevel(Level.FINER);
         log.addHandler(handler);
     }
 
-    @Test
-    void pipeStderrRedirect() throws TimeoutException {
-        try (var pipe = Process.capture("ls", "/", invalidDirectory)
-                               .pipe("cat", "-")
-                               .execute()) {
-            var result = pipe.await();
-
-            assertTrue(result.stdout().size() > 0, "stdout: " + result.stdout());
-            assertTrue(result.stderr().size() > 0, "stderr: " + result.stderr());
-            assertTrue(result.status() != 0);
-        }
-    }
 
     @Test
     void reuseSetup() throws IOException {
         var tempFile = Files.createTempFile("reusesetup", "tmp");
         var setup = Process.capture("rm", tempFile.toString());
@@ -82,22 +70,10 @@
             assertEquals(0, result.stdout().size());
             assertEquals(0, result.stderr().size());
         }
     }
 
-    @Test
-    void noOutputPipe() {
-        try (var p = Process.command("ls", "/")
-                            .pipe("sort")
-                            .execute()) {
-            var result = p.check();
-
-            assertEquals(0, result.stdout().size());
-            assertEquals(0, result.stderr().size());
-        }
-    }
-
     @Test
     void timeout() {
         try (var p = Process.capture("sleep", "10000")
                             .timeout(Duration.ofMillis(1))
                             .execute()) {
@@ -104,32 +80,10 @@
             var result = p.await();
             assertEquals(-1, result.status());
         }
     }
 
-    @Test
-    void timeoutFirstPipe() {
-        try (var p = Process.capture("sleep", "10000")
-                            .pipe("sort")
-                            .timeout(Duration.ofMillis(1))
-                            .execute()) {
-            var result = p.await();
-            assertEquals(-1, result.status());
-        }
-    }
-
-    @Test
-    void timeoutLastPipe() {
-        try (var p = Process.capture("echo", "hello")
-                            .pipe("sleep", "10000")
-                            .timeout(Duration.ofMillis(1))
-                            .execute()) {
-            var result = p.await();
-            assertEquals(-1, result.status());
-        }
-    }
-
     @Test
     void workingDirectory() {
         try (var p = Process.capture("ls")
                             .workdir("/")
                             .execute()) {
@@ -141,30 +94,7 @@
                             .execute()) {
             var result = p.await();
             assertNotEquals(0, result.status());
         }
     }
-
-    @Test
-    void workingDirectoryPerPipe() throws IOException {
-
-        var emptyDirectory = Files.createTempDirectory("workingDirPerPipe");
-
-        try (var p = Process.capture("ls")
-                            .workdir(emptyDirectory)
-                            .pipe("sort")
-                            .workdir("/")
-                            .execute()) {
-            var result = p.check();
-            assertEquals(0, result.stdout().size());
-        }
-
-        try (var p = Process.capture("ls")
-                            .workdir("/")
-                            .pipe("sort")
-                            .workdir(emptyDirectory)
-                            .execute()) {
-            var result = p.check();
-            assertNotEquals(0, result.stdout().size());
-        }
-    }
 }
