diff a/process/src/main/java/org/openjdk/skara/process/Execution.java b/process/src/main/java/org/openjdk/skara/process/Execution.java
--- a/process/src/main/java/org/openjdk/skara/process/Execution.java
+++ b/process/src/main/java/org/openjdk/skara/process/Execution.java
@@ -38,16 +38,16 @@
     private final Logger log = Logger.getLogger("org.openjdk.skara.process");
 
     private String cmd;
     private int status = 0;
     private File stdoutFile;
-    private List<File> stderrFiles;
+    private File stderrFile;
 
     private boolean finished;
     private Result result;
     private Throwable exception;
-    private List<java.lang.Process> processes;
+    private java.lang.Process process;
 
     public static class CheckedResult {
 
         protected final int status;
         private final String command;
@@ -114,15 +113,13 @@
             processBuilder.redirectOutput(ProcessBuilder.Redirect.INHERIT);
         } else {
             processBuilder.redirectOutput(ProcessBuilder.Redirect.DISCARD);
         }
 
-        stderrFiles = new LinkedList<>();
-
         if (outputOption == Process.OutputOption.CAPTURE) {
-            var stderrFile = File.createTempFile("stderr", ".txt");
-            stderrFiles.add(stderrFile);
+            stderrFile = File.createTempFile("stderr", ".txt");
             processBuilder.redirectError(stderrFile);
         } else if (outputOption == Process.OutputOption.INHERIT) {
             processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
         } else {
             processBuilder.redirectError(ProcessBuilder.Redirect.DISCARD);
@@ -134,23 +131,21 @@
         cmd = String.join(" ", processBuilder.command());
         log.fine("Executing '" + cmd + "'");
 
         prepareRedirects();
 
-        processes = new LinkedList<>();
-        processes.add(processBuilder.start());
+        process = processBuilder.start();
     }
 
     private void waitForProcess() throws IOException, InterruptedException {
-        var process = processes.get(0);
-        var terminated = process.waitFor(timeout.toMillis(), TimeUnit.MILLISECONDS);
+        var terminated = this.process.waitFor(timeout.toMillis(), TimeUnit.MILLISECONDS);
         if (!terminated) {
             log.warning("Command '" + cmd + "' didn't finish in " + timeout + ", attempting to terminate...");
-            process.destroyForcibly().waitFor();
+            this.process.destroyForcibly().waitFor();
             throw new InterruptedException("Command '" + cmd + "' didn't finish in " + timeout + ", terminated");
         }
-        status = process.exitValue();
+        status = this.process.exitValue();
     }
 
     private List<String> content(File f) {
         var p = f.toPath();
         if (Files.exists(p)) {
@@ -171,21 +166,15 @@
             stdout = content(stdoutFile);
             if (!stdoutFile.delete()) {
                 log.warning("Failed to delete stdout file buffer: " + stdoutFile.toString());
             }
 
-            stderr = new ArrayList<String>();
-            for (var stderrFile : stderrFiles) {
-                stderr.addAll(content(stderrFile));
-                if (!stderrFile.delete()) {
-                    log.warning("Failed to delete stderr file buffer: " + stderrFile.toString());
-                }
+            stderr = content(stderrFile);
+            if (!stderrFile.delete()) {
+                log.warning("Failed to delete stderr file buffer: " + stderrFile.toString());
             }
-
         }
 
-
         var command = String.join(" ", processBuilder.command());
 
         return new Result(command, stdout, stderr, status, exception);
     }
 
@@ -239,11 +229,11 @@
 
     @Override
     public void close() {
         synchronized (this) {
             if (!finished) {
-                // FIXME: stop processes
+                // FIXME: stop process
                 finished = true;
                 status = -1;
                 result = createResult();
             }
         }
