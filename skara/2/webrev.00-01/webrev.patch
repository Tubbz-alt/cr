diff a/process/src/main/java/org/openjdk/skara/process/Execution.java b/process/src/main/java/org/openjdk/skara/process/Execution.java
--- a/process/src/main/java/org/openjdk/skara/process/Execution.java
+++ b/process/src/main/java/org/openjdk/skara/process/Execution.java
@@ -29,11 +29,11 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Logger;
 
 public class Execution implements AutoCloseable {
 
-    private final List<ProcessBuilder> processBuilders;
+    private final ProcessBuilder processBuilder;
     private final Process.OutputOption outputOption;
     private final Duration timeout;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.process");
 
@@ -40,11 +40,10 @@
     private String cmd;
     private int status = 0;
     private File stdoutFile;
     private List<File> stderrFiles;
 
-    private Instant start;
     private boolean finished;
     private Result result;
     private Throwable exception;
     private List<java.lang.Process> processes;
 
@@ -104,50 +102,44 @@
         public int status() {
             return status;
         }
     }
 
-    private ProcessBuilder getLastProcessBuilder() {
-        return processBuilders.get(processBuilders.size() - 1);
-    }
-
     private void prepareRedirects() throws IOException {
 
-        // For piped execution, only the last process can generated output on stdout
         if (outputOption == Process.OutputOption.CAPTURE) {
             stdoutFile = File.createTempFile("stdout", ".txt");
-            getLastProcessBuilder().redirectOutput(stdoutFile);
+            processBuilder.redirectOutput(stdoutFile);
         } else if (outputOption == Process.OutputOption.INHERIT) {
-            getLastProcessBuilder().redirectOutput(ProcessBuilder.Redirect.INHERIT);
+            processBuilder.redirectOutput(ProcessBuilder.Redirect.INHERIT);
         } else {
-            getLastProcessBuilder().redirectOutput(ProcessBuilder.Redirect.DISCARD);
+            processBuilder.redirectOutput(ProcessBuilder.Redirect.DISCARD);
         }
 
-        // But every process can write to stderr
         stderrFiles = new LinkedList<>();
-        for (var processBuilder : processBuilders) {
-            if (outputOption == Process.OutputOption.CAPTURE) {
-                var stderrFile = File.createTempFile("stderr", ".txt");
-                stderrFiles.add(stderrFile);
-                processBuilder.redirectError(stderrFile);
-            } else if (outputOption == Process.OutputOption.INHERIT) {
-                processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
-            } else {
-                processBuilder.redirectError(ProcessBuilder.Redirect.DISCARD);
-            }
+
+        if (outputOption == Process.OutputOption.CAPTURE) {
+            var stderrFile = File.createTempFile("stderr", ".txt");
+            stderrFiles.add(stderrFile);
+            processBuilder.redirectError(stderrFile);
+        } else if (outputOption == Process.OutputOption.INHERIT) {
+            processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
+        } else {
+            processBuilder.redirectError(ProcessBuilder.Redirect.DISCARD);
         }
+
     }
 
     private void startProcess() throws IOException {
-        cmd = String.join(" ", getLastProcessBuilder().command());
+        cmd = String.join(" ", processBuilder.command());
         log.fine("Executing '" + cmd + "'");
 
         prepareRedirects();
-        start = Instant.now();
 
         processes = new LinkedList<>();
-        processes.add(getLastProcessBuilder().start());
+        processes.add(processBuilder.start());
     }
 
     private void waitForProcess() throws IOException, InterruptedException {
         var process = processes.get(0);
         var terminated = process.waitFor(timeout.toMillis(), TimeUnit.MILLISECONDS);
@@ -190,18 +182,17 @@
             }
 
         }
 
 
-        var command = processBuilders.stream()
-                                     .map(pb -> String.join(" ", pb.command()))
-                                     .reduce("", (res, cmd) -> res.isEmpty() ? cmd : res + " | " + cmd);
+        var command = String.join(" ", processBuilder.command());
+
         return new Result(command, stdout, stderr, status, exception);
     }
 
-    Execution(List<ProcessBuilder> processBuilders, Process.OutputOption outputOption, Duration timeout) {
-        this.processBuilders = processBuilders;
+    Execution(ProcessBuilder processBuilder, Process.OutputOption outputOption, Duration timeout) {
+        this.processBuilder = processBuilder;
         this.outputOption = outputOption;
         this.timeout = timeout;
 
         finished = false;
 
diff a/process/src/main/java/org/openjdk/skara/process/Process.java b/process/src/main/java/org/openjdk/skara/process/Process.java
--- a/process/src/main/java/org/openjdk/skara/process/Process.java
+++ b/process/src/main/java/org/openjdk/skara/process/Process.java
@@ -46,11 +46,11 @@
                 environment = new HashMap<>();
             }
         }
 
         private final OutputOption outputOption;
-        private final List<ProcessBuilderSetup> processBuilderSetups = new LinkedList<>();
+        private ProcessBuilderSetup processBuilderSetup;
         private Duration timeout;
 
         Description(Process.OutputOption outputOption, String... command) {
             this.outputOption = outputOption;
             timeout = Duration.ofHours(6);
@@ -53,16 +53,15 @@
 
         Description(Process.OutputOption outputOption, String... command) {
             this.outputOption = outputOption;
             timeout = Duration.ofHours(6);
 
-            var setup = new ProcessBuilderSetup(command);
-            processBuilderSetups.add(setup);
+            this.processBuilderSetup = new ProcessBuilderSetup(command);
         }
 
         private ProcessBuilderSetup getCurrentProcessBuilderSetup() {
-            return processBuilderSetups.get(processBuilderSetups.size() - 1);
+            return processBuilderSetup;
         }
 
         public Description environ(String key, String value) {
             getCurrentProcessBuilderSetup().environment.put(key, value);
             return this;
@@ -82,21 +81,18 @@
             getCurrentProcessBuilderSetup().workdir = Path.of(workdir);
             return this;
         }
 
         public Execution execute() {
-            var processBuilders = processBuilderSetups.stream()
-                                                      .map(setup -> {
-                                                          var builder = new ProcessBuilder(setup.command.toArray(new String[0]));
-                                                          builder.environment().putAll(setup.environment);
-                                                          if (setup.workdir != null) {
-                                                              builder.directory(setup.workdir.toFile());
-                                                          }
-                                                          return builder;
-                                                      })
-                                                      .collect(Collectors.toList());
-            return new Execution(processBuilders, outputOption, timeout);
+
+            var builder = new ProcessBuilder(processBuilderSetup.command.toArray(new String[0]));
+            builder.environment().putAll(processBuilderSetup.environment);
+            if (processBuilderSetup.workdir != null) {
+                builder.directory(processBuilderSetup.workdir.toFile());
+            }
+
+            return new Execution(builder, outputOption, timeout);
         }
 
     }
 
     /**
