diff a/process/src/main/java/org/openjdk/skara/process/Execution.java b/process/src/main/java/org/openjdk/skara/process/Execution.java
--- a/process/src/main/java/org/openjdk/skara/process/Execution.java
+++ b/process/src/main/java/org/openjdk/skara/process/Execution.java
@@ -26,15 +25,15 @@
 import java.nio.file.Files;
 import java.time.*;
 import java.util.*;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Logger;
-import java.util.stream.Collectors;
 
 public class Execution implements AutoCloseable {
 
-    private final List<ProcessBuilder> processBuilders;
+    private final ProcessBuilder processBuilder;
     private final Process.OutputOption outputOption;
     private final Duration timeout;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.process");
 
@@ -41,11 +40,10 @@
     private String cmd;
     private int status = 0;
     private File stdoutFile;
     private List<File> stderrFiles;
 
-    private Instant start;
     private boolean finished;
     private Result result;
     private Throwable exception;
     private List<java.lang.Process> processes;
 
@@ -105,96 +102,44 @@
         public int status() {
             return status;
         }
     }
 
-    private ProcessBuilder getLastProcessBuilder() {
-        return processBuilders.get(processBuilders.size() - 1);
-    }
-
     private void prepareRedirects() throws IOException {
 
-        // For piped execution, only the last process can generated output on stdout
         if (outputOption == Process.OutputOption.CAPTURE) {
             stdoutFile = File.createTempFile("stdout", ".txt");
-            getLastProcessBuilder().redirectOutput(stdoutFile);
+            processBuilder.redirectOutput(stdoutFile);
         } else if (outputOption == Process.OutputOption.INHERIT) {
-            getLastProcessBuilder().redirectOutput(ProcessBuilder.Redirect.INHERIT);
+            processBuilder.redirectOutput(ProcessBuilder.Redirect.INHERIT);
         } else {
-            getLastProcessBuilder().redirectOutput(ProcessBuilder.Redirect.DISCARD);
+            processBuilder.redirectOutput(ProcessBuilder.Redirect.DISCARD);
         }
 
-        // But every process can write to stderr
         stderrFiles = new LinkedList<>();
-        for (var processBuilder : processBuilders) {
-            if (outputOption == Process.OutputOption.CAPTURE) {
-                var stderrFile = File.createTempFile("stderr", ".txt");
-                stderrFiles.add(stderrFile);
-                processBuilder.redirectError(stderrFile);
-            } else if (outputOption == Process.OutputOption.INHERIT) {
-                processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
-            } else {
-                processBuilder.redirectError(ProcessBuilder.Redirect.DISCARD);
-            }
-        }
-    }
-
-    private void startProcessPipe() throws IOException {
-        cmd = processBuilders.stream()
-                             .map(p -> String.join(" ", p.command()))
-                             .collect(Collectors.joining(" | "));
-        log.fine("Executing pipeline '" + cmd + "'");
-
-        prepareRedirects();
-        start = Instant.now();
-
-        processes = ProcessBuilder.startPipeline(processBuilders);
-    }
-
-    private void waitForProcessPipe() throws IOException, InterruptedException {
-        var remainingTimeout = Duration.from(timeout);
-        for (var process : processes) {
-            var terminated = false;
-            try {
-                terminated = process.waitFor(timeout.toMillis(), TimeUnit.MILLISECONDS);
-                if (terminated) {
-                    var processStatus = process.exitValue();
-                    if (processStatus != 0) {
-                        // Set the final status to the rightmost command to exit with a non-zero status,
-                        // similar to pipefail in shells
-                        status = processStatus;
-                    }
-                }
-            } catch (InterruptedException e) {
-                status = -1;
-                break;
-            }
 
-            if (!terminated) {
-                log.warning("Command '" + cmd + "' didn't finish in " + timeout + ", attempting to terminate...");
-                try {
-                    process.destroyForcibly().waitFor();
-                } catch (InterruptedException e) {
-                    log.warning("Failed to terminate command");
-                    throw new RuntimeException("Failed to terminate timeouted command '" + cmd + "'");
-                }
-                throw new InterruptedException("Command '" + cmd + "' didn't finish in " + timeout + ", terminated");
-            }
-            remainingTimeout = remainingTimeout.minus(Duration.between(start, Instant.now()));
-            start = Instant.now();
+        if (outputOption == Process.OutputOption.CAPTURE) {
+            var stderrFile = File.createTempFile("stderr", ".txt");
+            stderrFiles.add(stderrFile);
+            processBuilder.redirectError(stderrFile);
+        } else if (outputOption == Process.OutputOption.INHERIT) {
+            processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
+        } else {
+            processBuilder.redirectError(ProcessBuilder.Redirect.DISCARD);
         }
+
     }
 
     private void startProcess() throws IOException {
-        cmd = String.join(" ", getLastProcessBuilder().command());
+        cmd = String.join(" ", processBuilder.command());
         log.fine("Executing '" + cmd + "'");
 
         prepareRedirects();
-        start = Instant.now();
 
         processes = new LinkedList<>();
-        processes.add(getLastProcessBuilder().start());
+        processes.add(processBuilder.start());
     }
 
     private void waitForProcess() throws IOException, InterruptedException {
         var process = processes.get(0);
         var terminated = process.waitFor(timeout.toMillis(), TimeUnit.MILLISECONDS);
@@ -237,18 +182,17 @@
             }
 
         }
 
 
-        var command = processBuilders.stream()
-                                     .map(pb -> String.join(" ", pb.command()))
-                                     .reduce("", (res, cmd) -> res.isEmpty() ? cmd : res + " | " + cmd);
+        var command = String.join(" ", processBuilder.command());
+
         return new Result(command, stdout, stderr, status, exception);
     }
 
-    Execution(List<ProcessBuilder> processBuilders, Process.OutputOption outputOption, Duration timeout) {
-        this.processBuilders = processBuilders;
+    Execution(ProcessBuilder processBuilder, Process.OutputOption outputOption, Duration timeout) {
+        this.processBuilder = processBuilder;
         this.outputOption = outputOption;
         this.timeout = timeout;
 
         finished = false;
 
@@ -251,15 +195,11 @@
         this.timeout = timeout;
 
         finished = false;
 
         try {
-            if (processBuilders.size() == 1) {
-                startProcess();
-            } else {
-                startProcessPipe();
-            }
+            startProcess();
         } catch (IOException e) {
             log.throwing("Process", "execute", e);
             finished = true;
             exception = e;
             status = -1;
@@ -269,15 +209,11 @@
 
     public Result await() {
         synchronized (this) {
             if (!finished) {
                 try {
-                    if (processBuilders.size() == 1) {
-                        waitForProcess();
-                    } else {
-                        waitForProcessPipe();
-                    }
+                    waitForProcess();
                 } catch (IOException | InterruptedException e) {
                     status = -1;
                     exception = e;
                 }
 
