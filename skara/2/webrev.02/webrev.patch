diff a/process/src/main/java/org/openjdk/skara/process/Execution.java b/process/src/main/java/org/openjdk/skara/process/Execution.java
--- a/process/src/main/java/org/openjdk/skara/process/Execution.java
+++ b/process/src/main/java/org/openjdk/skara/process/Execution.java
@@ -26,15 +25,15 @@
 import java.nio.file.Files;
 import java.time.*;
 import java.util.*;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Logger;
-import java.util.stream.Collectors;
 
 public class Execution implements AutoCloseable {
 
-    private final List<ProcessBuilder> processBuilders;
+    private final ProcessBuilder processBuilder;
     private final Process.OutputOption outputOption;
     private final Duration timeout;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.process");
 
@@ -39,17 +38,16 @@
     private final Logger log = Logger.getLogger("org.openjdk.skara.process");
 
     private String cmd;
     private int status = 0;
     private File stdoutFile;
-    private List<File> stderrFiles;
+    private File stderrFile;
 
-    private Instant start;
     private boolean finished;
     private Result result;
     private Throwable exception;
-    private List<java.lang.Process> processes;
+    private java.lang.Process process;
 
     public static class CheckedResult {
 
         protected final int status;
         private final String command;
@@ -105,107 +102,50 @@
         public int status() {
             return status;
         }
     }
 
-    private ProcessBuilder getLastProcessBuilder() {
-        return processBuilders.get(processBuilders.size() - 1);
-    }
-
     private void prepareRedirects() throws IOException {
 
-        // For piped execution, only the last process can generated output on stdout
         if (outputOption == Process.OutputOption.CAPTURE) {
             stdoutFile = File.createTempFile("stdout", ".txt");
-            getLastProcessBuilder().redirectOutput(stdoutFile);
+            processBuilder.redirectOutput(stdoutFile);
         } else if (outputOption == Process.OutputOption.INHERIT) {
-            getLastProcessBuilder().redirectOutput(ProcessBuilder.Redirect.INHERIT);
+            processBuilder.redirectOutput(ProcessBuilder.Redirect.INHERIT);
         } else {
-            getLastProcessBuilder().redirectOutput(ProcessBuilder.Redirect.DISCARD);
+            processBuilder.redirectOutput(ProcessBuilder.Redirect.DISCARD);
         }
 
-        // But every process can write to stderr
-        stderrFiles = new LinkedList<>();
-        for (var processBuilder : processBuilders) {
-            if (outputOption == Process.OutputOption.CAPTURE) {
-                var stderrFile = File.createTempFile("stderr", ".txt");
-                stderrFiles.add(stderrFile);
-                processBuilder.redirectError(stderrFile);
-            } else if (outputOption == Process.OutputOption.INHERIT) {
-                processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
-            } else {
-                processBuilder.redirectError(ProcessBuilder.Redirect.DISCARD);
-            }
+        if (outputOption == Process.OutputOption.CAPTURE) {
+            stderrFile = File.createTempFile("stderr", ".txt");
+            processBuilder.redirectError(stderrFile);
+        } else if (outputOption == Process.OutputOption.INHERIT) {
+            processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
+        } else {
+            processBuilder.redirectError(ProcessBuilder.Redirect.DISCARD);
         }
-    }
-
-    private void startProcessPipe() throws IOException {
-        cmd = processBuilders.stream()
-                             .map(p -> String.join(" ", p.command()))
-                             .collect(Collectors.joining(" | "));
-        log.fine("Executing pipeline '" + cmd + "'");
-
-        prepareRedirects();
-        start = Instant.now();
-
-        processes = ProcessBuilder.startPipeline(processBuilders);
-    }
 
-    private void waitForProcessPipe() throws IOException, InterruptedException {
-        var remainingTimeout = Duration.from(timeout);
-        for (var process : processes) {
-            var terminated = false;
-            try {
-                terminated = process.waitFor(timeout.toMillis(), TimeUnit.MILLISECONDS);
-                if (terminated) {
-                    var processStatus = process.exitValue();
-                    if (processStatus != 0) {
-                        // Set the final status to the rightmost command to exit with a non-zero status,
-                        // similar to pipefail in shells
-                        status = processStatus;
-                    }
-                }
-            } catch (InterruptedException e) {
-                status = -1;
-                break;
-            }
-
-            if (!terminated) {
-                log.warning("Command '" + cmd + "' didn't finish in " + timeout + ", attempting to terminate...");
-                try {
-                    process.destroyForcibly().waitFor();
-                } catch (InterruptedException e) {
-                    log.warning("Failed to terminate command");
-                    throw new RuntimeException("Failed to terminate timeouted command '" + cmd + "'");
-                }
-                throw new InterruptedException("Command '" + cmd + "' didn't finish in " + timeout + ", terminated");
-            }
-            remainingTimeout = remainingTimeout.minus(Duration.between(start, Instant.now()));
-            start = Instant.now();
-        }
     }
 
     private void startProcess() throws IOException {
-        cmd = String.join(" ", getLastProcessBuilder().command());
+        cmd = String.join(" ", processBuilder.command());
         log.fine("Executing '" + cmd + "'");
 
         prepareRedirects();
-        start = Instant.now();
 
-        processes = new LinkedList<>();
-        processes.add(getLastProcessBuilder().start());
+        process = processBuilder.start();
     }
 
     private void waitForProcess() throws IOException, InterruptedException {
-        var process = processes.get(0);
-        var terminated = process.waitFor(timeout.toMillis(), TimeUnit.MILLISECONDS);
+        var terminated = this.process.waitFor(timeout.toMillis(), TimeUnit.MILLISECONDS);
         if (!terminated) {
             log.warning("Command '" + cmd + "' didn't finish in " + timeout + ", attempting to terminate...");
-            process.destroyForcibly().waitFor();
+            this.process.destroyForcibly().waitFor();
             throw new InterruptedException("Command '" + cmd + "' didn't finish in " + timeout + ", terminated");
         }
-        status = process.exitValue();
+        status = this.process.exitValue();
     }
 
     private List<String> content(File f) {
         var p = f.toPath();
         if (Files.exists(p)) {
@@ -226,29 +166,23 @@
             stdout = content(stdoutFile);
             if (!stdoutFile.delete()) {
                 log.warning("Failed to delete stdout file buffer: " + stdoutFile.toString());
             }
 
-            stderr = new ArrayList<String>();
-            for (var stderrFile : stderrFiles) {
-                stderr.addAll(content(stderrFile));
-                if (!stderrFile.delete()) {
-                    log.warning("Failed to delete stderr file buffer: " + stderrFile.toString());
-                }
+            stderr = content(stderrFile);
+            if (!stderrFile.delete()) {
+                log.warning("Failed to delete stderr file buffer: " + stderrFile.toString());
             }
-
         }
 
+        var command = String.join(" ", processBuilder.command());
 
-        var command = processBuilders.stream()
-                                     .map(pb -> String.join(" ", pb.command()))
-                                     .reduce("", (res, cmd) -> res.isEmpty() ? cmd : res + " | " + cmd);
         return new Result(command, stdout, stderr, status, exception);
     }
 
-    Execution(List<ProcessBuilder> processBuilders, Process.OutputOption outputOption, Duration timeout) {
-        this.processBuilders = processBuilders;
+    Execution(ProcessBuilder processBuilder, Process.OutputOption outputOption, Duration timeout) {
+        this.processBuilder = processBuilder;
         this.outputOption = outputOption;
         this.timeout = timeout;
 
         finished = false;
 
@@ -251,15 +185,11 @@
         this.timeout = timeout;
 
         finished = false;
 
         try {
-            if (processBuilders.size() == 1) {
-                startProcess();
-            } else {
-                startProcessPipe();
-            }
+            startProcess();
         } catch (IOException e) {
             log.throwing("Process", "execute", e);
             finished = true;
             exception = e;
             status = -1;
@@ -269,15 +199,11 @@
 
     public Result await() {
         synchronized (this) {
             if (!finished) {
                 try {
-                    if (processBuilders.size() == 1) {
-                        waitForProcess();
-                    } else {
-                        waitForProcessPipe();
-                    }
+                    waitForProcess();
                 } catch (IOException | InterruptedException e) {
                     status = -1;
                     exception = e;
                 }
 
@@ -303,11 +229,11 @@
 
     @Override
     public void close() {
         synchronized (this) {
             if (!finished) {
-                // FIXME: stop processes
+                // FIXME: stop process
                 finished = true;
                 status = -1;
                 result = createResult();
             }
         }
diff a/process/src/main/java/org/openjdk/skara/process/Process.java b/process/src/main/java/org/openjdk/skara/process/Process.java
--- a/process/src/main/java/org/openjdk/skara/process/Process.java
+++ b/process/src/main/java/org/openjdk/skara/process/Process.java
@@ -46,11 +46,11 @@
                 environment = new HashMap<>();
             }
         }
 
         private final OutputOption outputOption;
-        private final List<ProcessBuilderSetup> processBuilderSetups = new LinkedList<>();
+        private ProcessBuilderSetup processBuilderSetup;
         private Duration timeout;
 
         Description(Process.OutputOption outputOption, String... command) {
             this.outputOption = outputOption;
             timeout = Duration.ofHours(6);
@@ -53,16 +53,15 @@
 
         Description(Process.OutputOption outputOption, String... command) {
             this.outputOption = outputOption;
             timeout = Duration.ofHours(6);
 
-            var setup = new ProcessBuilderSetup(command);
-            processBuilderSetups.add(setup);
+            this.processBuilderSetup = new ProcessBuilderSetup(command);
         }
 
         private ProcessBuilderSetup getCurrentProcessBuilderSetup() {
-            return processBuilderSetups.get(processBuilderSetups.size() - 1);
+            return processBuilderSetup;
         }
 
         public Description environ(String key, String value) {
             getCurrentProcessBuilderSetup().environment.put(key, value);
             return this;
@@ -66,16 +65,10 @@
         public Description environ(String key, String value) {
             getCurrentProcessBuilderSetup().environment.put(key, value);
             return this;
         }
 
-        public Description pipe(String... command) {
-            var setup = new ProcessBuilderSetup(command);
-            processBuilderSetups.add(setup);
-            return this;
-        }
-
         public Description timeout(Duration timeout) {
             this.timeout = timeout;
             return this;
         }
 
@@ -88,21 +81,18 @@
             getCurrentProcessBuilderSetup().workdir = Path.of(workdir);
             return this;
         }
 
         public Execution execute() {
-            var processBuilders = processBuilderSetups.stream()
-                                                      .map(setup -> {
-                                                          var builder = new ProcessBuilder(setup.command.toArray(new String[0]));
-                                                          builder.environment().putAll(setup.environment);
-                                                          if (setup.workdir != null) {
-                                                              builder.directory(setup.workdir.toFile());
-                                                          }
-                                                          return builder;
-                                                      })
-                                                      .collect(Collectors.toList());
-            return new Execution(processBuilders, outputOption, timeout);
+
+            var builder = new ProcessBuilder(processBuilderSetup.command.toArray(new String[0]));
+            builder.environment().putAll(processBuilderSetup.environment);
+            if (processBuilderSetup.workdir != null) {
+                builder.directory(processBuilderSetup.workdir.toFile());
+            }
+
+            return new Execution(builder, outputOption, timeout);
         }
 
     }
 
     /**
diff a/process/src/test/java/org/openjdk/skara/process/ProcessTests.java b/process/src/test/java/org/openjdk/skara/process/ProcessTests.java
--- a/process/src/test/java/org/openjdk/skara/process/ProcessTests.java
+++ b/process/src/test/java/org/openjdk/skara/process/ProcessTests.java
@@ -45,22 +45,10 @@
         ConsoleHandler handler = new ConsoleHandler();
         handler.setLevel(Level.FINER);
         log.addHandler(handler);
     }
 
-    @Test
-    void pipeStderrRedirect() throws TimeoutException {
-        try (var pipe = Process.capture("ls", "/", invalidDirectory)
-                               .pipe("cat", "-")
-                               .execute()) {
-            var result = pipe.await();
-
-            assertTrue(result.stdout().size() > 0, "stdout: " + result.stdout());
-            assertTrue(result.stderr().size() > 0, "stderr: " + result.stderr());
-            assertTrue(result.status() != 0);
-        }
-    }
 
     @Test
     void reuseSetup() throws IOException {
         var tempFile = Files.createTempFile("reusesetup", "tmp");
         var setup = Process.capture("rm", tempFile.toString());
@@ -82,22 +70,10 @@
             assertEquals(0, result.stdout().size());
             assertEquals(0, result.stderr().size());
         }
     }
 
-    @Test
-    void noOutputPipe() {
-        try (var p = Process.command("ls", "/")
-                            .pipe("sort")
-                            .execute()) {
-            var result = p.check();
-
-            assertEquals(0, result.stdout().size());
-            assertEquals(0, result.stderr().size());
-        }
-    }
-
     @Test
     void timeout() {
         try (var p = Process.capture("sleep", "10000")
                             .timeout(Duration.ofMillis(1))
                             .execute()) {
@@ -104,32 +80,10 @@
             var result = p.await();
             assertEquals(-1, result.status());
         }
     }
 
-    @Test
-    void timeoutFirstPipe() {
-        try (var p = Process.capture("sleep", "10000")
-                            .pipe("sort")
-                            .timeout(Duration.ofMillis(1))
-                            .execute()) {
-            var result = p.await();
-            assertEquals(-1, result.status());
-        }
-    }
-
-    @Test
-    void timeoutLastPipe() {
-        try (var p = Process.capture("echo", "hello")
-                            .pipe("sleep", "10000")
-                            .timeout(Duration.ofMillis(1))
-                            .execute()) {
-            var result = p.await();
-            assertEquals(-1, result.status());
-        }
-    }
-
     @Test
     void workingDirectory() {
         try (var p = Process.capture("ls")
                             .workdir("/")
                             .execute()) {
@@ -141,30 +94,7 @@
                             .execute()) {
             var result = p.await();
             assertNotEquals(0, result.status());
         }
     }
-
-    @Test
-    void workingDirectoryPerPipe() throws IOException {
-
-        var emptyDirectory = Files.createTempDirectory("workingDirPerPipe");
-
-        try (var p = Process.capture("ls")
-                            .workdir(emptyDirectory)
-                            .pipe("sort")
-                            .workdir("/")
-                            .execute()) {
-            var result = p.check();
-            assertEquals(0, result.stdout().size());
-        }
-
-        try (var p = Process.capture("ls")
-                            .workdir("/")
-                            .pipe("sort")
-                            .workdir(emptyDirectory)
-                            .execute()) {
-            var result = p.check();
-            assertNotEquals(0, result.stdout().size());
-        }
-    }
 }
