diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -40,33 +40,41 @@
 import java.util.stream.Collectors;
 
 import static org.junit.jupiter.api.Assertions.*;
 
 class MailingListBridgeBotTests {
-    private boolean archiveContains(Path archive, String text) {
-        return archiveContainsCount(archive, text) > 0;
-    }
-
-    private int archiveContainsCount(Path archive, String text) {
+    private Optional<String> archiveContents(Path archive) {
         try {
             var mbox = Files.find(archive, 50, (path, attrs) -> path.toString().endsWith(".mbox")).findAny();
             if (mbox.isEmpty()) {
-                return 0;
+                return Optional.empty();
             }
-            var lines = Files.readString(mbox.get(), StandardCharsets.UTF_8);
-            var pattern = Pattern.compile(text);
-            int count = 0;
-            for (var line : lines.split("\\R")) {
-                var matcher = pattern.matcher(line);
-                if (matcher.find()) {
-                    count++;
-                }
-            }
-            return count;
+            return Optional.of(Files.readString(mbox.get(), StandardCharsets.UTF_8));
         } catch (IOException e) {
+            return Optional.empty();
+        }
+
+    }
+
+    private boolean archiveContains(Path archive, String text) {
+        return archiveContainsCount(archive, text) > 0;
+    }
+
+    private int archiveContainsCount(Path archive, String text) {
+        var lines = archiveContents(archive);
+        if (lines.isEmpty()) {
             return 0;
         }
+        var pattern = Pattern.compile(text);
+        int count = 0;
+        for (var line : lines.get().split("\\R")) {
+            var matcher = pattern.matcher(line);
+            if (matcher.find()) {
+                count++;
+            }
+        }
+        return count;
     }
 
     private boolean webrevContains(Path webrev, String text) {
         try {
             var index = Files.find(webrev, 5, (path, attrs) -> path.toString().endsWith("index.html")).findAny();
@@ -478,29 +486,35 @@
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
             listServer.processIncoming();
             listServer.processIncoming();
 
-            // Finally some approvals
+            // Finally some approvals and another comment
             pr.addReview(Review.Verdict.APPROVED, "Nice");
             reviewPr.addReview(Review.Verdict.APPROVED, "Looks fine");
+            reviewPr.addReviewCommentReply(comment2, "You are welcome");
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
             listServer.processIncoming();
+            listServer.processIncoming();
 
             // Sanity check the archive
             Repository.materialize(archiveFolder.path(), archive.getUrl(), "master");
-            assertEquals(8, archiveContainsCount(archiveFolder.path(), "^On.*wrote:"));
+            assertEquals(9, archiveContainsCount(archiveFolder.path(), "^On.*wrote:"));
+
+            // File specific comments should appear before the approval
+            var archiveText = archiveContents(archiveFolder.path()).orElseThrow();
+            assertTrue(archiveText.indexOf("Looks fine") > archiveText.indexOf("You are welcome"));
 
             // Check the mailing list
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP());
             var mailmanList = mailmanServer.getList(listAddress.address());
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             var mail = conversations.get(0).first();
             assertEquals("RFR: This is a pull request", mail.subject());
-            assertEquals(9, conversations.get(0).allMessages().size());
+            assertEquals(10, conversations.get(0).allMessages().size());
 
             // There should be four separate threads
             var thread1 = conversations.get(0).replies(mail).get(0);
             assertEquals(2, thread1.body().split("^On.*wrote:").length);
             assertEquals(2, thread1.body().split("> This is now ready").length, thread1.body());
@@ -525,10 +539,11 @@
             var thread2reply1 = conversations.get(0).replies(thread2).get(0);
             assertTrue(thread2reply1.body().contains("Sounds good"));
             var thread2reply2 = conversations.get(0).replies(thread2reply1).get(0);
             assertTrue(thread2reply2.body().contains("Thanks"));
 
+            var replies = conversations.get(0).replies(mail);
             var thread3 = conversations.get(0).replies(mail).get(2);
             assertEquals("Re: RFR: This is a pull request", thread3.subject());
             var thread4 = conversations.get(0).replies(mail).get(3);
             assertEquals("Re: [Approved] RFR: This is a pull request", thread4.subject());
         }
