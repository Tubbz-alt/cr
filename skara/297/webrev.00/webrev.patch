diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -98,25 +98,37 @@
             name = name.substring(0, name.length() - ".git".length());
         }
         return name;
     }
 
-    private static HostedRepository getHostedRepositoryFor(URI uri, Forge host) throws IOException {
-        var remoteRepo = host.repository(projectName(uri)).orElseThrow(() ->
-                new IOException("Could not find repository at: " + uri.toString())
-        );
-        var parentRepo = remoteRepo.parent();
-        var targetRepo = parentRepo.isPresent() ? parentRepo.get() : remoteRepo;
+    private static HostedRepository getHostedRepositoryFor(URI uri, ReadOnlyRepository repo, Forge host) throws IOException {
+        HostedRepository targetRepo = null;
+
+        try {
+            var upstream = Remote.toWebURI(repo.pullPath("upstream"));
+            targetRepo = host.repository(projectName(upstream)).orElse(null);
+        } catch (IOException e) {
+            // do nothing
+        }
+
+        if (targetRepo == null) {
+            var remoteRepo = host.repository(projectName(uri)).orElseThrow(() ->
+                    new IOException("Could not find repository at: " + uri.toString())
+            );
+            var parentRepo = remoteRepo.parent();
+            targetRepo = parentRepo.isPresent() ? parentRepo.get() : remoteRepo;
+        }
+
         return targetRepo;
     }
 
-    private static PullRequest getPullRequest(URI uri, Forge host, Argument prId) throws IOException {
+    private static PullRequest getPullRequest(URI uri, ReadOnlyRepository repo, Forge host, Argument prId) throws IOException {
         if (!prId.isPresent()) {
             exit("error: missing pull request identifier");
         }
 
-        var pr = getHostedRepositoryFor(uri, host).pullRequest(prId.asString());
+        var pr = getHostedRepositoryFor(uri, repo, host).pullRequest(prId.asString());
         if (pr == null) {
             exit("error: could not fetch PR information");
         }
 
         return pr;
@@ -678,11 +690,11 @@
                 pr.setAssignees(assignees);
             }
             System.out.println(pr.webUrl().toString());
             Files.deleteIfExists(file);
         } else if (action.equals("integrate") || action.equals("approve") || action.equals("test")) {
-            var pr = getPullRequest(uri, host, arguments.at(1));
+            var pr = getPullRequest(uri, repo, host, arguments.at(1));
 
             if (action.equals("integrate")) {
                 pr.addComment("/integrate");
             } else if (action.equals("test")) {
                 pr.addComment("/test");
@@ -690,13 +702,12 @@
                 pr.addReview(Review.Verdict.APPROVED, "Looks good!");
             } else {
                 throw new IllegalStateException("unexpected action: " + action);
             }
         } else if (action.equals("list")) {
-            var remoteRepo = getHostedRepositoryFor(uri, host);
+            var remoteRepo = getHostedRepositoryFor(uri, repo, host);
             var prs = remoteRepo.pullRequests();
-
             var ids = new ArrayList<String>();
             var titles = new ArrayList<String>();
             var authors = new ArrayList<String>();
             var assignees = new ArrayList<String>();
             var labels = new ArrayList<String>();
@@ -782,11 +793,11 @@
             var prId = arguments.at(1);
             if (!prId.isPresent()) {
                 exit("error: missing pull request identifier");
             }
 
-            var remoteRepo = getHostedRepositoryFor(uri, host);
+            var remoteRepo = getHostedRepositoryFor(uri, repo, host);
             var pr = remoteRepo.pullRequest(prId.asString());
             var repoUrl = remoteRepo.webUrl();
             var prHeadRef = pr.sourceRef();
             var isHgGit = isMercurial && Repository.exists(repo.root().resolve(".hg").resolve("git"));
             if (isHgGit) {
@@ -856,20 +867,20 @@
             var prId = arguments.at(1);
             if (!prId.isPresent()) {
                 exit("error: missing pull request identifier");
             }
 
-            var remoteRepo = getHostedRepositoryFor(uri, host);
+            var remoteRepo = getHostedRepositoryFor(uri, repo, host);
             var pr = remoteRepo.pullRequest(prId.asString());
             pr.setState(PullRequest.State.CLOSED);
         } else if (action.equals("update")) {
             var prId = arguments.at(1);
             if (!prId.isPresent()) {
                 exit("error: missing pull request identifier");
             }
 
-            var remoteRepo = getHostedRepositoryFor(uri, host);
+            var remoteRepo = getHostedRepositoryFor(uri, repo, host);
             var pr = remoteRepo.pullRequest(prId.asString());
             if (arguments.contains("assignees")) {
                 var usernames = Arrays.asList(arguments.get("assignees").asString().split(","));
                 var assignees = usernames.stream()
                     .map(u -> host.user(u))
