diff a/webrev/build.gradle b/webrev/build.gradle
--- a/webrev/build.gradle
+++ b/webrev/build.gradle
@@ -34,10 +34,19 @@
     implementation project(':vcs')
 
     testImplementation project(':test')
 }
 
+task copyResources(type: Copy) {
+    from "${projectDir}/src/main/resources"
+    into "${buildDir}/classes/java/test"
+}
+
+test {
+    dependsOn 'copyResources'
+}
+
 publishing {
     publications {
         webrev(MavenPublication) {
             from components.java
         }
diff a/webrev/src/main/java/org/openjdk/skara/webrev/FramesView.java b/webrev/src/main/java/org/openjdk/skara/webrev/FramesView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/FramesView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/FramesView.java
@@ -90,11 +90,11 @@
             var hunks = patch.hunks();
             for (var hunkIndex = 0; hunkIndex < hunks.size(); hunkIndex++) {
                 var hunk = hunks.get(hunkIndex);
                 var numSourceLines = hunk.source().lines().size();
                 var numDestLines = hunk.target().lines().size();
-                var start = numSourceLines == 0 ?
+                var start = numSourceLines == 0 && hunk.source().range().start() == 0 ?
                     hunk.source().range().start() :
                     hunk.source().range().start() - 1;
 
                 for (var i = lastEnd; i < start; i++) {
                     ViewUtils.writeWithLineNumber(fw, sourceContent.get(i), i + 1, maxLineNum);
diff a/webrev/src/test/java/org/openjdk/skara/webrev/WebrevTests.java b/webrev/src/test/java/org/openjdk/skara/webrev/WebrevTests.java
--- a/webrev/src/test/java/org/openjdk/skara/webrev/WebrevTests.java
+++ b/webrev/src/test/java/org/openjdk/skara/webrev/WebrevTests.java
@@ -38,10 +38,29 @@
     void assertContains(Path file, String text) throws IOException {
         var contents = Files.readString(file);
         assertTrue(contents.contains(text));
     }
 
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void simple(VCS vcs) throws IOException {
+        try (var repoFolder = new TemporaryDirectory();
+             var webrevFolder = new TemporaryDirectory()) {
+            var repo = Repository.init(repoFolder.path(), vcs);
+            var file = repoFolder.path().resolve("x.txt");
+            Files.writeString(file, "1\n2\n3\n", StandardCharsets.UTF_8);
+            repo.add(file);
+            var hash1 = repo.commit("Commit", "a", "a@a.a");
+            Files.writeString(file, "1\n2\n3\n4\n", StandardCharsets.UTF_8);
+            repo.add(file);
+            var hash2 = repo.commit("Commit 2", "a", "a@a.a");
+
+            new Webrev.Builder(repo, webrevFolder.path()).generate(hash1, hash2);
+            assertContains(webrevFolder.path().resolve("index.html"), "<td>1 lines changed; 1 ins; 0 del; 0 mod; 3 unchg</td>");
+        }
+    }
+
     @ParameterizedTest
     @EnumSource(VCS.class)
     void emptySourceHunk(VCS vcs) throws IOException {
         try (var repoFolder = new TemporaryDirectory();
         var webrevFolder = new TemporaryDirectory()) {
