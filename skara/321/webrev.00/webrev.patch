diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -510,6 +510,21 @@
 
     @Override
     public void removeLink(URI uri) {
         throw new RuntimeException("not implemented yet");
     }
+
+    @Override
+    public List<String> fixVersions() {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void addFixVersion(String fixVersion) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void removeFixVersion(String fixVersion) {
+        throw new RuntimeException("not implemented yet");
+    }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
@@ -638,6 +638,21 @@
 
     @Override
     public void removeLink(URI uri) {
         throw new RuntimeException("not implemented yet");
     }
+
+    @Override
+    public List<String> fixVersions() {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void addFixVersion(String fixVersion) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void removeFixVersion(String fixVersion) {
+        throw new RuntimeException("not implemented yet");
+    }
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
@@ -151,6 +151,12 @@
     List<Link> links();
 
     void addLink(Link link);
 
     void removeLink(URI uri);
+
+    List<String> fixVersions();
+
+    void addFixVersion(String fixVersion);
+
+    void removeFixVersion(String fixVersion);
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
@@ -374,6 +374,34 @@
     public void removeLink(URI uri) {
         request.delete("/remotelink")
                .param("globalId", "skaralink=" + uri.toString())
                .execute();
     }
+
+    @Override
+    public List<String> fixVersions() {
+        return json.get("fields").get("fixVersions").stream()
+                   .map(obj -> obj.get("id").asString())
+                   .map(id -> jiraProject.fixVersionNameFromId(id).orElseThrow())
+                   .collect(Collectors.toList());
+    }
+
+    @Override
+    public void addFixVersion(String fixVersion) {
+        var query = JSON.object()
+                        .put("update", JSON.object()
+                                           .put("fixVersions", JSON.array().add(JSON.object()
+                                                                                    .put("add", JSON.object()
+                                                                                                    .put("id", jiraProject.fixVersionIdFromName(fixVersion).orElseThrow())))));
+        request.put("").body(query).execute();
+    }
+
+    @Override
+    public void removeFixVersion(String fixVersion) {
+        var query = JSON.object()
+                        .put("update", JSON.object()
+                                           .put("fixVersions", JSON.array().add(JSON.object()
+                                                                                    .put("remove", JSON.object()
+                                                                                                    .put("id", jiraProject.fixVersionIdFromName(fixVersion).orElseThrow())))));
+        request.put("").body(query).execute();
+    }
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
@@ -26,17 +26,20 @@
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.network.*;
 
 import java.net.URI;
 import java.util.*;
+import java.util.stream.Collectors;
 
 public class JiraProject implements IssueProject {
     private final JiraHost jiraHost;
     private final String projectName;
     private final RestRequest request;
 
     private JSONObject projectMetadataCache = null;
+    private Map<String, String> versionNameToId = null;
+    private Map<String, String> versionIdToName = null;
 
     JiraProject(JiraHost host, RestRequest request, String projectName) {
         this.jiraHost = host;
         this.projectName = projectName;
         this.request = request;
@@ -63,10 +66,31 @@
             ret.put(type.get("name").asString(), type.get("id").asString());
         }
         return ret;
     }
 
+    private void populateVersionsIfNeeded() {
+        if (versionIdToName != null) {
+            return;
+        }
+
+        versionNameToId = project().get("versions").stream()
+                                   .collect(Collectors.toMap(v -> v.get("name").asString(), v -> v.get("id").asString()));
+        versionIdToName = project().get("versions").stream()
+                                   .collect(Collectors.toMap(v -> v.get("id").asString(), v -> v.get("name").asString()));
+    }
+
+    Optional<String> fixVersionNameFromId(String id) {
+        populateVersionsIfNeeded();
+        return Optional.ofNullable(versionIdToName.getOrDefault(id, null));
+    }
+
+    Optional<String> fixVersionIdFromName(String name) {
+        populateVersionsIfNeeded();
+        return Optional.ofNullable(versionNameToId.getOrDefault(name, null));
+    }
+
     private String projectId() {
         return project().get("id").asString();
     }
 
     private String defaultIssueType() {
diff a/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java b/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
--- a/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
+++ b/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
@@ -58,13 +58,16 @@
             issue.updateComment(comment.id(), "Now it is updated");
             issue.addLabel("label");
             issue.addLabel("another");
             issue.removeLabel("label");
             issue.setAssignees(List.of(project.issueTracker().currentUser()));
-
+            issue.addFixVersion("1.0");
+            issue.addFixVersion("2.0");
+            issue.removeFixVersion("1.0");
             var updated = project.issue(issue.id()).orElseThrow();
             assertEquals(List.of("another"), updated.labels());
+            assertEquals(List.of("2.0"), updated.fixVersions());
             assertEquals(List.of(project.issueTracker().currentUser()), updated.assignees());
             assertEquals(1, updated.comments().size());
             assertEquals("Updated title", updated.title());
             assertEquals("Now it is updated", updated.comments().get(0).body());
 
diff a/test/src/main/java/org/openjdk/skara/test/IssueData.java b/test/src/main/java/org/openjdk/skara/test/IssueData.java
--- a/test/src/main/java/org/openjdk/skara/test/IssueData.java
+++ b/test/src/main/java/org/openjdk/skara/test/IssueData.java
@@ -34,8 +34,9 @@
     String title = "";
     final List<Comment> comments = new ArrayList<>();
     final Set<String> labels = new HashSet<>();
     final List<HostUser> assignees = new ArrayList<>();
     final List<Link> links = new ArrayList<>();
+    final Set<String> fixVersions = new HashSet<>();
     ZonedDateTime created = ZonedDateTime.now();
     ZonedDateTime lastUpdate = created;
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestIssue.java b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssue.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
@@ -194,6 +194,23 @@
     @Override
     public void removeLink(URI uri) {
         data.links.removeIf(link -> link.uri().equals(uri));
         data.lastUpdate = ZonedDateTime.now();
     }
+
+    @Override
+    public List<String> fixVersions() {
+        return new ArrayList<>(data.fixVersions);
+    }
+
+    @Override
+    public void addFixVersion(String fixVersion) {
+        data.fixVersions.add(fixVersion);
+        data.lastUpdate = ZonedDateTime.now();
+    }
+
+    @Override
+    public void removeFixVersion(String fixVersion) {
+        data.fixVersions.remove(fixVersion);
+        data.lastUpdate = ZonedDateTime.now();
+    }
 }
