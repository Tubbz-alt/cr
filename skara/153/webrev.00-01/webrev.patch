diff a/cli/src/main/java/org/openjdk/skara/cli/GitSync.java b/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
@@ -50,10 +50,20 @@
         return pb.start().waitFor();
     }
 
     public static void main(String[] args) throws IOException, InterruptedException {
         var flags = List.of(
+            Option.shortcut("")
+                  .fullname("from")
+                  .describe("REMOTE")
+                  .helptext("Fetch changes from this remote")
+                  .optional(),
+            Option.shortcut("")
+                  .fullname("to")
+                  .describe("REMOTE")
+                  .helptext("Push changes to this remote")
+                  .optional(),
             Option.shortcut("")
                   .fullname("branches")
                   .describe("BRANCHES")
                   .helptext("Comma separated list of branches to sync")
                   .optional(),
@@ -81,18 +91,11 @@
                   .fullname("version")
                   .helptext("Print the version of this tool")
                   .optional()
         );
 
-        var inputs = List.of(
-            Input.position(0)
-                 .describe("REMOTE")
-                 .singular()
-                 .optional()
-        );
-
-        var parser = new ArgumentParser("git sync", flags, inputs);
+        var parser = new ArgumentParser("git sync", flags);
         var arguments = parser.parse(args);
 
         if (arguments.contains("version")) {
             System.out.println("git-sync version: " + Version.fromManifest().orElse("unknown"));
             System.exit(0);
@@ -109,24 +112,38 @@
         );
 
         var remotes = repo.remotes();
 
         String upstream = null;
-        if (arguments.at(0).isPresent()) {
-            upstream = arguments.at(0).asString();
+        if (arguments.contains("from")) {
+            upstream = arguments.get("from").asString();
         } else {
-            var lines = repo.config("sync.remote");
+            var lines = repo.config("sync.from");
             if (lines.size() == 1 && remotes.contains(lines.get(0))) {
                 upstream = lines.get(0);
             } else {
-                die("No remote provided to sync with");
+                die("No remote provided to fetch from, please set the --from flag");
             }
         }
-
         var upstreamPullPath = remotes.contains(upstream) ?
             Remote.toURI(repo.pullPath(upstream)) : URI.create(upstream);
-        var origin = "origin";
+
+        String origin = null;
+        if (arguments.contains("to")) {
+            origin = arguments.get("to").asString();
+        } else {
+            var lines = repo.config("sync.to");
+            if (lines.size() == 1) {
+                if (!remotes.contains(lines.get(0))) {
+                    die("The given remote to push to, " + lines.get(0) + ", does not exist");
+                } else {
+                    origin = lines.get(0);
+                }
+            } else {
+                origin = "origin";
+            }
+        }
         var originPushPath = Remote.toURI(repo.pushPath(origin));
 
         var branches = new HashSet<String>();
         if (arguments.contains("branches")) {
             var requested = arguments.get("branches").asString().split(",");
@@ -140,10 +157,11 @@
             if (!branches.isEmpty() && !branches.contains(name)) {
                 System.out.println("Skipping branch " + name);
                 continue;
             }
             System.out.print("Syncing " + upstream + "/" + name + " to " + origin + "/" + name + "... ");
+            System.out.flush();
             var fetchHead = repo.fetch(upstreamPullPath, branch.hash().hex());
             repo.push(fetchHead, originPushPath, name);
             System.out.println("done");
         }
 
