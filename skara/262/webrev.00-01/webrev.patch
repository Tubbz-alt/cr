diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -135,11 +135,13 @@
 
                 var sourceRepo = mergeSourceRepository();
                 var sourceBranch = mergeSourceBranch();
                 if (sourceBranch.isPresent() && sourceRepo.isPresent()) {
                     try {
-                        var mergeSourceRepo = pr.repository().forge().repository(sourceRepo.get()).get();
+                        var mergeSourceRepo = pr.repository().forge().repository(sourceRepo.get()).orElseThrow(() ->
+                                new RuntimeException("Could not find repository " + sourceRepo.get())
+                        );
                         try {
                             var sourceHash = prInstance.localRepo().fetch(mergeSourceRepo.url(), sourceBranch.get());
                             if (!prInstance.localRepo().isAncestor(commits.get(1).hash(), sourceHash)) {
                                 ret.add("The merge contains commits that are not ancestors of the source");
                             }
diff a/test/src/main/java/org/openjdk/skara/test/CensusBuilder.java b/test/src/main/java/org/openjdk/skara/test/CensusBuilder.java
--- a/test/src/main/java/org/openjdk/skara/test/CensusBuilder.java
+++ b/test/src/main/java/org/openjdk/skara/test/CensusBuilder.java
@@ -206,11 +206,11 @@
     }
 
     public HostedRepository build() {
         try {
             var host = TestHost.createNew(List.of(new HostUser(1, "cu", "Census User")));
-            var repository = host.repository("census").get();
+            var repository = host.repository("census").orElseThrow();
             var folder = Files.createTempDirectory("censusbuilder");
             var localRepository = Repository.init(folder, VCS.GIT);
 
             log.fine("Generating census XML files in " + folder);
             generateGroup(folder);
diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -89,11 +89,11 @@
             throw new RuntimeException("not implemented yet");
         }
 
         @Override
         public HostedRepository getHostedRepository(Forge host) {
-            return host.repository(config.get("project").asString()).get();
+            return host.repository(config.get("project").asString()).orElseThrow();
         }
 
         @Override
         public IssueProject getIssueProject(IssueTracker host) {
             return host.project(config.get("project").asString());
@@ -126,11 +126,11 @@
             throw new RuntimeException("not implemented yet");
         }
 
         @Override
         public HostedRepository getHostedRepository(Forge host) {
-            return host.repository(config.get("project").asString()).get();
+            return host.repository(config.get("project").asString()).orElseThrow();
         }
 
         @Override
         public IssueProject getIssueProject(IssueTracker host) {
             return host.project(config.get("project").asString());
@@ -163,11 +163,11 @@
             return IssueTracker.from("jira", hostUri, pat, null);
         }
 
         @Override
         public HostedRepository getHostedRepository(Forge host) {
-            return host.repository(config.get("project").asString()).get();
+            return host.repository(config.get("project").asString()).orElseThrow();
         }
 
         @Override
         public IssueProject getIssueProject(IssueTracker host) {
             return host.project(config.get("project").asString());
@@ -207,11 +207,11 @@
             return createHost(userIndex);
         }
 
         @Override
         public HostedRepository getHostedRepository(Forge host) {
-            return host.repository("test").get();
+            return host.repository("test").orElseThrow();
         }
 
         @Override
         public IssueProject getIssueProject(IssueTracker host) {
             return host.project("test");
