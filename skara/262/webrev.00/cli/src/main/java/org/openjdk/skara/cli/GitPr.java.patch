diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -106,11 +106,13 @@
             GitCredentials.approve(credentials);
         }
         if (host.isEmpty() || !host.get().isValid()) {
             exit("error: failed to connect to host " + uri);
         }
-        var remoteRepo = host.get().repository(projectName(uri));
+        var remoteRepo = host.get().repository(projectName(uri)).orElseThrow(() ->
+                new IOException("Could not find repository at: " + uri.toString())
+        );
         var parentRepo = remoteRepo.parent();
         var targetRepo = parentRepo.isPresent() ? parentRepo.get() : remoteRepo;
         return targetRepo;
     }
 
@@ -416,11 +418,13 @@
                     System.err.println("");
                     System.err.println("(You can later restore the changes by running: hg unshelve)");
                     System.exit(1);
                 }
 
-                var remoteRepo = host.get().repository(projectName(uri));
+                var remoteRepo = host.get().repository(projectName(uri)).orElseThrow(() ->
+                        new IOException("Could not find repository at " + uri.toString())
+                );
                 if (token == null) {
                     GitCredentials.approve(credentials);
                 }
                 var parentRepo = remoteRepo.parent().orElseThrow(() ->
                         new IOException("error: remote repository " + remotePullPath + " is not a fork of any repository"));
@@ -573,11 +577,13 @@
                 System.err.println("");
                 System.err.println("(You can later restore the changes by running: git stash pop)");
                 System.exit(1);
             }
 
-            var remoteRepo = host.get().repository(projectName(uri));
+            var remoteRepo = host.get().repository(projectName(uri)).orElseThrow(() ->
+                    new IOException("Could not find repository at " + uri.toString())
+            );
             if (token == null) {
                 GitCredentials.approve(credentials);
             }
             var parentRepo = remoteRepo.parent().orElseThrow(() ->
                     new IOException("error: remote repository " + remotePullPath + " is not a fork of any repository"));
