diff a/cli/src/main/java/org/openjdk/skara/cli/GitSync.java b/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
@@ -22,13 +22,15 @@
  */
 package org.openjdk.skara.cli;
 
 import org.openjdk.skara.args.*;
 import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.proxy.HttpProxy;
 
 import java.io.*;
-import java.net.URI;
+import java.net.*;
 import java.nio.file.*;
 import java.util.*;
 import java.util.logging.*;
 
 public class GitSync {
@@ -99,23 +101,41 @@
         var cwd = Paths.get("").toAbsolutePath();
         var repo = Repository.get(cwd).orElseThrow(() ->
                 die("error: no repository found at " + cwd.toString())
         );
 
+        HttpProxy.setup();
+
         var remotes = repo.remotes();
 
         String upstream = null;
         if (arguments.contains("from")) {
             upstream = arguments.get("from").asString();
         } else {
             var lines = repo.config("sync.from");
             if (lines.size() == 1 && remotes.contains(lines.get(0))) {
                 upstream = lines.get(0);
             } else {
-                die("No remote provided to fetch from, please set the --from flag");
+                if (remotes.contains("origin")) {
+                    var originPullPath = repo.pullPath("origin");
+                    try {
+                        var uri = Remote.toWebURI(originPullPath);
+                        upstream = Forge.from(URI.create(uri.getScheme() + "://" + uri.getHost()))
+                                        .flatMap(f -> f.repository(uri.getPath().substring(1)))
+                                        .flatMap(r -> r.parent())
+                                        .map(p -> p.webUrl().toString())
+                                        .orElse(null);
+                    } catch (IllegalArgumentException e) {
+                        upstream = null;
+                    }
+                }
             }
         }
+
+        if (upstream == null) {
+            die("Could not find upstream repository, please specify one with --from");
+        }
         var upstreamPullPath = remotes.contains(upstream) ?
             Remote.toURI(repo.pullPath(upstream)) : URI.create(upstream);
 
         String origin = null;
         if (arguments.contains("to")) {
