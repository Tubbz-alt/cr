diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
@@ -152,11 +152,13 @@
             var hostName = entry.value().get("host").asString();
             if (!repositoryHosts.containsKey(hostName)) {
                 throw new ConfigurationError("Repository " + entry.name() + " uses undefined host '" + hostName + "'");
             }
             var host = repositoryHosts.get(hostName);
-            var repo = host.repository(entry.value().get("repository").asString());
+            var repo = host.repository(entry.value().get("repository").asString()).orElseThrow(() ->
+                    new ConfigurationError("Repository " + entry.value().get("repository").asString() + " is not available at " + hostName)
+            );
             ret.put(entry.name(), repo);
         }
 
         return ret;
     }
@@ -179,11 +181,13 @@
             var host = repositoryHosts.get(hostName);
             if (!repositoryHosts.containsKey(hostName)) {
                 throw new ConfigurationError("Repository entry " + entry + " uses undefined host '" + hostName + "'");
             }
             var repositoryName = entry.substring(hostSeparatorIndex + 1);
-            ret.repository = host.repository(repositoryName);
+            ret.repository = host.repository(repositoryName).orElseThrow(() ->
+                    new ConfigurationError("Repository " + repositoryName + " is not available at " + hostName)
+            );
         } else {
             if (!repositories.containsKey(entry)) {
                 throw new ConfigurationError("Repository " + entry + " is not defined!");
             }
             ret.repository = repositories.get(entry);
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -135,11 +135,13 @@
 
                 var sourceRepo = mergeSourceRepository();
                 var sourceBranch = mergeSourceBranch();
                 if (sourceBranch.isPresent() && sourceRepo.isPresent()) {
                     try {
-                        var mergeSourceRepo = pr.repository().forge().repository(sourceRepo.get());
+                        var mergeSourceRepo = pr.repository().forge().repository(sourceRepo.get()).orElseThrow(() ->
+                                new RuntimeException("Could not find repository " + sourceRepo.get())
+                        );
                         try {
                             var sourceHash = prInstance.localRepo().fetch(mergeSourceRepo.url(), sourceBranch.get());
                             if (!prInstance.localRepo().isAncestor(commits.get(1).hash(), sourceHash)) {
                                 ret.add("The merge contains commits that are not ancestors of the source");
                             }
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java
@@ -35,12 +35,12 @@
     public boolean isValid() {
         return false;
     }
 
     @Override
-    public HostedRepository repository(String name) {
-        return null;
+    public Optional<HostedRepository> repository(String name) {
+        return Optional.empty();
     }
 
     @Override
     public HostUser user(String username) {
         return null;
diff a/cli/src/main/java/org/openjdk/skara/cli/GitFork.java b/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
@@ -155,11 +155,14 @@
         }
         if (path.startsWith("/")) {
             path = path.substring(1);
         }
 
-        var fork = host.get().repository(path).fork();
+        var hostedRepo = host.get().repository(path).orElseThrow(() ->
+                new IOException("Could not find repository at " + uri.toString())
+        );
+        var fork = hostedRepo.fork();
 
         if (token == null) {
             GitCredentials.approve(credentials);
         }
 
diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -106,11 +106,13 @@
             GitCredentials.approve(credentials);
         }
         if (host.isEmpty() || !host.get().isValid()) {
             exit("error: failed to connect to host " + uri);
         }
-        var remoteRepo = host.get().repository(projectName(uri));
+        var remoteRepo = host.get().repository(projectName(uri)).orElseThrow(() ->
+                new IOException("Could not find repository at: " + uri.toString())
+        );
         var parentRepo = remoteRepo.parent();
         var targetRepo = parentRepo.isPresent() ? parentRepo.get() : remoteRepo;
         return targetRepo;
     }
 
@@ -416,11 +418,13 @@
                     System.err.println("");
                     System.err.println("(You can later restore the changes by running: hg unshelve)");
                     System.exit(1);
                 }
 
-                var remoteRepo = host.get().repository(projectName(uri));
+                var remoteRepo = host.get().repository(projectName(uri)).orElseThrow(() ->
+                        new IOException("Could not find repository at " + uri.toString())
+                );
                 if (token == null) {
                     GitCredentials.approve(credentials);
                 }
                 var parentRepo = remoteRepo.parent().orElseThrow(() ->
                         new IOException("error: remote repository " + remotePullPath + " is not a fork of any repository"));
@@ -573,11 +577,13 @@
                 System.err.println("");
                 System.err.println("(You can later restore the changes by running: git stash pop)");
                 System.exit(1);
             }
 
-            var remoteRepo = host.get().repository(projectName(uri));
+            var remoteRepo = host.get().repository(projectName(uri)).orElseThrow(() ->
+                    new IOException("Could not find repository at " + uri.toString())
+            );
             if (token == null) {
                 GitCredentials.approve(credentials);
             }
             var parentRepo = remoteRepo.parent().orElseThrow(() ->
                     new IOException("error: remote repository " + remotePullPath + " is not a fork of any repository"));
diff a/cli/src/main/java/org/openjdk/skara/cli/GitSync.java b/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
@@ -22,13 +22,15 @@
  */
 package org.openjdk.skara.cli;
 
 import org.openjdk.skara.args.*;
 import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.proxy.HttpProxy;
 
 import java.io.*;
-import java.net.URI;
+import java.net.*;
 import java.nio.file.*;
 import java.util.*;
 import java.util.logging.*;
 
 public class GitSync {
@@ -99,23 +101,41 @@
         var cwd = Paths.get("").toAbsolutePath();
         var repo = Repository.get(cwd).orElseThrow(() ->
                 die("error: no repository found at " + cwd.toString())
         );
 
+        HttpProxy.setup();
+
         var remotes = repo.remotes();
 
         String upstream = null;
         if (arguments.contains("from")) {
             upstream = arguments.get("from").asString();
         } else {
             var lines = repo.config("sync.from");
             if (lines.size() == 1 && remotes.contains(lines.get(0))) {
                 upstream = lines.get(0);
             } else {
-                die("No remote provided to fetch from, please set the --from flag");
+                if (remotes.contains("origin")) {
+                    var originPullPath = repo.pullPath("origin");
+                    try {
+                        var uri = Remote.toWebURI(originPullPath);
+                        upstream = Forge.from(URI.create(uri.getScheme() + "://" + uri.getHost()))
+                                        .flatMap(f -> f.repository(uri.getPath().substring(1)))
+                                        .flatMap(r -> r.parent())
+                                        .map(p -> p.webUrl().toString())
+                                        .orElse(null);
+                    } catch (IllegalArgumentException e) {
+                        upstream = null;
+                    }
+                }
             }
         }
+
+        if (upstream == null) {
+            die("Could not find upstream repository, please specify one with --from");
+        }
         var upstreamPullPath = remotes.contains(upstream) ?
             Remote.toURI(repo.pullPath(upstream)) : URI.create(upstream);
 
         String origin = null;
         if (arguments.contains("to")) {
diff a/cli/src/main/java/org/openjdk/skara/cli/Remote.java b/cli/src/main/java/org/openjdk/skara/cli/Remote.java
--- a/cli/src/main/java/org/openjdk/skara/cli/Remote.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/Remote.java
@@ -32,10 +32,13 @@
 class Remote {
     public static URI toWebURI(String remotePath) throws IOException {
         if (remotePath.startsWith("git+")) {
             remotePath = remotePath.substring("git+".length());
         }
+        if (remotePath.endsWith(".git")) {
+            remotePath = remotePath.substring(0, remotePath.length() - ".git".length());
+        }
         if (remotePath.startsWith("http")) {
             return URI.create(remotePath);
         } else {
             if (remotePath.startsWith("ssh://")) {
                 remotePath = remotePath.substring("ssh://".length()).replaceFirst("/", ":");
diff a/forge/src/main/java/org/openjdk/skara/forge/Forge.java b/forge/src/main/java/org/openjdk/skara/forge/Forge.java
--- a/forge/src/main/java/org/openjdk/skara/forge/Forge.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/Forge.java
@@ -28,11 +28,11 @@
 import java.net.URI;
 import java.util.*;
 import java.util.stream.Collectors;
 
 public interface Forge extends Host {
-    HostedRepository repository(String name);
+    Optional<HostedRepository> repository(String name);
     boolean supportsReviewBody();
 
     static Forge from(String name, URI uri, Credential credential, JSONObject configuration) {
         var factory = ForgeFactory.getForgeFactories().stream()
                                     .filter(f -> f.name().equals(name))
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
@@ -28,11 +28,11 @@
 import org.openjdk.skara.network.*;
 
 import java.io.IOException;
 import java.net.*;
 import java.nio.charset.StandardCharsets;
-import java.util.Arrays;
+import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class GitHubHost implements Forge {
     private final URI uri;
@@ -167,12 +167,16 @@
                             .execute();
         return result.asObject();
     }
 
     @Override
-    public HostedRepository repository(String name) {
-        return new GitHubRepository(this, name);
+    public Optional<HostedRepository> repository(String name) {
+        try {
+            return Optional.of(new GitHubRepository(this, name));
+        } catch (Throwable t) {
+            return Optional.empty();
+        }
     }
 
     @Override
     public HostUser user(String username) {
         var details = request.get("users/" + URLEncoder.encode(username, StandardCharsets.UTF_8)).execute().asObject();
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
@@ -188,11 +188,11 @@
     }
 
     @Override
     public HostedRepository fork() {
         var response = request.post("forks").execute();
-        return gitHubHost.repository(response.get("full_name").asString());
+        return gitHubHost.repository(response.get("full_name").asString()).orElseThrow(RuntimeException::new);
     }
 
     @Override
     public long id() {
         return json.get("id").asLong();
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
@@ -100,12 +100,16 @@
         }
         return project.asObject();
     }
 
     @Override
-    public HostedRepository repository(String name) {
-        return new GitLabRepository(this, name);
+    public Optional<HostedRepository> repository(String name) {
+        try {
+            return Optional.of(new GitLabRepository(this, name));
+        } catch (Throwable t) {
+            return Optional.empty();
+        }
     }
 
     private HostUser parseUserDetails(JSONObject details) {
         var id = details.get("id").asInt();
         var username = details.get("username").asString();
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
@@ -233,11 +233,11 @@
                 Thread.sleep(Duration.ofSeconds(1).toMillis());
             } catch (InterruptedException e) {
                 e.printStackTrace();
             }
         }
-        return gitLabHost.repository(forkedRepoName);
+        return gitLabHost.repository(forkedRepoName).orElseThrow(RuntimeException::new);
     }
 
     @Override
     public long id() {
         return json.get("id").asLong();
diff a/test/src/main/java/org/openjdk/skara/test/CensusBuilder.java b/test/src/main/java/org/openjdk/skara/test/CensusBuilder.java
--- a/test/src/main/java/org/openjdk/skara/test/CensusBuilder.java
+++ b/test/src/main/java/org/openjdk/skara/test/CensusBuilder.java
@@ -206,11 +206,11 @@
     }
 
     public HostedRepository build() {
         try {
             var host = TestHost.createNew(List.of(new HostUser(1, "cu", "Census User")));
-            var repository = host.repository("census");
+            var repository = host.repository("census").orElseThrow();
             var folder = Files.createTempDirectory("censusbuilder");
             var localRepository = Repository.init(folder, VCS.GIT);
 
             log.fine("Generating census XML files in " + folder);
             generateGroup(folder);
diff a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
--- a/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
+++ b/test/src/main/java/org/openjdk/skara/test/HostCredentials.java
@@ -89,11 +89,11 @@
             throw new RuntimeException("not implemented yet");
         }
 
         @Override
         public HostedRepository getHostedRepository(Forge host) {
-            return host.repository(config.get("project").asString());
+            return host.repository(config.get("project").asString()).orElseThrow();
         }
 
         @Override
         public IssueProject getIssueProject(IssueTracker host) {
             return host.project(config.get("project").asString());
@@ -126,11 +126,11 @@
             throw new RuntimeException("not implemented yet");
         }
 
         @Override
         public HostedRepository getHostedRepository(Forge host) {
-            return host.repository(config.get("project").asString());
+            return host.repository(config.get("project").asString()).orElseThrow();
         }
 
         @Override
         public IssueProject getIssueProject(IssueTracker host) {
             return host.project(config.get("project").asString());
@@ -163,11 +163,11 @@
             return IssueTracker.from("jira", hostUri, pat, null);
         }
 
         @Override
         public HostedRepository getHostedRepository(Forge host) {
-            return host.repository(config.get("project").asString());
+            return host.repository(config.get("project").asString()).orElseThrow();
         }
 
         @Override
         public IssueProject getIssueProject(IssueTracker host) {
             return host.project(config.get("project").asString());
@@ -207,11 +207,11 @@
             return createHost(userIndex);
         }
 
         @Override
         public HostedRepository getHostedRepository(Forge host) {
-            return host.repository("test");
+            return host.repository("test").orElseThrow();
         }
 
         @Override
         public IssueProject getIssueProject(IssueTracker host) {
             return host.project("test");
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -83,22 +83,22 @@
     public boolean isValid() {
         return true;
     }
 
     @Override
-    public HostedRepository repository(String name) {
+    public Optional<HostedRepository> repository(String name) {
         Repository localRepository;
         if (data.repositories.containsKey(name)) {
             localRepository = data.repositories.get(name);
         } else {
             if (data.repositories.size() > 0) {
                 throw new RuntimeException("A test host can only manage a single repository");
             }
             localRepository = createLocalRepository();
             data.repositories.put(name, localRepository);
         }
-        return new TestHostedRepository(this, name, localRepository);
+        return Optional.of(new TestHostedRepository(this, name, localRepository));
     }
 
     @Override
     public IssueProject project(String name) {
         if (data.issueProjects.containsKey(name)) {
