diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/ReviewersCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/ReviewersCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/ReviewersCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/ReviewersCheckTests.java
@@ -55,10 +55,13 @@
         "    <full-name>Baz</full-name>",
         "  </person>",
         "  <person name=\"qux\">",
         "    <full-name>Qux</full-name>",
         "  </person>",
+        "  <person name=\"contributor\">",
+        "    <full-name>Contributor</full-name>",
+        "  </person>",
         "  <group name=\"test\">",
         "    <full-name>Test</full-name>",
         "    <person ref=\"foo\" role=\"lead\" />",
         "    <person ref=\"bar\" />",
         "    <person ref=\"baz\" />",
@@ -78,12 +81,11 @@
     private static final List<String> CONFIGURATION = List.of(
         "[general]",
         "project = test",
         "[checks]",
         "error = reviewers",
-        "[checks \"reviewers\"]",
-        "role = reviewer"
+        "[checks \"reviewers\"]"
     );
 
     private static Commit commit(List<String> reviewers) {
         return commit(new Author("user", "user@host.org"), reviewers);
     }
@@ -107,17 +109,31 @@
 
     private static JCheckConfiguration conf() {
         return conf(1);
     }
 
-    private static JCheckConfiguration conf(int minimum) {
-        return conf(minimum, List.of());
+    private static JCheckConfiguration conf(int reviewers) {
+        return conf(reviewers, 0, 0);
+    }
+
+    private static JCheckConfiguration conf(int reviewers, List<String> ignored) {
+        return conf(reviewers, 0, 0, ignored);
+    }
+
+    private static JCheckConfiguration conf(int reviewers, int committers) {
+        return conf(reviewers, committers, 0);
     }
 
-    private static JCheckConfiguration conf(int minimum, List<String> ignored) {
+    private static JCheckConfiguration conf(int reviewers, int committers, int authors) {
+        return conf(reviewers, committers, authors, List.of());
+    }
+
+    private static JCheckConfiguration conf(int reviewers, int committers, int authors, List<String> ignored) {
         var lines = new ArrayList<String>(CONFIGURATION);
-        lines.add("minimum = " + minimum);
+        lines.add("reviewers = " + reviewers);
+        lines.add("committers = " + committers);
+        lines.add("authors = " + authors);
         lines.add("ignore = " + String.join(", ", ignored));
         return JCheckConfiguration.parse(lines);
     }
 
     private List<Issue> toList(Iterator<Issue> i) {
@@ -153,10 +169,11 @@
         assertEquals(1, issues.size());
         assertTrue(issues.get(0) instanceof TooFewReviewersIssue);
         var issue = (TooFewReviewersIssue) issues.get(0);
         assertEquals(0, issue.numActual());
         assertEquals(1, issue.numRequired());
+        assertEquals("reviewer", issue.role());
         assertEquals(commit, issue.commit());
         assertEquals(Severity.ERROR, issue.severity());
         assertEquals(check, issue.check());
     }
 
@@ -169,10 +186,11 @@
         assertEquals(1, issues.size());
         assertTrue(issues.get(0) instanceof TooFewReviewersIssue);
         var issue = (TooFewReviewersIssue) issues.get(0);
         assertEquals(0, issue.numActual());
         assertEquals(1, issue.numRequired());
+        assertEquals("reviewer", issue.role());
         assertEquals(commit, issue.commit());
         assertEquals(Severity.ERROR, issue.severity());
         assertEquals(check, issue.check());
     }
 
@@ -185,10 +203,11 @@
         assertEquals(1, issues.size());
         assertTrue(issues.get(0) instanceof TooFewReviewersIssue);
         var issue = (TooFewReviewersIssue) issues.get(0);
         assertEquals(0, issue.numActual());
         assertEquals(1, issue.numRequired());
+        assertEquals("reviewer", issue.role());
         assertEquals(commit, issue.commit());
         assertEquals(Severity.ERROR, issue.severity());
         assertEquals(check, issue.check());
     }
 
@@ -201,10 +220,11 @@
         assertEquals(1, issues.size());
         assertTrue(issues.get(0) instanceof TooFewReviewersIssue);
         var issue = (TooFewReviewersIssue) issues.get(0);
         assertEquals(0, issue.numActual());
         assertEquals(1, issue.numRequired());
+        assertEquals("reviewer", issue.role());
         assertEquals(commit, issue.commit());
         assertEquals(Severity.ERROR, issue.severity());
         assertEquals(check, issue.check());
     }
 
@@ -213,14 +233,13 @@
         var commit = commit(List.of("unknown", "user"));
         var check = new ReviewersCheck(census(), utils);
         var issues = toList(check.check(commit, message(commit), conf(1)));
 
         assertEquals(1, issues.size());
-        assertTrue(issues.get(0) instanceof TooFewReviewersIssue);
-        var issue = (TooFewReviewersIssue) issues.get(0);
-        assertEquals(0, issue.numActual());
-        assertEquals(1, issue.numRequired());
+        assertTrue(issues.get(0) instanceof InvalidReviewersIssue);
+        var issue = (InvalidReviewersIssue) issues.get(0);
+        assertEquals(List.of("unknown", "user"), issue.invalid());
         assertEquals(commit, issue.commit());
         assertEquals(Severity.ERROR, issue.severity());
         assertEquals(check, issue.check());
     }
 
@@ -279,6 +298,89 @@
         var issues = toList(check.check(commit, message(commit), conf(1, ignored)));
 
         assertEquals(1, issues.size());
         assertTrue(issues.get(0) instanceof TooFewReviewersIssue);
     }
+
+    @Test
+    void requiringCommitterAndReviwerShouldPass() throws IOException {
+        var commit = commit(List.of("bar", "baz"));
+        var check = new ReviewersCheck(census(), utils);
+        var issues = toList(check.check(commit, message(commit), conf(1, 1)));
+
+        assertEquals(0, issues.size());
+    }
+
+    @Test
+    void missingRoleShouldFail() throws IOException {
+        var commit = commit(List.of("bar", "qux"));
+        var check = new ReviewersCheck(census(), utils);
+        var issues = toList(check.check(commit, message(commit), conf(1, 1)));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof TooFewReviewersIssue);
+        var issue = (TooFewReviewersIssue) issues.get(0);
+        assertEquals(0, issue.numActual());
+        assertEquals(1, issue.numRequired());
+        assertEquals("committer", issue.role());
+        assertEquals(commit, issue.commit());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check, issue.check());
+    }
+
+    @Test
+    void relaxedRoleShouldPass() throws IOException {
+        var commit = commit(List.of("bar", "qux"));
+        var check = new ReviewersCheck(census(), utils);
+        var issues = toList(check.check(commit, message(commit), conf(0, 1, 1)));
+
+        assertEquals(0, issues.size());
+    }
+
+    @Test
+    void relazedRoleAndMissingRoleShouldFail() throws IOException {
+        var commit = commit(List.of("bar", "contributor"));
+        var check = new ReviewersCheck(census(), utils);
+        var issues = toList(check.check(commit, message(commit), conf(0, 1, 1)));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof TooFewReviewersIssue);
+        var issue = (TooFewReviewersIssue) issues.get(0);
+        assertEquals(0, issue.numActual());
+        assertEquals(1, issue.numRequired());
+        assertEquals("author", issue.role());
+        assertEquals(commit, issue.commit());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check, issue.check());
+    }
+
+    @Test
+    void legacyConfigurationShouldWork() throws IOException {
+        var commit = commit(List.of("bar"));
+        var check = new ReviewersCheck(census(), utils);
+        var legacyConf = new ArrayList<>(CONFIGURATION);
+        legacyConf.add("minimum = 1");
+        legacyConf.add("role = reviewer");
+        var issues = toList(check.check(commit, message(commit), JCheckConfiguration.parse(legacyConf)));
+        assertEquals(0, issues.size());
+    }
+
+    @Test
+    void legacyConfigurationShouldAcceptRole() throws IOException {
+        var commit = commit(List.of("baz"));
+        var check = new ReviewersCheck(census(), utils);
+        var legacyConf = new ArrayList<>(CONFIGURATION);
+        legacyConf.add("minimum = 1");
+        legacyConf.add("role = reviewer");
+        var issues = toList(check.check(commit, message(commit), JCheckConfiguration.parse(legacyConf)));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof TooFewReviewersIssue);
+        var issue = (TooFewReviewersIssue) issues.get(0);
+        assertEquals(0, issue.numActual());
+        assertEquals(1, issue.numRequired());
+        assertEquals("reviewer", issue.role());
+        assertEquals(commit, issue.commit());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check, issue.check());
+    }
 }
