diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java
@@ -23,19 +23,18 @@
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.bot.*;
 import org.openjdk.skara.email.EmailAddress;
 import org.openjdk.skara.host.network.URIBuilder;
-import org.openjdk.skara.json.JSONValue;
 import org.openjdk.skara.mailinglist.MailingListServerFactory;
 import org.openjdk.skara.storage.StorageBuilder;
-import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.vcs.Tag;
 
 import java.nio.file.Path;
 import java.util.*;
 import java.util.logging.Logger;
-import java.util.stream.Collectors;
+import java.util.regex.Pattern;
 
 public class JNotifyBotFactory implements BotFactory {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
 
     @Override
@@ -54,13 +53,19 @@
         var databaseName = database.get("name").asString();
         var databaseEmail = database.get("email").asString();
 
         for (var repo : specific.get("repositories").fields()) {
             var repoName = repo.name();
-            var branches = repo.value().get("branches").stream()
-                               .map(JSONValue::asString)
-                               .collect(Collectors.toList());
+            var branchPattern = Pattern.compile("^master$");
+            if (repo.value().contains("branches")) {
+                branchPattern = Pattern.compile(repo.value().get("branches").asString());
+            }
+
+            var includeBranchNames = false;
+            if (repo.value().contains("branchnames")) {
+                includeBranchNames = repo.value().get("branchnames").asBoolean();
+            }
 
             var updaters = new ArrayList<UpdateConsumer>();
             if (repo.value().contains("json")) {
                 var folder = repo.value().get("folder").asString();
                 var build = repo.value().get("build").asString();
@@ -92,11 +97,11 @@
                             default:
                                 throw new RuntimeException("Unknown mode");
                         }
                     }
 
-                    updaters.add(new MailingListUpdater(listServer.getList(recipient), recipientAddress, sender, branches.size() > 1, mode));
+                    updaters.add(new MailingListUpdater(listServer.getList(recipient), recipientAddress, sender, includeBranchNames, mode));
                 }
             }
 
             if (updaters.isEmpty()) {
                 log.warning("No consumers configured for notify bot repository: " + repoName);
@@ -107,11 +112,11 @@
 
             var tagStorageBuilder = new StorageBuilder<Tag>(baseName + ".tags.txt")
                     .remoteRepository(databaseRepo, databaseRef, databaseName, databaseEmail, "Added tag for " + repoName);
             var branchStorageBuilder = new StorageBuilder<ResolvedBranch>(baseName + ".branches.txt")
                     .remoteRepository(databaseRepo, databaseRef, databaseName, databaseEmail, "Added branch hash for " + repoName);
-            var bot = new JNotifyBot(configuration.repository(repoName), configuration.storageFolder(), branches, tagStorageBuilder, branchStorageBuilder, updaters);
+            var bot = new JNotifyBot(configuration.repository(repoName), configuration.storageFolder(), branchPattern, tagStorageBuilder, branchStorageBuilder, updaters);
             ret.add(bot);
         }
 
         return ret;
     }
