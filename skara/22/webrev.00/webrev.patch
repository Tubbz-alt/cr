diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -174,11 +174,13 @@
     private String composeReply(ZonedDateTime date, EmailAddress author, String parentBody, String body) {
         return "On " + date.format(DateTimeFormatter.RFC_1123_DATE_TIME) + ", " + author.toString() + " wrote:\n" +
                 "\n" +
                 quoteBody(parentBody) +
                 "\n\n" +
-                filterComments(body);
+                filterComments(body) +
+                "\n\n" +
+                "PR: " + pr.getWebUrl();
     }
 
     private String verdictToString(Review.Verdict verdict) {
         switch (verdict) {
             case APPROVED:
@@ -207,11 +209,13 @@
 
         return "On " + date.format(DateTimeFormatter.RFC_1123_DATE_TIME) + ", " + parentAuthor.toString() + " wrote:\n" +
                 "\n" +
                 quoteBody(parentBody) +
                 "\n\n" +
-                filterComments(body.toString());
+                filterComments(body.toString()) +
+                "\n\n" +
+                "PR: " + pr.getWebUrl();
     }
 
     private String composeRebaseComment(Hash lastBase, PullRequestInstance prInstance, URI fullWebrev) {
         var commitMessages = prInstance.formatCommitMessages(prInstance.baseHash(), prInstance.headHash(), this::formatCommit);
         return "The pull request has been updated with a complete new set of changes (possibly due to a rebase).\n\n" +
@@ -245,11 +249,13 @@
                 prInstance.fetchCommand();
     }
 
     private String composeReadyForIntegrationComment() {
         return "This PR now fulfills all the requirements for integration, and is only awaiting the final " +
-                "integration command from the author.";
+                "integration command from the author." +
+                "\n\n" +
+                "PR: " + pr.getWebUrl();
     }
 
     private Repository materializeArchive(Path scratchPath) {
         try {
             return Repository.materialize(scratchPath, bot.archiveRepo().getUrl(), pr.getTargetRef());
