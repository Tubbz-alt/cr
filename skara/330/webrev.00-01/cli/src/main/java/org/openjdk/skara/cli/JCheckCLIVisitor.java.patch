diff a/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java b/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
--- a/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
@@ -30,38 +30,42 @@
 import java.util.stream.Collectors;
 
 class JCheckCLIVisitor implements IssueVisitor {
     private final boolean isLocal;
     private final boolean isPullRequest;
+    private boolean hasDisplayedErrors;
 
     public JCheckCLIVisitor() {
         this(false, false);
     }
 
     public JCheckCLIVisitor(boolean isLocal, boolean isPullRequest) {
         this.isLocal = isLocal;
         this.isPullRequest = isPullRequest;
+        this.hasDisplayedErrors = false;
     }
 
-    private static void println(Issue i, String message) {
+    private void println(Issue i, String message) {
         System.out.print("[");
         System.out.print(i.check().name());
         System.out.print("] ");
         System.out.print(i.severity());
         System.out.print(": ");
         System.out.println(message);
+        hasDisplayedErrors = true;
     }
 
-    private static void println(CommitIssue i, String message) {
+    private void println(CommitIssue i, String message) {
         System.out.print("[");
         System.out.print(i.check().name());
         System.out.print("] ");
         System.out.print(i.severity());
         System.out.print(": ");
         System.out.print(i.commit().hash().abbreviate());
         System.out.print(": ");
         System.out.println(message);
+        hasDisplayedErrors = true;
     }
 
     public void visit(DuplicateIssuesIssue i) {
         var id = i.issue().id();
         var hash = i.commit().hash().abbreviate();
@@ -236,6 +240,10 @@
     }
 
     public void visit(BinaryIssue i) {
         println(i, "adds binary file: " + i.path().toString());
     }
+
+    public boolean hasDisplayedErrors() {
+        return hasDisplayedErrors;
+    }
 }
