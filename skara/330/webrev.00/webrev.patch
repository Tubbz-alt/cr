diff a/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java b/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
@@ -40,11 +40,11 @@
 
 public class GitJCheck {
 
     private static final Pattern urlPattern = Pattern.compile("^https?://.*", Pattern.CASE_INSENSITIVE);
 
-    public static void main(String[] args) throws Exception {
+    public static void main(String[] args) throws IOException {
         var flags = List.of(
             Option.shortcut("r")
                   .fullname("rev")
                   .describe("REV")
                   .helptext("Check the specified revision or range (default: HEAD)")
@@ -169,11 +169,19 @@
             if (lines.size() == 1) {
                 var value = lines.get(0).toUpperCase();
                 isLocal = value.equals("TRUE") || value.equals("1") || value.equals("ON");
             }
         }
-        var visitor = new JCheckCLIVisitor(isLocal);
+        var isPullRequest = arguments.contains("pull-request");
+        if (!isPullRequest) {
+            var lines = repo.config("jcheck.pull-request");
+            if (lines.size() == 1) {
+                var value = lines.get(0).toUpperCase();
+                isLocal = value.equals("TRUE") || value.equals("1") || value.equals("ON");
+            }
+        }
+        var visitor = new JCheckCLIVisitor(isLocal, isPullRequest);
         try (var errors = JCheck.check(repo, census, CommitMessageParsers.v1, range, whitelist, blacklist)) {
             for (var error : errors) {
                 error.accept(visitor);
             }
         }
diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -322,10 +322,14 @@
                   .optional(),
             Switch.shortcut("")
                   .fullname("publish")
                   .helptext("Publish the local branch before creating the pull request")
                   .optional(),
+            Switch.shortcut("")
+                  .fullname("jcheck")
+                  .helptext("Run jcheck before creating the pull request")
+                  .optional(),
             Switch.shortcut("")
                   .fullname("no-token")
                   .helptext("Do not use a personal access token (PAT). Only works for read-only operations.")
                   .optional(),
             Switch.shortcut("")
@@ -695,10 +699,19 @@
                 System.err.println("error: no difference between branches " + targetBranch + " and " + currentBranch.name());
                 System.err.println("       Cannot create an empty pull request, have you committed?");
                 System.exit(1);
             }
 
+            var shouldRunJCheck = arguments.contains("jcheck");
+            if (!shouldRunJCheck) {
+                var lines = repo.config("pr.jcheck");
+                shouldRunJCheck = lines.size() == 1 && lines.get(0).toLowerCase().equals("true");
+            }
+            if (shouldRunJCheck) {
+                GitJCheck.main(new String[]{ "--pull-request", "--rev", targetBranch });
+            }
+
             var remoteRepo = host.repository(projectName(uri)).orElseThrow(() ->
                     new IOException("Could not find repository at " + uri.toString())
             );
             if (token == null) {
                 GitCredentials.approve(credentials);
diff a/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java b/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
--- a/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
@@ -29,17 +29,19 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
 class JCheckCLIVisitor implements IssueVisitor {
     private final boolean isLocal;
+    private final boolean isPullRequest;
 
     public JCheckCLIVisitor() {
-        this(false);
+        this(false, false);
     }
 
-    public JCheckCLIVisitor(boolean isLocal) {
+    public JCheckCLIVisitor(boolean isLocal, boolean isPullRequest) {
         this.isLocal = isLocal;
+        this.isPullRequest = isPullRequest;
     }
 
     private static void println(Issue i, String message) {
         System.out.print("[");
         System.out.print(i.check().name());
@@ -75,30 +77,30 @@
     public void visit(TagIssue i) {
         println(i, "illegal tag name: " + i.tag().name());
     }
 
     public void visit(BranchIssue i) {
-        if (!isLocal) {
+        if (!isLocal && !isPullRequest) {
             println(i, "illegal branch name: " + i.branch().name());
         }
     }
 
     public void visit(SelfReviewIssue i) {
         println(i, "self-reviews are not allowed");
     }
 
     public void visit(TooFewReviewersIssue i) {
-        if (!isLocal) {
+        if (!isLocal && !isPullRequest) {
             var required = i.numRequired();
             var actual = i.numActual();
             var reviewers = required == 1 ? " reviewer" : " reviewers";
             println(i, required + reviewers + " required, found " + actual);
         }
     }
 
     public void visit(InvalidReviewersIssue i) {
-        if (!isLocal) {
+        if (!isLocal && !isPullRequest) {
             var invalid = String.join(", ", i.invalid());
             var wording = i.invalid().size() == 1 ? " is" : " are";
             println(i, invalid + wording + " not part of OpenJDK");
         }
     }
@@ -187,20 +189,24 @@
         System.out.println(indent + i.escapeLine());
         System.out.println(indent + i.hints());
     }
 
     public void visit(MessageIssue i) {
-        println(i, "contains additional lines in commit message");
-        for (var line : i.message().additional()) {
-            System.out.println("> " + line);
+        if (!isPullRequest) {
+            println(i, "contains additional lines in commit message");
+            for (var line : i.message().additional()) {
+                System.out.println("> " + line);
+            }
         }
     }
 
     public void visit(IssuesIssue i) {
-        println(i, "missing reference to JBS issue in commit message");
-        for (var line : i.commit().message()) {
-            System.out.println("> " + line);
+        if (!isPullRequest) {
+            println(i, "missing reference to JBS issue in commit message");
+            for (var line : i.commit().message()) {
+                System.out.println("> " + line);
+            }
         }
     }
 
     public void visit(ExecutableIssue i) {
         println(i, "file " + i.path() + " is executable");
@@ -217,11 +223,11 @@
     public void visit(CommitterNameIssue i) {
         println(i, "missing committer name");
     }
 
     public void visit(CommitterEmailIssue i) {
-        if (!isLocal) {
+        if (!isLocal && !isPullRequest) {
             var domain = i.expectedDomain();
             println(i, "missing committer email from domain " + domain);
         }
     }
 
diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
@@ -179,11 +179,11 @@
         public Stream<Issue> stream() {
             return StreamSupport.stream(spliterator(), false);
         }
 
         @Override
-        public void close() throws Exception {
+        public void close() throws IOException {
             if (resource != null) {
                 resource.close();
             }
         }
     }
