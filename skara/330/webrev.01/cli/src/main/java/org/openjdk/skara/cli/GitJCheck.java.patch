diff a/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java b/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
@@ -40,11 +40,11 @@
 
 public class GitJCheck {
 
     private static final Pattern urlPattern = Pattern.compile("^https?://.*", Pattern.CASE_INSENSITIVE);
 
-    public static void main(String[] args) throws Exception {
+    static int run(String[] args) throws IOException {
         var flags = List.of(
             Option.shortcut("r")
                   .fullname("rev")
                   .describe("REV")
                   .helptext("Check the specified revision or range (default: HEAD)")
@@ -70,10 +70,14 @@
                   .optional(),
             Switch.shortcut("")
                   .fullname("local")
                   .helptext("Run jcheck in \"local\" mode")
                   .optional(),
+            Switch.shortcut("")
+                  .fullname("pull-request")
+                  .helptext("Run jcheck in \"pull request\" mode")
+                  .optional(),
             Switch.shortcut("v")
                   .fullname("verbose")
                   .helptext("Turn on verbose output")
                   .optional(),
             Switch.shortcut("")
@@ -96,11 +100,11 @@
         var parser = new ArgumentParser("git jcheck", flags, List.of());
         var arguments = parser.parse(args);
 
         if (arguments.contains("version")) {
             System.out.println("git-jcheck version: " + Version.fromManifest().orElse("unknown"));
-            System.exit(0);
+            return 0;
         }
 
         if (arguments.contains("verbose") || arguments.contains("debug")) {
             var level = arguments.contains("debug") ? Level.FINER : Level.FINE;
             Logging.setup(level, "jcheck");
@@ -108,15 +112,15 @@
 
         var cwd = Paths.get("").toAbsolutePath();
         var repository = ReadOnlyRepository.get(cwd);
         if (!repository.isPresent()) {
             System.err.println(String.format("error: %s is not a repository", cwd.toString()));
-            System.exit(1);
+            return 1;
         }
         var repo = repository.get();
         if (repo.isEmpty()) {
-            return;
+            return 1;
         }
 
         var isMercurial = arguments.contains("mercurial");
         var defaultRange = isMercurial ? "tip" : "HEAD^..HEAD";
         var range = arguments.get("rev").orString(defaultRange);
@@ -125,11 +129,11 @@
             if (isMercurial) {
                 System.err.println("       see 'hg help revisions' for how to specify revisions");
             } else {
                 System.err.println("       see 'man 7 gitrevisions' for how to specify revisions");
             }
-            System.exit(1);
+            return 1;
         }
 
         var whitelistFile = arguments.get("whitelist").or(".jcheck/whitelist.json").via(Path::of);
         var whitelist = new HashMap<String, Set<Hash>>();
         if (Files.exists(whitelistFile)) {
@@ -169,16 +173,29 @@
             if (lines.size() == 1) {
                 var value = lines.get(0).toUpperCase();
                 isLocal = value.equals("TRUE") || value.equals("1") || value.equals("ON");
             }
         }
-        var visitor = new JCheckCLIVisitor(isLocal);
+        var isPullRequest = arguments.contains("pull-request");
+        if (!isPullRequest) {
+            var lines = repo.config("jcheck.pull-request");
+            if (lines.size() == 1) {
+                var value = lines.get(0).toUpperCase();
+                isLocal = value.equals("TRUE") || value.equals("1") || value.equals("ON");
+            }
+        }
+        var visitor = new JCheckCLIVisitor(isLocal, isPullRequest);
         try (var errors = JCheck.check(repo, census, CommitMessageParsers.v1, range, whitelist, blacklist)) {
             for (var error : errors) {
                 error.accept(visitor);
             }
         }
+        return visitor.hasDisplayedErrors() ? 1 : 0;
+    }
+
+    public static void main(String[] args) throws IOException {
+        System.exit(run(args));
     }
 
     private static boolean isURL(String s) {
         return urlPattern.matcher(s).matches();
     }
