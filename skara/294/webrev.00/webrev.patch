diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -41,15 +41,23 @@
     private final RestRequest request;
     private final GitHubHost host;
     private final GitHubRepository repository;
     private final Logger log = Logger.getLogger("org.openjdk.skara.host");
 
+    private List<String> labels = null;
+
     GitHubPullRequest(GitHubRepository repository, JSONValue jsonValue, RestRequest request) {
         this.host = (GitHubHost)repository.forge();
         this.repository = repository;
         this.request = request;
         this.json = jsonValue;
+
+        labels = json.get("labels")
+                     .stream()
+                     .map(v -> v.get("name").asString())
+                     .sorted()
+                     .collect(Collectors.toList());
     }
 
     @Override
     public HostedRepository repository() {
         return repository;
@@ -425,18 +433,20 @@
                .execute();
     }
 
     @Override
     public void addLabel(String label) {
+        labels = null;
         var query = JSON.object().put("labels", JSON.array().add(label));
         request.post("issues/" + json.get("number").toString() + "/labels")
                .body(query)
                .execute();
     }
 
     @Override
     public void removeLabel(String label) {
+        labels = null;
         request.delete("issues/" + json.get("number").toString() + "/labels/" + label)
                .onError(r -> {
                    // The GitHub API explicitly states that 404 is the response for deleting labels currently not set
                    if (r.statusCode() == 404) {
                        return JSONValue.fromNull();
@@ -446,15 +456,18 @@
                .execute();
     }
 
     @Override
     public List<String> labels() {
-        return request.get("issues/" + json.get("number").toString() + "/labels").execute().stream()
-                      .map(JSONValue::asObject)
-                      .map(obj -> obj.get("name").asString())
-                      .sorted()
-                      .collect(Collectors.toList());
+        if (labels == null) {
+            labels = request.get("issues/" + json.get("number").toString() + "/labels").execute().stream()
+                            .map(JSONValue::asObject)
+                            .map(obj -> obj.get("name").asString())
+                            .sorted()
+                            .collect(Collectors.toList());
+        }
+        return labels;
     }
 
     @Override
     public URI webUrl() {
         var host = (GitHubHost)repository.forge();
