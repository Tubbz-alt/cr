diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -447,12 +447,29 @@
         try (var p = capture("git", "merge", "--squash", h.hex())) {
             await(p);
         }
     }
 
-    @Override
-    public void add(List<Path> paths) throws IOException {
+    @FunctionalInterface
+    private static interface Operation {
+        void execute(List<Path> args) throws IOException;
+    }
+
+    private void batch(Operation op, List<Path> args) throws IOException {
+        var batchSize = 64;
+        var start = 0;
+        while (start < args.size()) {
+            var end = start + batchSize;
+            if (end > args.size()) {
+                end = args.size();
+            }
+            op.execute(args.subList(start, end));
+            start = end;
+        }
+    }
+
+    private void addAll(List<Path> paths) throws IOException {
         var cmd = new ArrayList<>(List.of("git", "add"));
         for (var path : paths) {
             cmd.add(path.toString());
         }
         try (var p = capture(cmd)) {
@@ -459,11 +476,15 @@
             await(p);
         }
     }
 
     @Override
-    public void remove(List<Path> paths) throws IOException {
+    public void add(List<Path> paths) throws IOException {
+        batch(this::addAll, paths);
+    }
+
+    private void removeAll(List<Path> paths) throws IOException {
         var cmd = new ArrayList<>(List.of("git", "rm"));
         for (var path : paths) {
             cmd.add(path.toString());
         }
         try (var p = capture(cmd)) {
@@ -469,10 +490,15 @@
         try (var p = capture(cmd)) {
             await(p);
         }
     }
 
+    @Override
+    public void remove(List<Path> paths) throws IOException {
+        batch(this::removeAll, paths);
+    }
+
     @Override
     public void delete(Branch b) throws IOException {
         try (var p = capture("git", "branch", "-D", b.name())) {
             await(p);
         }
@@ -668,12 +694,11 @@
             }
             return res.stdout().get(0);
         }
     }
 
-    @Override
-    public List<FileEntry> files(Hash hash, List<Path> paths) throws IOException {
+    private List<FileEntry> allFiles(Hash hash, List<Path> paths) throws IOException {
         var cmd = new ArrayList<String>();
         cmd.addAll(List.of("git", "ls-tree", "-r"));
         cmd.add(hash.hex());
         cmd.addAll(paths.stream().map(Path::toString).collect(Collectors.toList()));
         try (var p = Process.capture(cmd.toArray(new String[0]))
@@ -694,10 +719,30 @@
             }
             return entries;
         }
     }
 
+    @Override
+    public List<FileEntry> files(Hash hash, List<Path> paths) throws IOException {
+        if (paths.isEmpty()) {
+            return allFiles(hash, paths);
+        }
+
+        var entries = new ArrayList<FileEntry>();
+        var batchSize = 64;
+        var start = 0;
+        while (start < paths.size()) {
+            var end = start + batchSize;
+            if (end > paths.size()) {
+                end = paths.size();
+            }
+            entries.addAll(allFiles(hash, paths.subList(start, end)));
+            start = end;
+        }
+        return entries;
+    }
+
     private Path unpackFile(String blob) throws IOException {
         try (var p = capture("git", "unpack-file", blob)) {
             var res = await(p);
             if (res.stdout().size() != 1) {
                 throw new IOException("Unexpected output\n" + res);
