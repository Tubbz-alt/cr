diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -474,10 +474,20 @@
                 newLabels.add("outdated");
             } else {
                 newLabels.remove("outdated");
             }
 
+            // Ensure that the ready for sponsor label is up to date
+            newLabels.remove("sponsor");
+            var readyHash = ReadyForSponsorTracker.latestReadyForSponsor(pr.repository().host().getCurrentUserDetails(), comments);
+            if (readyHash.isPresent()) {
+                var acceptedHash = readyHash.get();
+                if (pr.getHeadHash().equals(acceptedHash)) {
+                    newLabels.add("sponsor");
+                }
+            }
+
             // Calculate current metadata to avoid unnecessary future checks
             var metadata = workItem.getMetadata(pr.getTitle(), updatedBody, pr.getComments(), activeReviews, newLabels, censusInstance, pr.getTargetHash());
             checkBuilder.metadata(metadata);
         } catch (Exception e) {
             log.throwing("CommitChecker", "checkStatus", e);
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SponsorTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SponsorTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SponsorTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SponsorTests.java
@@ -267,10 +267,11 @@
             var ready = pr.getComments().stream()
                           .filter(comment -> comment.body().contains("now ready to be sponsored"))
                           .filter(comment -> comment.body().contains("at version " + editHash.hex()))
                           .count();
             assertEquals(1, ready);
+            assertTrue(pr.getLabels().contains("sponsor"));
 
             // Push another change
             var updateHash = CheckableRepository.appendAndCommit(localRepo,"Yet more stuff");
             localRepo.push(updateHash, author.getUrl(), "edit");
 
@@ -282,10 +283,14 @@
                 if (refreshCount++ > 100) {
                     fail("The PR did not update after the new push");
                 }
             } while (pr.getHeadHash().equals(lastHeadHash));
 
+            // The label should have been dropped
+            TestBotRunner.runPeriodicItems(mergeBot);
+            assertFalse(pr.getLabels().contains("sponsor"));
+
             // Reviewer now tries to sponsor
             var reviewerPr = reviewer.getPullRequest(pr.getId());
             reviewerPr.addComment("/sponsor");
             TestBotRunner.runPeriodicItems(mergeBot);
 
@@ -300,10 +305,11 @@
             TestBotRunner.runPeriodicItems(mergeBot);
 
             // It should now be possible to sponsor
             reviewerPr.addComment("/sponsor");
             TestBotRunner.runPeriodicItems(mergeBot);
+            assertTrue(pr.getLabels().contains("sponsor"));
 
             // The bot should have pushed the commit
             var pushed = pr.getComments().stream()
                            .filter(comment -> comment.body().contains("Pushed as commit"))
                            .count();
