diff a/cli/src/main/java/org/openjdk/skara/cli/GitInfo.java b/cli/src/main/java/org/openjdk/skara/cli/GitInfo.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitInfo.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitInfo.java
@@ -25,17 +25,19 @@
 import org.openjdk.skara.args.*;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.issuetracker.IssueTracker;
 import org.openjdk.skara.jcheck.*;
 import org.openjdk.skara.vcs.openjdk.*;
+import org.openjdk.skara.proxy.HttpProxy;
 
 import java.io.IOException;
 import java.net.URI;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.function.Supplier;
 import java.util.logging.Level;
+import java.util.stream.Collectors;
 
 public class GitInfo {
     private static final URI JBS = URI.create("https://bugs.openjdk.java.net");
 
     private static void exit(String fmt, Object...args) {
@@ -48,10 +50,19 @@
             exit(fmt, args);
             return new IOException();
         };
     }
 
+    private static boolean getSwitch(String name, Arguments arguments, ReadOnlyRepository repo) throws IOException {
+        if (arguments.contains(name)) {
+            return true;
+        }
+
+        var lines = repo.config("info." + name);
+        return lines.size() == 1 && lines.get(0).toLowerCase().equals("true");
+    }
+
     private static String jbsProject(ReadOnlyRepository repo) throws IOException {
         var conf = JCheckConfiguration.from(repo);
         return conf.general().jbs().toUpperCase();
     }
 
@@ -124,43 +135,99 @@
         if (arguments.contains("verbose") || arguments.contains("debug")) {
             var level = arguments.contains("debug") ? Level.FINER : Level.FINE;
             Logging.setup(level);
         }
 
+        HttpProxy.setup();
         var isMercurial = arguments.contains("mercurial");
         var ref = arguments.at(0).orString(isMercurial ? "tip" : "HEAD");
         var cwd = Path.of("").toAbsolutePath();
         var repo = ReadOnlyRepository.get(cwd).orElseThrow(die("error: no repository found at " + cwd.toString()));
         var hash = repo.resolve(ref).orElseThrow(die("error: " + ref + " is not a commit"));
         var commits = repo.commits(hash.hex(), 1).asList();
         if (commits.isEmpty()) {
             throw new IOException("internal error: could not list commit for " + hash.hex());
         }
         var commit = commits.get(0);
-        var useDecoration = !arguments.contains("no-decoration");
 
-        if (arguments.contains("sponsor")) {
+        var useDecoration = !getSwitch("no-decoration", arguments, repo);
+        var useMercurial = getSwitch("mercurial", arguments, repo);
+
+        var showSponsor = getSwitch("sponsor", arguments, repo);
+        var showAuthors = getSwitch("authors", arguments, repo);
+        var showReviewers = getSwitch("reviewers", arguments, repo);
+        var showReview = getSwitch("review", arguments, repo);
+        var showSummary = getSwitch("summary", arguments, repo);
+        var showIssues = getSwitch("issues", arguments, repo);
+        var showTitle = getSwitch("title", arguments, repo);
+
+        if (!showSponsor && !showAuthors && !showReviewers &&
+            !showReview && !showSummary && !showIssues && !showTitle) {
+            // no switches or configuration provided, show everything by default
+            showSponsor = true;
+            showAuthors = true;
+            showReviewers = true;
+            showReview = true;
+            showSummary = true;
+            showIssues = true;
+            showTitle = true;
+        }
+
+        var message = useMercurial ?
+            CommitMessageParsers.v0.parse(commit) :
+            CommitMessageParsers.v1.parse(commit);
+
+        if (showTitle) {
+            var decoration = useDecoration ? "Title: " : "";
+            System.out.println(decoration + message.title());
+        }
+
+        if (showSummary) {
+            if (useDecoration && !message.summaries().isEmpty()) {
+                System.out.println("Summary:");
+            }
+            var decoration = useDecoration ? "> " : "";
+            for (var line : message.summaries()) {
+                System.out.println(decoration + line);
+            }
+        }
+
+        if (showAuthors) {
+            var decoration = "";
+            if (useDecoration) {
+                decoration = message.contributors().isEmpty() ?
+                    "Author: " : "Authors: ";
+            }
+            var authors = commit.author().toString();
+            if (!message.contributors().isEmpty()) {
+                var contributorNames = message.contributors()
+                                              .stream()
+                                              .map(Author::toString)
+                                              .collect(Collectors.toList());
+                authors += ", " + String.join(", ", contributorNames);
+            }
+            System.out.println(decoration + authors);
+        }
+
+        if (showSponsor) {
             if (!commit.author().equals(commit.committer())) {
                 var decoration = useDecoration ? "Sponsor: " : "";
                 System.out.println(decoration + commit.committer().toString());
             }
         }
-        if (arguments.contains("author")) {
-            var decoration = useDecoration ? "Author: " : "";
-            System.out.println(decoration + commit.author().toString());
-        }
 
-        var message = arguments.contains("mercurial") ?
-            CommitMessageParsers.v0.parse(commit) :
-            CommitMessageParsers.v1.parse(commit);
-        if (arguments.contains("reviewers")) {
-            var decoration = useDecoration? "Reviewer: " : "";
-            for (var reviewer : message.reviewers()) {
-                System.out.println(decoration + reviewer);
+        if (showReviewers) {
+            var decoration = "";
+            if (useDecoration) {
+                decoration = message.reviewers().size() > 1 ?
+                    "Reviewers: " : "Reviewer: ";
             }
+            System.out.println(decoration + String.join(", ", message.reviewers()));
         }
-        if (arguments.contains("review")) {
+
+
+        if (showReview) {
             var decoration = useDecoration? "Review: " : "";
             var project = jbsProject(repo);
             if (message.issues().size() == 1) {
                 var issueId = message.issues().get(0).id();
                 var issueTracker = IssueTracker.from("jira", JBS);
@@ -172,35 +239,24 @@
                         }
                     }
                 }
             }
         }
-        if (arguments.contains("summary")) {
-            var decoration = useDecoration? "Summary: " : "";
-            for (var line : message.summaries()) {
-                System.out.println(decoration + line);
-            }
-        }
-        if (arguments.contains("contributors")) {
-            var decoration = useDecoration? "Contributor: " : "";
-            System.out.println(decoration + commit.committer().toString());
-            for (var coAuthor : message.contributors()) {
-                System.out.println(decoration + coAuthor.toString());
-            }
-        }
-        if (arguments.contains("issues")) {
-            var decoration = useDecoration? "Issue: " : "";
+        if (showIssues) {
             var project = jbsProject(repo);
             var uri = JBS + "/browse/" + project + "-";
-            for (var issue : message.issues()) {
-                if (uri != null) {
-                    var id = issue.id();
-                    System.out.println(decoration + uri + id);
-                } else {
-                    System.out.println(decoration + issue.toString());
+            var issues = message.issues();
+            if (issues.size() > 1) {
+                if (useDecoration) {
+                    System.out.println("Issues:");
+                }
+                var decoration = useDecoration ? "- " : "";
+                for (var issue : issues) {
+                    System.out.println(decoration + uri + issue.id());
                 }
+            } else if (issues.size() == 1) {
+                var decoration = useDecoration ? "Issue: " : "";
+                System.out.println(decoration + uri + issues.get(0).id());
             }
-
-
         }
     }
 }
