diff a/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
--- a/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
+++ b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
@@ -152,12 +152,13 @@
             .collect(Collectors.toList());
     }
 
     private void mergeIfAhead(Repository repo, Branch branch, Branch parent) throws IOException {
         var fromHash = repo.resolve(parent.name()).orElseThrow();
+        var oldHead = repo.head();
         if (!repo.contains(branch, fromHash)) {
-            var isFastForward = repo.isAncestor(repo.head(), fromHash);
+            var isFastForward = repo.isAncestor(oldHead, fromHash);
             repo.merge(fromHash);
             if (!isFastForward) {
                 log.info("Merged " + parent + " into " + branch);
                 repo.commit("Automatic merge with " + parent, "duke", "duke@openjdk.org");
             } else {
@@ -167,21 +168,35 @@
                     + log(repo, "origin/" + branch.name(), branch.name()).collect(Collectors.joining("\n", "\n", "\n")));
             try {
                 repo.push(repo.head(), hostedRepo.getUrl(), branch.name());
             } catch (IOException e) {
                 log.severe("Pusing failed! Aborting...");
-                repo.abortMerge();
+                hardReset(repo, oldHead);
                 throw e;
             }
         }
     }
 
+    private void hardReset(Repository repo, Hash oldHead) throws IOException {
+        var process = new ProcessBuilder()
+            .command("git", "reset", "--hard", oldHead.hex())
+            .directory(repo.root().toFile())
+            .start();
+        await(process);
+    }
+
     private static Stream<String> log(Repository repo, String targetRef, String fromRef) throws IOException {
         var process = new ProcessBuilder()
                 .command("git", "log", targetRef + ".." + fromRef, "--")
                 .directory(repo.root().toFile())
                 .start();
+        await(process);
+
+        return new BufferedReader(new InputStreamReader(process.getInputStream())).lines();
+    }
+
+    private static void await(Process process) throws IOException {
         try {
             int exit = process.waitFor();
             if (exit != 0) {
                 throw new IOException("Unexpected exit code: " + exit + "\n\n"
                         + new BufferedReader(new InputStreamReader(process.getErrorStream()))
@@ -189,12 +204,10 @@
                             .collect(Collectors.joining("\n")));
             }
         } catch (InterruptedException e) {
             throw new IOException(e);
         }
-
-        return new BufferedReader(new InputStreamReader(process.getInputStream())).lines();
     }
 
     @Override
     public String toString() {
         return "TopoBot@(" + hostedRepo + ")";
