diff a/bots/topological/build.gradle b/bots/topological/build.gradle
--- /dev/null
+++ b/bots/topological/build.gradle
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+module {
+    name = 'org.openjdk.skara.bots.topological'
+    test {
+        requires 'org.junit.jupiter.api'
+        requires 'org.openjdk.skara.test'
+        opens 'org.openjdk.skara.bots.topological' to 'org.junit.platform.commons'
+    }
+}
+
+dependencies {
+    implementation project(':host')
+    implementation project(':bot')
+    implementation project(':census')
+    implementation project(':json')
+    implementation project(':vcs')
+
+    testImplementation project(':test')
+}
diff a/bots/topological/src/main/java/module-info.java b/bots/topological/src/main/java/module-info.java
--- /dev/null
+++ b/bots/topological/src/main/java/module-info.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+module org.openjdk.skara.bots.topological {
+    requires org.openjdk.skara.bot;
+    requires org.openjdk.skara.vcs;
+    requires java.logging;
+
+    provides org.openjdk.skara.bot.BotFactory with org.openjdk.skara.bots.topological.TopologicalBotFactory;
+}
diff a/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
--- /dev/null
+++ b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
@@ -0,0 +1,244 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.topological;
+
+import org.openjdk.skara.bot.*;
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.vcs.*;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.UncheckedIOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Path;
+import java.nio.file.Files;
+import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+import java.util.logging.Logger;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+/**
+ * Bot that automatically merges any changes from a dependency branch into a target branch
+ */
+class TopologicalBot implements Bot, WorkItem {
+    private final Logger log = Logger.getLogger("org.openjdk.skara.bots");
+    private final Path storage;
+    private final HostedRepository hostedRepo;
+    private final List<Branch> branches;
+    private final String depsFileName;
+
+    TopologicalBot(Path storage, HostedRepository repo, List<Branch> branches, String depsFileName) {
+        this.storage = storage;
+        this.hostedRepo = repo;
+        this.branches = branches;
+        this.depsFileName = depsFileName;
+    }
+
+    @Override
+    public boolean concurrentWith(WorkItem other) {
+        if (!(other instanceof TopologicalBot)) {
+            return true;
+        }
+        var otherBot = (TopologicalBot) other;
+        return !hostedRepo.getName().equals(otherBot.hostedRepo.getName());
+    }
+
+    @Override
+    public void run(Path scratchPath) {
+        log.info("Starting topobot run");
+        try {
+            var sanitizedUrl = URLEncoder.encode(hostedRepo.getWebUrl().toString(), StandardCharsets.UTF_8);
+            var dir = storage.resolve(sanitizedUrl);
+            Repository repo;
+            if (!Files.exists(dir)) {
+                log.info("Cloning " + hostedRepo.getName());
+                Files.createDirectories(dir);
+                repo = Repository.clone(hostedRepo.getUrl(), dir);
+            } else {
+                log.info("Found existing scratch directory for " + hostedRepo.getName());
+                repo = Repository.get(dir)
+                        .orElseThrow(() -> new RuntimeException("Repository in " + dir + " has vanished"));
+            }
+
+            repo.fetchAll();
+            var depsFile = repo.root().resolve(depsFileName);
+
+            List<Branch> ordered = orderedBranches(repo, depsFile);
+            log.info("Merge order " + ordered);
+            for (Branch branch : ordered) {
+                log.info("Processing branch " + branch + "...");
+                repo.checkout(branch);
+                Set<String> parents = new HashSet<>(
+                        Files.exists(depsFile) ? Files.readAllLines(depsFile) : List.of("master"));
+                List<String> failedMerges = new ArrayList<>();
+                boolean progress;
+                boolean failed;
+                do {
+                    // We need to attempt merge parents in any order that works. Keep merging
+                    // and pushing, until no further progress can be made.
+                    progress = false;
+                    failed = false;
+                    for (var parentsIt = parents.iterator(); parentsIt.hasNext();) {
+                        String parent = parentsIt.next();
+                        try {
+                            mergeIfAhead(repo, branch, parent);
+                            progress = true;
+                            parentsIt.remove(); // avoid doing pointless merges
+                        } catch(IOException e) {
+                            log.severe("Merge with " + parent + " failed. Reverting...");
+                            repo.abortMerge();
+                            failedMerges.add(branch + " <- " + parent);
+                            failed = true;
+                        }
+                    }
+                } while(progress && failed);
+
+                if (!failedMerges.isEmpty()) {
+                    throw new IOException("There were failed merges:\n" + failedMerges);
+                }
+            }
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
+        log.info("Ending topobot run");
+    }
+
+    private List<Branch> orderedBranches(Repository repo, Path depsFile) throws IOException {
+        List<Edge> deps = new ArrayList<>();
+        for (Branch branch : branches) {
+            repo.checkout(branch);
+            if (Files.exists(depsFile)) {
+                Files.lines(depsFile)
+                        .forEach(dep -> deps.add(new Edge(new Branch(dep), branch)));
+            } else {
+                deps.add(new Edge(new Branch("master"), branch));
+            }
+        }
+        return tsort(deps).stream()
+            .filter(branch -> !branch.name().equals("master"))
+            .collect(Collectors.toList());
+    }
+
+    private void mergeIfAhead(Repository repo, Branch branch, String parent) throws IOException {
+        if (log(repo, branch.name(), parent).count() != 0) {
+            var fromHash = repo.resolve(parent).orElseThrow();
+            var isFastForward = repo.isAncestor(repo.head(), fromHash);
+            repo.merge(fromHash);
+            if (!isFastForward) {
+                log.info("Merged " + parent + " into " + branch);
+                repo.commit("Automatic merge with " + parent, "topobot", "");
+            } else {
+                log.info("Fast forwarded " + branch + " to " + parent);
+            }
+            log.info("merge with " + parent + " succeeded. The following commits will be pushed:\n"
+                    + log(repo, "origin/" + branch.name(), branch.name()).collect(Collectors.joining("\n", "\n", "\n")));
+            try {
+                repo.push(repo.head(), hostedRepo.getUrl(), branch.name());
+            } catch (IOException e) {
+                log.severe("Pusing failed! Aborting...");
+                repo.abortMerge();
+                throw e;
+            }
+        }
+    }
+
+    private static Stream<String> log(Repository repo, String targetRef, String fromRef) throws IOException {
+        var process = new ProcessBuilder()
+                .command("git", "log", targetRef + ".." + fromRef, "--")
+                .directory(repo.root().toFile())
+                .start();
+        try {
+            int exit = process.waitFor();
+            if (exit != 0) {
+                throw new IOException("Unexpected exit code: " + exit + "\n\n"
+                        + new BufferedReader(new InputStreamReader(process.getErrorStream()))
+                            .lines()
+                            .collect(Collectors.joining("\n")));
+            }
+        } catch (InterruptedException e) {
+            throw new IOException(e);
+        }
+
+        return new BufferedReader(new InputStreamReader(process.getInputStream())).lines();
+    }
+
+    private static class Edge {
+        final Branch from;
+        final Branch to;
+
+        Edge(Branch from, Branch to) {
+            this.from = from;
+            this.to = to;
+        }
+
+        @Override
+        public String toString() {
+            return "Edge{" +
+                    "from='" + from + '\'' +
+                    ", to='" + to + '\'' +
+                    '}';
+        }
+    }
+
+    private static List<Branch> tsort(List<Edge> edges) {
+        List<Edge> eCopy = new ArrayList<>(edges);
+        List<Branch> result = new ArrayList<>();
+        while (!eCopy.isEmpty()) {
+            Set<Branch> orphans = eCopy.stream()
+                    .map(e -> e.from)
+                    .filter(f -> eCopy.stream().map(e -> e.to).noneMatch(f::equals))
+                    .collect(Collectors.toSet());
+            if (orphans.isEmpty()) {
+                throw new IllegalStateException("Detected a cycle! " + edges);
+            }
+            orphans.forEach(o -> {
+                result.add(o);
+                eCopy.removeIf(e -> o.equals(e.from));
+            });
+        }
+
+        // add all leaves
+        edges.stream()
+            .map(e -> e.to)
+            .filter(f -> edges.stream().map(e -> e.from).noneMatch(f::equals))
+            .forEach(result::add);
+
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "TopoBot@(" + hostedRepo + ")";
+    }
+
+    @Override
+    public List<WorkItem> getPeriodicItems() {
+        return List.of(this);
+    }
+}
diff a/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBotFactory.java b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBotFactory.java
--- /dev/null
+++ b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBotFactory.java
@@ -0,0 +1,66 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.topological;
+
+import org.openjdk.skara.bot.*;
+import org.openjdk.skara.json.JSONValue;
+import org.openjdk.skara.vcs.Branch;
+
+import java.io.*;
+import java.nio.file.Files;
+import java.util.*;
+import java.util.logging.Logger;
+import java.util.stream.Collectors;
+
+public class TopologicalBotFactory implements BotFactory {
+    private final Logger log = Logger.getLogger("org.openjdk.skara.bots");
+
+    @Override
+    public String name() {
+        return "topological";
+    }
+
+    @Override
+    public List<Bot> create(BotConfiguration configuration) {
+        var storage = configuration.storageFolder();
+        try {
+            Files.createDirectories(storage);
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
+        var specific = configuration.specific();
+
+        var repoName = specific.get("repo").asString();
+        var repo = configuration.repository(repoName);
+
+        var branches = specific.get("branches").asArray().stream()
+                .map(JSONValue::asString)
+                .map(Branch::new)
+                .collect(Collectors.toList());
+
+        var depsFile = specific.get("depsFile").asString();
+
+        log.info("Setting up topological merging in: " + repoName);
+        return List.of(new TopologicalBot(storage, repo, branches, depsFile));
+    }
+}
diff a/bots/topological/src/test/java/org/openjdk/skara/bots/topological/TopologicalBotTests.java b/bots/topological/src/test/java/org/openjdk/skara/bots/topological/TopologicalBotTests.java
--- /dev/null
+++ b/bots/topological/src/test/java/org/openjdk/skara/bots/topological/TopologicalBotTests.java
@@ -0,0 +1,185 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.topological;
+
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.test.*;
+import org.openjdk.skara.vcs.*;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.TestInfo;
+
+import java.io.IOException;
+import java.io.UncheckedIOException;
+import java.nio.file.Files;
+import java.nio.file.StandardOpenOption;
+import java.util.*;
+import java.util.stream.Collectors;
+
+import static java.nio.file.StandardOpenOption.APPEND;
+import static org.junit.jupiter.api.Assertions.*;
+
+class TopologicalBotTests {
+
+    @Test
+    void testTopoMerge() throws IOException {
+        try (var temp = new TemporaryDirectory()) {
+            var host = TestHost.createNew(List.of(new HostUserDetails(0, "duke", "J. Duke")));
+
+            var fromDir = temp.path().resolve("from.git");
+            var repo = Repository.init(fromDir, VCS.GIT);
+            var gitConfig = repo.root().resolve(".git").resolve("config");
+            Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+                        StandardOpenOption.APPEND);
+            var hostedRepo = new TestHostedRepository(host, "test", repo);
+
+            // make non bare
+            var readme = fromDir.resolve("README.txt");
+            Files.writeString(readme, "Hello world\n");
+            repo.add(readme);
+            repo.commit("An initial commit", "duke", "duke@openjdk.org");
+            repo.pushAll(hostedRepo.getUrl());
+
+            var aBranch = repo.branch(repo.head(), "A");
+            // no deps -> depends on master
+
+            var depsFileName = "deps.txt";
+
+            var bBranch = repo.branch(repo.head(), "B");
+            repo.checkout(bBranch);
+            var bDeps = fromDir.resolve(depsFileName);
+            Files.writeString(bDeps, "A");
+            repo.add(bDeps);
+            repo.commit("Adding deps file to B", "duke", "duke@openjdk.org");
+            repo.pushAll(hostedRepo.getUrl());
+
+            var cBranch = repo.branch(repo.head(), "C");
+            repo.checkout(cBranch);
+            var cDeps = fromDir.resolve(depsFileName);
+            Files.writeString(cDeps, "B");
+            repo.add(cDeps);
+            repo.commit("Adding deps file to C", "duke", "duke@openjdk.org");
+            repo.pushAll(hostedRepo.getUrl());
+
+            repo.checkout(new Branch("master"));
+            var newFile = fromDir.resolve("NewFile.txt");
+            Files.writeString(newFile, "Hello world\n");
+            repo.add(newFile);
+            var preHash = repo.commit("An additional commit", "duke", "duke@openjdk.org");
+            repo.pushAll(hostedRepo.getUrl());
+
+            var preCommits = repo.commits().asList();
+            assertEquals(4, preCommits.size());
+            assertEquals(preHash, repo.head());
+
+            var branches = List.of("C", "A", "B").stream().map(Branch::new).collect(Collectors.toList());
+            var storage = temp.path().resolve("storage");
+            var bot = new TopologicalBot(storage, hostedRepo, branches, depsFileName);
+            TestBotRunner.runPeriodicItems(bot);
+
+            var postCommits = repo.commits().asList();
+            assertEquals(6, postCommits.size());
+
+            repo.checkout(aBranch);
+            assertEquals(preHash, repo.head());
+
+            repo.checkout(bBranch);
+            assertNotEquals(preHash, repo.head()); // merge commit
+
+            repo.checkout(cBranch);
+            assertNotEquals(preHash, repo.head()); // merge commit
+        }
+    }
+
+    @Test
+    void testTopoMergeFailure() throws IOException {
+        try (var temp = new TemporaryDirectory()) {
+            var host = TestHost.createNew(List.of(new HostUserDetails(0, "duke", "J. Duke")));
+
+            var fromDir = temp.path().resolve("from.git");
+            var repo = Repository.init(fromDir, VCS.GIT);
+            var gitConfig = repo.root().resolve(".git").resolve("config");
+            Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"), APPEND);
+            var hostedRepo = new TestHostedRepository(host, "test", repo);
+
+            // make non bare
+            var readme = fromDir.resolve("README.txt");
+            Files.writeString(readme, "Hello world\n");
+            repo.add(readme);
+            repo.commit("An initial commit", "duke", "duke@openjdk.org");
+            repo.pushAll(hostedRepo.getUrl());
+
+            var aBranch = repo.branch(repo.head(), "A");
+            repo.checkout(aBranch);
+            Files.writeString(readme, "A conflicting line\n", APPEND);
+            repo.add(readme);
+            var aStartHash = repo.commit("A conflicting commit", "duke", "duke@openjdk.org");
+            repo.pushAll(hostedRepo.getUrl());
+
+            var depsFileName = "deps.txt";
+
+            var bBranch = repo.branch(repo.head(), "B");
+            repo.checkout(bBranch);
+            var bDeps = fromDir.resolve(depsFileName);
+            Files.writeString(bDeps, "A");
+            repo.add(bDeps);
+            var bDepsHash = repo.commit("Adding deps file to B", "duke", "duke@openjdk.org");
+            repo.pushAll(hostedRepo.getUrl());
+
+            var cBranch = repo.branch(repo.head(), "C");
+            repo.checkout(cBranch);
+            var cDeps = fromDir.resolve(depsFileName);
+            Files.writeString(cDeps, "B");
+            repo.add(cDeps);
+            var cDepsHash = repo.commit("Adding deps file to C", "duke", "duke@openjdk.org");
+            repo.pushAll(hostedRepo.getUrl());
+
+            repo.checkout(new Branch("master"));
+            Files.writeString(readme, "Goodbye world!\n", APPEND);
+            repo.add(readme);
+            var preHash = repo.commit("An additional commit", "duke", "duke@openjdk.org");
+            repo.pushAll(hostedRepo.getUrl());
+
+            var preCommits = repo.commits().asList();
+            assertEquals(5, preCommits.size());
+            assertEquals(preHash, repo.head());
+
+            var branches = List.of("C", "A", "B").stream().map(Branch::new).collect(Collectors.toList());
+            var storage = temp.path().resolve("storage");
+            var bot = new TopologicalBot(storage, hostedRepo, branches, depsFileName);
+            assertThrows(UncheckedIOException.class, () -> TestBotRunner.runPeriodicItems(bot));
+
+            var postCommits = repo.commits().asList();
+            assertEquals(5, postCommits.size());
+
+            repo.checkout(aBranch);
+            assertEquals(aStartHash, repo.head());
+
+            repo.checkout(bBranch);
+            assertEquals(bDepsHash, repo.head());
+
+            repo.checkout(cBranch);
+            assertEquals(cDepsHash, repo.head());
+        }
+    }
+}
diff a/settings.gradle b/settings.gradle
--- a/settings.gradle
+++ b/settings.gradle
@@ -48,5 +48,6 @@
 include 'bots:mirror'
 include 'bots:mlbridge'
 include 'bots:notify'
 include 'bots:pr'
 include 'bots:submit'
+include 'bots:topological'
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -170,11 +170,11 @@
 
         return localRepo;
     }
 
     static Repository clone(URI from) throws IOException {
-        var to = Path.of(from.getPath()).getFileName();
+        var to = Path.of(from).getFileName();
         if (to.toString().endsWith(".git")) {
             to = Path.of(to.toString().replace(".git", ""));
         }
         return clone(from, to);
     }
