diff a/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
--- a/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
+++ b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
@@ -33,12 +33,12 @@
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.nio.file.Files;
 import java.net.URLEncoder;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
@@ -87,17 +87,16 @@
             }
 
             repo.fetchAll();
             var depsFile = repo.root().resolve(depsFileName);
 
-            List<Branch> ordered = orderedBranches(repo, depsFile);
-            log.info("Merge order " + ordered);
-            for (Branch branch : ordered) {
+            var orderedBranches = orderedBranches(repo, depsFile);
+            log.info("Merge order " + orderedBranches);
+            for (var branch : orderedBranches) {
                 log.info("Processing branch " + branch + "...");
                 repo.checkout(branch);
-                Set<String> parents = new HashSet<>(
-                        Files.exists(depsFile) ? Files.readAllLines(depsFile) : List.of("master"));
+                var parents = dependencies(depsFile).collect(Collectors.toSet());
                 List<String> failedMerges = new ArrayList<>();
                 boolean progress;
                 boolean failed;
                 do {
                     // We need to attempt merge parents in any order that works. Keep merging
@@ -103,11 +102,11 @@
                     // We need to attempt merge parents in any order that works. Keep merging
                     // and pushing, until no further progress can be made.
                     progress = false;
                     failed = false;
                     for (var parentsIt = parents.iterator(); parentsIt.hasNext();) {
-                        String parent = parentsIt.next();
+                        var parent = parentsIt.next();
                         try {
                             mergeIfAhead(repo, branch, parent);
                             progress = true;
                             parentsIt.remove(); // avoid doing pointless merges
                         } catch(IOException e) {
@@ -127,34 +126,42 @@
             throw new UncheckedIOException(e);
         }
         log.info("Ending topobot run");
     }
 
+    private static Stream<Branch> dependencies(Path depsFile) throws IOException {
+        if (Files.exists(depsFile)) {
+            var lines = Files.readAllLines(depsFile).stream().filter(s -> !s.isEmpty()).collect(Collectors.toList());
+            if (lines.size() > 1) {
+                throw new IllegalStateException("Multiple non-empty lines in " + depsFile.toString() + ": "
+                        + String.join("\n", lines));
+            }
+            return Stream.of(lines.get(0).split(" ")).map(Branch::new);
+        } else {
+            return Stream.of(new Branch("master"));
+        }
+    }
+
     private List<Branch> orderedBranches(Repository repo, Path depsFile) throws IOException {
         List<Edge> deps = new ArrayList<>();
-        for (Branch branch : branches) {
+        for (var branch : branches) {
             repo.checkout(branch);
-            if (Files.exists(depsFile)) {
-                Files.lines(depsFile)
-                        .forEach(dep -> deps.add(new Edge(new Branch(dep), branch)));
-            } else {
-                deps.add(new Edge(new Branch("master"), branch));
-            }
+            dependencies(depsFile).forEach(dep -> deps.add(new Edge(dep, branch)));
         }
-        return tsort(deps).stream()
+        return TopologicalSort.tsort(deps).stream()
             .filter(branch -> !branch.name().equals("master"))
             .collect(Collectors.toList());
     }
 
-    private void mergeIfAhead(Repository repo, Branch branch, String parent) throws IOException {
-        if (log(repo, branch.name(), parent).count() != 0) {
-            var fromHash = repo.resolve(parent).orElseThrow();
+    private void mergeIfAhead(Repository repo, Branch branch, Branch parent) throws IOException {
+        var fromHash = repo.resolve(parent.name()).orElseThrow();
+        if (!repo.contains(branch, fromHash)) {
             var isFastForward = repo.isAncestor(repo.head(), fromHash);
             repo.merge(fromHash);
             if (!isFastForward) {
                 log.info("Merged " + parent + " into " + branch);
-                repo.commit("Automatic merge with " + parent, "topobot", "");
+                repo.commit("Automatic merge with " + parent, "duke", "duke@openjdk.org");
             } else {
                 log.info("Fast forwarded " + branch + " to " + parent);
             }
             log.info("merge with " + parent + " succeeded. The following commits will be pushed:\n"
                     + log(repo, "origin/" + branch.name(), branch.name()).collect(Collectors.joining("\n", "\n", "\n")));
@@ -186,54 +193,10 @@
         }
 
         return new BufferedReader(new InputStreamReader(process.getInputStream())).lines();
     }
 
-    private static class Edge {
-        final Branch from;
-        final Branch to;
-
-        Edge(Branch from, Branch to) {
-            this.from = from;
-            this.to = to;
-        }
-
-        @Override
-        public String toString() {
-            return "Edge{" +
-                    "from='" + from + '\'' +
-                    ", to='" + to + '\'' +
-                    '}';
-        }
-    }
-
-    private static List<Branch> tsort(List<Edge> edges) {
-        List<Edge> eCopy = new ArrayList<>(edges);
-        List<Branch> result = new ArrayList<>();
-        while (!eCopy.isEmpty()) {
-            Set<Branch> orphans = eCopy.stream()
-                    .map(e -> e.from)
-                    .filter(f -> eCopy.stream().map(e -> e.to).noneMatch(f::equals))
-                    .collect(Collectors.toSet());
-            if (orphans.isEmpty()) {
-                throw new IllegalStateException("Detected a cycle! " + edges);
-            }
-            orphans.forEach(o -> {
-                result.add(o);
-                eCopy.removeIf(e -> o.equals(e.from));
-            });
-        }
-
-        // add all leaves
-        edges.stream()
-            .map(e -> e.to)
-            .filter(f -> edges.stream().map(e -> e.from).noneMatch(f::equals))
-            .forEach(result::add);
-
-        return result;
-    }
-
     @Override
     public String toString() {
         return "TopoBot@(" + hostedRepo + ")";
     }
 
