diff a/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalSort.java b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalSort.java
--- a/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalSort.java
+++ b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalSort.java
@@ -28,11 +28,10 @@
 import java.util.List;
 import java.util.Set;
 import java.util.stream.Collectors;
 
 class TopologicalSort {
-
     static List<Branch> sort(List<Edge> edges) {
         List<Edge> eCopy = new ArrayList<>(edges);
         List<Branch> result = new ArrayList<>();
         while (!eCopy.isEmpty()) {
             Set<Branch> orphans = eCopy.stream()
@@ -54,7 +53,6 @@
             .filter(f -> edges.stream().map(e -> e.from).noneMatch(f::equals))
             .forEach(result::add);
 
         return result;
     }
-
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -295,18 +295,17 @@
         }
     }
 
     @Override
     public void reset(Hash target, boolean hard) throws IOException {
-        var cmd = new ArrayList<String>();
-        cmd.addAll(List.of("git", "reset"));
+        var cmd = new ArrayList<>(List.of("git", "reset"));
         if (hard) {
            cmd.add("--hard");
         }
         cmd.add(target.hex());
 
-        try (var p = capture(cmd.toArray(String[]::new))) {
+        try (var p = capture(cmd)) {
             await(p);
         }
     }
 
 
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.vcs;
 
+import org.junit.jupiter.api.Assumptions;
 import org.openjdk.skara.test.TemporaryDirectory;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.EnumSource;
@@ -35,10 +36,11 @@
 import java.util.*;
 import java.util.stream.Collectors;
 
 import static java.nio.file.StandardOpenOption.*;
 import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assumptions.assumeTrue;
 
 public class RepositoryTests {
 
     @ParameterizedTest
     @EnumSource(VCS.class)
@@ -1785,6 +1787,34 @@
 
             r.abortMerge();
             assertTrue(r.isClean());
         }
     }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testReset(VCS vcs) throws IOException {
+        assumeTrue(vcs == VCS.GIT); // FIXME reset is not yet implemented for HG
+
+        try (var dir = new TemporaryDirectory()) {
+            var repo = Repository.init(dir.path(), vcs);
+            assertTrue(repo.isClean());
+
+            var f = dir.path().resolve("README");
+            Files.writeString(f, "Hello\n");
+            repo.add(f);
+            var initial = repo.commit("Initial commit", "duke", "duke@openjdk.org");
+
+            Files.writeString(f, "Hello again\n");
+            repo.add(f);
+            var second = repo.commit("Second commit", "duke", "duke@openjdk.org");
+
+            assertEquals(second, repo.head());
+            assertEquals(2, repo.commits().asList().size());
+
+            repo.reset(initial, true);
+
+            assertEquals(initial, repo.head());
+            assertEquals(1, repo.commits().asList().size());
+        }
+    }
 }
