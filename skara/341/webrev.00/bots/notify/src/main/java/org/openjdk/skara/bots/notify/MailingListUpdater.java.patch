diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -40,10 +40,13 @@
     private final MailingList list;
     private final EmailAddress recipient;
     private final EmailAddress sender;
     private final EmailAddress author;
     private final boolean includeBranch;
+    private final boolean reportNewTags;
+    private final boolean reportNewBranches;
+    private final boolean reportNewBuilds;
     private final Mode mode;
     private final Map<String, String> headers;
     private final Pattern allowedAuthorDomains;
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.notify");
 
@@ -52,16 +55,20 @@
         PR,
         PR_ONLY
     }
 
     MailingListUpdater(MailingList list, EmailAddress recipient, EmailAddress sender, EmailAddress author,
-                       boolean includeBranch, Mode mode, Map<String, String> headers, Pattern allowedAuthorDomains) {
+                       boolean includeBranch, boolean reportNewTags, boolean reportNewBranches, boolean reportNewBuilds,
+                       Mode mode, Map<String, String> headers, Pattern allowedAuthorDomains) {
         this.list = list;
         this.recipient = recipient;
         this.sender = sender;
         this.author = author;
         this.includeBranch = includeBranch;
+        this.reportNewTags = reportNewTags;
+        this.reportNewBranches = reportNewBranches;
+        this.reportNewBuilds = reportNewBuilds;
         this.mode = mode;
         this.headers = headers;
         this.allowedAuthorDomains = allowedAuthorDomains;
     }
 
@@ -209,11 +216,15 @@
         }
     }
 
     @Override
     public void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) {
-        if (mode == Mode.PR_ONLY) {
+        if ((mode == Mode.PR_ONLY) || (!reportNewTags)) {
+            return;
+        }
+        if (!reportNewBuilds) {
+            handleTagCommit(repository, localRepository, commits.get(commits.size() - 1), tag.tag(), annotation);
             return;
         }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
@@ -248,11 +259,11 @@
         list.post(email.build());
     }
 
     @Override
     public void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) {
-        if (mode == Mode.PR_ONLY) {
+        if ((mode == Mode.PR_ONLY) || (!reportNewTags)) {
             return;
         }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
@@ -295,10 +306,13 @@
         return subject.toString();
     }
 
     @Override
     public void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) {
+        if ((mode == Mode.PR_ONLY) || (!reportNewBranches)) {
+            return;
+        }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
         if (commits.size() > 0) {
             printer.println("The following commits are unique to the " + branch.name() + " branch:");
