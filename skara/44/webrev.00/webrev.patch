diff a/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/Exporter.java b/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/Exporter.java
--- a/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/Exporter.java
+++ b/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/Exporter.java
@@ -157,11 +157,11 @@
                 throw new IOException("Error during folder sync:\n" + result.stdout());
             }
         }
     }
 
-    static Optional<Repository> export(Converter converter, URI source, Path destination) throws IOException {
+    static Optional<Repository> export(Converter converter, URI source, Path destination, Path finalMarks) throws IOException {
         final var successMarker = "success.txt";
         final var lastKnownGood = destination.resolve("lkg");
         final var current = destination.resolve("current");
         Optional<Repository> ret;
 
@@ -197,10 +197,14 @@
         // Exported new revisions successfully, update last known good copy
         if (ret.isPresent()) {
             Files.deleteIfExists(lastKnownGood.resolve(successMarker));
             syncFolder(current, lastKnownGood);
             lastKnownGood.resolve(successMarker).toFile().createNewFile();
+
+            // Update marks
+            var markSource = current.resolve("marks.txt");
+            Files.copy(markSource, finalMarks, StandardCopyOption.REPLACE_EXISTING);
         }
 
         return ret;
     }
 
diff a/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/ExporterConfig.java b/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/ExporterConfig.java
--- a/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/ExporterConfig.java
+++ b/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/ExporterConfig.java
@@ -37,10 +37,14 @@
 class ExporterConfig {
     private List<HostedRepository> destinations;
     private URI source;
     private HostedRepository configurationRepo;
     private String configurationRef;
+    private HostedRepository marksRepo;
+    private String marksRef;
+    private String marksAuthorName;
+    private String marksAuthorEmail;
     private List<String> replacementsFile;
     private List<String> correctionsFile;
     private List<String> lowercaseFile;
     private List<String> punctuatedFile;
     private List<String> authorsFile;
@@ -69,10 +73,42 @@
 
     void configurationRef(String configurationRef) {
         this.configurationRef = configurationRef;
     }
 
+    void marksRepo(HostedRepository marksRepo) {
+        this.marksRepo = marksRepo;
+    }
+
+    HostedRepository marksRepo() {
+        return marksRepo;
+    }
+
+    void marksRef(String marksRef) {
+        this.marksRef = marksRef;
+    }
+
+    String marksRef() {
+        return marksRef;
+    }
+
+    void marksAuthorName(String marksAuthorName) {
+        this.marksAuthorName = marksAuthorName;
+    }
+
+    String marksAuthorName() {
+        return marksAuthorName;
+    }
+
+    void marksAuthorEmail(String marksAuthorEmail) {
+        this.marksAuthorEmail = marksAuthorEmail;
+    }
+
+    String marksAuthorEmail() {
+        return marksAuthorEmail;
+    }
+
     void replacements(List<String> replacements) {
         replacementsFile = replacements;
     }
 
     void corrections(List<String> corrections) {
diff a/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/JBridgeBot.java b/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/JBridgeBot.java
--- a/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/JBridgeBot.java
+++ b/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/JBridgeBot.java
@@ -21,10 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.hgbridge;
 
 import org.openjdk.skara.bot.*;
+import org.openjdk.skara.vcs.Repository;
 
 import java.io.*;
 import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
@@ -59,19 +60,65 @@
         } else {
             return true;
         }
     }
 
+    private void pushMarks(Path markSource, String destName, Path markScratchPath) throws IOException {
+        var marksRepo = Repository.materialize(markScratchPath, exporterConfig.marksRepo().getUrl(), exporterConfig.marksRef());
+
+        // We should never change existing marks
+        var markDest = markScratchPath.resolve(destName);
+        var updated = Files.readString(markSource);
+        if (Files.exists(markDest)) {
+            var existing = Files.readString(markDest);
+
+            if (!updated.startsWith(existing)) {
+                throw new RuntimeException("Update containing conflicting marks!");
+            }
+            if (existing.equals(updated)) {
+                // Nothing new to push
+                return;
+            }
+        } else {
+            if (!Files.exists(markDest.getParent())) {
+                Files.createDirectories(markDest.getParent());
+            }
+        }
+
+        Files.writeString(markDest, updated, StandardCharsets.UTF_8);
+        marksRepo.add(markDest);
+        var hash = marksRepo.commit("Updated marks", exporterConfig.marksAuthorName(), exporterConfig.marksAuthorEmail());
+        marksRepo.push(hash, exporterConfig.marksRepo().getUrl(), exporterConfig.marksRef());
+    }
+
     @Override
     public void run(Path scratchPath) {
         log.fine("Running export for " + exporterConfig.source().toString());
 
         try {
-            var converter = exporterConfig.resolve(scratchPath);
-            var exported = Exporter.export(converter, exporterConfig.source(), storage);
-            IOException lastException = null;
+            var converter = exporterConfig.resolve(scratchPath.resolve("converter"));
+            var marksFile = scratchPath.resolve("marks.txt");
+            var exported = Exporter.export(converter, exporterConfig.source(), storage, marksFile);
 
+            // Push updated marks - other marks files may be updated concurrently, so try a few times
+            var retryCount = 0;
+            while (exported.isPresent()) {
+                try {
+                    pushMarks(marksFile,
+                              exporterConfig.source().getHost() + "/" + exporterConfig.source().getPath() + "/marks.txt",
+                              scratchPath.resolve("markspush"));
+                    break;
+                } catch (IOException e) {
+                    retryCount++;
+                    if (retryCount > 10) {
+                        log.warning("Retry count exceeded for pushing marks");
+                        throw new UncheckedIOException(e);
+                    }
+                }
+            }
+
+            IOException lastException = null;
             for (var destination : exporterConfig.destinations()) {
                 var markerBase = destination.getUrl().getHost() + "/" + destination.getName();
                 var successfulPushMarker = storage.resolve(URLEncoder.encode(markerBase, StandardCharsets.UTF_8) + ".success.txt");
                 if (exported.isPresent() || !successfulPushMarker.toFile().isFile()) {
                     var repo = exported.orElse(Exporter.current(storage).orElseThrow());
diff a/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/JBridgeBotFactory.java b/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/JBridgeBotFactory.java
--- a/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/JBridgeBotFactory.java
+++ b/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/JBridgeBotFactory.java
@@ -50,10 +50,16 @@
     public List<Bot> create(BotConfiguration configuration) {
         var ret = new ArrayList<Bot>();
         var specific = configuration.specific();
         var storage = configuration.storageFolder();
 
+        var marks = specific.get("marks").asObject();
+        var marksRepo = configuration.repository(marks.get("repository").asString());
+        var marksRef = marks.get("ref").asString();
+        var marksName = marks.get("name").asString();
+        var marksEmail = marks.get("email").asString();
+
         var converters = specific.get("converters").stream()
                                  .map(JSONValue::asObject)
                                  .flatMap(base -> base.get("repositories").stream()
                                                       .map(JSONValue::asObject)
                                                       .map(repo -> {
@@ -60,10 +66,16 @@
                                                           var converterConfig = new ExporterConfig();
                                                           // Base configuration options
                                                           converterConfig.configurationRepo(configuration.repository(base.get("repository").asString()));
                                                           converterConfig.configurationRef(base.get("ref").asString());
 
+                                                          // Mark storage configuration
+                                                          converterConfig.marksRepo(marksRepo);
+                                                          converterConfig.marksRef(marksRef);
+                                                          converterConfig.marksAuthorName(marksName);
+                                                          converterConfig.marksAuthorEmail(marksEmail);
+
                                                           // Repository specific overrides
                                                           converterConfig.replacements(getSpecific("replacements", base, repo));
                                                           converterConfig.corrections(getSpecific("corrections", base, repo));
                                                           converterConfig.lowercase(getSpecific("lowercase", base, repo));
                                                           converterConfig.punctuated(getSpecific("punctuated", base, repo));
diff a/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java b/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
--- a/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
+++ b/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.hgbridge;
 
-import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.host.*;
 import org.openjdk.skara.host.network.URIBuilder;
 import org.openjdk.skara.process.Process;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Tag;
 import org.openjdk.skara.vcs.*;
@@ -61,13 +61,30 @@
     }
 
     static class TestExporterConfig extends ExporterConfig {
         private boolean badAuthors = false;
 
-        TestExporterConfig(URI source, HostedRepository destination) {
+        TestExporterConfig(URI source, HostedRepository destination, Path marksRepoPath) throws IOException {
             this.source(source);
             this.destinations(List.of(destination));
+
+            var host = TestHost.createNew(List.of(new HostUserDetails(0, "duke", "J. Duke")));
+            var marksLocalRepo = Repository.init(marksRepoPath.resolve("marks.git"), VCS.GIT);
+
+            var initialFile = marksLocalRepo.root().resolve("init.txt");
+            if (!Files.exists(initialFile)) {
+                Files.writeString(initialFile, "Hello", StandardCharsets.UTF_8);
+                marksLocalRepo.add(initialFile);
+                var hash = marksLocalRepo.commit("First", "duke", "duke@duke.duke");
+                marksLocalRepo.checkout(hash, true); // Have to move away from the master branch to allow pushes
+            }
+
+            var marksHostedRepo = new TestHostedRepository(host, "test", marksLocalRepo);
+            this.marksRepo(marksHostedRepo);
+            this.marksRef("master");
+            this.marksAuthorName("J. Duke");
+            this.marksAuthorEmail("j@duke.duke");
         }
 
         void setBadAuthors() {
             this.badAuthors = true;
         }
@@ -137,16 +154,17 @@
     void bridgeTest(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var hgFolder = new TemporaryDirectory();
              var gitFolder = new TemporaryDirectory();
              var storageFolder = new TemporaryDirectory();
-             var storageFolder2 = new TemporaryDirectory()) {
+             var storageFolder2 = new TemporaryDirectory();
+             var marksFolder = new TemporaryDirectory()) {
             // Export a partial version of a hg repository
             var localHgRepo = Repository.materialize(hgFolder.path(), source, "default");
             localHgRepo.fetch(source, "testlock");
             var destinationRepo = credentials.getHostedRepository();
-            var config = new TestExporterConfig(localHgRepo.root().toUri(), destinationRepo);
+            var config = new TestExporterConfig(localHgRepo.root().toUri(), destinationRepo, marksFolder.path());
             var bridge = new JBridgeBot(config, storageFolder.path());
 
             runHgCommand(localHgRepo, "strip", "-r", "bd7a3ed1210f");
             TestBotRunner.runPeriodicItems(bridge);
 
@@ -186,15 +204,16 @@
 
     @Test
     void bridgeCorruptedStorageHg(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var storageFolder = new TemporaryDirectory();
-             var gitFolder = new TemporaryDirectory()) {
+             var gitFolder = new TemporaryDirectory();
+             var marksFolder = new TemporaryDirectory()) {
             var destinationRepo = credentials.getHostedRepository();
 
             // Export an hg repository as is
-            var config = new TestExporterConfig(source, destinationRepo);
+            var config = new TestExporterConfig(source, destinationRepo, marksFolder.path());
             var bridge = new JBridgeBot(config, storageFolder.path());
             TestBotRunner.runPeriodicItems(bridge);
 
             // Materialize it and ensure that it contains a known commit
             var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.getUrl(), "master");
@@ -224,21 +243,22 @@
     @Test
     void bridgeExportScriptFailure(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var storageFolder = new TemporaryDirectory();
              var storageFolder2 = new TemporaryDirectory();
-             var gitFolder = new TemporaryDirectory()) {
+             var gitFolder = new TemporaryDirectory();
+             var marksFolder = new TemporaryDirectory()) {
             var destinationRepo = credentials.getHostedRepository();
 
             // Export an hg repository but with an empty authors list
-            var config = new TestExporterConfig(source, destinationRepo);
+            var config = new TestExporterConfig(source, destinationRepo, marksFolder.path());
             config.setBadAuthors();
             var badBridge = new JBridgeBot(config, storageFolder.path());
             assertThrows(RuntimeException.class, () -> TestBotRunner.runPeriodicItems(badBridge));
 
             // Now once again with a correct configuration
-            config = new TestExporterConfig(source, destinationRepo);
+            config = new TestExporterConfig(source, destinationRepo, marksFolder.path());
             var goodBridge = new JBridgeBot(config, storageFolder2.path());
             TestBotRunner.runPeriodicItems(goodBridge);
 
             // Verify that it now contains a known commit
             var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.getUrl(), "master");
@@ -252,13 +272,14 @@
         try (var credentials = new HostCredentials(testInfo);
              var storageFolder = new TemporaryDirectory();
              var gitFolder = new TemporaryDirectory();
              var gitFolder2 = new TemporaryDirectory();
              var gitFolder3 = new TemporaryDirectory();
-             var gitFolder4 = new TemporaryDirectory()) {
+             var gitFolder4 = new TemporaryDirectory();
+             var marksFolder = new TemporaryDirectory()) {
             var destinationRepo = credentials.getHostedRepository();
-            var config = new TestExporterConfig(source, destinationRepo);
+            var config = new TestExporterConfig(source, destinationRepo, marksFolder.path());
 
             // Export an hg repository as is
             var bridge = new JBridgeBot(config, storageFolder.path());
             TestBotRunner.runPeriodicItems(bridge);
 
@@ -293,13 +314,14 @@
              var storageFolder = new TemporaryDirectory();
              var gitFolder = new TemporaryDirectory();
              var gitFolder2 = new TemporaryDirectory();
              var gitFolder3 = new TemporaryDirectory();
              var gitFolder4 = new TemporaryDirectory();
-             var gitFolder5 = new TemporaryDirectory()) {
+             var gitFolder5 = new TemporaryDirectory();
+             var marksFolder = new TemporaryDirectory()) {
             var destinationRepo = credentials.getHostedRepository();
-            var config = new TestExporterConfig(source, destinationRepo);
+            var config = new TestExporterConfig(source, destinationRepo, marksFolder.path());
 
             // Export an hg repository as is
             var bridge = new JBridgeBot(config, storageFolder.path());
             TestBotRunner.runPeriodicItems(bridge);
 
@@ -349,18 +371,17 @@
 
     @Test
     void filterUnreachable(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var hgFolder = new TemporaryDirectory();
-             var gitFolder = new TemporaryDirectory();
              var storageFolder = new TemporaryDirectory();
-             var storageFolder2 = new TemporaryDirectory()) {
+             var marksFolder = new TemporaryDirectory()) {
             // Export a hg repository with unreachable commits
             var localHgRepo = Repository.materialize(hgFolder.path(), source, "default");
             localHgRepo.fetch(source, "testlock");
             var destinationRepo = credentials.getHostedRepository();
-            var config = new TestExporterConfig(localHgRepo.root().toUri(), destinationRepo);
+            var config = new TestExporterConfig(localHgRepo.root().toUri(), destinationRepo, marksFolder.path());
             var bridge = new JBridgeBot(config, storageFolder.path());
 
             runHgCommand(localHgRepo, "update", "-r", "5");
             var other = localHgRepo.root().resolve("other.txt");
             Files.writeString(other, "Hello");
@@ -373,6 +394,41 @@
 
             // The second conversion should not encounter unreachable commits in the marks file
             TestBotRunner.runPeriodicItems(bridge);
         }
     }
+
+    @Test
+    void changedMarks(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var hgFolder = new TemporaryDirectory();
+             var storageFolder = new TemporaryDirectory();
+             var storageFolder2 = new TemporaryDirectory();
+             var marksFolder = new TemporaryDirectory()) {
+            // Export a hg repository
+            var localHgRepo = Repository.materialize(hgFolder.path(), source, "default");
+            localHgRepo.fetch(source, "testlock");
+            var destinationRepo = credentials.getHostedRepository();
+            var config = new TestExporterConfig(localHgRepo.root().toUri(), destinationRepo, marksFolder.path());
+            var bridge = new JBridgeBot(config, storageFolder.path());
+
+            runHgCommand(localHgRepo, "update", "-r", "5");
+            var other = localHgRepo.root().resolve("other.txt");
+            Files.writeString(other, "Hello");
+            localHgRepo.add(other);
+            localHgRepo.commit("First", "duke", "");
+
+            // Do an initial conversion
+            TestBotRunner.runPeriodicItems(bridge);
+
+            // Now roll back and commit something else
+            runHgCommand(localHgRepo, "update", "-r", "5");
+            Files.writeString(other, "There");
+            localHgRepo.add(other);
+            localHgRepo.commit("Second", "duke", "");
+
+            // The second conversion (with fresh storage) should detect that marks have changed
+            var newBridge = new JBridgeBot(config, storageFolder2.path());
+            assertThrows(RuntimeException.class, () -> TestBotRunner.runPeriodicItems(newBridge));
+        }
+    }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/HgToGitConverter.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/HgToGitConverter.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/HgToGitConverter.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/HgToGitConverter.java
@@ -684,11 +684,11 @@
              var git = fastImport(gitRepo)) {
             try {
                 for (var mark : marks) {
                     hgHashesToMarks.put(mark.hg(), mark.key());
                     marksToHgHashes.put(mark.key(), mark.hg());
-                    currentMark = mark.key() > currentMark ? mark.key() : currentMark;
+                    currentMark = Math.max(mark.key(), currentMark);
                 }
                 var gitMarks = writeMarks(marks);
                 convert(hg, git, hgRepo, gitMarks);
 
                 await(git);
