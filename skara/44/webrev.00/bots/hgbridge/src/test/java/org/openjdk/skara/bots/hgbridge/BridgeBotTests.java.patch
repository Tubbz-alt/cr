diff a/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java b/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
--- a/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
+++ b/bots/hgbridge/src/test/java/org/openjdk/skara/bots/hgbridge/BridgeBotTests.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.hgbridge;
 
-import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.host.*;
 import org.openjdk.skara.host.network.URIBuilder;
 import org.openjdk.skara.process.Process;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Tag;
 import org.openjdk.skara.vcs.*;
@@ -61,13 +61,30 @@
     }
 
     static class TestExporterConfig extends ExporterConfig {
         private boolean badAuthors = false;
 
-        TestExporterConfig(URI source, HostedRepository destination) {
+        TestExporterConfig(URI source, HostedRepository destination, Path marksRepoPath) throws IOException {
             this.source(source);
             this.destinations(List.of(destination));
+
+            var host = TestHost.createNew(List.of(new HostUserDetails(0, "duke", "J. Duke")));
+            var marksLocalRepo = Repository.init(marksRepoPath.resolve("marks.git"), VCS.GIT);
+
+            var initialFile = marksLocalRepo.root().resolve("init.txt");
+            if (!Files.exists(initialFile)) {
+                Files.writeString(initialFile, "Hello", StandardCharsets.UTF_8);
+                marksLocalRepo.add(initialFile);
+                var hash = marksLocalRepo.commit("First", "duke", "duke@duke.duke");
+                marksLocalRepo.checkout(hash, true); // Have to move away from the master branch to allow pushes
+            }
+
+            var marksHostedRepo = new TestHostedRepository(host, "test", marksLocalRepo);
+            this.marksRepo(marksHostedRepo);
+            this.marksRef("master");
+            this.marksAuthorName("J. Duke");
+            this.marksAuthorEmail("j@duke.duke");
         }
 
         void setBadAuthors() {
             this.badAuthors = true;
         }
@@ -137,16 +154,17 @@
     void bridgeTest(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var hgFolder = new TemporaryDirectory();
              var gitFolder = new TemporaryDirectory();
              var storageFolder = new TemporaryDirectory();
-             var storageFolder2 = new TemporaryDirectory()) {
+             var storageFolder2 = new TemporaryDirectory();
+             var marksFolder = new TemporaryDirectory()) {
             // Export a partial version of a hg repository
             var localHgRepo = Repository.materialize(hgFolder.path(), source, "default");
             localHgRepo.fetch(source, "testlock");
             var destinationRepo = credentials.getHostedRepository();
-            var config = new TestExporterConfig(localHgRepo.root().toUri(), destinationRepo);
+            var config = new TestExporterConfig(localHgRepo.root().toUri(), destinationRepo, marksFolder.path());
             var bridge = new JBridgeBot(config, storageFolder.path());
 
             runHgCommand(localHgRepo, "strip", "-r", "bd7a3ed1210f");
             TestBotRunner.runPeriodicItems(bridge);
 
@@ -186,15 +204,16 @@
 
     @Test
     void bridgeCorruptedStorageHg(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var storageFolder = new TemporaryDirectory();
-             var gitFolder = new TemporaryDirectory()) {
+             var gitFolder = new TemporaryDirectory();
+             var marksFolder = new TemporaryDirectory()) {
             var destinationRepo = credentials.getHostedRepository();
 
             // Export an hg repository as is
-            var config = new TestExporterConfig(source, destinationRepo);
+            var config = new TestExporterConfig(source, destinationRepo, marksFolder.path());
             var bridge = new JBridgeBot(config, storageFolder.path());
             TestBotRunner.runPeriodicItems(bridge);
 
             // Materialize it and ensure that it contains a known commit
             var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.getUrl(), "master");
@@ -224,21 +243,22 @@
     @Test
     void bridgeExportScriptFailure(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var storageFolder = new TemporaryDirectory();
              var storageFolder2 = new TemporaryDirectory();
-             var gitFolder = new TemporaryDirectory()) {
+             var gitFolder = new TemporaryDirectory();
+             var marksFolder = new TemporaryDirectory()) {
             var destinationRepo = credentials.getHostedRepository();
 
             // Export an hg repository but with an empty authors list
-            var config = new TestExporterConfig(source, destinationRepo);
+            var config = new TestExporterConfig(source, destinationRepo, marksFolder.path());
             config.setBadAuthors();
             var badBridge = new JBridgeBot(config, storageFolder.path());
             assertThrows(RuntimeException.class, () -> TestBotRunner.runPeriodicItems(badBridge));
 
             // Now once again with a correct configuration
-            config = new TestExporterConfig(source, destinationRepo);
+            config = new TestExporterConfig(source, destinationRepo, marksFolder.path());
             var goodBridge = new JBridgeBot(config, storageFolder2.path());
             TestBotRunner.runPeriodicItems(goodBridge);
 
             // Verify that it now contains a known commit
             var localGitRepo = Repository.materialize(gitFolder.path(), destinationRepo.getUrl(), "master");
@@ -252,13 +272,14 @@
         try (var credentials = new HostCredentials(testInfo);
              var storageFolder = new TemporaryDirectory();
              var gitFolder = new TemporaryDirectory();
              var gitFolder2 = new TemporaryDirectory();
              var gitFolder3 = new TemporaryDirectory();
-             var gitFolder4 = new TemporaryDirectory()) {
+             var gitFolder4 = new TemporaryDirectory();
+             var marksFolder = new TemporaryDirectory()) {
             var destinationRepo = credentials.getHostedRepository();
-            var config = new TestExporterConfig(source, destinationRepo);
+            var config = new TestExporterConfig(source, destinationRepo, marksFolder.path());
 
             // Export an hg repository as is
             var bridge = new JBridgeBot(config, storageFolder.path());
             TestBotRunner.runPeriodicItems(bridge);
 
@@ -293,13 +314,14 @@
              var storageFolder = new TemporaryDirectory();
              var gitFolder = new TemporaryDirectory();
              var gitFolder2 = new TemporaryDirectory();
              var gitFolder3 = new TemporaryDirectory();
              var gitFolder4 = new TemporaryDirectory();
-             var gitFolder5 = new TemporaryDirectory()) {
+             var gitFolder5 = new TemporaryDirectory();
+             var marksFolder = new TemporaryDirectory()) {
             var destinationRepo = credentials.getHostedRepository();
-            var config = new TestExporterConfig(source, destinationRepo);
+            var config = new TestExporterConfig(source, destinationRepo, marksFolder.path());
 
             // Export an hg repository as is
             var bridge = new JBridgeBot(config, storageFolder.path());
             TestBotRunner.runPeriodicItems(bridge);
 
@@ -349,18 +371,17 @@
 
     @Test
     void filterUnreachable(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var hgFolder = new TemporaryDirectory();
-             var gitFolder = new TemporaryDirectory();
              var storageFolder = new TemporaryDirectory();
-             var storageFolder2 = new TemporaryDirectory()) {
+             var marksFolder = new TemporaryDirectory()) {
             // Export a hg repository with unreachable commits
             var localHgRepo = Repository.materialize(hgFolder.path(), source, "default");
             localHgRepo.fetch(source, "testlock");
             var destinationRepo = credentials.getHostedRepository();
-            var config = new TestExporterConfig(localHgRepo.root().toUri(), destinationRepo);
+            var config = new TestExporterConfig(localHgRepo.root().toUri(), destinationRepo, marksFolder.path());
             var bridge = new JBridgeBot(config, storageFolder.path());
 
             runHgCommand(localHgRepo, "update", "-r", "5");
             var other = localHgRepo.root().resolve("other.txt");
             Files.writeString(other, "Hello");
@@ -373,6 +394,41 @@
 
             // The second conversion should not encounter unreachable commits in the marks file
             TestBotRunner.runPeriodicItems(bridge);
         }
     }
+
+    @Test
+    void changedMarks(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var hgFolder = new TemporaryDirectory();
+             var storageFolder = new TemporaryDirectory();
+             var storageFolder2 = new TemporaryDirectory();
+             var marksFolder = new TemporaryDirectory()) {
+            // Export a hg repository
+            var localHgRepo = Repository.materialize(hgFolder.path(), source, "default");
+            localHgRepo.fetch(source, "testlock");
+            var destinationRepo = credentials.getHostedRepository();
+            var config = new TestExporterConfig(localHgRepo.root().toUri(), destinationRepo, marksFolder.path());
+            var bridge = new JBridgeBot(config, storageFolder.path());
+
+            runHgCommand(localHgRepo, "update", "-r", "5");
+            var other = localHgRepo.root().resolve("other.txt");
+            Files.writeString(other, "Hello");
+            localHgRepo.add(other);
+            localHgRepo.commit("First", "duke", "");
+
+            // Do an initial conversion
+            TestBotRunner.runPeriodicItems(bridge);
+
+            // Now roll back and commit something else
+            runHgCommand(localHgRepo, "update", "-r", "5");
+            Files.writeString(other, "There");
+            localHgRepo.add(other);
+            localHgRepo.commit("Second", "duke", "");
+
+            // The second conversion (with fresh storage) should detect that marks have changed
+            var newBridge = new JBridgeBot(config, storageFolder2.path());
+            assertThrows(RuntimeException.class, () -> TestBotRunner.runPeriodicItems(newBridge));
+        }
+    }
 }
