diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -374,11 +374,11 @@
 
             var hunks = patch.hunks();
             assertEquals(1, hunks.size());
 
             var hunk = hunks.get(0);
-            assertEquals(new Range(1, 0), hunk.source().range());
+            assertEquals(new Range(2, 0), hunk.source().range());
             assertEquals(new Range(2, 1), hunk.target().range());
 
             assertEquals(List.of(), hunk.source().lines());
             assertEquals(List.of("Another line"), hunk.target().lines());
         }
@@ -506,11 +506,11 @@
 
             var hunks = patch.hunks();
             assertEquals(1, hunks.size());
 
             var hunk = hunks.get(0);
-            assertEquals(new Range(1, 0), hunk.source().range());
+            assertEquals(new Range(2, 0), hunk.source().range());
             assertEquals(new Range(2, 2), hunk.target().range());
 
             assertEquals(List.of(), hunk.source().lines());
             assertEquals(List.of("Another line", "A final line"), hunk.target().lines());
         }
@@ -857,11 +857,11 @@
 
             var hunks = patch.hunks();
             assertEquals(1, hunks.size());
 
             var hunk = hunks.get(0);
-            assertEquals(1, hunk.source().range().start());
+            assertEquals(2, hunk.source().range().start());
             assertEquals(0, hunk.source().range().count());
             assertEquals(0, hunk.source().lines().size());
 
             assertEquals(2, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
@@ -1130,11 +1130,11 @@
 
             var hunks = patch.hunks();
             assertEquals(1, hunks.size());
 
             var hunk = hunks.get(0);
-            assertEquals(1, hunk.source().range().start());
+            assertEquals(2, hunk.source().range().start());
             assertEquals(0, hunk.source().range().count());
             assertEquals(List.of(), hunk.source().lines());
 
             assertEquals(2, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
@@ -1281,11 +1281,11 @@
 
             var secondHunk = secondPatch.hunks().get(0);
             assertEquals(List.of(), secondHunk.source().lines());
             assertEquals(List.of("One last line"), secondHunk.target().lines());
 
-            assertEquals(2, secondHunk.source().range().start());
+            assertEquals(3, secondHunk.source().range().start());
             assertEquals(0, secondHunk.source().range().count());
             assertEquals(3, secondHunk.target().range().start());
             assertEquals(1, secondHunk.target().range().count());
 
             var thirdDiff = diffs.stream().filter(d -> d.from().equals(third)).findFirst().get();
@@ -1300,11 +1300,11 @@
 
             var thirdHunk = thirdPatch.hunks().get(0);
             assertEquals(List.of(), thirdHunk.source().lines());
             assertEquals(List.of("One more line", "One last line"), thirdHunk.target().lines());
 
-            assertEquals(1, thirdHunk.source().range().start());
+            assertEquals(2, thirdHunk.source().range().start());
             assertEquals(0, thirdHunk.source().range().count());
             assertEquals(2, thirdHunk.target().range().start());
             assertEquals(2, thirdHunk.target().range().count());
         }
     }
