diff a/vcs/src/main/java/org/openjdk/skara/vcs/Range.java b/vcs/src/main/java/org/openjdk/skara/vcs/Range.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Range.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Range.java
@@ -40,22 +40,11 @@
             var start = Integer.parseInt(s);
             return new Range(start, 1);
         }
 
         var start = Integer.parseInt(s.substring(0, separatorIndex));
-
-        // Need to work arond a bug in git where git sometimes print -1
-        // as an unsigned int for the count part of the range
-        var countString = s.substring(separatorIndex + 1, s.length());
-        var count =
-            countString.equals("18446744073709551615") ?  0 : Integer.parseInt(countString);
-
-        if (count == 0 && start != 0) {
-            // start is off-by-one when count is 0.
-            // but if start == 0, a file was added and we need a 0 here.
-            start++;
-        }
+        var count = Integer.parseInt(s.substring(separatorIndex + 1, s.length()));
 
         return new Range(start, count);
     }
 
     public int start() {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCombinedDiffParser.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCombinedDiffParser.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCombinedDiffParser.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCombinedDiffParser.java
@@ -41,11 +41,11 @@
         this.numParents = bases.size();
         this.head = head;
         this.delimiter = delimiter;
     }
 
-    private List<List<Hunk>> parseSingleFileMultiParentDiff(UnixStreamReader reader) throws IOException {
+    private List<List<Hunk>> parseSingleFileMultiParentDiff(UnixStreamReader reader, List<PatchHeader> headers) throws IOException {
         assert line.startsWith("diff --combined");
 
         while ((line = reader.readLine()) != null &&
                 !line.startsWith("@@@") &&
                 !line.startsWith("diff --combined") &&
@@ -62,11 +62,18 @@
         while (line != null && line.startsWith("@@@")) {
             var words = line.split("\\s");
             assert words[0].startsWith("@@@");
             var sourceRangesPerParent = new ArrayList<Range>(numParents);
             for (int i = 1; i <= numParents; i++) {
-                sourceRangesPerParent.add(Range.fromString(words[i].substring(1))); // skip initial '-'
+                var header = headers.get(i - 1);
+                if (header.status().isAdded()) {
+                    // git reports wrong start for added files, they should
+                    // always have range (0,0), but git reports (1,0)
+                    sourceRangesPerParent.add(new Range(0, 0));
+                } else {
+                    sourceRangesPerParent.add(Range.fromString(words[i].substring(1))); // skip initial '-'
+                }
             }
             var targetRange = Range.fromString(words[numParents + 1].substring(1)); // skip initial '+'
 
             var linesPerParent = new ArrayList<List<String>>(numParents);
             for (int i = 0; i < numParents; i++) {
@@ -172,12 +179,14 @@
         var headersPerParent = new ArrayList<List<PatchHeader>>(numParents);
         for (int i = 0; i < numParents; i++) {
             headersPerParent.add(new ArrayList<PatchHeader>());
         }
 
+        var headersForFiles = new ArrayList<List<PatchHeader>>();
         while (line != null && line.startsWith("::")) {
             var headersForFile = parseCombinedRawLine(line);
+            headersForFiles.add(headersForFile);
             assert headersForFile.size() == numParents;
 
             for (int i = 0; i < numParents; i++) {
                 headersPerParent.get(i).add(headersForFile.get(i));
             }
@@ -191,17 +200,22 @@
 
         var hunksPerFilePerParent = new ArrayList<List<List<Hunk>>>(numParents);
         for (int i = 0; i < numParents; i++) {
             hunksPerFilePerParent.add(new ArrayList<List<Hunk>>());
         }
+
+        int headerIndex = 0;
         while (line != null && !line.equals(delimiter)) {
-            var hunksPerParentForFile = parseSingleFileMultiParentDiff(reader);
+            var headersForFile = headersForFiles.get(headerIndex);
+            var hunksPerParentForFile = parseSingleFileMultiParentDiff(reader, headersForFile);
             assert hunksPerParentForFile.size() == numParents;
 
             for (int i = 0; i < numParents; i++) {
                 hunksPerFilePerParent.get(i).add(hunksPerParentForFile.get(i));
             }
+
+            headerIndex++;
         }
 
         var patchesPerParent = new ArrayList<List<Patch>>(numParents);
         for (int i = 0; i < numParents; i++) {
             var headers = headersPerParent.get(i);
diff a/vcs/src/main/java/org/openjdk/skara/vcs/tools/GitRange.java b/vcs/src/main/java/org/openjdk/skara/vcs/tools/GitRange.java
--- /dev/null
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/tools/GitRange.java
@@ -0,0 +1,52 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.vcs.tools;
+
+import org.openjdk.skara.vcs.Range;
+
+class GitRange {
+    static Range fromString(String s) {
+        var separatorIndex = s.indexOf(",");
+
+        if (separatorIndex == -1) {
+            var start = Integer.parseInt(s);
+            return new Range(start, 1);
+        }
+
+        var start = Integer.parseInt(s.substring(0, separatorIndex));
+
+        // Need to work around a bug in git where git sometimes print -1
+        // as an unsigned int for the count part of the range
+        var countString = s.substring(separatorIndex + 1, s.length());
+        var count =
+            countString.equals("18446744073709551615") ?  0 : Integer.parseInt(countString);
+
+        if (count == 0 && start != 0) {
+            // start is off-by-one when count is 0.
+            // but if start == 0, a file was added and we need a 0 here.
+            start++;
+        }
+
+        return new Range(start, count);
+    }
+}
diff a/vcs/src/main/java/org/openjdk/skara/vcs/tools/UnifiedDiffParser.java b/vcs/src/main/java/org/openjdk/skara/vcs/tools/UnifiedDiffParser.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/tools/UnifiedDiffParser.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/tools/UnifiedDiffParser.java
@@ -147,12 +147,12 @@
                     targetLines.add(line.substring(1)); // skip initial '+'
                 } else {
                     throw new IllegalStateException("Unexpected diff line: " + line);
                 }
             }
-            hunks.add(new Hunk(Range.fromString(sourceRange), sourceLines, sourceHasNewlineAtEndOfFile,
-                               Range.fromString(targetRange), targetLines, targetHasNewlineAtEndOfFile));
+            hunks.add(new Hunk(GitRange.fromString(sourceRange), sourceLines, sourceHasNewlineAtEndOfFile,
+                               GitRange.fromString(targetRange), targetLines, targetHasNewlineAtEndOfFile));
         }
 
         return Hunks.ofTextual(hunks);
     }
 
@@ -259,18 +259,10 @@
                 i++;
                 continue;
             }
 
             if (line.startsWith(" ")) {
-                // this is the start of another hunk
-                // TODO: explain this strange behaviour
-                if (sourceLines.size() == 0) {
-                    sourceStart--;
-                }
-                if (targetLines.size() == 0) {
-                    targetStart--;
-                }
                 hunks.add(new Hunk(new Range(sourceStart, sourceLines.size()), sourceLines,
                                    new Range(targetStart, targetLines.size()), targetLines));
 
                 sourceStart += sourceLines.size();
                 targetStart += targetLines.size();
@@ -285,16 +277,10 @@
                 }
             }
         }
 
         if (sourceLines.size() > 0 || targetLines.size() > 0) {
-            if (sourceLines.size() == 0) {
-                sourceStart--;
-            }
-            if (targetLines.size() == 0) {
-                targetStart--;
-            }
             hunks.add(new Hunk(new Range(sourceStart, sourceLines.size()), sourceLines,
                                new Range(targetStart, targetLines.size()), targetLines));
         }
 
         return hunks;
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -374,11 +374,11 @@
 
             var hunks = patch.hunks();
             assertEquals(1, hunks.size());
 
             var hunk = hunks.get(0);
-            assertEquals(new Range(1, 0), hunk.source().range());
+            assertEquals(new Range(2, 0), hunk.source().range());
             assertEquals(new Range(2, 1), hunk.target().range());
 
             assertEquals(List.of(), hunk.source().lines());
             assertEquals(List.of("Another line"), hunk.target().lines());
         }
@@ -506,11 +506,11 @@
 
             var hunks = patch.hunks();
             assertEquals(1, hunks.size());
 
             var hunk = hunks.get(0);
-            assertEquals(new Range(1, 0), hunk.source().range());
+            assertEquals(new Range(2, 0), hunk.source().range());
             assertEquals(new Range(2, 2), hunk.target().range());
 
             assertEquals(List.of(), hunk.source().lines());
             assertEquals(List.of("Another line", "A final line"), hunk.target().lines());
         }
@@ -857,11 +857,11 @@
 
             var hunks = patch.hunks();
             assertEquals(1, hunks.size());
 
             var hunk = hunks.get(0);
-            assertEquals(1, hunk.source().range().start());
+            assertEquals(2, hunk.source().range().start());
             assertEquals(0, hunk.source().range().count());
             assertEquals(0, hunk.source().lines().size());
 
             assertEquals(2, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
@@ -1130,11 +1130,11 @@
 
             var hunks = patch.hunks();
             assertEquals(1, hunks.size());
 
             var hunk = hunks.get(0);
-            assertEquals(1, hunk.source().range().start());
+            assertEquals(2, hunk.source().range().start());
             assertEquals(0, hunk.source().range().count());
             assertEquals(List.of(), hunk.source().lines());
 
             assertEquals(2, hunk.target().range().start());
             assertEquals(1, hunk.target().range().count());
@@ -1281,11 +1281,11 @@
 
             var secondHunk = secondPatch.hunks().get(0);
             assertEquals(List.of(), secondHunk.source().lines());
             assertEquals(List.of("One last line"), secondHunk.target().lines());
 
-            assertEquals(2, secondHunk.source().range().start());
+            assertEquals(3, secondHunk.source().range().start());
             assertEquals(0, secondHunk.source().range().count());
             assertEquals(3, secondHunk.target().range().start());
             assertEquals(1, secondHunk.target().range().count());
 
             var thirdDiff = diffs.stream().filter(d -> d.from().equals(third)).findFirst().get();
@@ -1300,11 +1300,11 @@
 
             var thirdHunk = thirdPatch.hunks().get(0);
             assertEquals(List.of(), thirdHunk.source().lines());
             assertEquals(List.of("One more line", "One last line"), thirdHunk.target().lines());
 
-            assertEquals(1, thirdHunk.source().range().start());
+            assertEquals(2, thirdHunk.source().range().start());
             assertEquals(0, thirdHunk.source().range().count());
             assertEquals(2, thirdHunk.target().range().start());
             assertEquals(2, thirdHunk.target().range().count());
         }
     }
