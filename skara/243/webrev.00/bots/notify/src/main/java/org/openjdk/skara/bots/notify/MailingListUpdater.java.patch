diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -30,13 +30,13 @@
 
 import java.io.*;
 import java.time.Duration;
 import java.time.format.DateTimeFormatter;
 import java.util.*;
+import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
-import java.util.logging.Logger;
 
 public class MailingListUpdater implements UpdateConsumer {
     private final MailingList list;
     private final EmailAddress recipient;
     private final EmailAddress sender;
@@ -99,21 +99,44 @@
         }
 
         return writer.toString();
     }
 
-    private EmailAddress commitsToAuthor(List<Commit> commits) {
-        var commit = commits.get(commits.size() - 1);
-        var commitAddress = EmailAddress.from(commit.committer().name(), commit.committer().email());
+    private String tagAnnotationToText(HostedRepository repository, Tag.Annotated annotation) {
+        var writer = new StringWriter();
+        var printer = new PrintWriter(writer);
+
+        printer.println("Changeset: " + annotation.target().abbreviate());
+        printer.println("Author:    " + annotation.author().name() + " <" + annotation.author().email() + ">");
+        printer.println("Date:      " + annotation.date().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss +0000")));
+        printer.println("URL:       " + repository.webUrl(annotation.target()));
+        printer.println();
+        printer.print(String.join("\n", annotation.message()));
+
+        return writer.toString();
+    }
+
+    private EmailAddress filteredAuthor(EmailAddress commitAddress) {
+        if (author != null) {
+            return author;
+        }
         var allowedAuthorMatcher = allowedAuthorDomains.matcher(commitAddress.domain());
         if (!allowedAuthorMatcher.matches()) {
             return sender;
         } else {
             return commitAddress;
         }
     }
 
+    private EmailAddress commitToAuthor(Commit commit) {
+        return filteredAuthor(EmailAddress.from(commit.committer().name(), commit.committer().email()));
+    }
+
+    private EmailAddress annotationToAuthor(Tag.Annotated annotation) {
+        return filteredAuthor(EmailAddress.from(annotation.author().name(), annotation.author().email()));
+    }
+
     private String commitsToSubject(HostedRepository repository, List<Commit> commits, Branch branch) {
         var subject = new StringBuilder();
         subject.append(repository.repositoryType().shortName());
         subject.append(": ");
         subject.append(repository.name());
@@ -129,16 +152,16 @@
             subject.append(commits.get(0).message().get(0));
         }
         return subject.toString();
     }
 
-    private String tagToSubject(HostedRepository repository, Hash hash, OpenJDKTag tag) {
+    private String tagToSubject(HostedRepository repository, Hash hash, Tag tag) {
         return repository.repositoryType().shortName() +
                 ": " +
                 repository.name() +
                 ": Added tag " +
-                tag.tag() +
+                tag +
                 " for changeset " +
                 hash.abbreviate();
     }
 
     private List<Commit> filterAndSendPrCommits(HostedRepository repository, List<Commit> commits) {
@@ -168,15 +191,15 @@
                 log.warning("Pull request " + prLink + " found in " + rfrCandidates.size() + " RFR threads - expected 1");
                 ret.add(commit);
                 continue;
             }
             var rfr = rfrCandidates.get(0);
-            var finalAuthor = author != null ? author : commitsToAuthor(commits);
+
             var body = commitToText(repository, commit);
             var email = Email.reply(rfr, "Re: [Integrated] " + rfr.subject(), body)
                              .sender(sender)
-                             .author(finalAuthor)
+                             .author(commitToAuthor(commit))
                              .recipient(recipient)
                              .headers(headers)
                              .build();
             list.post(email);
         }
@@ -195,14 +218,15 @@
         for (var commit : commits) {
             printer.println(commitToText(repository, commit));
         }
 
         var subject = commitsToSubject(repository, commits, branch);
-        var finalAuthor = author != null ? author : commitsToAuthor(commits);
+        var lastCommit = commits.get(commits.size() - 1);
+        var commitAddress = filteredAuthor(EmailAddress.from(lastCommit.committer().name(), lastCommit.committer().email()));
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
-                         .author(finalAuthor)
+                         .author(commitAddress)
                          .recipient(recipient)
                          .headers(headers)
                          .build();
 
         list.post(email);
@@ -222,38 +246,53 @@
                 break;
         }
     }
 
     @Override
-    public void handleTagCommits(HostedRepository repository, List<Commit> commits, OpenJDKTag tag) {
+    public void handleAnnotatedTagCommits(HostedRepository repository, List<Commit> commits, Tag tag, Tag.Annotated annotation) {
         if (mode == Mode.PR_ONLY) {
             return;
         }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
-        printer.println("The following commits are included in " + tag.tag());
-        printer.println("========================================================");
-        for (var commit : commits) {
-            printer.print(commit.hash().abbreviate());
-            if (commit.message().size() > 0) {
-                printer.print(": " + commit.message().get(0));
+        if (annotation != null) {
+            printer.println(tagAnnotationToText(repository, annotation));
+        }
+
+        var openjdkTag = OpenJDKTag.create(tag);
+        if (openjdkTag.isPresent()) {
+            printer.println("The following commits are included in " + tag);
+            printer.println("========================================================");
+            for (var commit : commits) {
+                printer.print(commit.hash().abbreviate());
+                if (commit.message().size() > 0) {
+                    printer.print(": " + commit.message().get(0));
+                }
+                printer.println();
             }
-            printer.println();
         }
 
         var tagCommit = commits.get(commits.size() - 1);
         var subject = tagToSubject(repository, tagCommit.hash(), tag);
-        var finalAuthor = author != null ? author : commitsToAuthor(commits);
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
-                         .author(finalAuthor)
                          .recipient(recipient)
-                         .headers(headers)
-                         .build();
+                         .headers(headers);
 
-        list.post(email);
+        if (annotation != null) {
+            email.author(annotationToAuthor(annotation));
+        } else {
+            email.author(commitToAuthor(tagCommit));
+        }
+
+        list.post(email.build());
+    }
+
+    @Override
+    public void handleTagCommits(HostedRepository repository, List<Commit> commits, Tag tag) {
+        handleAnnotatedTagCommits(repository, commits, tag, null);
     }
 
     private String newBranchSubject(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch) {
         var subject = new StringBuilder();
         subject.append(repository.repositoryType().shortName());
@@ -291,14 +330,15 @@
         } else {
             printer.println("The new branch " + branch.name() + " is currently identical to the " + parent.name() + " branch.");
         }
 
         var subject = newBranchSubject(repository, commits, parent, branch);
-        var finalAuthor = author != null ? author : commits.size() > 0 ? commitsToAuthor(commits) : sender;
+        var lastCommit = commits.get(commits.size() - 1);
+
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
-                         .author(finalAuthor)
+                         .author(commitToAuthor(lastCommit))
                          .recipient(recipient)
                          .headers(headers)
                          .build();
         list.post(email);
     }
