diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
@@ -33,11 +33,11 @@
 import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
-import java.util.stream.Collectors;
+import java.util.stream.*;
 
 class JNotifyBot implements Bot, WorkItem {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
     private final HostedRepository repository;
     private final Path storagePath;
@@ -164,37 +164,52 @@
                              .map(OpenJDKTag::create)
                              .filter(Optional::isPresent)
                              .map(Optional::get)
                              .collect(Collectors.toSet());
         var newJdkTags = newTags.stream()
-                             .map(OpenJDKTag::create)
-                             .filter(Optional::isPresent)
-                             .map(Optional::get)
-                             .sorted(Comparator.comparingInt(OpenJDKTag::buildNum))
-                             .collect(Collectors.toList());
-
-        for (var tag : newJdkTags) {
+                                .map(OpenJDKTag::create)
+                                .filter(Optional::isPresent)
+                                .map(Optional::get)
+                                .sorted(Comparator.comparingInt(OpenJDKTag::buildNum))
+                                .map(OpenJDKTag::tag);
+        var newNonJdkTags = newTags.stream()
+                                   .filter(tag -> OpenJDKTag.create(tag).isEmpty());
+
+        var sortedNewTags = Stream.concat(newJdkTags, newNonJdkTags).collect(Collectors.toList());
+        for (var tag : sortedNewTags) {
             // Update the history first - if there is a problem here we don't want to send out multiple updates
-            history.addTags(List.of(tag.tag()));
+            history.addTags(List.of(tag));
 
             var commits = new ArrayList<Commit>();
-            var previous = existingPrevious(tag, allJdkTags);
-            if (previous.isEmpty()) {
-                var commit = localRepo.lookup(tag.tag());
+
+            // Try to determine which commits are new since the last build
+            var openjdkTag = OpenJDKTag.create(tag);
+            if (openjdkTag.isPresent()) {
+                var previous = existingPrevious(openjdkTag.get(), allJdkTags);
+                if (previous.isPresent()) {
+                    commits.addAll(localRepo.commits(previous.get().tag() + ".." + tag).asList());
+                }
+            }
+
+            // If none are found, just include the commit that was tagged
+            if (commits.isEmpty()) {
+                var commit = localRepo.lookup(tag);
                 if (commit.isEmpty()) {
                     throw new RuntimeException("Failed to lookup tag '" + tag.toString() + "'");
                 } else {
                     commits.add(commit.get());
-                    log.warning("No previous tag found for '" + tag.tag() + "'");
                 }
-            } else {
-                commits.addAll(localRepo.commits(previous.get().tag() + ".." + tag.tag()).asList());
             }
 
             Collections.reverse(commits);
+            var annotation = localRepo.annotate(tag);
             for (var updater : updaters) {
-                updater.handleTagCommits(repository, commits, tag);
+                if (annotation.isPresent()) {
+                    updater.handleAnnotatedTagCommits(repository, commits, tag, annotation.get());
+                } else {
+                    updater.handleTagCommits(repository, commits, tag);
+                }
             }
         }
     }
 
     private Repository fetchAll(Path dir, URI remote) throws IOException {
