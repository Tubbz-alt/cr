diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -75,21 +75,30 @@
         } else {
             return "= " + patch.target().path().orElseThrow();
         }
     }
 
-    private String commitToText(HostedRepository repository, Commit commit) {
+    private String commitToTextBrief(HostedRepository repository, Commit commit) {
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
         printer.println("Changeset: " + commit.hash().abbreviate());
         printer.println("Author:    " + commit.author().name() + " <" + commit.author().email() + ">");
         if (!commit.author().equals(commit.committer())) {
             printer.println("Committer: " + commit.committer().name() + " <" + commit.committer().email() + ">");
         }
         printer.println("Date:      " + commit.date().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss +0000")));
         printer.println("URL:       " + repository.webUrl(commit.hash()));
+
+        return writer.toString();
+    }
+
+    private String commitToText(HostedRepository repository, Commit commit) {
+        var writer = new StringWriter();
+        var printer = new PrintWriter(writer);
+
+        printer.print(commitToTextBrief(repository, commit));
         printer.println();
         printer.println(String.join("\n", commit.message()));
         printer.println();
 
         for (var diff : commit.parentDiffs()) {
@@ -103,14 +112,12 @@
 
     private String tagAnnotationToText(HostedRepository repository, Tag.Annotated annotation) {
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
-        printer.println("Changeset: " + annotation.target().abbreviate());
-        printer.println("Author:    " + annotation.author().name() + " <" + annotation.author().email() + ">");
+        printer.println("Tagged by: " + annotation.author().name() + " <" + annotation.author().email() + ">");
         printer.println("Date:      " + annotation.date().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss +0000")));
-        printer.println("URL:       " + repository.webUrl(annotation.target()));
         printer.println();
         printer.print(String.join("\n", annotation.message()));
 
         return writer.toString();
     }
@@ -246,53 +253,74 @@
                 break;
         }
     }
 
     @Override
-    public void handleAnnotatedTagCommits(HostedRepository repository, List<Commit> commits, Tag tag, Tag.Annotated annotation) {
+    public void handleOpenJDKTagCommits(HostedRepository repository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) {
         if (mode == Mode.PR_ONLY) {
             return;
         }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
+        var taggedCommit = commits.get(commits.size() - 1);
         if (annotation != null) {
             printer.println(tagAnnotationToText(repository, annotation));
         }
+        printer.println(commitToTextBrief(repository, taggedCommit));
 
-        var openjdkTag = OpenJDKTag.create(tag);
-        if (openjdkTag.isPresent()) {
-            printer.println("The following commits are included in " + tag);
-            printer.println("========================================================");
-            for (var commit : commits) {
-                printer.print(commit.hash().abbreviate());
-                if (commit.message().size() > 0) {
-                    printer.print(": " + commit.message().get(0));
-                }
-                printer.println();
+        printer.println("The following commits are included in " + tag.tag());
+        printer.println("========================================================");
+        for (var commit : commits) {
+            printer.print(commit.hash().abbreviate());
+            if (commit.message().size() > 0) {
+                printer.print(": " + commit.message().get(0));
             }
+            printer.println();
         }
 
-        var tagCommit = commits.get(commits.size() - 1);
-        var subject = tagToSubject(repository, tagCommit.hash(), tag);
+        var subject = tagToSubject(repository, taggedCommit.hash(), tag.tag());
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
                          .recipient(recipient)
                          .headers(headers);
 
         if (annotation != null) {
             email.author(annotationToAuthor(annotation));
         } else {
-            email.author(commitToAuthor(tagCommit));
+            email.author(commitToAuthor(taggedCommit));
         }
 
         list.post(email.build());
     }
 
     @Override
-    public void handleTagCommits(HostedRepository repository, List<Commit> commits, Tag tag) {
-        handleAnnotatedTagCommits(repository, commits, tag, null);
+    public void handleTagCommit(HostedRepository repository, Commit commit, Tag tag, Tag.Annotated annotation) {
+        if (mode == Mode.PR_ONLY) {
+            return;
+        }
+        var writer = new StringWriter();
+        var printer = new PrintWriter(writer);
+
+        if (annotation != null) {
+            printer.println(tagAnnotationToText(repository, annotation));
+        }
+        printer.println(commitToTextBrief(repository, commit));
+
+        var subject = tagToSubject(repository, commit.hash(), tag);
+        var email = Email.create(subject, writer.toString())
+                         .sender(sender)
+                         .recipient(recipient)
+                         .headers(headers);
+
+        if (annotation != null) {
+            email.author(annotationToAuthor(annotation));
+        } else {
+            email.author(commitToAuthor(commit));
+        }
+
+        list.post(email.build());
     }
 
     private String newBranchSubject(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch) {
         var subject = new StringBuilder();
         subject.append(repository.repositoryType().shortName());
@@ -316,11 +344,11 @@
     public void handleNewBranch(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch) {
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
         if (commits.size() > 0) {
-            printer.println("The following commits are unique to the " + branch.name() + " branch");
+            printer.println("The following commits are unique to the " + branch.name() + " branch:");
             printer.println("========================================================");
             for (var commit : commits) {
                 printer.print(commit.hash().abbreviate());
                 if (commit.message().size() > 0) {
                     printer.print(": " + commit.message().get(0));
