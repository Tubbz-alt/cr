diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
@@ -168,48 +168,57 @@
         var newJdkTags = newTags.stream()
                                 .map(OpenJDKTag::create)
                                 .filter(Optional::isPresent)
                                 .map(Optional::get)
                                 .sorted(Comparator.comparingInt(OpenJDKTag::buildNum))
-                                .map(OpenJDKTag::tag);
+                                .collect(Collectors.toList());
+
         var newNonJdkTags = newTags.stream()
-                                   .filter(tag -> OpenJDKTag.create(tag).isEmpty());
+                                   .filter(tag -> OpenJDKTag.create(tag).isEmpty())
+                                   .collect(Collectors.toList());
 
-        var sortedNewTags = Stream.concat(newJdkTags, newNonJdkTags).collect(Collectors.toList());
-        for (var tag : sortedNewTags) {
+        for (var tag : newJdkTags) {
             // Update the history first - if there is a problem here we don't want to send out multiple updates
-            history.addTags(List.of(tag));
+            history.addTags(List.of(tag.tag()));
 
             var commits = new ArrayList<Commit>();
 
             // Try to determine which commits are new since the last build
-            var openjdkTag = OpenJDKTag.create(tag);
-            if (openjdkTag.isPresent()) {
-                var previous = existingPrevious(openjdkTag.get(), allJdkTags);
-                if (previous.isPresent()) {
-                    commits.addAll(localRepo.commits(previous.get().tag() + ".." + tag).asList());
-                }
+            var previous = existingPrevious(tag, allJdkTags);
+            if (previous.isPresent()) {
+                commits.addAll(localRepo.commits(previous.get().tag() + ".." + tag.tag()).asList());
             }
 
             // If none are found, just include the commit that was tagged
             if (commits.isEmpty()) {
-                var commit = localRepo.lookup(tag);
+                var commit = localRepo.lookup(tag.tag());
                 if (commit.isEmpty()) {
                     throw new RuntimeException("Failed to lookup tag '" + tag.toString() + "'");
                 } else {
                     commits.add(commit.get());
                 }
             }
 
             Collections.reverse(commits);
+            var annotation = localRepo.annotate(tag.tag());
+            for (var updater : updaters) {
+                updater.handleOpenJDKTagCommits(repository, commits, tag, annotation.orElse(null));
+            }
+        }
+
+        for (var tag : newNonJdkTags) {
+            // Update the history first - if there is a problem here we don't want to send out multiple updates
+            history.addTags(List.of(tag));
+
+            var commit = localRepo.lookup(tag);
+            if (commit.isEmpty()) {
+                throw new RuntimeException("Failed to lookup tag '" + tag.toString() + "'");
+            }
+
             var annotation = localRepo.annotate(tag);
             for (var updater : updaters) {
-                if (annotation.isPresent()) {
-                    updater.handleAnnotatedTagCommits(repository, commits, tag, annotation.get());
-                } else {
-                    updater.handleTagCommits(repository, commits, tag);
-                }
+                updater.handleTagCommit(repository, commit.get(), tag, annotation.orElse(null));
             }
         }
     }
 
     private Repository fetchAll(Path dir, URI remote) throws IOException {
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
@@ -84,16 +84,12 @@
             }
         }
     }
 
     @Override
-    public void handleTagCommits(HostedRepository repository, List<Commit> commits, Tag tag) {
-        var openjdkTag = OpenJDKTag.create(tag);
-        if (openjdkTag.isEmpty()) {
-            return;
-        }
-        var build = String.format("b%02d", openjdkTag.get().buildNum());
+    public void handleOpenJDKTagCommits(HostedRepository repository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) {
+        var build = String.format("b%02d", tag.buildNum());
         try (var writer = new JsonUpdateWriter(path, repository.name())) {
             var issues = new ArrayList<Issue>();
             for (var commit : commits) {
                 var parsedMessage = CommitMessageParsers.v1.parse(commit);
                 issues.addAll(parsedMessage.issues());
@@ -102,14 +98,12 @@
             writer.write(json);
         }
     }
 
     @Override
-    public void handleAnnotatedTagCommits(HostedRepository repository, List<Commit> commits, Tag tag, Tag.Annotated annotation) {
-        handleTagCommits(repository, commits, tag);
+    public void handleTagCommit(HostedRepository repository, Commit commit, Tag tag, Tag.Annotated annotation) {
     }
 
     @Override
     public void handleNewBranch(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch) {
-
     }
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -75,21 +75,30 @@
         } else {
             return "= " + patch.target().path().orElseThrow();
         }
     }
 
-    private String commitToText(HostedRepository repository, Commit commit) {
+    private String commitToTextBrief(HostedRepository repository, Commit commit) {
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
         printer.println("Changeset: " + commit.hash().abbreviate());
         printer.println("Author:    " + commit.author().name() + " <" + commit.author().email() + ">");
         if (!commit.author().equals(commit.committer())) {
             printer.println("Committer: " + commit.committer().name() + " <" + commit.committer().email() + ">");
         }
         printer.println("Date:      " + commit.date().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss +0000")));
         printer.println("URL:       " + repository.webUrl(commit.hash()));
+
+        return writer.toString();
+    }
+
+    private String commitToText(HostedRepository repository, Commit commit) {
+        var writer = new StringWriter();
+        var printer = new PrintWriter(writer);
+
+        printer.print(commitToTextBrief(repository, commit));
         printer.println();
         printer.println(String.join("\n", commit.message()));
         printer.println();
 
         for (var diff : commit.parentDiffs()) {
@@ -103,14 +112,12 @@
 
     private String tagAnnotationToText(HostedRepository repository, Tag.Annotated annotation) {
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
-        printer.println("Changeset: " + annotation.target().abbreviate());
-        printer.println("Author:    " + annotation.author().name() + " <" + annotation.author().email() + ">");
+        printer.println("Tagged by: " + annotation.author().name() + " <" + annotation.author().email() + ">");
         printer.println("Date:      " + annotation.date().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss +0000")));
-        printer.println("URL:       " + repository.webUrl(annotation.target()));
         printer.println();
         printer.print(String.join("\n", annotation.message()));
 
         return writer.toString();
     }
@@ -246,53 +253,74 @@
                 break;
         }
     }
 
     @Override
-    public void handleAnnotatedTagCommits(HostedRepository repository, List<Commit> commits, Tag tag, Tag.Annotated annotation) {
+    public void handleOpenJDKTagCommits(HostedRepository repository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) {
         if (mode == Mode.PR_ONLY) {
             return;
         }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
+        var taggedCommit = commits.get(commits.size() - 1);
         if (annotation != null) {
             printer.println(tagAnnotationToText(repository, annotation));
         }
+        printer.println(commitToTextBrief(repository, taggedCommit));
 
-        var openjdkTag = OpenJDKTag.create(tag);
-        if (openjdkTag.isPresent()) {
-            printer.println("The following commits are included in " + tag);
-            printer.println("========================================================");
-            for (var commit : commits) {
-                printer.print(commit.hash().abbreviate());
-                if (commit.message().size() > 0) {
-                    printer.print(": " + commit.message().get(0));
-                }
-                printer.println();
+        printer.println("The following commits are included in " + tag.tag());
+        printer.println("========================================================");
+        for (var commit : commits) {
+            printer.print(commit.hash().abbreviate());
+            if (commit.message().size() > 0) {
+                printer.print(": " + commit.message().get(0));
             }
+            printer.println();
         }
 
-        var tagCommit = commits.get(commits.size() - 1);
-        var subject = tagToSubject(repository, tagCommit.hash(), tag);
+        var subject = tagToSubject(repository, taggedCommit.hash(), tag.tag());
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
                          .recipient(recipient)
                          .headers(headers);
 
         if (annotation != null) {
             email.author(annotationToAuthor(annotation));
         } else {
-            email.author(commitToAuthor(tagCommit));
+            email.author(commitToAuthor(taggedCommit));
         }
 
         list.post(email.build());
     }
 
     @Override
-    public void handleTagCommits(HostedRepository repository, List<Commit> commits, Tag tag) {
-        handleAnnotatedTagCommits(repository, commits, tag, null);
+    public void handleTagCommit(HostedRepository repository, Commit commit, Tag tag, Tag.Annotated annotation) {
+        if (mode == Mode.PR_ONLY) {
+            return;
+        }
+        var writer = new StringWriter();
+        var printer = new PrintWriter(writer);
+
+        if (annotation != null) {
+            printer.println(tagAnnotationToText(repository, annotation));
+        }
+        printer.println(commitToTextBrief(repository, commit));
+
+        var subject = tagToSubject(repository, commit.hash(), tag);
+        var email = Email.create(subject, writer.toString())
+                         .sender(sender)
+                         .recipient(recipient)
+                         .headers(headers);
+
+        if (annotation != null) {
+            email.author(annotationToAuthor(annotation));
+        } else {
+            email.author(commitToAuthor(commit));
+        }
+
+        list.post(email.build());
     }
 
     private String newBranchSubject(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch) {
         var subject = new StringBuilder();
         subject.append(repository.repositoryType().shortName());
@@ -316,11 +344,11 @@
     public void handleNewBranch(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch) {
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
         if (commits.size() > 0) {
-            printer.println("The following commits are unique to the " + branch.name() + " branch");
+            printer.println("The following commits are unique to the " + branch.name() + " branch:");
             printer.println("========================================================");
             for (var commit : commits) {
                 printer.print(commit.hash().abbreviate());
                 if (commit.message().size() > 0) {
                     printer.print(": " + commit.message().get(0));
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateConsumer.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateConsumer.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateConsumer.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/UpdateConsumer.java
@@ -22,14 +22,22 @@
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.vcs.openjdk.OpenJDKTag;
 
 import java.util.List;
 
 public interface UpdateConsumer {
     void handleCommits(HostedRepository repository, List<Commit> commits, Branch branch);
-    void handleTagCommits(HostedRepository repository, List<Commit> commits, Tag tag);
-    void handleAnnotatedTagCommits(HostedRepository repository, List<Commit> commits, Tag tag, Tag.Annotated annotation);
+    void handleOpenJDKTagCommits(HostedRepository repository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated);
+    void handleTagCommit(HostedRepository repository, Commit commit, Tag tag, Tag.Annotated annotation);
     void handleNewBranch(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch);
+
+    default void handleOpenJDKTagCommits(HostedRepository repository, List<Commit> commits, OpenJDKTag tag) {
+        handleOpenJDKTagCommits(repository, commits, tag, null);
+    }
+    default void handleTagCommit(HostedRepository repository, Commit commit, Tag tag) {
+        handleTagCommit(repository, commit, tag, null);
+    }
 }
