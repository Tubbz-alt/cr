diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -517,11 +517,15 @@
                 System.out.println(pr.webUrl().toString());
                 Files.deleteIfExists(file);
 
                 System.exit(0);
             }
-            var currentBranch = repo.currentBranch();
+            var currentBranch = repo.currentBranch().orElseGet(() -> {
+                    System.err.println("error: the repository is in a detached HEAD state");
+                    System.exit(1);
+                    return null;
+            });
             if (currentBranch.equals(repo.defaultBranch())) {
                 System.err.println("error: you should not create pull requests from the 'master' branch");
                 System.err.println("");
                 System.err.println("To create a local branch for your changes and restore the 'master' branch, run:");
                 System.err.println("");
diff a/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java b/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java
@@ -83,8 +83,13 @@
 
         var cwd = Path.of("").toAbsolutePath();
         var repo = Repository.get(cwd).or(die("error: no repository found at " + cwd.toString())).get();
         var remote = arguments.at(0).orString("origin");
 
-        System.exit(pushAndTrack(remote, repo.currentBranch()));
+        var currentBranch = repo.currentBranch();
+        if (currentBranch.isEmpty()) {
+            System.err.println("error: the repository is in a detached HEAD state");
+            System.exit(1);
+        }
+        System.exit(pushAndTrack(remote, repo.currentBranch().get()));
     }
 }
diff a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
@@ -204,19 +204,22 @@
             }
             issue = "https://bugs.openjdk.java.net/browse/" + issue;
         }
         if (issue == null) {
             var pattern = Pattern.compile("(?:(JDK|CODETOOLS|JMC)-)?([0-9]+).*");
-            var branch = repo.currentBranch().name().toUpperCase();
-            var m = pattern.matcher(branch);
-            if (m.matches()) {
-                var project = m.group(1);
-                if (project == null) {
-                    project = "JDK";
+            var currentBranch = repo.currentBranch();
+            if (currentBranch.isPresent()) {
+                var branchName = currentBranch.get().name().toUpperCase();
+                var m = pattern.matcher(branchName);
+                if (m.matches()) {
+                    var project = m.group(1);
+                    if (project == null) {
+                        project = "JDK";
+                    }
+                    var id = m.group(2);
+                    issue = "https://bugs.openjdk.java.net/browse/" + project + "-" + id;
                 }
-                var id = m.group(2);
-                issue = "https://bugs.openjdk.java.net/browse/" + project + "-" + id;
             }
         }
 
         var out = arg("output", arguments, repo);
         if (out == null) {
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
@@ -34,12 +34,12 @@
     private List<Branch> branches = new ArrayList<Branch>();
 
     private Tag defaultTag = null;
     private List<Tag> tags = new ArrayList<Tag>();
 
-    public Branch currentBranch() throws IOException {
-        return currentBranch;
+    public Optional<Branch> currentBranch() throws IOException {
+        return Optional.empty();
     }
 
     void setCurrentBranch(Branch branch) {
         currentBranch = branch;
     }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
@@ -28,11 +28,11 @@
 import java.util.stream.Collectors;
 import java.util.*;
 
 public interface ReadOnlyRepository {
     Hash head() throws IOException;
-    Branch currentBranch() throws IOException;
+    Optional<Branch> currentBranch() throws IOException;
     Optional<Bookmark> currentBookmark() throws IOException;
     Branch defaultBranch() throws IOException;
     List<Branch> branches() throws IOException;
     Optional<Tag> defaultTag() throws IOException;
     List<Tag> tags() throws IOException;
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -659,17 +659,17 @@
             return Optional.empty();
         }
     }
 
     @Override
-    public Branch currentBranch() throws IOException {
+    public Optional<Branch> currentBranch() throws IOException {
         try (var p = capture("git", "symbolic-ref", "--short", "HEAD")) {
-            var res = await(p);
-            if (res.stdout().size() != 1) {
-                throw new IOException("Unexpected output\n" + res);
+            var res = p.await();
+            if (res.status() == 0 && res.stdout().size() == 1) {
+                return Optional.of(new Branch(res.stdout().get(0)));
             }
-            return new Branch(res.stdout().get(0));
+            return Optional.empty();
         }
     }
 
     @Override
     public Optional<Bookmark> currentBookmark() throws IOException {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -597,25 +597,27 @@
         throw new RuntimeException("Not implemented yet");
     }
 
     @Override
     public void rebase(Hash hash, String committerName, String committerEmail) throws IOException {
-        var current = currentBranch().name();
+        var current = currentBranch().orElseThrow(() ->
+                new IOException("No current branch to rebase upon")
+        );
         try (var p = capture("hg", "--config", "extensions.rebase=",
-                             "rebase", "--dest", hash.hex(), "--base", current)) {
+                             "rebase", "--dest", hash.hex(), "--base", current.name())) {
             await(p);
         }
     }
 
     @Override
-    public Branch currentBranch() throws IOException {
+    public Optional<Branch> currentBranch() throws IOException {
         try (var p = capture("hg", "branch")) {
             var res = await(p);
             if (res.stdout().size() != 1) {
-                throw new IllegalStateException("No current branch\n" + res);
+                return Optional.empty();
             }
-            return new Branch(res.stdout().get(0));
+            return Optional.of(new Branch(res.stdout().get(0)));
         }
     }
 
     @Override
     public Optional<Bookmark> currentBookmark() throws IOException {
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -154,11 +154,11 @@
     @ParameterizedTest
     @EnumSource(VCS.class)
     void testCurrentBranchOnEmptyRepository(VCS vcs) throws IOException {
         try (var dir = new TemporaryDirectory()) {
             var r = Repository.init(dir.path(), vcs);
-            assertEquals(r.defaultBranch(), r.currentBranch());
+            assertEquals(r.defaultBranch(), r.currentBranch().get());
         }
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
