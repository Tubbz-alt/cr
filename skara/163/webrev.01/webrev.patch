diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/ChecksConfiguration.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/ChecksConfiguration.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/ChecksConfiguration.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/ChecksConfiguration.java
@@ -33,31 +33,35 @@
         new ChecksConfiguration(List.of(),
                                 List.of(),
                                 WhitespaceConfiguration.DEFAULT,
                                 ReviewersConfiguration.DEFAULT,
                                 MergeConfiguration.DEFAULT,
-                                CommitterConfiguration.DEFAULT);
+                                CommitterConfiguration.DEFAULT,
+                                IssuesConfiguration.DEFAULT);
 
     private final List<String> error;
     private final List<String> warning;
     private final WhitespaceConfiguration whitespace;
     private final ReviewersConfiguration reviewers;
     private final MergeConfiguration merge;
     private final CommitterConfiguration committer;
+    private final IssuesConfiguration issues;
 
     ChecksConfiguration(List<String> error,
                         List<String> warning,
                         WhitespaceConfiguration whitespace,
                         ReviewersConfiguration reviewers,
                         MergeConfiguration merge,
-                        CommitterConfiguration committer) {
+                        CommitterConfiguration committer,
+                        IssuesConfiguration issues) {
         this.error = error;
         this.warning = warning;
         this.whitespace = whitespace;
         this.reviewers = reviewers;
         this.merge = merge;
+        this.issues = issues;
     }
 
     public List<String> error() {
         return error;
     }
@@ -98,10 +102,14 @@
 
     public CommitterConfiguration committer() {
         return committer;
     }
 
+    public IssuesConfiguration issues() {
+        return issues;
+    }
+
     static String name() {
         return "checks";
     }
 
     static ChecksConfiguration parse(Section s) {
@@ -114,9 +122,10 @@
 
         var whitespace = WhitespaceConfiguration.parse(s.subsection(WhitespaceConfiguration.name()));
         var reviewers = ReviewersConfiguration.parse(s.subsection(ReviewersConfiguration.name()));
         var merge = MergeConfiguration.parse(s.subsection(MergeConfiguration.name()));
         var committer = CommitterConfiguration.parse(s.subsection(CommitterConfiguration.name()));
+        var issues = IssuesConfiguration.parse(s.subsection(IssuesConfiguration.name()));
 
-        return new ChecksConfiguration(error, warning, whitespace, reviewers, merge, committer);
+        return new ChecksConfiguration(error, warning, whitespace, reviewers, merge, committer, issues);
     }
 }
diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesCheck.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesCheck.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesCheck.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesCheck.java
@@ -25,10 +25,11 @@
 import org.openjdk.skara.vcs.Commit;
 import org.openjdk.skara.vcs.openjdk.CommitMessage;
 
 import java.util.Iterator;
 import java.util.logging.Logger;
+import java.util.regex.Pattern;
 
 public class IssuesCheck extends CommitCheck {
     private final Logger log = Logger.getLogger("org.openjdk.skara.jcheck.issues");
     private final Utilities utils;
 
@@ -40,16 +41,23 @@
     Iterator<Issue> check(Commit commit, CommitMessage message, JCheckConfiguration conf) {
         if (commit.isMerge() || utils.addsHgTag(commit)) {
             return iterator();
         }
 
+        var metadata = CommitIssue.metadata(commit, message, conf, this);
         if (commit.message().isEmpty() || message.issues().isEmpty()) {
-            var metadata = CommitIssue.metadata(commit, message, conf, this);
-            log.finer("isuse: no reference to a JBS issue");
+            log.finer("issue: no reference to a JBS issue");
             return iterator(new IssuesIssue(metadata));
         }
 
+        var pattern = Pattern.compile(conf.checks().issues().pattern());
+        for (var issue : message.issues()) {
+            if (!pattern.matcher(issue.toString()).matches()) {
+                return iterator(new IssuesIssue(metadata));
+            }
+        }
+
         return iterator();
     }
 
     @Override
     public String name() {
diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesConfiguration.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesConfiguration.java
--- /dev/null
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesConfiguration.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.jcheck;
+
+import org.openjdk.skara.ini.Section;
+
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+public class IssuesConfiguration {
+    static final IssuesConfiguration DEFAULT =
+        new IssuesConfiguration("^(([A-Z][A-Z0-9]+-)?[0-9]+): (\\S.*)$");
+
+    private final String pattern;
+
+    IssuesConfiguration(String pattern) {
+        this.pattern = pattern;
+    }
+
+    public String pattern() {
+        return pattern;
+    }
+
+    static String name() {
+        return "issues";
+    }
+
+    static IssuesConfiguration parse(Section s) {
+        if (s == null) {
+            return DEFAULT;
+        }
+
+        var pattern = s.get("pattern", DEFAULT.pattern());
+        return new IssuesConfiguration(pattern);
+    }
+}
diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheckConfiguration.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheckConfiguration.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheckConfiguration.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheckConfiguration.java
@@ -123,10 +123,13 @@
         config.add("ignore=duke");
 
         config.add("[checks \"committer\"]");
         config.add("role=contributor");
 
+        config.add("[checks \"issues\"]");
+        config.add("pattern=^([124-8][0-9]{6}): (\\S.*)$");
+
         return INI.parse(config);
     }
 
     public static JCheckConfiguration parse(List<String> lines) {
         var ini = INI.parse(lines);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java
@@ -39,21 +39,46 @@
 import java.io.IOException;
 
 class IssuesCheckTests {
     private final Utilities utils = new Utilities();
 
+    // Default issue pattern: optional prefix followed by 1 or more digits
     private static final List<String> CONFIGURATION = List.of(
         "[general]",
         "project = test",
         "[checks]",
         "error = issues"
+    // Issue pattern with a required prefix
+    private static final List<String> CONFIGURATION2 = List.of(
+        "[general]",
+        "project = test",
+        "[checks]",
+        "error = issues",
+        "[checks \"issues\"]",
+        "pattern = ^(PROJ-[1-9][0-9]+): (\\S.*)$"
+    );
+
+    // Default issue pattern for legacy conf: 7 digit starting with [124-8]
+    private static final List<String> CONFIGURATION3 = List.of(
+        "project=jdk",
+        "bugids=dup"
+    );
+
     private static JCheckConfiguration conf() {
         return JCheckConfiguration.parse(CONFIGURATION);
     }
 
+
+    private static JCheckConfiguration conf2() {
+        return JCheckConfiguration.parse(CONFIGURATION2);
+    }
+
+    private static JCheckConfiguration conf3() {
+        return JCheckConfiguration.parse(CONFIGURATION3);
+    }
     private static Commit commit(List<String> message) {
         var author = new Author("foo", "foo@host.org");
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(hash);
         var date = ZonedDateTime.now();
@@ -89,20 +114,232 @@
         assertEquals(check.getClass(), issue.check().getClass());
     }
 
     @Test
     void singleIssueReferenceShouldPass() {
-        var commit = commit(List.of("0123457: A bug"));
+        var commit = commit(List.of("1234570: A bug"));
         var check = new IssuesCheck(utils);
         var issues = toList(check.check(commit, message(commit), conf()));
         assertEquals(0, issues.size());
     }
 
     @Test
     void multipleIssueReferencesShouldPass() {
-        var commit = commit(List.of("0123457: A bug", "12345678: Another bug"));
+        var commit = commit(List.of("1234570: A bug", "1234567: Another bug"));
         var message = message(commit);
         var check = new IssuesCheck(utils);
         var issues = toList(check.check(commit, message, conf()));
         assertEquals(0, issues.size());
     }
+
+    @Test
+    void issueWithLeadingZeroShouldPass() {
+        var commit = commit(List.of("0123456: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf()));
+
+        assertEquals(0, issues.size());
+    }
+
+    @Test
+    void issueWithTooFewDigitsShouldPass() {
+        var commit = commit(List.of("123456: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf()));
+
+        assertEquals(0, issues.size());
+    }
+
+    @Test
+    void issueWithTooManyDigitsShouldPass() {
+        var commit = commit(List.of("12345678: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf()));
+
+        assertEquals(0, issues.size());
+    }
+
+    @Test
+    void issueWithPrefixShouldPass() {
+        var commit = commit(List.of("JDK-7654321: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf()));
+
+        assertEquals(0, issues.size());
+    }
+
+    @Test
+    void issueWithPrefixConf2ShouldPass() {
+        var commit = commit(List.of("PROJ-1234567: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf2()));
+
+        assertEquals(0, issues.size());
+    }
+
+    @Test
+    void issueWithoutPrefixConf2ShouldFail() {
+        var commit = commit(List.of("1234567: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf2()));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof IssuesIssue);
+        var issue = (IssuesIssue) issues.get(0);
+        assertEquals(commit, issue.commit());
+        assertEquals(message, issue.message());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check.getClass(), issue.check().getClass());
+    }
+
+    @Test
+    void issueWithBadPrefixConf2ShouldFail() {
+        var commit = commit(List.of("JDK-1234567: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf2()));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof IssuesIssue);
+        var issue = (IssuesIssue) issues.get(0);
+        assertEquals(commit, issue.commit());
+        assertEquals(message, issue.message());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check.getClass(), issue.check().getClass());
+    }
+
+    @Test
+    void singleIssueReferenceConf3ShouldPass() {
+        var commit = commit(List.of("1234570: A bug"));
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message(commit), conf3()));
+        assertEquals(0, issues.size());
+    }
+
+    @Test
+    void multipleIssueReferencesConf3ShouldPass() {
+        var commit = commit(List.of("1234570: A bug", "1234567: Another bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf3()));
+        assertEquals(0, issues.size());
+    }
+
+    @Test
+    void issueWithLeadingZeroConf3ShouldFail() {
+        var commit = commit(List.of("0123456: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf3()));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof IssuesIssue);
+        var issue = (IssuesIssue) issues.get(0);
+        assertEquals(commit, issue.commit());
+        assertEquals(message, issue.message());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check.getClass(), issue.check().getClass());
+    }
+
+    @Test
+    void issueWithLeadingNineConf3ShouldFail() {
+        var commit = commit(List.of("9876543: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf3()));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof IssuesIssue);
+        var issue = (IssuesIssue) issues.get(0);
+        assertEquals(commit, issue.commit());
+        assertEquals(message, issue.message());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check.getClass(), issue.check().getClass());
+    }
+
+    @Test
+    void issueWithTooFewDigitsConf3ShouldFail() {
+        var commit = commit(List.of("123456: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf3()));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof IssuesIssue);
+        var issue = (IssuesIssue) issues.get(0);
+        assertEquals(commit, issue.commit());
+        assertEquals(message, issue.message());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check.getClass(), issue.check().getClass());
+    }
+
+    @Test
+    void issueWithTooManyDigitsConf3ShouldFail() {
+        var commit = commit(List.of("12345678: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf3()));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof IssuesIssue);
+        var issue = (IssuesIssue) issues.get(0);
+        assertEquals(commit, issue.commit());
+        assertEquals(message, issue.message());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check.getClass(), issue.check().getClass());
+    }
+
+    @Test
+    void issueWithPrefixConf3ShouldFail() {
+        var commit = commit(List.of("JDK-7654321: A bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf3()));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof IssuesIssue);
+        var issue = (IssuesIssue) issues.get(0);
+        assertEquals(commit, issue.commit());
+        assertEquals(message, issue.message());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check.getClass(), issue.check().getClass());
+    }
+
+    @Test
+    void multipleIssueReferencesFirstBadConf3ShouldFail() {
+        var commit = commit(List.of("12345: A bug", "1234567: Another bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf3()));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof IssuesIssue);
+        var issue = (IssuesIssue) issues.get(0);
+        assertEquals(commit, issue.commit());
+        assertEquals(message, issue.message());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check.getClass(), issue.check().getClass());
+    }
+
+    @Test
+    void multipleIssueReferencesLastBadConf3ShouldFail() {
+        var commit = commit(List.of("1234567: A bug", "012: Another bug"));
+        var message = message(commit);
+        var check = new IssuesCheck(utils);
+        var issues = toList(check.check(commit, message, conf3()));
+
+        assertEquals(1, issues.size());
+        assertTrue(issues.get(0) instanceof IssuesIssue);
+        var issue = (IssuesIssue) issues.get(0);
+        assertEquals(commit, issue.commit());
+        assertEquals(message, issue.message());
+        assertEquals(Severity.ERROR, issue.severity());
+        assertEquals(check.getClass(), issue.check().getClass());
+    }
+
 }
