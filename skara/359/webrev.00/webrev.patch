diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
@@ -148,10 +148,11 @@
     private void awaitPublication(URI uri, Duration timeout) throws IOException {
         var end = Instant.now().plus(timeout);
         var uriBuilder = URIBuilder.base(uri);
         var client = HttpClient.newBuilder()
                                .connectTimeout(Duration.ofSeconds(30))
+                               .followRedirects(HttpClient.Redirect.NORMAL)
                                .build();
         while (Instant.now().isBefore(end)) {
             var uncachedUri = uriBuilder.setQuery(Map.of("nocache", UUID.randomUUID().toString())).build();
             var request = HttpRequest.newBuilder(uncachedUri)
                                      .timeout(Duration.ofSeconds(30))
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/WebrevStorageTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/WebrevStorageTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/WebrevStorageTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/WebrevStorageTests.java
@@ -68,12 +68,13 @@
             var prRepo = Repository.materialize(prFolder, pr.repository().url(), "edit");
             var scratchFolder = tempFolder.path().resolve("scratch");
             var generator = storage.generator(pr, prRepo, scratchFolder);
             generator.generate(masterHash, editHash, "00");
 
-            // Check that the web link has been verified now
+            // Check that the web link has been verified now and followed the redirect
             assertTrue(webrevServer.isChecked());
+            assertTrue(webrevServer.isRedirectFollowed());
 
             // Update the local repository and check that the webrev has been generated
             Repository.materialize(repoFolder, archive.url(), "webrev");
             assertTrue(Files.exists(repoFolder.resolve("test/" + pr.id() + "/webrev.00/index.html")));
 
diff a/test/src/main/java/org/openjdk/skara/test/TestWebrevServer.java b/test/src/main/java/org/openjdk/skara/test/TestWebrevServer.java
--- a/test/src/main/java/org/openjdk/skara/test/TestWebrevServer.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestWebrevServer.java
@@ -30,21 +30,28 @@
 import java.nio.charset.StandardCharsets;
 
 public class TestWebrevServer implements AutoCloseable {
     private final HttpServer httpServer;
     private boolean checked = false;
+    private boolean redirectFollowed = true;
 
     private class Handler implements HttpHandler {
         @Override
         public void handle(HttpExchange exchange) throws IOException {
+            checked = true;
             var response = "ok!";
             var responseBytes = response.getBytes(StandardCharsets.UTF_8);
-            exchange.sendResponseHeaders(200, responseBytes.length);
+            if (!exchange.getRequestURI().toString().contains("final=true")) {
+                exchange.getResponseHeaders().add("Location", exchange.getRequestURI().toString() + "&final=true");
+                exchange.sendResponseHeaders(302, responseBytes.length);
+            } else {
+                redirectFollowed = true;
+                exchange.sendResponseHeaders(200, responseBytes.length);
+            }
             OutputStream outputStream = exchange.getResponseBody();
             outputStream.write(responseBytes);
             outputStream.close();
-            checked = true;
         }
     }
 
     public TestWebrevServer() throws IOException {
         InetSocketAddress address = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);
@@ -60,10 +67,14 @@
 
     public boolean isChecked() {
         return checked;
     }
 
+    public boolean isRedirectFollowed() {
+        return redirectFollowed;
+    }
+
     @Override
     public void close() throws IOException {
         httpServer.stop(0);
     }
 }
