diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -448,10 +448,11 @@
 
     private void checkStatus() {
         var checkBuilder = CheckBuilder.create("jcheck", pr.headHash());
         checkBuilder.title("Required");
         var censusDomain = censusInstance.configuration().census().domain();
+        Exception checkException = null;
 
         try {
             // Post check in-progress
             log.info("Starting to run jcheck on PR head");
             pr.createCheck(checkBuilder.build());
@@ -511,15 +512,15 @@
             var metadata = workItem.getMetadata(pr.title(), updatedBody, pr.comments(), activeReviews, newLabels, censusInstance, pr.targetHash());
             checkBuilder.metadata(metadata);
         } catch (Exception e) {
             log.throwing("CommitChecker", "checkStatus", e);
             newLabels.remove("ready");
-            var metadata = workItem.getMetadata(pr.title(), pr.body(), pr.comments(), activeReviews, newLabels, censusInstance, pr.targetHash());
-            checkBuilder.metadata(metadata);
-            checkBuilder.title("Exception occurred during jcheck");
+            checkBuilder.metadata("invalid");
+            checkBuilder.title("Exception occurred during jcheck - the operation will be retried");
             checkBuilder.summary(e.getMessage());
             checkBuilder.complete(false);
+            checkException = e;
         }
         var check = checkBuilder.build();
         pr.updateCheck(check);
 
         // Synchronize the wanted set of labels
@@ -531,7 +532,12 @@
         for (var oldLabel : labels) {
             if (!newLabels.contains(oldLabel)) {
                 pr.removeLabel(oldLabel);
             }
         }
+
+        // After updating the PR, rethrow any exception to automatically retry on transient errors
+        if (checkException != null) {
+            throw new RuntimeException("Exception during jcheck", checkException);
+        }
     }
 }
