diff a/cli/src/main/java/org/openjdk/skara/cli/GitSync.java b/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
@@ -239,10 +239,11 @@
         }
         if (shouldFastForward) {
             if (!remotes.contains(to)) {
                 die("error: --fast-forward can only be used when --to is the name of a remote");
             }
+            repo.fetchRemote(to);
 
             var remoteBranchNames = new HashSet<String>();
             for (var branch : remoteBranches) {
                 remoteBranchNames.add(to + "/" + branch.name());
             }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -42,10 +42,11 @@
     default void checkout(Branch b) throws IOException {
         checkout(b, false);
     }
     Hash fetch(URI uri, String refspec) throws IOException;
     void fetchAll() throws IOException;
+    void fetchRemote(String remote) throws IOException;
     void pushAll(URI uri) throws IOException;
     void push(Hash hash, URI uri, String ref, boolean force) throws IOException;
     void push(Branch branch, String remote, boolean setUpstream) throws IOException;
     void clean() throws IOException;
     void reset(Hash target, boolean hard) throws IOException;
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -341,10 +341,17 @@
         try (var p = capture("git", "fetch", "--recurse-submodules=on-demand", "--tags", "--prune", "--prune-tags", "--all")) {
             await(p);
         }
     }
 
+    @Override
+    public void fetchRemote(String remote) throws IOException {
+        try (var p = capture("git", "fetch", "--recurse-submodules=on-demand", "--tags", "--prune", "--prune-tags", remote)) {
+            await(p);
+        }
+    }
+
     private void checkout(String ref, boolean force) throws IOException {
         var cmd = new ArrayList<String>();
         cmd.addAll(List.of("git", "-c", "advice.detachedHead=false", "checkout", "--recurse-submodules"));
         if (force) {
             cmd.add("--force");
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -333,21 +333,25 @@
         return init();
     }
 
     @Override
     public Hash fetch(URI uri, String refspec) throws IOException {
+        return fetch(uri != null ? uri.toString() : null, refspec);
+    }
+
+    private Hash fetch(String from, String refspec) throws IOException {
         var oldHeads = new HashSet<Hash>(heads());
 
         var cmd = new ArrayList<String>();
         cmd.add("hg");
         cmd.add("pull");
         if (refspec != null) {
             cmd.add("--rev");
             cmd.add(refspec);
         }
-        if (uri != null) {
-            cmd.add(uri.toString());
+        if (from != null) {
+            cmd.add(from);
         }
         try (var p = capture(cmd)) {
             await(p);
         }
 
@@ -381,10 +385,15 @@
         for (var uri : pullPaths) {
             fetch(uri, null);
         }
     }
 
+    @Override
+    public void fetchRemote(String remote) throws IOException {
+        fetch(remote, null);
+    }
+
     @Override
     public void delete(Branch b) throws IOException {
         throw new RuntimeException("Branches cannot be deleted in Mercurial");
     }
 
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -2003,6 +2003,29 @@
             assertEquals(List.of(), repo.config("test.key"));
             repo.config("test", "key", "value");
             assertEquals(List.of("value"), repo.config("test.key"));
         }
     }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testFetchRemote(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var upstream = Repository.init(dir.path(), vcs);
+            var readme = dir.path().resolve("README");
+            Files.write(readme, List.of("Hello, readme!"));
+
+            upstream.add(readme);
+            upstream.commit("Add README", "duke", "duke@openjdk.java.net");
+
+            try (var dir2 = new TemporaryDirectory()) {
+                var downstream = Repository.init(dir2.path(), vcs);
+
+                 // note: forcing unix path separators for URI
+                var upstreamURI = URI.create("file:///" + dir.toString().replace('\\', '/'));
+                downstream.addRemote("upstream", upstreamURI.toString());
+                downstream.addRemote("foobar", "file:///this/path/does/not/exist");
+                downstream.fetchRemote("upstream");
+            }
+        }
+    }
 }
