diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -225,12 +225,11 @@
             }
         }
 
         var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve("census"), pr);
         var prInstance = new PullRequestInstance(scratchPath.resolve("mlbridge-mergebase"), pr);
-        var reviewArchive = new ReviewArchive(bot.emailAddress(), prInstance, sentMails,
-                                              " via " + pr.repository().getUrl().getHost());
+        var reviewArchive = new ReviewArchive(bot.emailAddress(), prInstance, census, sentMails);
         var webrevPath = scratchPath.resolve("mlbridge-webrevs");
         var listServer = MailingListServerFactory.createMailmanServer(bot.listArchive(), bot.smtpServer());
         var list = listServer.getList(bot.listAddress().address());
 
         // First post
@@ -278,11 +277,11 @@
         var reviews = pr.getReviews();
         for (var review : reviews) {
             if (ignoreComment(review.reviewer(), review.body().orElse(""))) {
                 continue;
             }
-            reviewArchive.addReview(review, census);
+            reviewArchive.addReview(review);
         }
 
         // File specific comments
         var reviewComments = pr.getReviewComments();
         for (var reviewComment : reviewComments) {
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBot.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBot.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBot.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBot.java
@@ -98,20 +98,21 @@
 
         for (var newMessage : newMessages) {
             parsedEmailIds.add(newMessage.id());
         }
 
-        // Filter out bridged comments
+        var pr = parsedConversations.get(conversation.first().id());
+        var bridgeIdPattern = Pattern.compile("^[^.]+\\.[^.]+@" + pr.repository().getUrl().getHost() + "$");
+
+        // Filter out already bridged comments
         var bridgeCandidates = newMessages.stream()
-                .filter(email -> !email.author().address().equals(archivePoster.address()))
+                .filter(email -> !bridgeIdPattern.matcher(email.id().address()).matches())
                 .collect(Collectors.toList());
-
         if (bridgeCandidates.isEmpty()) {
             return;
         }
 
-        var pr = parsedConversations.get(conversation.first().id());
         var workItem = new CommentPosterWorkItem(pr, bridgeCandidates);
         commentQueue.add(workItem);
     }
 
     @Override
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -12,22 +12,28 @@
 import java.util.*;
 import java.util.stream.*;
 
 class ReviewArchive {
     private final PullRequestInstance prInstance;
+    private final CensusInstance censusInstance;
     private final EmailAddress sender;
-    private final String nameDecoration;
     private final List<Email> existing;
     private final Map<String, Email> existingIds = new HashMap<>();
     private final List<Email> generated = new ArrayList<>();
     private final Map<String, Email> generatedIds = new HashMap<>();
     private final List<Hash> reportedHeads;
     private final List<Hash> reportedBases;
 
     private EmailAddress getAuthorAddress(HostUserDetails originalAuthor) {
-        return EmailAddress.from(originalAuthor.fullName() + nameDecoration,
-                                 sender.address());
+        var contributor = censusInstance.namespace().get(originalAuthor.id());
+        if (contributor == null) {
+            return EmailAddress.from(originalAuthor.fullName(),
+                                     originalAuthor.id() + "+" + originalAuthor.userName() + "@users.noreply." + censusInstance.namespace().name());
+        } else {
+            return EmailAddress.from(contributor.fullName().orElse(originalAuthor.fullName()),
+                                     contributor.username() + "@" + censusInstance.configuration().census().domain());
+        }
     }
 
     private EmailAddress getUniqueMessageId(String identifier) {
         try {
             var prSpecific = prInstance.pr().repository().getName().replace("/", ".") + "." + prInstance.id();
@@ -125,14 +131,14 @@
             }
         }
         return parent;
     }
 
-    ReviewArchive(EmailAddress sender, PullRequestInstance prInstance, List<Email> sentMails, String nameDecoration) {
+    ReviewArchive(EmailAddress sender, PullRequestInstance prInstance, CensusInstance censusInstance, List<Email> sentMails) {
         this.sender = sender;
         this.prInstance = prInstance;
-        this.nameDecoration = nameDecoration;
+        this.censusInstance = censusInstance;
 
         existing = sentMails;
         for (var email : existing) {
             var stableIds = getStableMessageIds(email);
             for (var stableId : stableIds) {
@@ -306,11 +312,11 @@
 
         var parent = latestGeneralComment();
         addReplyCommon(parent, comment.author(), "Re: RFR: " + prInstance.pr().getTitle(), comment.body(), id);
     }
 
-    private String projectRole(Contributor contributor, CensusInstance censusInstance) {
+    private String projectRole(Contributor contributor) {
         var version = censusInstance.configuration().census().version();
         if (censusInstance.project().isLead(contributor.username(), version)) {
             return "Lead";
         } else if (censusInstance.project().isReviewer(contributor.username(), version)) {
             return "Reviewer";
@@ -320,20 +326,20 @@
             return "Author";
         }
         return "none";
     }
 
-    void addReview(Review review, CensusInstance censusInstance) {
+    void addReview(Review review) {
         var contributor = censusInstance.namespace().get(review.reviewer().id());
 
         // Post the review body as a regular comment
         if (review.body().isPresent()) {
             var id = getMessageId(review, false);
             if (!existingIds.containsKey(getStableMessageId(id))) {
                 var parent = topCommentForHash(review.hash());
                 var userName = contributor != null ? contributor.username() : review.reviewer().userName() + "@" + censusInstance.namespace().name();
-                var userRole = contributor != null ? projectRole(contributor, censusInstance) : "none";
+                var userRole = contributor != null ? projectRole(contributor) : "none";
                 var replyBody = ArchiveMessages.reviewCommentBody(review.body().get(), review.verdict(), userName, userRole);
                 addReplyCommon(parent, review.reviewer(), "Re: RFR: " + prInstance.pr().getTitle(), replyBody, id);
             }
         }
 
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.email.EmailAddress;
-import org.openjdk.skara.host.Review;
+import org.openjdk.skara.host.*;
 import org.openjdk.skara.host.network.URIBuilder;
 import org.openjdk.skara.mailinglist.MailingListServerFactory;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Repository;
 
@@ -82,10 +82,16 @@
 
     private long countSubstrings(String string, String substring) {
         return Pattern.compile(substring).matcher(string).results().count();
     }
 
+    private String noreplyAddress(HostedRepository repository) {
+        return repository.host().getCurrentUserDetails().id() + "+" +
+                repository.host().getCurrentUserDetails().userName() +
+                "@users.noreply.test";
+    }
+
     @Test
     void simpleArchive(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
@@ -174,12 +180,12 @@
             var mailmanList = mailmanServer.getList(listAddress.address());
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             var mail = conversations.get(0).first();
             assertEquals("RFR: This is a pull request", mail.subject());
-            assertEquals(pr.getAuthor().fullName() + " via " + pr.repository().getUrl().getHost(), mail.author().fullName().orElseThrow());
-            assertEquals(from.address(), mail.author().address());
+            assertEquals(pr.getAuthor().fullName(), mail.author().fullName().orElseThrow());
+            assertEquals(noreplyAddress(archive), mail.author().address());
             assertEquals(from, mail.sender());
 
             // And there should be a webrev
             Repository.materialize(webrevFolder.path(), archive.getUrl(), "webrev");
             assertTrue(webrevContains(webrevFolder.path(), "1 lines changed"));
@@ -226,11 +232,11 @@
             listServer.processIncoming();
             conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             assertEquals(3, conversations.get(0).allMessages().size());
             for (var newMail : conversations.get(0).allMessages()) {
-                assertEquals(from.address(), newMail.author().address());
+                assertEquals(noreplyAddress(archive), newMail.author().address());
                 assertEquals(from, newMail.sender());
             }
             assertTrue(conversations.get(0).allMessages().get(2).body().contains("This is a comment 😄"));
         }
     }
@@ -313,11 +319,11 @@
             // As well as the mailing list
             conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             assertEquals(3, conversations.get(0).allMessages().size());
             for (var newMail : conversations.get(0).allMessages()) {
-                assertEquals(from.address(), newMail.author().address());
+                assertEquals(noreplyAddress(archive), newMail.author().address());
                 assertEquals(from, newMail.sender());
             }
         }
     }
 
@@ -460,12 +466,16 @@
             assertEquals("Re: RFR: This is a pull request", thread1.subject());
             assertTrue(thread1.body().contains("Review comment\n\n"), thread1.body());
             assertFalse(thread1.body().contains("Another review comment"), thread1.body());
             var thread1reply1 = conversations.get(0).replies(thread1).get(0);
             assertTrue(thread1reply1.body().contains("I agree"));
+            assertEquals(noreplyAddress(archive), thread1reply1.author().address());
+            assertEquals(archive.host().getCurrentUserDetails().fullName(), thread1reply1.author().fullName().orElseThrow());
             var thread1reply2 = conversations.get(0).replies(thread1reply1).get(0);
             assertTrue(thread1reply2.body().contains("Great"));
+            assertEquals("integrationreviewer1@openjdk.java.net", thread1reply2.author().address());
+            assertEquals("Generated Reviewer 1", thread1reply2.author().fullName().orElseThrow());
 
             var thread2 = conversations.get(0).replies(mail).get(1);
             assertEquals(2, thread2.body().split("^On.*wrote:").length);
             assertEquals(2, thread2.body().split("> This is now ready").length, thread2.body());
             assertEquals("Re: RFR: This is a pull request", thread2.subject());
@@ -729,11 +739,11 @@
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP());
             var mailmanList = mailmanServer.getList(listAddress.address());
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             for (var newMail : conversations.get(0).allMessages()) {
-                assertEquals(from.address(), newMail.author().address());
+                assertEquals(noreplyAddress(archive), newMail.author().address());
                 assertEquals(from, newMail.sender());
             }
 
             // Ensure that additional updates are only reported once
             for (int i = 0; i < 3; ++i) {
@@ -770,12 +780,12 @@
             var author = credentials.getHostedRepository();
             var archive = credentials.getHostedRepository();
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.host().getCurrentUserDetails().id());
-            var from = EmailAddress.from("test", "test@test.mail");
-            var mlBot = new MailingListBridgeBot(from, author, archive, censusBuilder.build(), "master",
+            var sender = EmailAddress.from("test", "test@test.mail");
+            var mlBot = new MailingListBridgeBot(sender, author, archive, censusBuilder.build(), "master",
                                                  listAddress, Set.of(), Set.of(),
                                                  listServer.getArchive(), listServer.getSMTP(),
                                                  archive, "webrev", Path.of("test"),
                                                  URIBuilder.base("http://www.test.test/").build(),
                                                  Set.of(), Map.of());
@@ -838,12 +848,12 @@
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP());
             var mailmanList = mailmanServer.getList(listAddress.address());
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
             for (var newMail : conversations.get(0).allMessages()) {
-                assertEquals(from.address(), newMail.author().address());
-                assertEquals(from, newMail.sender());
+                assertEquals(noreplyAddress(archive), newMail.author().address());
+                assertEquals(sender, newMail.sender());
             }
         }
     }
 
     @Test
