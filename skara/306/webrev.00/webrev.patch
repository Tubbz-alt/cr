diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
@@ -216,10 +216,25 @@
 
     @Override
     public void setAssignees(List<HostUser> assignees) {
     }
 
+    @Override
+    public List<Link> links() {
+        return null;
+    }
+
+    @Override
+    public void addLink(Link link) {
+
+    }
+
+    @Override
+    public void removeLink(URI uri) {
+
+    }
+
     @Override
     public void setTitle(String title) {
     }
 
     @Override
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -495,6 +495,21 @@
             assignee_ids.add(assignee.userName());
         }
         var param = JSON.object().put("assignees", assignee_ids);
         request.patch("issues/" + json.get("number").toString()).body(param).execute();
     }
+
+    @Override
+    public List<Link> links() {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void addLink(Link link) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void removeLink(URI uri) {
+        throw new RuntimeException("not implemented yet");
+    }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
@@ -36,11 +36,10 @@
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import java.util.stream.*;
 
 public class GitLabMergeRequest implements PullRequest {
-
     private final JSONValue json;
     private final RestRequest request;
     private final Logger log = Logger.getLogger("org.openjdk.skara.host");;
     private final GitLabRepository repository;
 
@@ -624,6 +623,21 @@
                                 .collect(Collectors.joining(" "));
             var comment = usernames + " can you have a look at this merge request?";
             addComment(comment);
         }
     }
+
+    @Override
+    public List<Link> links() {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void addLink(Link link) {
+        throw new RuntimeException("not implemented yet");
+    }
+
+    @Override
+    public void removeLink(URI uri) {
+        throw new RuntimeException("not implemented yet");
+    }
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
@@ -24,11 +24,11 @@
 
 import org.openjdk.skara.host.HostUser;
 
 import java.net.URI;
 import java.time.ZonedDateTime;
-import java.util.List;
+import java.util.*;
 
 public interface Issue {
     /**
      * Project containing the issue.
      * @return
@@ -145,6 +145,12 @@
     /**
      * Update the list of assignees.
      * @param assignees
      */
     void setAssignees(List<HostUser> assignees);
+
+    List<Link> links();
+
+    void addLink(Link link);
+
+    void removeLink(URI uri);
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Link.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Link.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Link.java
@@ -0,0 +1,130 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker;
+
+import java.net.URI;
+import java.util.*;
+
+public class Link {
+    private final URI uri;
+    private final String title;
+    private final String relationship;
+    private final String summary;
+    private final URI iconUrl;
+    private final String iconTitle;
+    private final URI statusIconUrl;
+    private final String statusIconTitle;
+    private final boolean resolved;
+
+    Link(URI uri, String title, String relationship, String summary, URI iconUrl, String iconTitle, URI statusIconUrl, String statusIconTitle, boolean resolved) {
+        this.uri = uri;
+        this.title = title;
+        this.relationship = relationship;
+        this.summary = summary;
+        this.iconUrl = iconUrl;
+        this.iconTitle = iconTitle;
+        this.statusIconUrl = statusIconUrl;
+        this.statusIconTitle = statusIconTitle;
+        this.resolved = resolved;
+    }
+
+    public static LinkBuilder create(URI uri, String title) {
+        return new LinkBuilder(uri, title);
+    }
+
+    public URI uri() {
+        return uri;
+    }
+
+    public String title() {
+        return title;
+    }
+
+    public Optional<String> relationship() {
+        return Optional.ofNullable(relationship);
+    }
+
+    public Optional<String> summary() {
+        return Optional.ofNullable(summary);
+    }
+
+    public Optional<URI> iconUrl() {
+        return Optional.ofNullable(iconUrl);
+    }
+
+    public Optional<String> iconTitle() {
+        return Optional.ofNullable(iconTitle);
+    }
+
+    public Optional<URI> statusIconUrl() {
+        return Optional.ofNullable(statusIconUrl);
+    }
+
+    public Optional<String> statusIconTitle() {
+        return Optional.ofNullable(statusIconTitle);
+    }
+
+    public boolean resolved() {
+        return resolved;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        Link link = (Link) o;
+        return resolved == link.resolved &&
+                uri.equals(link.uri) &&
+                title.equals(link.title) &&
+                Objects.equals(relationship, link.relationship) &&
+                Objects.equals(summary, link.summary) &&
+                Objects.equals(iconUrl, link.iconUrl) &&
+                Objects.equals(iconTitle, link.iconTitle) &&
+                Objects.equals(statusIconUrl, link.statusIconUrl) &&
+                Objects.equals(statusIconTitle, link.statusIconTitle);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(uri, title, relationship, summary, iconUrl, iconTitle, statusIconUrl, statusIconTitle, resolved);
+    }
+
+    @Override
+    public String toString() {
+        return "Link{" +
+                "uri=" + uri +
+                ", title='" + title + '\'' +
+                ", relationship='" + relationship + '\'' +
+                ", summary='" + summary + '\'' +
+                ", iconUrl=" + iconUrl +
+                ", iconTitle='" + iconTitle + '\'' +
+                ", statusIconUrl=" + statusIconUrl +
+                ", statusIconTitle='" + statusIconTitle + '\'' +
+                ", resolved=" + resolved +
+                '}';
+    }
+}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/LinkBuilder.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/LinkBuilder.java
--- /dev/null
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/LinkBuilder.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.issuetracker;
+
+import java.net.URI;
+
+public class LinkBuilder {
+    private final URI uri;
+    private final String title;
+
+    private String relationship;
+    private String summary;
+    private URI iconUrl;
+    private String iconTitle;
+    private URI statusIconUrl;
+    private String statusIconTitle;
+    private boolean resolved;
+
+    LinkBuilder(URI uri, String title) {
+        this.uri = uri;
+        this.title = title;
+    }
+
+    public LinkBuilder relationship(String relationship) {
+        this.relationship = relationship;
+        return this;
+    }
+
+    public LinkBuilder summary(String summary) {
+        this.summary = summary;
+        return this;
+    }
+
+    public LinkBuilder iconUrl(URI iconUrl) {
+        this.iconUrl = iconUrl;
+        return this;
+    }
+
+    public LinkBuilder iconTitle(String iconTitle) {
+        this.iconTitle = iconTitle;
+        return this;
+    }
+
+    public LinkBuilder statusIconUrl(URI statusIconUrl) {
+        this.statusIconUrl = statusIconUrl;
+        return this;
+    }
+
+    public LinkBuilder statusIconTitle(String statusIconTitle) {
+        this.statusIconTitle = statusIconTitle;
+        return this;
+    }
+
+    public LinkBuilder resolved(boolean resolved) {
+        this.resolved = resolved;
+        return this;
+    }
+
+    public Link build() {
+        return new Link(uri, title, relationship, summary, iconUrl, iconTitle, statusIconUrl, statusIconTitle, resolved);
+    }
+}
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
@@ -257,6 +257,76 @@
         }
         request.put("/assignee")
                .body("name", assignee)
                .execute();
     }
+
+    private Link parseLink(JSONObject json) {
+        var link = Link.create(URI.create(json.get("object").get("url").asString()), json.get("object").get("title").asString());
+        if (json.contains("relationship")) {
+            link.relationship(json.get("relationship").asString());
+        }
+        if (json.get("object").contains("summary")) {
+            link.summary(json.get("object").get("summary").asString());
+        }
+        if (json.get("object").contains("icon")) {
+            if (json.get("object").get("icon").contains("url16x16")) {
+                link.iconUrl(URI.create(json.get("object").get("icon").get("url16x16").asString()));
+            }
+            if (json.get("object").get("icon").contains("title")) {
+                link.iconTitle(json.get("object").get("icon").get("title").asString());
+            }
+        }
+        if (json.get("object").get("status").contains("icon")) {
+            if (json.get("object").get("status").get("icon").contains("url16x16")) {
+                link.statusIconUrl(URI.create(json.get("object").get("status").get("icon").get("url16x16").asString()));
+            }
+            if (json.get("object").get("status").get("icon").contains("title")) {
+                link.statusIconTitle(json.get("object").get("status").get("icon").get("title").asString());
+            }
+        }
+        link.resolved(json.get("object").get("status").get("resolved").asBoolean());
+        return link.build();
+    }
+
+    @Override
+    public List<Link> links() {
+        var result = request.get("/remotelink").execute();
+        return result.stream()
+                     .map(JSONValue::asObject)
+                     .filter(obj -> obj.get("globalId").asString().startsWith("skaralink="))
+                     .map(this::parseLink)
+                     .collect(Collectors.toList());
+    }
+
+    @Override
+    public void addLink(Link link) {
+        var query = JSON.object().put("globalId", "skaralink=" + link.uri().toString());
+        var object = JSON.object().put("url", link.uri().toString()).put("title", link.title());
+        var status = JSON.object().put("resolved", link.resolved());
+        var icon = JSON.object();
+        var statusIcon = JSON.object();
+
+        query.put("object", object);
+        object.put("icon", icon);
+        object.put("status", status);
+        status.put("icon", statusIcon);
+
+        link.relationship().ifPresent(relationship -> query.put("relationship", relationship));
+        link.summary().ifPresent(summary -> object.put("summary", summary));
+        link.iconUrl().ifPresent(iconUrl -> icon.put("url16x16", iconUrl.toString()));
+        link.iconTitle().ifPresent(iconTitle -> icon.put("title", iconTitle));
+        link.statusIconUrl().ifPresent(statusIconUrl -> statusIcon.put("url16x16", statusIconUrl.toString()));
+        link.statusIconTitle().ifPresent(statusIconTitle -> statusIcon.put("title", statusIconTitle));
+
+        request.post("/remotelink")
+               .body(query)
+               .execute();
+    }
+
+    @Override
+    public void removeLink(URI uri) {
+        request.delete("/remotelink")
+               .param("globalId", "skaralink=" + uri.toString())
+               .execute();
+    }
 }
diff a/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java b/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
--- a/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
+++ b/issuetracker/src/test/java/org/openjdk/skara/issuetracker/IssueTrackerTests.java
@@ -25,10 +25,11 @@
 import org.openjdk.skara.test.HostCredentials;
 
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
+import java.net.URI;
 import java.util.List;
 
 import static org.junit.jupiter.api.Assertions.*;
 
 class IssueTrackerTests {
@@ -70,6 +71,38 @@
             issue.setState(Issue.State.RESOLVED);
             var issues = project.issues();
             assertEquals(0, issues.size());
         }
     }
+
+    @Test
+    void addLink(TestInfo info) throws IOException {
+        try (var credentials = new HostCredentials(info)) {
+            var project = credentials.getIssueProject();
+
+            var userName = project.issueTracker().currentUser().userName();
+            var user = project.issueTracker().user(userName);
+            assertEquals(userName, user.userName());
+
+            var issue = credentials.createIssue(project, "Test issue");
+            issue.setBody("This is now the body");
+            var link = Link.create(URI.create("http://www.example.com/abc"), "openjdk/skara/13")
+                           .relationship("reviewed in")
+                           .summary("Pull request")
+                           .iconUrl(URI.create("https://bugs.openjdk.java.net/images/icons/icon-view.png"))
+                           .iconTitle("Review")
+                           .resolved(true)
+                           .statusIconUrl(URI.create("https://bugs.openjdk.java.net/images/icons/icon-status-done-green.png"))
+                           .statusIconTitle("Ready for integration")
+                           .build();
+            issue.addLink(link);
+
+            var links = issue.links();
+            assertEquals(1, links.size());
+            assertEquals(link, links.get(0));
+
+            issue.removeLink(URI.create("http://www.example.com/abc"));
+            links = issue.links();
+            assertEquals(0, links.size());
+        }
+    }
 }
diff a/test/src/main/java/org/openjdk/skara/test/IssueData.java b/test/src/main/java/org/openjdk/skara/test/IssueData.java
--- a/test/src/main/java/org/openjdk/skara/test/IssueData.java
+++ b/test/src/main/java/org/openjdk/skara/test/IssueData.java
@@ -33,8 +33,9 @@
     String body = "";
     String title = "";
     final List<Comment> comments = new ArrayList<>();
     final Set<String> labels = new HashSet<>();
     final List<HostUser> assignees = new ArrayList<>();
+    final List<Link> links = new ArrayList<>();
     ZonedDateTime created = ZonedDateTime.now();
     ZonedDateTime lastUpdate = created;
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestIssue.java b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssue.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.test;
 
-import org.openjdk.skara.host.*;
+import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.network.URIBuilder;
 
 import java.net.URI;
 import java.time.ZonedDateTime;
@@ -177,6 +177,23 @@
     public void setAssignees(List<HostUser> assignees) {
         data.assignees.clear();
         data.assignees.addAll(assignees);
         data.lastUpdate = ZonedDateTime.now();
     }
+
+    @Override
+    public List<Link> links() {
+        return data.links;
+    }
+
+    @Override
+    public void addLink(Link link) {
+        data.links.add(link);
+        data.lastUpdate = ZonedDateTime.now();
+    }
+
+    @Override
+    public void removeLink(URI uri) {
+        data.links.removeIf(link -> link.uri().equals(uri));
+        data.lastUpdate = ZonedDateTime.now();
+    }
 }
