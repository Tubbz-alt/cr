diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
@@ -214,6 +214,10 @@
     }
 
     public List<StatusEntry> status(Hash from, Hash to) throws IOException {
         return Collections.emptyList();
     }
+
+    public boolean contains(Branch b, Hash h) throws IOException {
+        return false;
+    }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
@@ -53,10 +53,11 @@
     boolean isEmpty() throws IOException;
     boolean isClean() throws IOException;
     Hash mergeBase(Hash first, Hash second) throws IOException;
     boolean isAncestor(Hash ancestor, Hash descendant) throws IOException;
     Optional<Hash> resolve(String ref) throws IOException;
+    boolean contains(Branch b, Hash h) throws IOException;
     Optional<String> username() throws IOException;
     Optional<byte[]> show(Path p, Hash h) throws IOException;
     default Optional<List<String>> lines(Path p, Hash h) throws IOException {
         return show(p, h).map(bytes -> new String(bytes, StandardCharsets.UTF_8).lines().collect(Collectors.toList()));
     }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -1017,6 +1017,20 @@
         }
         try (var p = capture(cmd)) {
             await(p);
         }
     }
+
+    @Override
+    public boolean contains(Branch b, Hash h) throws IOException {
+        try (var p = capture("git", "for-each-ref", "--contains", h.hex(), "--format", "%(refname:short)")) {
+            var res = await(p);
+            for (var line : res.stdout()) {
+                if (line.equals(b.name())) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -995,6 +995,18 @@
         }
         try (var p = capture(cmd)) {
             await(p);
         }
     }
+
+    @Override
+    public boolean contains(Branch b, Hash h) throws IOException {
+        try (var p = capture("hg", "log", "--template", "{branch}", "-r", h.hex())) {
+            var res = await(p);
+            if (res.stdout().size() != 1) {
+                throw new IOException("Unexpected output: " + String.join("\n", res.stdout()));
+            }
+            var line = res.stdout().get(0);
+            return line.equals(b.name());
+        }
+    }
 }
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -1735,6 +1735,28 @@
             assertEquals(
                     List.of("Line with Unix line ending", "Line with Windows line ending\r"),
                     hunk.target().lines());
         }
     }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testContains(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var r = Repository.init(dir.path(), vcs);
+            assertTrue(r.isClean());
+
+            var f = dir.path().resolve("README");
+            Files.writeString(f, "Hello\n");
+            r.add(f);
+            var initial = r.commit("Initial commit", "duke", "duke@openjdk.org");
+
+            assertTrue(r.contains(r.defaultBranch(), initial));
+
+            Files.writeString(f, "Hello again\n");
+            r.add(f);
+            var second = r.commit("Second commit", "duke", "duke@openjdk.org");
+
+            assertTrue(r.contains(r.defaultBranch(), initial));
+        }
+    }
 }
