diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -829,10 +829,29 @@
 
             // The body should contain the updated issue title
             assertFalse(pr.getBody().contains("My first issue"));
             assertTrue(pr.getBody().contains("My second issue"));
 
+            // Use an invalid issue key
+            var issueKey = issue1.getId().replace("TEST", "BADPROJECT");
+            pr.setTitle(issueKey + ": This is a pull request");
+
+            // Check the status again
+            TestBotRunner.runPeriodicItems(checkBot);
+            assertFalse(pr.getBody().contains("My first issue"));
+            assertFalse(pr.getBody().contains("My second issue"));
+            assertTrue(pr.getBody().contains("Failed to retrieve"));
+
+            // Now drop the issue key
+            issueKey = issue1.getId().replace("TEST-", "");
+            pr.setTitle(issueKey + ": This is a pull request");
+
+            // The body should now contain the updated issue title
+            TestBotRunner.runPeriodicItems(checkBot);
+            assertTrue(pr.getBody().contains("My first issue"));
+            assertFalse(pr.getBody().contains("My second issue"));
+
             // Now enter an invalid issue id
             pr.setTitle("2384848: This is a pull request");
 
             // Check the status again
             TestBotRunner.runPeriodicItems(checkBot);
diff a/host/src/main/java/org/openjdk/skara/host/jira/JiraProject.java b/host/src/main/java/org/openjdk/skara/host/jira/JiraProject.java
--- a/host/src/main/java/org/openjdk/skara/host/jira/JiraProject.java
+++ b/host/src/main/java/org/openjdk/skara/host/jira/JiraProject.java
@@ -55,10 +55,13 @@
         throw new RuntimeException("needs authentication; not implemented yet");
     }
 
     @Override
     public Optional<Issue> getIssue(String id) {
+        if (id.indexOf('-') < 0) {
+            id = projectName.toUpperCase() + "-" + id;
+        }
         var issue = request.get("issue/" + id)
                            .onError(r -> r.statusCode() == 404 ? JSON.object().put("NOT_FOUND", true) : null)
                            .execute();
         if (!issue.contains("NOT_FOUND")) {
             return Optional.of(new JiraIssue(this, request, issue));
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -159,11 +159,11 @@
                                 .filter(TestPullRequest::isOpen)
                                 .collect(Collectors.toList());
     }
 
     TestIssue createIssue(TestIssueProject issueProject, String title, List<String> body) {
-        var id = String.valueOf(data.issues.size() + 1);
+        var id = issueProject.projectName().toUpperCase() + "-" + (data.issues.size() + 1);
         var issue = TestIssue.createNew(issueProject, id, title, body);
         data.issues.put(id ,issue);
         return issue;
     }
 
diff a/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java b/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
@@ -30,10 +30,14 @@
 
 public class TestIssueProject implements IssueProject {
     private final String projectName;
     private final TestHost host;
 
+    String projectName() {
+        return projectName;
+    }
+
     @Override
     public Host host() {
         return host;
     }
 
@@ -52,10 +56,14 @@
         return host.createIssue(this, title, body);
     }
 
     @Override
     public Optional<Issue> getIssue(String id) {
+        if (id.indexOf('-') < 0) {
+            id = projectName.toUpperCase() + "-" + id;
+        }
+
         return Optional.ofNullable(host.getIssue(this, id));
     }
 
     @Override
     public List<Issue> getIssues() {
