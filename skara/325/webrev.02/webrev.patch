diff a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPr.java
@@ -168,16 +168,12 @@
         }
 
         return targetRepo;
     }
 
-    private static PullRequest getPullRequest(URI uri, ReadOnlyRepository repo, Forge host, Argument prId) throws IOException {
-        if (!prId.isPresent()) {
-            exit("error: missing pull request identifier");
-        }
-
-        var pr = getHostedRepositoryFor(uri, repo, host).pullRequest(prId.asString());
+    private static PullRequest getPullRequest(URI uri, ReadOnlyRepository repo, Forge host, String prId) throws IOException {
+        var pr = getHostedRepositoryFor(uri, repo, host).pullRequest(prId);
         if (pr == null) {
             exit("error: could not fetch PR information");
         }
 
         return pr;
@@ -784,12 +780,33 @@
                                          .collect(Collectors.toList());
                 pr.setAssignees(assignees);
             }
             System.out.println(pr.webUrl().toString());
             Files.deleteIfExists(file);
+
+            repo.config("pr." + currentBranch.name(), "id", pr.id().toString());
         } else if (action.equals("integrate") || action.equals("approve") || action.equals("test")) {
-            var pr = getPullRequest(uri, repo, host, arguments.at(1));
+            String id = null;
+            if (arguments.at(1).isPresent()) {
+                id = arguments.at(1).asString();
+            } else {
+                if (action.equals("approve")) {
+                    exit("error: you must provide a pull request id");
+                } else {
+                    var currentBranch = repo.currentBranch();
+                    if (currentBranch.isPresent()) {
+                        var lines = repo.config("pr." + currentBranch.get().name() + ".id");
+                        if (lines.size() == 1) {
+                            id = lines.get(0);
+                        } else {
+                            exit("error: you must provide a pull request id");
+                        }
+                    }
+                }
+            }
+
+            var pr = getPullRequest(uri, repo, host, id);
 
             if (action.equals("integrate")) {
                 pr.addComment("/integrate");
             } else if (action.equals("test")) {
                 pr.addComment("/test");
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -62,10 +62,14 @@
     }
     void pull() throws IOException;
     void pull(String remote) throws IOException;
     void pull(String remote, String refspec) throws IOException;
     void addremove() throws IOException;
+    void config(String section, String key, String value, boolean global) throws IOException;
+    default void config(String section, String key, String value) throws IOException {
+        config(section, key, value, false);
+    }
     Hash commit(String message,
                 String authorName,
                 String authorEmail) throws IOException;
     Hash commit(String message,
                 String authorName,
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -1186,6 +1186,20 @@
                 return Optional.of(new Tag.Annotated(name, target, author, date, message));
             }
             return Optional.empty();
         }
     }
+
+    @Override
+    public void config(String section, String key, String value, boolean global) throws IOException {
+        var cmd = new ArrayList<String>();
+        cmd.addAll(List.of("git", "config"));
+        if (global) {
+            cmd.add("--global");
+        }
+        cmd.add(section + "." + key);
+        cmd.add(value);
+        try (var p = capture(cmd)) {
+            await(p);
+        }
+    }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -1210,6 +1210,22 @@
                 }
             }
         }
         return Optional.empty();
     }
+
+    @Override
+    public void config(String section, String key, String value, boolean global) throws IOException {
+        var hgrc = global ?
+            Path.of(System.getProperty("user.home"), ".hgrc") :
+            root().resolve(".hg").resolve("hgrc");
+
+        var lines = List.of(
+            "[" + section + "]",
+            key + " = " + value
+        );
+        if (!Files.exists(hgrc)) {
+            Files.createFile(hgrc);
+        }
+        Files.write(hgrc, lines, StandardOpenOption.WRITE, StandardOpenOption.APPEND);
+    }
 }
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -1946,11 +1946,11 @@
     }
 
     @ParameterizedTest
     @EnumSource(VCS.class)
     void testDiffWithFileList(VCS vcs) throws IOException {
-        try (var dir = new TemporaryDirectory(false)) {
+        try (var dir = new TemporaryDirectory()) {
             var repo = Repository.init(dir.path(), vcs);
             var readme = repo.root().resolve("README");
             Files.writeString(readme, "Hello\n");
             repo.add(readme);
 
@@ -1992,6 +1992,17 @@
 
             diff = repo.diff(first, second, List.of(Path.of("DOES_NOT_EXIST")));
             assertEquals(0, diff.patches().size());
         }
     }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testWritingConfigValue(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var repo = Repository.init(dir.path(), vcs);
+            assertEquals(List.of(), repo.config("test.key"));
+            repo.config("test", "key", "value");
+            assertEquals(List.of("value"), repo.config("test.key"));
+        }
+    }
 }
