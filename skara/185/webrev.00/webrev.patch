diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -24,11 +24,11 @@
 
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.Issue;
 
-import java.io.IOException;
+import java.io.*;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import java.util.stream.*;
 
@@ -447,16 +447,25 @@
             // Post check in-progress
             log.info("Starting to run jcheck on PR head");
             pr.createCheck(checkBuilder.build());
             var localHash = prInstance.commit(censusInstance.namespace(), censusDomain, null);
 
+            // Try to rebase
+            boolean rebasePossible = true;
+            var ignored = new PrintWriter(new StringWriter());
+            var rebasedHash = prInstance.rebase(localHash, ignored);
+            if (rebasedHash.isEmpty()) {
+                rebasePossible = false;
+            } else {
+                localHash = rebasedHash.get();
+            }
+
             // Determine current status
             var visitor = prInstance.executeChecks(localHash, censusInstance);
             var additionalErrors = botSpecificChecks();
             updateCheckBuilder(checkBuilder, visitor, additionalErrors);
             updateReadyForReview(visitor, additionalErrors);
-            var rebasePossible = prInstance.rebasePossible(localHash);
 
             // Calculate and update the status message if needed
             var statusMessage = getStatusMessage(activeReviews, visitor);
             var updatedBody = updateStatusMessage(statusMessage);
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
@@ -103,16 +103,19 @@
                 }
             }
 
             // Rebase and push it!
             var rebasedHash = prInstance.rebase(hash, reply);
-            if (rebasedHash.isPresent()) {
+            if (rebasedHash.isPresent() && !rebasedHash.get().equals(pr.getTargetHash())) {
                 reply.println("Pushed as commit " + rebasedHash.get().hex() + ".");
                 prInstance.localRepo().push(rebasedHash.get(), pr.repository().getUrl(), pr.getTargetRef());
                 pr.setState(PullRequest.State.CLOSED);
                 pr.addLabel("integrated");
                 pr.removeLabel("ready");
+            } else {
+                reply.print("Warning! Your commit did not result in any changes! ");
+                reply.println("No push attempt will be made.");
             }
 
         } catch (Exception e) {
             log.throwing("IntegrateCommand", "handle", e);
             reply.println("An error occurred during final integration jcheck");
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -147,49 +147,34 @@
         } catch (IOException e) {
             throw new RuntimeException(e);
         }
     }
 
-    boolean rebasePossible(Hash commitHash) {
-        try {
-            var commit = localRepo.lookup(commitHash);
-            if (commit.isEmpty()) {
-                return false;
-            }
-            localRepo.rebase(targetHash, commit.get().committer().name(), commit.get().committer().email());
-            var hash = localRepo.head();
-            return !hash.hex().equals(targetHash.hex());
-        } catch (IOException e) {
-            return false;
-        }
-    }
-
     Optional<Hash> rebase(Hash commitHash, PrintWriter reply) {
         var divergingCommits = divergingCommits();
         if (divergingCommits.size() > 0) {
             reply.print("The following commits have been pushed to ");
             reply.print(pr.getTargetRef());
             reply.println(" since your change was applied:");
-            divergingCommits.forEach(c -> reply.println(" * " + c.hash()));
+            divergingCommits.forEach(c -> reply.println(" * " + c.hash().hex() + ": " + c.message().get(0)));
 
             try {
                 var commit = localRepo.lookup(commitHash).orElseThrow();
                 localRepo.rebase(targetHash, commit.committer().name(), commit.committer().email());
                 reply.println();
                 reply.println("Your commit was automatically rebased without conflicts.");
                 var hash = localRepo.head();
-                if (hash.hex().equals(targetHash.hex())) {
-                    reply.print("Warning! Your commit did not result in any changes! ");
-                    reply.println("No push attempt will be made.");
-                    return Optional.empty();
-                } else {
-                    return Optional.of(hash);
-                }
+                return Optional.of(hash);
             } catch (IOException e) {
                 reply.println();
                 reply.print("It was not possible to rebase your changes automatically. ");
                 reply.println("Please rebase your branch manually and try again.");
+                try {
+                    localRepo.checkout(commitHash, true);
+                } catch (IOException e2) {
+                    throw new UncheckedIOException(e2);
+                }
                 return Optional.empty();
             }
         } else {
             // No rebase needed
             return Optional.of(commitHash);
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -581,10 +581,16 @@
             assertEquals(1, updated);
 
             // The PR should be flagged as outdated
             assertTrue(pr.getLabels().contains("outdated"));
 
+            // But it should still pass jcheck
+            var checks = pr.getChecks(editHash);
+            assertEquals(1, checks.size());
+            var check = checks.get("jcheck");
+            assertEquals(CheckStatus.SUCCESS, check.status());
+
             // Restore the master branch
             localRepo.push(masterHash, author.getUrl(), "master", true);
 
             // Let the bot see the changes
             TestBotRunner.runPeriodicItems(mergeBot);
@@ -892,6 +898,57 @@
             assertEquals("jcheck title", retrieved.title().get());
             assertEquals("jcheck summary", retrieved.summary().get());
             assertEquals(CheckStatus.CANCELLED, retrieved.status());
         }
     }
+
+    @Test
+    void rebaseBeforeCheck(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var reviewer = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.host().getCurrentUserDetails().id())
+                                           .addReviewer(reviewer.host().getCurrentUserDetails().id());
+            var checkBot = new PullRequestBot(author, censusBuilder.build(), "master");
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.getRepositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            localRepo.push(masterHash, author.getUrl(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.getUrl(), "refs/heads/edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+
+            // Enable a new check in the target branch
+            localRepo.checkout(masterHash, true);
+            CheckableRepository.init(tempFolder.path(), author.getRepositoryType(), Path.of("appendable.txt"),
+                                     Set.of("author", "reviewers", "whitespace", "issues"));
+            var headHash = localRepo.resolve("HEAD").orElseThrow();
+            localRepo.push(headHash, author.getUrl(), "master", true);
+
+            // Check the status
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // Verify that the check failed
+            var checks = pr.getChecks(editHash);
+            assertEquals(1, checks.size());
+            var check = checks.get("jcheck");
+            assertTrue(check.summary().orElseThrow().contains("commit message does not reference any issue"));
+            assertEquals(CheckStatus.FAILURE, check.status());
+
+            // Adjust the title to conform and check the status again
+            pr.setTitle("12345: This is a pull request");
+            TestBotRunner.runPeriodicItems(checkBot);
+
+            // Verify that the check passed
+            checks = pr.getChecks(editHash);
+            assertEquals(1, checks.size());
+            check = checks.get("jcheck");
+            assertEquals(CheckStatus.SUCCESS, check.status());
+        }
+    }
 }
