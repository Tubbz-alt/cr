diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
@@ -58,20 +58,20 @@
         return json.get("number").toString();
     }
 
     @Override
     public HostUserDetails getAuthor() {
-        return host.parseUserDetails(json);
+        return host.parseUserField(json);
     }
 
     @Override
     public List<Review> getReviews() {
         var reviews = request.get("pulls/" + json.get("number").toString() + "/reviews").execute().stream()
                              .map(JSONValue::asObject)
                              .filter(obj -> !(obj.get("state").asString().equals("COMMENTED") && obj.get("body").asString().isEmpty()))
                              .map(obj -> {
-                                 var reviewer = host.parseUserDetails(obj);
+                                 var reviewer = host.parseUserField(obj);
                                  var hash = new Hash(obj.get("commit_id").asString());
                                  Review.Verdict verdict;
                                  switch (obj.get("state").asString()) {
                                      case "APPROVED":
                                          verdict = Review.Verdict.APPROVED;
@@ -110,11 +110,11 @@
                .body(query)
                .execute();
     }
 
     private ReviewComment parseReviewComment(ReviewComment parent, JSONObject json, PositionMapper diff) {
-        var author = host.parseUserDetails(json);
+        var author = host.parseUserField(json);
         var threadId = parent == null ? json.get("id").toString() : parent.threadId();
         var comment = new ReviewComment(parent,
                                         threadId,
                                         new Hash(json.get("commit_id").asString()),
                                         json.get("path").asString(),
@@ -229,11 +229,11 @@
     }
 
     private Comment parseComment(JSONValue comment) {
         var ret = new Comment(Integer.toString(comment.get("id").asInt()),
                               comment.get("body").asString(),
-                              host.parseUserDetails(comment),
+                              host.parseUserField(comment),
                               ZonedDateTime.parse(comment.get("created_at").asString()),
                               ZonedDateTime.parse(comment.get("updated_at").asString()));
         return ret;
     }
 
@@ -423,11 +423,11 @@
 
     @Override
     public List<HostUserDetails> getAssignees() {
         return json.get("assignees").asArray()
                                     .stream()
-                                    .map(host::parseUserDetails)
+                                    .map(host::parseUserObject)
                                     .collect(Collectors.toList());
     }
 
     @Override
     public void setAssignees(List<HostUserDetails> assignees) {
