diff a/forge/src/main/java/org/openjdk/skara/forge/GitLabMergeRequest.java b/forge/src/main/java/org/openjdk/skara/forge/GitLabMergeRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/GitLabMergeRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/GitLabMergeRequest.java
@@ -347,11 +347,11 @@
 
     private String encodeMarkdown(String message) {
         return message.replaceAll("\n", "  \n");
     }
 
-    private final Pattern checkBodyPattern = Pattern.compile("^##### ([^\\n\\r]*)\\R(.*)",
+    private final Pattern checkBodyPattern = Pattern.compile("^# ([^\\n\\r]*)\\R(.*)",
                                                              Pattern.DOTALL | Pattern.MULTILINE);
 
     @Override
     public Map<String, Check> checks(Hash hash) {
         var pattern = Pattern.compile(String.format(checkResultPattern, hash.hex()));
@@ -445,31 +445,35 @@
                 break;
             default:
                 throw new RuntimeException("Unknown check status");
         }
 
-        if ( check.title().isPresent() && check.summary().isPresent()) {
-            body += encodeMarkdown("\n" + "##### " + check.title().get() + "\n" + check.summary().get());
-
-            for (var annotation : check.annotations()) {
-                var annotationString = "  - ";
-                switch (annotation.level()) {
-                    case NOTICE:
-                        annotationString += "Notice: ";
-                        break;
-                    case WARNING:
-                        annotationString += "Warning: ";
-                        break;
-                    case FAILURE:
-                        annotationString += "Failure: ";
-                        break;
-                }
-                annotationString += linkToDiff(annotation.path(), check.hash(), annotation.startLine());
-                annotationString += "\n    - " + annotation.message().lines().collect(Collectors.joining("\n    - "));
-
-                body += "\n" + annotationString;
+        if (check.title().isPresent()) {
+            body += encodeMarkdown("\n" + "# " + check.title().get());
+        }
+
+        if (check.summary().isPresent()) {
+            body += encodeMarkdown("\n" + check.summary().get());
+        }
+
+        for (var annotation : check.annotations()) {
+            var annotationString = "  - ";
+            switch (annotation.level()) {
+                case NOTICE:
+                    annotationString += "Notice: ";
+                    break;
+                case WARNING:
+                    annotationString += "Warning: ";
+                    break;
+                case FAILURE:
+                    annotationString += "Failure: ";
+                    break;
             }
+            annotationString += linkToDiff(annotation.path(), check.hash(), annotation.startLine());
+            annotationString += "\n    - " + annotation.message().lines().collect(Collectors.joining("\n    - "));
+
+            body += "\n" + annotationString;
         }
 
         return body;
     }
 
