diff a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
@@ -34,10 +34,11 @@
 import java.net.http.HttpRequest;
 import java.net.http.HttpResponse;
 import java.nio.file.*;
 import java.util.*;
 import java.util.regex.Pattern;
+import java.util.stream.Collectors;
 
 public class GitWebrev {
     private static void clearDirectory(Path directory) {
         try {
             Files.walk(directory)
@@ -132,11 +133,17 @@
             Switch.shortcut("v")
                   .fullname("version")
                   .helptext("Print the version of this tool")
                   .optional());
 
-        var parser = new ArgumentParser("git webrev", flags);
+        var inputs = List.of(
+            Input.position(0)
+                 .describe("FILE")
+                 .singular()
+                 .optional());
+
+        var parser = new ArgumentParser("git webrev", flags, inputs);
         var arguments = parser.parse(args);
 
         var version = Version.fromManifest().orElse("unknown");
         if (arguments.contains("version")) {
             System.out.println("git-webrev version: " + version);
@@ -244,17 +251,23 @@
 
         if (Files.exists(output)) {
             clearDirectory(output);
         }
 
+        List<Path> files = List.of();
+        if (arguments.at(0).isPresent()) {
+            var path = arguments.at(0).via(Path::of);
+            files = Files.readAllLines(path).stream().map(Path::of).collect(Collectors.toList());
+        }
         Webrev.repository(repo)
               .output(output)
               .title(title)
               .upstream(upstream)
               .username(username)
               .issue(issue)
               .version(version)
+              .files(files)
               .generate(rev);
     }
 
     private static void apply(String[] args) throws Exception {
         var inputs = List.of(
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
@@ -187,14 +187,22 @@
 
     public Diff diff(Hash base, Hash head) throws IOException {
         return null;
     }
 
+    public Diff diff(Hash base, Hash head, List<Path> files) throws IOException {
+        return null;
+    }
+
     public Diff diff(Hash head) throws IOException {
         return null;
     }
 
+    public Diff diff(Hash head, List<Path> files) throws IOException {
+        return null;
+    }
+
     public List<String> config(String key) throws IOException {
         return null;
     }
 
     public Repository copyTo(Path destination) throws IOException {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
@@ -75,11 +75,13 @@
     }
 
     void dump(FileEntry entry, Path to) throws IOException;
     List<StatusEntry> status(Hash from, Hash to) throws IOException;
     Diff diff(Hash base, Hash head) throws IOException;
+    Diff diff(Hash base, Hash head, List<Path> files) throws IOException;
     Diff diff(Hash head) throws IOException;
+    Diff diff(Hash head, List<Path> files) throws IOException;
     List<String> config(String key) throws IOException;
     Repository copyTo(Path destination) throws IOException;
     String pullPath(String remote) throws IOException;
     String pushPath(String remote) throws IOException;
     boolean isValidRevisionRange(String expression) throws IOException;
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -817,15 +817,25 @@
         }
     }
 
     @Override
     public Diff diff(Hash from) throws IOException {
-        return diff(from, null);
+        return diff(from, List.of());
+    }
+
+    @Override
+    public Diff diff(Hash from, List<Path> files) throws IOException {
+        return diff(from, null, files);
     }
 
     @Override
     public Diff diff(Hash from, Hash to) throws IOException {
+        return diff(from, to, List.of());
+    }
+
+    @Override
+    public Diff diff(Hash from, Hash to, List<Path> files) throws IOException {
         var cmd = new ArrayList<>(List.of("git", "diff", "--patch",
                                                          "--find-renames=99%",
                                                          "--find-copies=99%",
                                                          "--find-copies-harder",
                                                          "--binary",
@@ -836,10 +846,17 @@
                                                          from.hex()));
         if (to != null) {
             cmd.add(to.hex());
         }
 
+        if (files != null && !files.isEmpty()) {
+            cmd.add("--");
+            for (var file : files) {
+                cmd.add(file.toString());
+            }
+        }
+
         var p = start(cmd);
         try {
             var patches = UnifiedDiffParser.parseGitRaw(p.getInputStream());
             await(p);
             return new Diff(from, to, patches);
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -734,24 +734,39 @@
         }
     }
 
     @Override
     public Diff diff(Hash from) throws IOException {
-        return diff(from, null);
+        return diff(from, List.of());
+    }
+
+    @Override
+    public Diff diff(Hash from, List<Path> files) throws IOException {
+        return diff(from, null, files);
     }
 
     @Override
     public Diff diff(Hash from, Hash to) throws IOException {
+        return diff(from, to, List.of());
+    }
+
+    @Override
+    public Diff diff(Hash from, Hash to, List<Path> files) throws IOException {
         var ext = Files.createTempFile("ext", ".py");
         copyResource(EXT_PY, ext);
 
         var cmd = new ArrayList<>(List.of("hg", "--config", "extensions.diff-git-raw=" + ext.toAbsolutePath(),
                                                 "diff-git-raw", "--patch", from.hex()));
         if (to != null) {
             cmd.add(to.hex());
         }
 
+        if (files != null) {
+            var filenames = files.stream().map(Path::toString).collect(Collectors.toList());
+            cmd.add("--files=" + String.join(",", filenames));
+        }
+
         var p = start(cmd);
         try {
             var patches = UnifiedDiffParser.parseGitRaw(p.getInputStream());
             await(p);
             return new Diff(from, to, patches);
diff a/vcs/src/main/resources/ext.py b/vcs/src/main/resources/ext.py
--- a/vcs/src/main/resources/ext.py
+++ b/vcs/src/main/resources/ext.py
@@ -153,22 +153,30 @@
     revrange = mercurial.scmutil.revrange
 else:
     revsingle = mercurial.cmdutil.revsingle
     revrange = mercurial.cmdutil.revrange
 
-@command(b'diff-git-raw', [(b'', b'patch', False, b'')], b'hg diff-git-raw rev1 [rev2]')
-def diff_git_raw(ui, repo, rev1, rev2=None, **opts):
+@command(b'diff-git-raw', [(b'', b'patch', False, b''), (b'', b'files', b'', b'')], b'hg diff-git-raw rev1 [rev2]')
+def diff_git_raw(ui, repo, rev1, rev2=None, *files, **opts):
     ctx1 = revsingle(repo, rev1)
 
     if rev2 != None:
         ctx2 = revsingle(repo, rev2)
         status = repo.status(ctx1, ctx2)
     else:
         ctx2 = mercurial.context.workingctx(repo)
         status = repo.status(ctx1)
 
     modified, added, removed = [set(l) for l in status[:3]]
+
+    files = opts['files']
+    if files != '':
+        wanted = set(files.split(','))
+        modified = modified & wanted
+        added = added & wanted
+        removed = removed & wanted
+
     _diff_git_raw(repo, ctx1, ctx2, modified, added, removed, opts['patch'])
 
 @command(b'log-git', [(b'', b'reverse', False, b''), (b'l', b'limit', -1, b'')],  b'hg log-git <revisions>')
 def log_git(ui, repo, revs=None, **opts):
     if len(repo) == 0:
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -1942,6 +1942,56 @@
         try (var dir = new TemporaryDirectory()) {
             var repo = Repository.init(dir.path(), vcs);
             assertEquals(Optional.empty(), repo.annotate(new Tag("unknown")));
         }
     }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testDiffWithFileList(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory(false)) {
+            var repo = Repository.init(dir.path(), vcs);
+            var readme = repo.root().resolve("README");
+            Files.writeString(readme, "Hello\n");
+            repo.add(readme);
+
+            var contribute = repo.root().resolve("CONTRIBUTE");
+            Files.writeString(contribute, "1. Make changes\n");
+            repo.add(contribute);
+
+            var first = repo.commit("Added README and CONTRIBUTE", "duke", "duke@openjdk.org");
+            Files.writeString(readme, "World\n", WRITE, APPEND);
+            Files.writeString(contribute, "2. Run git commit", WRITE, APPEND);
+
+            var diff = repo.diff(first, List.of(Path.of("README")));
+            assertEquals(1, diff.added());
+            assertEquals(0, diff.modified());
+            assertEquals(0, diff.removed());
+            var patches = diff.patches();
+            assertEquals(1, patches.size());
+            var patch = patches.get(0);
+            assertTrue(patch.isTextual());
+            assertTrue(patch.status().isModified());
+            assertEquals(Path.of("README"), patch.source().path().get());
+            assertEquals(Path.of("README"), patch.target().path().get());
+
+            repo.add(readme);
+            repo.add(contribute);
+            var second = repo.commit("Updates to both README and CONTRIBUTE", "duke", "duke@openjdk.org");
+
+            diff = repo.diff(first, second, List.of(Path.of("CONTRIBUTE")));
+            assertEquals(1, diff.added());
+            assertEquals(0, diff.modified());
+            assertEquals(0, diff.removed());
+            patches = diff.patches();
+            assertEquals(1, patches.size());
+            patch = patches.get(0);
+            assertTrue(patch.isTextual());
+            assertTrue(patch.status().isModified());
+            assertEquals(Path.of("CONTRIBUTE"), patch.source().path().get());
+            assertEquals(Path.of("CONTRIBUTE"), patch.target().path().get());
+
+            diff = repo.diff(first, second, List.of(Path.of("DOES_NOT_EXIST")));
+            assertEquals(0, diff.patches().size());
+        }
+    }
 }
diff a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
@@ -59,10 +59,11 @@
         private String upstream;
         private String pullRequest;
         private String branch;
         private String issue;
         private String version;
+        private List<Path> files = List.of();
 
         Builder(ReadOnlyRepository repository, Path output) {
             this.repository = repository;
             this.output = output;
         }
@@ -100,10 +101,15 @@
         public Builder version(String version) {
             this.version = version;
             return this;
         }
 
+        public Builder files(List<Path> files) {
+            this.files = files;
+            return this;
+        }
+
         public void generate(Hash tailEnd) throws IOException {
             generate(tailEnd, null);
         }
 
         public void generate(Hash tailEnd, Hash head) throws IOException {
@@ -112,13 +118,40 @@
             copyResource(ANCNAV_HTML);
             copyResource(ANCNAV_JS);
             copyResource(CSS);
             copyResource(ICON);
 
-            var diff = head == null ? repository.diff(tailEnd) : repository.diff(tailEnd, head);
+            var diff = head == null ?
+                repository.diff(tailEnd, files) :
+                repository.diff(tailEnd, head, files);
             var patchFile = output.resolve(Path.of(title).getFileName().toString() + ".patch");
+
             var patches = diff.patches();
+            if (files != null && !files.isEmpty()) {
+                // Sort the patches according to how they are listed in the `files` list.
+                var byTargetPath = new HashMap<Path, Patch>();
+                var bySourcePath = new HashMap<Path, Patch>();
+                for (var patch : patches) {
+                    if (patch.target().path().isPresent()) {
+                        byTargetPath.put(patch.target().path().get(), patch);
+                    } else {
+                        bySourcePath.put(patch.source().path().get(), patch);
+                    }
+                }
+
+                var sorted = new ArrayList<Patch>();
+                for (var file : files) {
+                    if (byTargetPath.containsKey(file)) {
+                        sorted.add(byTargetPath.get(file));
+                    } else if (bySourcePath.containsKey(file)) {
+                        sorted.add(bySourcePath.get(file));
+                    } else {
+                        throw new IOException("Filename not present in diff: " + file);
+                    }
+                }
+                patches = sorted;
+            }
 
             var modified = new ArrayList<Integer>();
             for (var i = 0; i < patches.size(); i++) {
                 var patch = patches.get(i);
                 if (patch.status().isModified() || patch.status().isRenamed() || patch.status().isCopied()) {
