diff a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
@@ -59,10 +59,11 @@
         private String upstream;
         private String pullRequest;
         private String branch;
         private String issue;
         private String version;
+        private List<Path> files = List.of();
 
         Builder(ReadOnlyRepository repository, Path output) {
             this.repository = repository;
             this.output = output;
         }
@@ -100,10 +101,15 @@
         public Builder version(String version) {
             this.version = version;
             return this;
         }
 
+        public Builder files(List<Path> files) {
+            this.files = files;
+            return this;
+        }
+
         public void generate(Hash tailEnd) throws IOException {
             generate(tailEnd, null);
         }
 
         public void generate(Hash tailEnd, Hash head) throws IOException {
@@ -112,13 +118,40 @@
             copyResource(ANCNAV_HTML);
             copyResource(ANCNAV_JS);
             copyResource(CSS);
             copyResource(ICON);
 
-            var diff = head == null ? repository.diff(tailEnd) : repository.diff(tailEnd, head);
+            var diff = head == null ?
+                repository.diff(tailEnd, files) :
+                repository.diff(tailEnd, head, files);
             var patchFile = output.resolve(Path.of(title).getFileName().toString() + ".patch");
+
             var patches = diff.patches();
+            if (files != null && !files.isEmpty()) {
+                // Sort the patches according to how they are listed in the `files` list.
+                var byTargetPath = new HashMap<Path, Patch>();
+                var bySourcePath = new HashMap<Path, Patch>();
+                for (var patch : patches) {
+                    if (patch.target().path().isPresent()) {
+                        byTargetPath.put(patch.target().path().get(), patch);
+                    } else {
+                        bySourcePath.put(patch.source().path().get(), patch);
+                    }
+                }
+
+                var sorted = new ArrayList<Patch>();
+                for (var file : files) {
+                    if (byTargetPath.containsKey(file)) {
+                        sorted.add(byTargetPath.get(file));
+                    } else if (bySourcePath.containsKey(file)) {
+                        sorted.add(bySourcePath.get(file));
+                    } else {
+                        throw new IOException("Filename not present in diff: " + file);
+                    }
+                }
+                patches = sorted;
+            }
 
             var modified = new ArrayList<Integer>();
             for (var i = 0; i < patches.size(); i++) {
                 var patch = patches.get(i);
                 if (patch.status().isModified() || patch.status().isRenamed() || patch.status().isCopied()) {
