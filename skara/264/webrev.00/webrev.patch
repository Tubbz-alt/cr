diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -278,11 +278,11 @@
                 progressBody.append("): ");
                 progressBody.append(iss.get().title());
                 progressBody.append("\n");
             } else {
                 progressBody.append("⚠️ Failed to retrieve information on issue `");
-                progressBody.append(issue.get().toString());
+                progressBody.append(issue.get().id());
                 progressBody.append("`.\n");
             }
         }
 
         getReviewersList(reviews).ifPresent(reviewers -> {
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
@@ -46,11 +46,12 @@
     private final static Map<String, CommandHandler> commandHandlers = Map.of(
             "help", new HelpCommand(),
             "integrate", new IntegrateCommand(),
             "sponsor", new SponsorCommand(),
             "contributor", new ContributorCommand(),
-            "summary", new SummaryCommand()
+            "summary", new SummaryCommand(),
+            "solves", new SolvesCommand()
     );
 
     static class HelpCommand implements CommandHandler {
         static private Map<String, String> external = null;
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -80,15 +80,19 @@
         var additionalContributors = Contributors.contributors(pr.repository().forge().currentUser(),
                                                                comments).stream()
                                                  .map(email -> Author.fromString(email.toString()))
                                                  .collect(Collectors.toList());
 
+        var additionalIssues = SolvesTracker.currentSolved(pr.repository().forge().currentUser(), comments);
         var summary = Summary.summary(pr.repository().forge().currentUser(), comments);
         var issue = Issue.fromString(pr.title());
         var commitMessageBuilder = issue.map(CommitMessage::title).orElseGet(() -> CommitMessage.title(isMerge ? "Merge" : pr.title()));
+        if (issue.isPresent()) {
+            commitMessageBuilder.issues(additionalIssues);
+        }
         commitMessageBuilder.contributors(additionalContributors)
-                                         .reviewers(reviewers);
+                            .reviewers(reviewers);
         summary.ifPresent(commitMessageBuilder::summary);
 
         return String.join("\n", commitMessageBuilder.format(CommitMessageFormatters.v1));
     }
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesCommand.java
--- /dev/null
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesCommand.java
@@ -0,0 +1,99 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.pr;
+
+import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.issuetracker.Comment;
+import org.openjdk.skara.vcs.openjdk.Issue;
+
+import java.io.PrintWriter;
+import java.nio.file.Path;
+import java.util.List;
+import java.util.stream.Collectors;
+
+public class SolvesCommand implements CommandHandler {
+    private void showHelp(PrintWriter reply) {
+        reply.println("To add an additional issue to the list of issues that this PR solves: `/solves <id>: <description>`." +
+                              "To remove a previously added additional issue: `/solves <id>`.");
+    }
+
+    @Override
+    public void handle(PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
+        if (!comment.author().equals(pr.author())) {
+            reply.println("Only the author (@" + pr.author().userName() + ") is allowed to issue the `solves` command.");
+            return;
+        }
+
+        if (args.isBlank()) {
+            showHelp(reply);
+            return;
+        }
+
+        var currentSolved = SolvesTracker.currentSolved(pr.repository().forge().currentUser(), allComments)
+                                         .stream()
+                                         .map(Issue::id)
+                                         .collect(Collectors.toSet());
+
+        var issue = Issue.fromString(args);
+        if (issue.isEmpty()) {
+            issue = Issue.fromString(args + ": deleteme");
+            if (issue.isEmpty()) {
+                reply.println("Invalid command syntax.");
+                showHelp(reply);
+                return;
+            }
+
+            if (currentSolved.contains(issue.get().id())) {
+                reply.println(SolvesTracker.removeSolvesMarker(issue.get()));;
+                reply.println("Removing additional issue from solves list: `" + issue.get().id() + "`.");
+            } else {
+                reply.println("Could not find issue `" + issue.get().id() + "` in the list of additional solved issues.");
+            }
+            return;
+        }
+
+        var titleIssue = Issue.fromString(pr.title());
+        if (titleIssue.isEmpty()) {
+            reply.print("The primary solved issue for a PR is set through the PR title. Since the current title does ");
+            reply.println("not contain an issue reference, it will now be updated.");
+            pr.setTitle(issue.get().toString());
+            return;
+        }
+        if (titleIssue.get().id().equals(issue.get().id())) {
+            reply.println("This issue is referenced in the PR title - it will now be updated.");
+            pr.setTitle(issue.get().toString());
+            return;
+        }
+        reply.println(SolvesTracker.setSolvesMarker(issue.get()));
+        if (currentSolved.contains(issue.get().id())) {
+            reply.println("Updating description of additional solved issue: `" + issue.get().toString() + "`.");
+        } else {
+            reply.println("Adding additional issue to solves list: `" + issue.get().toString() + "`.");
+        }
+    }
+
+    @Override
+    public String description() {
+        return "add an additional issue that this PR solves";
+    }
+}
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesTracker.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesTracker.java
--- /dev/null
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesTracker.java
@@ -0,0 +1,67 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.pr;
+
+import org.openjdk.skara.host.HostUser;
+import org.openjdk.skara.issuetracker.Comment;
+import org.openjdk.skara.vcs.openjdk.Issue;
+
+import java.nio.charset.StandardCharsets;
+import java.util.*;
+import java.util.regex.*;
+import java.util.stream.Collectors;
+
+public class SolvesTracker {
+    private final static String solvesMarker = "<!-- solves: '%s' '%s' -->";
+    private final static Pattern markerPattern = Pattern.compile("<!-- solves: '(.*?)' '(.*?)' -->");
+
+    static String setSolvesMarker(Issue issue) {
+        var encodedDescription = Base64.getEncoder().encodeToString(issue.description().getBytes(StandardCharsets.UTF_8));
+        return String.format(solvesMarker, issue.id(), encodedDescription);
+    }
+
+    static String removeSolvesMarker(Issue issue) {
+        return String.format(solvesMarker, issue.id(), "");
+    }
+
+    static List<Issue> currentSolved(HostUser botUser, List<Comment> comments) {
+        var solvesActions = comments.stream()
+                                     .filter(comment -> comment.author().equals(botUser))
+                                     .map(comment -> markerPattern.matcher(comment.body()))
+                                     .filter(Matcher::find)
+                                     .collect(Collectors.toList());
+        var current = new LinkedHashMap<String, Issue>();
+        for (var action : solvesActions) {
+            var key = action.group(1);
+            if (action.group(2).equals("")) {
+                current.remove(key);
+            } else {
+                var decodedDescription = new String(Base64.getDecoder().decode(action.group(2)), StandardCharsets.UTF_8);
+                var issue = new Issue(key, decodedDescription);
+                current.put(key, issue);
+            }
+        }
+
+        return new ArrayList<>(current.values());
+    }
+}
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java
--- /dev/null
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java
@@ -0,0 +1,232 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.pr;
+
+import org.junit.jupiter.api.*;
+import org.openjdk.skara.forge.Review;
+import org.openjdk.skara.issuetracker.Comment;
+import org.openjdk.skara.test.*;
+import org.openjdk.skara.vcs.Repository;
+
+import java.io.IOException;
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.*;
+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertLastCommentContains;
+
+class SolvesTests {
+    @Test
+    void simple(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addReviewer(integrator.forge().currentUser().id())
+                                           .addCommitter(author.forge().currentUser().id());
+            var prBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
+
+            // Populate the projects repository
+            var localRepoFolder = tempFolder.path().resolve("localrepo");
+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.url(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "123: This is a pull request");
+
+            // No arguments
+            pr.addComment("/solves");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a help message
+            assertLastCommentContains(pr,"To add an additional");
+
+            // Invalid syntax
+            pr.addComment("/solves something I guess");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a failure message
+            assertLastCommentContains(pr,"Invalid");
+
+            // Add an issue
+            pr.addComment("/solves 1234: An issue");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a success message
+            assertLastCommentContains(pr,"Adding additional");
+
+            // Try to remove a not-previously-added issue
+            pr.addComment("/solves 1235");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a failure message
+            assertLastCommentContains(pr,"Could not find");
+
+            // Now remove the added one
+            pr.addComment("/solves 1234");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a success message
+            assertLastCommentContains(pr,"Removing additional");
+
+            // Add two more issues
+            pr.addComment("/solves 12345: Another issue");
+            pr.addComment("/solves 123456: Yet another issue");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a success message
+            assertLastCommentContains(pr,"Adding additional");
+
+            // Update the description of the first one
+            pr.addComment("/solves 12345: This is indeed another issue");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a success message
+            assertLastCommentContains(pr,"Updating description");
+
+            // Approve it as another user
+            var approvalPr = integrator.pullRequest(pr.id());
+            approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
+            TestBotRunner.runPeriodicItems(prBot);
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The commit message preview should contain the additional issues
+            var preview = pr.comments().stream()
+                            .filter(comment -> comment.body().contains("The commit message will be"))
+                            .map(Comment::body)
+                            .findFirst()
+                            .orElseThrow();
+            assertTrue(preview.contains("123: This is a pull request"));
+            assertTrue(preview.contains("12345: This is indeed another issue"));
+            assertTrue(preview.contains("123456: Yet another issue"));
+
+            // Integrate
+            pr.addComment("/integrate");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with an ok message
+            assertLastCommentContains(pr,"Pushed as commit");
+
+            // The change should now be present on the master branch
+            var pushedFolder = tempFolder.path().resolve("pushed");
+            var pushedRepo = Repository.materialize(pushedFolder, author.url(), "master");
+            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));
+
+            var headHash = pushedRepo.resolve("HEAD").orElseThrow();
+            var headCommit = pushedRepo.commits(headHash.hex() + "^.." + headHash.hex()).asList().get(0);
+
+            // The additional issues should be present in the commit message
+            assertEquals(List.of("123: This is a pull request",
+                                 "12345: This is indeed another issue",
+                                 "123456: Yet another issue",
+                                 "",
+                                 "Reviewed-by: integrationreviewer1"), headCommit.message());
+        }
+    }
+
+    @Test
+    void invalidCommandAuthor(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+            var external = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.forge().currentUser().id());
+            var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.url(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+
+            // Issue a solves command not as the PR author
+            var externalPr = external.pullRequest(pr.id());
+            externalPr.addComment("/solves 1234: an issue");
+            TestBotRunner.runPeriodicItems(mergeBot);
+
+            // The bot should reply with an error message
+            var error = pr.comments().stream()
+                          .filter(comment -> comment.body().contains("Only the author"))
+                          .count();
+            assertEquals(1, error);
+        }
+    }
+
+    @Test
+    void issueInTitle(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+            var external = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.forge().currentUser().id());
+            var prBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.url(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+
+            // Add an issue
+            pr.addComment("/solves 1234: An issue");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a success message
+            assertLastCommentContains(pr,"current title");
+
+            var updatedPr = author.pullRequest(pr.id());
+            assertEquals("1234: An issue", updatedPr.title());
+
+            // Update the issue description
+            pr.addComment("/solves 1234: Yes this is an issue");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a success message
+            assertLastCommentContains(pr,"will now be updated");
+
+            updatedPr = author.pullRequest(pr.id());
+            assertEquals("1234: Yes this is an issue", updatedPr.title());
+        }
+    }
+}
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SummaryTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SummaryTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SummaryTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SummaryTests.java
@@ -166,7 +166,6 @@
                           .filter(comment -> comment.body().contains("Only the author"))
                           .count();
             assertEquals(1, error);
         }
     }
-
 }
