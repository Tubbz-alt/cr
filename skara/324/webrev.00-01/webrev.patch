diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
@@ -35,18 +35,24 @@
 import java.util.List;
 import java.util.logging.Logger;
 
 public class IssueUpdater implements RepositoryUpdateConsumer, PullRequestUpdateConsumer {
     private final IssueProject issueProject;
+    private final boolean reviewLink;
     private final URI reviewIcon;
+    private final boolean commitLink;
     private final URI commitIcon;
+    private final String fixVersion;
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.notify");
 
-    IssueUpdater(IssueProject issueProject, URI reviewIcon, URI commitIcon) {
+    IssueUpdater(IssueProject issueProject, boolean reviewLink, URI reviewIcon, boolean commitLink, URI commitIcon, String fixVersion) {
         this.issueProject = issueProject;
+        this.reviewLink = reviewLink;
         this.reviewIcon = reviewIcon;
+        this.commitLink = commitLink;
         this.commitIcon = commitIcon;
+        this.fixVersion = fixVersion;
     }
 
     @Override
     public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) {
         for (var commit : commits) {
@@ -60,27 +66,35 @@
                     continue;
                 }
                 issue.get().addComment(commitNotification);
                 issue.get().setState(Issue.State.RESOLVED);
 
-                var linkBuilder = Link.create(repository.webUrl(commit.hash()), "Commit")
-                                      .summary(repository.name() + "/" + commit.hash().abbreviate());
-                if (commitIcon != null) {
-                    linkBuilder.iconTitle("Commit");
-                    linkBuilder.iconUrl(commitIcon);
+                if (commitLink) {
+                    var linkBuilder = Link.create(repository.webUrl(commit.hash()), "Commit")
+                                          .summary(repository.name() + "/" + commit.hash().abbreviate());
+                    if (commitIcon != null) {
+                        linkBuilder.iconTitle("Commit");
+                        linkBuilder.iconUrl(commitIcon);
+                    }
+                    issue.get().addLink(linkBuilder.build());
                 }
-                issue.get().addLink(linkBuilder.build());
-
-                try {
-                    var conf = localRepository.lines(Path.of(".jcheck/conf"), commit.hash());
-                    if (conf.isPresent()) {
-                        var parsed = JCheckConfiguration.parse(conf.get());
-                        var version = parsed.general().version();
-                        version.ifPresent(v -> issue.get().addFixVersion(v));
+
+                if (fixVersion != null) {
+                    if (fixVersion.equals("<repo>")) {
+                        try {
+                            var conf = localRepository.lines(Path.of(".jcheck/conf"), commit.hash());
+                            if (conf.isPresent()) {
+                                var parsed = JCheckConfiguration.parse(conf.get());
+                                var version = parsed.general().version();
+                                version.ifPresent(v -> issue.get().addFixVersion(v));
+                            }
+                        } catch (IOException e) {
+                            throw new RuntimeException(e);
+                        }
+                    } else {
+                        issue.get().addFixVersion(fixVersion);
                     }
-                } catch (IOException e) {
-                    throw new RuntimeException(e);
                 }
             }
         }
     }
 
@@ -105,18 +119,20 @@
         if (realIssue.isEmpty()) {
             log.warning("Pull request " + pr + " added unknown issue: " + issue.id());
             return;
         }
 
-        var linkBuilder = Link.create(pr.webUrl(), "Review")
-                              .summary(pr.repository().name() + "/" + pr.id());
-        if (reviewIcon != null) {
-            linkBuilder.iconTitle("Review");
-            linkBuilder.iconUrl(reviewIcon);
-        }
+        if (reviewLink) {
+            var linkBuilder = Link.create(pr.webUrl(), "Review")
+                                  .summary(pr.repository().name() + "/" + pr.id());
+            if (reviewIcon != null) {
+                linkBuilder.iconTitle("Review");
+                linkBuilder.iconUrl(reviewIcon);
+            }
 
-        realIssue.get().addLink(linkBuilder.build());
+            realIssue.get().addLink(linkBuilder.build());
+        }
     }
 
     @Override
     public void handleRemovedIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
         var realIssue = issueProject.issue(issue.id());
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
@@ -131,12 +131,25 @@
                     updaters.add(new MailingListUpdater(listServer.getList(recipient), recipientAddress, sender, author,
                                                         includeBranchNames, mode, headers, allowedDomains));
                 }
             }
             if (repo.value().contains("issues")) {
-                var issueProject = configuration.issueProject(repo.value().get("issues").asString());
-                var updater = new IssueUpdater(issueProject, reviewIcon, commitIcon);
+                var issuesConf = repo.value().get("issues");
+                var issueProject = configuration.issueProject(issuesConf.get("project").asString());
+                var reviewLink = true;
+                if (issuesConf.contains("reviewlink")) {
+                    reviewLink = issuesConf.get("reviewlink").asBoolean();
+                }
+                var commitLink = true;
+                if (issuesConf.contains("commitlink")) {
+                    commitLink = issuesConf.get("commitlink").asBoolean();
+                }
+                String fixversion = null;
+                if (issuesConf.contains("fixversion")) {
+                    fixversion = issuesConf.get("fixversion").asString();
+                }
+                var updater = new IssueUpdater(issueProject, reviewLink, reviewIcon, commitLink, commitIcon, fixversion);
                 updaters.add(updater);
                 prUpdaters.add(updater);
             }
 
             if (updaters.isEmpty()) {
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -761,11 +761,11 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var commitIcon = URI.create("http://www.example.com/commit.png");
-            var updater = new IssueUpdater(issueProject, null, commitIcon);
+            var updater = new IssueUpdater(issueProject, false, null, true, commitIcon, "<repo>");
             var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
                                           prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -816,11 +816,11 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var commitIcon = URI.create("http://www.example.com/commit.png");
-            var updater = new IssueUpdater(issueProject, null, commitIcon);
+            var updater = new IssueUpdater(issueProject, false, null, true, commitIcon, "<repo>");
             var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
                                           prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -844,10 +844,61 @@
             // There should be no open issues
             assertEquals(0, issueProject.issues().size());
         }
     }
 
+    @Test
+    void testIssueConfiguredVersionNoCommit(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of("appendable.txt"), Set.of(), null);
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var commitIcon = URI.create("http://www.example.com/commit.png");
+            var updater = new IssueUpdater(issueProject, false, null, false, commitIcon, "2.0");
+            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
+                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Create an issue and commit a fix
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
+            localRepo.push(editHash, repo.url(), "master");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The changeset should not reflected in a comment
+            var comments = issue.comments();
+            assertEquals(1, comments.size());
+            var comment = comments.get(0);
+            assertTrue(comment.body().contains(editHash.abbreviate()));
+
+            // As well as a fixVersion - but not the one from the repo
+            var fixVersions = issue.fixVersions();
+            assertEquals(1, fixVersions.size());
+            var fixVersion = fixVersions.get(0);
+            assertEquals("2.0", fixVersion);
+
+            // And no commit link
+            var links = issue.links();
+            assertEquals(0, links.size());
+
+            // There should be no open issues
+            assertEquals(0, issueProject.issues().size());
+        }
+    }
+
     @Test
     void testPullRequest(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var repo = credentials.getHostedRepository();
@@ -862,11 +913,11 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var reviewIcon = URI.create("http://www.example.com/review.png");
-            var updater = new IssueUpdater(issueProject, reviewIcon, null);
+            var updater = new IssueUpdater(issueProject, true, reviewIcon, false, null, null);
             var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
                                           prIssuesStorage, List.of(), List.of(updater), Set.of("rfr"),
                                           Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")));
 
             // Initialize history
@@ -932,6 +983,54 @@
             links2 = issue2.links();
             assertEquals(1, links2.size());
             assertEquals(pr.webUrl(), links2.get(0).uri());
         }
     }
+
+    @Test
+    void testPullRequestNoReview(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var reviewer = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var reviewIcon = URI.create("http://www.example.com/review.png");
+            var updater = new IssueUpdater(issueProject, false, reviewIcon, false, null, null);
+            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
+                                          prIssuesStorage, List.of(), List.of(updater), Set.of("rfr"),
+                                          Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")));
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Create an issue and a pull request to fix it
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix that issue");
+            localRepo.push(editHash, repo.url(), "edit", true);
+            var pr = credentials.createPullRequest(repo, "edit", "master", issue.id() + ": Fix that issue");
+            pr.setBody("\n\n## Issue\n[" + issue.id() + "](http://www.test.test/): The issue");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Add required label
+            pr.addLabel("rfr");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // And the required comment
+            var reviewPr = reviewer.pullRequest(pr.id());
+            reviewPr.addComment("This is now ready");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The issue should still not contain a link to the PR
+            var links = issue.links();
+            assertEquals(0, links.size());
+        }
+    }
 }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -754,11 +754,11 @@
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master", Map.of(), Map.of(),
                                               Map.of(), Set.of(), Map.of());
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of("appendable.txt"),
-                                                     Set.of("issues"));
+                                                     Set.of("issues"), null);
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.url(), "master", true);
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
@@ -802,11 +802,11 @@
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master", Map.of(), Map.of(),
                                               Map.of(), Set.of(), Map.of(), issues);
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of("appendable.txt"),
-                                                     Set.of("issues"));
+                                                     Set.of("issues"), null);
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.url(), "master", true);
 
             var issue1 = issues.createIssue("My first issue", List.of("Hello"));
 
@@ -944,11 +944,11 @@
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Enable a new check in the target branch
             localRepo.checkout(masterHash, true);
             CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of("appendable.txt"),
-                                     Set.of("author", "reviewers", "whitespace", "issues"));
+                                     Set.of("author", "reviewers", "whitespace", "issues"), null);
             var headHash = localRepo.resolve("HEAD").orElseThrow();
             localRepo.push(headHash, author.url(), "master", true);
 
             // Check the status
             TestBotRunner.runPeriodicItems(checkBot);
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
@@ -196,11 +196,11 @@
                                            .addAuthor(author.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository - but without any checks enabled
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of("appendable.txt"),
-                                                     Set.of());
+                                                     Set.of(), null);
             var masterHash = localRepo.resolve("master").orElseThrow();
             assertFalse(CheckableRepository.hasBeenEdited(localRepo));
             localRepo.push(masterHash, author.url(), "master", true);
 
             // Make a change with a corresponding PR
@@ -209,11 +209,11 @@
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Now enable checks
             localRepo.checkout(masterHash, true);
             CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of("appendable.txt"),
-                                     Set.of("author", "reviewers", "whitespace"));
+                                     Set.of("author", "reviewers", "whitespace"), null);
             var updatedHash = localRepo.resolve("HEAD").orElseThrow();
             localRepo.push(updatedHash, author.url(), "master", true);
 
             // Attempt a merge
             pr.addComment("/integrate");
