diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -193,11 +193,11 @@
 
         list.post(email);
     }
 
     @Override
-    public void handleCommits(HostedRepository repository, List<Commit> commits, Branch branch) {
+    public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) {
         switch (mode) {
             case PR_ONLY:
                 filterAndSendPrCommits(repository, commits);
                 break;
             case PR:
@@ -208,11 +208,11 @@
                 break;
         }
     }
 
     @Override
-    public void handleOpenJDKTagCommits(HostedRepository repository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) {
+    public void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) {
         if (mode == Mode.PR_ONLY) {
             return;
         }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
@@ -247,11 +247,11 @@
 
         list.post(email.build());
     }
 
     @Override
-    public void handleTagCommit(HostedRepository repository, Commit commit, Tag tag, Tag.Annotated annotation) {
+    public void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) {
         if (mode == Mode.PR_ONLY) {
             return;
         }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
@@ -274,11 +274,11 @@
         }
 
         list.post(email.build());
     }
 
-    private String newBranchSubject(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch) {
+    private String newBranchSubject(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) {
         var subject = new StringBuilder();
         subject.append(repository.repositoryType().shortName());
         subject.append(": ");
         subject.append(repository.name());
         subject.append(": created branch ");
@@ -294,11 +294,11 @@
 
         return subject.toString();
     }
 
     @Override
-    public void handleNewBranch(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch) {
+    public void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) {
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
         if (commits.size() > 0) {
             printer.println("The following commits are unique to the " + branch.name() + " branch:");
@@ -312,11 +312,11 @@
             }
         } else {
             printer.println("The new branch " + branch.name() + " is currently identical to the " + parent.name() + " branch.");
         }
 
-        var subject = newBranchSubject(repository, commits, parent, branch);
+        var subject = newBranchSubject(repository, localRepository, commits, parent, branch);
         var finalAuthor = commits.size() > 0 ? commitToAuthor(commits.get(commits.size() - 1)) : sender;
 
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
                          .author(finalAuthor)
