diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
@@ -79,18 +79,18 @@
                                                " detected (" + bestParent.getValue().size() + ") - skipping notifications");
         }
         for (var updater : updaters) {
             var branch = new Branch(ref.name());
             var parent = new Branch(bestParent.getKey().name());
-            updater.handleNewBranch(repository, bestParent.getValue(), parent, branch);
+            updater.handleNewBranch(repository, localRepo, bestParent.getValue(), parent, branch);
         }
     }
 
     private void handleUpdatedRef(Repository localRepo, Reference ref, List<Commit> commits) {
         for (var updater : updaters) {
             var branch = new Branch(ref.name());
-            updater.handleCommits(repository, commits, branch);
+            updater.handleCommits(repository, localRepo, commits, branch);
         }
     }
 
     private void handleRef(Repository localRepo, UpdateHistory history, Reference ref, Collection<Reference> allRefs) throws IOException {
         var branch = new Branch(ref.name());
@@ -182,11 +182,11 @@
             }
 
             Collections.reverse(commits);
             var annotation = localRepo.annotate(tag.tag());
             for (var updater : updaters) {
-                updater.handleOpenJDKTagCommits(repository, commits, tag, annotation.orElse(null));
+                updater.handleOpenJDKTagCommits(repository, localRepo, commits, tag, annotation.orElse(null));
             }
         }
 
         var newNonJdkTags = newTags.stream()
                                    .filter(tag -> OpenJDKTag.create(tag).isEmpty())
@@ -200,11 +200,11 @@
                 throw new RuntimeException("Failed to lookup tag '" + tag.toString() + "'");
             }
 
             var annotation = localRepo.annotate(tag);
             for (var updater : updaters) {
-                updater.handleTagCommit(repository, commit.get(), tag, annotation.orElse(null));
+                updater.handleTagCommit(repository, localRepo, commit.get(), tag, annotation.orElse(null));
             }
         }
     }
 
     private Repository fetchAll(Path dir, URI remote) throws IOException {
