diff a/.jcheck/conf b/.jcheck/conf
--- a/.jcheck/conf
+++ b/.jcheck/conf
@@ -23,10 +23,11 @@
 
 [general]
 project=skara
 repository=skara
 jbs=skara
+version=0.9
 
 [checks]
 error=author,reviewers,whitespace
 
 [census]
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
@@ -21,33 +21,44 @@
  * questions.
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.forge.*;
-import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.issuetracker.Issue;
+import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.jcheck.JCheckConfiguration;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.*;
 
+import java.io.IOException;
 import java.net.URI;
+import java.nio.file.Path;
 import java.util.List;
 import java.util.logging.Logger;
 
 public class IssueUpdater implements RepositoryUpdateConsumer, PullRequestUpdateConsumer {
     private final IssueProject issueProject;
+    private final boolean reviewLink;
     private final URI reviewIcon;
+    private final boolean commitLink;
     private final URI commitIcon;
+    private final boolean setFixVersion;
+    private final String fixVersion;
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.notify");
 
-    IssueUpdater(IssueProject issueProject, URI reviewIcon, URI commitIcon) {
+    IssueUpdater(IssueProject issueProject, boolean reviewLink, URI reviewIcon, boolean commitLink, URI commitIcon,boolean setFixVersion, String fixVersion) {
         this.issueProject = issueProject;
+        this.reviewLink = reviewLink;
         this.reviewIcon = reviewIcon;
+        this.commitLink = commitLink;
         this.commitIcon = commitIcon;
+        this.setFixVersion = setFixVersion;
+        this.fixVersion = fixVersion;
     }
 
     @Override
-    public void handleCommits(HostedRepository repository, List<Commit> commits, Branch branch) {
+    public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) {
         for (var commit : commits) {
             var commitNotification = CommitFormatters.toTextBrief(repository, commit);
             var commitMessage = CommitMessageParsers.v1.parse(commit);
             for (var commitIssue : commitMessage.issues()) {
                 var issue = issueProject.issue(commitIssue.id());
@@ -57,33 +68,52 @@
                     continue;
                 }
                 issue.get().addComment(commitNotification);
                 issue.get().setState(Issue.State.RESOLVED);
 
-                var linkBuilder = Link.create(repository.webUrl(commit.hash()), "Commit")
-                                      .summary(repository.name() + "/" + commit.hash().abbreviate());
-                if (commitIcon != null) {
-                    linkBuilder.iconTitle("Commit");
-                    linkBuilder.iconUrl(commitIcon);
+                if (commitLink) {
+                    var linkBuilder = Link.create(repository.webUrl(commit.hash()), "Commit")
+                                          .summary(repository.name() + "/" + commit.hash().abbreviate());
+                    if (commitIcon != null) {
+                        linkBuilder.iconTitle("Commit");
+                        linkBuilder.iconUrl(commitIcon);
+                    }
+                    issue.get().addLink(linkBuilder.build());
+                }
+
+                if (setFixVersion) {
+                    if (fixVersion == null) {
+                        try {
+                            var conf = localRepository.lines(Path.of(".jcheck/conf"), commit.hash());
+                            if (conf.isPresent()) {
+                                var parsed = JCheckConfiguration.parse(conf.get());
+                                var version = parsed.general().version();
+                                version.ifPresent(v -> issue.get().addFixVersion(v));
+                            }
+                        } catch (IOException e) {
+                            throw new RuntimeException(e);
+                        }
+                    } else {
+                        issue.get().addFixVersion(fixVersion);
+                    }
                 }
-                issue.get().addLink(linkBuilder.build());
             }
         }
     }
 
     @Override
-    public void handleOpenJDKTagCommits(HostedRepository repository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) {
+    public void handleOpenJDKTagCommits(HostedRepository repository, Repository loclRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) {
 
     }
 
     @Override
-    public void handleTagCommit(HostedRepository repository, Commit commit, Tag tag, Tag.Annotated annotation) {
+    public void handleTagCommit(HostedRepository repository, Repository loclRepository, Commit commit, Tag tag, Tag.Annotated annotation) {
 
     }
 
     @Override
-    public void handleNewBranch(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch) {
+    public void handleNewBranch(HostedRepository repository, Repository loclRepository, List<Commit> commits, Branch parent, Branch branch) {
 
     }
 
     @Override
     public void handleNewIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
@@ -91,18 +121,20 @@
         if (realIssue.isEmpty()) {
             log.warning("Pull request " + pr + " added unknown issue: " + issue.id());
             return;
         }
 
-        var linkBuilder = Link.create(pr.webUrl(), "Review")
-                              .summary(pr.repository().name() + "/" + pr.id());
-        if (reviewIcon != null) {
-            linkBuilder.iconTitle("Review");
-            linkBuilder.iconUrl(reviewIcon);
-        }
+        if (reviewLink) {
+            var linkBuilder = Link.create(pr.webUrl(), "Review")
+                                  .summary(pr.repository().name() + "/" + pr.id());
+            if (reviewIcon != null) {
+                linkBuilder.iconTitle("Review");
+                linkBuilder.iconUrl(reviewIcon);
+            }
 
-        realIssue.get().addLink(linkBuilder.build());
+            realIssue.get().addLink(linkBuilder.build());
+        }
     }
 
     @Override
     public void handleRemovedIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
         var realIssue = issueProject.issue(issue.id());
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
@@ -40,11 +40,11 @@
         this.path = path;
         this.version = version;
         this.defaultBuild = defaultBuild;
     }
 
-    private JSONObject commitToChanges(HostedRepository repository, Commit commit, String build) {
+    private JSONObject commitToChanges(HostedRepository repository, Repository localRepository, Commit commit, String build) {
         var ret = JSON.object();
         ret.put("url",  repository.webUrl(commit.hash()).toString()); //FIXME
         ret.put("version", version);
         ret.put("build", build);
 
@@ -58,11 +58,11 @@
         ret.put("date", commit.date().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss +0000")));
 
         return ret;
     }
 
-    private JSONObject issuesToChanges(HostedRepository repository, List<Issue> issues, String build) {
+    private JSONObject issuesToChanges(HostedRepository repository, Repository localRepository, List<Issue> issues, String build) {
         var ret = JSON.object();
         ret.put("version", version);
         ret.put("build", build);
 
         var issueIds = JSON.array();
@@ -74,36 +74,36 @@
 
         return ret;
     }
 
     @Override
-    public void handleCommits(HostedRepository repository, List<Commit> commits, Branch branch) {
+    public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) {
         try (var writer = new JsonUpdateWriter(path, repository.name())) {
             for (var commit : commits) {
-                var json = commitToChanges(repository, commit, defaultBuild);
+                var json = commitToChanges(repository, localRepository, commit, defaultBuild);
                 writer.write(json);
             }
         }
     }
 
     @Override
-    public void handleOpenJDKTagCommits(HostedRepository repository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) {
+    public void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) {
         var build = String.format("b%02d", tag.buildNum());
         try (var writer = new JsonUpdateWriter(path, repository.name())) {
             var issues = new ArrayList<Issue>();
             for (var commit : commits) {
                 var parsedMessage = CommitMessageParsers.v1.parse(commit);
                 issues.addAll(parsedMessage.issues());
             }
-            var json = issuesToChanges(repository, issues, build);
+            var json = issuesToChanges(repository, localRepository, issues, build);
             writer.write(json);
         }
     }
 
     @Override
-    public void handleTagCommit(HostedRepository repository, Commit commit, Tag tag, Tag.Annotated annotation) {
+    public void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) {
     }
 
     @Override
-    public void handleNewBranch(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch) {
+    public void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) {
     }
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -193,11 +193,11 @@
 
         list.post(email);
     }
 
     @Override
-    public void handleCommits(HostedRepository repository, List<Commit> commits, Branch branch) {
+    public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) {
         switch (mode) {
             case PR_ONLY:
                 filterAndSendPrCommits(repository, commits);
                 break;
             case PR:
@@ -208,11 +208,11 @@
                 break;
         }
     }
 
     @Override
-    public void handleOpenJDKTagCommits(HostedRepository repository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) {
+    public void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) {
         if (mode == Mode.PR_ONLY) {
             return;
         }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
@@ -247,11 +247,11 @@
 
         list.post(email.build());
     }
 
     @Override
-    public void handleTagCommit(HostedRepository repository, Commit commit, Tag tag, Tag.Annotated annotation) {
+    public void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) {
         if (mode == Mode.PR_ONLY) {
             return;
         }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
@@ -274,11 +274,11 @@
         }
 
         list.post(email.build());
     }
 
-    private String newBranchSubject(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch) {
+    private String newBranchSubject(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) {
         var subject = new StringBuilder();
         subject.append(repository.repositoryType().shortName());
         subject.append(": ");
         subject.append(repository.name());
         subject.append(": created branch ");
@@ -294,11 +294,11 @@
 
         return subject.toString();
     }
 
     @Override
-    public void handleNewBranch(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch) {
+    public void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) {
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
         if (commits.size() > 0) {
             printer.println("The following commits are unique to the " + branch.name() + " branch:");
@@ -312,11 +312,11 @@
             }
         } else {
             printer.println("The new branch " + branch.name() + " is currently identical to the " + parent.name() + " branch.");
         }
 
-        var subject = newBranchSubject(repository, commits, parent, branch);
+        var subject = newBranchSubject(repository, localRepository, commits, parent, branch);
         var finalAuthor = commits.size() > 0 ? commitToAuthor(commits.get(commits.size() - 1)) : sender;
 
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
                          .author(finalAuthor)
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
@@ -131,12 +131,27 @@
                     updaters.add(new MailingListUpdater(listServer.getList(recipient), recipientAddress, sender, author,
                                                         includeBranchNames, mode, headers, allowedDomains));
                 }
             }
             if (repo.value().contains("issues")) {
-                var issueProject = configuration.issueProject(repo.value().get("issues").asString());
-                var updater = new IssueUpdater(issueProject, reviewIcon, commitIcon);
+                var issuesConf = repo.value().get("issues");
+                var issueProject = configuration.issueProject(issuesConf.get("project").asString());
+                var reviewLink = true;
+                if (issuesConf.contains("reviewlink")) {
+                    reviewLink = issuesConf.get("reviewlink").asBoolean();
+                }
+                var commitLink = true;
+                if (issuesConf.contains("commitlink")) {
+                    commitLink = issuesConf.get("commitlink").asBoolean();
+                }
+                var setFixVersion = false;
+                String fixVersion = null;
+                if (issuesConf.contains("fixversion")) {
+                    setFixVersion = true;
+                    fixVersion = issuesConf.get("fixversion").asString();
+                }
+                var updater = new IssueUpdater(issueProject, reviewLink, reviewIcon, commitLink, commitIcon, setFixVersion, fixVersion);
                 updaters.add(updater);
                 prUpdaters.add(updater);
             }
 
             if (updaters.isEmpty()) {
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java
@@ -27,17 +27,17 @@
 import org.openjdk.skara.vcs.openjdk.OpenJDKTag;
 
 import java.util.List;
 
 public interface RepositoryUpdateConsumer {
-    void handleCommits(HostedRepository repository, List<Commit> commits, Branch branch);
-    void handleOpenJDKTagCommits(HostedRepository repository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated);
-    void handleTagCommit(HostedRepository repository, Commit commit, Tag tag, Tag.Annotated annotation);
-    void handleNewBranch(HostedRepository repository, List<Commit> commits, Branch parent, Branch branch);
+    void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch);
+    void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated);
+    void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation);
+    void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch);
 
-    default void handleOpenJDKTagCommits(HostedRepository repository, List<Commit> commits, OpenJDKTag tag) {
-        handleOpenJDKTagCommits(repository, commits, tag, null);
+    default void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag) {
+        handleOpenJDKTagCommits(repository, localRepository, commits, tag, null);
     }
-    default void handleTagCommit(HostedRepository repository, Commit commit, Tag tag) {
-        handleTagCommit(repository, commit, tag, null);
+    default void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag) {
+        handleTagCommit(repository, localRepository, commit, tag, null);
     }
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
@@ -79,18 +79,18 @@
                                                " detected (" + bestParent.getValue().size() + ") - skipping notifications");
         }
         for (var updater : updaters) {
             var branch = new Branch(ref.name());
             var parent = new Branch(bestParent.getKey().name());
-            updater.handleNewBranch(repository, bestParent.getValue(), parent, branch);
+            updater.handleNewBranch(repository, localRepo, bestParent.getValue(), parent, branch);
         }
     }
 
     private void handleUpdatedRef(Repository localRepo, Reference ref, List<Commit> commits) {
         for (var updater : updaters) {
             var branch = new Branch(ref.name());
-            updater.handleCommits(repository, commits, branch);
+            updater.handleCommits(repository, localRepo, commits, branch);
         }
     }
 
     private void handleRef(Repository localRepo, UpdateHistory history, Reference ref, Collection<Reference> allRefs) throws IOException {
         var branch = new Branch(ref.name());
@@ -182,11 +182,11 @@
             }
 
             Collections.reverse(commits);
             var annotation = localRepo.annotate(tag.tag());
             for (var updater : updaters) {
-                updater.handleOpenJDKTagCommits(repository, commits, tag, annotation.orElse(null));
+                updater.handleOpenJDKTagCommits(repository, localRepo, commits, tag, annotation.orElse(null));
             }
         }
 
         var newNonJdkTags = newTags.stream()
                                    .filter(tag -> OpenJDKTag.create(tag).isEmpty())
@@ -200,11 +200,11 @@
                 throw new RuntimeException("Failed to lookup tag '" + tag.toString() + "'");
             }
 
             var annotation = localRepo.annotate(tag);
             for (var updater : updaters) {
-                updater.handleTagCommit(repository, commit.get(), tag, annotation.orElse(null));
+                updater.handleTagCommit(repository, localRepo, commit.get(), tag, annotation.orElse(null));
             }
         }
     }
 
     private Repository fetchAll(Path dir, URI remote) throws IOException {
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -761,11 +761,11 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var commitIcon = URI.create("http://www.example.com/commit.png");
-            var updater = new IssueUpdater(issueProject, null, commitIcon);
+            var updater = new IssueUpdater(issueProject, false, null, true, commitIcon, true, null);
             var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
                                           prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -788,10 +788,112 @@
             var link = links.get(0);
             assertEquals(commitIcon, link.iconUrl().orElseThrow());
             assertEquals("Commit", link.title());
             assertEquals(repo.webUrl(editHash), link.uri());
 
+            // As well as a fixVersion
+            var fixVersions = issue.fixVersions();
+            assertEquals(1, fixVersions.size());
+            var fixVersion = fixVersions.get(0);
+            assertEquals("0.1", fixVersion);
+
+            // There should be no open issues
+            assertEquals(0, issueProject.issues().size());
+        }
+    }
+
+    @Test
+    void testIssueNoVersion(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of("appendable.txt"), Set.of(), null);
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var commitIcon = URI.create("http://www.example.com/commit.png");
+            var updater = new IssueUpdater(issueProject, false, null, true, commitIcon, true, null);
+            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
+                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Create an issue and commit a fix
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
+            localRepo.push(editHash, repo.url(), "master");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The changeset should be reflected in a comment
+            var comments = issue.comments();
+            assertEquals(1, comments.size());
+            var comment = comments.get(0);
+            assertTrue(comment.body().contains(editHash.abbreviate()));
+
+            // But not in the fixVersion
+            var fixVersions = issue.fixVersions();
+            assertEquals(0, fixVersions.size());
+
+            // There should be no open issues
+            assertEquals(0, issueProject.issues().size());
+        }
+    }
+
+    @Test
+    void testIssueConfiguredVersionNoCommit(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of("appendable.txt"), Set.of(), null);
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var commitIcon = URI.create("http://www.example.com/commit.png");
+            var updater = new IssueUpdater(issueProject, false, null, false, commitIcon, true,"2.0");
+            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
+                                          prIssuesStorage, List.of(updater), List.of(), Set.of(), Map.of());
+
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Create an issue and commit a fix
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
+            localRepo.push(editHash, repo.url(), "master");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The changeset should not reflected in a comment
+            var comments = issue.comments();
+            assertEquals(1, comments.size());
+            var comment = comments.get(0);
+            assertTrue(comment.body().contains(editHash.abbreviate()));
+
+            // As well as a fixVersion - but not the one from the repo
+            var fixVersions = issue.fixVersions();
+            assertEquals(1, fixVersions.size());
+            var fixVersion = fixVersions.get(0);
+            assertEquals("2.0", fixVersion);
+
+            // And no commit link
+            var links = issue.links();
+            assertEquals(0, links.size());
+
             // There should be no open issues
             assertEquals(0, issueProject.issues().size());
         }
     }
 
@@ -811,11 +913,11 @@
             var prIssuesStorage = createPullRequestIssuesStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var reviewIcon = URI.create("http://www.example.com/review.png");
-            var updater = new IssueUpdater(issueProject, reviewIcon, null);
+            var updater = new IssueUpdater(issueProject, true, reviewIcon, false, null, false, null);
             var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
                                           prIssuesStorage, List.of(), List.of(updater), Set.of("rfr"),
                                           Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")));
 
             // Initialize history
@@ -881,6 +983,54 @@
             links2 = issue2.links();
             assertEquals(1, links2.size());
             assertEquals(pr.webUrl(), links2.get(0).uri());
         }
     }
+
+    @Test
+    void testPullRequestNoReview(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var reviewer = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var reviewIcon = URI.create("http://www.example.com/review.png");
+            var updater = new IssueUpdater(issueProject, false, reviewIcon, false, null, false,null);
+            var notifyBot = new NotifyBot(repo, storageFolder, Pattern.compile("master"), tagStorage, branchStorage,
+                                          prIssuesStorage, List.of(), List.of(updater), Set.of("rfr"),
+                                          Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")));
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Create an issue and a pull request to fix it
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"));
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix that issue");
+            localRepo.push(editHash, repo.url(), "edit", true);
+            var pr = credentials.createPullRequest(repo, "edit", "master", issue.id() + ": Fix that issue");
+            pr.setBody("\n\n## Issue\n[" + issue.id() + "](http://www.test.test/): The issue");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Add required label
+            pr.addLabel("rfr");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // And the required comment
+            var reviewPr = reviewer.pullRequest(pr.id());
+            reviewPr.addComment("This is now ready");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The issue should still not contain a link to the PR
+            var links = issue.links();
+            assertEquals(0, links.size());
+        }
+    }
 }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -754,11 +754,11 @@
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master", Map.of(), Map.of(),
                                               Map.of(), Set.of(), Map.of());
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of("appendable.txt"),
-                                                     Set.of("issues"));
+                                                     Set.of("issues"), null);
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.url(), "master", true);
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
@@ -802,11 +802,11 @@
             var checkBot = new PullRequestBot(author, censusBuilder.build(), "master", Map.of(), Map.of(),
                                               Map.of(), Set.of(), Map.of(), issues);
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of("appendable.txt"),
-                                                     Set.of("issues"));
+                                                     Set.of("issues"), null);
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.url(), "master", true);
 
             var issue1 = issues.createIssue("My first issue", List.of("Hello"));
 
@@ -944,11 +944,11 @@
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Enable a new check in the target branch
             localRepo.checkout(masterHash, true);
             CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of("appendable.txt"),
-                                     Set.of("author", "reviewers", "whitespace", "issues"));
+                                     Set.of("author", "reviewers", "whitespace", "issues"), null);
             var headHash = localRepo.resolve("HEAD").orElseThrow();
             localRepo.push(headHash, author.url(), "master", true);
 
             // Check the status
             TestBotRunner.runPeriodicItems(checkBot);
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IntegrateTests.java
@@ -196,11 +196,11 @@
                                            .addAuthor(author.forge().currentUser().id());
             var mergeBot = new PullRequestBot(integrator, censusBuilder.build(), "master");
 
             // Populate the projects repository - but without any checks enabled
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of("appendable.txt"),
-                                                     Set.of());
+                                                     Set.of(), null);
             var masterHash = localRepo.resolve("master").orElseThrow();
             assertFalse(CheckableRepository.hasBeenEdited(localRepo));
             localRepo.push(masterHash, author.url(), "master", true);
 
             // Make a change with a corresponding PR
@@ -209,11 +209,11 @@
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Now enable checks
             localRepo.checkout(masterHash, true);
             CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of("appendable.txt"),
-                                     Set.of("author", "reviewers", "whitespace"));
+                                     Set.of("author", "reviewers", "whitespace"), null);
             var updatedHash = localRepo.resolve("HEAD").orElseThrow();
             localRepo.push(updatedHash, author.url(), "master", true);
 
             // Attempt a merge
             pr.addComment("/integrate");
diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/GeneralConfiguration.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/GeneralConfiguration.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/GeneralConfiguration.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/GeneralConfiguration.java
@@ -22,21 +22,25 @@
  */
 package org.openjdk.skara.jcheck;
 
 import org.openjdk.skara.ini.Section;
 
+import java.util.Optional;
+
 public class GeneralConfiguration {
-    private static final GeneralConfiguration DEFAULT = new GeneralConfiguration(null, null, null);
+    private static final GeneralConfiguration DEFAULT = new GeneralConfiguration(null, null, null, null);
 
     private final String project;
     private final String repository;
     private final String jbs;
+    private final String version;
 
-    private GeneralConfiguration(String project, String repository, String jbs) {
+    private GeneralConfiguration(String project, String repository, String jbs, String version) {
         this.project = project;
         this.repository = repository;
         this.jbs = jbs;
+        this.version = version;
     }
 
     public String project() {
         return project;
     }
@@ -47,10 +51,14 @@
 
     public String jbs() {
         return jbs;
     }
 
+    public Optional<String> version() {
+        return Optional.ofNullable(version);
+    }
+
     static String name() {
         return "general";
     }
 
     static GeneralConfiguration parse(Section s) {
@@ -59,8 +67,9 @@
         }
 
         var project = s.get("project", DEFAULT.project());
         var repository = s.get("repository", DEFAULT.repository());
         var jbs = s.get("jbs", DEFAULT.jbs());
-        return new GeneralConfiguration(project, repository, jbs);
+        var version = s.get("version", DEFAULT.version().orElse(null));
+        return new GeneralConfiguration(project, repository, jbs, version);
     }
 }
diff a/test/src/main/java/org/openjdk/skara/test/CheckableRepository.java b/test/src/main/java/org/openjdk/skara/test/CheckableRepository.java
--- a/test/src/main/java/org/openjdk/skara/test/CheckableRepository.java
+++ b/test/src/main/java/org/openjdk/skara/test/CheckableRepository.java
@@ -37,11 +37,11 @@
             var checkableName = checkable.readLine();
             return path.resolve(checkableName);
         }
     }
 
-    public static Repository init(Path path, VCS vcs, Path appendableFilePath, Set<String> checks) throws IOException {
+    public static Repository init(Path path, VCS vcs, Path appendableFilePath, Set<String> checks, String version) throws IOException {
         var repo = Repository.init(path, vcs);
 
         Files.createDirectories(path.resolve(".checkable"));
         try (var output = Files.newBufferedWriter(path.resolve(".checkable/name.txt"))) {
             output.write(appendableFilePath.toString());
@@ -58,10 +58,15 @@
         var checkConf = path.resolve(".jcheck/conf");
         try (var output = Files.newBufferedWriter(checkConf)) {
             output.append("[general]\n");
             output.append("project=test\n");
             output.append("jbs=tstprj\n");
+            if (version != null) {
+                output.append("version=");
+                output.append(version);
+                output.append("\n");
+            }
             output.append("\n");
             output.append("[checks]\n");
             output.append("error=");
             output.append(String.join(",", checks));
             output.append("\n\n");
@@ -81,11 +86,11 @@
 
         return repo;
     }
 
     public static Repository init(Path path, VCS vcs, Path appendableFilePath) throws IOException {
-        return init(path, vcs, appendableFilePath, Set.of("author", "reviewers", "whitespace"));
+        return init(path, vcs, appendableFilePath, Set.of("author", "reviewers", "whitespace"), "0.1");
     }
 
     public static Repository init(Path path, VCS vcs) throws IOException {
         return init(path, vcs, Path.of("appendable.txt"));
     }
