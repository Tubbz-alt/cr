diff a/bot/build.gradle b/bot/build.gradle
--- a/bot/build.gradle
+++ b/bot/build.gradle
@@ -28,10 +28,11 @@
         opens 'org.openjdk.skara.bot' to 'org.junit.platform.commons'
     }
 }
 
 dependencies {
+    implementation project(':ci')
     implementation project(':host')
     implementation project(':network')
     implementation project(':issuetracker')
     implementation project(':forge')
     implementation project(':vcs')
diff a/bot/src/main/java/module-info.java b/bot/src/main/java/module-info.java
--- a/bot/src/main/java/module-info.java
+++ b/bot/src/main/java/module-info.java
@@ -19,10 +19,11 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 module org.openjdk.skara.bot {
+    requires transitive org.openjdk.skara.ci;
     requires transitive org.openjdk.skara.host;
     requires transitive org.openjdk.skara.issuetracker;
     requires transitive org.openjdk.skara.forge;
     requires transitive org.openjdk.skara.json;
     requires transitive org.openjdk.skara.census;
diff a/bot/src/main/java/org/openjdk/skara/bot/BotConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotConfiguration.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bot;
 
+import org.openjdk.skara.ci.ContinuousIntegration;
 import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.issuetracker.IssueProject;
 import org.openjdk.skara.json.JSONObject;
 
 import java.nio.file.Path;
@@ -47,10 +48,17 @@
      * @param name
      * @return
      */
     IssueProject issueProject(String name);
 
+    /**
+     * Configuration-specific name mapped to a ContinuousIntegration.
+     * @param name
+     * @return
+     */
+    ContinuousIntegration continuousIntegration(String name);
+
     /**
      * Retrieves the ref name that optionally follows the configuration-specific repository name.
      * If not configured, returns the name of the VCS default branch.
      * @param name
      * @return
diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bot;
 
+import org.openjdk.skara.ci.ContinuousIntegration;
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.Credential;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.json.JSONObject;
 import org.openjdk.skara.network.URIBuilder;
@@ -40,18 +41,20 @@
 public class BotRunnerConfiguration {
     private final Logger log;
     private final JSONObject config;
     private final Map<String, Forge> repositoryHosts;
     private final Map<String, IssueTracker> issueHosts;
+    private final Map<String, ContinuousIntegration> continuousIntegrations;
     private final Map<String, HostedRepository> repositories;
 
     private BotRunnerConfiguration(JSONObject config, Path cwd) throws ConfigurationError {
         this.config = config;
         log = Logger.getLogger("org.openjdk.skara.bot");
 
         repositoryHosts = parseRepositoryHosts(config, cwd);
         issueHosts = parseIssueHosts(config, cwd);
+        continuousIntegrations = parseContinuousIntegrations(config, cwd);
         repositories = parseRepositories(config);
     }
 
     private Map<String, Forge> parseRepositoryHosts(JSONObject config, Path cwd) throws ConfigurationError {
         Map<String, Forge> ret = new HashMap<>();
@@ -116,10 +119,30 @@
         }
 
         return ret;
     }
 
+    private Map<String, ContinuousIntegration> parseContinuousIntegrations(JSONObject config, Path cwd) throws ConfigurationError {
+        Map<String, ContinuousIntegration> ret = new HashMap<>();
+
+        if (!config.contains("ci")) {
+            return ret;
+        }
+
+        for (var entry : config.get("ci").fields()) {
+            var url = entry.value().get("url").asString();
+            var ci = ContinuousIntegration.from(URI.create(url), entry.value().asObject());
+            if (ci.isPresent()) {
+                ret.put(entry.name(), ci.get());
+            } else {
+                throw new ConfigurationError("No continuous integration named with url: " + url);
+            }
+        }
+
+        return ret;
+    }
+
     private Map<String, HostedRepository> parseRepositories(JSONObject config) throws ConfigurationError {
         Map<String, HostedRepository> ret = new HashMap<>();
 
         if (!config.contains("repositories")) {
             return ret;
@@ -231,10 +254,18 @@
                 } catch (ConfigurationError configurationError) {
                     throw new RuntimeException("Couldn't find issue project with name: " + name, configurationError);
                 }
             }
 
+            @Override
+            public ContinuousIntegration continuousIntegration(String name) {
+                if (continuousIntegrations.containsKey(name)) {
+                    return continuousIntegrations.get(name);
+                }
+                throw new RuntimeException("Couldn't find continuous integration with name: " + name);
+            }
+
             @Override
             public String repositoryRef(String name) {
                 try {
                     var entry = parseRepositoryEntry(name);
                     return entry.ref;
diff a/bots/bridgekeeper/build.gradle b/bots/bridgekeeper/build.gradle
--- a/bots/bridgekeeper/build.gradle
+++ b/bots/bridgekeeper/build.gradle
@@ -30,10 +30,11 @@
         opens 'org.openjdk.skara.bots.bridgekeeper' to 'org.junit.platform.commons'
     }
 }
 
 dependencies {
+    implementation project(':ci')
     implementation project(':host')
     implementation project(':forge')
     implementation project(':issuetracker')
     implementation project(':bot')
     implementation project(':census')
diff a/bots/cli/build.gradle b/bots/cli/build.gradle
--- a/bots/cli/build.gradle
+++ b/bots/cli/build.gradle
@@ -42,12 +42,14 @@
     implementation project(':bots:notify')
     implementation project(':bots:merge')
     implementation project(':bots:mlbridge')
     implementation project(':bots:mirror')
     implementation project(':bots:topological')
+    implementation project(':bots:tester')
     implementation project(':bots:submit')
     implementation project(':bots:forward')
+    implementation project(':ci')
     implementation project(':vcs')
     implementation project(':jcheck')
     implementation project(':host')
     implementation project(':network')
     implementation project(':bot')
@@ -72,10 +74,11 @@
                    'org.openjdk.skara.bots.notify',
                    'org.openjdk.skara.bots.merge',
                    'org.openjdk.skara.bots.mlbridge',
                    'org.openjdk.skara.bots.mirror',
                    'org.openjdk.skara.bots.submit',
+                   'org.openjdk.skara.bots.tester',
                    'org.openjdk.skara.bots.topological',
                    'org.openjdk.skara.bots.forward']
         launchers = ['skara-bots': 'org.openjdk.skara.bots.cli/org.openjdk.skara.bots.cli.BotLauncher']
         options = ["--module-path", "plugins"]
         bundles = ['zip', 'tar.gz']
diff a/bots/forward/build.gradle b/bots/forward/build.gradle
--- a/bots/forward/build.gradle
+++ b/bots/forward/build.gradle
@@ -29,10 +29,11 @@
         opens 'org.openjdk.skara.bots.forward' to 'org.junit.platform.commons'
     }
 }
 
 dependencies {
+    implementation project(':ci')
     implementation project(':host')
     implementation project(':bot')
     implementation project(':forge')
     implementation project(':issuetracker')
     implementation project(':census')
diff a/bots/hgbridge/build.gradle b/bots/hgbridge/build.gradle
--- a/bots/hgbridge/build.gradle
+++ b/bots/hgbridge/build.gradle
@@ -30,10 +30,11 @@
     }
 }
 
 dependencies {
     implementation project(':bot')
+    implementation project(':ci')
     implementation project(':vcs')
     implementation project(':host')
     implementation project(':forge')
     implementation project(':issuetracker')
     implementation project(':census')
diff a/bots/merge/build.gradle b/bots/merge/build.gradle
--- a/bots/merge/build.gradle
+++ b/bots/merge/build.gradle
@@ -29,10 +29,11 @@
         opens 'org.openjdk.skara.bots.merge' to 'org.junit.platform.commons'
     }
 }
 
 dependencies {
+    implementation project(':ci')
     implementation project(':host')
     implementation project(':forge')
     implementation project(':issuetracker')
     implementation project(':bot')
     implementation project(':census')
diff a/bots/mirror/build.gradle b/bots/mirror/build.gradle
--- a/bots/mirror/build.gradle
+++ b/bots/mirror/build.gradle
@@ -29,10 +29,11 @@
         opens 'org.openjdk.skara.bots.mirror' to 'org.junit.platform.commons'
     }
 }
 
 dependencies {
+    implementation project(':ci')
     implementation project(':host')
     implementation project(':forge')
     implementation project(':issuetracker')
     implementation project(':bot')
     implementation project(':census')
diff a/bots/mlbridge/build.gradle b/bots/mlbridge/build.gradle
--- a/bots/mlbridge/build.gradle
+++ b/bots/mlbridge/build.gradle
@@ -29,10 +29,11 @@
         opens 'org.openjdk.skara.bots.mlbridge' to 'org.junit.platform.commons'
     }
 }
 
 dependencies {
+    implementation project(':ci')
     implementation project(':bot')
     implementation project(':mailinglist')
     implementation project(':host')
     implementation project(':forge')
     implementation project(':issuetracker')
diff a/bots/notify/build.gradle b/bots/notify/build.gradle
--- a/bots/notify/build.gradle
+++ b/bots/notify/build.gradle
@@ -29,10 +29,11 @@
         opens 'org.openjdk.skara.bots.notify' to 'org.junit.platform.commons'
     }
 }
 
 dependencies {
+    implementation project(':ci')
     implementation project(':host')
     implementation project(':network')
     implementation project(':bot')
     implementation project(':forge')
     implementation project(':issuetracker')
diff a/bots/pr/build.gradle b/bots/pr/build.gradle
--- a/bots/pr/build.gradle
+++ b/bots/pr/build.gradle
@@ -29,10 +29,11 @@
         opens 'org.openjdk.skara.bots.pr' to 'org.junit.platform.commons'
     }
 }
 
 dependencies {
+    implementation project(':ci')
     implementation project(':bot')
     implementation project(':forge')
     implementation project(':issuetracker')
     implementation project(':vcs')
     implementation project(':jcheck')
diff a/bots/submit/build.gradle b/bots/submit/build.gradle
--- a/bots/submit/build.gradle
+++ b/bots/submit/build.gradle
@@ -29,10 +29,11 @@
         opens 'org.openjdk.skara.bots.submit' to 'org.junit.platform.commons'
     }
 }
 
 dependencies {
+    implementation project(':ci')
     implementation project(':bot')
     implementation project(':host')
     implementation project(':forge')
     implementation project(':issuetracker')
     implementation project(':census')
diff a/bots/tester/build.gradle b/bots/tester/build.gradle
--- /dev/null
+++ b/bots/tester/build.gradle
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+module {
+    name = 'org.openjdk.skara.bots.tester'
+    test {
+        requires 'org.junit.jupiter.api'
+        requires 'org.openjdk.skara.test'
+        requires 'org.openjdk.skara.host'
+        opens 'org.openjdk.skara.bots.tester' to 'org.junit.platform.commons'
+    }
+}
+
+dependencies {
+    implementation project(':bot')
+    implementation project(':ci')
+    implementation project(':census')
+    implementation project(':forge')
+    implementation project(':host')
+    implementation project(':issuetracker')
+    implementation project(':json')
+    implementation project(':vcs')
+
+    testImplementation project(':test')
+}
diff a/bots/tester/src/main/java/module-info.java b/bots/tester/src/main/java/module-info.java
--- /dev/null
+++ b/bots/tester/src/main/java/module-info.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+module org.openjdk.skara.bots.tester {
+    requires org.openjdk.skara.bot;
+    requires org.openjdk.skara.vcs;
+    requires org.openjdk.skara.ci;
+
+    requires java.logging;
+
+    provides org.openjdk.skara.bot.BotFactory with org.openjdk.skara.bots.tester.TestBotFactory;
+}
diff a/bots/tester/src/main/java/org/openjdk/skara/bots/tester/Stage.java b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/Stage.java
--- /dev/null
+++ b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/Stage.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.tester;
+
+enum Stage {
+    NA,
+    ERROR,
+    REQUESTED,
+    PENDING,
+    APPROVED,
+    STARTED,
+    CANCELLED,
+    FINISHED
+}
diff a/bots/tester/src/main/java/org/openjdk/skara/bots/tester/State.java b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/State.java
--- /dev/null
+++ b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/State.java
@@ -0,0 +1,166 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.tester;
+
+import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.issuetracker.Comment;
+
+class State {
+    private final Stage stage;
+    private final Comment requested;
+    private final Comment pending;
+    private final Comment approval;
+    private final Comment started;
+    private final Comment cancelled;
+    private final Comment finished;
+
+    private State(Stage stage, Comment requested,
+                               Comment pending,
+                               Comment approval,
+                               Comment started,
+                               Comment cancelled,
+                               Comment finished) {
+        this.stage = stage;
+        this.requested = requested;
+        this.pending = pending;
+        this.approval = approval;
+        this.started = started;
+        this.cancelled = cancelled;
+        this.finished = finished;
+    }
+
+    Stage stage() {
+        return stage;
+    }
+
+    Comment requested() {
+        return requested;
+    }
+
+    Comment pending() {
+        return pending;
+    }
+
+    Comment approval() {
+        return approval;
+    }
+
+    Comment started() {
+        return started;
+    }
+
+    Comment cancelled() {
+        return cancelled;
+    }
+
+    Comment finished() {
+        return finished;
+    }
+
+    static State from(PullRequest pr, String approverGroupId) {
+        Comment requested = null;
+        Comment pending = null;
+        Comment approval = null;
+        Comment started = null;
+        Comment cancelled = null;
+        Comment error = null;
+        Comment finished = null;
+
+        var isApproved = false;
+
+        var host = pr.repository().forge();
+        var comments = pr.comments();
+        var start = -1;
+        for (var i = comments.size() - 1; i >=0; i--) {
+            var comment = comments.get(i);
+            var lines = comment.body().split("\n");
+            if (lines.length == 1 &&
+                lines[0].startsWith("/test") &&
+                !lines[0].startsWith("/test approve") &&
+                !lines[0].startsWith("/test cancel")) {
+                requested = comment;
+                start = i;
+                break;
+            }
+        }
+
+        if (requested != null) {
+            var applicable = comments.subList(start, comments.size());
+            for (var comment : applicable) {
+                var body = comment.body();
+                var author = comment.author();
+                if (author.equals(host.currentUser())) {
+                    var lines = body.split("\n");
+                    switch (lines[0]) {
+                        case "<!-- TEST PENDING -->":
+                            pending = comment;
+                            break;
+                        case "<!-- TEST STARTED -->":
+                            started = comment;
+                            break;
+                        case "<!-- TEST ERROR -->":
+                            error = comment;
+                            break;
+                        case "<!-- TEST FINISHED -->":
+                            finished = comment;
+                            break;
+                    }
+                } else if (body.equals("/test approve")) {
+                    approval = comment;
+                    if (host.isMemberOf(approverGroupId, author)) {
+                        isApproved = true;
+                    }
+                } else if (body.equals("/test cancel")) {
+                    if (comment.author().equals(requested.author())) {
+                        cancelled = comment;
+                    }
+                } else if (body.startsWith("/test")) {
+                    if (host.isMemberOf(approverGroupId, author)) {
+                        isApproved = true;
+                    }
+                }
+            }
+        }
+
+        Stage stage = null;
+        if (error != null) {
+            stage = Stage.ERROR;
+        } else if (cancelled != null) {
+            stage = Stage.CANCELLED;
+        } else if (finished != null) {
+            stage = Stage.FINISHED;
+        } else if (started != null) {
+            stage = Stage.STARTED;
+        } else if (requested != null && isApproved) {
+            stage = Stage.APPROVED;
+        } else if (requested != null && pending != null) {
+            stage = Stage.PENDING;
+        } else if (requested != null) {
+            stage = Stage.REQUESTED;
+        } else {
+            stage = Stage.NA;
+        }
+
+        return new State(stage, requested, pending, approval, started, cancelled, finished);
+    }
+}
diff a/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestBot.java b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestBot.java
--- /dev/null
+++ b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestBot.java
@@ -0,0 +1,106 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.tester;
+
+import org.openjdk.skara.ci.ContinuousIntegration;
+import org.openjdk.skara.ci.Job;
+import org.openjdk.skara.bot.*;
+import org.openjdk.skara.forge.*;
+
+import java.io.*;
+import java.nio.file.*;
+import java.util.*;
+import java.util.stream.Collectors;
+
+public class TestBot implements Bot {
+    private final ContinuousIntegration ci;
+    private final String approversGroupId;
+    private final List<String> availableJobs;
+    private final List<String> defaultJobs;
+    private final String name;
+    private final Path storage;
+    private final HostedRepository repo;
+    private final PullRequestUpdateCache cache;
+    private final Set<String> seen;
+
+    TestBot(ContinuousIntegration ci,
+            String approversGroupId,
+            List<String> availableJobs,
+            List<String> defaultJobs,
+            String name,
+            Path storage,
+            HostedRepository repo) {
+        this.ci = ci;
+        this.approversGroupId = approversGroupId;
+        this.availableJobs = availableJobs;
+        this.defaultJobs = defaultJobs;
+        this.name = name;
+        this.storage = storage;
+        this.repo = repo;
+        this.cache = new PullRequestUpdateCache();
+        this.seen = new HashSet<>();
+    }
+
+    @Override
+    public List<WorkItem> getPeriodicItems() {
+        var ret = new ArrayList<WorkItem>();
+
+        var host = repo.webUrl().getHost();
+        var repoId = Long.toString(repo.id());
+        for (var pr : repo.pullRequests()) {
+            if (cache.needsUpdate(pr)) {
+                ret.add(new TestWorkItem(ci,
+                                         approversGroupId,
+                                         availableJobs,
+                                         defaultJobs,
+                                         name,
+                                         storage,
+                                         pr));
+            } else {
+                // is there a job running for this PR?
+                var colon = "%3A";
+                var asterisk = "%2A";
+                var id = host + "-" + repoId  + "-"+ pr.id() + "-" + asterisk;
+                try {
+                    var jobs = ci.query("id" + colon + id);
+                    if (!jobs.isEmpty()) {
+                        if (jobs.stream().anyMatch(j -> j.isRunning() || !seen.contains(j.id()))) {
+                            ret.add(new TestWorkItem(ci,
+                                                     approversGroupId,
+                                                     availableJobs,
+                                                     defaultJobs,
+                                                     name,
+                                                     storage,
+                                                     pr));
+                        }
+                        seen.addAll(jobs.stream().map(Job::id).collect(Collectors.toList()));
+                    }
+                } catch (IOException e) {
+                    throw new UncheckedIOException(e);
+                }
+            }
+        }
+
+        return ret;
+    }
+}
diff a/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestBotFactory.java b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestBotFactory.java
--- /dev/null
+++ b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestBotFactory.java
@@ -0,0 +1,66 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.tester;
+
+import org.openjdk.skara.bot.*;
+import org.openjdk.skara.json.*;
+
+import org.openjdk.skara.ci.ContinuousIntegration;
+
+import java.io.*;
+import java.nio.file.*;
+import java.util.*;
+import java.util.stream.Collectors;
+import java.net.URI;
+
+public class TestBotFactory implements BotFactory {
+    @Override
+    public String name() {
+        return "test";
+    }
+
+    @Override
+    public List<Bot> create(BotConfiguration configuration) {
+        var storage = configuration.storageFolder();
+        try {
+            Files.createDirectories(storage);
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
+
+        var ret = new ArrayList<Bot>();
+        var specific = configuration.specific();
+
+        var approvers = specific.get("approvers").asString();
+        var availableJobs = specific.get("availableJobs").stream().map(JSONValue::asString).collect(Collectors.toList());
+        var defaultJobs = specific.get("defaultJobs").stream().map(JSONValue::asString).collect(Collectors.toList());
+        var name = specific.get("name").asString();
+        var ci = configuration.continuousIntegration(specific.get("ci").asString());
+        for (var repo : specific.get("repositories").asArray()) {
+            var hostedRepo = configuration.repository(repo.asString());
+            ret.add(new TestBot(ci, approvers, availableJobs, defaultJobs, name, storage, hostedRepo));
+        }
+
+        return ret;
+    }
+}
diff a/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestWorkItem.java b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestWorkItem.java
--- /dev/null
+++ b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestWorkItem.java
@@ -0,0 +1,443 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.tester;
+
+import org.openjdk.skara.bot.*;
+import org.openjdk.skara.ci.*;
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.vcs.*;
+
+import java.io.*;
+import java.net.*;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.*;
+import java.time.ZonedDateTime;
+import java.util.*;
+import java.util.logging.Logger;
+import java.util.stream.*;
+
+public class TestWorkItem implements WorkItem {
+    private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
+    private final ContinuousIntegration ci;
+    private final String approversGroupId;
+    private final List<String> availableJobs;
+    private final List<String> defaultJobs;
+    private final String name;
+    private final Path storage;
+    private final HostedRepository repository;
+    private final PullRequest pr;
+
+    TestWorkItem(ContinuousIntegration ci, String approversGroupId, List<String> availableJobs,
+                 List<String> defaultJobs, String name, Path storage, PullRequest pr) {
+        this.ci = ci;
+        this.approversGroupId = approversGroupId;
+        this.availableJobs = availableJobs;
+        this.defaultJobs = defaultJobs;
+        this.name = name;
+        this.storage = storage;
+        this.repository = pr.repository();
+        this.pr = pr;
+    }
+
+    @Override
+    public boolean concurrentWith(WorkItem other) {
+        if (!(other instanceof TestWorkItem)) {
+            return true;
+        }
+        var o = (TestWorkItem) other;
+        if (!repository.url().equals(o.repository.url())) {
+            return true;
+        }
+        return !pr.id().equals(o.pr.id());
+    }
+
+
+    private String jobId(State state) {
+        var host = repository.webUrl().getHost();
+        return host + "-" +
+               Long.toString(repository.id()) + "-"+
+               pr.id() + "-" +
+               state.requested().id();
+    }
+
+
+    private String osDisplayName(Build.OperatingSystem os) {
+        switch (os) {
+            case WINDOWS:
+                return "Windows";
+            case MACOS:
+                return "macOS";
+            case LINUX:
+                return "Linux";
+            case SOLARIS:
+                return "Solaris";
+            case AIX:
+                return "AIX";
+            case FREEBSD:
+                return "FreeBSD";
+            case OPENBSD:
+                return "OpenBSD";
+            case NETBSD:
+                return "NetBSD";
+            case HPUX:
+                return "HP-UX";
+            case HAIKU:
+                return "Haiku";
+            default:
+                throw new IllegalArgumentException("Unknown operating system: " + os.toString());
+        }
+    }
+
+    private String cpuDisplayName(Build.CPU cpu) {
+        switch (cpu) {
+            case X86:
+                return "x86";
+            case X64:
+                return "x64";
+            case SPARCV9:
+                return "SPARC V9";
+            case AARCH64:
+                return "AArch64";
+            case AARCH32:
+                return "AArch32";
+            case PPCLE32:
+                return "PPC LE 32";
+            case PPCLE64:
+                return "PPC LE 64";
+            default:
+                throw new IllegalArgumentException("Unknown cpu: " + cpu.toString());
+        }
+    }
+
+    private String debugLevelDisplayName(Build.DebugLevel level) {
+        switch (level) {
+            case RELEASE:
+                return "release";
+            case FASTDEBUG:
+                return "fastdebug";
+            case SLOWDEBUG:
+                return "slowdebug";
+            default:
+                throw new IllegalArgumentException("Unknown debug level: " + level.toString());
+        }
+    }
+
+    private void appendIdSection(StringBuilder summary, Job job) {
+        summary.append("## Id");
+        summary.append("\n");
+
+        summary.append("`");
+        summary.append(job.id());
+        summary.append("`");
+        summary.append("\n");
+    }
+
+    private void appendBuildsSection(StringBuilder summary, Job job) {
+        var perOSandArch = new HashMap<String, List<String>>();
+        for (var build : job.builds()) {
+            var osAndArch = osDisplayName(build.os()) + " " + cpuDisplayName(build.cpu());
+            var debugLevel = debugLevelDisplayName(build.debugLevel());
+            if (!perOSandArch.containsKey(osAndArch)) {
+                perOSandArch.put(osAndArch, new ArrayList<String>());
+            }
+            perOSandArch.get(osAndArch).add(debugLevel);
+        }
+
+        summary.append("## Builds");
+        summary.append("\n");
+
+        for (var key : perOSandArch.keySet()) {
+            summary.append("- ");
+            summary.append(key);
+            summary.append(" (");
+            summary.append(String.join(",", perOSandArch.get(key)));
+            summary.append(")");
+            summary.append("\n");
+        }
+    }
+
+    private void appendTestsSection(StringBuilder summary, Job job) {
+        summary.append("## Tests");
+        summary.append("\n");
+
+        for (var test : job.tests()) {
+            summary.append("- ");
+            summary.append(test.name());
+            summary.append("\n");
+        }
+    }
+
+    private void appendStatusSection(StringBuilder summary, Job job) {
+        var s = job.status();
+        summary.append("## Status");
+        summary.append("\n");
+
+        var numCompleted = s.numCompleted();
+        summary.append(Integer.toString(numCompleted));
+        summary.append(numCompleted == 1 ? " job " : " jobs ");
+        summary.append("completed, ");
+
+        var numRunning = s.numRunning();
+        summary.append(Integer.toString(numRunning));
+        summary.append(numRunning == 1 ? " job " : " jobs ");
+        summary.append("running, ");
+
+        var numNotStarted = s.numNotStarted();
+        summary.append(Integer.toString(numNotStarted));
+        summary.append(numNotStarted == 1 ? " job " : " jobs ");
+        summary.append("not yet started");
+        summary.append("\n");
+    }
+
+    private void appendResultSection(StringBuilder summary, Job job) {
+        var r = job.result();
+        summary.append("## Result");
+        summary.append("\n");
+
+        var numPassed = r.numPassed();
+        summary.append(Integer.toString(numPassed));
+        summary.append(numPassed == 1 ? " job " : " jobs ");
+        summary.append("passed, ");
+
+        var numFailed = r.numFailed();
+        summary.append(Integer.toString(numFailed));
+        summary.append(numFailed == 1 ? " job " : " jobs ");
+        summary.append("with failures, ");
+
+        var numSkipped = r.numSkipped();
+        summary.append(Integer.toString(numSkipped));
+        summary.append(numSkipped == 1 ? " job " : " jobs ");
+        summary.append("not run");
+        summary.append("\n");
+    }
+
+    private String display(Job job) {
+        var sb = new StringBuilder();
+        appendIdSection(sb, job);
+        sb.append("\n");
+        appendBuildsSection(sb, job);
+        sb.append("\n");
+        appendTestsSection(sb, job);
+        sb.append("\n");
+        appendStatusSection(sb, job);
+        sb.append("\n");
+        if (job.isCompleted()) {
+            appendResultSection(sb, job);
+        }
+        return sb.toString();
+    }
+
+    @Override
+    public void run(Path scratchPath) {
+        var state = State.from(pr, approversGroupId);
+        var stage = state.stage();
+        if (stage == Stage.NA || stage == Stage.ERROR || stage == Stage.PENDING || stage == Stage.FINISHED) {
+            // nothing to do
+            return;
+        }
+
+        if (stage == Stage.STARTED) {
+            if (state.started() != null) {
+                var lines = state.started().body().split("\n");
+                var jobId = lines[1].replace("<!-- ", "").replace(" -->", "");
+                var hash = lines[2].replace("<!-- ", "").replace(" -->", "");
+
+                try {
+                    var job = ci.job(jobId);
+                    var checks = pr.checks(new Hash(hash));
+                    if (checks.containsKey(name)) {
+                        var check = checks.get(name);
+                        if (check.status() == CheckStatus.IN_PROGRESS) {
+                            var builder = CheckBuilder.from(check);
+                            if (job.isCompleted()) {
+                                var success = job.result().numFailed() == 0 &&
+                                              job.result().numSkipped() == 0;
+                                builder = builder.complete(success);
+                                var requestor = state.requested().author().userName();
+                                var commentLines = List.of(
+                                        "<!-- TEST FINISHED -->",
+                                        "<!-- " + jobId + " -->",
+                                        "<!-- " + hash + " -->",
+                                        "@" + requestor + " your test job with id " + jobId + " for commits up until " + hash.substring(0, 8) + " has finished."
+                                );
+                                pr.addComment(String.join("\n", commentLines));
+                            }
+                            builder = builder.summary(display(job));
+                            pr.updateCheck(builder.build());
+                        }
+                    } else {
+                        log.warning("Could not find check for job with " + jobId + " for hash " + hash + " for PR " + pr.webUrl());
+                    }
+                } catch (IOException e) {
+                    throw new UncheckedIOException(e);
+                }
+            } else {
+                log.warning("No 'started' comment present for PR " + pr.webUrl());
+            }
+        } else if (stage == stage.CANCELLED) {
+            if (state.started() != null) {
+                var lines = state.started().body().split("\n");
+                var jobId = lines[1].replace("<!-- ", "").replace(" -->", "");
+                var hash = lines[2].replace("<!-- ", "").replace(" -->", "");
+
+                try {
+                    ci.cancel(jobId);
+                } catch (IOException e) {
+                    throw new UncheckedIOException(e);
+                }
+                var checks = pr.checks(new Hash(hash));
+                if (checks.containsKey(name)) {
+                    var check = checks.get(name);
+                    if (check.status() != CheckStatus.CANCELLED) {
+                        var builder = CheckBuilder.from(check);
+                        var newCheck = builder.cancel()
+                                              .build();
+                        pr.updateCheck(newCheck);
+                    }
+                } else {
+                    log.warning("Could not find check for job with " + jobId + " for hash " + hash + " for PR " + pr.webUrl());
+                }
+            }
+        } else if (stage == Stage.REQUESTED) {
+            var requestedJobs = state.requested().body().substring("/test".length());
+            if (requestedJobs.trim().isEmpty()) {
+                requestedJobs = String.join(",", defaultJobs);
+            }
+            var trimmedJobs = Stream.of(requestedJobs.split(",")).map(String::trim).collect(Collectors.toList());
+            var nonExistingJobs = trimmedJobs.stream().filter(s -> !availableJobs.contains(s))
+                                                      .collect(Collectors.toList());
+            if (!nonExistingJobs.isEmpty()) {
+                var wording = nonExistingJobs.size() == 1 ? "group " : "groups ";
+                var lines = List.of(
+                   "<!-- TEST ERROR -->",
+                   "@" + state.requested().author().userName() + " the test " + wording + String.join(",", nonExistingJobs) + " does not exist"
+                );
+                pr.addComment(String.join("\n", lines));
+            } else {
+                var head = pr.headHash();
+                var lines = List.of(
+                        "<!-- TEST PENDING -->",
+                        "<!-- " + head.hex() + " -->",
+                        "<!-- " + String.join(",", trimmedJobs) + " -->",
+                        "@" + state.requested().author().userName() + " you need to get approval to run the tests in " +
+                        String.join(",", trimmedJobs) + " for commits up until " + head.abbreviate()
+                );
+                pr.addComment(String.join("\n", lines));
+            }
+        } else if (stage == Stage.APPROVED) {
+            Hash head = null;
+            List<String> jobs = null;
+
+            if (state.pending() != null) {
+                var comment = state.pending();
+                var body = comment.body().split("\n");
+
+                head = new Hash(body[1].replace("<!-- ", "").replace(" -->", ""));
+                var requestedJobs = body[2].replace("<!-- ", "").replace(" -->", "");
+                jobs = Arrays.asList(requestedJobs.split(","));
+            } else {
+                var comment = state.requested();
+                var body = comment.body().split("\n");
+
+                head = pr.headHash();
+                var requestedJobs = state.requested().body().substring("/test".length());
+                if (requestedJobs.trim().isEmpty()) {
+                    requestedJobs = String.join(",", defaultJobs);
+                }
+                var trimmedJobs = Stream.of(requestedJobs.split(",")).map(String::trim).collect(Collectors.toList());
+                var nonExistingJobs = trimmedJobs.stream().filter(s -> !availableJobs.contains(s))
+                                                          .collect(Collectors.toList());
+                if (!nonExistingJobs.isEmpty()) {
+                    var wording = nonExistingJobs.size() == 1 ? "group " : "groups ";
+                    var lines = List.of(
+                       "<!-- TEST ERROR -->",
+                       "@" + state.requested().author().userName() + " the test " + wording + String.join(",", nonExistingJobs) + " does not exist"
+                    );
+                    pr.addComment(String.join("\n", lines));
+                    return;
+                }
+
+                jobs = trimmedJobs;
+            }
+            var jobId = jobId(state);
+
+            Job job = null;
+            Hash fetchHead = null;
+            try {
+                var sanitizedUrl = URLEncoder.encode(repository.webUrl().toString(), StandardCharsets.UTF_8);
+                var localRepoDir = storage.resolve("mach5-bot")
+                                          .resolve(sanitizedUrl)
+                                          .resolve(pr.id());
+                var host = repository.webUrl().getHost();
+                Repository localRepo = null;
+                if (!Files.exists(localRepoDir)) {
+                    log.info("Cloning " + repository.name());
+                    Files.createDirectories(localRepoDir);
+                    var url = repository.webUrl().toString();
+                    if (!url.endsWith(".git")) {
+                        url += ".git";
+                    }
+                    localRepo = Repository.clone(URI.create(url), localRepoDir);
+                } else {
+                    log.info("Found existing scratch directory for " + repository.name());
+                    localRepo = Repository.get(localRepoDir).orElseThrow(() -> {
+                            return new RuntimeException("Repository in " + localRepoDir + " has vanished");
+                    });
+                }
+                fetchHead = localRepo.fetch(repository.url(), pr.targetRef());
+                localRepo.checkout(fetchHead, true);
+                job = ci.submit(localRepoDir, jobs, jobId);
+            } catch (IOException e) {
+                var lines = List.of(
+                        "<!-- TEST ERROR -->",
+                        "Could not create test job"
+                );
+                pr.addComment(String.join("\n", lines));
+
+                throw new UncheckedIOException(e);
+            }
+
+            var check = CheckBuilder.create(name, fetchHead)
+                                    .title("Summary")
+                                    .summary(display(job))
+                                    .metadata(jobId)
+                                    .build();
+            pr.createCheck(check);
+
+            var lines = List.of(
+                    "<!-- TEST STARTED -->",
+                    "<!-- " + jobId + " -->",
+                    "<!-- " + fetchHead.hex() + " -->",
+                    "A test job has been started with id: " + jobId
+            );
+            pr.addComment(String.join("\n", lines));
+        } else {
+            throw new RuntimeException("Unexpected state " + state);
+        }
+    }
+
+    @Override
+    public String toString() {
+        return "TestWorkItem@" + pr.repository().name() + "#" + pr.id();
+    }
+}
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryContinuousIntegration.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryContinuousIntegration.java
--- /dev/null
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryContinuousIntegration.java
@@ -0,0 +1,99 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.tester;
+
+import org.openjdk.skara.ci.ContinuousIntegration;
+import org.openjdk.skara.ci.Job;
+import org.openjdk.skara.host.HostUser;
+
+import java.io.*;
+import java.nio.file.*;
+import java.util.*;
+
+class InMemoryContinuousIntegration implements ContinuousIntegration {
+    static class Submission {
+        Path source;
+        List<String> jobs;
+        String id;
+
+        Submission(Path source, List<String> jobs, String id) {
+            this.source = source;
+            this.jobs = jobs;
+            this.id = id;
+        }
+    }
+
+    List<Submission> submissions = new ArrayList<Submission>();
+    List<String> cancelled = new ArrayList<String>();
+    Map<String, InMemoryJob> jobs = new HashMap<>();
+    boolean throwOnSubmit = false;
+    boolean isValid = true;
+    Map<String, HostUser> users = new HashMap<>();
+    HostUser currentUser = null;
+    Map<String, Set<HostUser>> groups = new HashMap<>();
+
+    @Override
+    public boolean isValid() {
+        return isValid;
+    }
+
+    @Override
+    public HostUser user(String username) {
+        return users.get(username);
+    }
+
+    @Override
+    public HostUser currentUser() {
+        return currentUser;
+    }
+
+    @Override
+    public boolean isMemberOf(String groupId, HostUser user) {
+        var group = groups.get(groupId);
+        return group != null && group.contains(user);
+    }
+
+    @Override
+    public Job submit(Path source, List<String> jobs, String id) throws IOException {
+        if (throwOnSubmit) {
+            throw new IOException("Something went wrong");
+        }
+        submissions.add(new Submission(source, jobs, id));
+        return job(id);
+    }
+
+    @Override
+    public Job job(String id) throws IOException {
+        return jobs.get(id);
+    }
+
+    @Override
+    public void cancel(String id) throws IOException {
+        cancelled.add(id);
+    }
+
+    @Override
+    public List<Job> query(String query) throws IOException {
+        return List.of();
+    }
+}
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java
--- /dev/null
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.tester;
+
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.host.*;
+
+import java.util.*;
+
+class InMemoryHost implements Forge {
+    HostUser currentUserDetails = new HostUser(0, "openjdk", "openjdk [bot]");
+    Map<String, Set<HostUser>> groups;
+
+    @Override
+    public boolean isValid() {
+        return false;
+    }
+
+    @Override
+    public HostedRepository repository(String name) {
+        return null;
+    }
+
+    @Override
+    public HostUser user(String username) {
+        return null;
+    }
+
+    @Override
+    public HostUser currentUser() {
+        return currentUserDetails;
+    }
+
+    @Override
+    public boolean supportsReviewBody() {
+        return false;
+    }
+
+    @Override
+    public boolean isMemberOf(String groupId, HostUser user) {
+        return groups.get(groupId).contains(user);
+    }
+}
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java
--- /dev/null
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java
@@ -0,0 +1,132 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.tester;
+
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.json.JSONValue;
+import org.openjdk.skara.vcs.*;
+
+import java.net.URI;
+import java.util.*;
+
+class InMemoryHostedRepository implements HostedRepository {
+    Forge host;
+    URI webUrl;
+    URI url;
+    long id;
+
+    @Override
+    public Forge forge() {
+        return host;
+    }
+
+    @Override
+    public PullRequest createPullRequest(HostedRepository target,
+                                         String targetRef,
+                                         String sourceRef,
+                                         String title,
+                                         List<String> body,
+                                         boolean draft) {
+        return null;
+    }
+
+    @Override
+    public PullRequest pullRequest(String id) {
+        return null;
+    }
+
+    @Override
+    public List<PullRequest> pullRequests() {
+        return null;
+    }
+
+    @Override
+    public Optional<PullRequest> parsePullRequestUrl(String url) {
+        return null;
+    }
+
+    @Override
+    public String name() {
+        return null;
+    }
+
+    @Override
+    public Optional<HostedRepository> parent() {
+        return null;
+    }
+
+    @Override
+    public URI url() {
+        return url;
+    }
+
+    @Override
+    public URI webUrl() {
+        return webUrl;
+    }
+
+    @Override
+    public URI webUrl(Hash hash) {
+        return null;
+    }
+
+    @Override
+    public VCS repositoryType() {
+        return null;
+    }
+
+    @Override
+    public String fileContents(String filename, String ref) {
+        return null;
+    }
+
+    @Override
+    public String namespace() {
+        return null;
+    }
+
+    @Override
+    public Optional<WebHook> parseWebHook(JSONValue body) {
+        return null;
+    }
+
+    @Override
+    public HostedRepository fork() {
+        return null;
+    }
+
+    @Override
+    public long id() {
+        return id;
+    }
+
+    @Override
+    public Hash branchHash(String ref) {
+        return null;
+    }
+
+    @Override
+    public List<PullRequest> findPullRequestsWithComment(String author, String body) {
+        return null;
+    }
+}
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryJob.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryJob.java
--- /dev/null
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryJob.java
@@ -0,0 +1,67 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.tester;
+
+import org.openjdk.skara.ci.*;
+
+import java.util.List;
+import java.util.ArrayList;
+
+class InMemoryJob implements Job {
+    String id = "";
+    List<Build> builds = new ArrayList<>();
+    List<Test> tests = new ArrayList<>();
+    Job.Status status;
+    Job.Result result;
+    Job.State state;
+
+    @Override
+    public String id() {
+        return id;
+    }
+
+    @Override
+    public List<Build> builds() {
+        return builds;
+    }
+
+    @Override
+    public List<Test> tests() {
+        return tests;
+    }
+
+    @Override
+    public Job.Status status() {
+        return status;
+    }
+
+    @Override
+    public Job.Result result() {
+        return result;
+    }
+
+    @Override
+    public Job.State state() {
+        return state;
+    }
+}
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
--- /dev/null
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
@@ -0,0 +1,230 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.tester;
+
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.vcs.*;
+
+import java.util.*;
+import java.time.*;
+import java.net.*;
+
+class InMemoryPullRequest implements PullRequest {
+    List<Comment> comments = new ArrayList<Comment>();
+    List<Review> reviews = new ArrayList<Review>();
+    HostUser author;
+    HostedRepository repository;
+    Hash headHash;
+    String id;
+    String targetRef;
+    Map<String, Map<String, Check>> checks = new HashMap<>();
+
+    @Override
+    public HostedRepository repository() {
+        return repository;
+    }
+
+    @Override
+    public String id() {
+        return id;
+    }
+
+    @Override
+    public HostUser author() {
+        return author;
+    }
+
+    @Override
+    public List<Review> reviews() {
+        return reviews;
+    }
+
+    @Override
+    public void addReview(Review.Verdict verdict, String body) {
+    }
+
+    @Override
+    public ReviewComment addReviewComment(Hash base, Hash hash, String path, int line, String body) {
+        return null;
+    }
+
+    @Override
+    public ReviewComment addReviewCommentReply(ReviewComment parent, String body) {
+        return null;
+    }
+
+    @Override
+    public List<ReviewComment> reviewComments() {
+        return null;
+    }
+
+    @Override
+    public Hash headHash() {
+        return headHash;
+    }
+
+    @Override
+    public String sourceRef() {
+        return null;
+    }
+
+    @Override
+    public String targetRef() {
+        return targetRef;
+    }
+
+    @Override
+    public Hash targetHash() {
+        return null;
+    }
+
+    @Override
+    public String title() {
+        return null;
+    }
+
+    @Override
+    public String body() {
+        return null;
+    }
+
+    @Override
+    public void setBody(String body) {
+    }
+
+    @Override
+    public List<Comment> comments() {
+        return comments;
+    }
+    void setComments(List<Comment> comments) {
+        this.comments = comments;
+    }
+
+    @Override
+    public Comment addComment(String body) {
+        var user = repository().forge().currentUser();
+        var now = ZonedDateTime.now();
+        var id = comments.size();
+        var comment = new Comment(Integer.toString(id), body, user, now, now);
+        comments.add(comment);
+        return comment;
+    }
+
+    @Override
+    public Comment updateComment(String id, String body) {
+        var index = Integer.parseInt(id);
+        var old = comments.get(index);
+
+        var now = ZonedDateTime.now();
+        var newComment = new Comment(id, body, old.author(), old.createdAt(), now);
+        comments.set(index, newComment);
+        return newComment;
+    }
+
+    @Override
+    public ZonedDateTime createdAt() {
+        return null;
+    }
+
+    @Override
+    public ZonedDateTime updatedAt() {
+        return null;
+    }
+
+    @Override
+    public Map<String, Check> checks(Hash hash) {
+        return checks.get(hash.hex());
+    }
+
+    @Override
+    public void createCheck(Check check) {
+        if (!checks.containsKey(check.hash().hex())) {
+            checks.put(check.hash().hex(), new HashMap<>());
+        }
+        checks.get(check.hash().hex()).put(check.name(), check);
+    }
+
+    @Override
+    public void updateCheck(Check check) {
+        if (checks.containsKey(check.hash().hex())) {
+            checks.get(check.hash().hex()).put(check.name(), check);
+        }
+    }
+
+    @Override
+    public URI changeUrl() {
+        return null;
+    }
+
+    @Override
+    public URI changeUrl(Hash base) {
+        return null;
+    }
+
+    @Override
+    public boolean isDraft() {
+        return false;
+    }
+
+    @Override
+    public void setState(State state) {
+    }
+
+    @Override
+    public void addLabel(String label) {
+    }
+
+    @Override
+    public void removeLabel(String label) {
+    }
+
+    @Override
+    public List<String> labels() {
+        return null;
+    }
+
+    @Override
+    public URI webUrl() {
+        return null;
+    }
+
+    @Override
+    public List<HostUser> assignees() {
+        return null;
+    }
+
+    @Override
+    public void setAssignees(List<HostUser> assignees) {
+    }
+
+    @Override
+    public void setTitle(String title) {
+    }
+
+    @Override
+    public IssueProject project() {
+        return null;
+    }
+}
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/StateTests.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/StateTests.java
--- /dev/null
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/StateTests.java
@@ -0,0 +1,391 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.tester;
+
+import org.openjdk.skara.issuetracker.Comment;
+import org.openjdk.skara.host.HostUser;
+
+import java.util.*;
+import java.time.ZonedDateTime;
+
+import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.*;
+
+class StateTests {
+    @Test
+    void noCommentsShouldEqualNA() {
+        var bot = new HostUser(1, "bot", "openjdk [bot]");
+        var host = new InMemoryHost();
+        host.currentUserDetails = bot;
+
+        var repo = new InMemoryHostedRepository();
+        repo.host = host;
+
+        var pr = new InMemoryPullRequest();
+        pr.repository = repo;
+
+        var duke = new HostUser(0, "duke", "Duke");
+        pr.author = duke;
+        pr.comments = List.of();
+
+        var state = State.from(pr, "0");
+        assertEquals(Stage.NA, state.stage());
+        assertEquals(null, state.requested());
+        assertEquals(null, state.pending());
+        assertEquals(null, state.started());
+    }
+
+    @Test
+    void testCommentFromNotApprovedUserShouldEqualRequested() {
+        var bot = new HostUser(1, "bot", "openjdk [bot]");
+
+        var host = new InMemoryHost();
+        host.currentUserDetails = bot;
+
+        var repo = new InMemoryHostedRepository();
+        repo.host = host;
+
+        var pr = new InMemoryPullRequest();
+        pr.repository = repo;
+
+        var duke = new HostUser(0, "duke", "Duke");
+        pr.author = duke;
+
+        var now = ZonedDateTime.now();
+        var comment = new Comment("0", "/test tier1", duke, now, now);
+        pr.comments = List.of(comment);
+
+        var approvers = "0";
+        host.groups = Map.of(approvers, Set.of());
+
+        var state = State.from(pr, approvers);
+        assertEquals(Stage.REQUESTED, state.stage());
+        assertEquals(comment, state.requested());
+        assertEquals(null, state.pending());
+        assertEquals(null, state.started());
+    }
+
+    @Test
+    void testCommentFromApprovedUserShouldEqualApproved() {
+        var bot = new HostUser(1, "bot", "openjdk [bot]");
+
+        var host = new InMemoryHost();
+        host.currentUserDetails = bot;
+
+        var repo = new InMemoryHostedRepository();
+        repo.host = host;
+
+        var pr = new InMemoryPullRequest();
+        pr.repository = repo;
+
+        var duke = new HostUser(0, "duke", "Duke");
+        pr.author = duke;
+
+        var now = ZonedDateTime.now();
+        var comment = new Comment("0", "/test tier1", duke, now, now);
+        pr.comments = List.of(comment);
+
+        var approvers = "0";
+        host.groups = Map.of(approvers, Set.of(duke));
+
+        var state = State.from(pr, approvers);
+        assertEquals(Stage.APPROVED, state.stage());
+        assertEquals(comment, state.requested());
+        assertEquals(null, state.pending());
+        assertEquals(null, state.started());
+    }
+
+    @Test
+    void testApprovalNeededCommentShouldResultInPending() {
+        var bot = new HostUser(1, "bot", "openjdk [bot]");
+
+        var host = new InMemoryHost();
+        host.currentUserDetails = bot;
+
+        var repo = new InMemoryHostedRepository();
+        repo.host = host;
+
+        var pr = new InMemoryPullRequest();
+        pr.repository = repo;
+
+        var duke = new HostUser(0, "duke", "Duke");
+        pr.author = duke;
+
+        var now = ZonedDateTime.now();
+        var testComment = new Comment("0", "/test tier1", duke, now, now);
+
+        var pendingBody = List.of(
+            "<!-- TEST PENDING -->",
+            "<!-- tier1 -->",
+            "@duke you need to get approval to run these tests"
+        );
+        var pendingComment = new Comment("0", String.join("\n", pendingBody), bot, now, now);
+        pr.comments = List.of(testComment, pendingComment);
+        host.groups = Map.of("0", Set.of());
+
+        var state = State.from(pr, "0");
+        assertEquals(Stage.PENDING, state.stage());
+        assertEquals(testComment, state.requested());
+        assertEquals(pendingComment, state.pending());
+        assertEquals(null, state.started());
+    }
+
+    @Test
+    void testStartedCommentShouldResultInRunning() {
+        var bot = new HostUser(1, "bot", "openjdk [bot]");
+
+        var host = new InMemoryHost();
+        host.currentUserDetails = bot;
+
+        var repo = new InMemoryHostedRepository();
+        repo.host = host;
+
+        var pr = new InMemoryPullRequest();
+        pr.repository = repo;
+
+        var duke = new HostUser(0, "duke", "Duke");
+        pr.author = duke;
+
+        var now = ZonedDateTime.now();
+        var testComment = new Comment("0", "/test tier1", duke, now, now);
+
+        var pendingBody = List.of(
+            "<!-- TEST PENDING -->",
+            "<!-- tier1 -->",
+            "@duke you need to get approval to run these tests"
+        );
+        var pendingComment = new Comment("1", String.join("\n", pendingBody), bot, now, now);
+
+        var member = new HostUser(2, "foo", "Foo Bar");
+        var approveComment = new Comment("2", "/test approve", member, now, now);
+
+        var startedBody = List.of(
+            "<!-- TEST STARTED -->",
+            "<!-- 0 -->",
+            "A test job has been started with id 0"
+        );
+        var startedComment = new Comment("3", String.join("\n", startedBody), bot, now, now);
+
+        pr.comments = List.of(testComment, pendingComment, approveComment, startedComment);
+
+        var approvers = "0";
+        host.groups = Map.of(approvers, Set.of(member));
+
+        var state = State.from(pr, approvers);
+        assertEquals(Stage.STARTED, state.stage());
+        assertEquals(testComment, state.requested());
+        assertEquals(pendingComment, state.pending());
+        assertEquals(startedComment, state.started());
+    }
+
+    @Test
+    void cancelCommentFromAuthorShouldEqualCancelled() {
+        var bot = new HostUser(1, "bot", "openjdk [bot]");
+
+        var host = new InMemoryHost();
+        host.currentUserDetails = bot;
+
+        var repo = new InMemoryHostedRepository();
+        repo.host = host;
+
+        var pr = new InMemoryPullRequest();
+        pr.repository = repo;
+
+        var duke = new HostUser(0, "duke", "Duke");
+        pr.author = duke;
+
+        var now = ZonedDateTime.now();
+        var testComment = new Comment("0", "/test tier1", duke, now, now);
+        var cancelComment = new Comment("1", "/test cancel", duke, now, now);
+        pr.comments = List.of(testComment, cancelComment);
+
+        var approvers = "0";
+        host.groups = Map.of(approvers, Set.of());
+
+        var state = State.from(pr, approvers);
+        assertEquals(Stage.CANCELLED, state.stage());
+        assertEquals(testComment, state.requested());
+        assertEquals(cancelComment, state.cancelled());
+        assertEquals(null, state.pending());
+        assertEquals(null, state.started());
+    }
+
+    @Test
+    void cancelCommentFromAnotherUserShouldHaveNoEffect() {
+        var bot = new HostUser(1, "bot", "openjdk [bot]");
+
+        var host = new InMemoryHost();
+        host.currentUserDetails = bot;
+
+        var repo = new InMemoryHostedRepository();
+        repo.host = host;
+
+        var pr = new InMemoryPullRequest();
+        pr.repository = repo;
+
+        var duke = new HostUser(0, "duke", "Duke");
+        pr.author = duke;
+
+        var user = new HostUser(0, "foo", "Foo Bar");
+
+        var now = ZonedDateTime.now();
+        var testComment = new Comment("0", "/test tier1", duke, now, now);
+        var cancelComment = new Comment("1", "/test cancel", user, now, now);
+        pr.comments = List.of(testComment, cancelComment);
+
+        var approvers = "0";
+        host.groups = Map.of(approvers, Set.of());
+
+        var state = State.from(pr, approvers);
+        assertEquals(Stage.REQUESTED, state.stage());
+        assertEquals(testComment, state.requested());
+        assertEquals(null, state.cancelled());
+        assertEquals(null, state.pending());
+        assertEquals(null, state.started());
+    }
+
+    @Test
+    void multipleTestCommentsShouldOnlyCareAboutLast() {
+        var bot = new HostUser(1, "bot", "openjdk [bot]");
+
+        var host = new InMemoryHost();
+        host.currentUserDetails = bot;
+
+        var repo = new InMemoryHostedRepository();
+        repo.host = host;
+
+        var pr = new InMemoryPullRequest();
+        pr.repository = repo;
+
+        var duke = new HostUser(0, "duke", "Duke");
+        pr.author = duke;
+
+        var now = ZonedDateTime.now();
+        var test1Comment = new Comment("0", "/test tier1", duke, now, now);
+        var test2Comment = new Comment("1", "/test tier1,tier2", duke, now, now);
+        var test3Comment = new Comment("2", "/test tier1,tier2,tier3", duke, now, now);
+        pr.comments = List.of(test1Comment, test2Comment, test3Comment);
+
+        var approvers = "0";
+        host.groups = Map.of(approvers, Set.of());
+
+        var state = State.from(pr, approvers);
+        assertEquals(Stage.REQUESTED, state.stage());
+        assertEquals(test3Comment, state.requested());
+        assertEquals(null, state.cancelled());
+        assertEquals(null, state.pending());
+        assertEquals(null, state.started());
+    }
+
+    @Test
+    void errorAfterRequestedShouldBeError() {
+        var bot = new HostUser(1, "bot", "openjdk [bot]");
+
+        var host = new InMemoryHost();
+        host.currentUserDetails = bot;
+
+        var repo = new InMemoryHostedRepository();
+        repo.host = host;
+
+        var pr = new InMemoryPullRequest();
+        pr.repository = repo;
+
+        var duke = new HostUser(0, "duke", "Duke");
+        pr.author = duke;
+
+        var now = ZonedDateTime.now();
+        var testComment = new Comment("0", "/test tier1", duke, now, now);
+
+        var lines = List.of(
+            "<!-- TEST ERROR -->",
+            "The test tier1 does not exist"
+        );
+        var errorComment = new Comment("2", String.join("\n", lines), bot, now, now);
+        pr.comments = List.of(testComment, errorComment);
+
+        var approvers = "0";
+        host.groups = Map.of(approvers, Set.of());
+
+        var state = State.from(pr, approvers);
+        assertEquals(Stage.ERROR, state.stage());
+        assertEquals(testComment, state.requested());
+        assertEquals(null, state.pending());
+        assertEquals(null, state.started());
+    }
+
+    @Test
+    void testFinishedCommentShouldResultInFinished() {
+        var bot = new HostUser(1, "bot", "openjdk [bot]");
+
+        var host = new InMemoryHost();
+        host.currentUserDetails = bot;
+
+        var repo = new InMemoryHostedRepository();
+        repo.host = host;
+
+        var pr = new InMemoryPullRequest();
+        pr.repository = repo;
+
+        var duke = new HostUser(0, "duke", "Duke");
+        pr.author = duke;
+
+        var now = ZonedDateTime.now();
+        var testComment = new Comment("0", "/test tier1", duke, now, now);
+
+        var pendingBody = List.of(
+            "<!-- TEST PENDING -->",
+            "<!-- tier1 -->",
+            "@duke you need to get approval to run these tests"
+        );
+        var pendingComment = new Comment("1", String.join("\n", pendingBody), bot, now, now);
+
+        var member = new HostUser(2, "foo", "Foo Bar");
+        var approveComment = new Comment("2", "/test approve", member, now, now);
+
+        var startedBody = List.of(
+            "<!-- TEST STARTED -->",
+            "<!-- 0 -->",
+            "A test job has been started with id 0"
+        );
+        var startedComment = new Comment("3", String.join("\n", startedBody), bot, now, now);
+
+        var finishedBody = List.of(
+            "<!-- TEST FINISHED -->",
+            "<!-- 0 -->",
+            "A test job has been started with id 0"
+        );
+        var finishedComment = new Comment("4", String.join("\n", finishedBody), bot, now, now);
+
+        pr.comments = List.of(testComment, pendingComment, approveComment, startedComment, finishedComment);
+
+        var approvers = "0";
+        host.groups = Map.of(approvers, Set.of(member));
+
+        var state = State.from(pr, approvers);
+        assertEquals(Stage.FINISHED, state.stage());
+        assertEquals(testComment, state.requested());
+        assertEquals(pendingComment, state.pending());
+        assertEquals(startedComment, state.started());
+        assertEquals(finishedComment, state.finished());
+    }
+}
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/TestBotTests.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/TestBotTests.java
--- /dev/null
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/TestBotTests.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.tester;
+
+import org.openjdk.skara.test.*;
+
+import java.io.*;
+import java.util.*;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.TestInfo;
+import static org.junit.jupiter.api.Assertions.*;
+
+class TestBotTests {
+    @Test
+    void noTestCommentShouldDoNothing(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tmp = new TemporaryDirectory()) {
+            var upstreamHostedRepo = credentials.getHostedRepository();
+            var personalHostedRepo = credentials.getHostedRepository();
+            var pr = personalHostedRepo.createPullRequest(upstreamHostedRepo,
+                                                          "master",
+                                                          "master",
+                                                          "Title",
+                                                          List.of("body"));
+
+            var comments = pr.comments();
+            assertEquals(0, comments.size());
+
+            var storage = tmp.path().resolve("storage");
+            var ci = new InMemoryContinuousIntegration();
+            var bot = new TestBot(ci, "0", List.of(), List.of(), "", storage, upstreamHostedRepo);
+            var runner = new TestBotRunner();
+
+            runner.runPeriodicItems(bot);
+
+            comments = pr.comments();
+            assertEquals(0, comments.size());
+        }
+    }
+}
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/TestWorkItemTests.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/TestWorkItemTests.java
--- /dev/null
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/TestWorkItemTests.java
@@ -0,0 +1,952 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.tester;
+
+import org.openjdk.skara.forge.CheckStatus;
+import org.openjdk.skara.host.*;
+import org.openjdk.skara.issuetracker.Comment;
+import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.test.*;
+import org.openjdk.skara.ci.Job;
+
+import java.io.*;
+import java.net.URI;
+import java.nio.file.*;
+import java.util.*;
+import java.time.ZonedDateTime;
+
+import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.*;
+
+class TestWorkItemTests {
+    @Test
+    void noTestCommentsShouldDoNothing() throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var ci = new InMemoryContinuousIntegration();
+            var approvers = "0";
+            var available = List.of("tier1", "tier2", "tier3");
+            var defaultJobs = List.of("tier1");
+            var name = "test";
+            var storage = tmp.path().resolve("storage");
+            var scratch = tmp.path().resolve("storage");
+
+            var bot = new HostUser(1, "bot", "openjdk [bot]");
+            var host = new InMemoryHost();
+            host.currentUserDetails = bot;
+
+            var repo = new InMemoryHostedRepository();
+            repo.host = host;
+
+            var pr = new InMemoryPullRequest();
+            pr.repository = repo;
+
+            var duke = new HostUser(0, "duke", "Duke");
+            pr.author = duke;
+            pr.comments = List.of();
+
+            var item = new TestWorkItem(ci, approvers, available, defaultJobs, name, storage, pr);
+            item.run(scratch);
+
+            var comments = pr.comments();
+            assertEquals(0, comments.size());
+        }
+    }
+
+    @Test
+    void topLevelTestApproveShouldDoNothing() throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var ci = new InMemoryContinuousIntegration();
+            var approvers = "0";
+            var available = List.of("tier1", "tier2", "tier3");
+            var defaultJobs = List.of("tier1");
+            var name = "test";
+            var storage = tmp.path().resolve("storage");
+            var scratch = tmp.path().resolve("storage");
+
+            var bot = new HostUser(1, "bot", "openjdk [bot]");
+            var host = new InMemoryHost();
+            host.currentUserDetails = bot;
+
+            var repo = new InMemoryHostedRepository();
+            repo.host = host;
+
+            var pr = new InMemoryPullRequest();
+            pr.repository = repo;
+
+            var duke = new HostUser(0, "duke", "Duke");
+            var now = ZonedDateTime.now();
+            pr.author = duke;
+            var testApproveComment = new Comment("0", "/test approve", duke, now, now);
+            pr.comments = List.of(testApproveComment);
+
+            var item = new TestWorkItem(ci, approvers, available, defaultJobs, name, storage, pr);
+            item.run(scratch);
+
+            var comments = pr.comments();
+            assertEquals(1, comments.size());
+            assertEquals(testApproveComment, comments.get(0));
+        }
+    }
+
+    @Test
+    void topLevelTestCancelShouldDoNothing() throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var ci = new InMemoryContinuousIntegration();
+            var approvers = "0";
+            var available = List.of("tier1", "tier2", "tier3");
+            var defaultJobs = List.of("tier1");
+            var name = "test";
+            var storage = tmp.path().resolve("storage");
+            var scratch = tmp.path().resolve("storage");
+
+            var bot = new HostUser(1, "bot", "openjdk [bot]");
+            var host = new InMemoryHost();
+            host.currentUserDetails = bot;
+
+            var repo = new InMemoryHostedRepository();
+            repo.host = host;
+
+            var pr = new InMemoryPullRequest();
+            pr.repository = repo;
+
+            var duke = new HostUser(0, "duke", "Duke");
+            var now = ZonedDateTime.now();
+            pr.author = duke;
+            var testApproveComment = new Comment("0", "/test cancel", duke, now, now);
+            pr.comments = List.of(testApproveComment);
+
+            var item = new TestWorkItem(ci, approvers, available, defaultJobs, name, storage, pr);
+            item.run(scratch);
+
+            var comments = pr.comments();
+            assertEquals(1, comments.size());
+            assertEquals(testApproveComment, comments.get(0));
+        }
+    }
+
+    @Test
+    void testCommentWithMadeUpJobShouldBeError() throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var ci = new InMemoryContinuousIntegration();
+            var approvers = "0";
+            var available = List.of("tier1", "tier2", "tier3");
+            var defaultJobs = List.of("tier1");
+            var name = "test";
+            var storage = tmp.path().resolve("storage");
+            var scratch = tmp.path().resolve("storage");
+
+            var bot = new HostUser(1, "bot", "openjdk [bot]");
+            var host = new InMemoryHost();
+            host.currentUserDetails = bot;
+            host.groups = Map.of("0", Set.of());
+
+            var repo = new InMemoryHostedRepository();
+            repo.host = host;
+
+            var pr = new InMemoryPullRequest();
+            pr.repository = repo;
+
+            var duke = new HostUser(0, "duke", "Duke");
+            pr.author = duke;
+
+            var now = ZonedDateTime.now();
+            var comment = new Comment("0", "/test foobar", duke, now, now);
+            pr.comments = new ArrayList<>(List.of(comment));
+
+            var item = new TestWorkItem(ci, approvers, available, defaultJobs, name, storage, pr);
+            item.run(scratch);
+
+            var comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(comment, comments.get(0));
+
+            var secondComment = comments.get(1);
+            assertEquals(bot, secondComment.author());
+
+            var lines = secondComment.body().split("\n");
+            assertEquals(2, lines.length);
+            assertEquals("<!-- TEST ERROR -->", lines[0]);
+            assertEquals("@duke the test group foobar does not exist", lines[1]);
+        }
+    }
+
+    @Test
+    void testCommentFromUnapprovedUserShouldBePending() throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var ci = new InMemoryContinuousIntegration();
+            var approvers = "0";
+            var available = List.of("tier1", "tier2", "tier3");
+            var defaultJobs = List.of("tier1");
+            var name = "test";
+            var storage = tmp.path().resolve("storage");
+            var scratch = tmp.path().resolve("storage");
+
+            var bot = new HostUser(1, "bot", "openjdk [bot]");
+            var host = new InMemoryHost();
+            host.currentUserDetails = bot;
+            host.groups = Map.of("0", Set.of());
+
+            var repo = new InMemoryHostedRepository();
+            repo.host = host;
+
+            var pr = new InMemoryPullRequest();
+            pr.repository = repo;
+
+            var duke = new HostUser(0, "duke", "Duke");
+            pr.author = duke;
+            pr.headHash = new Hash("01234567890123456789012345789012345789");
+
+            var now = ZonedDateTime.now();
+            var comment = new Comment("0", "/test foobar", duke, now, now);
+            pr.comments = new ArrayList<>(List.of(comment));
+
+            var item = new TestWorkItem(ci, approvers, available, defaultJobs, name, storage, pr);
+
+            // Non-existing test group should result in error
+            item.run(scratch);
+
+            var comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(comment, comments.get(0));
+
+            var secondComment = comments.get(1);
+            assertEquals(bot, secondComment.author());
+
+            var lines = secondComment.body().split("\n");
+            assertEquals(2, lines.length);
+            assertEquals("<!-- TEST ERROR -->", lines[0]);
+            assertEquals("@duke the test group foobar does not exist", lines[1]);
+
+            // Trying to test again should be fine
+            var thirdComment = new Comment("2", "/test tier1", duke, now, now);
+            pr.comments.add(thirdComment);
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(4, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+            assertEquals(thirdComment, comments.get(2));
+
+            var fourthComment = comments.get(3);
+            assertEquals(bot, fourthComment.author());
+
+            lines = fourthComment.body().split("\n");
+            assertEquals("<!-- TEST PENDING -->", lines[0]);
+            assertEquals("<!-- 01234567890123456789012345789012345789 -->", lines[1]);
+            assertEquals("<!-- tier1 -->", lines[2]);
+            assertEquals("@duke you need to get approval to run the tests in tier1 for commits up until 01234567",
+                         lines[3]);
+
+            // Nothing should change if we run it yet again
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(4, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+            assertEquals(thirdComment, comments.get(2));
+            assertEquals(fourthComment, comments.get(3));
+        }
+    }
+
+    @Test
+    void cancelAtestCommentShouldBeCancel() throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var ci = new InMemoryContinuousIntegration();
+            var approvers = "0";
+            var available = List.of("tier1", "tier2", "tier3");
+            var defaultJobs = List.of("tier1");
+            var name = "test";
+            var storage = tmp.path().resolve("storage");
+            var scratch = tmp.path().resolve("storage");
+
+            var bot = new HostUser(1, "bot", "openjdk [bot]");
+            var host = new InMemoryHost();
+            host.currentUserDetails = bot;
+            host.groups = Map.of("0", Set.of());
+
+            var repo = new InMemoryHostedRepository();
+            repo.host = host;
+
+            var pr = new InMemoryPullRequest();
+            pr.repository = repo;
+
+            var duke = new HostUser(0, "duke", "Duke");
+            pr.author = duke;
+            pr.headHash = new Hash("01234567890123456789012345789012345789");
+
+            var now = ZonedDateTime.now();
+            var testComment = new Comment("0", "/test tier1", duke, now, now);
+            var cancelComment = new Comment("1", "/test cancel", duke, now, now);
+            pr.comments = new ArrayList<>(List.of(testComment, cancelComment));
+
+            var item = new TestWorkItem(ci, approvers, available, defaultJobs, name, storage, pr);
+
+            item.run(scratch);
+
+            var comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(testComment, comments.get(0));
+            assertEquals(cancelComment, comments.get(1));
+        }
+    }
+
+    @Test
+    void cancellingAPendingTestCommentShouldWork() throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var ci = new InMemoryContinuousIntegration();
+            var approvers = "0";
+            var available = List.of("tier1", "tier2", "tier3");
+            var defaultJobs = List.of("tier1");
+            var name = "test";
+            var storage = tmp.path().resolve("storage");
+            var scratch = tmp.path().resolve("storage");
+
+            var bot = new HostUser(1, "bot", "openjdk [bot]");
+            var host = new InMemoryHost();
+            host.currentUserDetails = bot;
+            host.groups = Map.of(approvers, Set.of());
+
+            var repo = new InMemoryHostedRepository();
+            repo.host = host;
+
+            var pr = new InMemoryPullRequest();
+            pr.repository = repo;
+
+            var duke = new HostUser(0, "duke", "Duke");
+            pr.author = duke;
+            pr.headHash = new Hash("01234567890123456789012345789012345789");
+
+            var now = ZonedDateTime.now();
+            var comment = new Comment("0", "/test tier1", duke, now, now);
+            pr.comments = new ArrayList<>(List.of(comment));
+
+            var item = new TestWorkItem(ci, approvers, available, defaultJobs, name, storage, pr);
+
+            item.run(scratch);
+
+            var comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(comment, comments.get(0));
+            var secondComment = comments.get(1);
+            assertEquals(bot, secondComment.author());
+
+            var lines = secondComment.body().split("\n");
+            assertEquals("<!-- TEST PENDING -->", lines[0]);
+            assertEquals("<!-- 01234567890123456789012345789012345789 -->", lines[1]);
+            assertEquals("<!-- tier1 -->", lines[2]);
+            assertEquals("@duke you need to get approval to run the tests in tier1 for commits up until 01234567",
+                         lines[3]);
+
+            // Nothing should change if we run it yet again
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+
+            // Cancelling the test now should be fine
+            var cancelComment = new Comment("2", "/test cancel", duke, now, now);
+            pr.comments.add(cancelComment);
+
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(3, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+            assertEquals(cancelComment, comments.get(2));
+
+            // Approving the test should not start a job, it has already been cancelled
+            var member = new HostUser(3, "foo", "Foo Bar");
+            host.groups = Map.of(approvers, Set.of(member));
+            var approveComment = new Comment("3", "/test approve", member, now, now);
+            pr.comments.add(approveComment);
+
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(4, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+            assertEquals(cancelComment, comments.get(2));
+            assertEquals(approveComment, comments.get(3));
+        }
+    }
+
+    @Test
+    void cancellingApprovedPendingRequestShouldBeCancelled() throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var ci = new InMemoryContinuousIntegration();
+            var approvers = "0";
+            var available = List.of("tier1", "tier2", "tier3");
+            var defaultJobs = List.of("tier1");
+            var name = "test";
+            var storage = tmp.path().resolve("storage");
+            var scratch = tmp.path().resolve("storage");
+
+            var bot = new HostUser(1, "bot", "openjdk [bot]");
+            var host = new InMemoryHost();
+            host.currentUserDetails = bot;
+            host.groups = Map.of(approvers, Set.of());
+
+            var repo = new InMemoryHostedRepository();
+            repo.host = host;
+
+            var pr = new InMemoryPullRequest();
+            pr.repository = repo;
+
+            var duke = new HostUser(0, "duke", "Duke");
+            pr.author = duke;
+            pr.headHash = new Hash("01234567890123456789012345789012345789");
+
+            var now = ZonedDateTime.now();
+            var comment = new Comment("0", "/test tier1", duke, now, now);
+            pr.comments = new ArrayList<>(List.of(comment));
+
+            var item = new TestWorkItem(ci, approvers, available, defaultJobs, name, storage, pr);
+
+            item.run(scratch);
+
+            var comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(comment, comments.get(0));
+            var secondComment = comments.get(1);
+            assertEquals(bot, secondComment.author());
+
+            var lines = secondComment.body().split("\n");
+            assertEquals("<!-- TEST PENDING -->", lines[0]);
+            assertEquals("<!-- 01234567890123456789012345789012345789 -->", lines[1]);
+            assertEquals("<!-- tier1 -->", lines[2]);
+            assertEquals("@duke you need to get approval to run the tests in tier1 for commits up until 01234567",
+                         lines[3]);
+
+            // Nothing should change if we run it yet again
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+
+            // Approve the request
+            var member = new HostUser(2, "foo", "Foo Bar");
+            host.groups = Map.of(approvers, Set.of(member));
+            var approveComment = new Comment("2", "/test approve", member, now, now);
+            pr.comments.add(approveComment);
+
+            // Cancelling the request
+            var cancelComment = new Comment("2", "/test cancel", duke, now, now);
+            pr.comments.add(cancelComment);
+
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(4, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+            assertEquals(approveComment, comments.get(2));
+            assertEquals(cancelComment, comments.get(3));
+        }
+    }
+
+    @Test
+    void approvedPendingRequestShouldBeStarted() throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var localRepoDir = tmp.path().resolve("repository.git");
+            var localRepo = Repository.init(localRepoDir, VCS.GIT);
+            var readme = localRepoDir.resolve("README");
+            Files.writeString(readme, "Hello\n");
+            localRepo.add(readme);
+            var head = localRepo.commit("Add README", "duke", "duke@openjdk.org");
+
+            var ci = new InMemoryContinuousIntegration();
+            var approvers = "0";
+            var available = List.of("tier1", "tier2", "tier3");
+            var defaultJobs = List.of("tier1");
+            var name = "test";
+            var storage = tmp.path().resolve("storage");
+            var scratch = tmp.path().resolve("storage");
+
+            var bot = new HostUser(1, "bot", "openjdk [bot]");
+            var host = new InMemoryHost();
+            host.currentUserDetails = bot;
+            host.groups = Map.of(approvers, Set.of());
+
+            var repo = new InMemoryHostedRepository();
+            repo.host = host;
+            repo.webUrl = URI.create("file://" + localRepoDir.toAbsolutePath());
+            repo.url = URI.create("file://" + localRepoDir.toAbsolutePath());
+            repo.id = 1337L;
+
+            var pr = new InMemoryPullRequest();
+            pr.repository = repo;
+            pr.id = "17";
+            pr.targetRef = "master";
+
+            var duke = new HostUser(0, "duke", "Duke");
+            pr.author = duke;
+            pr.headHash = head;
+
+            var now = ZonedDateTime.now();
+            var comment = new Comment("0", "/test tier1", duke, now, now);
+            pr.comments = new ArrayList<>(List.of(comment));
+
+            var item = new TestWorkItem(ci, approvers, available, defaultJobs, name, storage, pr);
+
+            item.run(scratch);
+
+            var comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(comment, comments.get(0));
+            var secondComment = comments.get(1);
+            assertEquals(bot, secondComment.author());
+
+            var lines = secondComment.body().split("\n");
+            assertEquals("<!-- TEST PENDING -->", lines[0]);
+            assertEquals("<!-- " + head.hex() + " -->", lines[1]);
+            assertEquals("<!-- tier1 -->", lines[2]);
+            assertEquals("@duke you need to get approval to run the tests in tier1 for commits up until " + head.abbreviate(),
+                         lines[3]);
+
+            // Nothing should change if we run it yet again
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+
+            // Approve the request
+            var member = new HostUser(2, "foo", "Foo Bar");
+            host.groups = Map.of(approvers, Set.of(member));
+            var approveComment = new Comment("2", "/test approve", member, now, now);
+            pr.comments.add(approveComment);
+
+            var expectedJobId = "null-1337-17-0";
+            var expectedJob = new InMemoryJob();
+            expectedJob.status = new Job.Status(0, 1, 7);
+            ci.jobs.put(expectedJobId, expectedJob);
+
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(4, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+            assertEquals(approveComment, comments.get(2));
+
+            var fourthComment = comments.get(3);
+            lines = fourthComment.body().split("\n");
+            assertEquals("<!-- TEST STARTED -->", lines[0]);
+            assertEquals("<!-- " + expectedJobId + " -->", lines[1]);
+            assertEquals("<!-- " + head.hex() + " -->", lines[2]);
+            assertEquals("A test job has been started with id: " + expectedJobId, lines[3]);
+
+            assertEquals(1, ci.submissions.size());
+            var submission = ci.submissions.get(0);
+            assertTrue(submission.source.startsWith(storage));
+            assertEquals(List.of("tier1"), submission.jobs);
+            assertEquals(expectedJobId, submission.id);
+
+            var checks = pr.checks(pr.headHash());
+            assertEquals(1, checks.keySet().size());
+            var check = checks.get("test");
+            assertEquals("Summary", check.title().get());
+            assertTrue(check.summary()
+                            .get()
+                            .contains("0 jobs completed, 1 job running, 7 jobs not yet started"));
+        }
+    }
+
+    @Test
+    void cancellingApprovedPendingRequestShouldBeCancel() throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var localRepoDir = tmp.path().resolve("repository.git");
+            var localRepo = Repository.init(localRepoDir, VCS.GIT);
+            var readme = localRepoDir.resolve("README");
+            Files.writeString(readme, "Hello\n");
+            localRepo.add(readme);
+            var head = localRepo.commit("Add README", "duke", "duke@openjdk.org");
+
+            var ci = new InMemoryContinuousIntegration();
+            var approvers = "0";
+            var available = List.of("tier1", "tier2", "tier3");
+            var defaultJobs = List.of("tier1");
+            var name = "test";
+            var storage = tmp.path().resolve("storage");
+            var scratch = tmp.path().resolve("storage");
+
+            var bot = new HostUser(1, "bot", "openjdk [bot]");
+            var host = new InMemoryHost();
+            host.currentUserDetails = bot;
+            host.groups = Map.of(approvers, Set.of());
+
+            var repo = new InMemoryHostedRepository();
+            repo.host = host;
+            repo.webUrl = URI.create("file://" + localRepoDir.toAbsolutePath());
+            repo.url = URI.create("file://" + localRepoDir.toAbsolutePath());
+            repo.id = 1337L;
+
+            var pr = new InMemoryPullRequest();
+            pr.repository = repo;
+            pr.id = "17";
+            pr.targetRef = "master";
+
+            var duke = new HostUser(0, "duke", "Duke");
+            pr.author = duke;
+            pr.headHash = head;
+
+            var now = ZonedDateTime.now();
+            var comment = new Comment("0", "/test tier1", duke, now, now);
+            pr.comments = new ArrayList<>(List.of(comment));
+
+            var item = new TestWorkItem(ci, approvers, available, defaultJobs, name, storage, pr);
+
+            item.run(scratch);
+
+            var comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(comment, comments.get(0));
+            var secondComment = comments.get(1);
+            assertEquals(bot, secondComment.author());
+
+            var lines = secondComment.body().split("\n");
+            assertEquals("<!-- TEST PENDING -->", lines[0]);
+            assertEquals("<!-- " + head.hex() + " -->", lines[1]);
+            assertEquals("<!-- tier1 -->", lines[2]);
+            assertEquals("@duke you need to get approval to run the tests in tier1 for commits up until " + head.abbreviate(),
+                         lines[3]);
+
+            // Nothing should change if we run it yet again
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+
+            // Approve the request
+            var member = new HostUser(2, "foo", "Foo Bar");
+            host.groups = Map.of(approvers, Set.of(member));
+            var approveComment = new Comment("2", "/test approve", member, now, now);
+            pr.comments.add(approveComment);
+
+            var expectedJobId = "null-1337-17-0";
+            var expectedJob = new InMemoryJob();
+            expectedJob.status = new Job.Status(0, 1, 7);
+            ci.jobs.put(expectedJobId, expectedJob);
+
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(4, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+            assertEquals(approveComment, comments.get(2));
+
+            var fourthComment = comments.get(3);
+            lines = fourthComment.body().split("\n");
+            assertEquals("<!-- TEST STARTED -->", lines[0]);
+            assertEquals("<!-- " + expectedJobId + " -->", lines[1]);
+            assertEquals("<!-- " + head.hex() + " -->", lines[2]);
+            assertEquals("A test job has been started with id: " + expectedJobId, lines[3]);
+
+            assertEquals(1, ci.submissions.size());
+            var submission = ci.submissions.get(0);
+            assertTrue(submission.source.startsWith(storage));
+            assertEquals(List.of("tier1"), submission.jobs);
+            assertEquals(expectedJobId, submission.id);
+
+            var checks = pr.checks(pr.headHash());
+            assertEquals(1, checks.keySet().size());
+            var check = checks.get("test");
+            assertEquals("Summary", check.title().get());
+            assertEquals(CheckStatus.IN_PROGRESS, check.status());
+            assertTrue(check.summary()
+                            .get()
+                            .contains("## Status\n0 jobs completed, 1 job running, 7 jobs not yet started\n"));
+
+            var cancelComment = new Comment("4", "/test cancel", duke, now, now);
+            pr.comments.add(cancelComment);
+
+            item.run(scratch);
+
+            checks = pr.checks(pr.headHash());
+            assertEquals(1, checks.keySet().size());
+            check = checks.get("test");
+            assertEquals("Summary", check.title().get());
+            assertEquals(CheckStatus.CANCELLED, check.status());
+            assertTrue(check.summary()
+                            .get()
+                            .contains("## Status\n0 jobs completed, 1 job running, 7 jobs not yet started\n"));
+
+            assertEquals(expectedJobId, ci.cancelled.get(0));
+        }
+    }
+
+    @Test
+    void errorWhenCreatingTestJobShouldResultInError() throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var localRepoDir = tmp.path().resolve("repository.git");
+            var localRepo = Repository.init(localRepoDir, VCS.GIT);
+            var readme = localRepoDir.resolve("README");
+            Files.writeString(readme, "Hello\n");
+            localRepo.add(readme);
+            var head = localRepo.commit("Add README", "duke", "duke@openjdk.org");
+
+            var ci = new InMemoryContinuousIntegration();
+            var approvers = "0";
+            var available = List.of("tier1", "tier2", "tier3");
+            var defaultJobs = List.of("tier1");
+            var name = "test";
+            var storage = tmp.path().resolve("storage");
+            var scratch = tmp.path().resolve("storage");
+
+            var bot = new HostUser(1, "bot", "openjdk [bot]");
+            var host = new InMemoryHost();
+            host.currentUserDetails = bot;
+            host.groups = Map.of(approvers, Set.of());
+
+            var repo = new InMemoryHostedRepository();
+            repo.host = host;
+            repo.webUrl = URI.create("file://" + localRepoDir.toAbsolutePath());
+            repo.url = URI.create("file://" + localRepoDir.toAbsolutePath());
+            repo.id = 1337L;
+
+            var pr = new InMemoryPullRequest();
+            pr.repository = repo;
+            pr.id = "17";
+            pr.targetRef = "master";
+
+            var duke = new HostUser(0, "duke", "Duke");
+            pr.author = duke;
+            pr.headHash = head;
+
+            var now = ZonedDateTime.now();
+            var comment = new Comment("0", "/test tier1", duke, now, now);
+            pr.comments = new ArrayList<>(List.of(comment));
+
+            var item = new TestWorkItem(ci, approvers, available, defaultJobs, name, storage, pr);
+
+            item.run(scratch);
+
+            var comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(comment, comments.get(0));
+            var secondComment = comments.get(1);
+            assertEquals(bot, secondComment.author());
+
+            var lines = secondComment.body().split("\n");
+            assertEquals("<!-- TEST PENDING -->", lines[0]);
+            assertEquals("<!-- " + head.hex() + " -->", lines[1]);
+            assertEquals("<!-- tier1 -->", lines[2]);
+            assertEquals("@duke you need to get approval to run the tests in tier1 for commits up until " + head.abbreviate(),
+                         lines[3]);
+
+            // Nothing should change if we run it yet again
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+
+            // Approve the request
+            var member = new HostUser(2, "foo", "Foo Bar");
+            host.groups = Map.of(approvers, Set.of(member));
+            var approveComment = new Comment("2", "/test approve", member, now, now);
+            pr.comments.add(approveComment);
+
+            ci.throwOnSubmit = true;
+            assertThrows(UncheckedIOException.class, () -> item.run(scratch));
+
+            comments = pr.comments();
+            assertEquals(4, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+            assertEquals(approveComment, comments.get(2));
+
+            var fifthComment = comments.get(3);
+            lines = fifthComment.body().split("\n");
+            assertEquals("<!-- TEST ERROR -->", lines[0]);
+            assertEquals("Could not create test job", lines[1]);
+        }
+    }
+
+    @Test
+    void finishedJobShouldResultInFinishedComment() throws IOException {
+        try (var tmp = new TemporaryDirectory()) {
+            var localRepoDir = tmp.path().resolve("repository.git");
+            var localRepo = Repository.init(localRepoDir, VCS.GIT);
+            var readme = localRepoDir.resolve("README");
+            Files.writeString(readme, "Hello\n");
+            localRepo.add(readme);
+            var head = localRepo.commit("Add README", "duke", "duke@openjdk.org");
+
+            var ci = new InMemoryContinuousIntegration();
+            var approvers = "0";
+            var available = List.of("tier1", "tier2", "tier3");
+            var defaultJobs = List.of("tier1");
+            var name = "test";
+            var storage = tmp.path().resolve("storage");
+            var scratch = tmp.path().resolve("storage");
+
+            var bot = new HostUser(1, "bot", "openjdk [bot]");
+            var host = new InMemoryHost();
+            host.currentUserDetails = bot;
+            host.groups = Map.of(approvers, Set.of());
+
+            var repo = new InMemoryHostedRepository();
+            repo.host = host;
+            repo.webUrl = URI.create("file://" + localRepoDir.toAbsolutePath());
+            repo.url = URI.create("file://" + localRepoDir.toAbsolutePath());
+            repo.id = 1337L;
+
+            var pr = new InMemoryPullRequest();
+            pr.repository = repo;
+            pr.id = "17";
+            pr.targetRef = "master";
+
+            var duke = new HostUser(0, "duke", "Duke");
+            pr.author = duke;
+            pr.headHash = head;
+
+            var now = ZonedDateTime.now();
+            var comment = new Comment("0", "/test tier1", duke, now, now);
+            pr.comments = new ArrayList<>(List.of(comment));
+
+            var item = new TestWorkItem(ci, approvers, available, defaultJobs, name, storage, pr);
+
+            item.run(scratch);
+
+            var comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(comment, comments.get(0));
+            var secondComment = comments.get(1);
+            assertEquals(bot, secondComment.author());
+
+            var lines = secondComment.body().split("\n");
+            assertEquals("<!-- TEST PENDING -->", lines[0]);
+            assertEquals("<!-- " + head.hex() + " -->", lines[1]);
+            assertEquals("<!-- tier1 -->", lines[2]);
+            assertEquals("@duke you need to get approval to run the tests in tier1 for commits up until " + head.abbreviate(),
+                         lines[3]);
+
+            // Nothing should change if we run it yet again
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(2, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+
+            // Approve the request
+            var member = new HostUser(2, "foo", "Foo Bar");
+            host.groups = Map.of(approvers, Set.of(member));
+            var approveComment = new Comment("2", "/test approve", member, now, now);
+            pr.comments.add(approveComment);
+
+            var expectedJobId = "null-1337-17-0";
+            var expectedJob = new InMemoryJob();
+            expectedJob.status = new Job.Status(0, 1, 7);
+            ci.jobs.put(expectedJobId, expectedJob);
+
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(4, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+            assertEquals(approveComment, comments.get(2));
+
+            var fourthComment = comments.get(3);
+            lines = fourthComment.body().split("\n");
+            assertEquals("<!-- TEST STARTED -->", lines[0]);
+            assertEquals("<!-- " + expectedJobId + " -->", lines[1]);
+            assertEquals("<!-- " + head.hex() + " -->", lines[2]);
+            assertEquals("A test job has been started with id: " + expectedJobId, lines[3]);
+
+            assertEquals(1, ci.submissions.size());
+            var submission = ci.submissions.get(0);
+            assertTrue(submission.source.startsWith(storage));
+            assertEquals(List.of("tier1"), submission.jobs);
+            assertEquals(expectedJobId, submission.id);
+
+            var checks = pr.checks(pr.headHash());
+            assertEquals(1, checks.keySet().size());
+            var check = checks.get("test");
+            assertEquals("Summary", check.title().get());
+            assertEquals(CheckStatus.IN_PROGRESS, check.status());
+            assertTrue(check.summary()
+                            .get()
+                            .contains("0 jobs completed, 1 job running, 7 jobs not yet started"));
+
+            var job = ci.jobs.get(expectedJobId);
+            assertNotNull(job);
+            job.id = "id";
+            job.state = Job.State.COMPLETED;
+            job.status = new Job.Status(8, 0, 0);
+            job.result = new Job.Result(8, 0, 0);
+
+            item.run(scratch);
+
+            comments = pr.comments();
+            assertEquals(5, comments.size());
+            assertEquals(comment, comments.get(0));
+            assertEquals(secondComment, comments.get(1));
+            assertEquals(approveComment, comments.get(2));
+            assertEquals(fourthComment, comments.get(3));
+
+            var finishedComment = comments.get(4);
+            lines = finishedComment.body().split("\n");
+            assertEquals("<!-- TEST FINISHED -->", lines[0]);
+            assertEquals("<!-- " + expectedJobId +" -->", lines[1]);
+            assertEquals("<!-- " + head.hex() +" -->", lines[2]);
+            assertEquals("@duke your test job with id " + expectedJobId + " for commits up until " +
+                         head.abbreviate() + " has finished.", lines[3]);
+
+            checks = pr.checks(pr.headHash());
+            assertEquals(1, checks.keySet().size());
+            check = checks.get("test");
+            assertEquals("Summary", check.title().get());
+            assertEquals(CheckStatus.SUCCESS, check.status());
+
+            var summaryLines = check.summary().get().split("\n");
+            assertEquals("## Id", summaryLines[0]);
+            assertEquals("`id`", summaryLines[1]);
+            assertEquals("", summaryLines[2]);
+            assertEquals("## Builds", summaryLines[3]);
+            assertEquals("", summaryLines[4]);
+            assertEquals("## Tests", summaryLines[5]);
+            assertEquals("", summaryLines[6]);
+            assertEquals("## Status", summaryLines[7]);
+            assertEquals("8 jobs completed, 0 jobs running, 0 jobs not yet started", summaryLines[8]);
+            assertEquals("", summaryLines[9]);
+            assertEquals("## Result", summaryLines[10]);
+            assertEquals("8 jobs passed, 0 jobs with failures, 0 jobs not run", summaryLines[11]);
+        }
+    }
+}
diff a/bots/topological/build.gradle b/bots/topological/build.gradle
--- a/bots/topological/build.gradle
+++ b/bots/topological/build.gradle
@@ -30,10 +30,11 @@
         opens 'org.openjdk.skara.bots.topological' to 'org.junit.platform.commons'
     }
 }
 
 dependencies {
+    implementation project(':ci')
     implementation project(':host')
     implementation project(':forge')
     implementation project(':issuetracker')
     implementation project(':bot')
     implementation project(':census')
diff a/ci/build.gradle b/ci/build.gradle
--- /dev/null
+++ b/ci/build.gradle
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+module {
+    name = 'org.openjdk.skara.ci'
+    test {
+        requires 'org.junit.jupiter.api'
+        requires 'org.openjdk.skara.test'
+        opens 'org.openjdk.skara.ci' to 'org.junit.platform.commons'
+    }
+}
+
+dependencies {
+    implementation project(':host')
+    implementation project(':json')
+}
diff a/ci/src/main/java/module-info.java b/ci/src/main/java/module-info.java
--- /dev/null
+++ b/ci/src/main/java/module-info.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+module org.openjdk.skara.ci {
+    requires org.openjdk.skara.host;
+    requires org.openjdk.skara.json;
+
+    uses org.openjdk.skara.ci.ContinuousIntegrationFactory;
+    exports org.openjdk.skara.ci;
+}
diff a/ci/src/main/java/org/openjdk/skara/ci/Build.java b/ci/src/main/java/org/openjdk/skara/ci/Build.java
--- /dev/null
+++ b/ci/src/main/java/org/openjdk/skara/ci/Build.java
@@ -0,0 +1,106 @@
+/*
+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.ci;
+
+import java.util.Objects;
+
+public class Build {
+    public static enum OperatingSystem {
+        WINDOWS,
+        MACOS,
+        LINUX,
+        SOLARIS,
+        AIX,
+        FREEBSD,
+        OPENBSD,
+        NETBSD,
+        HPUX,
+        HAIKU
+    }
+
+    public static enum CPU {
+        X86,
+        X64,
+        SPARCV9,
+        AARCH64,
+        AARCH32,
+        PPCLE32,
+        PPCLE64
+    }
+
+    public static enum DebugLevel {
+        RELEASE,
+        FASTDEBUG,
+        SLOWDEBUG
+    }
+
+    private final OperatingSystem os;
+    private final CPU cpu;
+    private final DebugLevel debugLevel;
+
+    public Build(OperatingSystem os, CPU cpu, DebugLevel debugLevel) {
+        this.os = os;
+        this.cpu = cpu;
+        this.debugLevel = debugLevel;
+    }
+
+    public OperatingSystem os() {
+        return os;
+    }
+
+    public CPU cpu() {
+        return cpu;
+    }
+
+    public DebugLevel debugLevel() {
+        return debugLevel;
+    }
+
+    @Override
+    public String toString() {
+        return os.toString().toLowerCase() + "-" +
+               cpu.toString().toLowerCase() + "-" +
+               debugLevel.toString().toLowerCase();
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(os, cpu, debugLevel);
+    }
+
+    @Override
+    public boolean equals(Object other) {
+        if (other == this) {
+            return true;
+        }
+
+        if (!(other instanceof Build)) {
+            return false;
+        }
+
+        var o = (Build) other;
+        return Objects.equals(os, o.os) &&
+               Objects.equals(cpu, o.cpu) &&
+               Objects.equals(debugLevel, o.debugLevel);
+    }
+}
diff a/ci/src/main/java/org/openjdk/skara/ci/ContinuousIntegration.java b/ci/src/main/java/org/openjdk/skara/ci/ContinuousIntegration.java
--- /dev/null
+++ b/ci/src/main/java/org/openjdk/skara/ci/ContinuousIntegration.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.ci;
+
+import org.openjdk.skara.host.Host;
+import org.openjdk.skara.json.JSONObject;
+import org.openjdk.skara.json.JSON;
+
+import java.io.IOException;
+import java.net.URI;
+import java.nio.file.Path;
+import java.util.*;
+
+public interface ContinuousIntegration extends Host {
+    Job submit(Path source, List<String> jobs, String id) throws IOException;
+    Job job(String id) throws IOException;
+    List<Job> query(String query) throws IOException;
+    void cancel(String id) throws IOException;
+
+    static Optional<ContinuousIntegration> from(URI uri, JSONObject configuration) {
+        for (var factory : ContinuousIntegrationFactory.factories()) {
+            var ci = factory.create(uri, configuration);
+            if (ci.isValid()) {
+                return Optional.of(ci);
+            }
+        }
+        return Optional.empty();
+    }
+
+    static Optional<ContinuousIntegration> from(URI uri) {
+        return from(uri, JSON.object());
+    }
+}
diff a/ci/src/main/java/org/openjdk/skara/ci/ContinuousIntegrationFactory.java b/ci/src/main/java/org/openjdk/skara/ci/ContinuousIntegrationFactory.java
--- /dev/null
+++ b/ci/src/main/java/org/openjdk/skara/ci/ContinuousIntegrationFactory.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.ci;
+
+import org.openjdk.skara.json.JSONObject;
+
+import java.net.URI;
+import java.util.*;
+import java.util.stream.*;
+
+public interface ContinuousIntegrationFactory {
+    ContinuousIntegration create(URI uri, JSONObject configuration);
+
+    static List<ContinuousIntegrationFactory> factories() {
+        return StreamSupport.stream(ServiceLoader.load(ContinuousIntegrationFactory.class).spliterator(), false)
+                            .collect(Collectors.toList());
+    }
+}
diff a/ci/src/main/java/org/openjdk/skara/ci/Job.java b/ci/src/main/java/org/openjdk/skara/ci/Job.java
--- /dev/null
+++ b/ci/src/main/java/org/openjdk/skara/ci/Job.java
@@ -0,0 +1,105 @@
+/*
+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.ci;
+
+import java.util.List;
+
+public interface Job {
+    static class Status {
+        private final int numCompleted;
+        private final int numRunning;
+        private final int numNotStarted;
+
+        public Status(int numCompleted, int numRunning, int numNotStarted) {
+            this.numCompleted = numCompleted;
+            this.numRunning = numRunning;
+            this.numNotStarted = numNotStarted;
+        }
+
+        public int numCompleted() {
+            return numCompleted;
+        }
+
+        public int numRunning() {
+            return numRunning;
+        }
+
+        public int numNotStarted() {
+            return numNotStarted;
+        }
+
+        public int numTotal() {
+            return numCompleted + numRunning + numNotStarted;
+        }
+    }
+
+    static class Result {
+        private final int numPassed;
+        private final int numFailed;
+        private final int numSkipped;
+
+        public Result(int numPassed, int numFailed, int numSkipped) {
+            this.numPassed = numPassed;
+            this.numFailed = numFailed;
+            this.numSkipped = numSkipped;
+        }
+
+        public int numPassed() {
+            return numPassed;
+        }
+
+        public int numFailed() {
+            return numFailed;
+        }
+
+        public int numSkipped() {
+            return numSkipped;
+        }
+
+        public int numTotal() {
+            return numPassed + numFailed + numSkipped;
+        }
+    }
+
+    String id();
+    List<Build> builds();
+    List<Test> tests();
+    Status status();
+    Result result();
+
+    static enum State {
+        COMPLETED,
+        RUNNING,
+        SCHEDULED
+    }
+    State state();
+    default boolean isCompleted() {
+        return state() == State.COMPLETED;
+    }
+    default boolean isRunning() {
+        return state() == State.COMPLETED;
+    }
+    default boolean isScheduled() {
+        return state() == State.SCHEDULED;
+    }
+}
diff a/ci/src/main/java/org/openjdk/skara/ci/Test.java b/ci/src/main/java/org/openjdk/skara/ci/Test.java
--- /dev/null
+++ b/ci/src/main/java/org/openjdk/skara/ci/Test.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.ci;
+
+public class Test {
+    public static enum Kind {
+        SINGLE,
+        GROUP
+    }
+
+    private final Kind kind;
+    private final String name;
+
+    public Test(Kind kind, String name) {
+        this.kind = kind;
+        this.name = name;
+    }
+
+    public Kind kind() {
+        return kind;
+    }
+
+    public String name() {
+        return name;
+    }
+}
diff a/settings.gradle b/settings.gradle
--- a/settings.gradle
+++ b/settings.gradle
@@ -22,10 +22,11 @@
  */
 rootProject.name = 'skara'
 
 include 'args'
 include 'bot'
+include 'ci'
 include 'cli'
 include 'census'
 include 'email'
 include 'encoding'
 include 'host'
@@ -52,6 +53,7 @@
 include 'bots:mirror'
 include 'bots:mlbridge'
 include 'bots:notify'
 include 'bots:pr'
 include 'bots:submit'
+include 'bots:tester'
 include 'bots:topological'
diff a/test/build.gradle b/test/build.gradle
--- a/test/build.gradle
+++ b/test/build.gradle
@@ -24,10 +24,11 @@
 module {
     name = 'org.openjdk.skara.test'
 }
 
 dependencies {
+    implementation project(':ci')
     implementation project(':json')
     implementation project(':census')
     implementation project(':vcs')
     implementation project(':bot')
     implementation project(':host')
