diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunnerConfiguration.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bot;
 
+import org.openjdk.skara.ci.ContinuousIntegration;
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.Credential;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.json.JSONObject;
 import org.openjdk.skara.network.URIBuilder;
@@ -40,18 +41,20 @@
 public class BotRunnerConfiguration {
     private final Logger log;
     private final JSONObject config;
     private final Map<String, Forge> repositoryHosts;
     private final Map<String, IssueTracker> issueHosts;
+    private final Map<String, ContinuousIntegration> continuousIntegrations;
     private final Map<String, HostedRepository> repositories;
 
     private BotRunnerConfiguration(JSONObject config, Path cwd) throws ConfigurationError {
         this.config = config;
         log = Logger.getLogger("org.openjdk.skara.bot");
 
         repositoryHosts = parseRepositoryHosts(config, cwd);
         issueHosts = parseIssueHosts(config, cwd);
+        continuousIntegrations = parseContinuousIntegrations(config, cwd);
         repositories = parseRepositories(config);
     }
 
     private Map<String, Forge> parseRepositoryHosts(JSONObject config, Path cwd) throws ConfigurationError {
         Map<String, Forge> ret = new HashMap<>();
@@ -116,10 +119,30 @@
         }
 
         return ret;
     }
 
+    private Map<String, ContinuousIntegration> parseContinuousIntegrations(JSONObject config, Path cwd) throws ConfigurationError {
+        Map<String, ContinuousIntegration> ret = new HashMap<>();
+
+        if (!config.contains("ci")) {
+            return ret;
+        }
+
+        for (var entry : config.get("ci").fields()) {
+            var url = entry.value().get("url").asString();
+            var ci = ContinuousIntegration.from(URI.create(url), entry.value().asObject());
+            if (ci.isPresent()) {
+                ret.put(entry.name(), ci.get());
+            } else {
+                throw new ConfigurationError("No continuous integration named with url: " + url);
+            }
+        }
+
+        return ret;
+    }
+
     private Map<String, HostedRepository> parseRepositories(JSONObject config) throws ConfigurationError {
         Map<String, HostedRepository> ret = new HashMap<>();
 
         if (!config.contains("repositories")) {
             return ret;
@@ -231,10 +254,18 @@
                 } catch (ConfigurationError configurationError) {
                     throw new RuntimeException("Couldn't find issue project with name: " + name, configurationError);
                 }
             }
 
+            @Override
+            public ContinuousIntegration continuousIntegration(String name) {
+                if (continuousIntegrations.containsKey(name)) {
+                    return continuousIntegrations.get(name);
+                }
+                throw new RuntimeException("Couldn't find continuous integration with name: " + name);
+            }
+
             @Override
             public String repositoryRef(String name) {
                 try {
                     var entry = parseRepositoryEntry(name);
                     return entry.ref;
