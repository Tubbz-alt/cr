diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -62,11 +62,11 @@
         var issueString = prInstance.issueUrl().map(url -> "  Issue: " + url + "\n").orElse("");
         return filteredBody + "\n\n" +
                 infoSeparator + "\n\n" +
                 "Commits:\n" +
                 commitMessages + "\n\n" +
-                "Changes: " + prInstance.changeUrl() + "\n" +
+                "Changes: " + prInstance.pr().getChangeUrl() + "\n" +
                 " Webrev: " + webrev.toString() + "\n" +
                 issueString +
                 "  Stats: " + prInstance.stats(prInstance.baseHash(), prInstance.headHash()) + "\n" +
                 "  Patch: " + prInstance.diffUrl() + "\n" +
                 "  Fetch: " + prInstance.fetchCommand() + "\n\n" +
@@ -78,11 +78,11 @@
         var issueString = prInstance.issueUrl().map(url -> "  Issue: " + url + "\n").orElse("");
         return "The pull request has been updated with a complete new set of changes (possibly due to a rebase).\n\n" +
                 infoSeparator + "\n\n" +
                 "Commits:\n" +
                 commitMessages + "\n\n" +
-                "Changes: " + prInstance.changeUrl() + "\n" +
+                "Changes: " + prInstance.pr().getChangeUrl() + "\n" +
                 " Webrev: " + fullWebrev.toString() + "\n" +
                 issueString +
                 "  Stats: " + prInstance.stats(prInstance.baseHash(), prInstance.headHash()) + "\n" +
                 "  Patch: " + prInstance.diffUrl() + "\n" +
                 "  Fetch: " + prInstance.fetchCommand() + "\n\n" +
@@ -94,12 +94,12 @@
         return "The pull request has been updated with additional changes.\n\n" +
                 infoSeparator + "\n\n" +
                 "Added commits:\n" +
                 newCommitMessages + "\n\n" +
                 "Changes:\n" +
-                "  - all: " + prInstance.pr().getWebUrl() + "/files\n" +
-                "  - new: " + prInstance.changeUrl(lastHead, prInstance.headHash()) + "\n\n" +
+                "  - all: " + prInstance.pr().getChangeUrl() + "\n" +
+                "  - new: " + prInstance.pr().getChangeUrl(lastHead) + "\n\n" +
                 "Webrevs:\n" +
                 " - full: " + fullWebrev.toString() + "\n" +
                 " - incr: " + incrementalWebrev.toString() + "\n\n" +
                 issueString +
                 "  Stats: " + prInstance.stats(lastHead, prInstance.headHash()) + "\n" +
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/PullRequestInstance.java
@@ -73,18 +73,10 @@
 
     String diffUrl() {
         return pr.getWebUrl() + ".diff";
     }
 
-    String changeUrl() {
-        return pr.getWebUrl() + "/files";
-    }
-
-    String changeUrl(Hash base, Hash head) {
-        return pr.getWebUrl() + "/files/" + base.abbreviate() + ".." + head.abbreviate();
-    }
-
     String fetchCommand() {
         var repoUrl = pr.repository().getWebUrl();
         return "git fetch " + repoUrl + " " + pr.getSourceRef() + ":pull/" + pr.getId();
     }
 
diff a/host/src/main/java/org/openjdk/skara/host/PullRequest.java b/host/src/main/java/org/openjdk/skara/host/PullRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/PullRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/PullRequest.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.host;
 
 import org.openjdk.skara.vcs.Hash;
 
+import java.net.URI;
 import java.util.*;
 
 public interface PullRequest extends Issue {
     HostedRepository repository();
 
@@ -86,11 +87,10 @@
      * Returns the current head of the ref the request is intended to be merged into.
      * @return
      */
     Hash getTargetHash();
 
-
     /**
      * List of completed checks on the given hash.
      * @return
      */
     Map<String, Check> getChecks(Hash hash);
@@ -104,6 +104,16 @@
     /**
      * Updates an existing check.
      * @param check
      */
     void updateCheck(Check check);
+
+    /**
+     * Returns a link that will lead to the list of changes done in the request.
+     */
+    URI getChangeUrl();
+
+    /**
+     * Returns a link that will lead to the list of changes with the specified base.
+     */
+    URI getChangeUrl(Hash base);
 }
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubPullRequest.java
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.host.github;
 
 import org.openjdk.skara.host.*;
-import org.openjdk.skara.host.network.RestRequest;
+import org.openjdk.skara.host.network.*;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.vcs.Hash;
 
 import java.net.URI;
 import java.time.*;
@@ -387,10 +387,20 @@
         check.metadata().ifPresent(metadata -> completedQuery.put("external_id", metadata));
 
         request.post("check-runs").body(completedQuery).execute();
     }
 
+    @Override
+    public URI getChangeUrl() {
+        return URIBuilder.base(getWebUrl()).appendPath("/files").build();
+    }
+
+    @Override
+    public URI getChangeUrl(Hash base) {
+        return URIBuilder.base(getWebUrl()).appendPath("/files/" + base.abbreviate() + ".." + getHeadHash().abbreviate()).build();
+    }
+
     @Override
     public void setState(State state) {
         request.patch("pulls/" + json.get("number").toString())
                .body("state", state == State.CLOSED ? "closed" : "open")
                .execute();
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
+++ b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabMergeRequest.java
@@ -504,10 +504,22 @@
         var previous = getStatusCheckComment(check.name())
                 .orElseGet(() -> addComment("Progress deleted?"));
         updateCheckComment(Optional.of(previous), check);
     }
 
+    @Override
+    public URI getChangeUrl() {
+        return URIBuilder.base(getWebUrl()).appendPath("/diffs").build();
+    }
+
+    @Override
+    public URI getChangeUrl(Hash base) {
+        return URIBuilder.base(getWebUrl()).appendPath("/diffs")
+                         .setQuery(Map.of("start_sha", base.hex()))
+                         .build();
+    }
+
 
     @Override
     public void setState(State state) {
         request.put("")
                .body("state_event", state == State.CLOSED ? "close" : "reopen")
diff a/host/src/main/java/org/openjdk/skara/host/network/URIBuilder.java b/host/src/main/java/org/openjdk/skara/host/network/URIBuilder.java
--- a/host/src/main/java/org/openjdk/skara/host/network/URIBuilder.java
+++ b/host/src/main/java/org/openjdk/skara/host/network/URIBuilder.java
@@ -53,11 +53,11 @@
 
         URIParts(URI uri) {
             var uriString = uri.toString();
             scheme = uri.getScheme();
             host = uri.getHost();
-            var pathStart = uriString.indexOf(host) + host.length();
+            var pathStart = host != null ? uriString.indexOf(host) + host.length() : scheme.length() + 3;
             if (uri.getPort() != -1) {
                 pathStart += Integer.toString(uri.getPort()).length() + 1;
             }
             var pathEnd = uriString.indexOf("?", pathStart);
             if (pathEnd == -1) {
diff a/host/src/test/java/org/openjdk/skara/host/network/URIBuilderTests.java b/host/src/test/java/org/openjdk/skara/host/network/URIBuilderTests.java
--- a/host/src/test/java/org/openjdk/skara/host/network/URIBuilderTests.java
+++ b/host/src/test/java/org/openjdk/skara/host/network/URIBuilderTests.java
@@ -24,12 +24,11 @@
 
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.*;
 
-public class URIBuilderTests {
-
+class URIBuilderTests {
     private final String validHost = "http://www.test.com";
 
     @Test
     void setPathSimple() {
         var a = URIBuilder.base(validHost).setPath("/a").build();
@@ -45,12 +44,10 @@
     @Test
     void appendPathSimple() {
         var a = URIBuilder.base(validHost).setPath("/a").build();
         var aPlusB = URIBuilder.base(a).appendPath("/b").build();
 
-        var x = new URIBuilderException();
-
         assertEquals("/a", a.getPath());
         assertEquals("/a/b", aPlusB.getPath());
     }
 
     @Test
@@ -68,6 +65,12 @@
     @Test
     void invalidAppendPath() {
         assertThrows(URIBuilderException.class,
                 () -> URIBuilder.base(validHost).appendPath("\\c").build());
     }
+
+    @Test
+    void noHost() {
+        var a = URIBuilder.base("file:///a/b/c").build();
+        assertEquals("/a/b/c", a.getPath());
+    }
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
--- a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
@@ -21,10 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.host.*;
+import org.openjdk.skara.host.network.URIBuilder;
 import org.openjdk.skara.vcs.Hash;
 
 import java.io.*;
 import java.net.*;
 import java.time.ZonedDateTime;
@@ -171,10 +172,20 @@
         data.checks.remove(existing);
         data.checks.add(updated);
         data.lastUpdate = ZonedDateTime.now();
     }
 
+    @Override
+    public URI getChangeUrl() {
+        return URIBuilder.base(getWebUrl()).appendPath("/files").build();
+    }
+
+    @Override
+    public URI getChangeUrl(Hash base) {
+        return URIBuilder.base(getWebUrl()).appendPath("/files/" + base.abbreviate()).build();
+    }
+
     @Override
     public URI getWebUrl() {
         try {
             return new URI(repository.getUrl().toString() + "/pr/" + getId());
         } catch (URISyntaxException e) {
