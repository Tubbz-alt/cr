diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -434,11 +434,11 @@
             assertTrue(commentReply.body().contains("Avoid combining\n\n"), commentReply.body());
 
             var reviewReply = conversations.get(0).replies(mail).get(1);
             assertEquals(2, reviewReply.body().split("^On.*wrote:").length);
             assertEquals(2, reviewReply.body().split("> This is now ready").length, reviewReply.body());
-            assertEquals("Re: RFR: This is a pull request", reviewReply.subject());
+            assertEquals("RFR: This is a pull request", reviewReply.subject());
             assertTrue(reviewReply.body().contains("Review comment\n\n"), reviewReply.body());
             assertTrue(reviewReply.body().contains("Another review comment"), reviewReply.body());
 
             // Now reply to the first (collapsed) comment
             pr.addReviewCommentReply(first, "I agree");
@@ -547,11 +547,11 @@
 
             // There should be four separate threads
             var thread1 = conversations.get(0).replies(mail).get(0);
             assertEquals(2, thread1.body().split("^On.*wrote:").length);
             assertEquals(2, thread1.body().split("> This is now ready").length, thread1.body());
-            assertEquals("Re: RFR: This is a pull request", thread1.subject());
+            assertEquals("RFR: This is a pull request", thread1.subject());
             assertTrue(thread1.body().contains("Review comment\n\n"), thread1.body());
             assertFalse(thread1.body().contains("Another review comment"), thread1.body());
             var thread1reply1 = conversations.get(0).replies(thread1).get(0);
             assertTrue(thread1reply1.body().contains("I agree"));
             assertEquals(noreplyAddress(archive), thread1reply1.author().address());
@@ -562,23 +562,23 @@
             assertEquals("Generated Reviewer 1", thread1reply2.author().fullName().orElseThrow());
 
             var thread2 = conversations.get(0).replies(mail).get(1);
             assertEquals(2, thread2.body().split("^On.*wrote:").length);
             assertEquals(2, thread2.body().split("> This is now ready").length, thread2.body());
-            assertEquals("Re: RFR: This is a pull request", thread2.subject());
+            assertEquals("RFR: This is a pull request", thread2.subject());
             assertFalse(thread2.body().contains("Review comment\n\n"), thread2.body());
             assertTrue(thread2.body().contains("Another review comment"), thread2.body());
             var thread2reply1 = conversations.get(0).replies(thread2).get(0);
             assertTrue(thread2reply1.body().contains("Sounds good"));
             var thread2reply2 = conversations.get(0).replies(thread2reply1).get(0);
             assertTrue(thread2reply2.body().contains("Thanks"));
 
             var replies = conversations.get(0).replies(mail);
             var thread3 = replies.get(2);
-            assertEquals("Re: RFR: This is a pull request", thread3.subject());
+            assertEquals("RFR: This is a pull request", thread3.subject());
             var thread4 = replies.get(3);
-            assertEquals("Re: RFR: This is a pull request", thread4.subject());
+            assertEquals("RFR: This is a pull request", thread4.subject());
             assertTrue(thread4.body().contains("Looks fine"));
             assertTrue(thread4.body().contains("The final review comment"));
             assertTrue(thread4.body().contains("Marked as reviewed by integrationreviewer1 (Reviewer)"));
         }
     }
@@ -967,13 +967,13 @@
             }
             var updatedConversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, updatedConversations.size());
             var conversation = updatedConversations.get(0);
             assertEquals(6, conversation.allMessages().size());
-            assertEquals("Re: [Rev 01] RFR: This is a pull request", conversation.allMessages().get(1).subject());
-            assertEquals("Re: [Rev 01] RFR: This is a pull request", conversation.allMessages().get(2).subject(), conversation.allMessages().get(2).toString());
-            assertEquals("Re: [Rev 04] RFR: This is a pull request", conversation.allMessages().get(5).subject());
+            assertEquals("[Rev 01] RFR: This is a pull request", conversation.allMessages().get(1).subject());
+            assertEquals("[Rev 01] RFR: This is a pull request", conversation.allMessages().get(2).subject(), conversation.allMessages().get(2).toString());
+            assertEquals("[Rev 04] RFR: This is a pull request", conversation.allMessages().get(5).subject());
         }
     }
 
     @Test
     void rebased(TestInfo testInfo) throws IOException {
@@ -1065,11 +1065,11 @@
             for (var newMail : conversations.get(0).allMessages()) {
                 assertEquals(noreplyAddress(archive), newMail.author().address());
                 assertEquals(listAddress, newMail.sender());
                 assertFalse(newMail.hasHeader("PR-Head-Hash"));
             }
-            assertEquals("Re: [Rev 01] RFR: This is a pull request", conversations.get(0).allMessages().get(1).subject());
+            assertEquals("[Rev 01] RFR: This is a pull request", conversations.get(0).allMessages().get(1).subject());
         }
     }
 
     @Test
     void incrementalAfterRebase(TestInfo testInfo) throws IOException {
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -160,11 +160,12 @@
                 ret.add(commit);
                 continue;
             }
             var rfrConv = rfrCandidates.get(0);
             var alreadyNotified = rfrConv.allMessages().stream()
-                                         .anyMatch(email -> email.subject().startsWith("Re: [Integrated"));
+                                         .anyMatch(email -> email.subject().contains("[Integrated]") &&
+                                                 email.body().contains(commit.hash().abbreviate()));
             if (alreadyNotified) {
                 log.warning("Pull request " + prLink + " already contains an integration message - skipping");
                 ret.add(commit);
                 continue;
             }
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -488,11 +488,11 @@
             var first = conversations.get(0).first();
             var email = conversations.get(0).replies(first).get(0);
             assertEquals(listAddress, email.sender());
             assertEquals(author, email.author());
             assertEquals(email.recipients(), List.of(listAddress));
-            assertEquals("Re: [Integrated] RFR: My PR", email.subject());
+            assertEquals("[Integrated] RFR: My PR", email.subject());
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash.abbreviate()));
             assertTrue(email.body().contains("23456789: More fixes"));
             assertFalse(email.body().contains("Committer"));
             assertFalse(email.body().contains(masterHash.abbreviate()));
@@ -578,11 +578,11 @@
 
             var prEmail = prConversation.replies(prConversation.first()).get(0);
             assertEquals(listAddress, prEmail.sender());
             assertEquals(EmailAddress.from("testauthor", "ta@none.none"), prEmail.author());
             assertEquals(prEmail.recipients(), List.of(listAddress));
-            assertEquals("Re: [Integrated] RFR: My PR", prEmail.subject());
+            assertEquals("[Integrated] RFR: My PR", prEmail.subject());
             assertFalse(prEmail.subject().contains("master"));
             assertTrue(prEmail.body().contains("Changeset: " + editHash.abbreviate()));
             assertTrue(prEmail.body().contains("23456789: More fixes"));
             assertFalse(prEmail.body().contains("Committer"));
             assertFalse(prEmail.body().contains(masterHash.abbreviate()));
@@ -657,11 +657,11 @@
             var prConversation = conversations.get(0);
             var prEmail = prConversation.replies(prConversation.first()).get(0);
             assertEquals(listAddress, prEmail.sender());
             assertEquals(EmailAddress.from("testauthor", "ta@none.none"), prEmail.author());
             assertEquals(prEmail.recipients(), List.of(listAddress));
-            assertEquals("Re: [Integrated] RFR: My PR", prEmail.subject());
+            assertEquals("[Integrated] RFR: My PR", prEmail.subject());
             assertFalse(prEmail.subject().contains("master"));
             assertTrue(prEmail.body().contains("Changeset: " + editHash.abbreviate()));
             assertTrue(prEmail.body().contains("23456789: More fixes"));
             assertFalse(prEmail.body().contains("Committer"));
             assertFalse(prEmail.body().contains(masterHash.abbreviate()));
diff a/test/src/main/java/org/openjdk/skara/test/TestMailmanServer.java b/test/src/main/java/org/openjdk/skara/test/TestMailmanServer.java
--- a/test/src/main/java/org/openjdk/skara/test/TestMailmanServer.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestMailmanServer.java
@@ -21,29 +21,27 @@
  * questions.
  */
 package org.openjdk.skara.test;
 
 import com.sun.net.httpserver.*;
-import org.openjdk.skara.email.EmailAddress;
+import org.openjdk.skara.email.*;
 import org.openjdk.skara.mailinglist.Mbox;
 import org.openjdk.skara.network.URIBuilder;
 
 import java.io.*;
 import java.net.*;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
 import java.security.*;
 import java.time.Duration;
 import java.util.*;
-import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class TestMailmanServer implements AutoCloseable {
     private final HttpServer httpServer;
     private final SMTPServer smtpServer;
     private final Map<String, Path> lists = new HashMap<>();
-    private final Logger log = Logger.getLogger("org.openjdk.skara.test");
 
     private boolean lastResponseCached;
 
     static private final Pattern listPathPattern = Pattern.compile("^/test/(.*?)/.*");
 
@@ -56,28 +54,22 @@
             }
             var list = lists.get(listMatcher.group(1));
             var response = Files.readString(list);
             lastResponseCached = false;
 
-            log.warning("Read " + response.length() + " chars");
             try {
                 var digest = MessageDigest.getInstance("SHA-256");
                 digest.update(response.getBytes(StandardCharsets.UTF_8));
                 var etag = "\"" + Base64.getUrlEncoder().encodeToString(digest.digest()) + "\"";
                 exchange.getResponseHeaders().add("ETag", etag);
 
                 if (exchange.getRequestHeaders().containsKey("If-None-Match")) {
                     if (exchange.getRequestHeaders().getFirst("If-None-Match").equals(etag)) {
                         lastResponseCached = true;
-                        log.warning("Cache hit!");
                         exchange.sendResponseHeaders(304, 0);
                         return;
-                    } else {
-                        log.warning("Cache mismatch");
                     }
-                } else {
-                    log.warning("No If-None-Match tag");
                 }
 
                 var responseBytes = response.getBytes(StandardCharsets.UTF_8);
                 exchange.sendResponseHeaders(200, responseBytes.length);
                 OutputStream outputStream = exchange.getResponseBody();
@@ -115,11 +107,18 @@
         return listName;
     }
 
     public void processIncoming(Duration timeout) throws IOException {
         var email = smtpServer.receive(timeout);
-        var mboxEntry = Mbox.fromMail(email);
+        var subject = email.subject();
+        if (subject.startsWith("Re: ")) {
+            subject = subject.substring(4);
+        }
+        var stripped = Email.from(email)
+                            .subject(subject)
+                            .build();
+        var mboxEntry = Mbox.fromMail(stripped);
 
         var listPath = email.recipients().stream()
                             .filter(recipient -> lists.containsKey(recipient.localPart()))
                             .map(recipient -> lists.get(recipient.localPart()))
                             .findAny().orElseThrow();
