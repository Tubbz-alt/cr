diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -202,17 +202,17 @@
 
     private static String composeReviewVerdict(Review review, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole) {
         var result = new StringBuilder();
         if (review.verdict() != Review.Verdict.NONE) {
             if (review.verdict() == Review.Verdict.APPROVED) {
-                result.append("Marked as Reviewed");
+                result.append("Marked as reviewed");
             } else {
                 result.append("Changes requested");
             }
             result.append(" by ");
             result.append(hostUserToUserName.userName(review.reviewer()));
-            result.append(" (project role: ");
+            result.append(" (");
             result.append(hostUserToRole.role(review.reviewer()));
             result.append(").");
         }
         return result.toString();
     }
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -208,21 +208,21 @@
 
     private String getAuthorRole(CensusInstance censusInstance, HostUser originalAuthor) {
         var version = censusInstance.configuration().census().version();
         var contributor = censusInstance.namespace().get(originalAuthor.id());
         if (contributor == null) {
-            return "none - no known OpenJDK username";
+            return "no known OpenJDK username";
         } else if (censusInstance.project().isLead(contributor.username(), version)) {
             return "Lead";
         } else if (censusInstance.project().isReviewer(contributor.username(), version)) {
             return "Reviewer";
         } else if (censusInstance.project().isCommitter(contributor.username(), version)) {
             return "Committer";
         } else if (censusInstance.project().isAuthor(contributor.username(), version)) {
             return "Author";
         }
-        return "none";
+        return "no project role";
     }
 
     @Override
     public void run(Path scratchPath) {
         var path = scratchPath.resolve("mlbridge");
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -552,11 +552,11 @@
             assertEquals("Re: RFR: This is a pull request", thread3.subject());
             var thread4 = replies.get(3);
             assertEquals("Re: RFR: This is a pull request", thread4.subject());
             assertTrue(thread4.body().contains("Looks fine"));
             assertTrue(thread4.body().contains("The final review comment"));
-            assertTrue(thread4.body().contains("Marked as Reviewed by integrationreviewer1 (project role: Reviewer)"));
+            assertTrue(thread4.body().contains("Marked as reviewed by integrationreviewer1 (Reviewer)"));
         }
     }
 
     @Test
     void commentThreadingSeparated(TestInfo testInfo) throws IOException {
@@ -1147,11 +1147,11 @@
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain another note
             Repository.materialize(archiveFolder.path(), archive.url(), "master");
-            assertEquals(1, archiveContainsCount(archiveFolder.path(), "Marked as Reviewed by "));
+            assertEquals(1, archiveContainsCount(archiveFolder.path(), "Marked as reviewed by "));
             if (author.forge().supportsReviewBody()) {
                 assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 2"));
             }
             assertEquals(2, archiveContainsCount(archiveFolder.path(), "Re: RFR:"));
 
