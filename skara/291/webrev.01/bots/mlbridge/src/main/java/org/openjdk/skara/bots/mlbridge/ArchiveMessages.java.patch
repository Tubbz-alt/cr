diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -26,12 +26,10 @@
             ret.append(" - ").append(abbrev).append(": ").append(message.get(0).strip());
         }
         return ret.toString();
     }
 
-    private static final String infoSeparator = "----------------";
-
     private static final Pattern commentPattern = Pattern.compile("<!--.*?-->",
                                                                   Pattern.DOTALL | Pattern.MULTILINE);
     private static final Pattern cutoffPattern = Pattern.compile("(.*?)<!-- Anything below this marker will be .*? -->",
                                                                  Pattern.DOTALL | Pattern.MULTILINE);
     private static String filterComments(String body) {
@@ -200,21 +198,15 @@
         }
         body.append(filterComments(reviewComment.body()));
         return body.toString();
     }
 
-    static String composeReview(PullRequest pr, Review review, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole) {
+    private static String composeReviewVerdict(Review review, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole) {
         var result = new StringBuilder();
-        review.body().ifPresent(body -> result.append(filterComments(body)));
         if (review.verdict() != Review.Verdict.NONE) {
-            if (result.length() > 0) {
-                result.append("\n\n");
-                result.append(infoSeparator);
-                result.append("\n\n");
-            }
             if (review.verdict() == Review.Verdict.APPROVED) {
-                result.append("Approved");
+                result.append("Marked as reviewed");
             } else {
                 result.append("Changes requested");
             }
             result.append(" by ");
             result.append(hostUserToUserName.userName(review.reviewer()));
@@ -223,9 +215,27 @@
             result.append(").");
         }
         return result.toString();
     }
 
+    static String composeReview(PullRequest pr, Review review, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole) {
+        if (review.body().isPresent()) {
+            return filterComments(review.body().get());
+        } else {
+            return composeReviewVerdict(review, hostUserToUserName, hostUserToRole);
+        }
+    }
+
+    static String composeReviewFooter(PullRequest pr, Review review, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole) {
+        var result = new StringBuilder();
+        if (review.body().isPresent()) {
+            result.append(composeReviewVerdict(review, hostUserToUserName, hostUserToRole));
+            result.append("\n\n");
+        }
+        result.append(composeReplyFooter(pr));
+        return result.toString();
+    }
+
     static String composeReplyHeader(ZonedDateTime parentDate, EmailAddress parentAuthor) {
         return "On " + parentDate.format(DateTimeFormatter.RFC_1123_DATE_TIME) + ", " + parentAuthor.toString() + " wrote:";
     }
 }
