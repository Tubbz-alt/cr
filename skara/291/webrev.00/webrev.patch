diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
@@ -75,11 +75,11 @@
     static ArchiveItem from(PullRequest pr, Review review, HostUserToEmailAuthor hostUserToEmailAuthor, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole, ArchiveItem parent) {
         return new ArchiveItem(parent, "rv" + review.id(), review.createdAt(), review.reviewer(), Map.of(),
                                () -> ArchiveMessages.composeReplySubject(parent.subject()),
                                () -> ArchiveMessages.composeReplyHeader(parent.createdAt(), hostUserToEmailAuthor.author(parent.author())),
                                () -> ArchiveMessages.composeReview(pr, review, hostUserToUserName, hostUserToRole),
-                               () -> ArchiveMessages.composeReplyFooter(pr));
+                               () -> ArchiveMessages.composeReviewFooter(pr, review, hostUserToUserName, hostUserToRole));
     }
 
     static ArchiveItem from(PullRequest pr, ReviewComment reviewComment, HostUserToEmailAuthor hostUserToEmailAuthor, ArchiveItem parent) {
         return new ArchiveItem(parent, "rc" + reviewComment.id(), reviewComment.createdAt(), reviewComment.author(), Map.of(),
                                () -> ArchiveMessages.composeReplySubject(parent.subject()),
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -26,12 +26,10 @@
             ret.append(" - ").append(abbrev).append(": ").append(message.get(0).strip());
         }
         return ret.toString();
     }
 
-    private static final String infoSeparator = "----------------";
-
     private static final Pattern commentPattern = Pattern.compile("<!--.*?-->",
                                                                   Pattern.DOTALL | Pattern.MULTILINE);
     private static final Pattern cutoffPattern = Pattern.compile("(.*?)<!-- Anything below this marker will be .*? -->",
                                                                  Pattern.DOTALL | Pattern.MULTILINE);
     private static String filterComments(String body) {
@@ -200,32 +198,44 @@
         }
         body.append(filterComments(reviewComment.body()));
         return body.toString();
     }
 
-    static String composeReview(PullRequest pr, Review review, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole) {
+    private static String composeReviewVerdict(Review review, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole) {
         var result = new StringBuilder();
-        review.body().ifPresent(body -> result.append(filterComments(body)));
         if (review.verdict() != Review.Verdict.NONE) {
-            if (result.length() > 0) {
-                result.append("\n\n");
-                result.append(infoSeparator);
-                result.append("\n\n");
-            }
             if (review.verdict() == Review.Verdict.APPROVED) {
-                result.append("Approved");
+                result.append("Marked as Reviewed");
             } else {
                 result.append("Changes requested");
             }
             result.append(" by ");
             result.append(hostUserToUserName.userName(review.reviewer()));
-            result.append(" (");
+            result.append(" (project role: ");
             result.append(hostUserToRole.role(review.reviewer()));
             result.append(").");
         }
         return result.toString();
     }
 
+    static String composeReview(PullRequest pr, Review review, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole) {
+        if (review.body().isPresent()) {
+            return filterComments(review.body().get());
+        } else {
+            return composeReviewVerdict(review, hostUserToUserName, hostUserToRole);
+        }
+    }
+
+    static String composeReviewFooter(PullRequest pr, Review review, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole) {
+        var result = new StringBuilder();
+        if (review.body().isPresent()) {
+            result.append(composeReviewVerdict(review, hostUserToUserName, hostUserToRole));
+            result.append("\n\n");
+        }
+        result.append(composeReplyFooter(pr));
+        return result.toString();
+    }
+
     static String composeReplyHeader(ZonedDateTime parentDate, EmailAddress parentAuthor) {
         return "On " + parentDate.format(DateTimeFormatter.RFC_1123_DATE_TIME) + ", " + parentAuthor.toString() + " wrote:";
     }
 }
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -208,21 +208,21 @@
 
     private String getAuthorRole(CensusInstance censusInstance, HostUser originalAuthor) {
         var version = censusInstance.configuration().census().version();
         var contributor = censusInstance.namespace().get(originalAuthor.id());
         if (contributor == null) {
-            return "no OpenJDK username";
+            return "none - no known OpenJDK username";
         } else if (censusInstance.project().isLead(contributor.username(), version)) {
             return "Lead";
         } else if (censusInstance.project().isReviewer(contributor.username(), version)) {
             return "Reviewer";
         } else if (censusInstance.project().isCommitter(contributor.username(), version)) {
             return "Committer";
         } else if (censusInstance.project().isAuthor(contributor.username(), version)) {
             return "Author";
         }
-        return "no project role";
+        return "none";
     }
 
     @Override
     public void run(Path scratchPath) {
         var path = scratchPath.resolve("mlbridge");
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -8,11 +8,10 @@
 
 import java.net.URI;
 import java.nio.charset.StandardCharsets;
 import java.security.*;
 import java.util.*;
-import java.util.regex.Pattern;
 import java.util.stream.*;
 
 class ReviewArchive {
     private final PullRequest pr;
     private final EmailAddress sender;
@@ -125,27 +124,10 @@
                            .collect(Collectors.groupingBy(item -> item.author().id() + "." + (item.parent().isPresent() ? item.parent().get() : "xxx"),
                                                           LinkedHashMap::new, Collectors.toList()));
         return new ArrayList<>(grouped.values());
     }
 
-    private static final Pattern commentPattern = Pattern.compile("<!--.*?-->",
-                                                                  Pattern.DOTALL | Pattern.MULTILINE);
-    private static final Pattern cutoffPattern = Pattern.compile("(.*?)<!-- Anything below this marker will be .*? -->",
-                                                                 Pattern.DOTALL | Pattern.MULTILINE);
-    private static String filterComments(String body) {
-        var cutoffMatcher = cutoffPattern.matcher(body);
-        if (cutoffMatcher.find()) {
-            body = cutoffMatcher.group(1);
-        }
-
-        var commentMatcher = commentPattern.matcher(body);
-        body = commentMatcher.replaceAll("");
-
-        body = MarkdownToText.removeFormatting(body);
-        return body.strip();
-    }
-
     private String quoteBody(String body) {
         return Arrays.stream(body.strip().split("\\R"))
                      .map(line -> line.length() > 0 ? line.charAt(0) == '>' ? ">" + line : "> " + line : "> ")
                      .collect(Collectors.joining("\n"));
     }
@@ -198,28 +180,39 @@
                                   .collect(Collectors.toList());
 
         var combinedItems = collapsableItems(unsentItems);
         var ret = new ArrayList<Email>();
         for (var itemList : combinedItems) {
+            // Simply combine all message bodies
             var body = new StringBuilder();
             for (var item : itemList) {
                 if (body.length() > 0) {
                     body.append("\n\n");
                 }
                 body.append(item.body());
             }
 
-            // All items have the same parent and author after collapsing -> should have the same header and footer
+            // For footers, we want to combine all unique fragments
+            var footer = new StringBuilder();
+            var includedFooterFragments = new HashSet<String>();
+            for (var item : itemList) {
+                var newFooterFragments = Stream.of(item.footer().split("\n\n"))
+                                               .filter(line -> !includedFooterFragments.contains(line))
+                                               .collect(Collectors.toList());
+                footer.append(String.join("\n\n", newFooterFragments));
+                includedFooterFragments.addAll(newFooterFragments);
+            }
+
+            // All items have the same parent and author after collapsing -> should have the same header
             var firstItem = itemList.get(0);
             var header = firstItem.header();
             var quote = quotedParent(firstItem, 2);
             if (!quote.isBlank()) {
                 quote = quote + "\n\n";
             }
-            var footer = firstItem.footer();
 
-            var combined = (header.isBlank() ? "" : header +  "\n\n") + quote + body.toString() + (footer.isBlank() ? "" : "\n\n-------------\n\n" + footer);
+            var combined = (header.isBlank() ? "" : header +  "\n\n") + quote + body.toString() + (footer.length() == 0 ? "" : "\n\n-------------\n\n" + footer.toString());
 
             var emailBuilder = Email.create(firstItem.subject(), combined);
             if (firstItem.parent().isPresent()) {
                 emailBuilder.reply(findArchiveItemEmail(firstItem.parent().get(), sentEmails, ret));
             }
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -552,11 +552,11 @@
             assertEquals("Re: RFR: This is a pull request", thread3.subject());
             var thread4 = replies.get(3);
             assertEquals("Re: RFR: This is a pull request", thread4.subject());
             assertTrue(thread4.body().contains("Looks fine"));
             assertTrue(thread4.body().contains("The final review comment"));
-            assertTrue(thread4.body().contains("Approved by integrationreviewer1 (Reviewer)"));
+            assertTrue(thread4.body().contains("Marked as Reviewed by integrationreviewer1 (project role: Reviewer)"));
         }
     }
 
     @Test
     void commentThreadingSeparated(TestInfo testInfo) throws IOException {
@@ -1147,11 +1147,11 @@
             TestBotRunner.runPeriodicItems(mlBot);
             TestBotRunner.runPeriodicItems(mlBot);
 
             // The archive should contain another note
             Repository.materialize(archiveFolder.path(), archive.url(), "master");
-            assertEquals(1, archiveContainsCount(archiveFolder.path(), "Approved by "));
+            assertEquals(1, archiveContainsCount(archiveFolder.path(), "Marked as Reviewed by "));
             if (author.forge().supportsReviewBody()) {
                 assertEquals(1, archiveContainsCount(archiveFolder.path(), "Reason 2"));
             }
             assertEquals(2, archiveContainsCount(archiveFolder.path(), "Re: RFR:"));
 
