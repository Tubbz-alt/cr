diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
@@ -20,11 +20,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.notify;
 
+import org.openjdk.skara.email.*;
 import org.openjdk.skara.forge.*;
+import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.Issue;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.jcheck.JCheckConfiguration;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.vcs.*;
@@ -214,10 +216,24 @@
 
         log.info("Creating new backport for " + primary.id());
         return createBackportIssue(primary);
     }
 
+    private Optional<HostUser> findIssueUser(Commit commit) {
+        var authorEmail = EmailAddress.from(commit.author().email());
+        if (authorEmail.domain().equals("openjdk.org")) {
+            return Optional.of(issueProject.issueTracker().user(authorEmail.localPart()));
+        } else {
+            var committerEmail = EmailAddress.from(commit.committer().email());
+            if (!committerEmail.domain().equals("openjdk.org")) {
+                log.severe("Cannot determine issue tracker user name from committer email: " + committerEmail);
+                return Optional.empty();
+            }
+            return Optional.of(issueProject.issueTracker().user(committerEmail.localPart()));
+        }
+    }
+
     @Override
     public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) {
         for (var commit : commits) {
             var commitNotification = CommitFormatters.toTextBrief(repository, commit);
             var commitMessage = CommitMessageParsers.v1.parse(commit);
@@ -265,11 +281,19 @@
                                                            .filter(comment -> comment.author().equals(issueProject.issueTracker().currentUser()))
                                                            .anyMatch(comment -> comment.body().contains(hashUrl));
                 if (!alreadyPostedComment) {
                     issue.addComment(commitNotification);
                 }
-                issue.setState(Issue.State.RESOLVED);
+                if (issue.state() == Issue.State.OPEN) {
+                    issue.setState(Issue.State.RESOLVED);
+                    if (issue.assignees().isEmpty()) {
+                        var assignee = findIssueUser(commit);
+                        if (assignee.isPresent()) {
+                            issue.setAssignees(List.of(assignee.get()));
+                        }
+                    }
+                }
 
                 if (commitLink) {
                     var linkBuilder = Link.create(repository.webUrl(commit.hash()), "Commit")
                                           .summary(repository.name() + "/" + commit.hash().abbreviate());
                     if (commitIcon != null) {
