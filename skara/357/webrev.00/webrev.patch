diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
@@ -20,11 +20,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.notify;
 
+import org.openjdk.skara.email.*;
 import org.openjdk.skara.forge.*;
+import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.Issue;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.jcheck.JCheckConfiguration;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.vcs.*;
@@ -214,10 +216,24 @@
 
         log.info("Creating new backport for " + primary.id());
         return createBackportIssue(primary);
     }
 
+    private Optional<HostUser> findIssueUser(Commit commit) {
+        var authorEmail = EmailAddress.from(commit.author().email());
+        if (authorEmail.domain().equals("openjdk.org")) {
+            return Optional.of(issueProject.issueTracker().user(authorEmail.localPart()));
+        } else {
+            var committerEmail = EmailAddress.from(commit.committer().email());
+            if (!committerEmail.domain().equals("openjdk.org")) {
+                log.severe("Cannot determine issue tracker user name from committer email: " + committerEmail);
+                return Optional.empty();
+            }
+            return Optional.of(issueProject.issueTracker().user(committerEmail.localPart()));
+        }
+    }
+
     @Override
     public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) {
         for (var commit : commits) {
             var commitNotification = CommitFormatters.toTextBrief(repository, commit);
             var commitMessage = CommitMessageParsers.v1.parse(commit);
@@ -265,11 +281,19 @@
                                                            .filter(comment -> comment.author().equals(issueProject.issueTracker().currentUser()))
                                                            .anyMatch(comment -> comment.body().contains(hashUrl));
                 if (!alreadyPostedComment) {
                     issue.addComment(commitNotification);
                 }
-                issue.setState(Issue.State.RESOLVED);
+                if (issue.state() == Issue.State.OPEN) {
+                    issue.setState(Issue.State.RESOLVED);
+                    if (issue.assignees().isEmpty()) {
+                        var assignee = findIssueUser(commit);
+                        if (assignee.isPresent()) {
+                            issue.setAssignees(List.of(assignee.get()));
+                        }
+                    }
+                }
 
                 if (commitLink) {
                     var linkBuilder = Link.create(repository.webUrl(commit.hash()), "Commit")
                                           .summary(repository.name() + "/" + commit.hash().abbreviate());
                     if (commitIcon != null) {
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -924,31 +924,38 @@
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
+            var authorEmailAddress = issueProject.issueTracker().currentUser().userName() + "@openjdk.org";
             var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
-            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue", "Duke", authorEmailAddress);
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in a comment
-            var comments = issue.comments();
+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
+
+            var comments = updatedIssue.comments();
             assertEquals(1, comments.size());
             var comment = comments.get(0);
             assertTrue(comment.body().contains(editHash.abbreviate()));
 
             // And in a link
-            var links = issue.links();
+            var links = updatedIssue.links();
             assertEquals(1, links.size());
             var link = links.get(0);
             assertEquals(commitIcon, link.iconUrl().orElseThrow());
             assertEquals("Commit", link.title().orElseThrow());
             assertEquals(repo.webUrl(editHash), link.uri().orElseThrow());
 
             // As well as a fixVersion
-            assertEquals(Set.of("0.1"), fixVersions(issue));
+            assertEquals(Set.of("0.1"), fixVersions(updatedIssue));
+
+            // The issue should be assigned and resolved
+            assertEquals(RESOLVED, updatedIssue.state());
+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedIssue.assignees());
         }
     }
 
     @Test
     void testIssueNoVersion(TestInfo testInfo) throws IOException {
@@ -1198,28 +1205,31 @@
             // Create an issue and commit a fix
             var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             issue.setProperty("fixVersions", JSON.array().add("13.0.1"));
             issue.setProperty("priority", JSON.of("1"));
 
-            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
+            var authorEmailAddress = issueProject.issueTracker().currentUser().userName() + "@openjdk.org";
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue", "Duke", authorEmailAddress);
             localRepo.push(editHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The fixVersion should not have been updated
             var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
             assertEquals(Set.of("13.0.1"), fixVersions(updatedIssue));
             assertEquals(OPEN, updatedIssue.state());
+            assertEquals(List.of(), updatedIssue.assignees());
 
             // There should be a link
             var links = updatedIssue.links();
             assertEquals(1, links.size());
             var link = links.get(0);
             var backport = link.issue().orElseThrow();
 
-            // The backport issue should have a correct fixVersion
+            // The backport issue should have a correct fixVersion and assignee
             assertEquals(Set.of("12.0.2"), fixVersions(backport));
             assertEquals(RESOLVED, backport.state());
+            assertEquals(List.of(issueProject.issueTracker().currentUser()), backport.assignees());
 
             // Custom properties should also propagate
             assertEquals("1", backport.properties().get("priority").asString());
         }
     }
