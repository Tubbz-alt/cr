diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/AuthorCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/AuthorCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/AuthorCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/AuthorCheckTests.java
@@ -28,11 +28,11 @@
 
 import org.junit.jupiter.api.Test;
 import static org.junit.jupiter.api.Assertions.*;
 
 import java.util.*;
-import java.time.Instant;
+import java.time.ZonedDateTime;
 import java.io.IOException;
 
 class AuthorCheckTests {
     private static final JCheckConfiguration conf = JCheckConfiguration.parse(List.of(
         "[general]",
@@ -43,13 +43,13 @@
 
     private static Commit commit(Author author) {
         var committer = new Author("Foo", "foo@bar.org");
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"));
-        var timestamp = Instant.now();
+        var date = ZonedDateTime.now();
         var message = List.of("Initial commit");
-        var metadata = new CommitMetadata(hash, parents, author, committer, timestamp, message);
+        var metadata = new CommitMetadata(hash, parents, author, committer, date, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/BlacklistCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/BlacklistCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/BlacklistCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/BlacklistCheckTests.java
@@ -28,11 +28,11 @@
 
 import org.junit.jupiter.api.Test;
 import static org.junit.jupiter.api.Assertions.*;
 
 import java.util.*;
-import java.time.Instant;
+import java.time.ZonedDateTime;
 
 class BlacklistCheckTests {
     private static final JCheckConfiguration conf = JCheckConfiguration.parse(List.of(
         "[general]",
         "project = test",
@@ -42,13 +42,13 @@
 
     private static Commit commit(Hash hash) {
         var author = new Author("Foo", "foo@bar.org");
         var committer = author;
         var parents = List.of(new Hash("12345789012345789012345678901234567890"));
-        var timestamp = Instant.now();
+        var date = ZonedDateTime.now();
         var message = List.of("Initial commit");
-        var metadata = new CommitMetadata(hash, parents, author, committer, timestamp, message);
+        var metadata = new CommitMetadata(hash, parents, author, committer, date, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/CommitterCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/CommitterCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/CommitterCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/CommitterCheckTests.java
@@ -34,11 +34,11 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 import java.util.Iterator;
 import java.util.List;
 import java.util.ArrayList;
-import java.time.Instant;
+import java.time.ZonedDateTime;
 import java.io.IOException;
 
 class CommitterCheckTests {
     private static final List<String> CENSUS = List.of(
         "<?xml version=\"1.0\" encoding=\"us-ascii\"?>",
@@ -76,13 +76,13 @@
     );
 
     private static Commit commit(Author author, Author committer) {
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"));
-        var timestamp = Instant.now();
+        var date = ZonedDateTime.now();
         var message = List.of("Initial commit");
-        var metadata = new CommitMetadata(hash, parents, author, committer, timestamp, message);
+        var metadata = new CommitMetadata(hash, parents, author, committer, date, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/ExecutableCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/ExecutableCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/ExecutableCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/ExecutableCheckTests.java
@@ -31,11 +31,11 @@
 
 import java.nio.file.Path;
 import java.util.Iterator;
 import java.util.List;
 import java.util.ArrayList;
-import java.time.Instant;
+import java.time.ZonedDateTime;
 import java.io.IOException;
 
 class ExecutableCheckTests {
     private static final Hash NULL_HASH = new Hash("0".repeat(40));
     private static final JCheckConfiguration conf = JCheckConfiguration.parse(List.of(
@@ -59,12 +59,12 @@
     private static Commit commit(List<Diff> parentDiffs) {
         var author = new Author("foo", "foo@host.org");
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(hash, hash);
         var message = List.of("A commit");
-        var timestamp = Instant.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, timestamp, message);
+        var date = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
         return new Commit(metadata, parentDiffs);
     }
 
     private List<Issue> toList(Iterator<Issue> i) {
         var list = new ArrayList<Issue>();
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java
@@ -32,11 +32,11 @@
 
 import java.nio.file.Path;
 import java.util.Iterator;
 import java.util.List;
 import java.util.ArrayList;
-import java.time.Instant;
+import java.time.ZonedDateTime;
 import java.io.IOException;
 
 class HgTagCommitCheckTests {
     private static final Hash NULL_HASH = new Hash("0".repeat(40));
     private static List<Diff> parentDiffs(String line) {
@@ -59,12 +59,12 @@
     ));
 
     private static Commit commit(Hash hash, List<String> message, List<Diff> parentDiffs) {
         var author = new Author("Foo Bar", "foo@bar.org");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"));
-        var timestamp = Instant.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, timestamp, message);
+        var date = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
         return new Commit(metadata, parentDiffs);
     }
 
     private static Commit mergeCommit() {
         var hash = new Hash("0".repeat(40));
@@ -70,12 +70,12 @@
         var hash = new Hash("0".repeat(40));
         var author = new Author("Foo Bar", "foo@bar.org");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"),
                               new Hash("12345789012345789012345678901234567890"));
         var message = List.of("Merge");
-        var timestamp = Instant.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, timestamp, message);
+        var date = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java
@@ -33,11 +33,11 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 import java.util.Iterator;
 import java.util.List;
 import java.util.ArrayList;
-import java.time.Instant;
+import java.time.ZonedDateTime;
 import java.io.IOException;
 
 class IssuesCheckTests {
     private final Utilities utils = new Utilities();
 
@@ -54,12 +54,12 @@
 
     private static Commit commit(List<String> message) {
         var author = new Author("foo", "foo@host.org");
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(hash);
-        var timestamp = Instant.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, timestamp, message);
+        var date = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/MergeMessageCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/MergeMessageCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/MergeMessageCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/MergeMessageCheckTests.java
@@ -33,11 +33,11 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 import java.util.Iterator;
 import java.util.List;
 import java.util.ArrayList;
-import java.time.Instant;
+import java.time.ZonedDateTime;
 import java.io.IOException;
 
 class MergeMessageCheckTests {
     private static final List<String> CONFIGURATION = List.of(
         "[general]",
@@ -54,12 +54,12 @@
 
     private static Commit commit(List<String> message) {
         var author = new Author("foo", "foo@host.org");
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(hash, hash);
-        var timestamp = Instant.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, timestamp, message);
+        var date = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
         return new Commit(metadata, List.of());
     }
 
     private List<Issue> toList(Iterator<Issue> i) {
         var list = new ArrayList<Issue>();
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/MessageCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/MessageCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/MessageCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/MessageCheckTests.java
@@ -33,11 +33,11 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 import java.util.Iterator;
 import java.util.List;
 import java.util.ArrayList;
-import java.time.Instant;
+import java.time.ZonedDateTime;
 import java.io.IOException;
 
 class MessageCheckTests {
     private final Utilities utils = new Utilities();
 
@@ -54,12 +54,12 @@
 
     private static Commit commit(List<String> message) {
         var author = new Author("foo", "foo@host.org");
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(hash);
-        var timestamp = Instant.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, timestamp, message);
+        var date = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/ReviewersCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/ReviewersCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/ReviewersCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/ReviewersCheckTests.java
@@ -34,11 +34,11 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 import java.util.Iterator;
 import java.util.List;
 import java.util.ArrayList;
-import java.time.Instant;
+import java.time.ZonedDateTime;
 import java.io.IOException;
 
 class ReviewersCheckTests {
     private final Utilities utils = new Utilities();
 
@@ -89,13 +89,13 @@
     }
 
     private static Commit commit(Author author, List<String> reviewers) {
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"));
-        var timestamp = Instant.now();
+        var date = ZonedDateTime.now();
         var message = List.of("Initial commit", "", "Reviewed-by: " + String.join(", ", reviewers));
-        var metadata = new CommitMetadata(hash, parents, author, author, timestamp, message);
+        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/WhitespaceCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/WhitespaceCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/WhitespaceCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/WhitespaceCheckTests.java
@@ -32,11 +32,11 @@
 
 import java.nio.file.Path;
 import java.util.Iterator;
 import java.util.List;
 import java.util.ArrayList;
-import java.time.Instant;
+import java.time.ZonedDateTime;
 import java.io.IOException;
 
 class WhitespaceCheckTests {
     private static final Hash NULL_HASH = new Hash("0".repeat(40));
     private static List<Diff> parentDiffs(String filename, String line) {
@@ -65,13 +65,13 @@
 
     private static Commit commit(List<Diff> parentDiffs) {
         var author = new Author("Foo Bar", "foo@bar.org");
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"));
-        var timestamp = Instant.now();
+        var date = ZonedDateTime.now();
         var message = List.of("Initial commit", "", "Reviewed-by: baz");
-        var metadata = new CommitMetadata(hash, parents, author, author, timestamp, message);
+        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
         return new Commit(metadata, parentDiffs);
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Commit.java b/vcs/src/main/java/org/openjdk/skara/vcs/Commit.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Commit.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Commit.java
@@ -53,14 +53,10 @@
 
     public List<Hash> parents() {
         return metadata.parents();
     }
 
-    public Instant timestamp() {
-        return metadata.timestamp();
-    }
-
     public List<Diff> parentDiffs() {
         return parentDiffs;
     }
 
     public boolean isInitialCommit() {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/CommitMetadata.java b/vcs/src/main/java/org/openjdk/skara/vcs/CommitMetadata.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/CommitMetadata.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/CommitMetadata.java
@@ -31,21 +31,21 @@
 
     private final Hash hash;
     private final List<Hash> parents;
     private final Author author;
     private final Author committer;
-    private final Instant timestamp;
+    private final ZonedDateTime date;
     private final List<String> message;
 
     public CommitMetadata(Hash hash, List<Hash> parents,
                           Author author, Author committer,
-                          Instant timestamp, List<String> message) {
+                          ZonedDateTime date, List<String> message) {
         this.hash = hash;
         this.parents = parents;
         this.author = author;
         this.committer = committer;
-        this.timestamp = timestamp;
+        this.date = date;
         this.message = message;
     }
 
     public Hash hash() {
         return hash;
@@ -65,12 +65,12 @@
 
     public List<Hash> parents() {
         return parents;
     }
 
-    public Instant timestamp() {
-        return timestamp;
+    public ZonedDateTime date() {
+        return date;
     }
 
     public boolean isInitialCommit() {
         return numParents() == 1 && parents.get(0).equals(NULL_HASH);
     }
@@ -73,14 +73,10 @@
 
     public boolean isInitialCommit() {
         return numParents() == 1 && parents.get(0).equals(NULL_HASH);
     }
 
-    public ZonedDateTime date() {
-        return ZonedDateTime.ofInstant(timestamp(), ZoneOffset.UTC);
-    }
-
     public boolean isMerge() {
         return parents().size() > 1;
     }
 
     public int numParents() {
@@ -87,14 +83,12 @@
         return parents().size();
     }
 
     @Override
     public String toString() {
-        final var formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")
-                                               .withLocale(Locale.getDefault())
-                                               .withZone(ZoneOffset.UTC);
-        final var displayDate = formatter.format(timestamp);
+        final var formatter = DateTimeFormatter.RFC_1123_DATE_TIME;
+        final var displayDate = date.format(formatter);
         return String.format("%s  %-12s  %s  %s",
                              hash().toString(), author(), displayDate, message.get(0));
     }
 
     @Override
@@ -97,11 +91,11 @@
                              hash().toString(), author(), displayDate, message.get(0));
     }
 
     @Override
     public int hashCode() {
-        return Objects.hash(hash, parents, author, committer, timestamp, message);
+        return Objects.hash(hash, parents, author, committer, date, message);
     }
 
     @Override
     public boolean equals(Object o) {
         if (!(o instanceof CommitMetadata)) {
@@ -111,9 +105,9 @@
         var other = (CommitMetadata) o;
         return Objects.equals(hash, other.hash) &&
                Objects.equals(parents, other.parents) &&
                Objects.equals(author, other.author) &&
                Objects.equals(committer, other.committer) &&
-               Objects.equals(timestamp, other.timestamp) &&
+               Objects.equals(date, other.date) &&
                Objects.equals(message, other.message);
     }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -27,11 +27,11 @@
 
 import java.io.IOException;
 import java.net.URI;
 import java.nio.file.Path;
 import java.nio.file.Files;
-import java.time.Instant;
+import java.time.ZonedDateTime;
 import java.util.*;
 
 public interface Repository extends ReadOnlyRepository {
     Repository init() throws IOException;
     void checkout(Hash h, boolean force) throws IOException;
@@ -60,11 +60,11 @@
                 String authorName,
                 String authorEmail) throws IOException;
     Hash commit(String message,
                 String authorName,
                 String authorEmail,
-                Instant timestamp) throws IOException;
+                ZonedDateTime date) throws IOException;
     Hash commit(String message,
                 String authorName,
                 String authorEmail,
                 String committerName,
                 String committerEmail) throws IOException;
@@ -69,14 +69,14 @@
                 String committerName,
                 String committerEmail) throws IOException;
     Hash commit(String message,
                 String authorName,
                 String authorEmail,
-                Instant authorDate,
+                ZonedDateTime authorDate,
                 String committerName,
                 String committerEmail,
-                Instant committerDate) throws IOException;
+                ZonedDateTime committerDate) throws IOException;
     Hash amend(String message,
                String authorName,
                String authorEmail) throws IOException;
     Hash amend(String message,
                String authorName,
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitMetadata.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitMetadata.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitMetadata.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitMetadata.java
@@ -39,11 +39,11 @@
     private static final String parentsFormat = "%P";
     private static final String authorNameFormat = "%an";
     private static final String authorEmailFormat = "%ae";
     private static final String committerNameFormat = "%cn";
     private static final String committerEmailFormat = "%ce";
-    private static final String timestampFormat = "%at";
+    private static final String timestampFormat = "%aI";
 
     private static final String messageDelimiter = "=@=@=@=@=@";
     private static final String messageFormat = "%B" + messageDelimiter;
 
     public static final String FORMAT = String.join("%n",
@@ -79,11 +79,12 @@
         log.finer("committerName: " + committerName);
         var committerEmail = reader.readLine();
         log.finer("committerEmail " + committerName);
         var committer = new Author(committerName, committerEmail);
 
-        var timestamp = Instant.ofEpochSecond(Long.parseLong(reader.readLine()));
+        var formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME;
+        var date = ZonedDateTime.parse(reader.readLine(), formatter);
 
         var message = new ArrayList<String>();
         var line = reader.readLine();
         while (!line.endsWith(messageDelimiter)) {
             message.add(line);
@@ -93,8 +94,8 @@
         if (!line.equals(messageDelimiter)) {
             var prefix = line.substring(0, line.length() - messageDelimiter.length());
             message.add(prefix);
         }
 
-        return new CommitMetadata(hash, parents, author, committer, timestamp, message);
+        return new CommitMetadata(hash, parents, author, committer, date, message);
     }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -29,13 +29,12 @@
 
 import java.io.*;
 import java.net.URI;
 import java.nio.file.*;
 import java.nio.charset.StandardCharsets;
-import java.time.Instant;
-import java.time.ZonedDateTime;
-import java.time.ZoneOffset;
+import java.time.*;
+import java.time.format.DateTimeFormatter;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 
 public class GitRepository implements Repository {
@@ -465,11 +464,11 @@
     public Hash commit(String message, String authorName, String authorEmail)  throws IOException {
         return commit(message, authorName, authorEmail, null);
     }
 
     @Override
-    public Hash commit(String message, String authorName, String authorEmail, Instant authorDate)  throws IOException {
+    public Hash commit(String message, String authorName, String authorEmail, ZonedDateTime authorDate)  throws IOException {
         return commit(message, authorName, authorEmail, authorDate, authorName, authorEmail, authorDate);
     }
 
     @Override
     public Hash commit(String message,
@@ -482,14 +481,14 @@
 
     @Override
     public Hash commit(String message,
                        String authorName,
                        String authorEmail,
-                       Instant authorDate,
+                       ZonedDateTime authorDate,
                        String committerName,
                        String committerEmail,
-                       Instant committerDate) throws IOException {
+                       ZonedDateTime committerDate) throws IOException {
         var cmd = Process.capture("git", "commit", "--message=" + message)
                          .workdir(dir)
                          .environ("GIT_AUTHOR_NAME", authorName)
                          .environ("GIT_AUTHOR_EMAIL", authorEmail)
                          .environ("GIT_COMMITTER_NAME", committerName)
@@ -493,16 +492,16 @@
                          .environ("GIT_AUTHOR_NAME", authorName)
                          .environ("GIT_AUTHOR_EMAIL", authorEmail)
                          .environ("GIT_COMMITTER_NAME", committerName)
                          .environ("GIT_COMMITTER_EMAIL", committerEmail);
         if (authorDate != null) {
-            var epochSecond = ZonedDateTime.ofInstant(authorDate, ZoneOffset.UTC);
-            cmd = cmd.environ("GIT_AUTHOR_DATE", epochSecond + " +0000");
+            cmd = cmd.environ("GIT_AUTHOR_DATE",
+                              authorDate.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME));
         }
         if (committerDate != null) {
-            var epochSecond = ZonedDateTime.ofInstant(committerDate, ZoneOffset.UTC);
-            cmd = cmd.environ("GIT_COMMITTER_DATE", epochSecond + " +0000");
+            cmd = cmd.environ("GIT_COMMITTER_DATE",
+                              committerDate.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME));
         }
         try (var p = cmd.execute()) {
             await(p);
             return head();
         }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgCommitMetadata.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgCommitMetadata.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgCommitMetadata.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgCommitMetadata.java
@@ -45,11 +45,11 @@
         reader.readLine(); // skip revision numbers for parents
 
         var author = Author.fromString(reader.readLine());
 
         var formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd H:m:sZ");
-        var timestamp = ZonedDateTime.parse(reader.readLine(), formatter).toInstant();
+        var date = ZonedDateTime.parse(reader.readLine(), formatter);
 
         var messageSize = Integer.parseInt(reader.readLine());
         var messageBuffer = reader.read(messageSize);
         var message = new ArrayList<String>();
         var last = -1;
@@ -62,8 +62,8 @@
                 // the last character wasn't newline, add the rest
                 message.add(new String(messageBuffer, offset, messageSize - offset, StandardCharsets.UTF_8));
             }
         }
 
-        return new CommitMetadata(hash, parents, author, author, timestamp, message);
+        return new CommitMetadata(hash, parents, author, author, date, message);
     }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -27,13 +27,12 @@
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.tools.*;
 
 import java.io.*;
 import java.nio.file.*;
-import java.time.Instant;
-import java.time.ZonedDateTime;
-import java.time.ZoneOffset;
+import java.time.*;
+import java.time.format.DateTimeFormatter;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.stream.*;
 import java.net.URI;
 
@@ -490,17 +489,17 @@
     public Hash commit(String message, String authorName, String authorEmail)  throws IOException {
         return commit(message, authorName, authorEmail, null);
     }
 
     @Override
-    public Hash commit(String message, String authorName, String authorEmail, Instant authorDate)  throws IOException {
+    public Hash commit(String message, String authorName, String authorEmail, ZonedDateTime authorDate)  throws IOException {
         var user = authorEmail == null ? authorName : authorName + " <" + authorEmail + ">";
         var cmd = new ArrayList<String>();
         cmd.addAll(List.of("hg", "commit", "--message=" + message, "--user=" + user));
         if (authorDate != null) {
-            var date = ZonedDateTime.ofInstant(authorDate, ZoneOffset.UTC);
-            cmd.add("--date=" + date.toEpochSecond() + " 0");
+            var formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME;
+            cmd.add("--date=" + authorDate.format(formatter));
         }
         try (var p = capture(cmd)) {
             await(p);
         }
         return resolve("tip").orElseThrow(() -> new IOException("Could not resolve 'tip'"));
@@ -517,14 +516,14 @@
 
     @Override
     public Hash commit(String message,
                        String authorName,
                        String authorEmail,
-                       Instant authorDate,
+                       ZonedDateTime authorDate,
                        String committerName,
                        String committerEmail,
-                       Instant committerDate) throws IOException {
+                       ZonedDateTime committerDate) throws IOException {
         if (!Objects.equals(authorName, committerName) ||
             !Objects.equals(authorEmail, committerEmail) ||
             !Objects.equals(authorDate, committerDate)) {
             throw new IllegalArgumentException("hg does not support different author and committer data");
         }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java
@@ -172,11 +172,11 @@
             var hgAuthor = username(committer);
             log.finer("Author: " + hgAuthor);
             var hgHash = hgRepo.commit(hgMessage,
                                        username(committer),
                                        null,
-                                       commit.timestamp());
+                                       commit.date());
             log.finer("Hg hash: " + hgHash.hex());
             gitToHg.put(commit.hash(), hgHash);
             hgToGit.put(hgHash, commit.hash());
             hgHashes.add(hgHash);
         }
diff a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/GitToHgConverterTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/GitToHgConverterTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/GitToHgConverterTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/GitToHgConverterTests.java
@@ -35,11 +35,11 @@
 
 import static org.junit.jupiter.api.Assertions.*;
 
 class GitToHgConverterTests {
     void assertCommitEquals(Commit gitCommit, Commit hgCommit) {
-        assertEquals(gitCommit.timestamp(), hgCommit.timestamp());
+        assertEquals(gitCommit.date(), hgCommit.date());
         assertEquals(gitCommit.isInitialCommit(), hgCommit.isInitialCommit());
         assertEquals(gitCommit.isMerge(), hgCommit.isMerge());
         assertEquals(gitCommit.numParents(), hgCommit.numParents());
 
         var hgDiffs = hgCommit.parentDiffs();
diff a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/HgToGitConverterTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/HgToGitConverterTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/HgToGitConverterTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/HgToGitConverterTests.java
@@ -62,11 +62,11 @@
             var hgCommit = hgCommits.get(0);
 
             assertEquals(gitCommit.author(), new Author("Foo Bar", "foo@openjdk.java.net"));
             assertEquals(gitCommit.committer(), new Author("Foo Bar", "foo@openjdk.java.net"));
             assertEquals(hgCommit.message(), gitCommit.message());
-            assertEquals(hgCommit.timestamp(), gitCommit.timestamp());
+            assertEquals(hgCommit.date(), gitCommit.date());
             assertEquals(hgCommit.isInitialCommit(), gitCommit.isInitialCommit());
             assertEquals(hgCommit.isMerge(), gitCommit.isMerge());
             assertEquals(hgCommit.numParents(), gitCommit.numParents());
 
             var hgDiffs = hgCommit.parentDiffs();
