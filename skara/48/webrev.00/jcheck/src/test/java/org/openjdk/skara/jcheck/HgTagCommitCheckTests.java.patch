diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java
@@ -32,11 +32,11 @@
 
 import java.nio.file.Path;
 import java.util.Iterator;
 import java.util.List;
 import java.util.ArrayList;
-import java.time.Instant;
+import java.time.ZonedDateTime;
 import java.io.IOException;
 
 class HgTagCommitCheckTests {
     private static final Hash NULL_HASH = new Hash("0".repeat(40));
     private static List<Diff> parentDiffs(String line) {
@@ -59,12 +59,12 @@
     ));
 
     private static Commit commit(Hash hash, List<String> message, List<Diff> parentDiffs) {
         var author = new Author("Foo Bar", "foo@bar.org");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"));
-        var timestamp = Instant.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, timestamp, message);
+        var date = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
         return new Commit(metadata, parentDiffs);
     }
 
     private static Commit mergeCommit() {
         var hash = new Hash("0".repeat(40));
@@ -70,12 +70,12 @@
         var hash = new Hash("0".repeat(40));
         var author = new Author("Foo Bar", "foo@bar.org");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"),
                               new Hash("12345789012345789012345678901234567890"));
         var message = List.of("Merge");
-        var timestamp = Instant.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, timestamp, message);
+        var date = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
