diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -33,15 +33,17 @@
 
 public class MailingListUpdater implements UpdateConsumer {
     private final String host;
     private final EmailAddress recipient;
     private final EmailAddress sender;
+    private final boolean includeBranch;
 
-    MailingListUpdater(String host, EmailAddress recipient, EmailAddress sender) {
+    MailingListUpdater(String host, EmailAddress recipient, EmailAddress sender, boolean includeBranch) {
         this.host = host;
         this.recipient = recipient;
         this.sender = sender;
+        this.includeBranch = includeBranch;
     }
 
     private String patchToText(Patch patch) {
         if (patch.status().isAdded()) {
             return "+ " + patch.target().path().orElseThrow();
@@ -76,16 +78,20 @@
         }
 
         return writer.toString();
     }
 
-    private String commitsToSubject(HostedRepository repository, List<Commit> commits) {
+    private String commitsToSubject(HostedRepository repository, List<Commit> commits, Branch branch) {
         var subject = new StringBuilder();
         subject.append(repository.getRepositoryType().shortName());
         subject.append(": ");
         subject.append(repository.getName());
         subject.append(": ");
+        if (includeBranch) {
+            subject.append(branch.name());
+            subject.append(": ");
+        }
         if (commits.size() > 1) {
             subject.append(commits.size());
             subject.append(" new changesets");
         } else {
             subject.append(commits.get(0).message().get(0));
@@ -92,15 +98,15 @@
         }
         return subject.toString();
     }
 
     @Override
-    public void handleCommits(HostedRepository repository, List<Commit> commits) {
+    public void handleCommits(HostedRepository repository, List<Commit> commits, Branch branch) {
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
-        var subject = commitsToSubject(repository, commits);
+        var subject = commitsToSubject(repository, commits, branch);
 
         for (var commit : commits) {
             printer.println(commitToText(repository, commit));
         }
 
