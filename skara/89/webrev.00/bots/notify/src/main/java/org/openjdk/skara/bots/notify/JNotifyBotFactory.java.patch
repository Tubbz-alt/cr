diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java
@@ -22,16 +22,18 @@
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.bot.*;
 import org.openjdk.skara.email.EmailAddress;
+import org.openjdk.skara.json.JSONValue;
 import org.openjdk.skara.storage.StorageBuilder;
-import org.openjdk.skara.vcs.Tag;
+import org.openjdk.skara.vcs.*;
 
 import java.nio.file.Path;
 import java.util.*;
 import java.util.logging.Logger;
+import java.util.stream.Collectors;
 
 public class JNotifyBotFactory implements BotFactory {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
 
     @Override
@@ -50,11 +52,13 @@
         var databaseName = database.get("name").asString();
         var databaseEmail = database.get("email").asString();
 
         for (var repo : specific.get("repositories").fields()) {
             var repoName = repo.name();
-            var branch = repo.value().get("branch").asString();
+            var branches = repo.value().get("branches").stream()
+                               .map(JSONValue::asString)
+                               .collect(Collectors.toList());
             var build = repo.value().get("build").asString();
             var version = repo.value().get("version").asString();
 
             var updaters = new ArrayList<UpdateConsumer>();
             if (repo.value().contains("jsonfolder")) {
@@ -63,11 +67,11 @@
             if (repo.value().contains("mailinglist")) {
                 var mailcfg = repo.value().get("mailinglist").asObject();
                 var senderName = mailcfg.get("name").asString();
                 var senderMail = mailcfg.get("email").asString();
                 var sender = EmailAddress.from(senderName, senderMail);
-                updaters.add(new MailingListUpdater(mailcfg.get("smtp").asString(), EmailAddress.parse(mailcfg.get("recipient").asString()), sender));
+                updaters.add(new MailingListUpdater(mailcfg.get("smtp").asString(), EmailAddress.parse(mailcfg.get("recipient").asString()), sender, branches.size() > 1));
             }
 
             if (updaters.isEmpty()) {
                 log.warning("No update consumers for updater bot configuration: " + repoName);
                 continue;
@@ -75,11 +79,11 @@
 
             var tagStorageBuilder = new StorageBuilder<Tag>(repoName + ".tags.txt")
                     .remoteRepository(databaseRepo, databaseRef, databaseName, databaseEmail, "Added tag for " + repoName);
             var branchStorageBuilder = new StorageBuilder<ResolvedBranch>(repoName + ".branches.txt")
                     .remoteRepository(databaseRepo, databaseRef, databaseName, databaseEmail, "Added branch hash for " + repoName);
-            var bot = new JNotifyBot(configuration.repository(repoName), configuration.storageFolder(), branch, tagStorageBuilder, branchStorageBuilder, updaters);
+            var bot = new JNotifyBot(configuration.repository(repoName), configuration.storageFolder(), branches, tagStorageBuilder, branchStorageBuilder, updaters);
             ret.add(bot);
         }
 
         return ret;
     }
