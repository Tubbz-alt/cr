diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBot.java
@@ -38,19 +38,21 @@
 
 class JNotifyBot implements Bot, WorkItem {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
     private final HostedRepository repository;
     private final Path storagePath;
-    private final Branch branch;
+    private final List<Branch> branches;
     private final StorageBuilder<Tag> tagStorageBuilder;
     private final StorageBuilder<ResolvedBranch> branchStorageBuilder;
     private final List<UpdateConsumer> updaters;
 
-    JNotifyBot(HostedRepository repository, Path storagePath, String branch, StorageBuilder<Tag> tagStorageBuilder, StorageBuilder<ResolvedBranch> branchStorageBuilder, List<UpdateConsumer> updaters) {
+    JNotifyBot(HostedRepository repository, Path storagePath, List<String> branches, StorageBuilder<Tag> tagStorageBuilder, StorageBuilder<ResolvedBranch> branchStorageBuilder, List<UpdateConsumer> updaters) {
         this.repository = repository;
         this.storagePath = storagePath;
-        this.branch = new Branch(branch);
+        this.branches = branches.stream()
+                                .map(Branch::new)
+                                .collect(Collectors.toList());
         this.tagStorageBuilder = tagStorageBuilder;
         this.branchStorageBuilder = branchStorageBuilder;
         this.updaters = updaters;
     }
 
@@ -64,13 +66,11 @@
             return true;
         }
         return false;
     }
 
-    private void handleBranch(Repository localRepo, UpdateHistory history, Branch branch) throws IOException {
-        var curHead = localRepo.resolve("FETCH_HEAD").orElseThrow(IOException::new);
-
+    private void handleBranch(Repository localRepo, UpdateHistory history, Branch branch, Hash curHead) throws IOException {
         var lastRef = history.branchHash(branch);
         if (lastRef.isEmpty()) {
             log.warning("No previous history found for branch '" + branch + "' - resetting mark");
             history.setBranchHash(branch, curHead);
             return;
@@ -85,11 +85,11 @@
         // Update the history first - if there is a problem here we don't want to send out multiple updates
         history.setBranchHash(branch, curHead);
 
         Collections.reverse(newCommits);
         for (var updater : updaters) {
-            updater.handleCommits(repository, newCommits);
+            updater.handleCommits(repository, newCommits, branch);
         }
     }
 
     private void handleTags(Repository localRepo, UpdateHistory history) throws IOException {
         var tags = localRepo.tags();
@@ -139,14 +139,18 @@
         var sanitizedUrl = URLEncoder.encode(repository.getWebUrl().toString(), StandardCharsets.UTF_8);
         var path = storagePath.resolve(sanitizedUrl);
         var historyPath = scratchPath.resolve("notify").resolve("history");
 
         try {
-            var localRepo = Repository.materialize(path, repository.getUrl(), branch.name(), false);
+            var localRepo = Repository.materialize(path, repository.getUrl(), "master", false);
             var history = UpdateHistory.create(tagStorageBuilder, historyPath.resolve("tags"), branchStorageBuilder, historyPath.resolve("branches"));
-            handleBranch(localRepo, history, branch);
             handleTags(localRepo, history);
+
+            for (var branch : branches) {
+                var hash = localRepo.fetch(repository.getUrl(), branch.name());
+                handleBranch(localRepo, history, branch, hash);
+            }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
