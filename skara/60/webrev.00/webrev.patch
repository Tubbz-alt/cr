diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -40,10 +40,11 @@
     void fetchAll() throws IOException;
     void pushAll(URI uri) throws IOException;
     void push(Hash hash, URI uri, String ref, boolean force) throws IOException;
     void push(Branch branch, String remote, boolean setUpstream) throws IOException;
     void clean() throws IOException;
+    void revert(Hash parent) throws IOException;
     Repository reinitialize() throws IOException;
     void squash(Hash h) throws IOException;
     void add(List<Path> files) throws IOException;
     default void add(Path... files) throws IOException {
         add(Arrays.asList(files));
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -289,10 +289,17 @@
         try (var p = capture("git", "rebase", "--quit")) {
             p.await(); // Don't care about the result.
         }
     }
 
+    @Override
+    public void revert(Hash h) throws IOException {
+        try (var p = capture("git", "checkout", h.hex(), "--", ".")) {
+            await(p);
+        }
+    }
+
     @Override
     public Repository reinitialize() throws IOException {
         cachedRoot = null;
 
         Files.walk(dir)
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -638,10 +638,17 @@
             }
             return Optional.empty();
         }
     }
 
+    @Override
+    public void revert(Hash parent) throws IOException {
+        try (var p = capture("hg", "revert", "--no-backup", "--all", "--rev", parent.hex())) {
+            await(p);
+        }
+    }
+
     @Override
     public Diff diff(Hash from) throws IOException {
         return diff(from, null);
     }
 
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -1543,6 +1543,33 @@
             assertEquals(1, commits.size());
             var commit = commits.get(0);
             assertEquals(List.of("Initial commit corrected"), commit.message());
         }
     }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testRevert(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var r = Repository.init(dir.path(), vcs);
+            assertTrue(r.isClean());
+
+            var f = dir.path().resolve("README");
+            Files.writeString(f, "Hello\n");
+            r.add(f);
+            var initial = r.commit("Initial commit", "duke", "duke@openjdk.org");
+
+            Files.writeString(f, "Hello, world\n");
+            r.revert(initial);
+            Files.writeString(f, "Goodbye, world\n");
+            r.add(f);
+            var hash = r.commit("Second commit", "duke", "duke@openjdk.org");
+            var commit = r.lookup(hash).orElseThrow();
+            var patches = commit.parentDiffs().get(0).patches();
+            assertEquals(1, patches.size());
+            var patch = patches.get(0).asTextualPatch();
+            assertEquals(1, patch.hunks().size());
+            var hunk = patch.hunks().get(0);
+            assertEquals(List.of("Goodbye, world"), hunk.target().lines());
+        }
+    }
 }
