diff a/bots/bridgekeeper/src/test/java/org/openjdk/skara/bots/bridgekeeper/PullRequestCloserBotTests.java b/bots/bridgekeeper/src/test/java/org/openjdk/skara/bots/bridgekeeper/PullRequestCloserBotTests.java
--- a/bots/bridgekeeper/src/test/java/org/openjdk/skara/bots/bridgekeeper/PullRequestCloserBotTests.java
+++ b/bots/bridgekeeper/src/test/java/org/openjdk/skara/bots/bridgekeeper/PullRequestCloserBotTests.java
@@ -28,10 +28,11 @@
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.openjdk.skara.issuetracker.Issue.State.*;
 
 class PullRequestCloserBotTests {
     @Test
     void simple(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
@@ -46,17 +47,21 @@
 
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
             localRepo.push(editHash, author.url(), "edit", true);
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+            assertEquals(OPEN, pr.state());
 
             // Let the bot see it
             TestBotRunner.runPeriodicItems(bot);
 
             // There should now be no open PRs
             var prs = author.pullRequests();
             assertEquals(0, prs.size());
+
+            var updatedPr = author.pullRequest(pr.id());
+            assertEquals(CLOSED, updatedPr.state());
         }
     }
 
     @Test
     void keepClosing(TestInfo testInfo) throws IOException {
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -41,10 +41,11 @@
 import java.util.*;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 import static org.junit.jupiter.api.Assertions.*;
+import static org.openjdk.skara.issuetracker.Issue.State.*;
 
 class UpdaterTests {
     private List<Path> findJsonFiles(Path folder, String partialName) throws IOException {
         return Files.walk(folder)
                     .filter(path -> path.toString().endsWith(".json"))
@@ -1204,19 +1205,21 @@
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The fixVersion should not have been updated
             var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
             assertEquals(Set.of("13.0.1"), fixVersions(updatedIssue));
+            assertEquals(OPEN, updatedIssue.state());
 
             // There should be a link
             var links = updatedIssue.links();
             assertEquals(1, links.size());
             var link = links.get(0);
             var backport = link.issue().orElseThrow();
 
             // The backport issue should have a correct fixVersion
             assertEquals(Set.of("12.0.2"), fixVersions(backport));
+            assertEquals(RESOLVED, backport.state());
 
             // Custom properties should also propagate
             assertEquals("1", backport.properties().get("priority").asString());
         }
     }
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
@@ -161,10 +161,15 @@
     @Override
     public ZonedDateTime updatedAt() {
         return null;
     }
 
+    @Override
+    public State state() {
+        return null;
+    }
+
     @Override
     public Map<String, Check> checks(Hash hash) {
         return checks.get(hash.hex());
     }
 
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -308,10 +308,18 @@
     @Override
     public ZonedDateTime updatedAt() {
         return ZonedDateTime.parse(json.get("updated_at").asString());
     }
 
+    @Override
+    public State state() {
+        if (json.get("state").asString().equals("open")) {
+            return State.OPEN;
+        }
+        return State.CLOSED;
+    }
+
     @Override
     public Map<String, Check> checks(Hash hash) {
         var checks = request.get("commits/" + hash.hex() + "/check-runs").execute();
 
         return checks.get("check_runs").stream()
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
@@ -359,10 +359,18 @@
     @Override
     public ZonedDateTime updatedAt() {
         return ZonedDateTime.parse(json.get("updated_at").asString());
     }
 
+    @Override
+    public State state() {
+        if (json.get("state").asString().equals("open")) {
+            return State.OPEN;
+        }
+        return State.CLOSED;
+    }
+
     private final String checkMarker = "<!-- Merge request status check message (%s) -->";
     private final String checkResultMarker = "<!-- Merge request status check result (%s) (%s) (%s) (%s) -->";
     private final String checkResultPattern = "<!-- Merge request status check result \\(([-\\w]+)\\) \\((\\w+)\\) \\(%s\\) \\((\\S+)\\) -->";
 
     private Optional<Comment> getStatusCheckComment(String name) {
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
@@ -107,10 +107,16 @@
         OPEN,
         RESOLVED,
         CLOSED
     }
 
+    /**
+     * Returns the current state.
+     * @return
+     */
+    State state();
+
     /**
      * Set the state.
      * @param state Desired state
      */
     void setState(State state);
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraIssue.java
@@ -175,10 +175,22 @@
     @Override
     public ZonedDateTime updatedAt() {
         return ZonedDateTime.parse(json.get("fields").get("updated").asString(), dateFormat);
     }
 
+    @Override
+    public State state() {
+        switch (json.get("fields").get("status").get("name").asString()) {
+            case "Closed":
+                return State.CLOSED;
+            case "Resolved":
+                return State.RESOLVED;
+            default:
+                return State.OPEN;
+        }
+    }
+
     private Map<String, String> availableTransitions() {
         var transitions = request.get("/transitions").execute();
         return transitions.get("transitions").stream()
                           .collect(Collectors.toMap(v -> v.get("to").get("name").asString(),
                                                     v -> v.get("id").asString()));
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -157,11 +157,11 @@
 
     List<TestPullRequest> getPullRequests(TestHostedRepository repository) {
         return data.pullRequests.entrySet().stream()
                                 .sorted(Comparator.comparing(Map.Entry::getKey))
                                 .map(pr -> getPullRequest(repository, pr.getKey()))
-                                .filter(TestPullRequest::isOpen)
+                                .filter(pr -> pr.state().equals(Issue.State.OPEN))
                                 .collect(Collectors.toList());
     }
 
     TestIssue createIssue(TestIssueProject issueProject, String title, List<String> body, Map<String, JSONValue> properties) {
         var id = issueProject.projectName().toUpperCase() + "-" + (data.issues.size() + 1);
@@ -180,9 +180,9 @@
 
     List<TestIssue> getIssues(TestIssueProject issueProject) {
         return data.issues.entrySet().stream()
                           .sorted(Comparator.comparing(Map.Entry::getKey))
                           .map(issue -> getIssue(issueProject, issue.getKey()))
-                          .filter(TestIssue::isOpen)
+                          .filter(i -> i.state().equals(Issue.State.OPEN))
                           .collect(Collectors.toList());
     }
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestIssue.java b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssue.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssue.java
@@ -136,20 +136,21 @@
     @Override
     public ZonedDateTime updatedAt() {
         return data.lastUpdate;
     }
 
+    @Override
+    public State state() {
+        return data.state;
+    }
+
     @Override
     public void setState(State state) {
         data.state = state;
         data.lastUpdate = ZonedDateTime.now();
     }
 
-    boolean isOpen() {
-        return data.state.equals(Issue.State.OPEN);
-    }
-
     @Override
     public void addLabel(String label) {
         data.labels.add(label);
         data.lastUpdate = ZonedDateTime.now();
     }
