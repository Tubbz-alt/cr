diff a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
--- a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
+++ b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
@@ -22,13 +22,16 @@
  */
 
 package org.openjdk.skara.gradle.images;
 
 import org.gradle.api.*;
+import org.gradle.api.file.Directory;
 import org.gradle.api.tasks.bundling.*;
+import org.gradle.api.artifacts.UnknownConfigurationException;
 
 import java.util.ArrayList;
+import java.io.File;
 
 public class ImagesPlugin implements Plugin<Project> {
     @Override
     public void apply(Project project) {
         NamedDomainObjectContainer<ImageEnvironment> imageEnvironmentContainer =
@@ -49,35 +52,45 @@
                 var name = env.getName();
                 var subName = name.substring(0, 1).toUpperCase() + name.substring(1);
 
                 var downloadTaskName = "download" + subName + "JDK";
                 project.getTasks().register(downloadTaskName, DownloadJDKTask.class, (task) -> {
-                    task.setUrl(env.getUrl());
-                    task.setSha256(env.getSha256());
-                    task.setToDir(rootDir.resolve(".jdk"));
+                    task.getUrl().set(env.getUrl());
+                    task.getSha256().set(env.getSha256());
+                    task.getToDir().set(rootDir.resolve(".jdk"));
                 });
 
                 var linkTaskName = "link" + subName;
                 project.getTasks().register(linkTaskName, LinkTask.class, (task) -> {
-                    for (var build : project.getRootProject().getGradle().getIncludedBuilds()) {
-                        task.dependsOn(build.task(":jar"));
+                    for (var jarTask : project.getTasksByName("jar", true)) {
+                        if (jarTask instanceof Jar) {
+                            task.getModulePath().add(((Jar) jarTask).getArchiveFile());
+                        }
                     }
-                    task.dependsOn(project.getRootProject().getTasksByName("jar", true));
+
+                    try {
+                        var runtimeClasspath = project.getConfigurations().getByName("runtimeClasspath");
+                        task.getRuntimeModules().addAll(runtimeClasspath.getElements());
+                        task.dependsOn(runtimeClasspath);
+                    } catch (UnknownConfigurationException e) {
+                        // ignored
+                    }
+
                     task.dependsOn(projectPath + ":" + downloadTaskName);
-                    task.setToDir(buildDir.resolve("images"));
-                    task.setUrl(env.getUrl());
-                    task.setOS(name);
+                    task.getToDir().set(buildDir.resolve("images"));
+                    task.getUrl().set(env.getUrl());
+                    task.getOS().set(name);
                     task.getLaunchers().set(env.getLaunchers());
                     task.getModules().set(env.getModules());
                 });
 
                 var launchersTaskName = "launchers" + subName;
                 project.getTasks().register(launchersTaskName, LaunchersTask.class, (task) -> {
                     task.getLaunchers().set(env.getLaunchers());
-                    task.setOptions(env.getOptions());
-                    task.setToDir(buildDir.resolve("launchers"));
-                    task.setOS(name);
+                    task.getOptions().set(env.getOptions());
+                    task.getToDir().set(buildDir.resolve("launchers"));
+                    task.getOS().set(name);
                 });
 
                 var zipTaskName = "bundleZip" + subName;
                 project.getTasks().register(zipTaskName, Zip.class, (task) -> {
                     task.dependsOn(projectPath + ":" + linkTaskName);
