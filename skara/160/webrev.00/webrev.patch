diff a/build.gradle b/build.gradle
--- a/build.gradle
+++ b/build.gradle
@@ -89,33 +89,31 @@
             throw new GradleException("To publish artifacts, set the maven repository password -PmavenRepositoryPassword=<password>")
         }
     }
 }
 
-task jar {
-    subprojects.findAll() { it.name != 'bots' }.each { dependsOn "${it.path}:jar" }
+task test {
+    subprojects.findAll() { !it.getTasksByName('test', false).isEmpty() }.each { dependsOn "${it.path}:test" }
 }
 
-task test {
-    subprojects.findAll() { it.name != 'bots' }.each { dependsOn "${it.path}:test" }
+task clean {
+    subprojects.findAll() { !it.getTasksByName('clean', false).isEmpty() }.each { dependsOn "${it.path}:clean" }
 }
 
 reproduce {
     dockerfile = 'test.dockerfile'
 }
 
-task deleteBuildDir(type: Delete) {
-    delete project.buildDir
-}
-
 task local(type: Copy) {
+    doFirst {
+        delete project.buildDir
+    }
     def os = System.getProperty('os.name').toLowerCase()
     def osName = os.startsWith('win') ? 'Windows' :
         os.startsWith('mac') ? 'Macos' : 'Linux'
 
     dependsOn ':cli:image' + osName
-    dependsOn deleteBuildDir
     from zipTree(file(project.rootDir.toString() +
                       '/cli/build/distributions/cli' +
                       '-' + project.version + '-' +
 		      osName.toLowerCase() + '.zip'))
     into project.buildDir
diff a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/DownloadJDKTask.java b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/DownloadJDKTask.java
--- a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/DownloadJDKTask.java
+++ b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/DownloadJDKTask.java
@@ -24,10 +24,13 @@
 package org.openjdk.skara.gradle.images;
 
 import org.gradle.api.DefaultTask;
 import org.gradle.api.GradleException;
 import org.gradle.api.tasks.TaskAction;
+import org.gradle.api.tasks.OutputDirectory;
+import org.gradle.api.tasks.Input;
+import org.gradle.api.provider.Property;
 
 import java.net.http.HttpClient;
 import java.net.http.HttpRequest;
 import java.net.http.HttpResponse;
 import java.net.http.HttpResponse.BodyHandlers;
@@ -40,24 +43,33 @@
 import java.security.NoSuchAlgorithmException;
 import java.io.File;
 import java.util.Comparator;
 
 public class DownloadJDKTask extends DefaultTask {
-    private String url;
-    private String sha256;
-    private Path toDir;
+    private final Property<String> url;
+    private final Property<String> sha256;
+    private final Property<Path> toDir;
+
+    public DownloadJDKTask() {
+        url = getProject().getObjects().property(String.class);
+        sha256 = getProject().getObjects().property(String.class);
+        toDir = getProject().getObjects().property(Path.class);
+    }
 
-    void setUrl(String url) {
-        this.url = url;
+    @Input
+    Property<String> getUrl() {
+        return url;
     }
 
-    void setSha256(String sha256) {
-        this.sha256 = sha256;
+    @Input
+    Property<String> getSha256() {
+        return sha256;
     }
 
-    void setToDir(Path toDir) {
-        this.toDir = toDir;
+    @OutputDirectory
+    Property<Path> getToDir() {
+        return toDir;
     }
 
     private static String checksum(Path file) throws IOException {
         try {
             var digest = MessageDigest.getInstance("SHA-256");
@@ -99,45 +111,45 @@
         });
     }
 
     @TaskAction
     void download() throws IOException, InterruptedException {
-        var uri = URI.create(url);
+        var uri = URI.create(url.get());
         var filename = Path.of(uri.getPath()).getFileName().toString();
-        var file = toDir.resolve(filename).toAbsolutePath();
-        var dist = toDir.resolve(filename.replace(".zip", "").replace(".tar.gz", ""));
+        var file = toDir.get().resolve(filename).toAbsolutePath();
+        var dist = toDir.get().resolve(filename.replace(".zip", "").replace(".tar.gz", ""));
 
         if (Files.exists(dist) && Files.isDirectory(dist)) {
             return;
         }
 
         if (Files.exists(file)) {
             var sum = checksum(file);
-            if (sum.equals(sha256)) {
+            if (sum.equals(sha256.get())) {
                 unpack(file, dist);
                 return;
             } else {
                 Files.delete(file);
             }
         }
 
-        if (!Files.exists(toDir)) {
-            Files.createDirectories(toDir);
+        if (!Files.exists(toDir.get())) {
+            Files.createDirectories(toDir.get());
         }
 
         var client = HttpClient.newHttpClient();
         var req = HttpRequest.newBuilder()
                              .uri(uri)
                              .build();
 
         var res = client.send(req, BodyHandlers.ofFile(file));
         if (res.statusCode() >= 300) {
-            throw new GradleException("could not download " + url + ", got " + res.statusCode());
+            throw new GradleException("could not download " + url.get() + ", got " + res.statusCode());
         }
 
         var sum = checksum(file);
-        if (!sum.equals(sha256)) {
+        if (!sum.equals(sha256.get())) {
             throw new GradleException("checksums do not match, actual: " + sum + ", expected: " + sha256);
         }
 
         unpack(file, dist);
     }
diff a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
--- a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
+++ b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
@@ -22,13 +22,16 @@
  */
 
 package org.openjdk.skara.gradle.images;
 
 import org.gradle.api.*;
+import org.gradle.api.file.Directory;
 import org.gradle.api.tasks.bundling.*;
+import org.gradle.api.artifacts.UnknownConfigurationException;
 
 import java.util.ArrayList;
+import java.io.File;
 
 public class ImagesPlugin implements Plugin<Project> {
     @Override
     public void apply(Project project) {
         NamedDomainObjectContainer<ImageEnvironment> imageEnvironmentContainer =
@@ -49,35 +52,45 @@
                 var name = env.getName();
                 var subName = name.substring(0, 1).toUpperCase() + name.substring(1);
 
                 var downloadTaskName = "download" + subName + "JDK";
                 project.getTasks().register(downloadTaskName, DownloadJDKTask.class, (task) -> {
-                    task.setUrl(env.getUrl());
-                    task.setSha256(env.getSha256());
-                    task.setToDir(rootDir.resolve(".jdk"));
+                    task.getUrl().set(env.getUrl());
+                    task.getSha256().set(env.getSha256());
+                    task.getToDir().set(rootDir.resolve(".jdk"));
                 });
 
                 var linkTaskName = "link" + subName;
                 project.getTasks().register(linkTaskName, LinkTask.class, (task) -> {
-                    for (var build : project.getRootProject().getGradle().getIncludedBuilds()) {
-                        task.dependsOn(build.task(":jar"));
+                    for (var jarTask : project.getTasksByName("jar", true)) {
+                        if (jarTask instanceof Jar) {
+                            task.getModulePath().add(((Jar) jarTask).getArchiveFile());
+                        }
                     }
-                    task.dependsOn(project.getRootProject().getTasksByName("jar", true));
+
+                    try {
+                        var runtimeClasspath = project.getConfigurations().getByName("runtimeClasspath");
+                        task.getRuntimeModules().addAll(runtimeClasspath.getElements());
+                        task.dependsOn(runtimeClasspath);
+                    } catch (UnknownConfigurationException e) {
+                        // ignored
+                    }
+
                     task.dependsOn(projectPath + ":" + downloadTaskName);
-                    task.setToDir(buildDir.resolve("images"));
-                    task.setUrl(env.getUrl());
-                    task.setOS(name);
+                    task.getToDir().set(buildDir.resolve("images"));
+                    task.getUrl().set(env.getUrl());
+                    task.getOS().set(name);
                     task.getLaunchers().set(env.getLaunchers());
                     task.getModules().set(env.getModules());
                 });
 
                 var launchersTaskName = "launchers" + subName;
                 project.getTasks().register(launchersTaskName, LaunchersTask.class, (task) -> {
                     task.getLaunchers().set(env.getLaunchers());
-                    task.setOptions(env.getOptions());
-                    task.setToDir(buildDir.resolve("launchers"));
-                    task.setOS(name);
+                    task.getOptions().set(env.getOptions());
+                    task.getToDir().set(buildDir.resolve("launchers"));
+                    task.getOS().set(name);
                 });
 
                 var zipTaskName = "bundleZip" + subName;
                 project.getTasks().register(zipTaskName, Zip.class, (task) -> {
                     task.dependsOn(projectPath + ":" + linkTaskName);
diff a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/LaunchersTask.java b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/LaunchersTask.java
--- a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/LaunchersTask.java
+++ b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/LaunchersTask.java
@@ -33,31 +33,36 @@
 import java.nio.file.*;
 import java.nio.file.attribute.PosixFilePermissions;
 import java.util.Comparator;
 
 public class LaunchersTask extends DefaultTask {
-    private Path toDir;
-    private String os;
+    private Property<Path> toDir;
+    private Property<String> os;
     private MapProperty<String, String> launchers;
     private ListProperty<String> options;
 
     @Inject
     public LaunchersTask(ObjectFactory factory) {
-        this.launchers = factory.mapProperty(String.class, String.class);
+        toDir = factory.property(Path.class);
+        os = factory.property(String.class);
+        launchers = factory.mapProperty(String.class, String.class);
         options = factory.listProperty(String.class);
     }
 
-    void setOptions(ListProperty<String> options) {
-        this.options.set(options);
+    @Input
+    ListProperty<String> getOptions() {
+        return options;
     }
 
-    void setToDir(Path toDir) {
-        this.toDir = toDir;
+    @OutputDirectory
+    Property<Path> getToDir() {
+        return toDir;
     }
 
-    void setOS(String os) {
-        this.os = os;
+    @Input
+    Property<String> getOS() {
+        return os;
     }
 
     @Input
     MapProperty<String, String> getLaunchers() {
         return launchers;
@@ -70,11 +75,11 @@
                 .forEach(File::delete);
     }
 
     @TaskAction
     void generate() throws IOException {
-        var dest = toDir.resolve(os);
+        var dest = toDir.get().resolve(os.get());
         if (Files.isDirectory(dest)) {
             clearDirectory(dest);
         }
         Files.createDirectories(dest);
         var optionString = String.join(" ", options.get());
diff a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/LinkTask.java b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/LinkTask.java
--- a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/LinkTask.java
+++ b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/LinkTask.java
@@ -28,54 +28,74 @@
 import org.gradle.api.artifacts.UnknownConfigurationException;
 import org.gradle.api.model.ObjectFactory;
 import org.gradle.api.provider.*;
 import org.gradle.api.tasks.*;
 import org.gradle.jvm.tasks.Jar;
+import org.gradle.api.file.*;
 
 import javax.inject.Inject;
 import java.io.*;
 import java.net.URI;
 import java.nio.file.*;
 import java.util.*;
 import java.util.stream.Collectors;
 
 public class LinkTask extends DefaultTask {
-    private Path toDir;
-    private String os;
-    private String url;
-    private MapProperty<String, String> launchers;
-    private ListProperty<String> modules;
+    private final Property<String> os;
+    private final Property<String> url;
+    private final Property<Path> toDir;
+    private final MapProperty<String, String> launchers;
+    private final ListProperty<String> modules;
+    private final SetProperty<RegularFile> modulePath;
+    private final SetProperty<FileSystemLocation> runtimeModules;
 
     @Inject
     public LinkTask(ObjectFactory factory) {
-        this.launchers = factory.mapProperty(String.class, String.class);
-        this.modules = factory.listProperty(String.class);
+        os = factory.property(String.class);
+        url = factory.property(String.class);
+        toDir = factory.property(Path.class);
+        launchers = factory.mapProperty(String.class, String.class);
+        modules = factory.listProperty(String.class);
+        modulePath = factory.setProperty(RegularFile.class);
+        runtimeModules = factory.setProperty(FileSystemLocation.class);
     }
 
-    void setToDir(Path toDir) {
-        this.toDir = toDir;
+    @OutputDirectory
+    Property<Path> getToDir() {
+        return toDir;
     }
 
-    void setOS(String os) {
-        this.os = os;
+    @Input
+    Property<String> getOS() {
+        return os;
     }
 
-    void setUrl(String url) {
-        this.url = url;
+    @Input
+    Property<String> getUrl() {
+        return url;
     }
 
-
     @Input
     MapProperty<String, String> getLaunchers() {
         return launchers;
     }
 
+    @InputFiles
+    SetProperty<RegularFile> getModulePath() {
+        return modulePath;
+    }
+
+    @InputFiles
+    SetProperty<FileSystemLocation> getRuntimeModules() {
+        return runtimeModules;
+    }
+
     private static void clearDirectory(Path directory) {
         try {
             Files.walk(directory)
                     .map(Path::toFile)
                     .sorted(Comparator.reverseOrder())
@@ -87,30 +107,19 @@
 
     @TaskAction
     void link() throws IOException {
         var project = getProject().getRootProject();
 
-        var jars = new ArrayList<String>();
-        for (var subProject : project.getSubprojects()) {
-            for (var task : subProject.getTasksByName("jar", false)) {
-                if (task instanceof Jar) {
-                    var jarTask = (Jar) task;
-                    jars.add(jarTask.getArchiveFile().get().getAsFile().toString());
-                }
-            }
-
-            try {
-                jars.addAll(subProject.getConfigurations()
-                                      .getByName("runtimeClasspath")
-                                      .getFiles()
-                                      .stream()
-                                      .map(File::toString)
-                                      .collect(Collectors.toList()));
-            } catch (UnknownConfigurationException ignored) {}
+        var modularJars = new ArrayList<String>();
+        for (var jar : modulePath.get()) {
+            modularJars.add(jar.getAsFile().toString());
+        }
+        for (var jar : runtimeModules.get()) {
+            modularJars.add(jar.getAsFile().toString());
         }
 
-        var filename = Path.of(URI.create(url).getPath()).getFileName().toString();
+        var filename = Path.of(URI.create(url.get()).getPath()).getFileName().toString();
         var dirname = filename.replace(".zip", "").replace(".tar.gz", "");
         var jdk = project.getRootDir().toPath().toAbsolutePath().resolve(".jdk").resolve(dirname);
         var dirs = Files.walk(jdk)
                         .filter(Files::isDirectory)
                         .filter(p -> p.getFileName().toString().equals("jmods"))
@@ -121,22 +130,22 @@
         }
         var jmodsDir = dirs.get(0).toAbsolutePath();
 
         var modulePath = new ArrayList<String>();
         modulePath.add(jmodsDir.toString());
-        modulePath.addAll(jars);
+        modulePath.addAll(modularJars);
 
         var uniqueModules = new HashSet<String>();
         for (var entry : launchers.get().values()) {
             var firstSlash = entry.indexOf('/');
             uniqueModules.add(entry.substring(0, firstSlash));
         }
         uniqueModules.addAll(modules.get());
         var allModules = new ArrayList<String>(uniqueModules);
 
-        Files.createDirectories(toDir);
-        var dest = toDir.resolve(os);
+        Files.createDirectories(toDir.get());
+        var dest = toDir.get().resolve(os.get());
         if (Files.exists(dest) && Files.isDirectory(dest)) {
             clearDirectory(dest);
         }
 
         Collections.sort(modulePath);
@@ -152,18 +161,18 @@
                                        "--vm", "server",
                                        "--output", dest.toString());
         });
 
         var currentOS = System.getProperty("os.name").toLowerCase().substring(0, 3);
-        if (currentOS.equals(os.substring(0, 3))) {
+        if (currentOS.equals(os.get().substring(0, 3))) {
             var ext = currentOS.startsWith("win") ? ".exe" : "";
             var javaLaunchers = Files.walk(dest)
                                      .filter(Files::isExecutable)
                                      .filter(p -> p.getFileName().toString().equals("java" + ext))
                                      .collect(Collectors.toList());
             if (javaLaunchers.size() != 1) {
-                throw new GradleException("Multiple or no java launchers generated for " + os + " image");
+                throw new GradleException("Multiple or no java launchers generated for " + os.get() + " image");
             }
             var java = javaLaunchers.get(0);
             project.exec((spec) -> {
                 spec.setCommandLine(java, "-Xshare:dump", "-version");
             });
diff a/buildSrc/module/src/main/java/org/openjdk/skara/gradle/module/ModulePlugin.java b/buildSrc/module/src/main/java/org/openjdk/skara/gradle/module/ModulePlugin.java
--- a/buildSrc/module/src/main/java/org/openjdk/skara/gradle/module/ModulePlugin.java
+++ b/buildSrc/module/src/main/java/org/openjdk/skara/gradle/module/ModulePlugin.java
@@ -26,10 +26,11 @@
 import org.gradle.api.Plugin;
 import org.gradle.api.Project;
 import org.gradle.api.GradleException;
 import org.gradle.api.Action;
 import org.gradle.api.DefaultTask;
+import org.gradle.api.Task;
 import org.gradle.api.tasks.compile.JavaCompile;
 import org.gradle.api.tasks.SourceSet;
 import org.gradle.api.tasks.testing.Test;
 import org.gradle.api.plugins.JavaPluginConvention;
 
@@ -46,88 +47,100 @@
 
         project.afterEvaluate(p -> {
             for (var task : project.getTasksByName("compileJava", false)) {
                 if (task instanceof JavaCompile) {
                     var compileJavaTask = (JavaCompile) task;
-                    compileJavaTask.doFirst(t -> {
-                        var classpath = compileJavaTask.getClasspath().getAsPath();
-                        compileJavaTask.getOptions().getCompilerArgs().addAll(List.of("--module-path", classpath));
-                        compileJavaTask.setClasspath(project.files());
+                    compileJavaTask.doFirst(new Action<Task>() {
+                        @Override
+                        public void execute(Task at) {
+                            var t = (JavaCompile) at;
+                            var classpath = compileJavaTask.getClasspath().getAsPath();
+                            compileJavaTask.getOptions().getCompilerArgs().addAll(List.of("--module-path", classpath));
+                            compileJavaTask.setClasspath(project.files());
+                        }
                     });
                 }
             }
 
             for (var task : project.getTasksByName("compileTestJava", false)) {
                 if (task instanceof JavaCompile) {
                     var compileTestJavaTask = (JavaCompile) task;
-                    compileTestJavaTask.doFirst(t -> {
-                        var maybeModuleName = extension.getName().get();
-                        if (maybeModuleName == null) {
-                            throw new GradleException("project " + p.getName() + " has not set ext.moduleName");
-                        }
-                        var moduleName = maybeModuleName.toString();
-                        var testSourceSet = project.getConvention().getPlugin(JavaPluginConvention.class).getSourceSets().getByName("test");
-                        var testSourceDirs = testSourceSet.getAllJava().getSrcDirs().stream().map(File::toString).collect(Collectors.joining(":"));
-                        var classpath = compileTestJavaTask.getClasspath().getAsPath();
+                    compileTestJavaTask.doFirst(new Action<Task>() {
+                        @Override
+                        public void execute(Task at) {
+                            var t = (JavaCompile) at;
+                            var maybeModuleName = extension.getName().get();
+                            if (maybeModuleName == null) {
+                                throw new GradleException("project " + p.getName() + " has not set ext.moduleName");
+                            }
+                            var moduleName = maybeModuleName.toString();
+                            var testSourceSet = project.getConvention().getPlugin(JavaPluginConvention.class).getSourceSets().getByName("test");
+                            var testSourceDirs = testSourceSet.getAllJava().getSrcDirs().stream().map(File::toString).collect(Collectors.joining(":"));
+                            var classpath = compileTestJavaTask.getClasspath().getAsPath();
 
-                        var opts = new ArrayList<String>(compileTestJavaTask.getOptions().getCompilerArgs());
-                        opts.addAll(List.of(
-                                "--module-path", classpath,
-                                "--patch-module", moduleName + "=" + testSourceDirs
-                        ));
+                            var opts = new ArrayList<String>(compileTestJavaTask.getOptions().getCompilerArgs());
+                            opts.addAll(List.of(
+                                    "--module-path", classpath,
+                                    "--patch-module", moduleName + "=" + testSourceDirs
+                            ));
 
-                        for (var module : extension.getRequires()) {
-                            opts.add("--add-modules");
-                            opts.add(module);
-                            opts.add("--add-reads");
-                            opts.add(moduleName + "=" + module);
-                        }
+                            for (var module : extension.getRequires()) {
+                                opts.add("--add-modules");
+                                opts.add(module);
+                                opts.add("--add-reads");
+                                opts.add(moduleName + "=" + module);
+                            }
 
-                        compileTestJavaTask.getOptions().setCompilerArgs(opts);
-                        compileTestJavaTask.setClasspath(project.files());
+                            compileTestJavaTask.getOptions().setCompilerArgs(opts);
+                            compileTestJavaTask.setClasspath(project.files());
+                        }
                     });
                 }
             }
 
             for (var task : project.getTasksByName("test", false)) {
                 if (task instanceof Test) {
                     var testTask = (Test) task;
-                    testTask.doFirst(t -> {
-                        var maybeModuleName = extension.getName().get();
-                        if (maybeModuleName == null) {
-                            throw new GradleException("project " + p.getName() + " has not set ext.moduleName");
-                        }
-                        var moduleName = maybeModuleName.toString();
-                        var testSourceSet = project.getConvention().getPlugin(JavaPluginConvention.class).getSourceSets().getByName("test");
-                        var outputDir = testSourceSet.getJava().getOutputDir().toString();
-                        var classpath = testTask.getClasspath().getAsPath();
+                    testTask.doFirst(new Action<Task>() {
+                        @Override
+                        public void execute(Task at) {
+                            var t = (Test) at;
+                            var maybeModuleName = extension.getName().get();
+                            if (maybeModuleName == null) {
+                                throw new GradleException("project " + p.getName() + " has not set ext.moduleName");
+                            }
+                            var moduleName = maybeModuleName.toString();
+                            var testSourceSet = project.getConvention().getPlugin(JavaPluginConvention.class).getSourceSets().getByName("test");
+                            var outputDir = testSourceSet.getJava().getOutputDir().toString();
+                            var classpath = testTask.getClasspath().getAsPath();
 
-                        var jvmArgs = new ArrayList<String>(testTask.getJvmArgs());
-                        jvmArgs.addAll(List.of(
-                                "-Djunit.jupiter.extensions.autodetection.enabled=true",
-                                "--module-path", classpath,
-                                "--add-modules", "ALL-MODULE-PATH",
-                                "--patch-module", moduleName + "=" + outputDir,
-                                "--illegal-access=deny"
-                        ));
+                            var jvmArgs = new ArrayList<String>(testTask.getJvmArgs());
+                            jvmArgs.addAll(List.of(
+                                    "-Djunit.jupiter.extensions.autodetection.enabled=true",
+                                    "--module-path", classpath,
+                                    "--add-modules", "ALL-MODULE-PATH",
+                                    "--patch-module", moduleName + "=" + outputDir,
+                                    "--illegal-access=deny"
+                            ));
 
-                        var opens = extension.getOpens();
-                        for (var pkg : opens.keySet()) {
-                            var modules = opens.get(pkg);
-                            for (var module : modules) {
-                                jvmArgs.add("--add-opens");
-                                jvmArgs.add(moduleName + "/" + pkg + "=" + module);
+                            var opens = extension.getOpens();
+                            for (var pkg : opens.keySet()) {
+                                var modules = opens.get(pkg);
+                                for (var module : modules) {
+                                    jvmArgs.add("--add-opens");
+                                    jvmArgs.add(moduleName + "/" + pkg + "=" + module);
+                                }
                             }
-                        }
 
-                        for (var module : extension.getRequires()) {
-                            jvmArgs.add("--add-reads");
-                            jvmArgs.add(moduleName + "=" + module);
-                        }
+                            for (var module : extension.getRequires()) {
+                                jvmArgs.add("--add-reads");
+                                jvmArgs.add(moduleName + "=" + module);
+                            }
 
-                        testTask.setJvmArgs(jvmArgs);
-                        testTask.setClasspath(project.files());
+                            testTask.setJvmArgs(jvmArgs);
+                            testTask.setClasspath(project.files());
+                        }
                     });
                 }
             }
         });
     }
