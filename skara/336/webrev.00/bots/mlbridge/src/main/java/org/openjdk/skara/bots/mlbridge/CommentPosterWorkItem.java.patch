diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
@@ -27,24 +27,28 @@
 import org.openjdk.skara.forge.PullRequest;
 
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.util.*;
+import java.util.function.Consumer;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
+import java.util.stream.Collectors;
 
 public class CommentPosterWorkItem implements WorkItem {
     private final PullRequest pr;
     private final List<Email> newMessages;
+    private final Consumer<RuntimeException> errorHandler;
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.mlbridge");
 
     private final String bridgedMailMarker = "<!-- Bridged id (%s) -->";
     private final Pattern bridgedMailId = Pattern.compile("^<!-- Bridged id \\(([=\\w]+)\\) -->");
 
-    CommentPosterWorkItem(PullRequest pr, List<Email> newMessages) {
+    CommentPosterWorkItem(PullRequest pr, List<Email> newMessages, Consumer<RuntimeException> errorHandler) {
         this.pr = pr;
         this.newMessages = newMessages;
+        this.errorHandler = errorHandler;
     }
 
     @Override
     public String toString() {
         return "CommentPosterWorkItem@" + pr.toString();
@@ -57,11 +61,18 @@
         }
         CommentPosterWorkItem otherItem = (CommentPosterWorkItem) other;
         if (!pr.equals(otherItem.pr)) {
             return true;
         }
-        return false;
+        var otherItemIds = otherItem.newMessages.stream()
+                                                .map(Email::id)
+                                                .collect(Collectors.toSet());
+        var overlap = newMessages.stream()
+                                 .map(Email::id)
+                                 .filter(otherItemIds::contains)
+                                 .findAny();
+        return overlap.isEmpty();
     }
 
     private void postNewMessage(Email email) {
         var marker = String.format(bridgedMailMarker,
                                  Base64.getEncoder().encodeToString(email.id().address().getBytes(StandardCharsets.UTF_8)));
@@ -99,6 +110,11 @@
 
             log.info("Bridging new message from " + message.author() + " to " + pr);
             postNewMessage(message);
         }
     }
+
+    @Override
+    public void handleRuntimeException(RuntimeException e) {
+        errorHandler.accept(e);
+    }
 }
