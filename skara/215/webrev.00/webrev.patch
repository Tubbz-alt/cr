diff a/.github/workflows/ci.yml b/.github/workflows/ci.yml
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -1,20 +1,27 @@
 name: Build and test
 
 on: [push]
 
 jobs:
-  build:
-    runs-on: ${{ matrix.os }}
-    strategy:
-      matrix:
-        os: [ubuntu-latest, macOS-latest]
-
+  linux:
+    runs-on: 'ubuntu-latest'
     steps:
     - uses: actions/checkout@v1
+    - name: Build and test
+      run: sh gradlew test --info --stacktrace
 
-    - name: Install mercurial (macOS)
-      if: contains(matrix.os, 'mac')
+  mac:
+    runs-on: 'macOS-latest'
+    steps:
+    - uses: actions/checkout@v1
+    - name: Install Mercurial
       run: brew install mercurial
+    - name: Build and test
+      run: sh gradlew test --info --stacktrace
 
-    - name: Build with Gradle
-      run: sh gradlew build
+  win:
+    runs-on: 'windows-latest'
+    steps:
+    - uses: actions/checkout@v1
+    - name: Build and test
+      run: gradlew.bat test --info --stacktrace
diff a/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java b/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java
--- a/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java
+++ b/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java
@@ -20,10 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bot;
 
+import org.junit.jupiter.api.condition.DisabledOnOs;
+import org.junit.jupiter.api.condition.OS;
 import org.openjdk.skara.json.JSON;
 
 import org.junit.jupiter.api.*;
 
 import java.nio.file.Path;
@@ -272,10 +274,11 @@
         Assertions.assertFalse(item6.hasRun);
         assertTrue(item7.hasRun);
     }
 
     @Test
+    @DisabledOnOs(OS.WINDOWS)
     void watchdogTrigger() throws TimeoutException {
         var countdownLatch = new CountDownLatch(1);
         var item = new TestBlockedWorkItem(countdownLatch);
         var bot = new TestBot(item);
         var runner = new BotRunner(config("{ \"runner\": { \"watchdog\": \"PT0.01S\" } }"), List.of(bot));
diff a/email/src/test/java/org/openjdk/skara/email/SMTPTests.java b/email/src/test/java/org/openjdk/skara/email/SMTPTests.java
--- a/email/src/test/java/org/openjdk/skara/email/SMTPTests.java
+++ b/email/src/test/java/org/openjdk/skara/email/SMTPTests.java
@@ -20,10 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.email;
 
+import org.junit.jupiter.api.condition.DisabledOnOs;
+import org.junit.jupiter.api.condition.OS;
 import org.openjdk.skara.test.SMTPServer;
 
 import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
@@ -67,10 +69,11 @@
             assertEquals(sentMail, email);
         }
     }
 
     @Test
+    @DisabledOnOs(OS.WINDOWS)
     void encoded() throws IOException {
         log.info("Hello");
         try (var server = new SMTPServer()) {
             var sender = EmailAddress.from("Señor Dévèlöper", "test@test.email");
             var recipient = EmailAddress.from("Dêst", "dest@dest.email");
diff a/gradlew.bat b/gradlew.bat
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -28,36 +28,36 @@
 
 echo Downloading JDK...
 mkdir %~dp0\.jdk\temp
 curl -L %JDK_WINDOWS_URL% -o %JDK_WINDOWS_DIR%.zip
 move %JDK_WINDOWS_DIR%.zip %~dp0\.jdk\
-for /f "tokens=*" %%i in ('@certutil -hashfile %~dp0/.jdk/%JDK_WINDOWS_DIR%.zip sha256 ^| find /v "hash of file" ^| find /v "CertUtil"') do set SHA256JDK=%%i
+for /f "tokens=*" %%i in ('@certutil -hashfile %~dp0/.jdk/%JDK_WINDOWS_DIR%.zip sha256 ^| %WINDIR%\System32\find /v "hash of file" ^| %WINDIR%\System32\find /v "CertUtil"') do set SHA256JDK=%%i
 if "%SHA256JDK%" == "%JDK_WINDOWS_SHA256%" (goto extractJdk)
 echo Invalid SHA256 for JDK detected (%SHA256JDK%)
 goto done
 
 :extractJdk
 echo Extracting JDK...
-tar -xf %~dp0/.jdk/%JDK_WINDOWS_DIR%.zip -C %~dp0/.jdk/temp
+%WINDIR%\System32\tar -xf %~dp0/.jdk/%JDK_WINDOWS_DIR%.zip -C %~dp0/.jdk/temp
 for /d %%i in (%~dp0\.jdk\temp\*) do move %%i %~dp0\.jdk\%JDK_WINDOWS_DIR%
 rmdir %~dp0\.jdk\temp
 
 :gradle
 if exist %~dp0\.gradle\%GRADLE_DIR% goto run
 
 echo Downloading Gradle...
 mkdir %~dp0\.gradle\temp
 curl -L %GRADLE_URL% -o %GRADLE_DIR%.zip
 move %GRADLE_DIR%.zip %~dp0\.gradle\
-for /f "tokens=*" %%i in ('@certutil -hashfile %~dp0/.gradle/%GRADLE_DIR%.zip sha256 ^| find /v "hash of file" ^| find /v "CertUtil"') do set SHA256GRADLE=%%i
+for /f "tokens=*" %%i in ('@certutil -hashfile %~dp0/.gradle/%GRADLE_DIR%.zip sha256 ^| %WINDIR%\System32\find /v "hash of file" ^| %WINDIR%\System32\find /v "CertUtil"') do set SHA256GRADLE=%%i
 if "%SHA256GRADLE%" == "%GRADLE_SHA256%" (goto extractGradle)
 echo Invalid SHA256 for Gradle detected (%SHA256GRADLE%)
 goto done
 
 :extractGradle
 echo Extracting Gradle...
-tar -xf %~dp0/.gradle/%GRADLE_DIR%.zip -C %~dp0/.gradle/temp
+%WINDIR%\System32\tar -xf %~dp0/.gradle/%GRADLE_DIR%.zip -C %~dp0/.gradle/temp
 for /d %%i in (%~dp0\.gradle\temp\*) do move %%i %~dp0\.gradle\%GRADLE_DIR%
 rmdir %~dp0\.gradle\temp
 
 :run
 set JAVA_HOME=%~dp0/.jdk/%JDK_WINDOWS_DIR%
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java
@@ -26,10 +26,11 @@
 import org.openjdk.skara.vcs.openjdk.*;
 import java.io.IOException;
 import java.nio.file.*;
 import java.nio.charset.StandardCharsets;
 import java.net.URI;
+import java.nio.file.attribute.PosixFilePermissions;
 import java.util.*;
 import java.util.stream.Collectors;
 import java.util.logging.Logger;
 
 public class GitToHgConverter implements Converter {
@@ -136,11 +137,13 @@
 
         if (toDump.size() > 0) {
             for (var file : gitRepo.files(to, toDump)) {
                 var hgPath = hgRoot.resolve(file.path());
                 gitRepo.dump(file, hgPath);
-                Files.setPosixFilePermissions(hgPath, file.type().permissions().orElseThrow());
+                if (hgPath.getFileSystem().supportedFileAttributeViews().contains("posix")) {
+                    Files.setPosixFilePermissions(hgPath, file.type().permissions().orElseThrow());
+                }
             }
         }
 
         if (toAdd.size() > 0) {
             hgRepo.add(toAdd);
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -1838,11 +1838,11 @@
             Files.writeString(readme, "Hello\n");
             upstream.add(readme);
             var head = upstream.commit("Added README", "duke", "duke@openjdk.org");
 
             var fork = Repository.init(dir.path().resolve("fork"), vcs);
-            fork.addRemote("upstream", "file://" + upstream.root());
+            fork.addRemote("upstream", upstream.root().toUri().toString());
             var refs = fork.remoteBranches("upstream");
             assertEquals(1, refs.size());
             var ref = refs.get(0);
             assertEquals(head, ref.hash());
             assertEquals(upstream.defaultBranch().name(), ref.name());
