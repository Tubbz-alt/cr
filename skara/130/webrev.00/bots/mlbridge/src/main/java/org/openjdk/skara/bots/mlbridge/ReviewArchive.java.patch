diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -203,17 +203,15 @@
 
     void addFull(URI webrev) {
         var body = ArchiveMessages.composeRebaseComment(prInstance, webrev);
         var id = getMessageId(prInstance.headHash());
         var parent = topEmail();
-        var email = Email.create(latestHeadSubject(), body)
+        var email = Email.reply(parent, latestHeadSubject(), body)
                          .sender(sender)
                          .author(getAuthorAddress(prInstance.pr().getAuthor()))
                          .recipient(parent.author())
                          .id(id)
-                         .header("In-Reply-To", parent.id().toString())
-                         .header("References", parent.id().toString())
                          .header("PR-Head-Hash", prInstance.headHash().hex())
                          .header("PR-Base-Hash", prInstance.baseHash().hex())
                          .header("PR-Sequence", Integer.toString(existing.size() + generated.size()))
                          .build();
         generated.add(email);
@@ -222,17 +220,15 @@
 
     void addIncremental(URI fullWebrev, URI incrementalWebrev) {
         var body = ArchiveMessages.composeIncrementalComment(latestHead(), prInstance, fullWebrev, incrementalWebrev);
         var id = getMessageId(prInstance.headHash());
         var parent = topEmail();
-        var email = Email.create(latestHeadSubject(), body)
+        var email = Email.reply(parent, latestHeadSubject(), body)
                          .sender(sender)
                          .author(getAuthorAddress(prInstance.pr().getAuthor()))
                          .recipient(parent.author())
                          .id(id)
-                         .header("In-Reply-To", parent.id().toString())
-                         .header("References", parent.id().toString())
                          .header("PR-Head-Hash", prInstance.headHash().hex())
                          .header("PR-Base-Hash", prInstance.baseHash().hex())
                          .header("PR-Sequence", Integer.toString(existing.size() + generated.size()))
                          .build();
         generated.add(email);
@@ -261,14 +257,10 @@
 
         return Optional.empty();
     }
 
     private void addReplyCommon(Email parent, HostUserDetails author, String subject, String body, EmailAddress id) {
-        var references = parent.id().toString();
-        if (parent.hasHeader("References")) {
-            references = parent.headerValue("References") + " " + references;
-        }
         if (!subject.startsWith("Re: ")) {
             subject = "Re: " + subject;
         }
 
         // Collapse self-replies and replies-to-same that have been created in this run
@@ -292,17 +284,15 @@
                              .build();
             generated.add(email);
             generatedIds.put(getStableMessageId(id), email);
         } else {
             var reply = ArchiveMessages.composeReply(parent, body, prInstance);
-            var email = Email.create(subject, reply)
+            var email = Email.reply(parent, subject, reply)
                              .sender(sender)
                              .author(getAuthorAddress(author))
                              .recipient(parent.author())
                              .id(id)
-                             .header("In-Reply-To", parent.id().toString())
-                             .header("References", references)
                              .header("PR-Sequence", Integer.toString(existing.size() + generated.size()))
                              .build();
             generated.add(email);
             generatedIds.put(getStableMessageId(id), email);
         }
