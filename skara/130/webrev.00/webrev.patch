diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -203,17 +203,15 @@
 
     void addFull(URI webrev) {
         var body = ArchiveMessages.composeRebaseComment(prInstance, webrev);
         var id = getMessageId(prInstance.headHash());
         var parent = topEmail();
-        var email = Email.create(latestHeadSubject(), body)
+        var email = Email.reply(parent, latestHeadSubject(), body)
                          .sender(sender)
                          .author(getAuthorAddress(prInstance.pr().getAuthor()))
                          .recipient(parent.author())
                          .id(id)
-                         .header("In-Reply-To", parent.id().toString())
-                         .header("References", parent.id().toString())
                          .header("PR-Head-Hash", prInstance.headHash().hex())
                          .header("PR-Base-Hash", prInstance.baseHash().hex())
                          .header("PR-Sequence", Integer.toString(existing.size() + generated.size()))
                          .build();
         generated.add(email);
@@ -222,17 +220,15 @@
 
     void addIncremental(URI fullWebrev, URI incrementalWebrev) {
         var body = ArchiveMessages.composeIncrementalComment(latestHead(), prInstance, fullWebrev, incrementalWebrev);
         var id = getMessageId(prInstance.headHash());
         var parent = topEmail();
-        var email = Email.create(latestHeadSubject(), body)
+        var email = Email.reply(parent, latestHeadSubject(), body)
                          .sender(sender)
                          .author(getAuthorAddress(prInstance.pr().getAuthor()))
                          .recipient(parent.author())
                          .id(id)
-                         .header("In-Reply-To", parent.id().toString())
-                         .header("References", parent.id().toString())
                          .header("PR-Head-Hash", prInstance.headHash().hex())
                          .header("PR-Base-Hash", prInstance.baseHash().hex())
                          .header("PR-Sequence", Integer.toString(existing.size() + generated.size()))
                          .build();
         generated.add(email);
@@ -261,14 +257,10 @@
 
         return Optional.empty();
     }
 
     private void addReplyCommon(Email parent, HostUserDetails author, String subject, String body, EmailAddress id) {
-        var references = parent.id().toString();
-        if (parent.hasHeader("References")) {
-            references = parent.headerValue("References") + " " + references;
-        }
         if (!subject.startsWith("Re: ")) {
             subject = "Re: " + subject;
         }
 
         // Collapse self-replies and replies-to-same that have been created in this run
@@ -292,17 +284,15 @@
                              .build();
             generated.add(email);
             generatedIds.put(getStableMessageId(id), email);
         } else {
             var reply = ArchiveMessages.composeReply(parent, body, prInstance);
-            var email = Email.create(subject, reply)
+            var email = Email.reply(parent, subject, reply)
                              .sender(sender)
                              .author(getAuthorAddress(author))
                              .recipient(parent.author())
                              .id(id)
-                             .header("In-Reply-To", parent.id().toString())
-                             .header("References", references)
                              .header("PR-Sequence", Integer.toString(existing.size() + generated.size()))
                              .build();
             generated.add(email);
             generatedIds.put(getStableMessageId(id), email);
         }
diff a/bots/notify/build.gradle b/bots/notify/build.gradle
--- a/bots/notify/build.gradle
+++ b/bots/notify/build.gradle
@@ -37,8 +37,9 @@
     implementation project(':census')
     implementation project(':vcs')
     implementation project(':jcheck')
     implementation project(':email')
     implementation project(':storage')
+    implementation project(':mailinglist')
 
     testImplementation project(':test')
 }
diff a/bots/notify/src/main/java/module-info.java b/bots/notify/src/main/java/module-info.java
--- a/bots/notify/src/main/java/module-info.java
+++ b/bots/notify/src/main/java/module-info.java
@@ -24,9 +24,10 @@
     requires org.openjdk.skara.bot;
     requires org.openjdk.skara.vcs;
     requires org.openjdk.skara.jcheck;
     requires org.openjdk.skara.email;
     requires org.openjdk.skara.storage;
+    requires org.openjdk.skara.mailinglist;
     requires java.logging;
 
     provides org.openjdk.skara.bot.BotFactory with org.openjdk.skara.bots.notify.JNotifyBotFactory;
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JNotifyBotFactory.java
@@ -22,11 +22,13 @@
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.bot.*;
 import org.openjdk.skara.email.EmailAddress;
+import org.openjdk.skara.host.network.URIBuilder;
 import org.openjdk.skara.json.JSONValue;
+import org.openjdk.skara.mailinglist.MailingListServerFactory;
 import org.openjdk.skara.storage.StorageBuilder;
 import org.openjdk.skara.vcs.*;
 
 import java.nio.file.Path;
 import java.util.*;
@@ -55,23 +57,47 @@
         for (var repo : specific.get("repositories").fields()) {
             var repoName = repo.name();
             var branches = repo.value().get("branches").stream()
                                .map(JSONValue::asString)
                                .collect(Collectors.toList());
-            var build = repo.value().get("build").asString();
-            var version = repo.value().get("version").asString();
 
             var updaters = new ArrayList<UpdateConsumer>();
-            if (repo.value().contains("jsonfolder")) {
-                updaters.add(new JsonUpdater(Path.of(repo.value().get("jsonfolder").asString()), version, build));
+            if (repo.value().contains("json")) {
+                var folder = repo.value().get("folder").asString();
+                var build = repo.value().get("build").asString();
+                var version = repo.value().get("version").asString();
+                updaters.add(new JsonUpdater(Path.of(folder), version, build));
             }
-            if (repo.value().contains("mailinglist")) {
-                var mailcfg = repo.value().get("mailinglist").asObject();
-                var senderName = mailcfg.get("name").asString();
-                var senderMail = mailcfg.get("email").asString();
+            if (repo.value().contains("mailinglists")) {
+                var email = specific.get("email").asObject();
+                var smtp = email.get("smtp").asString();
+                var archive = URIBuilder.base(email.get("archive").asString()).build();
+                var senderName = email.get("name").asString();
+                var senderMail = email.get("address").asString();
                 var sender = EmailAddress.from(senderName, senderMail);
-                updaters.add(new MailingListUpdater(mailcfg.get("smtp").asString(), EmailAddress.parse(mailcfg.get("recipient").asString()), sender, branches.size() > 1));
+                var listServer = MailingListServerFactory.createMailmanServer(archive, smtp);
+
+                for (var mailinglist : repo.value().get("mailinglists").asArray()) {
+                    var recipient = mailinglist.get("recipient").asString();
+                    var recipientAddress = EmailAddress.parse(recipient);
+
+                    var mode = MailingListUpdater.Mode.ALL;
+                    if (mailinglist.contains("mode")) {
+                        switch (mailinglist.get("mode").asString()) {
+                            case "pr":
+                                mode = MailingListUpdater.Mode.PR;
+                                break;
+                            case "pr-only":
+                                mode = MailingListUpdater.Mode.PR_ONLY;
+                                break;
+                            default:
+                                throw new RuntimeException("Unknown mode");
+                        }
+                    }
+
+                    updaters.add(new MailingListUpdater(listServer.getList(recipient), recipientAddress, sender, branches.size() > 1, mode));
+                }
             }
 
             if (updaters.isEmpty()) {
                 log.warning("No consumers configured for notify bot repository: " + repoName);
                 continue;
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -22,28 +22,42 @@
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.email.*;
 import org.openjdk.skara.host.HostedRepository;
+import org.openjdk.skara.mailinglist.*;
 import org.openjdk.skara.vcs.*;
-import org.openjdk.skara.vcs.openjdk.*;
+import org.openjdk.skara.vcs.openjdk.OpenJDKTag;
 
 import java.io.*;
+import java.time.Duration;
 import java.time.format.DateTimeFormatter;
 import java.util.*;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+import java.util.logging.Logger;
 
 public class MailingListUpdater implements UpdateConsumer {
-    private final String host;
+    private final MailingList list;
     private final EmailAddress recipient;
     private final EmailAddress sender;
     private final boolean includeBranch;
+    private final Mode mode;
+    private final Logger log = Logger.getLogger("org.openjdk.skara.bots.notify");
 
-    MailingListUpdater(String host, EmailAddress recipient, EmailAddress sender, boolean includeBranch) {
-        this.host = host;
+    enum Mode {
+        ALL,
+        PR,
+        PR_ONLY
+    }
+
+    MailingListUpdater(MailingList list, EmailAddress recipient, EmailAddress sender, boolean includeBranch, Mode mode) {
+        this.list = list;
         this.recipient = recipient;
         this.sender = sender;
         this.includeBranch = includeBranch;
+        this.mode = mode;
     }
 
     private String patchToText(Patch patch) {
         if (patch.status().isAdded()) {
             return "+ " + patch.target().path().orElseThrow();
@@ -97,31 +111,86 @@
             subject.append(commits.get(0).message().get(0));
         }
         return subject.toString();
     }
 
-    @Override
-    public void handleCommits(HostedRepository repository, List<Commit> commits, Branch branch) {
+    private List<Commit> filterAndSendPrCommits(HostedRepository repository, List<Commit> commits) {
+        var ret = new ArrayList<Commit>();
+
+        var rfrs = list.conversations(Duration.ofDays(365)).stream()
+                       .map(Conversation::first)
+                       .filter(email -> email.subject().startsWith("RFR: "))
+                       .collect(Collectors.toList());
+
+        for (var commit : commits) {
+            var candidates = repository.findPullRequestsWithComment(null, "Pushed as commit " + commit.hash() + ".");
+            if (candidates.size() != 1) {
+                log.warning("Commit " + commit.hash() + " matches " + candidates.size() + " pull requests - expected 1");
+                ret.add(commit);
+                continue;
+            }
+
+            var candidate = candidates.get(0);
+            var prLink = candidate.getWebUrl();
+            var prLinkPattern = Pattern.compile("^" + Pattern.quote(prLink.toString()), Pattern.MULTILINE);
+
+            var rfrCandidates = rfrs.stream()
+                                    .filter(email -> prLinkPattern.matcher(email.body()).find())
+                                    .collect(Collectors.toList());
+            if (rfrCandidates.size() != 1) {
+                log.warning("Pull request " + prLink + " found in " + rfrCandidates.size() + " RFR threads - expected 1");
+                ret.add(commit);
+                continue;
+            }
+            var rfr = rfrCandidates.get(0);
+            var body = commitToText(repository, commit);
+            var email = Email.reply(rfr, "Re: [Integrated] " + rfr.subject(), body)
+                             .author(sender)
+                             .recipient(recipient)
+                             .build();
+            list.post(email);
+        }
+
+        return ret;
+    }
+
+    private void sendCombinedCommits(HostedRepository repository, List<Commit> commits, Branch branch) {
+        if (commits.size() == 0) {
+            return;
+        }
+
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
-        var subject = commitsToSubject(repository, commits, branch);
-
         for (var commit : commits) {
             printer.println(commitToText(repository, commit));
         }
 
+        var subject = commitsToSubject(repository, commits, branch);
         var email = Email.create(sender, subject, writer.toString())
                          .recipient(recipient)
                          .build();
 
-        try {
-            SMTP.send(host, recipient, email);
-        } catch (IOException e) {
-            throw new UncheckedIOException(e);
+        list.post(email);
+    }
+
+    @Override
+    public void handleCommits(HostedRepository repository, List<Commit> commits, Branch branch) {
+        switch (mode) {
+            case PR_ONLY:
+                var remaining = filterAndSendPrCommits(repository, commits);
+                if (remaining.size() > 0) {
+                    throw new RuntimeException("Failed to match a commit with a PR!");
+                }
+                break;
+            case PR:
+                commits = filterAndSendPrCommits(repository, commits);
+                // fall-through
+            case ALL:
+                sendCombinedCommits(repository, commits, branch);
+                break;
         }
-        System.out.print(writer.toString());
     }
 
     @Override
     public void handleTagCommits(HostedRepository repository, List<Commit> commits, OpenJDKTag tag) {
 
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -20,24 +20,25 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.notify;
 
-import org.openjdk.skara.email.EmailAddress;
+import org.openjdk.skara.email.*;
 import org.openjdk.skara.host.HostedRepository;
 import org.openjdk.skara.json.*;
+import org.openjdk.skara.mailinglist.MailingListServerFactory;
 import org.openjdk.skara.storage.StorageBuilder;
 import org.openjdk.skara.test.*;
 import org.openjdk.skara.vcs.Tag;
 
 import org.junit.jupiter.api.*;
 
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
 import java.time.Duration;
-import java.util.List;
+import java.util.*;
 import java.util.stream.Collectors;
 
 import static org.junit.jupiter.api.Assertions.*;
 
 class UpdaterTests {
@@ -146,39 +147,44 @@
         }
     }
 
     @Test
     void testMailingList(TestInfo testInfo) throws IOException {
-        try (var smtpServer = new SMTPServer();
+        try (var listServer = new TestMailmanServer();
              var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var repo = credentials.getHostedRepository();
             var repoFolder = tempFolder.path().resolve("repo");
             var localRepo = CheckableRepository.init(repoFolder, repo.getRepositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
             credentials.commitLock(localRepo);
             localRepo.pushAll(repo.getUrl());
 
+            var listAddress = EmailAddress.parse(listServer.createList("test"));
+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP());
+            var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var recipient = EmailAddress.from("list", "list@list.list");
-            var updater = new MailingListUpdater(smtpServer.address(), recipient, sender, false);
+            var updater = new MailingListUpdater(mailmanList, listAddress, sender, false, MailingListUpdater.Mode.ALL);
             var notifyBot = new JNotifyBot(repo, storageFolder, List.of("master"), tagStorage, branchStorage, List.of(updater));
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
-            assertThrows(RuntimeException.class, () -> smtpServer.receive(Duration.ofMillis(1)));
+            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
             localRepo.push(editHash, repo.getUrl(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
-            var email = smtpServer.receive(Duration.ofSeconds(10));
+            listServer.processIncoming();
+
+            var conversations = mailmanList.conversations(Duration.ofDays(1));
+            var email = conversations.get(0).first();
             assertEquals(email.sender(), sender);
-            assertEquals(email.recipients(), List.of(recipient));
+            assertEquals(email.recipients(), List.of(listAddress));
             assertTrue(email.subject().contains(": 23456789: More fixes"));
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash.abbreviate()));
             assertTrue(email.body().contains("23456789: More fixes"));
             assertFalse(email.body().contains("Committer"));
@@ -186,42 +192,47 @@
         }
     }
 
     @Test
     void testMailingListMultiple(TestInfo testInfo) throws IOException {
-        try (var smtpServer = new SMTPServer();
+        try (var listServer = new TestMailmanServer();
              var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var repo = credentials.getHostedRepository();
             var repoFolder = tempFolder.path().resolve("repo");
             var localRepo = CheckableRepository.init(repoFolder, repo.getRepositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
             credentials.commitLock(localRepo);
             localRepo.pushAll(repo.getUrl());
 
+            var listAddress = EmailAddress.parse(listServer.createList("test"));
+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP());
+            var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var recipient = EmailAddress.from("list", "list@list.list");
-            var updater = new MailingListUpdater(smtpServer.address(), recipient, sender, false);
+            var updater = new MailingListUpdater(mailmanList, listAddress, sender, false, MailingListUpdater.Mode.ALL);
             var notifyBot = new JNotifyBot(repo, storageFolder, List.of("master"), tagStorage, branchStorage, List.of(updater));
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
-            assertThrows(RuntimeException.class, () -> smtpServer.receive(Duration.ofMillis(1)));
+            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
             var editHash1 = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
             localRepo.push(editHash1, repo.getUrl(), "master");
             var editHash2 = CheckableRepository.appendAndCommit(localRepo, "Yet another line", "3456789A: Even more fixes");
             localRepo.push(editHash2, repo.getUrl(), "master");
 
             TestBotRunner.runPeriodicItems(notifyBot);
-            var email = smtpServer.receive(Duration.ofSeconds(10));
+            listServer.processIncoming();
+
+            var conversations = mailmanList.conversations(Duration.ofDays(1));
+            var email = conversations.get(0).first();
             assertEquals(email.sender(), sender);
-            assertEquals(email.recipients(), List.of(recipient));
+            assertEquals(email.recipients(), List.of(listAddress));
             assertTrue(email.subject().contains(": 2 new changesets"));
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash1.abbreviate()));
             assertTrue(email.body().contains("23456789: More fixes"));
             assertTrue(email.body().contains("Changeset: " + editHash2.abbreviate()));
@@ -230,84 +241,94 @@
         }
     }
 
     @Test
     void testMailingListSponsored(TestInfo testInfo) throws IOException {
-        try (var smtpServer = new SMTPServer();
+        try (var listServer = new TestMailmanServer();
              var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var repo = credentials.getHostedRepository();
             var repoFolder = tempFolder.path().resolve("repo");
             var localRepo = CheckableRepository.init(repoFolder, repo.getRepositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
             credentials.commitLock(localRepo);
             localRepo.pushAll(repo.getUrl());
 
+            var listAddress = EmailAddress.parse(listServer.createList("test"));
+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP());
+            var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var recipient = EmailAddress.from("list", "list@list.list");
-            var updater = new MailingListUpdater(smtpServer.address(), recipient, sender, false);
+            var updater = new MailingListUpdater(mailmanList, listAddress, sender, false, MailingListUpdater.Mode.ALL);
             var notifyBot = new JNotifyBot(repo, storageFolder, List.of("master"), tagStorage, branchStorage, List.of(updater));
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
-            assertThrows(RuntimeException.class, () -> smtpServer.receive(Duration.ofMillis(1)));
+            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes",
                                                                "author", "author@test.test",
                                                                "committer", "committer@test.test");
             localRepo.push(editHash, repo.getUrl(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
-            var email = smtpServer.receive(Duration.ofSeconds(10));
+            listServer.processIncoming();
+
+            var conversations = mailmanList.conversations(Duration.ofDays(1));
+            var email = conversations.get(0).first();
             assertEquals(email.sender(), sender);
-            assertEquals(email.recipients(), List.of(recipient));
+            assertEquals(email.recipients(), List.of(listAddress));
             assertTrue(email.body().contains("Changeset: " + editHash.abbreviate()));
             assertTrue(email.body().contains("23456789: More fixes"));
             assertTrue(email.body().contains("Author:    author <author@test.test>"));
             assertTrue(email.body().contains("Committer: committer <committer@test.test>"));
             assertFalse(email.body().contains(masterHash.abbreviate()));
         }
     }
 
     @Test
     void testMailingListMultipleBranches(TestInfo testInfo) throws IOException {
-        try (var smtpServer = new SMTPServer();
+        try (var listServer = new TestMailmanServer();
              var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var repo = credentials.getHostedRepository();
             var repoFolder = tempFolder.path().resolve("repo");
             var localRepo = CheckableRepository.init(repoFolder, repo.getRepositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
             credentials.commitLock(localRepo);
             var branch = localRepo.branch(masterHash, "another");
             localRepo.pushAll(repo.getUrl());
 
+            var listAddress = EmailAddress.parse(listServer.createList("test"));
+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP());
+            var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var recipient = EmailAddress.from("list", "list@list.list");
-            var updater = new MailingListUpdater(smtpServer.address(), recipient, sender, true);
+            var updater = new MailingListUpdater(mailmanList, listAddress, sender, true, MailingListUpdater.Mode.ALL);
             var notifyBot = new JNotifyBot(repo, storageFolder, List.of("master", "another"), tagStorage, branchStorage, List.of(updater));
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
-            assertThrows(RuntimeException.class, () -> smtpServer.receive(Duration.ofMillis(1)));
+            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
             var editHash1 = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
             localRepo.push(editHash1, repo.getUrl(), "master");
             var editHash2 = CheckableRepository.appendAndCommit(localRepo, "Yet another line", "3456789A: Even more fixes");
             localRepo.push(editHash2, repo.getUrl(), "master");
 
             TestBotRunner.runPeriodicItems(notifyBot);
-            var email = smtpServer.receive(Duration.ofSeconds(10));
+            listServer.processIncoming();
+
+            var conversations = mailmanList.conversations(Duration.ofDays(1));
+            var email = conversations.get(0).first();
             assertEquals(email.sender(), sender);
-            assertEquals(email.recipients(), List.of(recipient));
+            assertEquals(email.recipients(), List.of(listAddress));
             assertFalse(email.subject().contains("another"));
             assertTrue(email.subject().contains(": master: 2 new changesets"));
             assertTrue(email.body().contains("Changeset: " + editHash1.abbreviate()));
             assertTrue(email.body().contains("23456789: More fixes"));
             assertTrue(email.body().contains("Changeset: " + editHash2.abbreviate()));
@@ -318,17 +339,175 @@
             localRepo.checkout(branch, true);
             var editHash3 = CheckableRepository.appendAndCommit(localRepo, "Another branch", "456789AB: Yet more fixes");
             localRepo.push(editHash3, repo.getUrl(), "another");
 
             TestBotRunner.runPeriodicItems(notifyBot);
-            email = smtpServer.receive(Duration.ofSeconds(10));
+            listServer.processIncoming();
+
+            conversations = mailmanList.conversations(Duration.ofDays(1));
+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));
+            email = conversations.get(0).first();
             assertEquals(email.sender(), sender);
-            assertEquals(email.recipients(), List.of(recipient));
+            assertEquals(email.recipients(), List.of(listAddress));
             assertTrue(email.subject().contains(": another: 456789AB: Yet more fixes"));
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash3.abbreviate()));
             assertTrue(email.body().contains("456789AB: Yet more fixes"));
             assertFalse(email.body().contains("Changeset: " + editHash2.abbreviate()));
+
+    @Test
+    void testMailingListPROnly(TestInfo testInfo) throws IOException {
+        try (var listServer = new TestMailmanServer();
+             var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.getRepositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.getUrl());
+
+            var listAddress = EmailAddress.parse(listServer.createList("test"));
+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP());
+            var mailmanList = mailmanServer.getList(listAddress.address());
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var sender = EmailAddress.from("duke", "duke@duke.duke");
+            var updater = new MailingListUpdater(mailmanList, listAddress, sender, false, MailingListUpdater.Mode.PR_ONLY);
+            var notifyBot = new JNotifyBot(repo, storageFolder, List.of("master"), tagStorage, branchStorage, List.of(updater));
+
+            // No mail should be sent on the first run as there is no history
+            TestBotRunner.runPeriodicItems(notifyBot);
+            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
+
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
+            localRepo.push(editHash, repo.getUrl(), "edit");
+            var pr = credentials.createPullRequest(repo, "master", "edit", "RFR: My PR");
+
+            // Create a potentially conflicting one
+            var otherHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
+            localRepo.push(otherHash, repo.getUrl(), "other");
+            var otherPr = credentials.createPullRequest(repo, "master", "other", "RFR: My other PR");
+
+            // PR hasn't been integrated yet, so there should be no mail
+            TestBotRunner.runPeriodicItems(notifyBot);
+            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
+
+            // Simulate an RFR email
+            var rfr = Email.create(sender, "RFR: My PR", "PR:\n" + pr.getWebUrl().toString())
+                    .recipient(listAddress)
+                    .build();
+            mailmanList.post(rfr);
+            listServer.processIncoming();
+
+            // And an integration
+            pr.addComment("Pushed as commit " + editHash.hex() + ".");
+            localRepo.push(editHash, repo.getUrl(), "master");
+            TestBotRunner.runPeriodicItems(notifyBot);
+            listServer.processIncoming();
+
+            var conversations = mailmanList.conversations(Duration.ofDays(1));
+            assertEquals(1, conversations.size());
+            var first = conversations.get(0).first();
+            var email = conversations.get(0).replies(first).get(0);
+            assertEquals(email.sender(), sender);
+            assertEquals(email.recipients(), List.of(listAddress));
+            assertEquals("Re: [Integrated] RFR: My PR", email.subject());
+            assertFalse(email.subject().contains("master"));
+            assertTrue(email.body().contains("Changeset: " + editHash.abbreviate()));
+            assertTrue(email.body().contains("23456789: More fixes"));
+            assertFalse(email.body().contains("Committer"));
+            assertFalse(email.body().contains(masterHash.abbreviate()));
+
+            // Now push the other one without a matching PR - PR_ONLY should make us throw an exception
+            localRepo.push(otherHash, repo.getUrl(), "master");
+            assertThrows(RuntimeException.class, () -> TestBotRunner.runPeriodicItems(notifyBot));
+        }
+    }
+
+    @Test
+    void testMailingListPR(TestInfo testInfo) throws IOException {
+        try (var listServer = new TestMailmanServer();
+             var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.getRepositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.getUrl());
+
+            var listAddress = EmailAddress.parse(listServer.createList("test"));
+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP());
+            var mailmanList = mailmanServer.getList(listAddress.address());
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var sender = EmailAddress.from("duke", "duke@duke.duke");
+            var updater = new MailingListUpdater(mailmanList, listAddress, sender, false, MailingListUpdater.Mode.PR);
+            var notifyBot = new JNotifyBot(repo, storageFolder, List.of("master"), tagStorage, branchStorage, List.of(updater));
+
+            // No mail should be sent on the first run as there is no history
+            TestBotRunner.runPeriodicItems(notifyBot);
+            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
+
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
+            localRepo.push(editHash, repo.getUrl(), "edit");
+            var pr = credentials.createPullRequest(repo, "master", "edit", "RFR: My PR");
+
+            // Create a potentially conflicting one
+            var otherHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
+            localRepo.push(otherHash, repo.getUrl(), "other");
+            var otherPr = credentials.createPullRequest(repo, "master", "other", "RFR: My other PR");
+
+            // PR hasn't been integrated yet, so there should be no mail
+            TestBotRunner.runPeriodicItems(notifyBot);
+            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
+
+            // Simulate an RFR email
+            var rfr = Email.create(sender, "RFR: My PR", "PR:\n" + pr.getWebUrl().toString())
+                           .recipient(listAddress)
+                           .build();
+            mailmanList.post(rfr);
+            listServer.processIncoming();
+
+            // And an integration
+            pr.addComment("Pushed as commit " + editHash.hex() + ".");
+            localRepo.push(editHash, repo.getUrl(), "master");
+
+            // Push the other one without a matching PR
+            localRepo.push(otherHash, repo.getUrl(), "master");
+
+            TestBotRunner.runPeriodicItems(notifyBot);
+            listServer.processIncoming();
+            listServer.processIncoming();
+
+            var conversations = mailmanList.conversations(Duration.ofDays(1));
+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));
+            assertEquals(2, conversations.size());
+
+            var prConversation = conversations.get(0);
+            var pushConverstaion = conversations.get(1);
+
+            var prEmail = prConversation.replies(prConversation.first()).get(0);
+            assertEquals(prEmail.sender(), sender);
+            assertEquals(prEmail.recipients(), List.of(listAddress));
+            assertEquals("Re: [Integrated] RFR: My PR", prEmail.subject());
+            assertFalse(prEmail.subject().contains("master"));
+            assertTrue(prEmail.body().contains("Changeset: " + editHash.abbreviate()));
+            assertTrue(prEmail.body().contains("23456789: More fixes"));
+            assertFalse(prEmail.body().contains("Committer"));
+            assertFalse(prEmail.body().contains(masterHash.abbreviate()));
+
+            var pushEmail = pushConverstaion.first();
+            assertEquals(pushEmail.sender(), sender);
+            assertEquals(pushEmail.recipients(), List.of(listAddress));
+            assertTrue(pushEmail.subject().contains("23456789: More fixes"));
+        }
+    }
 }
diff a/email/src/main/java/org/openjdk/skara/email/Email.java b/email/src/main/java/org/openjdk/skara/email/Email.java
--- a/email/src/main/java/org/openjdk/skara/email/Email.java
+++ b/email/src/main/java/org/openjdk/skara/email/Email.java
@@ -130,10 +130,21 @@
                 .id(email.id)
                 .date(email.date)
                 .headers(email.headers);
     }
 
+    public static EmailBuilder reply(Email parent, String subject, String body) {
+        var references = parent.id().toString();
+        if (parent.hasHeader("References")) {
+            references = parent.headerValue("References") + " " + references;
+        }
+
+        return new EmailBuilder(subject, body)
+                .header("In-Reply-To", parent.id().toString())
+                .header("References", references);
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
diff a/host/src/main/java/org/openjdk/skara/host/HostedRepository.java b/host/src/main/java/org/openjdk/skara/host/HostedRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/HostedRepository.java
+++ b/host/src/main/java/org/openjdk/skara/host/HostedRepository.java
@@ -35,10 +35,11 @@
                                   String sourceRef,
                                   String title,
                                   List<String> body);
     PullRequest getPullRequest(String id);
     List<PullRequest> getPullRequests();
+    List<PullRequest> findPullRequestsWithComment(String author, String body);
     Optional<PullRequest> parsePullRequestUrl(String url);
     String getName();
     Optional<HostedRepository> getParent();
     URI getUrl();
     URI getWebUrl();
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubHost.java
@@ -145,10 +145,17 @@
         var project = request.get("repos/" + name)
                              .execute();
         return project.asObject();
     }
 
+    JSONObject runSearch(String query) {
+        var result = request.get("search/issues")
+                            .param("q", query)
+                            .execute();
+        return result.asObject();
+    }
+
     @Override
     public HostedRepository getRepository(String name) {
         return new GitHubRepository(this, name);
     }
 
diff a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
+++ b/host/src/main/java/org/openjdk/skara/host/github/GitHubRepository.java
@@ -106,10 +106,22 @@
         return request.get("pulls").execute().asArray().stream()
                       .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))
                       .collect(Collectors.toList());
     }
 
+    @Override
+    public List<PullRequest> findPullRequestsWithComment(String author, String body) {
+        var query = "\"" + body + "\" in:comments type:pr repo:" + repository;
+        if (author != null) {
+            query += " commenter:" + author;
+        }
+        var result = gitHubHost.runSearch(query);
+        return result.get("items").stream()
+                .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))
+                .collect(Collectors.toList());
+    }
+
     @Override
     public Optional<PullRequest> parsePullRequestUrl(String url) {
         var matcher = pullRequestPattern.matcher(url);
         if (matcher.find()) {
             return Optional.of(getPullRequest(matcher.group(1)));
diff a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java
--- a/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java
+++ b/host/src/main/java/org/openjdk/skara/host/gitlab/GitLabRepository.java
@@ -109,10 +109,15 @@
                       .execute().stream()
                       .map(value -> new GitLabMergeRequest(this, value, request))
                       .collect(Collectors.toList());
     }
 
+    @Override
+    public List<PullRequest> findPullRequestsWithComment(String author, String body) {
+        throw new RuntimeException("not implemented yet");
+    }
+
     @Override
     public Optional<PullRequest> parsePullRequestUrl(String url) {
         var matcher = mergeRequestPattern.matcher(url);
         if (matcher.find()) {
             return Optional.of(getPullRequest(matcher.group(1)));
diff a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
@@ -29,10 +29,11 @@
 import java.io.*;
 import java.net.*;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.regex.Pattern;
+import java.util.stream.Collectors;
 
 public class TestHostedRepository implements HostedRepository {
     private final TestHost host;
     private final String projectName;
     private final Repository localRepository;
@@ -68,10 +69,21 @@
     @Override
     public List<PullRequest> getPullRequests() {
         return new ArrayList<>(host.getPullRequests(this));
     }
 
+    @Override
+    public List<PullRequest> findPullRequestsWithComment(String author, String body) {
+        return getPullRequests().stream()
+                                .filter(pr -> pr.getComments().stream()
+                                        .filter(comment -> author == null || comment.author().userName().equals(author))
+                                        .filter(comment -> comment == null ||comment.body().contains(body))
+                                        .count() > 0
+                                )
+                                .collect(Collectors.toList());
+    }
+
     @Override
     public Optional<PullRequest> parsePullRequestUrl(String url) {
         var matcher = pullRequestPattern.matcher(url);
         if (matcher.find()) {
             return Optional.of(getPullRequest(matcher.group(1)));
diff a/test/src/main/java/org/openjdk/skara/test/TestMailmanServer.java b/test/src/main/java/org/openjdk/skara/test/TestMailmanServer.java
--- a/test/src/main/java/org/openjdk/skara/test/TestMailmanServer.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestMailmanServer.java
@@ -103,21 +103,25 @@
         var listPath = Files.createTempFile("list-" + name, ".txt");
         lists.put(name, listPath);
         return listName;
     }
 
-    public void processIncoming() throws IOException {
-        var email = smtpServer.receive(Duration.ofSeconds(10));
+    public void processIncoming(Duration timeout) throws IOException {
+        var email = smtpServer.receive(timeout);
         var mboxEntry = Mbox.fromMail(email);
 
         var listPath = email.recipients().stream()
                             .filter(recipient -> lists.containsKey(recipient.localPart()))
                             .map(recipient -> lists.get(recipient.localPart()))
+    public void processIncoming() throws IOException {
+        processIncoming(Duration.ofSeconds(10));
+    }
+
     @Override
     public void close() throws IOException {
         httpServer.stop(0);
         smtpServer.close();
     }
