diff a/cli/src/main/java/org/openjdk/skara/cli/GitSync.java b/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
@@ -38,17 +38,18 @@
         System.err.println(message);
         System.exit(1);
         return new IOException("will never reach here");
     }
 
-    private static int pull() throws IOException, InterruptedException {
+    private static int pull(Repository repo) throws IOException, InterruptedException {
         var pb = new ProcessBuilder("git", "pull");
+        pb.directory(repo.root().toFile());
         pb.inheritIO();
         return pb.start().waitFor();
     }
 
-    public static void main(String[] args) throws IOException, InterruptedException {
+    static void sync(Repository repo, String[] args) throws IOException, InterruptedException {
         var flags = List.of(
             Option.shortcut("")
                   .fullname("from")
                   .describe("REMOTE")
                   .helptext("Fetch changes from this remote")
@@ -96,14 +97,10 @@
         if (arguments.contains("verbose") || arguments.contains("debug")) {
             var level = arguments.contains("debug") ? Level.FINER : Level.FINE;
             Logging.setup(level);
         }
 
-        var cwd = Paths.get("").toAbsolutePath();
-        var repo = Repository.get(cwd).orElseThrow(() ->
-                die("error: no repository found at " + cwd.toString())
-        );
 
         HttpProxy.setup();
 
         var remotes = repo.remotes();
 
@@ -202,12 +199,21 @@
         if (!shouldPull) {
             var lines = repo.config("sync.pull");
             shouldPull = lines.size() == 1 && lines.get(0).toLowerCase().equals("always");
         }
         if (shouldPull) {
-            int err = pull();
+            int err = pull(repo);
             if (err != 0) {
                 System.exit(err);
             }
         }
     }
+
+    public static void main(String[] args) throws IOException, InterruptedException {
+        var cwd = Paths.get("").toAbsolutePath();
+        var repo = Repository.get(cwd).orElseThrow(() ->
+                die("error: no repository found at " + cwd.toString())
+        );
+
+        sync(repo, args);
+    }
 }
