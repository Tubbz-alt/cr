diff a/cli/src/main/java/org/openjdk/skara/cli/GitFork.java b/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitFork.java
@@ -97,11 +97,11 @@
         } catch (InterruptedException e) {
             throw new IOException(e);
         }
     }
 
-    public static void main(String[] args) throws IOException {
+    public static void main(String[] args) throws IOException, InterruptedException {
         var flags = List.of(
             Option.shortcut("u")
                   .fullname("username")
                   .describe("NAME")
                   .helptext("Username on host")
@@ -140,10 +140,14 @@
                   .optional(),
             Switch.shortcut("")
                   .fullname("https")
                   .helptext("Use the https:// protocol when cloning")
                   .optional(),
+            Switch.shortcut("")
+                  .fullname("sync")
+                  .helptext("Sync with the upstream repository after successful fork")
+                  .optional(),
             Switch.shortcut("")
                   .fullname("verbose")
                   .helptext("Turn on verbose output")
                   .optional(),
             Switch.shortcut("")
@@ -260,10 +264,15 @@
         boolean noRemote = arguments.contains("no-remote");
         if (!noRemote) {
             var config = gitConfig("fork.no-remote");
             noRemote = config != null && config.toLowerCase().equals("true");
         }
+        boolean shouldSync = arguments.contains("sync");
+        if (!shouldSync) {
+            var config = gitConfig("fork.sync");
+            shouldSync = config != null && config.toLowerCase().equals("true");
+        }
         if (noClone || !arguments.at(0).isPresent()) {
             if (!arguments.at(0).isPresent()) {
                 var cwd = Path.of("").toAbsolutePath();
                 var repo = Repository.get(cwd).orElseGet(die("error: no git repository found at " + cwd));
 
@@ -278,15 +287,19 @@
                     if (isMercurial) {
                         forkURL = "git+" + forkURL;
                     }
                     repo.addRemote("fork", forkURL);
                     System.out.println("done");
+
+                    if (shouldSync) {
+                        GitSync.sync(repo, new String[]{"--from", "origin", "--to", "fork"});
+                    }
                 }
             }
         } else {
             var reference = arguments.get("reference").orString(() -> gitConfig("fork.reference"));
-            if (reference.startsWith("~" + File.separator)) {
+            if (reference != null && reference.startsWith("~" + File.separator)) {
                 reference = System.getProperty("user.home") + reference.substring(1);
             }
             var depth = arguments.get("depth").orString(() -> gitConfig("fork.depth"));
             var shallowSince = arguments.get("shallow-since").orString(() -> gitConfig("fork.shallow-since"));
 
@@ -337,9 +350,13 @@
                     upstreamUrl = "git+" + upstreamUrl;
                 }
                 repo.addRemote("upstream", upstreamUrl);
 
                 System.out.println("done");
+
+                if (shouldSync) {
+                    GitSync.sync(repo, new String[]{"--from", "upstream", "--to", "origin", "--pull"});
+                }
             }
         }
     }
 }
