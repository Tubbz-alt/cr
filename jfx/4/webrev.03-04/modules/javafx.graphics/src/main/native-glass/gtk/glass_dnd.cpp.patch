diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_dnd.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_dnd.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_dnd.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_dnd.cpp
@@ -516,11 +516,10 @@
     return ret;
 }
 
 /************************* SOURCE *********************************************/
 
-
 static jint dnd_performed_action;
 
 const char * const SOURCE_DND_DATA = "fx-dnd-data";
 
 static void dnd_set_performed_action(jint performed_action)
@@ -738,30 +737,37 @@
 
     g_free(target_name);
     return is_data_set;
 }
 
+static gboolean dnd_destroy_drag_widget_callback(gpointer) {
+    if (drag_widget) {
+        gtk_widget_destroy(drag_widget);
+        drag_widget = NULL;
+    }
+
+    return FALSE;
+}
+
 static void dnd_end_callback(GtkWidget *widget,
                              GdkDragContext *context,
                              gpointer user_data)
 {
     if (drag_widget) {
         GdkDragAction action = gdk_drag_context_get_selected_action(context);
         dnd_set_performed_action(translate_gdk_action_to_glass(action));
-        gtk_widget_destroy(drag_widget);
-        drag_widget = NULL;
     }
+    gdk_threads_add_idle((GSourceFunc) dnd_destroy_drag_widget_callback, NULL);
 }
 
 static gboolean dnd_drag_failed_callback(GtkWidget *widget,
                                      GdkDragContext *context,
                                      GtkDragResult result,
                                      gpointer user_data)
 {
-    gtk_widget_destroy(drag_widget);
-    drag_widget = NULL;
     dnd_set_performed_action(com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_NONE);
+    gdk_threads_add_idle((GSourceFunc) dnd_destroy_drag_widget_callback, NULL);
 
     return FALSE;
 }
 
 static void dnd_data_get_callback(GtkWidget *widget,
@@ -843,10 +849,11 @@
 jint execute_dnd(JNIEnv *env, jobject data, jint supported)
 {
     try {
         dnd_source_push_data(env, data, supported);
     } catch (jni_exception&) {
+        gdk_threads_add_idle((GSourceFunc) dnd_destroy_drag_widget_callback, NULL);
         return com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_NONE;
     }
 
     while (is_in_drag()) {
         gtk_main_iteration();
