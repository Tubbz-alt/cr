diff a/modules/javafx.web/src/main/java/com/sun/webkit/network/HTTP2Loader.java b/modules/javafx.web/src/main/java/com/sun/webkit/network/HTTP2Loader.java
--- a/modules/javafx.web/src/main/java/com/sun/webkit/network/HTTP2Loader.java
+++ b/modules/javafx.web/src/main/java/com/sun/webkit/network/HTTP2Loader.java
@@ -100,17 +100,17 @@
     private final long data;
     private volatile boolean canceled = false;
 
     private final CompletableFuture<Void> response;
     // Use singleton instance of HttpClient to get the maximum benefits
-    private final static HttpClient HTTP_CLIENT = HttpClient.newBuilder()
-                   .version(Version.HTTP_2)  // this is the default
-                   .followRedirects(Redirect.NEVER) // WebCore handles redirection
-                   .connectTimeout(Duration.ofSeconds(30)) // FIXME: Add a property to control the timeout
-                   .cookieHandler(CookieHandler.getDefault())
-                   .build();
-
+    private final static HttpClient HTTP_CLIENT =
+        AccessController.doPrivileged((PrivilegedAction<HttpClient>) () -> HttpClient.newBuilder()
+                .version(Version.HTTP_2)  // this is the default
+                .followRedirects(Redirect.NEVER) // WebCore handles redirection
+                .connectTimeout(Duration.ofSeconds(30)) // FIXME: Add a property to control the timeout
+                .cookieHandler(CookieHandler.getDefault())
+                .build());
     // Singleton instance of direct ByteBuffer to transfer downloaded bytes from
     // Java to native
     private static final int DEFAULT_BUFSIZE = 40 * 1024;
     private final static ByteBuffer BUFFER;
     static {
diff a/modules/javafx.web/src/main/java/com/sun/webkit/network/NetworkContext.java b/modules/javafx.web/src/main/java/com/sun/webkit/network/NetworkContext.java
--- a/modules/javafx.web/src/main/java/com/sun/webkit/network/NetworkContext.java
+++ b/modules/javafx.web/src/main/java/com/sun/webkit/network/NetworkContext.java
@@ -90,11 +90,16 @@
                 TimeUnit.MILLISECONDS,
                 new LinkedBlockingQueue<Runnable>(),
                 new URLLoaderThreadFactory());
         threadPool.allowCoreThreadTimeOut(true);
 
-        useHTTP2Loader = AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> Boolean.valueOf(System.getProperty("com.sun.webkit.useHTTP2Loader", "true")));
+        useHTTP2Loader = AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {
+            // Use HTTP2 by default on JDK 12 or later
+            final var version = Runtime.Version.parse(System.getProperty("java.version"));
+            final String defaultUseHTTP2 = version.feature() >= 12 ? "true" : "false";
+            return Boolean.valueOf(System.getProperty("com.sun.webkit.useHTTP2Loader", defaultUseHTTP2));
+        });
     }
 
     /**
      * The shared pool of byte buffers.
      */
