diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/java/URLLoader.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/java/URLLoader.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/java/URLLoader.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/java/URLLoader.cpp
@@ -41,11 +41,11 @@
 #include "ResourceHandleClient.h"
 #include "ResourceRequest.h"
 #include "ResourceResponse.h"
 #include "URLLoader.h"
 #include "com_sun_webkit_LoadListenerClient.h"
-#include "com_sun_webkit_network_URLLoader.h"
+#include "com_sun_webkit_network_URLLoaderBase.h"
 #include <wtf/CompletionHandler.h>
 
 namespace WebCore {
 class Page;
 }
@@ -75,16 +75,16 @@
                 networkContextClass,
                 "fwkLoad",
                 "(Lcom/sun/webkit/WebPage;Z"
                 "Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;"
                 "[Lcom/sun/webkit/network/FormDataElement;J)"
-                "Lcom/sun/webkit/network/URLLoader;");
+                "Lcom/sun/webkit/network/URLLoaderBase;");
         ASSERT(loadMethod);
     }
     if (!urlLoaderClass) {
         urlLoaderClass = JLClass(env->FindClass(
-                "com/sun/webkit/network/URLLoader"));
+                "com/sun/webkit/network/URLLoaderBase"));
         ASSERT(urlLoaderClass);
 
         cancelMethod = env->GetMethodID(urlLoaderClass, "fwkCancel", "()V");
         ASSERT(cancelMethod);
     }
@@ -106,29 +106,10 @@
                 "Lcom/sun/webkit/network/FormDataElement;");
         ASSERT(createFromFileMethod);
     }
 }
 
-static bool shouldRedirectAsGET(const ResourceRequest& request, const ResourceResponse& response, bool crossOrigin)
-{
-    if (request.httpMethod() == "GET" || request.httpMethod() == "HEAD")
-        return false;
-
-    if (!request.url().protocolIsInHTTPFamily())
-        return true;
-
-    if (response.isSeeOther())
-        return true;
-
-    if ((response.isMovedPermanently() || response.isFound()) && (request.httpMethod() == "POST"))
-        return true;
-
-    if (crossOrigin && (request.httpMethod() == "DELETE"))
-        return true;
-
-    return false;
-}
 }
 
 URLLoader::URLLoader()
 {
 }
@@ -137,18 +118,19 @@
 {
     cancel();
 }
 
 std::unique_ptr<URLLoader> URLLoader::loadAsynchronously(NetworkingContext* context,
-                                                    ResourceHandle* handle)
+                                                    ResourceHandle* handle,
+                                                    const ResourceRequest& request)
 {
     std::unique_ptr<URLLoader> result = std::unique_ptr<URLLoader>(new URLLoader());
     result->m_target = std::unique_ptr<AsynchronousTarget>(new AsynchronousTarget(handle));
     result->m_ref = load(
             true,
             context,
-            handle->firstRequest(),
+            request,
             result->m_target.get());
     return result;
 }
 
 void URLLoader::cancel()
@@ -196,19 +178,14 @@
 
     JLObject webPage = pageSupplement->jWebPage();
     ASSERT(webPage);
 
     String headerString;
-    const HTTPHeaderMap& headerMap = request.httpHeaderFields();
-    for (
-        HTTPHeaderMap::const_iterator it = headerMap.begin();
-        headerMap.end() != it;
-        ++it)
-    {
-        headerString.append(it->key);
+    for (const auto& header : request.httpHeaderFields()) {
+        headerString.append(header.key);
         headerString.append(": ");
-        headerString.append(it->value);
+        headerString.append(header.value);
         headerString.append("\n");
     }
 
     JNIEnv* env = WTF::GetJavaEnv();
     initRefs(env);
@@ -302,52 +279,22 @@
         client->didSendData(m_handle, totalBytesSent, totalBytesToBeSent);
     }
 }
 
 
-bool URLLoader::AsynchronousTarget::willSendRequest(
-        const String& newUrl,
-        const String& newMethod,
-        const ResourceResponse& response)
+bool URLLoader::AsynchronousTarget::willSendRequest(const ResourceResponse& response)
 {
-    using namespace URLLoaderJavaInternal;
-    ASSERT(isMainThread());
-    ResourceHandleClient* client = m_handle->client();
-    if (client) {
-        ResourceRequest request = m_handle->firstRequest();
-        String location = response.httpHeaderField(HTTPHeaderName::Location);
-        URL newURL = URL(URL(), newUrl);
-        bool crossOrigin = !protocolHostAndPortAreEqual(request.url(), newURL);
-
-        ResourceRequest newRequest = request;
-        newRequest.setURL(newURL);
-
-        if (shouldRedirectAsGET(newRequest, response, crossOrigin)) {
-            newRequest.setHTTPMethod("GET");
-            newRequest.setHTTPBody(nullptr);
-            newRequest.clearHTTPContentType();
-        } else {
-            newRequest.setHTTPMethod(newMethod);
-        }
-
-        // Should not set Referer after a redirect from a secure resource to non-secure one.
-        if (!newURL.protocolIs("https") && protocolIs(newRequest.httpReferrer(), "https") && m_handle->context()->shouldClearReferrerOnHTTPSToHTTPRedirect())
-            newRequest.clearHTTPReferrer();
-
-        client->willSendRequestAsync(m_handle, WTFMove(newRequest), ResourceResponse(response), [] (ResourceRequest&&) {
-        });
-    }
-    return true;
+    m_handle->willSendRequest(response);
+    return false;
 }
 
 void URLLoader::AsynchronousTarget::didReceiveResponse(
         const ResourceResponse& response)
 {
     ResourceHandleClient* client = m_handle->client();
     if (client) {
-        client->didReceiveResponseAsync(m_handle, ResourceResponse(response), [] () {
-        });
+        client->didReceiveResponseAsync(m_handle, ResourceResponse(response), [] () {});
     }
 }
 
 void URLLoader::AsynchronousTarget::didReceiveData(const char* data, int length)
 {
@@ -387,19 +334,18 @@
 
 void URLLoader::SynchronousTarget::didSendData(long, long)
 {
 }
 
-bool URLLoader::SynchronousTarget::willSendRequest(
-        const String& newUrl,
-        const String&,
-        const ResourceResponse&)
+bool URLLoader::SynchronousTarget::willSendRequest(const ResourceResponse& response)
 {
     // The following code was adapted from the Windows port
     // FIXME: This needs to be fixed to follow redirects correctly even
     // for cross-domain requests
-    if (!protocolHostAndPortAreEqual(m_request.url(), URL(URL(), newUrl))) {
+    String location = response.httpHeaderField(HTTPHeaderName::Location);
+    URL newURL = URL(response.url(), location);
+    if (!protocolHostAndPortAreEqual(m_request.url(), newURL)) {
         didFail(ResourceError(
                 String(),
                 com_sun_webkit_LoadListenerClient_INVALID_RESPONSE,
                 m_request.url(),
                 "Illegal redirect"));
@@ -429,25 +375,21 @@
     m_response.setHTTPStatusCode(404);
 }
 
 } // namespace WebCore
 
-using namespace WebCore;
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-static void setupResponse(ResourceResponse& response,
-                          JNIEnv* env,
+static WebCore::ResourceResponse setupResponse(JNIEnv* env,
                           jint status,
                           jstring contentType,
                           jstring contentEncoding,
                           jlong contentLength,
                           jstring headers,
+    using namespace WebCore;
+    ResourceResponse response { };
+
     if (status > 0) {
         response.setHTTPStatusCode(status);
     }
 
     // Fix for RT-13802: If the mime type is not specified,
@@ -494,59 +436,56 @@
 
     // Setup mime type for local resources
     if (/*kurl.hasPath()*/kurl.pathEnd() != kurl.pathStart() && kurl.protocol() == String("file")) {
         response.setMimeType(MIMETypeRegistry::getMIMETypeForPath(kurl.path()));
     }
+    return response;
 }
 
-JNIEXPORT void JNICALL Java_com_sun_webkit_network_URLLoader_twkDidSendData
+JNIEXPORT void JNICALL Java_com_sun_webkit_network_URLLoaderBase_twkDidSendData
   (JNIEnv*, jclass, jlong totalBytesSent, jlong totalBytesToBeSent, jlong data)
 {
+    using namespace WebCore;
     URLLoader::Target* target =
             static_cast<URLLoader::Target*>(jlong_to_ptr(data));
     ASSERT(target);
     target->didSendData(totalBytesSent, totalBytesToBeSent);
 }
 
-JNIEXPORT jboolean JNICALL Java_com_sun_webkit_network_URLLoader_twkWillSendRequest
-  (JNIEnv* env, jclass, jstring newUrl, jstring newMethod, jint status,
+JNIEXPORT void JNICALL Java_com_sun_webkit_network_URLLoaderBase_twkWillSendRequest
+  (JNIEnv* env, jclass, jint status,
    jstring contentType, jstring contentEncoding, jlong contentLength,
    jstring headers, jstring url, jlong data)
 {
+    using namespace WebCore;
     URLLoader::Target* target =
             static_cast<URLLoader::Target*>(jlong_to_ptr(data));
     ASSERT(target);
 
-    ResourceResponse response;
-    setupResponse(
-            response,
+    ResourceResponse response = setupResponse(
             env,
             status,
             contentType,
             contentEncoding,
             contentLength,
             headers,
             url);
 
-    return bool_to_jbool(target->willSendRequest(
-            String(env, newUrl),
-            String(env, newMethod),
-            response));
+    target->willSendRequest(response);
 }
 
-JNIEXPORT void JNICALL Java_com_sun_webkit_network_URLLoader_twkDidReceiveResponse
+JNIEXPORT void JNICALL Java_com_sun_webkit_network_URLLoaderBase_twkDidReceiveResponse
   (JNIEnv* env, jclass, jint status, jstring contentType,
    jstring contentEncoding, jlong contentLength, jstring headers,
    jstring url, jlong data)
 {
+    using namespace WebCore;
     URLLoader::Target* target =
             static_cast<URLLoader::Target*>(jlong_to_ptr(data));
     ASSERT(target);
 
-    ResourceResponse response;
-    setupResponse(
-            response,
+    ResourceResponse response = setupResponse(
             env,
             status,
             contentType,
             contentEncoding,
             contentLength,
@@ -554,43 +493,42 @@
             url);
 
     target->didReceiveResponse(response);
 }
 
-JNIEXPORT void JNICALL Java_com_sun_webkit_network_URLLoader_twkDidReceiveData
+JNIEXPORT void JNICALL Java_com_sun_webkit_network_URLLoaderBase_twkDidReceiveData
   (JNIEnv* env, jclass, jobject byteBuffer, jint position, jint remaining,
    jlong data)
 {
+    using namespace WebCore;
     URLLoader::Target* target =
             static_cast<URLLoader::Target*>(jlong_to_ptr(data));
     ASSERT(target);
     const char* address =
             static_cast<const char*>(env->GetDirectBufferAddress(byteBuffer));
     target->didReceiveData(address + position, remaining);
 }
 
-JNIEXPORT void JNICALL Java_com_sun_webkit_network_URLLoader_twkDidFinishLoading
+JNIEXPORT void JNICALL Java_com_sun_webkit_network_URLLoaderBase_twkDidFinishLoading
   (JNIEnv*, jclass, jlong data)
 {
+    using namespace WebCore;
     URLLoader::Target* target =
             static_cast<URLLoader::Target*>(jlong_to_ptr(data));
     ASSERT(target);
     target->didFinishLoading();
 }
 
-JNIEXPORT void JNICALL Java_com_sun_webkit_network_URLLoader_twkDidFail
+JNIEXPORT void JNICALL Java_com_sun_webkit_network_URLLoaderBase_twkDidFail
   (JNIEnv* env, jclass, jint errorCode, jstring url, jstring message,
    jlong data)
 {
+    using namespace WebCore;
     URLLoader::Target* target =
             static_cast<URLLoader::Target*>(jlong_to_ptr(data));
     ASSERT(target);
     target->didFail(ResourceError(
             String(),
-
-#ifdef __cplusplus
-}
-#endif
