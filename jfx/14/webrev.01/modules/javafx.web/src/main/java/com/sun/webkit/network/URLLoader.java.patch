diff a/modules/javafx.web/src/main/java/com/sun/webkit/network/URLLoader.java b/modules/javafx.web/src/main/java/com/sun/webkit/network/URLLoader.java
--- a/modules/javafx.web/src/main/java/com/sun/webkit/network/URLLoader.java
+++ b/modules/javafx.web/src/main/java/com/sun/webkit/network/URLLoader.java
@@ -36,11 +36,10 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
-import java.lang.annotation.Native;
 import java.net.ConnectException;
 import java.net.HttpRetryException;
 import java.net.HttpURLConnection;
 import java.net.MalformedURLException;
 import java.net.NoRouteToHostException;
@@ -63,17 +62,14 @@
 import javax.net.ssl.SSLHandshakeException;
 
 /**
  * A runnable that loads a resource specified by a URL.
  */
-final class URLLoader implements Runnable {
-
-    @Native public static final int ALLOW_UNASSIGNED = java.net.IDN.ALLOW_UNASSIGNED;
+final class URLLoader extends URLLoaderBase implements Runnable {
 
     private static final PlatformLogger logger =
             PlatformLogger.getLogger(URLLoader.class.getName());
-    private static final int MAX_REDIRECTS = 10;
     private static final int MAX_BUF_COUNT = 3;
     private static final String GET = "GET";
     private static final String HEAD = "HEAD";
     private static final String DELETE = "DELETE";
 
@@ -113,11 +109,12 @@
 
 
     /**
      * Cancels this loader.
      */
-    private void fwkCancel() {
+    @Override
+    public void fwkCancel() {
         if (logger.isLoggable(Level.FINEST)) {
             logger.finest(String.format("data: [0x%016X]", data));
         }
         canceled = true;
     }
@@ -139,11 +136,10 @@
      */
     private void doRun() {
         Throwable error = null;
         int errorCode = 0;
         try {
-            int redirectCount = 0;
             boolean streaming = true;
             boolean connectionResetRetry = true;
             while (true) {
                 // RT-14438
                 String actualUrl = url;
@@ -160,14 +156,13 @@
                 workaround7177996(urlObject);
 
                 URLConnection c = urlObject.openConnection();
                 prepareConnection(c);
 
-                Redirect redirect = null;
                 try {
                     sendRequest(c, streaming);
-                    redirect = receiveResponse(c);
+                    receiveResponse(c);
                 } catch (HttpRetryException ex) {
                     // RT-19914
                     if (streaming) {
                         streaming = false;
                         continue; // retry without streaming
@@ -183,29 +178,11 @@
                         throw ex;
                     }
                 } finally {
                     close(c);
                 }
-
-                if (redirect != null) {
-                    if (redirectCount++ >= MAX_REDIRECTS) {
-                        throw new TooManyRedirectsException();
-                    }
-                    boolean resetRequest = !redirect.preserveRequest
-                            && !method.equals(GET) && !method.equals(HEAD);
-                    String newMethod = resetRequest ? GET : method;
-                    willSendRequest(redirect.url, newMethod, c);
-                    // willSendRequest() may cancel this loader
-                    if (canceled) {
-                        break;
-                    }
-                    url = redirect.url;
-                    method = newMethod;
-                    formDataElements = resetRequest ? null : formDataElements;
-                } else {
-                    break;
-                }
+                break;
             }
         } catch (MalformedURLException ex) {
             error = ex;
             errorCode = LoadListenerClient.MALFORMED_URL;
         } catch (AccessControlException ex) {
@@ -230,13 +207,10 @@
             error = ex;
             errorCode = LoadListenerClient.CONNECTION_TIMED_OUT;
         } catch (InvalidResponseException ex) {
             error = ex;
             errorCode = LoadListenerClient.INVALID_RESPONSE;
-        } catch (TooManyRedirectsException ex) {
-            error = ex;
-            errorCode = LoadListenerClient.TOO_MANY_REDIRECTS;
         } catch (FileNotFoundException ex) {
             error = ex;
             errorCode = LoadListenerClient.FILE_NOT_FOUND;
         } catch (Throwable th) {
             error = th;
@@ -415,15 +389,15 @@
     }
 
     /**
      * Receives response from the server.
      */
-    private Redirect receiveResponse(URLConnection c)
+    private void receiveResponse(URLConnection c)
         throws IOException, InterruptedException
     {
         if (canceled) {
-            return null;
+            return;
         }
 
         InputStream errorStream = null;
 
         if (c instanceof HttpURLConnection) {
@@ -433,38 +407,26 @@
             if (code == -1) {
                 throw new InvalidResponseException();
             }
 
             if (canceled) {
-                return null;
+                return;
             }
 
             // See RT-17435
             switch (code) {
                 case 301: // Moved Permanently
                 case 302: // Found
                 case 303: // See Other
                 case 307: // Temporary Redirect
-                    String newLoc = http.getHeaderField("Location");
-                    if (newLoc != null) {
-                        URL newUrl;
-                        try {
-                            newUrl = newURL(newLoc);
-                        } catch (MalformedURLException mue) {
-                            // Try to treat newLoc as a relative URI to conform
-                            // to popular browsers
-                            newUrl = newURL(c.getURL(), newLoc);
-                        }
-                        return new Redirect(newUrl.toExternalForm(),
-                                            code == 307);
-                    }
+                    willSendRequest(c);
                     break;
 
                 case 304: // Not Modified
                     didReceiveResponse(c);
                     didFinishLoading();
-                    return null;
+                    return;
             }
 
             if (code >= 400 && !method.equals(HEAD)) {
                 errorStream = http.getErrorStream();
             }
@@ -508,11 +470,11 @@
 
         didReceiveResponse(c);
 
         if (method.equals(HEAD)) {
             didFinishLoading();
-            return null;
+            return;
         }
 
         InputStream inputStream = null;
         try {
             inputStream = errorStream == null
@@ -599,15 +561,13 @@
                 }
                 didFinishLoading();
             }
         } finally {
             if (byteBuffer != null) {
-                byteBuffer.clear();
                 allocator.release(byteBuffer);
             }
         }
-        return null;
     }
 
     /**
      * Releases the resources that may be associated with a connection.
      */
@@ -623,43 +583,19 @@
         try {
             c.getInputStream().close();
         } catch (IOException ignore) {}
     }
 
-
-    /**
-     * A holder for redirect information.
-     */
-    private static final class Redirect {
-        private final String url;
-        private final boolean preserveRequest;
-
-        private Redirect(String url, boolean preserveRequest) {
-            this.url = url;
-            this.preserveRequest = preserveRequest;
-        }
-    }
-
     /**
      * Signals an invalid response from the server.
      */
     private static final class InvalidResponseException extends IOException {
         private InvalidResponseException() {
-    /**
-     * Signals that too many redirects have been encountered
-     * while processing the request.
-     */
-    private static final class TooManyRedirectsException extends IOException {
-        private TooManyRedirectsException() {
-            super("Too many redirects");
-        }
-    }
-
     private void didSendData(final long totalBytesSent,
                              final long totalBytesToBeSent)
     {
         callBack(() -> {
             if (!canceled) {
@@ -681,94 +617,63 @@
                     data));
         }
         twkDidSendData(totalBytesSent, totalBytesToBeSent, data);
     }
 
-    private void willSendRequest(String newUrl,
-                                 final String newMethod,
-                                 URLConnection c) throws InterruptedException
+    private void willSendRequest(URLConnection c) throws InterruptedException
     {
-        final String adjustedNewUrl = adjustUrlForWebKit(newUrl);
         final int status = extractStatus(c);
         final String contentType = c.getContentType();
         final String contentEncoding = extractContentEncoding(c);
         final long contentLength = extractContentLength(c);
         final String responseHeaders = extractHeaders(c);
         final String adjustedUrl = adjustUrlForWebKit(url);
-        final CountDownLatch latch =
-                asynchronous ? new CountDownLatch(1) : null;
         callBack(() -> {
-            try {
-                if (!canceled) {
-                    boolean keepGoing = notifyWillSendRequest(
-                            adjustedNewUrl,
-                            newMethod,
-                            status,
-                            contentType,
-                            contentEncoding,
-                            contentLength,
-                            responseHeaders,
-                            adjustedUrl);
-                    if (!keepGoing) {
-                        fwkCancel();
-                    }
-                }
-            } finally {
-                if (latch != null) {
-                    latch.countDown();
-                }
+            if (!canceled) {
+                notifyWillSendRequest(
+                        status,
+                        contentType,
+                        contentEncoding,
+                        contentLength,
+                        responseHeaders,
+                        adjustedUrl);
             }
         });
-        if (latch != null) {
-            latch.await();
-        }
     }
 
-    private boolean notifyWillSendRequest(String newUrl,
-                                          String newMethod,
-                                          int status,
+    private void notifyWillSendRequest(int status,
                                           String contentType,
                                           String contentEncoding,
                                           long contentLength,
                                           String headers,
                                           String url)
     {
         if (logger.isLoggable(Level.FINEST)) {
             logger.finest(String.format(
-                    "newUrl: [%s], "
-                    + "newMethod: [%s], "
-                    + "status: [%d], "
+                    "status: [%d], "
                     + "contentType: [%s], "
                     + "contentEncoding: [%s], "
                     + "contentLength: [%d], "
                     + "url: [%s], "
                     + "data: [0x%016X], "
                     + "headers:%n%s",
-                    newUrl,
-                    newMethod,
                     status,
                     contentType,
                     contentEncoding,
                     contentLength,
                     url,
                     data,
                     Util.formatHeaders(headers)));
         }
-        boolean result = twkWillSendRequest(
-                newUrl,
-                newMethod,
+        twkWillSendRequest(
                 status,
                 contentType,
                 contentEncoding,
                 contentLength,
                 headers,
-        if (logger.isLoggable(Level.FINEST)) {
-            logger.finest(String.format("result: [%s]", result));
-        }
-        return result;
     }
 
     private void didReceiveResponse(URLConnection c) {
         final int status = extractStatus(c);
         final String contentType = c.getContentType();
@@ -831,11 +736,10 @@
                 notifyDidReceiveData(
                         byteBuffer,
                         byteBuffer.position(),
                         byteBuffer.remaining());
             }
-            byteBuffer.clear();
             allocator.release(byteBuffer);
         });
     }
 
     private void notifyDidReceiveData(ByteBuffer byteBuffer,
@@ -901,44 +805,10 @@
         } else {
             runnable.run();
         }
     }
 
-    private static native void twkDidSendData(long totalBytesSent,
-                                              long totalBytesToBeSent,
-                                              long data);
-
-    private static native boolean twkWillSendRequest(String newUrl,
-                                                     String newMethod,
-                                                     int status,
-                                                     String contentType,
-                                                     String contentEncoding,
-                                                     long contentLength,
-                                                     String headers,
-                                                     String url,
-                                                     long data);
-
-    private static native void twkDidReceiveResponse(int status,
-                                                     String contentType,
-                                                     String contentEncoding,
-                                                     long contentLength,
-                                                     String headers,
-                                                     String url,
-                                                     long data);
-
-    private static native void twkDidReceiveData(ByteBuffer byteBuffer,
-                                                 int position,
-                                                 int remaining,
-                                                 long data);
-
-    private static native void twkDidFinishLoading(long data);
-
-    private static native void twkDidFail(int errorCode,
-                                          String url,
-                                          String message,
-                                          long data);
-
     /**
      * Given a {@link URLConnection}, returns the connection status
      * for passing into native callbacks.
      */
     private static int extractStatus(URLConnection c) {
