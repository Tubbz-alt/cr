diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gsignal.h b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gsignal.h
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gsignal.h
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gsignal.h
@@ -19,38 +19,38 @@
 
 #if !defined (__GLIB_GOBJECT_H_INSIDE__) && !defined (GOBJECT_COMPILATION)
 #error "Only <glib-object.h> can be included directly."
 #endif
 
-#include    <gobject/gclosure.h>
-#include    <gobject/gvalue.h>
-#include    <gobject/gparam.h>
-#include    <gobject/gmarshal.h>
+#include  <gobject/gclosure.h>
+#include  <gobject/gvalue.h>
+#include  <gobject/gparam.h>
+#include  <gobject/gmarshal.h>
 
 G_BEGIN_DECLS
 
 /* --- typedefs --- */
-typedef struct _GSignalQuery         GSignalQuery;
-typedef struct _GSignalInvocationHint    GSignalInvocationHint;
+typedef struct _GSignalQuery     GSignalQuery;
+typedef struct _GSignalInvocationHint  GSignalInvocationHint;
 /**
  * GSignalCMarshaller:
  *
  * This is the signature of marshaller functions, required to marshall
  * arrays of parameter values to signal emissions into C language callback
  * invocations. It is merely an alias to #GClosureMarshal since the #GClosure
  * mechanism takes over responsibility of actual function invocation for the
  * signal system.
  */
-typedef GClosureMarshal          GSignalCMarshaller;
+typedef GClosureMarshal      GSignalCMarshaller;
 /**
  * GSignalCVaMarshaller:
  *
  * This is the signature of va_list marshaller functions, an optional
  * marshaller that can be used in some situations to avoid
  * marshalling the signal argument into GValues.
  */
-typedef GVaClosureMarshal        GSignalCVaMarshaller;
+typedef GVaClosureMarshal    GSignalCVaMarshaller;
 /**
  * GSignalEmissionHook:
  * @ihint: Signal invocation hint, see #GSignalInvocationHint.
  * @n_param_values: the number of parameters to the function, including
  *  the instance on which the signal was emitted.
@@ -66,13 +66,13 @@
  *
  * Returns: whether it wants to stay connected. If it returns %FALSE, the signal
  *  hook is disconnected (and destroyed).
  */
 typedef gboolean (*GSignalEmissionHook) (GSignalInvocationHint *ihint,
-                     guint          n_param_values,
-                     const GValue          *param_values,
-                     gpointer       data);
+           guint      n_param_values,
+           const GValue        *param_values,
+           gpointer   data);
 /**
  * GSignalAccumulator:
  * @ihint: Signal invocation hint, see #GSignalInvocationHint.
  * @return_accu: Accumulator to collect callback return values in, this
  *  is the return value of the current signal emission.
@@ -89,13 +89,13 @@
  * Returns: The accumulator function returns whether the signal emission
  *  should be aborted. Returning %FALSE means to abort the
  *  current emission and %TRUE is returned for continuation.
  */
 typedef gboolean (*GSignalAccumulator)  (GSignalInvocationHint *ihint,
-                     GValue            *return_accu,
-                     const GValue          *handler_return,
-                     gpointer               data);
+           GValue          *return_accu,
+           const GValue        *handler_return,
+           gpointer               data);
 
 
 /* --- run, match and connect types --- */
 /**
  * GSignalFlags:
@@ -124,16 +124,16 @@
  * signal description outlines how especially the RUN flags control the
  * stages of a signal emission.
  */
 typedef enum
 {
-  G_SIGNAL_RUN_FIRST    = 1 << 0,
+  G_SIGNAL_RUN_FIRST  = 1 << 0,
   G_SIGNAL_RUN_LAST = 1 << 1,
   G_SIGNAL_RUN_CLEANUP  = 1 << 2,
-  G_SIGNAL_NO_RECURSE   = 1 << 3,
+  G_SIGNAL_NO_RECURSE = 1 << 3,
   G_SIGNAL_DETAILED = 1 << 4,
-  G_SIGNAL_ACTION   = 1 << 5,
+  G_SIGNAL_ACTION = 1 << 5,
   G_SIGNAL_NO_HOOKS = 1 << 6,
   G_SIGNAL_MUST_COLLECT = 1 << 7,
   G_SIGNAL_DEPRECATED   = 1 << 8
 } GSignalFlags;
 /**
@@ -152,11 +152,11 @@
  * The connection flags are used to specify the behaviour of a signal's
  * connection.
  */
 typedef enum
 {
-  G_CONNECT_AFTER   = 1 << 0,
+  G_CONNECT_AFTER = 1 << 0,
   G_CONNECT_SWAPPED = 1 << 1
 } GConnectFlags;
 /**
  * GSignalMatchType:
  * @G_SIGNAL_MATCH_ID: The signal id must be equal.
@@ -173,12 +173,12 @@
 typedef enum
 {
   G_SIGNAL_MATCH_ID    = 1 << 0,
   G_SIGNAL_MATCH_DETAIL    = 1 << 1,
   G_SIGNAL_MATCH_CLOSURE   = 1 << 2,
-  G_SIGNAL_MATCH_FUNC      = 1 << 3,
-  G_SIGNAL_MATCH_DATA      = 1 << 4,
+  G_SIGNAL_MATCH_FUNC    = 1 << 3,
+  G_SIGNAL_MATCH_DATA    = 1 << 4,
   G_SIGNAL_MATCH_UNBLOCKED = 1 << 5
 } GSignalMatchType;
 /**
  * G_SIGNAL_MATCH_MASK:
  *
@@ -220,12 +220,12 @@
  * The #GSignalInvocationHint structure is used to pass on additional information
  * to callbacks during a signal emission.
  */
 struct _GSignalInvocationHint
 {
-  guint     signal_id;
-  GQuark    detail;
+  guint   signal_id;
+  GQuark  detail;
   GSignalFlags  run_type;
 };
 /**
  * GSignalQuery:
  * @signal_id: The signal id of the signal being queried, or 0 if the
@@ -246,54 +246,54 @@
  * A structure holding in-depth information for a specific signal. It is
  * filled in by the g_signal_query() function.
  */
 struct _GSignalQuery
 {
-  guint     signal_id;
+  guint   signal_id;
   const gchar  *signal_name;
-  GType     itype;
+  GType   itype;
   GSignalFlags  signal_flags;
-  GType     return_type; /* mangled with G_SIGNAL_TYPE_STATIC_SCOPE flag */
-  guint     n_params;
+  GType   return_type; /* mangled with G_SIGNAL_TYPE_STATIC_SCOPE flag */
+  guint   n_params;
   const GType  *param_types; /* mangled with G_SIGNAL_TYPE_STATIC_SCOPE flag */
 };
 
 
 /* --- signals --- */
 GLIB_AVAILABLE_IN_ALL
 guint                 g_signal_newv         (const gchar        *signal_name,
-                         GType               itype,
-                         GSignalFlags        signal_flags,
-                         GClosure           *class_closure,
-                         GSignalAccumulator  accumulator,
-                         gpointer        accu_data,
-                         GSignalCMarshaller  c_marshaller,
-                         GType               return_type,
-                         guint               n_params,
-                         GType              *param_types);
+               GType               itype,
+               GSignalFlags        signal_flags,
+               GClosure           *class_closure,
+               GSignalAccumulator  accumulator,
+               gpointer    accu_data,
+               GSignalCMarshaller  c_marshaller,
+               GType               return_type,
+               guint               n_params,
+               GType              *param_types);
 GLIB_AVAILABLE_IN_ALL
 guint                 g_signal_new_valist   (const gchar        *signal_name,
-                         GType               itype,
-                         GSignalFlags        signal_flags,
-                         GClosure           *class_closure,
-                         GSignalAccumulator  accumulator,
-                         gpointer        accu_data,
-                         GSignalCMarshaller  c_marshaller,
-                         GType               return_type,
-                         guint               n_params,
-                         va_list             args);
+               GType               itype,
+               GSignalFlags        signal_flags,
+               GClosure           *class_closure,
+               GSignalAccumulator  accumulator,
+               gpointer    accu_data,
+               GSignalCMarshaller  c_marshaller,
+               GType               return_type,
+               guint               n_params,
+               va_list             args);
 GLIB_AVAILABLE_IN_ALL
 guint                 g_signal_new          (const gchar        *signal_name,
-                         GType               itype,
-                         GSignalFlags        signal_flags,
-                         guint               class_offset,
-                         GSignalAccumulator  accumulator,
-                         gpointer        accu_data,
-                         GSignalCMarshaller  c_marshaller,
-                         GType               return_type,
-                         guint               n_params,
-                         ...);
+               GType               itype,
+               GSignalFlags        signal_flags,
+               guint               class_offset,
+               GSignalAccumulator  accumulator,
+               gpointer    accu_data,
+               GSignalCMarshaller  c_marshaller,
+               GType               return_type,
+               guint               n_params,
+               ...);
 GLIB_AVAILABLE_IN_ALL
 guint            g_signal_new_class_handler (const gchar        *signal_name,
                                              GType               itype,
                                              GSignalFlags        signal_flags,
                                              GCallback           class_handler,
@@ -303,141 +303,157 @@
                                              GType               return_type,
                                              guint               n_params,
                                              ...);
 GLIB_AVAILABLE_IN_ALL
 void             g_signal_set_va_marshaller (guint              signal_id,
-                         GType              instance_type,
-                         GSignalCVaMarshaller va_marshaller);
+               GType              instance_type,
+               GSignalCVaMarshaller va_marshaller);
 
 GLIB_AVAILABLE_IN_ALL
 void                  g_signal_emitv        (const GValue       *instance_and_params,
-                         guint               signal_id,
-                         GQuark              detail,
-                         GValue             *return_value);
+               guint               signal_id,
+               GQuark              detail,
+               GValue             *return_value);
 GLIB_AVAILABLE_IN_ALL
 void                  g_signal_emit_valist  (gpointer            instance,
-                         guint               signal_id,
-                         GQuark              detail,
-                         va_list             var_args);
+               guint               signal_id,
+               GQuark              detail,
+               va_list             var_args);
 GLIB_AVAILABLE_IN_ALL
 void                  g_signal_emit         (gpointer            instance,
-                         guint               signal_id,
-                         GQuark              detail,
-                         ...);
+               guint               signal_id,
+               GQuark              detail,
+               ...);
 GLIB_AVAILABLE_IN_ALL
 void                  g_signal_emit_by_name (gpointer            instance,
-                         const gchar        *detailed_signal,
-                         ...);
+               const gchar        *detailed_signal,
+               ...);
 GLIB_AVAILABLE_IN_ALL
 guint                 g_signal_lookup       (const gchar        *name,
-                         GType               itype);
+               GType               itype);
 GLIB_AVAILABLE_IN_ALL
 const gchar *         g_signal_name         (guint               signal_id);
 GLIB_AVAILABLE_IN_ALL
 void                  g_signal_query        (guint               signal_id,
-                         GSignalQuery       *query);
+               GSignalQuery       *query);
 GLIB_AVAILABLE_IN_ALL
 guint*                g_signal_list_ids     (GType               itype,
-                         guint              *n_ids);
+               guint              *n_ids);
 GLIB_AVAILABLE_IN_ALL
-gboolean          g_signal_parse_name   (const gchar    *detailed_signal,
-                         GType       itype,
-                         guint      *signal_id_p,
-                         GQuark     *detail_p,
-                         gboolean        force_detail_quark);
+gboolean        g_signal_parse_name   (const gchar  *detailed_signal,
+               GType     itype,
+               guint    *signal_id_p,
+               GQuark   *detail_p,
+               gboolean    force_detail_quark);
 GLIB_AVAILABLE_IN_ALL
 GSignalInvocationHint* g_signal_get_invocation_hint (gpointer    instance);
 
 
 /* --- signal emissions --- */
 GLIB_AVAILABLE_IN_ALL
-void    g_signal_stop_emission          (gpointer         instance,
-                         guint        signal_id,
-                         GQuark       detail);
+void  g_signal_stop_emission        (gpointer     instance,
+               guint      signal_id,
+               GQuark     detail);
 GLIB_AVAILABLE_IN_ALL
-void    g_signal_stop_emission_by_name      (gpointer         instance,
-                         const gchar     *detailed_signal);
+void  g_signal_stop_emission_by_name      (gpointer     instance,
+               const gchar   *detailed_signal);
 GLIB_AVAILABLE_IN_ALL
-gulong  g_signal_add_emission_hook      (guint        signal_id,
-                         GQuark       detail,
-                         GSignalEmissionHook  hook_func,
-                         gpointer             hook_data,
-                         GDestroyNotify   data_destroy);
+gulong  g_signal_add_emission_hook      (guint      signal_id,
+               GQuark     detail,
+               GSignalEmissionHook  hook_func,
+               gpointer           hook_data,
+               GDestroyNotify   data_destroy);
 GLIB_AVAILABLE_IN_ALL
-void    g_signal_remove_emission_hook       (guint        signal_id,
-                         gulong       hook_id);
+void  g_signal_remove_emission_hook     (guint      signal_id,
+               gulong     hook_id);
 
 
 /* --- signal handlers --- */
 GLIB_AVAILABLE_IN_ALL
-gboolean g_signal_has_handler_pending         (gpointer       instance,
-                           guint          signal_id,
-                           GQuark         detail,
-                           gboolean       may_be_blocked);
-GLIB_AVAILABLE_IN_ALL
-gulong   g_signal_connect_closure_by_id       (gpointer       instance,
-                           guint          signal_id,
-                           GQuark         detail,
-                           GClosure      *closure,
-                           gboolean       after);
-GLIB_AVAILABLE_IN_ALL
-gulong   g_signal_connect_closure         (gpointer       instance,
-                           const gchar       *detailed_signal,
-                           GClosure      *closure,
-                           gboolean       after);
-GLIB_AVAILABLE_IN_ALL
-gulong   g_signal_connect_data            (gpointer       instance,
-                           const gchar   *detailed_signal,
-                           GCallback      c_handler,
-                           gpointer       data,
-                           GClosureNotify     destroy_data,
-                           GConnectFlags      connect_flags);
-GLIB_AVAILABLE_IN_ALL
-void     g_signal_handler_block           (gpointer       instance,
-                           gulong         handler_id);
-GLIB_AVAILABLE_IN_ALL
-void     g_signal_handler_unblock         (gpointer       instance,
-                           gulong         handler_id);
-GLIB_AVAILABLE_IN_ALL
-void     g_signal_handler_disconnect          (gpointer       instance,
-                           gulong         handler_id);
-GLIB_AVAILABLE_IN_ALL
-gboolean g_signal_handler_is_connected        (gpointer       instance,
-                           gulong         handler_id);
-GLIB_AVAILABLE_IN_ALL
-gulong   g_signal_handler_find            (gpointer       instance,
-                           GSignalMatchType   mask,
-                           guint          signal_id,
-                           GQuark         detail,
-                           GClosure      *closure,
-                           gpointer       func,
-                           gpointer       data);
-GLIB_AVAILABLE_IN_ALL
-guint    g_signal_handlers_block_matched      (gpointer       instance,
-                           GSignalMatchType   mask,
-                           guint          signal_id,
-                           GQuark         detail,
-                           GClosure      *closure,
-                           gpointer       func,
-                           gpointer       data);
-GLIB_AVAILABLE_IN_ALL
-guint    g_signal_handlers_unblock_matched    (gpointer       instance,
-                           GSignalMatchType   mask,
-                           guint          signal_id,
-                           GQuark         detail,
-                           GClosure      *closure,
-                           gpointer       func,
-                           gpointer       data);
-GLIB_AVAILABLE_IN_ALL
-guint    g_signal_handlers_disconnect_matched (gpointer       instance,
-                           GSignalMatchType   mask,
-                           guint          signal_id,
-                           GQuark         detail,
-                           GClosure      *closure,
-                           gpointer       func,
-                           gpointer       data);
+gboolean g_signal_has_handler_pending       (gpointer     instance,
+                 guint      signal_id,
+                 GQuark     detail,
+                 gboolean     may_be_blocked);
+GLIB_AVAILABLE_IN_ALL
+gulong   g_signal_connect_closure_by_id       (gpointer     instance,
+                 guint      signal_id,
+                 GQuark     detail,
+                 GClosure    *closure,
+                 gboolean     after);
+GLIB_AVAILABLE_IN_ALL
+gulong   g_signal_connect_closure       (gpointer     instance,
+                 const gchar       *detailed_signal,
+                 GClosure    *closure,
+                 gboolean     after);
+GLIB_AVAILABLE_IN_ALL
+gulong   g_signal_connect_data          (gpointer     instance,
+                 const gchar   *detailed_signal,
+                 GCallback    c_handler,
+                 gpointer     data,
+                 GClosureNotify   destroy_data,
+                 GConnectFlags    connect_flags);
+GLIB_AVAILABLE_IN_ALL
+void   g_signal_handler_block         (gpointer     instance,
+                 gulong     handler_id);
+GLIB_AVAILABLE_IN_ALL
+void   g_signal_handler_unblock       (gpointer     instance,
+                 gulong     handler_id);
+GLIB_AVAILABLE_IN_ALL
+void   g_signal_handler_disconnect        (gpointer     instance,
+                 gulong     handler_id);
+GLIB_AVAILABLE_IN_ALL
+gboolean g_signal_handler_is_connected        (gpointer     instance,
+                 gulong     handler_id);
+GLIB_AVAILABLE_IN_ALL
+gulong   g_signal_handler_find          (gpointer     instance,
+                 GSignalMatchType   mask,
+                 guint      signal_id,
+                 GQuark     detail,
+                 GClosure    *closure,
+                 gpointer     func,
+                 gpointer     data);
+GLIB_AVAILABLE_IN_ALL
+guint  g_signal_handlers_block_matched      (gpointer     instance,
+                 GSignalMatchType   mask,
+                 guint      signal_id,
+                 GQuark     detail,
+                 GClosure    *closure,
+                 gpointer     func,
+                 gpointer     data);
+GLIB_AVAILABLE_IN_ALL
+guint  g_signal_handlers_unblock_matched    (gpointer     instance,
+                 GSignalMatchType   mask,
+                 guint      signal_id,
+                 GQuark     detail,
+                 GClosure    *closure,
+                 gpointer     func,
+                 gpointer     data);
+GLIB_AVAILABLE_IN_ALL
+guint  g_signal_handlers_disconnect_matched (gpointer     instance,
+                 GSignalMatchType   mask,
+                 guint      signal_id,
+                 GQuark     detail,
+                 GClosure    *closure,
+                 gpointer     func,
+                 gpointer     data);
 
+GLIB_AVAILABLE_IN_2_62
+void   g_clear_signal_handler         (gulong            *handler_id_ptr,
+                 gpointer           instance);
+
+#define  g_clear_signal_handler(handler_id_ptr, instance)           \
+  G_STMT_START {                                                    \
+    G_STATIC_ASSERT (sizeof *(handler_id_ptr) == sizeof (gulong));  \
+    gulong _handler_id = *(handler_id_ptr);                         \
+                                                                    \
+    if (_handler_id > 0)                                            \
+      {                                                             \
+        g_signal_handler_disconnect ((instance), _handler_id);      \
+        *(handler_id_ptr) = 0;                                      \
+      }                                                             \
+  } G_STMT_END                                                      \
+  GLIB_AVAILABLE_MACRO_IN_2_62
 
 /* --- overriding and chaining --- */
 GLIB_AVAILABLE_IN_ALL
 void    g_signal_override_class_closure       (guint              signal_id,
                                                GType              instance_type,
@@ -534,14 +550,14 @@
  *
  * Disconnects all handlers on an instance that match @func and @data.
  *
  * Returns: The number of handlers that matched.
  */
-#define g_signal_handlers_disconnect_by_func(instance, func, data)                      \
-    g_signal_handlers_disconnect_matched ((instance),                               \
-                      (GSignalMatchType) (G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA),   \
-                      0, 0, NULL, (func), (data))
+#define g_signal_handlers_disconnect_by_func(instance, func, data)            \
+    g_signal_handlers_disconnect_matched ((instance),               \
+            (GSignalMatchType) (G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA), \
+            0, 0, NULL, (func), (data))
 
 /**
  * g_signal_handlers_disconnect_by_data:
  * @instance: The instance to remove handlers from
  * @data: the closure data of the handlers' closures
@@ -563,45 +579,45 @@
  *
  * Blocks all handlers on an instance that match @func and @data.
  *
  * Returns: The number of handlers that matched.
  */
-#define g_signal_handlers_block_by_func(instance, func, data)                           \
-    g_signal_handlers_block_matched      ((instance),                               \
-                          (GSignalMatchType) (G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA),   \
-                          0, 0, NULL, (func), (data))
+#define g_signal_handlers_block_by_func(instance, func, data)             \
+    g_signal_handlers_block_matched      ((instance),               \
+                  (GSignalMatchType) (G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA), \
+                  0, 0, NULL, (func), (data))
 /**
  * g_signal_handlers_unblock_by_func:
  * @instance: The instance to unblock handlers from.
  * @func: The C closure callback of the handlers (useless for non-C closures).
  * @data: The closure data of the handlers' closures.
  *
  * Unblocks all handlers on an instance that match @func and @data.
  *
  * Returns: The number of handlers that matched.
  */
-#define g_signal_handlers_unblock_by_func(instance, func, data)                         \
-    g_signal_handlers_unblock_matched    ((instance),                               \
-                          (GSignalMatchType) (G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA),   \
-                          0, 0, NULL, (func), (data))
+#define g_signal_handlers_unblock_by_func(instance, func, data)             \
+    g_signal_handlers_unblock_matched    ((instance),               \
+                  (GSignalMatchType) (G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA), \
+                  0, 0, NULL, (func), (data))
 
 
 GLIB_AVAILABLE_IN_ALL
 gboolean g_signal_accumulator_true_handled (GSignalInvocationHint *ihint,
-                        GValue                *return_accu,
-                        const GValue          *handler_return,
-                        gpointer               dummy);
+              GValue                *return_accu,
+              const GValue          *handler_return,
+              gpointer               dummy);
 
 GLIB_AVAILABLE_IN_ALL
 gboolean g_signal_accumulator_first_wins   (GSignalInvocationHint *ihint,
                                             GValue                *return_accu,
                                             const GValue          *handler_return,
                                             gpointer               dummy);
 
 /*< private >*/
 GLIB_AVAILABLE_IN_ALL
-void     g_signal_handlers_destroy        (gpointer       instance);
-void     _g_signals_destroy           (GType          itype);
+void   g_signal_handlers_destroy        (gpointer     instance);
+void   _g_signals_destroy         (GType      itype);
 
 G_END_DECLS
 
 #endif /* __G_SIGNAL_H__ */
