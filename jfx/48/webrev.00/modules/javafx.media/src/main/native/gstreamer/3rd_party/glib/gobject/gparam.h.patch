diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gparam.h b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gparam.h
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gparam.h
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gparam.h
@@ -21,41 +21,41 @@
 
 #if !defined (__GLIB_GOBJECT_H_INSIDE__) && !defined (GOBJECT_COMPILATION)
 #error "Only <glib-object.h> can be included directly."
 #endif
 
-#include    <gobject/gvalue.h>
+#include  <gobject/gvalue.h>
 
 G_BEGIN_DECLS
 
 /* --- standard type macros --- */
 /**
  * G_TYPE_IS_PARAM:
  * @type: a #GType ID
  *
  * Checks whether @type "is a" %G_TYPE_PARAM.
  */
-#define G_TYPE_IS_PARAM(type)       (G_TYPE_FUNDAMENTAL (type) == G_TYPE_PARAM)
+#define G_TYPE_IS_PARAM(type)   (G_TYPE_FUNDAMENTAL (type) == G_TYPE_PARAM)
 /**
  * G_PARAM_SPEC:
  * @pspec: a valid #GParamSpec
  *
  * Casts a derived #GParamSpec object (e.g. of type #GParamSpecInt) into
  * a #GParamSpec object.
  */
-#define G_PARAM_SPEC(pspec)     (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM, GParamSpec))
+#define G_PARAM_SPEC(pspec)   (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM, GParamSpec))
 /**
  * G_IS_PARAM_SPEC:
  * @pspec: a #GParamSpec
  *
  * Checks whether @pspec "is a" valid #GParamSpec structure of type %G_TYPE_PARAM
  * or derived.
  */
 #if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_42
-#define G_IS_PARAM_SPEC(pspec)      (G_TYPE_CHECK_INSTANCE_FUNDAMENTAL_TYPE ((pspec), G_TYPE_PARAM))
+#define G_IS_PARAM_SPEC(pspec)    (G_TYPE_CHECK_INSTANCE_FUNDAMENTAL_TYPE ((pspec), G_TYPE_PARAM))
 #else
-#define G_IS_PARAM_SPEC(pspec)      (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM))
+#define G_IS_PARAM_SPEC(pspec)    (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM))
 #endif
 /**
  * G_PARAM_SPEC_CLASS:
  * @pclass: a valid #GParamSpecClass
  *
@@ -74,28 +74,28 @@
  * G_PARAM_SPEC_GET_CLASS:
  * @pspec: a valid #GParamSpec
  *
  * Retrieves the #GParamSpecClass of a #GParamSpec.
  */
-#define G_PARAM_SPEC_GET_CLASS(pspec)   (G_TYPE_INSTANCE_GET_CLASS ((pspec), G_TYPE_PARAM, GParamSpecClass))
+#define G_PARAM_SPEC_GET_CLASS(pspec) (G_TYPE_INSTANCE_GET_CLASS ((pspec), G_TYPE_PARAM, GParamSpecClass))
 
 
 /* --- convenience macros --- */
 /**
  * G_PARAM_SPEC_TYPE:
  * @pspec: a valid #GParamSpec
  *
  * Retrieves the #GType of this @pspec.
  */
-#define G_PARAM_SPEC_TYPE(pspec)    (G_TYPE_FROM_INSTANCE (pspec))
+#define G_PARAM_SPEC_TYPE(pspec)  (G_TYPE_FROM_INSTANCE (pspec))
 /**
  * G_PARAM_SPEC_TYPE_NAME:
  * @pspec: a valid #GParamSpec
  *
  * Retrieves the #GType name of this @pspec.
  */
-#define G_PARAM_SPEC_TYPE_NAME(pspec)   (g_type_name (G_PARAM_SPEC_TYPE (pspec)))
+#define G_PARAM_SPEC_TYPE_NAME(pspec) (g_type_name (G_PARAM_SPEC_TYPE (pspec)))
 /**
  * G_PARAM_SPEC_VALUE_TYPE:
  * @pspec: a valid #GParamSpec
  *
  * Retrieves the #GType to initialize a #GValue for this parameter.
@@ -153,15 +153,13 @@
   G_PARAM_WRITABLE            = 1 << 1,
   G_PARAM_READWRITE           = (G_PARAM_READABLE | G_PARAM_WRITABLE),
   G_PARAM_CONSTRUCT       = 1 << 2,
   G_PARAM_CONSTRUCT_ONLY      = 1 << 3,
   G_PARAM_LAX_VALIDATION      = 1 << 4,
-  G_PARAM_STATIC_NAME         = 1 << 5,
-#ifndef G_DISABLE_DEPRECATED
-  G_PARAM_PRIVATE         = G_PARAM_STATIC_NAME,
-#endif
-  G_PARAM_STATIC_NICK         = 1 << 6,
+  G_PARAM_STATIC_NAME       = 1 << 5,
+  G_PARAM_PRIVATE GLIB_DEPRECATED_ENUMERATOR_IN_2_26 = G_PARAM_STATIC_NAME,
+  G_PARAM_STATIC_NICK       = 1 << 6,
   G_PARAM_STATIC_BLURB        = 1 << 7,
   /* User defined flags go here */
   G_PARAM_EXPLICIT_NOTIFY     = 1 << 30,
   /* Avoid warning with -Wpedantic for gcc6 */
   G_PARAM_DEPRECATED          = (gint)(1u << 31)
@@ -179,11 +177,11 @@
 /**
  * G_PARAM_MASK:
  *
  * Mask containing the bits of #GParamSpec.flags which are reserved for GLib.
  */
-#define G_PARAM_MASK        (0x000000ff)
+#define G_PARAM_MASK    (0x000000ff)
 /**
  * G_PARAM_USER_SHIFT:
  *
  * Minimum shift count to be used for user defined flags, to be stored in
  * #GParamSpec.flags. The maximum allowed is 10.
@@ -191,11 +189,11 @@
 #define G_PARAM_USER_SHIFT  (8)
 
 /* --- typedefs & structures --- */
 typedef struct _GParamSpec      GParamSpec;
 typedef struct _GParamSpecClass GParamSpecClass;
-typedef struct _GParameter  GParameter;
+typedef struct _GParameter  GParameter GLIB_DEPRECATED_TYPE_IN_2_54;
 typedef struct _GParamSpecPool  GParamSpecPool;
 /**
  * GParamSpec: (ref-func g_param_spec_ref_sink) (unref-func g_param_spec_uref) (set-value-func g_value_set_param) (get-value-func g_value_get_param)
  * @g_type_instance: private #GTypeInstance portion
  * @name: name of this parameter: always an interned string
@@ -210,19 +208,19 @@
 {
   GTypeInstance  g_type_instance;
 
   const gchar   *name;          /* interned string */
   GParamFlags    flags;
-  GType      value_type;
-  GType      owner_type;    /* class or interface using this property */
+  GType    value_type;
+  GType    owner_type;  /* class or interface using this property */
 
   /*< private >*/
   gchar         *_nick;
   gchar         *_blurb;
-  GData     *qdata;
+  GData   *qdata;
   guint          ref_count;
-  guint      param_id;  /* sort-criteria */
+  guint    param_id;  /* sort-criteria */
 };
 /**
  * GParamSpecClass:
  * @g_type_class: the parent class
  * @value_type: the #GValue type for this parameter
@@ -243,22 +241,22 @@
  */
 struct _GParamSpecClass
 {
   GTypeClass      g_type_class;
 
-  GType       value_type;
+  GType     value_type;
 
-  void          (*finalize)     (GParamSpec   *pspec);
+  void          (*finalize)   (GParamSpec   *pspec);
 
   /* GParam methods */
   void          (*value_set_default)    (GParamSpec   *pspec,
-                     GValue       *value);
+           GValue       *value);
   gboolean      (*value_validate)       (GParamSpec   *pspec,
-                     GValue       *value);
+           GValue       *value);
   gint          (*values_cmp)           (GParamSpec   *pspec,
-                     const GValue *value1,
-                     const GValue *value2);
+           const GValue *value1,
+           const GValue *value2);
   /*< private >*/
   gpointer    dummy[4];
 };
 /**
  * GParameter:
@@ -272,76 +270,76 @@
  */
 struct _GParameter /* auxiliary structure for _setv() variants */
 {
   const gchar *name;
   GValue       value;
-};
+} GLIB_DEPRECATED_TYPE_IN_2_54;
 
 
 /* --- prototypes --- */
 GLIB_AVAILABLE_IN_ALL
-GParamSpec* g_param_spec_ref        (GParamSpec    *pspec);
+GParamSpec* g_param_spec_ref    (GParamSpec    *pspec);
 GLIB_AVAILABLE_IN_ALL
-void        g_param_spec_unref      (GParamSpec    *pspec);
+void    g_param_spec_unref    (GParamSpec    *pspec);
 GLIB_AVAILABLE_IN_ALL
-void        g_param_spec_sink       (GParamSpec    *pspec);
+void    g_param_spec_sink   (GParamSpec    *pspec);
 GLIB_AVAILABLE_IN_ALL
-GParamSpec* g_param_spec_ref_sink       (GParamSpec    *pspec);
+GParamSpec* g_param_spec_ref_sink     (GParamSpec    *pspec);
 GLIB_AVAILABLE_IN_ALL
-gpointer        g_param_spec_get_qdata      (GParamSpec    *pspec,
-                         GQuark         quark);
+gpointer        g_param_spec_get_qdata    (GParamSpec    *pspec,
+             GQuark         quark);
 GLIB_AVAILABLE_IN_ALL
-void            g_param_spec_set_qdata      (GParamSpec    *pspec,
-                         GQuark         quark,
-                         gpointer       data);
+void            g_param_spec_set_qdata    (GParamSpec    *pspec,
+             GQuark         quark,
+             gpointer       data);
 GLIB_AVAILABLE_IN_ALL
 void            g_param_spec_set_qdata_full (GParamSpec    *pspec,
-                         GQuark         quark,
-                         gpointer       data,
-                         GDestroyNotify destroy);
+             GQuark         quark,
+             gpointer       data,
+             GDestroyNotify destroy);
 GLIB_AVAILABLE_IN_ALL
-gpointer        g_param_spec_steal_qdata    (GParamSpec    *pspec,
-                                                 GQuark         quark);
+gpointer        g_param_spec_steal_qdata  (GParamSpec    *pspec,
+             GQuark         quark);
 GLIB_AVAILABLE_IN_ALL
 GParamSpec*     g_param_spec_get_redirect_target (GParamSpec   *pspec);
 
 GLIB_AVAILABLE_IN_ALL
-void        g_param_value_set_default   (GParamSpec    *pspec,
-                         GValue        *value);
+void    g_param_value_set_default (GParamSpec    *pspec,
+             GValue        *value);
 GLIB_AVAILABLE_IN_ALL
-gboolean    g_param_value_defaults      (GParamSpec    *pspec,
-                         GValue        *value);
+gboolean  g_param_value_defaults    (GParamSpec    *pspec,
+             GValue        *value);
 GLIB_AVAILABLE_IN_ALL
-gboolean    g_param_value_validate      (GParamSpec    *pspec,
-                         GValue        *value);
+gboolean  g_param_value_validate    (GParamSpec    *pspec,
+             GValue        *value);
 GLIB_AVAILABLE_IN_ALL
-gboolean    g_param_value_convert       (GParamSpec    *pspec,
-                                                 const GValue  *src_value,
-                         GValue        *dest_value,
-                         gboolean   strict_validation);
+gboolean  g_param_value_convert   (GParamSpec    *pspec,
+             const GValue  *src_value,
+             GValue        *dest_value,
+             gboolean strict_validation);
 GLIB_AVAILABLE_IN_ALL
-gint        g_param_values_cmp      (GParamSpec    *pspec,
-                                                 const GValue  *value1,
-                                                 const GValue  *value2);
+gint    g_param_values_cmp    (GParamSpec    *pspec,
+             const GValue  *value1,
+             const GValue  *value2);
 GLIB_AVAILABLE_IN_ALL
 const gchar *   g_param_spec_get_name           (GParamSpec    *pspec);
 GLIB_AVAILABLE_IN_ALL
 const gchar *   g_param_spec_get_nick           (GParamSpec    *pspec);
 GLIB_AVAILABLE_IN_ALL
 const gchar *   g_param_spec_get_blurb          (GParamSpec    *pspec);
 GLIB_AVAILABLE_IN_ALL
 void            g_value_set_param               (GValue        *value,
-                         GParamSpec    *param);
+             GParamSpec    *param);
 GLIB_AVAILABLE_IN_ALL
 GParamSpec*     g_value_get_param               (const GValue  *value);
 GLIB_AVAILABLE_IN_ALL
 GParamSpec*     g_value_dup_param               (const GValue  *value);
 
 
 GLIB_AVAILABLE_IN_ALL
 void           g_value_take_param               (GValue        *value,
-                             GParamSpec    *param);
+                   GParamSpec    *param);
 GLIB_DEPRECATED_FOR(g_value_take_param)
 void           g_value_set_param_take_ownership (GValue        *value,
                                                  GParamSpec    *param);
 GLIB_AVAILABLE_IN_2_36
 const GValue *  g_param_spec_get_default_value  (GParamSpec    *pspec);
@@ -378,61 +376,61 @@
 struct _GParamSpecTypeInfo
 {
   /* type system portion */
   guint16         instance_size;                               /* obligatory */
   guint16         n_preallocs;                                 /* optional */
-  void      (*instance_init)    (GParamSpec   *pspec); /* optional */
+  void    (*instance_init)  (GParamSpec   *pspec); /* optional */
 
   /* class portion */
-  GType           value_type;                      /* obligatory */
+  GType           value_type;              /* obligatory */
   void          (*finalize)             (GParamSpec   *pspec); /* optional */
   void          (*value_set_default)    (GParamSpec   *pspec,  /* recommended */
-                     GValue       *value);
+           GValue       *value);
   gboolean      (*value_validate)       (GParamSpec   *pspec,  /* optional */
-                     GValue       *value);
+           GValue       *value);
   gint          (*values_cmp)           (GParamSpec   *pspec,  /* recommended */
-                     const GValue *value1,
-                     const GValue *value2);
+           const GValue *value1,
+           const GValue *value2);
 };
 GLIB_AVAILABLE_IN_ALL
-GType   g_param_type_register_static    (const gchar          *name,
-                                         const GParamSpecTypeInfo *pspec_info);
+GType g_param_type_register_static  (const gchar      *name,
+           const GParamSpecTypeInfo *pspec_info);
 
 /* For registering builting types */
 GType  _g_param_type_register_static_constant (const gchar              *name,
-                           const GParamSpecTypeInfo *pspec_info,
-                           GType                     opt_type);
+                 const GParamSpecTypeInfo *pspec_info,
+                 GType                     opt_type);
 
 
 /* --- protected --- */
 GLIB_AVAILABLE_IN_ALL
-gpointer    g_param_spec_internal       (GType          param_type,
-                                                 const gchar   *name,
-                                                 const gchar   *nick,
-                                                 const gchar   *blurb,
-                                                 GParamFlags    flags);
+gpointer  g_param_spec_internal   (GType          param_type,
+             const gchar   *name,
+             const gchar   *nick,
+             const gchar   *blurb,
+             GParamFlags    flags);
 GLIB_AVAILABLE_IN_ALL
-GParamSpecPool* g_param_spec_pool_new       (gboolean   type_prefixing);
+GParamSpecPool* g_param_spec_pool_new   (gboolean type_prefixing);
 GLIB_AVAILABLE_IN_ALL
-void        g_param_spec_pool_insert    (GParamSpecPool *pool,
-                         GParamSpec *pspec,
-                         GType       owner_type);
+void    g_param_spec_pool_insert  (GParamSpecPool *pool,
+             GParamSpec *pspec,
+             GType     owner_type);
 GLIB_AVAILABLE_IN_ALL
-void        g_param_spec_pool_remove    (GParamSpecPool *pool,
-                         GParamSpec *pspec);
+void    g_param_spec_pool_remove  (GParamSpecPool *pool,
+             GParamSpec *pspec);
 GLIB_AVAILABLE_IN_ALL
-GParamSpec* g_param_spec_pool_lookup    (GParamSpecPool *pool,
-                         const gchar    *param_name,
-                         GType       owner_type,
-                         gboolean    walk_ancestors);
+GParamSpec* g_param_spec_pool_lookup  (GParamSpecPool *pool,
+             const gchar  *param_name,
+             GType     owner_type,
+             gboolean  walk_ancestors);
 GLIB_AVAILABLE_IN_ALL
-GList*      g_param_spec_pool_list_owned    (GParamSpecPool *pool,
-                         GType       owner_type);
+GList*    g_param_spec_pool_list_owned  (GParamSpecPool *pool,
+             GType     owner_type);
 GLIB_AVAILABLE_IN_ALL
-GParamSpec**    g_param_spec_pool_list      (GParamSpecPool *pool,
-                         GType       owner_type,
-                         guint      *n_pspecs_p);
+GParamSpec**  g_param_spec_pool_list    (GParamSpecPool *pool,
+             GType     owner_type,
+             guint    *n_pspecs_p);
 
 
 /* contracts:
  *
  * gboolean value_validate (GParamSpec *pspec,
