diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstinfo.h b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstinfo.h
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstinfo.h
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstinfo.h
@@ -151,30 +151,30 @@
  * These are some terminal style flags you can use when creating your
  * debugging categories to make them stand out in debugging output.
  */
 typedef enum { /*< flags >*/
   /* colors */
-  GST_DEBUG_FG_BLACK        = 0x0000,
-  GST_DEBUG_FG_RED      = 0x0001,
-  GST_DEBUG_FG_GREEN        = 0x0002,
-  GST_DEBUG_FG_YELLOW       = 0x0003,
-  GST_DEBUG_FG_BLUE     = 0x0004,
-  GST_DEBUG_FG_MAGENTA      = 0x0005,
-  GST_DEBUG_FG_CYAN     = 0x0006,
-  GST_DEBUG_FG_WHITE        = 0x0007,
+  GST_DEBUG_FG_BLACK    = 0x0000,
+  GST_DEBUG_FG_RED    = 0x0001,
+  GST_DEBUG_FG_GREEN    = 0x0002,
+  GST_DEBUG_FG_YELLOW   = 0x0003,
+  GST_DEBUG_FG_BLUE   = 0x0004,
+  GST_DEBUG_FG_MAGENTA    = 0x0005,
+  GST_DEBUG_FG_CYAN   = 0x0006,
+  GST_DEBUG_FG_WHITE    = 0x0007,
   /* background colors */
-  GST_DEBUG_BG_BLACK        = 0x0000,
-  GST_DEBUG_BG_RED      = 0x0010,
-  GST_DEBUG_BG_GREEN        = 0x0020,
-  GST_DEBUG_BG_YELLOW       = 0x0030,
-  GST_DEBUG_BG_BLUE     = 0x0040,
-  GST_DEBUG_BG_MAGENTA      = 0x0050,
-  GST_DEBUG_BG_CYAN     = 0x0060,
-  GST_DEBUG_BG_WHITE        = 0x0070,
+  GST_DEBUG_BG_BLACK    = 0x0000,
+  GST_DEBUG_BG_RED    = 0x0010,
+  GST_DEBUG_BG_GREEN    = 0x0020,
+  GST_DEBUG_BG_YELLOW   = 0x0030,
+  GST_DEBUG_BG_BLUE   = 0x0040,
+  GST_DEBUG_BG_MAGENTA    = 0x0050,
+  GST_DEBUG_BG_CYAN   = 0x0060,
+  GST_DEBUG_BG_WHITE    = 0x0070,
   /* other formats */
-  GST_DEBUG_BOLD        = 0x0100,
-  GST_DEBUG_UNDERLINE       = 0x0200
+  GST_DEBUG_BOLD    = 0x0100,
+  GST_DEBUG_UNDERLINE   = 0x0200
 } GstDebugColorFlags;
 
 /**
  * GstStackTraceFlags:
  * @GST_STACK_TRACE_SHOW_FULL: Try to retrieve as much information as
@@ -198,13 +198,13 @@
   GST_DEBUG_COLOR_MODE_ON   = 1,
   GST_DEBUG_COLOR_MODE_UNIX = 2
 } GstDebugColorMode;
 
 
-#define GST_DEBUG_FG_MASK   (0x000F)
-#define GST_DEBUG_BG_MASK   (0x00F0)
-#define GST_DEBUG_FORMAT_MASK   (0xFF00)
+#define GST_DEBUG_FG_MASK (0x000F)
+#define GST_DEBUG_BG_MASK (0x00F0)
+#define GST_DEBUG_FORMAT_MASK (0xFF00)
 
 typedef struct _GstDebugCategory GstDebugCategory;
 /**
  * GstDebugCategory:
  *
@@ -212,14 +212,14 @@
  * #GST_DEBUG_CATEGORY_INIT, its values can't be changed anymore.
  */
 struct _GstDebugCategory {
   /*< private >*/
   gint                  threshold;
-  guint         color;      /* see defines above */
+  guint     color;    /* see defines above */
 
-  const gchar *     name;
-  const gchar *     description;
+  const gchar *   name;
+  const gchar *   description;
 };
 
 /********** some convenience macros for debugging **********/
 
 /**
@@ -251,11 +251,11 @@
 
 /**
  * GST_FUNCTION:
  *
  * This macro should evaluate to the name of the current function and be should
- * be defined when configuring your project, as it is compiler dependant. If it
+ * be defined when configuring your project, as it is compiler dependent. If it
  * is not defined, some default value is used. It is used to provide debugging
  * output with the function name of the message.
  *
  * Note that this is different from G_STRFUNC as we do not want the full
  * function signature in C++ code.
@@ -269,11 +269,11 @@
 #  define GST_FUNCTION     ((const char*) ("???"))
 #endif
 #endif /* ifndef GST_FUNCTION */
 
 /**
- * GST_PTR_FORMAT:
+ * GST_PTR_FORMAT: (skip):
  *
  * printf format type used to debug GStreamer types. You can use this in
  * combination with GStreamer's debug logging system as well as the functions
  * gst_info_vasprintf(), gst_info_strdup_vprintf() and gst_info_strdup_printf()
  * to pretty-print the following types: #GstCaps, #GstStructure,
@@ -285,11 +285,11 @@
  * This can only be used on types whose size is >= sizeof(gpointer).
  */
 #define GST_PTR_FORMAT     "p\aA"
 
 /**
- * GST_SEGMENT_FORMAT:
+ * GST_SEGMENT_FORMAT: (skip):
  *
  * printf format type used to debug GStreamer segments. You can use this in
  * combination with GStreamer's debug logging system as well as the functions
  * gst_info_vasprintf(), gst_info_strdup_vprintf() and gst_info_strdup_printf()
  * to pretty-print #GstSegment structures.
@@ -322,11 +322,11 @@
                                  GObject          * object,
                                  GstDebugMessage  * message,
                                  gpointer           user_data);
 
 GST_API
-void            gst_debug_log            (GstDebugCategory * category,
+void        gst_debug_log            (GstDebugCategory * category,
                                           GstDebugLevel      level,
                                           const gchar      * file,
                                           const gchar      * function,
                                           gint               line,
                                           GObject          * object,
@@ -364,20 +364,20 @@
 
 /* we define this to avoid a compiler warning regarding a cast from a function
  * pointer to a void pointer
  * (see https://bugzilla.gnome.org/show_bug.cgi?id=309253)
  */
-typedef void (* GstDebugFuncPtr)    (void);
+typedef void (* GstDebugFuncPtr)  (void);
 
 /* do no use these functions, use the GST_DEBUG*_FUNCPTR macros */
 
 GST_API
-void    _gst_debug_register_funcptr (GstDebugFuncPtr    func,
-                     const gchar *      ptrname);
+void  _gst_debug_register_funcptr (GstDebugFuncPtr  func,
+           const gchar *    ptrname);
 GST_API
 const gchar *
-    _gst_debug_nameof_funcptr   (GstDebugFuncPtr    func) G_GNUC_NO_INSTRUMENT;
+  _gst_debug_nameof_funcptr (GstDebugFuncPtr  func) G_GNUC_NO_INSTRUMENT;
 
 
 GST_API
 const gchar   * gst_debug_message_get    (GstDebugMessage  * message);
 
@@ -439,33 +439,33 @@
 GST_API
 void            gst_debug_unset_threshold_for_name   (const gchar * name);
 
 
 GST_API
-void            gst_debug_category_free              (GstDebugCategory *    category);
+void            gst_debug_category_free              (GstDebugCategory *  category);
 
 GST_API
-void            gst_debug_category_set_threshold     (GstDebugCategory *    category,
-                                                      GstDebugLevel     level);
+void            gst_debug_category_set_threshold     (GstDebugCategory *  category,
+                                                      GstDebugLevel   level);
 
 GST_API
-void            gst_debug_category_reset_threshold   (GstDebugCategory *    category);
+void            gst_debug_category_reset_threshold   (GstDebugCategory *  category);
 
 GST_API
-GstDebugLevel   gst_debug_category_get_threshold     (GstDebugCategory *    category);
+GstDebugLevel   gst_debug_category_get_threshold     (GstDebugCategory *  category);
 
 GST_API
-const gchar *   gst_debug_category_get_name          (GstDebugCategory *    category);
+const gchar *   gst_debug_category_get_name          (GstDebugCategory *  category);
 
 GST_API
-guint           gst_debug_category_get_color         (GstDebugCategory *    category);
+guint           gst_debug_category_get_color         (GstDebugCategory *  category);
 
 GST_API
-const gchar *   gst_debug_category_get_description   (GstDebugCategory *    category);
+const gchar *   gst_debug_category_get_description   (GstDebugCategory *  category);
 
 GST_API
-GSList *        gst_debug_get_all_categories    (void);
+GSList *        gst_debug_get_all_categories  (void);
 
 
 GST_API
 gchar * gst_debug_construct_term_color (guint colorinfo);
 
@@ -566,12 +566,12 @@
  * > uses the GST prefix so GStreamer categories look like "GST_STATES". Be sure
  * > to include uppercase letters.
  *
  */
 #define GST_DEBUG_CATEGORY_INIT(cat,name,color,description) G_STMT_START{\
-  if (cat == NULL)                          \
-    cat = _gst_debug_category_new (name,color,description);     \
+  if (cat == NULL)              \
+    cat = _gst_debug_category_new (name,color,description);   \
 }G_STMT_END
 
 /**
  * GST_DEBUG_CATEGORY_GET:
  * @cat: the category to initialize.
@@ -590,18 +590,18 @@
  * GST_DEBUG_CATEGORY_GET (GST_CAT_PERFORMANCE, "GST_PERFORMANCE");
  * ]|
  */
 #ifdef GST_CAT_DEFAULT
 #define GST_DEBUG_CATEGORY_GET(cat,name)  G_STMT_START{\
-  cat = _gst_debug_get_category (name);         \
-  if (!cat) {                       \
-    cat = GST_CAT_DEFAULT;              \
-  }                         \
+  cat = _gst_debug_get_category (name);     \
+  if (!cat) {           \
+    cat = GST_CAT_DEFAULT;        \
+  }             \
 }G_STMT_END
 #else
 #define GST_DEBUG_CATEGORY_GET(cat,name)  G_STMT_START{\
-  cat = _gst_debug_get_category (name);         \
+  cat = _gst_debug_get_category (name);     \
 }G_STMT_END
 #endif
 
 /**
  * GST_CAT_DEFAULT:
@@ -645,23 +645,23 @@
  *
  * There is no need to finish the end of the debug message with a newline
  * character, a newline character will be added automatically.
  */
 #ifdef G_HAVE_ISO_VARARGS
-#define GST_CAT_LEVEL_LOG(cat,level,object,...) G_STMT_START{       \
-  if (G_UNLIKELY ((level) <= GST_LEVEL_MAX && (level) <= _gst_debug_min)) {                     \
-    gst_debug_log ((cat), (level), __FILE__, GST_FUNCTION, __LINE__,    \
-        (GObject *) (object), __VA_ARGS__);             \
-  }                                 \
+#define GST_CAT_LEVEL_LOG(cat,level,object,...) G_STMT_START{   \
+  if (G_UNLIKELY ((level) <= GST_LEVEL_MAX && (level) <= _gst_debug_min)) {           \
+    gst_debug_log ((cat), (level), __FILE__, GST_FUNCTION, __LINE__,  \
+        (GObject *) (object), __VA_ARGS__);       \
+  }                 \
 }G_STMT_END
 #else /* G_HAVE_GNUC_VARARGS */
 #ifdef G_HAVE_GNUC_VARARGS
-#define GST_CAT_LEVEL_LOG(cat,level,object,args...) G_STMT_START{   \
-  if (G_UNLIKELY ((level) <= GST_LEVEL_MAX && (level) <= _gst_debug_min)) {                     \
-    gst_debug_log ((cat), (level), __FILE__, GST_FUNCTION, __LINE__,    \
-        (GObject *) (object), ##args );                 \
-  }                                 \
+#define GST_CAT_LEVEL_LOG(cat,level,object,args...) G_STMT_START{ \
+  if (G_UNLIKELY ((level) <= GST_LEVEL_MAX && (level) <= _gst_debug_min)) {           \
+    gst_debug_log ((cat), (level), __FILE__, GST_FUNCTION, __LINE__,  \
+        (GObject *) (object), ##args );         \
+  }                 \
 }G_STMT_END
 #else /* no variadic macros, use inline */
 static inline void
 GST_CAT_LEVEL_LOG_valist (GstDebugCategory * cat,
     GstDebugLevel level, gpointer object, const char *format, va_list varargs)
@@ -687,12 +687,12 @@
 
 /* This one doesn't have varargs in the macro, so it's different than all the
  * other macros and hence in a separate block right here. Docs chunks are
  * with the other doc chunks below though. */
 #define __GST_CAT_MEMDUMP_LOG(cat,object,msg,data,length) G_STMT_START{       \
-    if (G_UNLIKELY (GST_LEVEL_MEMDUMP <= GST_LEVEL_MAX &&             \
-            GST_LEVEL_MEMDUMP <= _gst_debug_min)) {           \
+    if (G_UNLIKELY (GST_LEVEL_MEMDUMP <= GST_LEVEL_MAX &&         \
+        GST_LEVEL_MEMDUMP <= _gst_debug_min)) {         \
     _gst_debug_dump_mem ((cat), __FILE__, GST_FUNCTION, __LINE__,             \
         (GObject *) (object), (msg), (data), (length));                       \
   }                                                                           \
 }G_STMT_END
 
@@ -1045,76 +1045,76 @@
  * character, a newline character will be added automatically.
  */
 
 #ifdef G_HAVE_ISO_VARARGS
 
-#define GST_CAT_ERROR_OBJECT(cat,obj,...)   GST_CAT_LEVEL_LOG (cat, GST_LEVEL_ERROR,   obj,  __VA_ARGS__)
+#define GST_CAT_ERROR_OBJECT(cat,obj,...) GST_CAT_LEVEL_LOG (cat, GST_LEVEL_ERROR,   obj,  __VA_ARGS__)
 #define GST_CAT_WARNING_OBJECT(cat,obj,...) GST_CAT_LEVEL_LOG (cat, GST_LEVEL_WARNING, obj,  __VA_ARGS__)
-#define GST_CAT_INFO_OBJECT(cat,obj,...)    GST_CAT_LEVEL_LOG (cat, GST_LEVEL_INFO,    obj,  __VA_ARGS__)
-#define GST_CAT_DEBUG_OBJECT(cat,obj,...)   GST_CAT_LEVEL_LOG (cat, GST_LEVEL_DEBUG,   obj,  __VA_ARGS__)
-#define GST_CAT_LOG_OBJECT(cat,obj,...)     GST_CAT_LEVEL_LOG (cat, GST_LEVEL_LOG,     obj,  __VA_ARGS__)
-#define GST_CAT_FIXME_OBJECT(cat,obj,...)   GST_CAT_LEVEL_LOG (cat, GST_LEVEL_FIXME,   obj,  __VA_ARGS__)
-#define GST_CAT_TRACE_OBJECT(cat,obj,...)   GST_CAT_LEVEL_LOG (cat, GST_LEVEL_TRACE,   obj,  __VA_ARGS__)
-
-#define GST_CAT_ERROR(cat,...)          GST_CAT_LEVEL_LOG (cat, GST_LEVEL_ERROR,   NULL, __VA_ARGS__)
-#define GST_CAT_WARNING(cat,...)        GST_CAT_LEVEL_LOG (cat, GST_LEVEL_WARNING, NULL, __VA_ARGS__)
-#define GST_CAT_INFO(cat,...)           GST_CAT_LEVEL_LOG (cat, GST_LEVEL_INFO,    NULL, __VA_ARGS__)
-#define GST_CAT_DEBUG(cat,...)          GST_CAT_LEVEL_LOG (cat, GST_LEVEL_DEBUG,   NULL, __VA_ARGS__)
-#define GST_CAT_LOG(cat,...)            GST_CAT_LEVEL_LOG (cat, GST_LEVEL_LOG,     NULL, __VA_ARGS__)
-#define GST_CAT_FIXME(cat,...)          GST_CAT_LEVEL_LOG (cat, GST_LEVEL_FIXME,   NULL, __VA_ARGS__)
-#define GST_CAT_TRACE(cat,...)      GST_CAT_LEVEL_LOG (cat, GST_LEVEL_TRACE,   NULL, __VA_ARGS__)
-
-#define GST_ERROR_OBJECT(obj,...)   GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_ERROR,   obj,  __VA_ARGS__)
+#define GST_CAT_INFO_OBJECT(cat,obj,...)  GST_CAT_LEVEL_LOG (cat, GST_LEVEL_INFO,    obj,  __VA_ARGS__)
+#define GST_CAT_DEBUG_OBJECT(cat,obj,...) GST_CAT_LEVEL_LOG (cat, GST_LEVEL_DEBUG,   obj,  __VA_ARGS__)
+#define GST_CAT_LOG_OBJECT(cat,obj,...)   GST_CAT_LEVEL_LOG (cat, GST_LEVEL_LOG,     obj,  __VA_ARGS__)
+#define GST_CAT_FIXME_OBJECT(cat,obj,...) GST_CAT_LEVEL_LOG (cat, GST_LEVEL_FIXME,   obj,  __VA_ARGS__)
+#define GST_CAT_TRACE_OBJECT(cat,obj,...) GST_CAT_LEVEL_LOG (cat, GST_LEVEL_TRACE,   obj,  __VA_ARGS__)
+
+#define GST_CAT_ERROR(cat,...)      GST_CAT_LEVEL_LOG (cat, GST_LEVEL_ERROR,   NULL, __VA_ARGS__)
+#define GST_CAT_WARNING(cat,...)    GST_CAT_LEVEL_LOG (cat, GST_LEVEL_WARNING, NULL, __VA_ARGS__)
+#define GST_CAT_INFO(cat,...)     GST_CAT_LEVEL_LOG (cat, GST_LEVEL_INFO,    NULL, __VA_ARGS__)
+#define GST_CAT_DEBUG(cat,...)      GST_CAT_LEVEL_LOG (cat, GST_LEVEL_DEBUG,   NULL, __VA_ARGS__)
+#define GST_CAT_LOG(cat,...)      GST_CAT_LEVEL_LOG (cat, GST_LEVEL_LOG,     NULL, __VA_ARGS__)
+#define GST_CAT_FIXME(cat,...)      GST_CAT_LEVEL_LOG (cat, GST_LEVEL_FIXME,   NULL, __VA_ARGS__)
+#define GST_CAT_TRACE(cat,...)    GST_CAT_LEVEL_LOG (cat, GST_LEVEL_TRACE,   NULL, __VA_ARGS__)
+
+#define GST_ERROR_OBJECT(obj,...) GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_ERROR,   obj,  __VA_ARGS__)
 #define GST_WARNING_OBJECT(obj,...) GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_WARNING, obj,  __VA_ARGS__)
-#define GST_INFO_OBJECT(obj,...)    GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_INFO,    obj,  __VA_ARGS__)
-#define GST_DEBUG_OBJECT(obj,...)   GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_DEBUG,   obj,  __VA_ARGS__)
-#define GST_LOG_OBJECT(obj,...)     GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_LOG,     obj,  __VA_ARGS__)
-#define GST_FIXME_OBJECT(obj,...)   GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_FIXME,   obj,  __VA_ARGS__)
-#define GST_TRACE_OBJECT(obj,...)   GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_TRACE,   obj,  __VA_ARGS__)
-
-#define GST_ERROR(...)          GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_ERROR,   NULL, __VA_ARGS__)
-#define GST_WARNING(...)        GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_WARNING, NULL, __VA_ARGS__)
-#define GST_INFO(...)           GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_INFO,    NULL, __VA_ARGS__)
-#define GST_DEBUG(...)          GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_DEBUG,   NULL, __VA_ARGS__)
-#define GST_LOG(...)            GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_LOG,     NULL, __VA_ARGS__)
-#define GST_FIXME(...)          GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_FIXME,   NULL, __VA_ARGS__)
-#define GST_TRACE(...)      GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_TRACE,   NULL, __VA_ARGS__)
+#define GST_INFO_OBJECT(obj,...)  GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_INFO,    obj,  __VA_ARGS__)
+#define GST_DEBUG_OBJECT(obj,...) GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_DEBUG,   obj,  __VA_ARGS__)
+#define GST_LOG_OBJECT(obj,...)   GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_LOG,     obj,  __VA_ARGS__)
+#define GST_FIXME_OBJECT(obj,...) GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_FIXME,   obj,  __VA_ARGS__)
+#define GST_TRACE_OBJECT(obj,...) GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_TRACE,   obj,  __VA_ARGS__)
+
+#define GST_ERROR(...)      GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_ERROR,   NULL, __VA_ARGS__)
+#define GST_WARNING(...)    GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_WARNING, NULL, __VA_ARGS__)
+#define GST_INFO(...)     GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_INFO,    NULL, __VA_ARGS__)
+#define GST_DEBUG(...)      GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_DEBUG,   NULL, __VA_ARGS__)
+#define GST_LOG(...)      GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_LOG,     NULL, __VA_ARGS__)
+#define GST_FIXME(...)      GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_FIXME,   NULL, __VA_ARGS__)
+#define GST_TRACE(...)    GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_TRACE,   NULL, __VA_ARGS__)
 
 #else
 #ifdef G_HAVE_GNUC_VARARGS
 
-#define GST_CAT_ERROR_OBJECT(cat,obj,args...)   GST_CAT_LEVEL_LOG (cat, GST_LEVEL_ERROR,   obj,  ##args )
+#define GST_CAT_ERROR_OBJECT(cat,obj,args...) GST_CAT_LEVEL_LOG (cat, GST_LEVEL_ERROR,   obj,  ##args )
 #define GST_CAT_WARNING_OBJECT(cat,obj,args...) GST_CAT_LEVEL_LOG (cat, GST_LEVEL_WARNING, obj,  ##args )
-#define GST_CAT_INFO_OBJECT(cat,obj,args...)    GST_CAT_LEVEL_LOG (cat, GST_LEVEL_INFO,    obj,  ##args )
-#define GST_CAT_DEBUG_OBJECT(cat,obj,args...)   GST_CAT_LEVEL_LOG (cat, GST_LEVEL_DEBUG,   obj,  ##args )
+#define GST_CAT_INFO_OBJECT(cat,obj,args...)  GST_CAT_LEVEL_LOG (cat, GST_LEVEL_INFO,    obj,  ##args )
+#define GST_CAT_DEBUG_OBJECT(cat,obj,args...) GST_CAT_LEVEL_LOG (cat, GST_LEVEL_DEBUG,   obj,  ##args )
 #define GST_CAT_LOG_OBJECT(cat,obj,args...) GST_CAT_LEVEL_LOG (cat, GST_LEVEL_LOG,     obj,  ##args )
-#define GST_CAT_FIXME_OBJECT(cat,obj,args...)   GST_CAT_LEVEL_LOG (cat, GST_LEVEL_FIXME,   obj,  ##args )
-#define GST_CAT_TRACE_OBJECT(cat,obj,args...)   GST_CAT_LEVEL_LOG (cat, GST_LEVEL_TRACE,   obj,  ##args )
-
-#define GST_CAT_ERROR(cat,args...)      GST_CAT_LEVEL_LOG (cat, GST_LEVEL_ERROR,   NULL, ##args )
-#define GST_CAT_WARNING(cat,args...)        GST_CAT_LEVEL_LOG (cat, GST_LEVEL_WARNING, NULL, ##args )
-#define GST_CAT_INFO(cat,args...)       GST_CAT_LEVEL_LOG (cat, GST_LEVEL_INFO,    NULL, ##args )
-#define GST_CAT_DEBUG(cat,args...)      GST_CAT_LEVEL_LOG (cat, GST_LEVEL_DEBUG,   NULL, ##args )
-#define GST_CAT_LOG(cat,args...)        GST_CAT_LEVEL_LOG (cat, GST_LEVEL_LOG,     NULL, ##args )
-#define GST_CAT_FIXME(cat,args...)      GST_CAT_LEVEL_LOG (cat, GST_LEVEL_FIXME,   NULL, ##args )
-#define GST_CAT_TRACE(cat,args...)      GST_CAT_LEVEL_LOG (cat, GST_LEVEL_TRACE,   NULL, ##args )
-
-#define GST_ERROR_OBJECT(obj,args...)   GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_ERROR,   obj,  ##args )
+#define GST_CAT_FIXME_OBJECT(cat,obj,args...) GST_CAT_LEVEL_LOG (cat, GST_LEVEL_FIXME,   obj,  ##args )
+#define GST_CAT_TRACE_OBJECT(cat,obj,args...) GST_CAT_LEVEL_LOG (cat, GST_LEVEL_TRACE,   obj,  ##args )
+
+#define GST_CAT_ERROR(cat,args...)    GST_CAT_LEVEL_LOG (cat, GST_LEVEL_ERROR,   NULL, ##args )
+#define GST_CAT_WARNING(cat,args...)    GST_CAT_LEVEL_LOG (cat, GST_LEVEL_WARNING, NULL, ##args )
+#define GST_CAT_INFO(cat,args...)   GST_CAT_LEVEL_LOG (cat, GST_LEVEL_INFO,    NULL, ##args )
+#define GST_CAT_DEBUG(cat,args...)    GST_CAT_LEVEL_LOG (cat, GST_LEVEL_DEBUG,   NULL, ##args )
+#define GST_CAT_LOG(cat,args...)    GST_CAT_LEVEL_LOG (cat, GST_LEVEL_LOG,     NULL, ##args )
+#define GST_CAT_FIXME(cat,args...)    GST_CAT_LEVEL_LOG (cat, GST_LEVEL_FIXME,   NULL, ##args )
+#define GST_CAT_TRACE(cat,args...)    GST_CAT_LEVEL_LOG (cat, GST_LEVEL_TRACE,   NULL, ##args )
+
+#define GST_ERROR_OBJECT(obj,args...) GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_ERROR,   obj,  ##args )
 #define GST_WARNING_OBJECT(obj,args...) GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_WARNING, obj,  ##args )
-#define GST_INFO_OBJECT(obj,args...)    GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_INFO,    obj,  ##args )
-#define GST_DEBUG_OBJECT(obj,args...)   GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_DEBUG,   obj,  ##args )
+#define GST_INFO_OBJECT(obj,args...)  GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_INFO,    obj,  ##args )
+#define GST_DEBUG_OBJECT(obj,args...) GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_DEBUG,   obj,  ##args )
 #define GST_LOG_OBJECT(obj,args...) GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_LOG,     obj,  ##args )
-#define GST_FIXME_OBJECT(obj,args...)   GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_FIXME,   obj,  ##args )
-#define GST_TRACE_OBJECT(obj,args...)   GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_TRACE,   obj,  ##args )
+#define GST_FIXME_OBJECT(obj,args...) GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_FIXME,   obj,  ##args )
+#define GST_TRACE_OBJECT(obj,args...) GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_TRACE,   obj,  ##args )
 
-#define GST_ERROR(args...)      GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_ERROR,   NULL, ##args )
-#define GST_WARNING(args...)        GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_WARNING, NULL, ##args )
-#define GST_INFO(args...)       GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_INFO,    NULL, ##args )
-#define GST_DEBUG(args...)      GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_DEBUG,   NULL, ##args )
-#define GST_LOG(args...)        GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_LOG,     NULL, ##args )
-#define GST_FIXME(args...)      GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_FIXME,   NULL, ##args )
-#define GST_TRACE(args...)      GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_TRACE,   NULL, ##args )
+#define GST_ERROR(args...)    GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_ERROR,   NULL, ##args )
+#define GST_WARNING(args...)    GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_WARNING, NULL, ##args )
+#define GST_INFO(args...)   GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_INFO,    NULL, ##args )
+#define GST_DEBUG(args...)    GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_DEBUG,   NULL, ##args )
+#define GST_LOG(args...)    GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_LOG,     NULL, ##args )
+#define GST_FIXME(args...)    GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_FIXME,   NULL, ##args )
+#define GST_TRACE(args...)    GST_CAT_LEVEL_LOG (GST_CAT_DEFAULT, GST_LEVEL_TRACE,   NULL, ##args )
 
 #else
 /* no variadic macros, use inline */
 static inline void
 GST_CAT_ERROR_OBJECT (GstDebugCategory * cat, gpointer obj, const char *format,
@@ -1470,121 +1470,121 @@
 #  pragma GCC poison _gst_debug_category_new
 #endif
 
 #define _gst_debug_min GST_LEVEL_NONE
 
-#define gst_debug_set_default_threshold(level)      G_STMT_START{ }G_STMT_END
-#define gst_debug_get_default_threshold()       (GST_LEVEL_NONE)
+#define gst_debug_set_default_threshold(level)    G_STMT_START{ }G_STMT_END
+#define gst_debug_get_default_threshold()   (GST_LEVEL_NONE)
 
-#define gst_debug_level_get_name(level)             ("NONE")
-#define gst_debug_message_get(message)              ("")
+#define gst_debug_level_get_name(level)       ("NONE")
+#define gst_debug_message_get(message)        ("")
 #define gst_debug_add_log_function(func,data,notify)    G_STMT_START{ }G_STMT_END
-#define gst_debug_set_active(active)            G_STMT_START{ }G_STMT_END
-#define gst_debug_is_active()               (FALSE)
-#define gst_debug_set_colored(colored)          G_STMT_START{ }G_STMT_END
-#define gst_debug_set_color_mode(mode)          G_STMT_START{ }G_STMT_END
+#define gst_debug_set_active(active)      G_STMT_START{ }G_STMT_END
+#define gst_debug_is_active()       (FALSE)
+#define gst_debug_set_colored(colored)      G_STMT_START{ }G_STMT_END
+#define gst_debug_set_color_mode(mode)      G_STMT_START{ }G_STMT_END
 #define gst_debug_set_color_mode_from_string(mode)  G_STMT_START{ }G_STMT_END
-#define gst_debug_is_colored()              (FALSE)
-#define gst_debug_get_color_mode()          (GST_DEBUG_COLOR_MODE_OFF)
-#define gst_debug_set_default_threshold(level)      G_STMT_START{ }G_STMT_END
-#define gst_debug_get_default_threshold()       (GST_LEVEL_NONE)
-#define gst_debug_set_threshold_for_name(name,level)    G_STMT_START{ }G_STMT_END
-#define gst_debug_unset_threshold_for_name(name)    G_STMT_START{ }G_STMT_END
+#define gst_debug_is_colored()        (FALSE)
+#define gst_debug_get_color_mode()      (GST_DEBUG_COLOR_MODE_OFF)
+#define gst_debug_set_default_threshold(level)    G_STMT_START{ }G_STMT_END
+#define gst_debug_get_default_threshold()   (GST_LEVEL_NONE)
+#define gst_debug_set_threshold_for_name(name,level)  G_STMT_START{ }G_STMT_END
+#define gst_debug_unset_threshold_for_name(name)  G_STMT_START{ }G_STMT_END
 
 /* we are using dummy function prototypes here to eat ';' as these macros are
  * used outside of functions */
-#define GST_DEBUG_CATEGORY(var)             void _gst_debug_dummy_##var (void)
-#define GST_DEBUG_CATEGORY_EXTERN(var)          void _gst_debug_dummy_extern_##var (void)
-#define GST_DEBUG_CATEGORY_STATIC(var)          void _gst_debug_dummy_static_##var (void)
+#define GST_DEBUG_CATEGORY(var)       void _gst_debug_dummy_##var (void)
+#define GST_DEBUG_CATEGORY_EXTERN(var)      void _gst_debug_dummy_extern_##var (void)
+#define GST_DEBUG_CATEGORY_STATIC(var)      void _gst_debug_dummy_static_##var (void)
 
-#define GST_DEBUG_CATEGORY_INIT(var,name,color,desc)    G_STMT_START{ }G_STMT_END
-#define GST_DEBUG_CATEGORY_GET(var,name)        G_STMT_START{ }G_STMT_END
-#define gst_debug_category_free(category)       G_STMT_START{ }G_STMT_END
+#define GST_DEBUG_CATEGORY_INIT(var,name,color,desc)  G_STMT_START{ }G_STMT_END
+#define GST_DEBUG_CATEGORY_GET(var,name)    G_STMT_START{ }G_STMT_END
+#define gst_debug_category_free(category)   G_STMT_START{ }G_STMT_END
 #define gst_debug_category_set_threshold(category,level) G_STMT_START{ }G_STMT_END
-#define gst_debug_category_reset_threshold(category)    G_STMT_START{ }G_STMT_END
+#define gst_debug_category_reset_threshold(category)  G_STMT_START{ }G_STMT_END
 #define gst_debug_category_get_threshold(category)  (GST_LEVEL_NONE)
-#define gst_debug_category_get_name(cat)        ("")
-#define gst_debug_category_get_color(cat)       (0)
-#define gst_debug_category_get_description(cat)     ("")
-#define gst_debug_get_all_categories()          (NULL)
-#define gst_debug_construct_term_color(colorinfo)   (g_strdup ("00"))
-#define gst_debug_construct_win_color(colorinfo)    (0)
+#define gst_debug_category_get_name(cat)    ("")
+#define gst_debug_category_get_color(cat)   (0)
+#define gst_debug_category_get_description(cat)   ("")
+#define gst_debug_get_all_categories()      (NULL)
+#define gst_debug_construct_term_color(colorinfo) (g_strdup ("00"))
+#define gst_debug_construct_win_color(colorinfo)  (0)
 
 #endif /* !GST_INFO_C */
 
 #ifdef G_HAVE_ISO_VARARGS
 
-#define GST_CAT_LEVEL_LOG(cat,level,...)        G_STMT_START{ }G_STMT_END
-
-#define GST_CAT_ERROR_OBJECT(...)           G_STMT_START{ }G_STMT_END
-#define GST_CAT_WARNING_OBJECT(...)         G_STMT_START{ }G_STMT_END
-#define GST_CAT_INFO_OBJECT(...)            G_STMT_START{ }G_STMT_END
-#define GST_CAT_DEBUG_OBJECT(...)           G_STMT_START{ }G_STMT_END
-#define GST_CAT_LOG_OBJECT(...)             G_STMT_START{ }G_STMT_END
-#define GST_CAT_FIXME_OBJECT(...)           G_STMT_START{ }G_STMT_END
-#define GST_CAT_TRACE_OBJECT(...)           G_STMT_START{ }G_STMT_END
-
-#define GST_CAT_ERROR(...)              G_STMT_START{ }G_STMT_END
-#define GST_CAT_WARNING(...)                G_STMT_START{ }G_STMT_END
-#define GST_CAT_INFO(...)               G_STMT_START{ }G_STMT_END
-#define GST_CAT_DEBUG(...)              G_STMT_START{ }G_STMT_END
-#define GST_CAT_LOG(...)                G_STMT_START{ }G_STMT_END
-#define GST_CAT_FIXME(...)              G_STMT_START{ }G_STMT_END
-#define GST_CAT_TRACE(...)              G_STMT_START{ }G_STMT_END
-
-#define GST_ERROR_OBJECT(...)               G_STMT_START{ }G_STMT_END
-#define GST_WARNING_OBJECT(...)             G_STMT_START{ }G_STMT_END
-#define GST_INFO_OBJECT(...)                G_STMT_START{ }G_STMT_END
-#define GST_DEBUG_OBJECT(...)               G_STMT_START{ }G_STMT_END
-#define GST_LOG_OBJECT(...)             G_STMT_START{ }G_STMT_END
-#define GST_FIXME_OBJECT(...)               G_STMT_START{ }G_STMT_END
-#define GST_TRACE_OBJECT(...)               G_STMT_START{ }G_STMT_END
-
-#define GST_ERROR(...)                  G_STMT_START{ }G_STMT_END
-#define GST_WARNING(...)                G_STMT_START{ }G_STMT_END
-#define GST_INFO(...)                   G_STMT_START{ }G_STMT_END
-#define GST_DEBUG(...)                  G_STMT_START{ }G_STMT_END
-#define GST_LOG(...)                    G_STMT_START{ }G_STMT_END
-#define GST_FIXME(...)                  G_STMT_START{ }G_STMT_END
-#define GST_TRACE(...)                  G_STMT_START{ }G_STMT_END
+#define GST_CAT_LEVEL_LOG(cat,level,...)    G_STMT_START{ }G_STMT_END
+
+#define GST_CAT_ERROR_OBJECT(...)     G_STMT_START{ }G_STMT_END
+#define GST_CAT_WARNING_OBJECT(...)     G_STMT_START{ }G_STMT_END
+#define GST_CAT_INFO_OBJECT(...)      G_STMT_START{ }G_STMT_END
+#define GST_CAT_DEBUG_OBJECT(...)     G_STMT_START{ }G_STMT_END
+#define GST_CAT_LOG_OBJECT(...)       G_STMT_START{ }G_STMT_END
+#define GST_CAT_FIXME_OBJECT(...)     G_STMT_START{ }G_STMT_END
+#define GST_CAT_TRACE_OBJECT(...)     G_STMT_START{ }G_STMT_END
+
+#define GST_CAT_ERROR(...)        G_STMT_START{ }G_STMT_END
+#define GST_CAT_WARNING(...)        G_STMT_START{ }G_STMT_END
+#define GST_CAT_INFO(...)       G_STMT_START{ }G_STMT_END
+#define GST_CAT_DEBUG(...)        G_STMT_START{ }G_STMT_END
+#define GST_CAT_LOG(...)        G_STMT_START{ }G_STMT_END
+#define GST_CAT_FIXME(...)        G_STMT_START{ }G_STMT_END
+#define GST_CAT_TRACE(...)        G_STMT_START{ }G_STMT_END
+
+#define GST_ERROR_OBJECT(...)       G_STMT_START{ }G_STMT_END
+#define GST_WARNING_OBJECT(...)       G_STMT_START{ }G_STMT_END
+#define GST_INFO_OBJECT(...)        G_STMT_START{ }G_STMT_END
+#define GST_DEBUG_OBJECT(...)       G_STMT_START{ }G_STMT_END
+#define GST_LOG_OBJECT(...)       G_STMT_START{ }G_STMT_END
+#define GST_FIXME_OBJECT(...)       G_STMT_START{ }G_STMT_END
+#define GST_TRACE_OBJECT(...)       G_STMT_START{ }G_STMT_END
+
+#define GST_ERROR(...)          G_STMT_START{ }G_STMT_END
+#define GST_WARNING(...)        G_STMT_START{ }G_STMT_END
+#define GST_INFO(...)         G_STMT_START{ }G_STMT_END
+#define GST_DEBUG(...)          G_STMT_START{ }G_STMT_END
+#define GST_LOG(...)          G_STMT_START{ }G_STMT_END
+#define GST_FIXME(...)          G_STMT_START{ }G_STMT_END
+#define GST_TRACE(...)          G_STMT_START{ }G_STMT_END
 
 #else /* !G_HAVE_ISO_VARARGS */
 #ifdef G_HAVE_GNUC_VARARGS
 
-#define GST_CAT_LEVEL_LOG(cat,level,args...)        G_STMT_START{ }G_STMT_END
-
-#define GST_CAT_ERROR_OBJECT(args...)           G_STMT_START{ }G_STMT_END
-#define GST_CAT_WARNING_OBJECT(args...)         G_STMT_START{ }G_STMT_END
-#define GST_CAT_INFO_OBJECT(args...)            G_STMT_START{ }G_STMT_END
-#define GST_CAT_DEBUG_OBJECT(args...)           G_STMT_START{ }G_STMT_END
-#define GST_CAT_LOG_OBJECT(args...)         G_STMT_START{ }G_STMT_END
-#define GST_CAT_FIXME_OBJECT(args...)           G_STMT_START{ }G_STMT_END
-#define GST_CAT_TRACE_OBJECT(args...)           G_STMT_START{ }G_STMT_END
-
-#define GST_CAT_ERROR(args...)              G_STMT_START{ }G_STMT_END
-#define GST_CAT_WARNING(args...)            G_STMT_START{ }G_STMT_END
-#define GST_CAT_INFO(args...)               G_STMT_START{ }G_STMT_END
-#define GST_CAT_DEBUG(args...)              G_STMT_START{ }G_STMT_END
-#define GST_CAT_LOG(args...)                G_STMT_START{ }G_STMT_END
-#define GST_CAT_FIXME(args...)              G_STMT_START{ }G_STMT_END
-#define GST_CAT_TRACE(args...)              G_STMT_START{ }G_STMT_END
-
-#define GST_ERROR_OBJECT(args...)           G_STMT_START{ }G_STMT_END
-#define GST_WARNING_OBJECT(args...)         G_STMT_START{ }G_STMT_END
-#define GST_INFO_OBJECT(args...)            G_STMT_START{ }G_STMT_END
-#define GST_DEBUG_OBJECT(args...)           G_STMT_START{ }G_STMT_END
-#define GST_LOG_OBJECT(args...)             G_STMT_START{ }G_STMT_END
-#define GST_FIXME_OBJECT(args...)           G_STMT_START{ }G_STMT_END
-#define GST_TRACE_OBJECT(args...)           G_STMT_START{ }G_STMT_END
-
-#define GST_ERROR(args...)              G_STMT_START{ }G_STMT_END
-#define GST_WARNING(args...)                G_STMT_START{ }G_STMT_END
-#define GST_INFO(args...)               G_STMT_START{ }G_STMT_END
-#define GST_DEBUG(args...)              G_STMT_START{ }G_STMT_END
-#define GST_LOG(args...)                G_STMT_START{ }G_STMT_END
-#define GST_FIXME(args...)              G_STMT_START{ }G_STMT_END
-#define GST_TRACE(args...)              G_STMT_START{ }G_STMT_END
+#define GST_CAT_LEVEL_LOG(cat,level,args...)    G_STMT_START{ }G_STMT_END
+
+#define GST_CAT_ERROR_OBJECT(args...)     G_STMT_START{ }G_STMT_END
+#define GST_CAT_WARNING_OBJECT(args...)     G_STMT_START{ }G_STMT_END
+#define GST_CAT_INFO_OBJECT(args...)      G_STMT_START{ }G_STMT_END
+#define GST_CAT_DEBUG_OBJECT(args...)     G_STMT_START{ }G_STMT_END
+#define GST_CAT_LOG_OBJECT(args...)     G_STMT_START{ }G_STMT_END
+#define GST_CAT_FIXME_OBJECT(args...)     G_STMT_START{ }G_STMT_END
+#define GST_CAT_TRACE_OBJECT(args...)     G_STMT_START{ }G_STMT_END
+
+#define GST_CAT_ERROR(args...)        G_STMT_START{ }G_STMT_END
+#define GST_CAT_WARNING(args...)      G_STMT_START{ }G_STMT_END
+#define GST_CAT_INFO(args...)       G_STMT_START{ }G_STMT_END
+#define GST_CAT_DEBUG(args...)        G_STMT_START{ }G_STMT_END
+#define GST_CAT_LOG(args...)        G_STMT_START{ }G_STMT_END
+#define GST_CAT_FIXME(args...)        G_STMT_START{ }G_STMT_END
+#define GST_CAT_TRACE(args...)        G_STMT_START{ }G_STMT_END
+
+#define GST_ERROR_OBJECT(args...)     G_STMT_START{ }G_STMT_END
+#define GST_WARNING_OBJECT(args...)     G_STMT_START{ }G_STMT_END
+#define GST_INFO_OBJECT(args...)      G_STMT_START{ }G_STMT_END
+#define GST_DEBUG_OBJECT(args...)     G_STMT_START{ }G_STMT_END
+#define GST_LOG_OBJECT(args...)       G_STMT_START{ }G_STMT_END
+#define GST_FIXME_OBJECT(args...)     G_STMT_START{ }G_STMT_END
+#define GST_TRACE_OBJECT(args...)     G_STMT_START{ }G_STMT_END
+
+#define GST_ERROR(args...)        G_STMT_START{ }G_STMT_END
+#define GST_WARNING(args...)        G_STMT_START{ }G_STMT_END
+#define GST_INFO(args...)       G_STMT_START{ }G_STMT_END
+#define GST_DEBUG(args...)        G_STMT_START{ }G_STMT_END
+#define GST_LOG(args...)        G_STMT_START{ }G_STMT_END
+#define GST_FIXME(args...)        G_STMT_START{ }G_STMT_END
+#define GST_TRACE(args...)        G_STMT_START{ }G_STMT_END
 
 #else /* !G_HAVE_GNUC_VARARGS */
 
 #if !defined(GSTREAMER_LITE) && !defined(G_OS_WIN32)
 
