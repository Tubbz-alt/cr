diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/build/win32/dirent/dirent.h b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/build/win32/dirent/dirent.h
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/build/win32/dirent/dirent.h
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/build/win32/dirent/dirent.h
@@ -17,14 +17,14 @@
 extern "C" {
 #endif
 
 struct dirent
 {
-    long        d_ino;      /* Always zero. */
-    unsigned short  d_reclen;   /* Always zero. */
-    unsigned short  d_namlen;   /* Length of name in d_name. */
-    char        d_name[FILENAME_MAX]; /* File name. */
+  long    d_ino;    /* Always zero. */
+  unsigned short  d_reclen; /* Always zero. */
+  unsigned short  d_namlen; /* Length of name in d_name. */
+  char    d_name[FILENAME_MAX]; /* File name. */
 };
 
 #ifdef _WIN64
 #define INTPTR __int64
 #else
@@ -36,31 +36,31 @@
  * except as an argument to one of the functions below.
  * dd_stat field is now int (was short in older versions).
  */
 typedef struct
 {
-    /* disk transfer area for this dir */
-    struct _finddata_t  dd_dta;
+  /* disk transfer area for this dir */
+  struct _finddata_t  dd_dta;
 
-    /* dirent struct to return from dir (NOTE: this makes this thread
-     * safe as long as only one thread uses a particular DIR struct at
-     * a time) */
-    struct dirent       dd_dir;
+  /* dirent struct to return from dir (NOTE: this makes this thread
+   * safe as long as only one thread uses a particular DIR struct at
+   * a time) */
+  struct dirent   dd_dir;
 
-    /* _findnext handle */
-    INTPTR          dd_handle;
+  /* _findnext handle */
+  INTPTR      dd_handle;
 
-    /*
+  /*
          * Status of search:
-     *   0 = not started yet (next entry to read is first entry)
-     *  -1 = off the end
-     *   positive = 0 based index of next entry
-     */
-    int         dd_stat;
-
-    /* given path for dir with search pattern (struct is extended) */
-    char            dd_name[1];
+   *   0 = not started yet (next entry to read is first entry)
+   *  -1 = off the end
+   *   positive = 0 based index of next entry
+   */
+  int     dd_stat;
+
+  /* given path for dir with search pattern (struct is extended) */
+  char      dd_name[1];
 } DIR;
 
 DIR* __cdecl opendir (const char*);
 struct dirent* __cdecl readdir (DIR*);
 int __cdecl closedir (DIR*);
@@ -71,43 +71,43 @@
 
 /* wide char versions */
 
 struct _wdirent
 {
-    long        d_ino;      /* Always zero. */
-    unsigned short  d_reclen;   /* Always zero. */
-    unsigned short  d_namlen;   /* Length of name in d_name. */
-    wchar_t     d_name[FILENAME_MAX]; /* File name. */
+  long    d_ino;    /* Always zero. */
+  unsigned short  d_reclen; /* Always zero. */
+  unsigned short  d_namlen; /* Length of name in d_name. */
+  wchar_t   d_name[FILENAME_MAX]; /* File name. */
 };
 
 /*
  * This is an internal data structure. Good programmers will not use it
  * except as an argument to one of the functions below.
  */
 typedef struct
 {
-    /* disk transfer area for this dir */
-    struct _wfinddata_t dd_dta;
+  /* disk transfer area for this dir */
+  struct _wfinddata_t dd_dta;
 
-    /* dirent struct to return from dir (NOTE: this makes this thread
-     * safe as long as only one thread uses a particular DIR struct at
-     * a time) */
-    struct _wdirent     dd_dir;
+  /* dirent struct to return from dir (NOTE: this makes this thread
+   * safe as long as only one thread uses a particular DIR struct at
+   * a time) */
+  struct _wdirent   dd_dir;
 
-    /* _findnext handle */
-    INTPTR          dd_handle;
+  /* _findnext handle */
+  INTPTR      dd_handle;
 
-    /*
+  /*
          * Status of search:
-     *   0 = not started yet (next entry to read is first entry)
-     *  -1 = off the end
-     *   positive = 0 based index of next entry
-     */
-    int         dd_stat;
-
-    /* given path for dir with search pattern (struct is extended) */
-    wchar_t         dd_name[1];
+   *   0 = not started yet (next entry to read is first entry)
+   *  -1 = off the end
+   *   positive = 0 based index of next entry
+   */
+  int     dd_stat;
+
+  /* given path for dir with search pattern (struct is extended) */
+  wchar_t     dd_name[1];
 } _WDIR;
 
 
 
 _WDIR* __cdecl _wopendir (const wchar_t*);
