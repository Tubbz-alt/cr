diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/guniprop.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/guniprop.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/guniprop.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/guniprop.c
@@ -35,10 +35,17 @@
 #include "gunicodeprivate.h"
 #ifdef G_OS_WIN32
 #include "gwin32.h"
 #endif
 
+#define G_UNICHAR_FULLWIDTH_A 0xff21
+#define G_UNICHAR_FULLWIDTH_I 0xff29
+#define G_UNICHAR_FULLWIDTH_J 0xff2a
+#define G_UNICHAR_FULLWIDTH_F 0xff26
+#define G_UNICHAR_FULLWIDTH_a 0xff41
+#define G_UNICHAR_FULLWIDTH_f 0xff46
+
 #define ATTR_TABLE(Page) (((Page) <= G_UNICODE_LAST_PAGE_PART1) \
                           ? attr_table_part1[Page] \
                           : attr_table_part2[(Page) - 0xe00])
 
 #define ATTTABLE(Page, Char) \
@@ -65,36 +72,36 @@
 #define IS(Type, Class) (((guint)1 << (Type)) & (Class))
 #define OR(Type, Rest)  (((guint)1 << (Type)) | (Rest))
 
 
 
-#define ISALPHA(Type)   IS ((Type),             \
-                OR (G_UNICODE_LOWERCASE_LETTER, \
-                OR (G_UNICODE_UPPERCASE_LETTER, \
-                OR (G_UNICODE_TITLECASE_LETTER, \
-                OR (G_UNICODE_MODIFIER_LETTER,  \
-                OR (G_UNICODE_OTHER_LETTER,     0))))))
+#define ISALPHA(Type) IS ((Type),       \
+          OR (G_UNICODE_LOWERCASE_LETTER, \
+          OR (G_UNICODE_UPPERCASE_LETTER, \
+          OR (G_UNICODE_TITLECASE_LETTER, \
+          OR (G_UNICODE_MODIFIER_LETTER,  \
+          OR (G_UNICODE_OTHER_LETTER,   0))))))
 
-#define ISALDIGIT(Type) IS ((Type),             \
-                OR (G_UNICODE_DECIMAL_NUMBER,   \
-                OR (G_UNICODE_LETTER_NUMBER,    \
-                OR (G_UNICODE_OTHER_NUMBER,     \
-                OR (G_UNICODE_LOWERCASE_LETTER, \
-                OR (G_UNICODE_UPPERCASE_LETTER, \
-                OR (G_UNICODE_TITLECASE_LETTER, \
-                OR (G_UNICODE_MODIFIER_LETTER,  \
-                OR (G_UNICODE_OTHER_LETTER,     0)))))))))
+#define ISALDIGIT(Type) IS ((Type),       \
+          OR (G_UNICODE_DECIMAL_NUMBER, \
+          OR (G_UNICODE_LETTER_NUMBER,  \
+          OR (G_UNICODE_OTHER_NUMBER,   \
+          OR (G_UNICODE_LOWERCASE_LETTER, \
+          OR (G_UNICODE_UPPERCASE_LETTER, \
+          OR (G_UNICODE_TITLECASE_LETTER, \
+          OR (G_UNICODE_MODIFIER_LETTER,  \
+          OR (G_UNICODE_OTHER_LETTER,   0)))))))))
 
-#define ISMARK(Type)    IS ((Type),             \
-                OR (G_UNICODE_NON_SPACING_MARK, \
-                OR (G_UNICODE_SPACING_MARK, \
-                OR (G_UNICODE_ENCLOSING_MARK,   0))))
+#define ISMARK(Type)  IS ((Type),       \
+          OR (G_UNICODE_NON_SPACING_MARK, \
+          OR (G_UNICODE_SPACING_MARK, \
+          OR (G_UNICODE_ENCLOSING_MARK, 0))))
 
-#define ISZEROWIDTHTYPE(Type)   IS ((Type),         \
-                OR (G_UNICODE_NON_SPACING_MARK, \
-                OR (G_UNICODE_ENCLOSING_MARK,   \
-                OR (G_UNICODE_FORMAT,       0))))
+#define ISZEROWIDTHTYPE(Type) IS ((Type),     \
+          OR (G_UNICODE_NON_SPACING_MARK, \
+          OR (G_UNICODE_ENCLOSING_MARK, \
+          OR (G_UNICODE_FORMAT,   0))))
 
 /**
  * g_unichar_isalnum:
  * @c: a Unicode character
  *
@@ -174,16 +181,16 @@
  **/
 gboolean
 g_unichar_isgraph (gunichar c)
 {
   return !IS (TYPE(c),
-          OR (G_UNICODE_CONTROL,
-          OR (G_UNICODE_FORMAT,
-          OR (G_UNICODE_UNASSIGNED,
-          OR (G_UNICODE_SURROGATE,
-          OR (G_UNICODE_SPACE_SEPARATOR,
-         0))))));
+        OR (G_UNICODE_CONTROL,
+        OR (G_UNICODE_FORMAT,
+        OR (G_UNICODE_UNASSIGNED,
+        OR (G_UNICODE_SURROGATE,
+        OR (G_UNICODE_SPACE_SEPARATOR,
+       0))))));
 }
 
 /**
  * g_unichar_islower:
  * @c: a Unicode character
@@ -214,15 +221,15 @@
  **/
 gboolean
 g_unichar_isprint (gunichar c)
 {
   return !IS (TYPE(c),
-          OR (G_UNICODE_CONTROL,
-          OR (G_UNICODE_FORMAT,
-          OR (G_UNICODE_UNASSIGNED,
-          OR (G_UNICODE_SURROGATE,
-         0)))));
+        OR (G_UNICODE_CONTROL,
+        OR (G_UNICODE_FORMAT,
+        OR (G_UNICODE_UNASSIGNED,
+        OR (G_UNICODE_SURROGATE,
+       0)))));
 }
 
 /**
  * g_unichar_ispunct:
  * @c: a Unicode character
@@ -235,22 +242,22 @@
  **/
 gboolean
 g_unichar_ispunct (gunichar c)
 {
   return IS (TYPE(c),
-         OR (G_UNICODE_CONNECT_PUNCTUATION,
-         OR (G_UNICODE_DASH_PUNCTUATION,
-         OR (G_UNICODE_CLOSE_PUNCTUATION,
-         OR (G_UNICODE_FINAL_PUNCTUATION,
-         OR (G_UNICODE_INITIAL_PUNCTUATION,
-         OR (G_UNICODE_OTHER_PUNCTUATION,
-         OR (G_UNICODE_OPEN_PUNCTUATION,
-         OR (G_UNICODE_CURRENCY_SYMBOL,
-         OR (G_UNICODE_MODIFIER_SYMBOL,
-         OR (G_UNICODE_MATH_SYMBOL,
-         OR (G_UNICODE_OTHER_SYMBOL,
-        0)))))))))))) ? TRUE : FALSE;
+       OR (G_UNICODE_CONNECT_PUNCTUATION,
+       OR (G_UNICODE_DASH_PUNCTUATION,
+       OR (G_UNICODE_CLOSE_PUNCTUATION,
+       OR (G_UNICODE_FINAL_PUNCTUATION,
+       OR (G_UNICODE_INITIAL_PUNCTUATION,
+       OR (G_UNICODE_OTHER_PUNCTUATION,
+       OR (G_UNICODE_OPEN_PUNCTUATION,
+       OR (G_UNICODE_CURRENCY_SYMBOL,
+       OR (G_UNICODE_MODIFIER_SYMBOL,
+       OR (G_UNICODE_MATH_SYMBOL,
+       OR (G_UNICODE_OTHER_SYMBOL,
+      0)))))))))))) ? TRUE : FALSE;
 }
 
 /**
  * g_unichar_isspace:
  * @c: a Unicode character
@@ -278,15 +285,15 @@
       return TRUE;
       break;
 
     default:
       {
-    return IS (TYPE(c),
-               OR (G_UNICODE_SPACE_SEPARATOR,
-               OR (G_UNICODE_LINE_SEPARATOR,
+  return IS (TYPE(c),
+             OR (G_UNICODE_SPACE_SEPARATOR,
+             OR (G_UNICODE_LINE_SEPARATOR,
                    OR (G_UNICODE_PARAGRAPH_SEPARATOR,
-          0)))) ? TRUE : FALSE;
+      0)))) ? TRUE : FALSE;
       }
       break;
     }
 }
 
@@ -360,13 +367,15 @@
  * Returns: %TRUE if the character is a hexadecimal digit
  **/
 gboolean
 g_unichar_isxdigit (gunichar c)
 {
-  return ((c >= 'a' && c <= 'f')
-      || (c >= 'A' && c <= 'F')
-      || (TYPE (c) == G_UNICODE_DECIMAL_NUMBER));
+  return ((c >= 'a' && c <= 'f') ||
+          (c >= 'A' && c <= 'F') ||
+          (c >= G_UNICHAR_FULLWIDTH_a && c <= G_UNICHAR_FULLWIDTH_f) ||
+          (c >= G_UNICHAR_FULLWIDTH_A && c <= G_UNICHAR_FULLWIDTH_F) ||
+          (TYPE (c) == G_UNICODE_DECIMAL_NUMBER));
 }
 
 /**
  * g_unichar_isdefined:
  * @c: a Unicode character
@@ -378,13 +387,13 @@
  **/
 gboolean
 g_unichar_isdefined (gunichar c)
 {
   return !IS (TYPE(c),
-          OR (G_UNICODE_UNASSIGNED,
-          OR (G_UNICODE_SURROGATE,
-         0)));
+        OR (G_UNICODE_UNASSIGNED,
+        OR (G_UNICODE_SURROGATE,
+       0)));
 }
 
 /**
  * g_unichar_iszerowidth:
  * @c: a Unicode character
@@ -411,11 +420,11 @@
 
   if (G_UNLIKELY (ISZEROWIDTHTYPE (TYPE (c))))
     return TRUE;
 
   if (G_UNLIKELY ((c >= 0x1160 && c < 0x1200) ||
-          c == 0x200B))
+      c == 0x200B))
     return TRUE;
 
   return FALSE;
 }
 
@@ -444,15 +453,15 @@
   int mid = saved_mid;
 
   do
     {
       if (ch < g_unicode_width_table_wide[mid].start)
-    upper = mid - 1;
+  upper = mid - 1;
       else if (ch > g_unicode_width_table_wide[mid].end)
-    lower = mid + 1;
+  lower = mid + 1;
       else
-    return TRUE;
+  return TRUE;
 
       mid = (lower + upper) / 2;
     }
   while (lower <= upper);
 
@@ -470,11 +479,11 @@
  **/
 gboolean
 g_unichar_iswide (gunichar c)
 {
   if (c < g_unicode_width_table_wide[0].start)
-  return FALSE;
+    return FALSE;
   else
     return g_unichar_iswide_bsearch (c);
 }
 
 
@@ -510,11 +519,11 @@
 
   if (bsearch (GUINT_TO_POINTER (c),
                g_unicode_width_table_ambiguous,
                G_N_ELEMENTS (g_unicode_width_table_ambiguous),
                sizeof g_unicode_width_table_ambiguous[0],
-           interval_compare))
+         interval_compare))
     return TRUE;
 
   return FALSE;
 }
 
@@ -524,39 +533,39 @@
  * @c: a Unicode character
  *
  * Converts a character to uppercase.
  *
  * Returns: the result of converting @c to uppercase.
- *               If @c is not an lowercase or titlecase character,
+ *               If @c is not a lowercase or titlecase character,
  *               or has no upper case equivalent @c is returned unchanged.
  **/
 gunichar
 g_unichar_toupper (gunichar c)
 {
   int t = TYPE (c);
   if (t == G_UNICODE_LOWERCASE_LETTER)
     {
       gunichar val = ATTTABLE (c >> 8, c & 0xff);
       if (val >= 0x1000000)
-    {
-      const gchar *p = special_case_table + val - 0x1000000;
+  {
+    const gchar *p = special_case_table + val - 0x1000000;
           val = g_utf8_get_char (p);
-    }
+  }
       /* Some lowercase letters, e.g., U+000AA, FEMININE ORDINAL INDICATOR,
        * do not have an uppercase equivalent, in which case val will be
        * zero.
        */
       return val ? val : c;
     }
   else if (t == G_UNICODE_TITLECASE_LETTER)
     {
       unsigned int i;
       for (i = 0; i < G_N_ELEMENTS (title_table); ++i)
-    {
-      if (title_table[i][0] == c)
-        return title_table[i][1] ? title_table[i][1] : c;
-    }
+  {
+    if (title_table[i][0] == c)
+      return title_table[i][1] ? title_table[i][1] : c;
+  }
     }
   return c;
 }
 
 /**
@@ -575,29 +584,29 @@
   int t = TYPE (c);
   if (t == G_UNICODE_UPPERCASE_LETTER)
     {
       gunichar val = ATTTABLE (c >> 8, c & 0xff);
       if (val >= 0x1000000)
-    {
-      const gchar *p = special_case_table + val - 0x1000000;
-      return g_utf8_get_char (p);
-    }
+  {
+    const gchar *p = special_case_table + val - 0x1000000;
+    return g_utf8_get_char (p);
+  }
       else
-    {
-      /* Not all uppercase letters are guaranteed to have a lowercase
-       * equivalent.  If this is the case, val will be zero. */
-      return val ? val : c;
-    }
+  {
+    /* Not all uppercase letters are guaranteed to have a lowercase
+     * equivalent.  If this is the case, val will be zero. */
+    return val ? val : c;
+  }
     }
   else if (t == G_UNICODE_TITLECASE_LETTER)
     {
       unsigned int i;
       for (i = 0; i < G_N_ELEMENTS (title_table); ++i)
-    {
-      if (title_table[i][0] == c)
-        return title_table[i][2];
-    }
+  {
+    if (title_table[i][0] == c)
+      return title_table[i][2];
+  }
     }
   return c;
 }
 
 /**
@@ -612,15 +621,21 @@
  **/
 gunichar
 g_unichar_totitle (gunichar c)
 {
   unsigned int i;
+
+  /* We handle U+0000 explicitely because some elements in
+   * title_table[i][1] may be null. */
+  if (c == 0)
+    return c;
+
   for (i = 0; i < G_N_ELEMENTS (title_table); ++i)
     {
       if (title_table[i][0] == c || title_table[i][1] == c
-      || title_table[i][2] == c)
-    return title_table[i][0];
+    || title_table[i][2] == c)
+  return title_table[i][0];
     }
 
   if (TYPE (c) == G_UNICODE_LOWERCASE_LETTER)
     return g_unichar_toupper (c);
 
@@ -660,10 +675,14 @@
 {
   if (c >= 'A' && c <= 'F')
     return c - 'A' + 10;
   if (c >= 'a' && c <= 'f')
     return c - 'a' + 10;
+  if (c >= G_UNICHAR_FULLWIDTH_A && c <= G_UNICHAR_FULLWIDTH_F)
+    return c - G_UNICHAR_FULLWIDTH_A + 10;
+  if (c >= G_UNICHAR_FULLWIDTH_a && c <= G_UNICHAR_FULLWIDTH_f)
+    return c - G_UNICHAR_FULLWIDTH_a + 10;
   if (TYPE (c) == G_UNICODE_DECIMAL_NUMBER)
     return ATTTABLE (c >> 8, c & 0xff);
   return -1;
 }
 
@@ -710,56 +729,56 @@
 
   switch (locale[0])
     {
    case 'a':
       if (locale[1] == 'z')
-    return LOCALE_TURKIC;
+  return LOCALE_TURKIC;
       break;
     case 'l':
       if (locale[1] == 't')
-    return LOCALE_LITHUANIAN;
+  return LOCALE_LITHUANIAN;
       break;
     case 't':
       if (locale[1] == 'r')
-    return LOCALE_TURKIC;
+  return LOCALE_TURKIC;
       break;
     }
 
   return LOCALE_NORMAL;
 }
 
 static gint
 output_marks (const char **p_inout,
-          char        *out_buffer,
-          gboolean     remove_dot)
+        char        *out_buffer,
+        gboolean     remove_dot)
 {
   const char *p = *p_inout;
   gint len = 0;
 
   while (*p)
     {
       gunichar c = g_utf8_get_char (p);
 
       if (ISMARK (TYPE (c)))
-    {
-      if (!remove_dot || c != 0x307 /* COMBINING DOT ABOVE */)
-        len += g_unichar_to_utf8 (c, out_buffer ? out_buffer + len : NULL);
-      p = g_utf8_next_char (p);
-    }
+  {
+    if (!remove_dot || c != 0x307 /* COMBINING DOT ABOVE */)
+      len += g_unichar_to_utf8 (c, out_buffer ? out_buffer + len : NULL);
+    p = g_utf8_next_char (p);
+  }
       else
-    break;
+  break;
     }
 
   *p_inout = p;
   return len;
 }
 
 static gint
 output_special_case (gchar *out_buffer,
-             int    offset,
-             int    type,
-             int    which)
+         int    offset,
+         int    type,
+         int    which)
 {
   const gchar *p = special_case_table + offset;
   gint len;
 
   if (type != G_UNICODE_TITLECASE_LETTER)
@@ -775,13 +794,13 @@
   return len;
 }
 
 static gsize
 real_toupper (const gchar *str,
-          gssize       max_len,
-          gchar       *out_buffer,
-          LocaleType   locale_type)
+        gssize       max_len,
+        gchar       *out_buffer,
+        LocaleType   locale_type)
 {
   const gchar *p = str;
   const char *last = NULL;
   gsize len = 0;
   gboolean last_was_i = FALSE;
@@ -794,98 +813,98 @@
 
       last = p;
       p = g_utf8_next_char (p);
 
       if (locale_type == LOCALE_LITHUANIAN)
+  {
+    if (c == 'i')
+      last_was_i = TRUE;
+    else
+      {
+        if (last_was_i)
     {
-      if (c == 'i')
-        last_was_i = TRUE;
-      else
-        {
-          if (last_was_i)
-        {
-          /* Nasty, need to remove any dot above. Though
-           * I think only E WITH DOT ABOVE occurs in practice
-           * which could simplify this considerably.
-           */
-          gsize decomp_len, i;
-          gunichar decomp[G_UNICHAR_MAX_DECOMPOSITION_LENGTH];
-
-          decomp_len = g_unichar_fully_decompose (c, FALSE, decomp, G_N_ELEMENTS (decomp));
-          for (i=0; i < decomp_len; i++)
-            {
-              if (decomp[i] != 0x307 /* COMBINING DOT ABOVE */)
-            len += g_unichar_to_utf8 (g_unichar_toupper (decomp[i]), out_buffer ? out_buffer + len : NULL);
-            }
-
-          len += output_marks (&p, out_buffer ? out_buffer + len : NULL, TRUE);
+      /* Nasty, need to remove any dot above. Though
+       * I think only E WITH DOT ABOVE occurs in practice
+       * which could simplify this considerably.
+       */
+      gsize decomp_len, i;
+      gunichar decomp[G_UNICHAR_MAX_DECOMPOSITION_LENGTH];
 
-          continue;
+      decomp_len = g_unichar_fully_decompose (c, FALSE, decomp, G_N_ELEMENTS (decomp));
+      for (i=0; i < decomp_len; i++)
+        {
+          if (decomp[i] != 0x307 /* COMBINING DOT ABOVE */)
+      len += g_unichar_to_utf8 (g_unichar_toupper (decomp[i]), out_buffer ? out_buffer + len : NULL);
         }
 
-          if (!ISMARK (t))
-        last_was_i = FALSE;
-        }
+      len += output_marks (&p, out_buffer ? out_buffer + len : NULL, TRUE);
+
+      continue;
     }
 
+        if (!ISMARK (t))
+    last_was_i = FALSE;
+      }
+  }
+
       if (locale_type == LOCALE_TURKIC && c == 'i')
-    {
-      /* i => LATIN CAPITAL LETTER I WITH DOT ABOVE */
-      len += g_unichar_to_utf8 (0x130, out_buffer ? out_buffer + len : NULL);
-    }
+  {
+    /* i => LATIN CAPITAL LETTER I WITH DOT ABOVE */
+    len += g_unichar_to_utf8 (0x130, out_buffer ? out_buffer + len : NULL);
+  }
       else if (c == 0x0345) /* COMBINING GREEK YPOGEGRAMMENI */
-    {
-      /* Nasty, need to move it after other combining marks .. this would go away if
-       * we normalized first.
-       */
-      len += output_marks (&p, out_buffer ? out_buffer + len : NULL, FALSE);
-
-      /* And output as GREEK CAPITAL LETTER IOTA */
-      len += g_unichar_to_utf8 (0x399, out_buffer ? out_buffer + len : NULL);
-    }
+  {
+    /* Nasty, need to move it after other combining marks .. this would go away if
+     * we normalized first.
+     */
+    len += output_marks (&p, out_buffer ? out_buffer + len : NULL, FALSE);
+
+    /* And output as GREEK CAPITAL LETTER IOTA */
+    len += g_unichar_to_utf8 (0x399, out_buffer ? out_buffer + len : NULL);
+  }
       else if (IS (t,
-           OR (G_UNICODE_LOWERCASE_LETTER,
-           OR (G_UNICODE_TITLECASE_LETTER,
-          0))))
-    {
-      val = ATTTABLE (c >> 8, c & 0xff);
+       OR (G_UNICODE_LOWERCASE_LETTER,
+       OR (G_UNICODE_TITLECASE_LETTER,
+      0))))
+  {
+    val = ATTTABLE (c >> 8, c & 0xff);
 
-      if (val >= 0x1000000)
-        {
-          len += output_special_case (out_buffer ? out_buffer + len : NULL, val - 0x1000000, t,
-                      t == G_UNICODE_LOWERCASE_LETTER ? 0 : 1);
-        }
-      else
-        {
-          if (t == G_UNICODE_TITLECASE_LETTER)
+    if (val >= 0x1000000)
+      {
+        len += output_special_case (out_buffer ? out_buffer + len : NULL, val - 0x1000000, t,
+            t == G_UNICODE_LOWERCASE_LETTER ? 0 : 1);
+      }
+    else
+      {
+        if (t == G_UNICODE_TITLECASE_LETTER)
+    {
+      unsigned int i;
+      for (i = 0; i < G_N_ELEMENTS (title_table); ++i)
         {
-          unsigned int i;
-          for (i = 0; i < G_N_ELEMENTS (title_table); ++i)
-            {
-              if (title_table[i][0] == c)
-            {
-              val = title_table[i][1];
-              break;
-            }
-            }
-        }
-
-          /* Some lowercase letters, e.g., U+000AA, FEMININE ORDINAL INDICATOR,
-           * do not have an uppercase equivalent, in which case val will be
-           * zero. */
-          len += g_unichar_to_utf8 (val ? val : c, out_buffer ? out_buffer + len : NULL);
+          if (title_table[i][0] == c)
+      {
+        val = title_table[i][1];
+        break;
+      }
         }
     }
+
+        /* Some lowercase letters, e.g., U+000AA, FEMININE ORDINAL INDICATOR,
+         * do not have an uppercase equivalent, in which case val will be
+         * zero. */
+        len += g_unichar_to_utf8 (val ? val : c, out_buffer ? out_buffer + len : NULL);
+      }
+  }
       else
-    {
-      gsize char_len = g_utf8_skip[*(guchar *)last];
+  {
+    gsize char_len = g_utf8_skip[*(guchar *)last];
 
-      if (out_buffer)
-        memcpy (out_buffer + len, last, char_len);
+    if (out_buffer)
+      memcpy (out_buffer + len, last, char_len);
 
-      len += char_len;
-    }
+    len += char_len;
+  }
 
     }
 
   return len;
 }
@@ -904,11 +923,11 @@
  * Returns: a newly allocated string, with all characters
  *    converted to uppercase.
  **/
 gchar *
 g_utf8_strup (const gchar *str,
-          gssize       len)
+        gssize       len)
 {
   gsize result_len;
   LocaleType locale_type;
   gchar *result;
 
@@ -962,13 +981,13 @@
   return FALSE;
 }
 
 static gsize
 real_tolower (const gchar *str,
-          gssize       max_len,
-          gchar       *out_buffer,
-          LocaleType   locale_type)
+        gssize       max_len,
+        gchar       *out_buffer,
+        LocaleType   locale_type)
 {
   const gchar *p = str;
   const char *last = NULL;
   gsize len = 0;
 
@@ -979,12 +998,13 @@
       gunichar val;
 
       last = p;
       p = g_utf8_next_char (p);
 
-      if (locale_type == LOCALE_TURKIC && c == 'I')
-    {
+      if (locale_type == LOCALE_TURKIC && (c == 'I' ||
+                                           c == G_UNICHAR_FULLWIDTH_I))
+  {
           if (g_utf8_get_char (p) == 0x0307)
             {
               /* I + COMBINING DOT ABOVE => i (U+0069) */
               len += g_unichar_to_utf8 (0x0069, out_buffer ? out_buffer + len : NULL);
               p = g_utf8_next_char (p);
@@ -1015,79 +1035,80 @@
               len += g_unichar_to_utf8 (0x0303, out_buffer ? out_buffer + len : NULL);
               break;
             }
         }
       else if (locale_type == LOCALE_LITHUANIAN &&
-               (c == 'I' || c == 'J' || c == 0x012e) &&
+               (c == 'I' || c == G_UNICHAR_FULLWIDTH_I ||
+                c == 'J' || c == G_UNICHAR_FULLWIDTH_J || c == 0x012e) &&
                has_more_above (p))
         {
           len += g_unichar_to_utf8 (g_unichar_tolower (c), out_buffer ? out_buffer + len : NULL);
           len += g_unichar_to_utf8 (0x0307, out_buffer ? out_buffer + len : NULL);
         }
       else if (c == 0x03A3) /* GREEK CAPITAL LETTER SIGMA */
-    {
-      if ((max_len < 0 || p < str + max_len) && *p)
-        {
-          gunichar next_c = g_utf8_get_char (p);
-          int next_type = TYPE(next_c);
-
-          /* SIGMA mapps differently depending on whether it is
-           * final or not. The following simplified test would
-           * fail in the case of combining marks following the
-           * sigma, but I don't think that occurs in real text.
-           * The test here matches that in ICU.
-           */
-          if (ISALPHA (next_type)) /* Lu,Ll,Lt,Lm,Lo */
-        val = 0x3c3;    /* GREEK SMALL SIGMA */
-          else
-        val = 0x3c2;    /* GREEK SMALL FINAL SIGMA */
-        }
-      else
-        val = 0x3c2;    /* GREEK SMALL FINAL SIGMA */
+  {
+    if ((max_len < 0 || p < str + max_len) && *p)
+      {
+        gunichar next_c = g_utf8_get_char (p);
+        int next_type = TYPE(next_c);
+
+        /* SIGMA mapps differently depending on whether it is
+         * final or not. The following simplified test would
+         * fail in the case of combining marks following the
+         * sigma, but I don't think that occurs in real text.
+         * The test here matches that in ICU.
+         */
+        if (ISALPHA (next_type)) /* Lu,Ll,Lt,Lm,Lo */
+    val = 0x3c3;  /* GREEK SMALL SIGMA */
+        else
+    val = 0x3c2;  /* GREEK SMALL FINAL SIGMA */
+      }
+    else
+      val = 0x3c2;  /* GREEK SMALL FINAL SIGMA */
 
-      len += g_unichar_to_utf8 (val, out_buffer ? out_buffer + len : NULL);
-    }
+    len += g_unichar_to_utf8 (val, out_buffer ? out_buffer + len : NULL);
+  }
       else if (IS (t,
-           OR (G_UNICODE_UPPERCASE_LETTER,
-           OR (G_UNICODE_TITLECASE_LETTER,
-          0))))
-    {
-      val = ATTTABLE (c >> 8, c & 0xff);
+       OR (G_UNICODE_UPPERCASE_LETTER,
+       OR (G_UNICODE_TITLECASE_LETTER,
+      0))))
+  {
+    val = ATTTABLE (c >> 8, c & 0xff);
 
-      if (val >= 0x1000000)
-        {
-          len += output_special_case (out_buffer ? out_buffer + len : NULL, val - 0x1000000, t, 0);
-        }
-      else
-        {
-          if (t == G_UNICODE_TITLECASE_LETTER)
+    if (val >= 0x1000000)
+      {
+        len += output_special_case (out_buffer ? out_buffer + len : NULL, val - 0x1000000, t, 0);
+      }
+    else
+      {
+        if (t == G_UNICODE_TITLECASE_LETTER)
+    {
+      unsigned int i;
+      for (i = 0; i < G_N_ELEMENTS (title_table); ++i)
         {
-          unsigned int i;
-          for (i = 0; i < G_N_ELEMENTS (title_table); ++i)
-            {
-              if (title_table[i][0] == c)
-            {
-              val = title_table[i][2];
-              break;
-            }
-            }
-        }
-
-          /* Not all uppercase letters are guaranteed to have a lowercase
-           * equivalent.  If this is the case, val will be zero. */
-          len += g_unichar_to_utf8 (val ? val : c, out_buffer ? out_buffer + len : NULL);
+          if (title_table[i][0] == c)
+      {
+        val = title_table[i][2];
+        break;
+      }
         }
     }
+
+        /* Not all uppercase letters are guaranteed to have a lowercase
+         * equivalent.  If this is the case, val will be zero. */
+        len += g_unichar_to_utf8 (val ? val : c, out_buffer ? out_buffer + len : NULL);
+      }
+  }
       else
-    {
-      gsize char_len = g_utf8_skip[*(guchar *)last];
+  {
+    gsize char_len = g_utf8_skip[*(guchar *)last];
 
-      if (out_buffer)
-        memcpy (out_buffer + len, last, char_len);
+    if (out_buffer)
+      memcpy (out_buffer + len, last, char_len);
 
-      len += char_len;
-    }
+    len += char_len;
+  }
 
     }
 
   return len;
 }
@@ -1105,11 +1126,11 @@
  * Returns: a newly allocated string, with all characters
  *    converted to lowercase.
  **/
 gchar *
 g_utf8_strdown (const gchar *str,
-        gssize       len)
+    gssize       len)
 {
   gsize result_len;
   LocaleType locale_type;
   gchar *result;
 
@@ -1152,11 +1173,11 @@
  * Returns: a newly allocated string, that is a
  *   case independent form of @str.
  **/
 gchar *
 g_utf8_casefold (const gchar *str,
-         gssize       len)
+     gssize       len)
 {
   GString *result;
   const char *p;
 
   g_return_val_if_fail (str != NULL, NULL);
@@ -1170,27 +1191,27 @@
       int start = 0;
       int end = G_N_ELEMENTS (casefold_table);
 
       if (ch >= casefold_table[start].ch &&
           ch <= casefold_table[end - 1].ch)
+  {
+    while (TRUE)
+      {
+        int half = (start + end) / 2;
+        if (ch == casefold_table[half].ch)
     {
-      while (TRUE)
-        {
-          int half = (start + end) / 2;
-          if (ch == casefold_table[half].ch)
-        {
-          g_string_append (result, casefold_table[half].data);
-          goto next;
-        }
-          else if (half == start)
-        break;
-          else if (ch > casefold_table[half].ch)
-        start = half;
-          else
-        end = half;
-        }
+      g_string_append (result, casefold_table[half].data);
+      goto next;
     }
+        else if (half == start)
+    break;
+        else if (ch > casefold_table[half].ch)
+    start = half;
+        else
+    end = half;
+      }
+  }
 
       g_string_append_unichar (result, g_unichar_tolower (ch));
 
     next:
       p = g_utf8_next_char (p);
@@ -1247,15 +1268,15 @@
 
 
   do
     {
       if (ch < g_script_table[mid].start)
-    upper = mid - 1;
+  upper = mid - 1;
       else if (ch >= g_script_table[mid].start + g_script_table[mid].chars)
-    lower = mid + 1;
+  lower = mid + 1;
       else
-    return g_script_table[saved_mid = mid].script;
+  return g_script_table[saved_mid = mid].script;
 
       mid = (lower + upper) / 2;
     }
   while (lower <= upper);
 
@@ -1419,11 +1440,11 @@
     PACK ('G','r','a','n'), /* G_UNICODE_SCRIPT_GRANTHA */
     PACK ('K','h','o','j'), /* G_UNICODE_SCRIPT_KHOJKI*/
     PACK ('S','i','n','d'), /* G_UNICODE_SCRIPT_KHUDAWADI */
     PACK ('L','i','n','a'), /* G_UNICODE_SCRIPT_LINEAR_A */
     PACK ('M','a','h','j'), /* G_UNICODE_SCRIPT_MAHAJANI */
-    PACK ('M','a','n','u'), /* G_UNICODE_SCRIPT_MANICHAEAN */
+    PACK ('M','a','n','i'), /* G_UNICODE_SCRIPT_MANICHAEAN */
     PACK ('M','e','n','d'), /* G_UNICODE_SCRIPT_MENDE_KIKAKUI */
     PACK ('M','o','d','i'), /* G_UNICODE_SCRIPT_MODI */
     PACK ('M','r','o','o'), /* G_UNICODE_SCRIPT_MRO */
     PACK ('N','b','a','t'), /* G_UNICODE_SCRIPT_NABATAEAN */
     PACK ('N','a','r','b'), /* G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN */
@@ -1464,10 +1485,16 @@
     PACK ('R','o','h','g'), /* G_UNICODE_SCRIPT_HANIFI_ROHINGYA */
     PACK ('M','a','k','a'), /* G_UNICODE_SCRIPT_MAKASAR */
     PACK ('M','e','d','f'), /* G_UNICODE_SCRIPT_MEDEFAIDRIN */
     PACK ('S','o','g','o'), /* G_UNICODE_SCRIPT_OLD_SOGDIAN */
     PACK ('S','o','g','d'), /* G_UNICODE_SCRIPT_SOGDIAN */
+
+  /* Unicode 12.0 additions */
+    PACK ('E','l','y','m'), /* G_UNICODE_SCRIPT_ELYMAIC */
+    PACK ('N','a','n','d'), /* G_UNICODE_SCRIPT_NANDINAGARI */
+    PACK ('H','m','n','p'), /* G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG */
+    PACK ('W','c','h','o'), /* G_UNICODE_SCRIPT_WANCHO */
 #undef PACK
 };
 
 /**
  * g_unicode_script_to_iso15924:
