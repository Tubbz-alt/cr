diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/glib-init.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/glib-init.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/glib-init.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/glib-init.c
@@ -1,7 +1,7 @@
 /*
- * Copyright ï¿½ 2011 Canonical Limited
+ * Copyright (C) 2011 Canonical Limited
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 2.1 of the License, or (at your option) any later version.
@@ -18,12 +18,11 @@
  */
 
 #include "config.h"
 
 #include "glib-init.h"
-
-#include "glib-private.h"
+#include "gmacros.h"
 #include "gtypes.h"
 #include "gutils.h"     /* for GDebugKey */
 #include "gconstructor.h"
 #include "gmem.h"       /* for g_mem_gc_friendly */
 
@@ -38,14 +37,14 @@
 /* We do not support 36-bit bytes or other historical curiosities. */
 G_STATIC_ASSERT (CHAR_BIT == 8);
 
 /* We assume that data pointers are the same size as function pointers... */
 G_STATIC_ASSERT (sizeof (gpointer) == sizeof (GFunc));
-G_STATIC_ASSERT (_g_alignof (gpointer) == _g_alignof (GFunc));
+G_STATIC_ASSERT (G_ALIGNOF (gpointer) == G_ALIGNOF (GFunc));
 /* ... and that all function pointers are the same size. */
 G_STATIC_ASSERT (sizeof (GFunc) == sizeof (GCompareDataFunc));
-G_STATIC_ASSERT (_g_alignof (GFunc) == _g_alignof (GCompareDataFunc));
+G_STATIC_ASSERT (G_ALIGNOF (GFunc) == G_ALIGNOF (GCompareDataFunc));
 
 /* We assume that "small" enums (those where all values fit in INT32_MIN
  * to INT32_MAX) are exactly int-sized. In particular, we assume that if
  * an enum has no members that exceed the range of char/short, the
  * compiler will make it int-sized anyway, so adding a member later that
@@ -62,13 +61,13 @@
     TEST_INT32_MAX = G_MAXINT32
 } TestInt;
 G_STATIC_ASSERT (sizeof (TestChar) == sizeof (int));
 G_STATIC_ASSERT (sizeof (TestShort) == sizeof (int));
 G_STATIC_ASSERT (sizeof (TestInt) == sizeof (int));
-G_STATIC_ASSERT (_g_alignof (TestChar) == _g_alignof (int));
-G_STATIC_ASSERT (_g_alignof (TestShort) == _g_alignof (int));
-G_STATIC_ASSERT (_g_alignof (TestInt) == _g_alignof (int));
+G_STATIC_ASSERT (G_ALIGNOF (TestChar) == G_ALIGNOF (int));
+G_STATIC_ASSERT (G_ALIGNOF (TestShort) == G_ALIGNOF (int));
+G_STATIC_ASSERT (G_ALIGNOF (TestInt) == G_ALIGNOF (int));
 
 /**
  * g_mem_gc_friendly:
  *
  * This variable is %TRUE if the `G_DEBUG` environment variable
@@ -150,11 +149,11 @@
   if (!strcasecmp (string, "help"))
     {
       /* using stdio directly for the reason stated above */
       fprintf (stderr, "Supported debug values:");
       for (i = 0; i < nkeys; i++)
-       fprintf (stderr, " %s", keys[i].key);
+        fprintf (stderr, " %s", keys[i].key);
       fprintf (stderr, " all help\n");
     }
   else
     {
       const gchar *p = string;
@@ -285,10 +284,13 @@
 {
   switch (fdwReason)
     {
     case DLL_PROCESS_ATTACH:
       glib_dll = hinstDLL;
+#ifndef GSTREAMER_LITE
+      g_crash_handler_win32_init ();
+#endif // GSTREAMER_LITE
       g_clock_win32_init ();
 #ifdef THREADS_WIN32
       g_thread_win32_init ();
 #endif
       glib_init ();
@@ -305,10 +307,13 @@
     case DLL_PROCESS_DETACH:
 #ifdef THREADS_WIN32
       if (lpvReserved == NULL)
         g_thread_win32_process_detach ();
 #endif
+#ifndef GSTREAMER_LITE
+      g_crash_handler_win32_deinit ();
+#endif // GSTREAMER_LITE
       break;
 
     default:
       /* do nothing */
       ;
