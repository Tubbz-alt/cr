diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/video-frame.h b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/video-frame.h
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/video-frame.h
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/video-frame.h
@@ -37,21 +37,30 @@
  * @GST_VIDEO_FRAME_FLAG_ONEFIELD: The video frame has one field
  * @GST_VIDEO_FRAME_FLAG_MULTIPLE_VIEW: The video contains one or
  *     more non-mono views
  * @GST_VIDEO_FRAME_FLAG_FIRST_IN_BUNDLE: The video frame is the first
  *     in a set of corresponding views provided as sequential frames.
+ * @GST_VIDEO_FRAME_FLAG_TOP_FIELD: The video frame has the top field only. This
+ *     is the same as GST_VIDEO_FRAME_FLAG_TFF | GST_VIDEO_FRAME_FLAG_ONEFIELD
+ *     (Since: 1.16).
+ * @GST_VIDEO_FRAME_FLAG_BOTTOM_FIELD: The video frame has the bottom field
+ *     only. This is the same as GST_VIDEO_FRAME_FLAG_ONEFIELD
+ *     (GST_VIDEO_FRAME_FLAG_TFF flag unset) (Since: 1.16).
  *
  * Extra video frame flags
  */
 typedef enum {
   GST_VIDEO_FRAME_FLAG_NONE         = 0,
   GST_VIDEO_FRAME_FLAG_INTERLACED   = (1 << 0),
   GST_VIDEO_FRAME_FLAG_TFF          = (1 << 1),
   GST_VIDEO_FRAME_FLAG_RFF          = (1 << 2),
   GST_VIDEO_FRAME_FLAG_ONEFIELD     = (1 << 3),
   GST_VIDEO_FRAME_FLAG_MULTIPLE_VIEW = (1 << 4),
-  GST_VIDEO_FRAME_FLAG_FIRST_IN_BUNDLE = (1 << 5)
+  GST_VIDEO_FRAME_FLAG_FIRST_IN_BUNDLE = (1 << 5),
+  GST_VIDEO_FRAME_FLAG_TOP_FIELD    = GST_VIDEO_FRAME_FLAG_TFF |
+                                      GST_VIDEO_FRAME_FLAG_ONEFIELD,
+  GST_VIDEO_FRAME_FLAG_BOTTOM_FIELD = GST_VIDEO_FRAME_FLAG_ONEFIELD,
 } GstVideoFrameFlags;
 
 /* circular dependency, need to include this after defining the enums */
 #include <gst/video/video-format.h>
 #include <gst/video/video-info.h>
@@ -107,16 +116,18 @@
 #define GST_VIDEO_FRAME_WIDTH(f)          (GST_VIDEO_INFO_WIDTH(&(f)->info))
 #define GST_VIDEO_FRAME_HEIGHT(f)         (GST_VIDEO_INFO_HEIGHT(&(f)->info))
 #define GST_VIDEO_FRAME_SIZE(f)           (GST_VIDEO_INFO_SIZE(&(f)->info))
 
 /* flags */
-#define GST_VIDEO_FRAME_FLAGS(f)          ((f)->flags)
-#define GST_VIDEO_FRAME_FLAG_IS_SET(f,fl) ((GST_VIDEO_FRAME_FLAGS(f) & (fl)) == (fl))
-#define GST_VIDEO_FRAME_IS_INTERLACED(f)  (GST_VIDEO_FRAME_FLAG_IS_SET(f, GST_VIDEO_FRAME_FLAG_INTERLACED))
-#define GST_VIDEO_FRAME_IS_TFF(f)         (GST_VIDEO_FRAME_FLAG_IS_SET(f, GST_VIDEO_FRAME_FLAG_TFF))
-#define GST_VIDEO_FRAME_IS_RFF(f)         (GST_VIDEO_FRAME_FLAG_IS_SET(f, GST_VIDEO_FRAME_FLAG_RFF))
-#define GST_VIDEO_FRAME_IS_ONEFIELD(f)    (GST_VIDEO_FRAME_FLAG_IS_SET(f, GST_VIDEO_FRAME_FLAG_ONEFIELD))
+#define GST_VIDEO_FRAME_FLAGS(f)           ((f)->flags)
+#define GST_VIDEO_FRAME_FLAG_IS_SET(f,fl)  ((GST_VIDEO_FRAME_FLAGS(f) & (fl)) == (fl))
+#define GST_VIDEO_FRAME_IS_INTERLACED(f)   (GST_VIDEO_FRAME_FLAG_IS_SET(f, GST_VIDEO_FRAME_FLAG_INTERLACED))
+#define GST_VIDEO_FRAME_IS_TFF(f)          (GST_VIDEO_FRAME_FLAG_IS_SET(f, GST_VIDEO_FRAME_FLAG_TFF))
+#define GST_VIDEO_FRAME_IS_RFF(f)          (GST_VIDEO_FRAME_FLAG_IS_SET(f, GST_VIDEO_FRAME_FLAG_RFF))
+#define GST_VIDEO_FRAME_IS_ONEFIELD(f)     (GST_VIDEO_FRAME_FLAG_IS_SET(f, GST_VIDEO_FRAME_FLAG_ONEFIELD))
+#define GST_VIDEO_FRAME_IS_TOP_FIELD(f)    (GST_VIDEO_FRAME_FLAG_IS_SET(f, GST_VIDEO_FRAME_FLAG_TOP_FIELD))
+#define GST_VIDEO_FRAME_IS_BOTTOM_FIELD(f) (GST_VIDEO_FRAME_FLAG_IS_SET(f, GST_VIDEO_FRAME_FLAG_BOTTOM_FIELD))
 
 /* dealing with planes */
 #define GST_VIDEO_FRAME_N_PLANES(f)       (GST_VIDEO_INFO_N_PLANES(&(f)->info))
 #define GST_VIDEO_FRAME_PLANE_DATA(f,p)   ((f)->data[p])
 #define GST_VIDEO_FRAME_PLANE_OFFSET(f,p) (GST_VIDEO_INFO_PLANE_OFFSET(&(f)->info,(p)))
@@ -143,24 +154,30 @@
  *                                     interlaced or progressive.
  * @GST_VIDEO_BUFFER_FLAG_TFF:         If the #GstBuffer is interlaced, then the first field
  *                                     in the video frame is the top field.  If unset, the
  *                                     bottom field is first.
  * @GST_VIDEO_BUFFER_FLAG_RFF:         If the #GstBuffer is interlaced, then the first field
- *                                     (as defined by the %GST_VIDEO_BUFFER_TFF flag setting)
+ *                                     (as defined by the %GST_VIDEO_BUFFER_FLAG_TFF flag setting)
  *                                     is repeated.
  * @GST_VIDEO_BUFFER_FLAG_ONEFIELD:    If the #GstBuffer is interlaced, then only the
- *                                     first field (as defined by the %GST_VIDEO_BUFFER_TFF
- *                                     flag setting) is to be displayed.
+ *                                     first field (as defined by the %GST_VIDEO_BUFFER_FLAG_TFF
+ *                                     flag setting) is to be displayed (Since: 1.16).
  * @GST_VIDEO_BUFFER_FLAG_MULTIPLE_VIEW: The #GstBuffer contains one or more specific views,
  *                                     such as left or right eye view. This flags is set on
  *                                     any buffer that contains non-mono content - even for
  *                                     streams that contain only a single viewpoint. In mixed
  *                                     mono / non-mono streams, the absense of the flag marks
  *                                     mono buffers.
  * @GST_VIDEO_BUFFER_FLAG_FIRST_IN_BUNDLE: When conveying stereo/multiview content with
  *                                     frame-by-frame methods, this flag marks the first buffer
  *                                      in a bundle of frames that belong together.
+ * @GST_VIDEO_BUFFER_FLAG_TOP_FIELD:   The video frame has the top field only. This is the
+ *                                     same as GST_VIDEO_BUFFER_FLAG_TFF |
+ *                                     GST_VIDEO_BUFFER_FLAG_ONEFIELD (Since: 1.16).
+ * @GST_VIDEO_BUFFER_FLAG_BOTTOM_FIELD: The video frame has the bottom field only. This is
+ *                                     the same as GST_VIDEO_BUFFER_FLAG_ONEFIELD
+ *                                     (GST_VIDEO_BUFFER_FLAG_TFF flag unset) (Since: 1.16).
  * @GST_VIDEO_BUFFER_FLAG_LAST:        Offset to define more flags
  *
  * Additional video buffer flags. These flags can potentially be used on any
  * buffers carrying video data - even encoded data.
  *
@@ -174,10 +191,14 @@
   GST_VIDEO_BUFFER_FLAG_ONEFIELD    = (GST_BUFFER_FLAG_LAST << 3),
 
   GST_VIDEO_BUFFER_FLAG_MULTIPLE_VIEW = (GST_BUFFER_FLAG_LAST << 4),
   GST_VIDEO_BUFFER_FLAG_FIRST_IN_BUNDLE = (GST_BUFFER_FLAG_LAST << 5),
 
+  GST_VIDEO_BUFFER_FLAG_TOP_FIELD   = GST_VIDEO_BUFFER_FLAG_TFF |
+                                      GST_VIDEO_BUFFER_FLAG_ONEFIELD,
+  GST_VIDEO_BUFFER_FLAG_BOTTOM_FIELD = GST_VIDEO_BUFFER_FLAG_ONEFIELD,
+
   GST_VIDEO_BUFFER_FLAG_LAST        = (GST_BUFFER_FLAG_LAST << 8)
 } GstVideoBufferFlags;
 
 /**
  * GstVideoFrameMapFlags:
