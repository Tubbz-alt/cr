diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstutils.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstutils.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstutils.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstutils.c
@@ -1863,12 +1863,12 @@
 
     /* two explicitly specified pads */
     result = pad_link_maybe_ghosting (srcpad, destpad, flags);
 
     if (result) {
-    gst_object_unref (srcpad);
-    gst_object_unref (destpad);
+      gst_object_unref (srcpad);
+      gst_object_unref (destpad);
     } else {
       release_and_unref_pad (src, srcpad, srcrequest);
       release_and_unref_pad (dest, destpad, destrequest);
     }
     return result;
@@ -1894,11 +1894,11 @@
           temp = gst_element_get_compatible_pad (dest, srcpad, NULL);
           if (temp && GST_PAD_PAD_TEMPLATE (temp)
               && GST_PAD_TEMPLATE_PRESENCE (GST_PAD_PAD_TEMPLATE (temp)) ==
               GST_PAD_REQUEST) {
             temprequest = TRUE;
-        }
+          }
         }
 
         if (temp && pad_link_maybe_ghosting (srcpad, temp, flags)) {
           GST_CAT_DEBUG (GST_CAT_ELEMENT_PADS, "linked pad %s:%s to pad %s:%s",
               GST_DEBUG_PAD_NAME (srcpad), GST_DEBUG_PAD_NAME (temp));
@@ -1935,11 +1935,11 @@
       gst_object_unref (destpad);
     destpad = NULL;
   }
   if (srcpad) {
     release_and_unref_pad (src, srcpad, srcrequest);
-  srcpad = NULL;
+    srcpad = NULL;
   }
 
   if (destpad) {
     /* loop through the existing pads in the destination */
     do {
@@ -1963,11 +1963,11 @@
           gst_object_unref (destpad);
           return TRUE;
         }
 
         release_and_unref_pad (src, temp, temprequest);
-        }
+      }
       if (destpads) {
         destpads = g_list_next (destpads);
         if (destpads) {
           gst_object_unref (destpad);
           destpad = GST_PAD_CAST (destpads->data);
@@ -1982,11 +1982,11 @@
         GST_ELEMENT_NAME (src), GST_DEBUG_PAD_NAME (destpad));
     release_and_unref_pad (dest, destpad, destrequest);
     return FALSE;
   } else {
     /* no need to release any request pad as the case of unset destpatname and
-     * destpad being a requst pad has already been taken care of when looking
+     * destpad being a request pad has already been taken care of when looking
      * though the destination pads above */
     if (destpad) {
       gst_object_unref (destpad);
     }
     destpad = NULL;
@@ -2036,11 +2036,11 @@
                 gst_object_unref (srcpad);
               }
               if (destpad) {
                 gst_element_release_request_pad (dest, destpad);
                 gst_object_unref (destpad);
-            }
+              }
             }
             gst_caps_unref (srccaps);
             gst_caps_unref (destcaps);
           }
         }
@@ -2617,11 +2617,11 @@
  * @source: the #GstObject that initiated the error.
  * @error: (in): the GError.
  * @debug: (in) (allow-none): an additional debug information string, or %NULL
  *
  * A default error function that uses g_printerr() to display the error message
- * and the optional debug sting..
+ * and the optional debug string..
  *
  * The default handler will simply print the error string using g_print.
  */
 void
 gst_object_default_error (GstObject * source, const GError * error,
@@ -3417,13 +3417,13 @@
 
   /* parse the pipeline to a bin */
   if (flags & GST_PARSE_FLAG_NO_SINGLE_ELEMENT_BINS) {
     element = gst_parse_launch_full (bin_description, context, flags, err);
   } else {
-  desc = g_strdup_printf ("bin.( %s )", bin_description);
+    desc = g_strdup_printf ("bin.( %s )", bin_description);
     element = gst_parse_launch_full (desc, context, flags, err);
-  g_free (desc);
+    g_free (desc);
   }
 
   if (element == NULL || (err && *err != NULL)) {
     if (element)
       gst_object_unref (element);
