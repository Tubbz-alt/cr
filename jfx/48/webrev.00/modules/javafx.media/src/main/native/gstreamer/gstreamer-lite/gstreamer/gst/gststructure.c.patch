diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gststructure.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gststructure.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gststructure.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gststructure.c
@@ -394,10 +394,34 @@
   GST_TRACE ("free structure %p", structure);
 
   g_slice_free1 (sizeof (GstStructureImpl), structure);
 }
 
+/**
+ * gst_clear_structure: (skip)
+ * @structure_ptr: a pointer to a #GstStructure reference
+ *
+ * Clears a reference to a #GstStructure.
+ *
+ * @structure_ptr must not be %NULL.
+ *
+ * If the reference is %NULL then this function does nothing.
+ * Otherwise, the structure is free'd using gst_structure_free() and the
+ * pointer is set to %NULL.
+ *
+ * A macro is also included that allows this function to be used without
+ * pointer casts.
+ *
+ * Since: 1.16
+ **/
+#undef gst_clear_structure
+void
+gst_clear_structure (GstStructure ** structure_ptr)
+{
+  g_clear_pointer (structure_ptr, gst_structure_free);
+}
+
 /**
  * gst_structure_get_name:
  * @structure: a #GstStructure
  *
  * Get the name of @structure as a string.
@@ -607,10 +631,11 @@
     type = va_arg (varargs, GType);
 
     G_VALUE_COLLECT_INIT (&field.value, type, varargs, 0, &err);
     if (G_UNLIKELY (err)) {
       g_critical ("%s", err);
+      g_free (err);
       return;
     }
     gst_structure_set_field (structure, &field);
 
     fieldname = va_arg (varargs, gchar *);
@@ -673,10 +698,11 @@
     type = va_arg (varargs, GType);
 
     G_VALUE_COLLECT_INIT (&field.value, type, varargs, 0, &err);
     if (G_UNLIKELY (err)) {
       g_critical ("%s", err);
+      g_free (err);
       return;
     }
     gst_structure_set_field (structure, &field);
 
     fieldname = va_arg (varargs, GQuark);
@@ -1760,11 +1786,11 @@
     *value_flags = gst_value_get_flagset_flags (&field->value);
   if (value_mask)
     *value_mask = gst_value_get_flagset_mask (&field->value);
 
   return TRUE;
-    }
+}
 
 static GType
 gst_structure_value_get_generic_type (const GValue * val)
 {
   if (G_VALUE_TYPE (val) == GST_TYPE_LIST
@@ -1809,11 +1835,11 @@
     if (G_VALUE_TYPE (&field->value) == GST_TYPE_ARRAY) {
       t = _priv_gst_value_serialize_any_list (&field->value, "< ", " >", FALSE);
     } else if (G_VALUE_TYPE (&field->value) == GST_TYPE_LIST) {
       t = _priv_gst_value_serialize_any_list (&field->value, "{ ", " }", FALSE);
     } else {
-    t = gst_value_serialize (&field->value);
+      t = gst_value_serialize (&field->value);
     }
 
     type = gst_structure_value_get_generic_type (&field->value);
 
     g_string_append_len (s, ", ", 2);
@@ -1822,21 +1848,26 @@
     g_string_append_len (s, "=(", 2);
     g_string_append (s, _priv_gst_value_gtype_to_abbr (type));
     g_string_append_c (s, ')');
     if (t) {
       g_string_append (s, t);
-    g_free (t);
+      g_free (t);
+    } else if (G_TYPE_CHECK_VALUE_TYPE (&field->value, G_TYPE_POINTER)) {
+      gpointer ptr = g_value_get_pointer (&field->value);
+
+      if (!ptr)
+        g_string_append (s, "NULL");
+      else
+        g_string_append_printf (s, "%p", ptr);
     } else {
-      if (!G_TYPE_CHECK_VALUE_TYPE (&field->value, G_TYPE_STRING) &&
-          !(G_TYPE_CHECK_VALUE_TYPE (&field->value, G_TYPE_POINTER) &&
-              g_value_get_pointer (&field->value) == NULL))
+      if (!G_TYPE_CHECK_VALUE_TYPE (&field->value, G_TYPE_STRING))
         GST_WARNING ("No value transform to serialize field '%s' of type '%s'",
             g_quark_to_string (field->name),
             _priv_gst_value_gtype_to_abbr (type));
       /* TODO(ensonic): don't print NULL if field->value is not empty */
       g_string_append (s, "NULL");
-  }
+    }
   }
 
   g_string_append_c (s, ';');
   return TRUE;
 }
@@ -2182,18 +2213,24 @@
 
   if (G_VALUE_TYPE (value) == G_TYPE_INT) {
     /* already fixed */
     return FALSE;
   } else if (G_VALUE_TYPE (value) == GST_TYPE_INT_RANGE) {
-    int x;
+    int min, max, step;
+
+    min = gst_value_get_int_range_min (value);
+    max = gst_value_get_int_range_max (value);
+    step = gst_value_get_int_range_step (value);
+
+    target = CLAMP (target, min, max);
+    if (G_UNLIKELY (step != 1)) {
+      gint rem = target % step;
+      target -= rem;
+      if (rem > step / 2)
+        target += step;
+    }
 
-    x = gst_value_get_int_range_min (value);
-    if (target < x)
-      target = x;
-    x = gst_value_get_int_range_max (value);
-    if (target > x)
-      target = x;
     gst_structure_set (structure, field_name, G_TYPE_INT, target, NULL);
     return TRUE;
   } else if (G_VALUE_TYPE (value) == GST_TYPE_LIST) {
     const GValue *list_value;
     int i, n;
@@ -3058,17 +3095,17 @@
  * @structure: a #GstStructure
  * @fieldname: the name of a field
  * @array: (out): a pointer to a #GValueArray
  *
  * This is useful in language bindings where unknown #GValue types are not
- * supported. This function will convert the %GST_TYPE_ARRAY and
- * %GST_TYPE_LIST into a newly allocated #GValueArray and return it through
- * @array. Be aware that this is slower then getting the #GValue directly.
+ * supported. This function will convert the %GST_TYPE_ARRAY into a newly
+ * allocated #GValueArray and return it through @array. Be aware that this is
+ * slower then getting the #GValue directly.
  *
  * Returns: %TRUE if the value could be set correctly. If there was no field
- * with @fieldname or the existing field did not contain an int, this function
- * returns %FALSE.
+ * with @fieldname or the existing field did not contain a %GST_TYPE_ARRAY,
+ * this function returns %FALSE.
  */
 gboolean
 gst_structure_get_array (GstStructure * structure, const gchar * fieldname,
     GValueArray ** array)
 {
@@ -3081,19 +3118,19 @@
  * @structure: a #GstStructure
  * @fieldname: the name of a field
  * @array: (out): a pointer to a #GValueArray
  *
  * This is useful in language bindings where unknown #GValue types are not
- * supported. This function will convert the %GST_TYPE_ARRAY and
- * %GST_TYPE_LIST into a newly allocated GValueArray and return it through
- * @array. Be aware that this is slower then getting the #GValue directly.
+ * supported. This function will convert the %GST_TYPE_LIST into a newly
+ * allocated GValueArray and return it through @array. Be aware that this is
+ * slower then getting the #GValue directly.
  *
  * Returns: %TRUE if the value could be set correctly. If there was no field
- * with @fieldname or the existing field did not contain an int, this function
- * returns %FALSE.
+ * with @fieldname or the existing field did not contain a %GST_TYPE_LIST, this
+ * function returns %FALSE.
  *
- * Since 1.12
+ * Since: 1.12
  */
 gboolean
 gst_structure_get_list (GstStructure * structure, const gchar * fieldname,
     GValueArray ** array)
 {
@@ -3137,11 +3174,11 @@
  * This is useful in language bindings where unknown GValue types are not
  * supported. This function will convert a @array to %GST_TYPE_ARRAY and set
  * the field specified by @fieldname.  Be aware that this is slower then using
  * %GST_TYPE_ARRAY in a #GValue directly.
  *
- * Since 1.12
+ * Since: 1.12
  */
 void
 gst_structure_set_array (GstStructure * structure, const gchar * fieldname,
     const GValueArray * array)
 {
@@ -3153,15 +3190,15 @@
  * @structure: a #GstStructure
  * @fieldname: the name of a field
  * @array: a pointer to a #GValueArray
  *
  * This is useful in language bindings where unknown GValue types are not
- * supported. This function will convert a @array to %GST_TYPE_ARRAY and set
+ * supported. This function will convert a @array to %GST_TYPE_LIST and set
  * the field specified by @fieldname. Be aware that this is slower then using
- * %GST_TYPE_ARRAY in a #GValue directly.
+ * %GST_TYPE_LIST in a #GValue directly.
  *
- * Since 1.12
+ * Since: 1.12
  */
 void
 gst_structure_set_list (GstStructure * structure, const gchar * fieldname,
     const GValueArray * array)
 {
