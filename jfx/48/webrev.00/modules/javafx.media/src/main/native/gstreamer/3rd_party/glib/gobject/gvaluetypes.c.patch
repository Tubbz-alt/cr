diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvaluetypes.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvaluetypes.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvaluetypes.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvaluetypes.c
@@ -1,8 +1,8 @@
 /* GObject - GLib Type, Object, Parameter and Signal Library
  * Copyright (C) 1997-1999, 2000-2001 Tim Janik and Red Hat, Inc.
- * Copyright ï¿½ 2010 Christian Persch
+ * Copyright (C) 2010 Christian Persch
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 2.1 of the License, or (at your option) any later version.
@@ -41,20 +41,20 @@
   value->data[0].v_long = 0;
 }
 
 static void
 value_copy_long0 (const GValue *src_value,
-          GValue       *dest_value)
+      GValue       *dest_value)
 {
   dest_value->data[0].v_long = src_value->data[0].v_long;
 }
 
 static gchar*
 value_lcopy_char (const GValue *value,
-          guint         n_collect_values,
-          GTypeCValue  *collect_values,
-          guint         collect_flags)
+      guint         n_collect_values,
+      GTypeCValue  *collect_values,
+      guint         collect_flags)
 {
   gint8 *int8_p = collect_values[0].v_pointer;
 
   if (!int8_p)
     return g_strdup_printf ("value location for '%s' passed as NULL", G_VALUE_TYPE_NAME (value));
@@ -64,13 +64,13 @@
   return NULL;
 }
 
 static gchar*
 value_lcopy_boolean (const GValue *value,
-             guint         n_collect_values,
-             GTypeCValue  *collect_values,
-             guint         collect_flags)
+         guint         n_collect_values,
+         GTypeCValue  *collect_values,
+         guint         collect_flags)
 {
   gboolean *bool_p = collect_values[0].v_pointer;
 
   if (!bool_p)
     return g_strdup_printf ("value location for '%s' passed as NULL", G_VALUE_TYPE_NAME (value));
@@ -80,24 +80,24 @@
   return NULL;
 }
 
 static gchar*
 value_collect_int (GValue      *value,
-           guint        n_collect_values,
-           GTypeCValue *collect_values,
-           guint        collect_flags)
+       guint        n_collect_values,
+       GTypeCValue *collect_values,
+       guint        collect_flags)
 {
   value->data[0].v_int = collect_values[0].v_int;
 
   return NULL;
 }
 
 static gchar*
 value_lcopy_int (const GValue *value,
-         guint         n_collect_values,
-         GTypeCValue  *collect_values,
-         guint         collect_flags)
+     guint         n_collect_values,
+     GTypeCValue  *collect_values,
+     guint         collect_flags)
 {
   gint *int_p = collect_values[0].v_pointer;
 
   if (!int_p)
     return g_strdup_printf ("value location for '%s' passed as NULL", G_VALUE_TYPE_NAME (value));
@@ -107,24 +107,24 @@
   return NULL;
 }
 
 static gchar*
 value_collect_long (GValue      *value,
-            guint        n_collect_values,
-            GTypeCValue *collect_values,
-            guint        collect_flags)
+        guint        n_collect_values,
+        GTypeCValue *collect_values,
+        guint        collect_flags)
 {
   value->data[0].v_long = collect_values[0].v_long;
 
   return NULL;
 }
 
 static gchar*
 value_lcopy_long (const GValue *value,
-          guint         n_collect_values,
-          GTypeCValue  *collect_values,
-          guint         collect_flags)
+      guint         n_collect_values,
+      GTypeCValue  *collect_values,
+      guint         collect_flags)
 {
   glong *long_p = collect_values[0].v_pointer;
 
   if (!long_p)
     return g_strdup_printf ("value location for '%s' passed as NULL", G_VALUE_TYPE_NAME (value));
@@ -140,31 +140,31 @@
   value->data[0].v_int64 = 0;
 }
 
 static void
 value_copy_int64 (const GValue *src_value,
-          GValue       *dest_value)
+      GValue       *dest_value)
 {
   dest_value->data[0].v_int64 = src_value->data[0].v_int64;
 }
 
 static gchar*
 value_collect_int64 (GValue      *value,
-             guint        n_collect_values,
-             GTypeCValue *collect_values,
-             guint        collect_flags)
+         guint        n_collect_values,
+         GTypeCValue *collect_values,
+         guint        collect_flags)
 {
   value->data[0].v_int64 = collect_values[0].v_int64;
 
   return NULL;
 }
 
 static gchar*
 value_lcopy_int64 (const GValue *value,
-           guint         n_collect_values,
-           GTypeCValue  *collect_values,
-           guint         collect_flags)
+       guint         n_collect_values,
+       GTypeCValue  *collect_values,
+       guint         collect_flags)
 {
   gint64 *int64_p = collect_values[0].v_pointer;
 
   if (!int64_p)
     return g_strdup_printf ("value location for '%s' passed as NULL", G_VALUE_TYPE_NAME (value));
@@ -180,31 +180,31 @@
   value->data[0].v_float = 0.0;
 }
 
 static void
 value_copy_float (const GValue *src_value,
-          GValue       *dest_value)
+      GValue       *dest_value)
 {
   dest_value->data[0].v_float = src_value->data[0].v_float;
 }
 
 static gchar*
 value_collect_float (GValue      *value,
-             guint        n_collect_values,
-             GTypeCValue *collect_values,
-             guint        collect_flags)
+         guint        n_collect_values,
+         GTypeCValue *collect_values,
+         guint        collect_flags)
 {
   value->data[0].v_float = collect_values[0].v_double;
 
   return NULL;
 }
 
 static gchar*
 value_lcopy_float (const GValue *value,
-           guint         n_collect_values,
-           GTypeCValue  *collect_values,
-           guint         collect_flags)
+       guint         n_collect_values,
+       GTypeCValue  *collect_values,
+       guint         collect_flags)
 {
   gfloat *float_p = collect_values[0].v_pointer;
 
   if (!float_p)
     return g_strdup_printf ("value location for '%s' passed as NULL", G_VALUE_TYPE_NAME (value));
@@ -220,31 +220,31 @@
   value->data[0].v_double = 0.0;
 }
 
 static void
 value_copy_double (const GValue *src_value,
-           GValue   *dest_value)
+       GValue *dest_value)
 {
   dest_value->data[0].v_double = src_value->data[0].v_double;
 }
 
 static gchar*
-value_collect_double (GValue      *value,
-              guint        n_collect_values,
-              GTypeCValue *collect_values,
-              guint        collect_flags)
+value_collect_double (GValue    *value,
+          guint        n_collect_values,
+          GTypeCValue *collect_values,
+          guint        collect_flags)
 {
   value->data[0].v_double = collect_values[0].v_double;
 
   return NULL;
 }
 
 static gchar*
 value_lcopy_double (const GValue *value,
-            guint         n_collect_values,
-            GTypeCValue  *collect_values,
-            guint         collect_flags)
+        guint         n_collect_values,
+        GTypeCValue  *collect_values,
+        guint         collect_flags)
 {
   gdouble *double_p = collect_values[0].v_pointer;
 
   if (!double_p)
     return g_strdup_printf ("value location for '%s' passed as NULL", G_VALUE_TYPE_NAME (value));
@@ -267,20 +267,20 @@
     g_free (value->data[0].v_pointer);
 }
 
 static void
 value_copy_string (const GValue *src_value,
-           GValue   *dest_value)
+       GValue *dest_value)
 {
   dest_value->data[0].v_pointer = g_strdup (src_value->data[0].v_pointer);
 }
 
 static gchar*
-value_collect_string (GValue      *value,
-              guint        n_collect_values,
-              GTypeCValue *collect_values,
-              guint        collect_flags)
+value_collect_string (GValue    *value,
+          guint        n_collect_values,
+          GTypeCValue *collect_values,
+          guint        collect_flags)
 {
   if (!collect_values[0].v_pointer)
     value->data[0].v_pointer = NULL;
   else if (collect_flags & G_VALUE_NOCOPY_CONTENTS)
     {
@@ -293,13 +293,13 @@
   return NULL;
 }
 
 static gchar*
 value_lcopy_string (const GValue *value,
-            guint         n_collect_values,
-            GTypeCValue  *collect_values,
-            guint         collect_flags)
+        guint         n_collect_values,
+        GTypeCValue  *collect_values,
+        guint         collect_flags)
 {
   gchar **string_p = collect_values[0].v_pointer;
 
   if (!string_p)
     return g_strdup_printf ("value location for '%s' passed as NULL", G_VALUE_TYPE_NAME (value));
@@ -320,11 +320,11 @@
   value->data[0].v_pointer = NULL;
 }
 
 static void
 value_copy_pointer (const GValue *src_value,
-            GValue       *dest_value)
+        GValue       *dest_value)
 {
   dest_value->data[0].v_pointer = src_value->data[0].v_pointer;
 }
 
 static gpointer
@@ -333,24 +333,24 @@
   return value->data[0].v_pointer;
 }
 
 static gchar*
 value_collect_pointer (GValue      *value,
-               guint        n_collect_values,
-               GTypeCValue *collect_values,
-               guint        collect_flags)
+           guint        n_collect_values,
+           GTypeCValue *collect_values,
+           guint        collect_flags)
 {
   value->data[0].v_pointer = collect_values[0].v_pointer;
 
   return NULL;
 }
 
 static gchar*
 value_lcopy_pointer (const GValue *value,
-             guint         n_collect_values,
-             GTypeCValue  *collect_values,
-             guint         collect_flags)
+         guint         n_collect_values,
+         GTypeCValue  *collect_values,
+         guint         collect_flags)
 {
   gpointer *pointer_p = collect_values[0].v_pointer;
 
   if (!pointer_p)
     return g_strdup_printf ("value location for '%s' passed as NULL", G_VALUE_TYPE_NAME (value));
@@ -368,23 +368,23 @@
     g_variant_unref (value->data[0].v_pointer);
 }
 
 static void
 value_copy_variant (const GValue *src_value,
-           GValue   *dest_value)
+       GValue *dest_value)
 {
   if (src_value->data[0].v_pointer)
     dest_value->data[0].v_pointer = g_variant_ref_sink (src_value->data[0].v_pointer);
   else
     dest_value->data[0].v_pointer = NULL;
 }
 
 static gchar*
-value_collect_variant (GValue     *value,
-              guint        n_collect_values,
-              GTypeCValue *collect_values,
-              guint        collect_flags)
+value_collect_variant (GValue   *value,
+          guint        n_collect_values,
+          GTypeCValue *collect_values,
+          guint        collect_flags)
 {
   if (!collect_values[0].v_pointer)
     value->data[0].v_pointer = NULL;
   else if (collect_flags & G_VALUE_NOCOPY_CONTENTS)
     {
@@ -397,13 +397,13 @@
   return NULL;
 }
 
 static gchar*
 value_lcopy_variant (const GValue *value,
-            guint         n_collect_values,
-            GTypeCValue  *collect_values,
-            guint         collect_flags)
+        guint         n_collect_values,
+        GTypeCValue  *collect_values,
+        guint         collect_flags)
 {
   GVariant **variant_p = collect_values[0].v_pointer;
 
   if (!variant_p)
     return g_strdup_printf ("value location for '%s' passed as NULL", G_VALUE_TYPE_NAME (value));
@@ -421,36 +421,36 @@
 /* --- type initialization --- */
 void
 _g_value_types_init (void)
 {
   GTypeInfo info = {
-    0,              /* class_size */
-    NULL,           /* base_init */
-    NULL,           /* base_destroy */
-    NULL,           /* class_init */
-    NULL,           /* class_destroy */
-    NULL,           /* class_data */
-    0,              /* instance_size */
-    0,              /* n_preallocs */
-    NULL,           /* instance_init */
-    NULL,           /* value_table */
+    0,        /* class_size */
+    NULL,     /* base_init */
+    NULL,     /* base_destroy */
+    NULL,     /* class_init */
+    NULL,     /* class_destroy */
+    NULL,     /* class_data */
+    0,        /* instance_size */
+    0,        /* n_preallocs */
+    NULL,     /* instance_init */
+    NULL,     /* value_table */
   };
   const GTypeFundamentalInfo finfo = { G_TYPE_FLAG_DERIVABLE, };
-  GType type;
+  GType type G_GNUC_UNUSED  /* when compiling with G_DISABLE_ASSERT */;
 
   /* G_TYPE_CHAR / G_TYPE_UCHAR
    */
   {
     static const GTypeValueTable value_table = {
-      value_init_long0,     /* value_init */
-      NULL,         /* value_free */
-      value_copy_long0,     /* value_copy */
-      NULL,         /* value_peek_pointer */
-      "i",          /* collect_format */
-      value_collect_int,    /* collect_value */
-      "p",          /* lcopy_format */
-      value_lcopy_char,     /* lcopy_value */
+      value_init_long0,   /* value_init */
+      NULL,     /* value_free */
+      value_copy_long0,   /* value_copy */
+      NULL,     /* value_peek_pointer */
+      "i",      /* collect_format */
+      value_collect_int,  /* collect_value */
+      "p",      /* lcopy_format */
+      value_lcopy_char,   /* lcopy_value */
     };
     info.value_table = &value_table;
     type = g_type_register_fundamental (G_TYPE_CHAR, g_intern_static_string ("gchar"), &info, &finfo, 0);
     g_assert (type == G_TYPE_CHAR);
     type = g_type_register_fundamental (G_TYPE_UCHAR, g_intern_static_string ("guchar"), &info, &finfo, 0);
@@ -459,17 +459,17 @@
 
   /* G_TYPE_BOOLEAN
    */
   {
     static const GTypeValueTable value_table = {
-      value_init_long0,      /* value_init */
-      NULL,          /* value_free */
-      value_copy_long0,      /* value_copy */
+      value_init_long0,    /* value_init */
+      NULL,      /* value_free */
+      value_copy_long0,    /* value_copy */
       NULL,                      /* value_peek_pointer */
-      "i",           /* collect_format */
-      value_collect_int,     /* collect_value */
-      "p",           /* lcopy_format */
+      "i",       /* collect_format */
+      value_collect_int,   /* collect_value */
+      "p",       /* lcopy_format */
       value_lcopy_boolean,   /* lcopy_value */
     };
     info.value_table = &value_table;
     type = g_type_register_fundamental (G_TYPE_BOOLEAN, g_intern_static_string ("gboolean"), &info, &finfo, 0);
     g_assert (type == G_TYPE_BOOLEAN);
@@ -477,18 +477,18 @@
 
   /* G_TYPE_INT / G_TYPE_UINT
    */
   {
     static const GTypeValueTable value_table = {
-      value_init_long0,     /* value_init */
-      NULL,         /* value_free */
-      value_copy_long0,     /* value_copy */
+      value_init_long0,   /* value_init */
+      NULL,     /* value_free */
+      value_copy_long0,   /* value_copy */
       NULL,                     /* value_peek_pointer */
-      "i",          /* collect_format */
-      value_collect_int,    /* collect_value */
-      "p",          /* lcopy_format */
-      value_lcopy_int,      /* lcopy_value */
+      "i",      /* collect_format */
+      value_collect_int,  /* collect_value */
+      "p",      /* lcopy_format */
+      value_lcopy_int,    /* lcopy_value */
     };
     info.value_table = &value_table;
     type = g_type_register_fundamental (G_TYPE_INT, g_intern_static_string ("gint"), &info, &finfo, 0);
     g_assert (type == G_TYPE_INT);
     type = g_type_register_fundamental (G_TYPE_UINT, g_intern_static_string ("guint"), &info, &finfo, 0);
@@ -497,18 +497,18 @@
 
   /* G_TYPE_LONG / G_TYPE_ULONG
    */
   {
     static const GTypeValueTable value_table = {
-      value_init_long0,     /* value_init */
-      NULL,         /* value_free */
-      value_copy_long0,     /* value_copy */
+      value_init_long0,   /* value_init */
+      NULL,     /* value_free */
+      value_copy_long0,   /* value_copy */
       NULL,                     /* value_peek_pointer */
-      "l",          /* collect_format */
-      value_collect_long,   /* collect_value */
-      "p",          /* lcopy_format */
-      value_lcopy_long,     /* lcopy_value */
+      "l",      /* collect_format */
+      value_collect_long, /* collect_value */
+      "p",      /* lcopy_format */
+      value_lcopy_long,   /* lcopy_value */
     };
     info.value_table = &value_table;
     type = g_type_register_fundamental (G_TYPE_LONG, g_intern_static_string ("glong"), &info, &finfo, 0);
     g_assert (type == G_TYPE_LONG);
     type = g_type_register_fundamental (G_TYPE_ULONG, g_intern_static_string ("gulong"), &info, &finfo, 0);
@@ -517,18 +517,18 @@
 
   /* G_TYPE_INT64 / G_TYPE_UINT64
    */
   {
     static const GTypeValueTable value_table = {
-      value_init_int64,     /* value_init */
-      NULL,         /* value_free */
-      value_copy_int64,     /* value_copy */
+      value_init_int64,   /* value_init */
+      NULL,     /* value_free */
+      value_copy_int64,   /* value_copy */
       NULL,                     /* value_peek_pointer */
-      "q",          /* collect_format */
+      "q",      /* collect_format */
       value_collect_int64,  /* collect_value */
-      "p",          /* lcopy_format */
-      value_lcopy_int64,    /* lcopy_value */
+      "p",      /* lcopy_format */
+      value_lcopy_int64,  /* lcopy_value */
     };
     info.value_table = &value_table;
     type = g_type_register_fundamental (G_TYPE_INT64, g_intern_static_string ("gint64"), &info, &finfo, 0);
     g_assert (type == G_TYPE_INT64);
     type = g_type_register_fundamental (G_TYPE_UINT64, g_intern_static_string ("guint64"), &info, &finfo, 0);
@@ -537,71 +537,71 @@
 
   /* G_TYPE_FLOAT
    */
   {
     static const GTypeValueTable value_table = {
-      value_init_float,      /* value_init */
-      NULL,          /* value_free */
-      value_copy_float,      /* value_copy */
+      value_init_float,    /* value_init */
+      NULL,      /* value_free */
+      value_copy_float,    /* value_copy */
       NULL,                      /* value_peek_pointer */
-      "d",           /* collect_format */
+      "d",       /* collect_format */
       value_collect_float,   /* collect_value */
-      "p",           /* lcopy_format */
-      value_lcopy_float,     /* lcopy_value */
+      "p",       /* lcopy_format */
+      value_lcopy_float,   /* lcopy_value */
     };
     info.value_table = &value_table;
     type = g_type_register_fundamental (G_TYPE_FLOAT, g_intern_static_string ("gfloat"), &info, &finfo, 0);
     g_assert (type == G_TYPE_FLOAT);
   }
 
   /* G_TYPE_DOUBLE
    */
   {
     static const GTypeValueTable value_table = {
-      value_init_double,    /* value_init */
-      NULL,         /* value_free */
-      value_copy_double,    /* value_copy */
+      value_init_double,  /* value_init */
+      NULL,     /* value_free */
+      value_copy_double,  /* value_copy */
       NULL,                     /* value_peek_pointer */
-      "d",          /* collect_format */
+      "d",      /* collect_format */
       value_collect_double, /* collect_value */
-      "p",          /* lcopy_format */
-      value_lcopy_double,   /* lcopy_value */
+      "p",      /* lcopy_format */
+      value_lcopy_double, /* lcopy_value */
     };
     info.value_table = &value_table;
     type = g_type_register_fundamental (G_TYPE_DOUBLE, g_intern_static_string ("gdouble"), &info, &finfo, 0);
     g_assert (type == G_TYPE_DOUBLE);
   }
 
   /* G_TYPE_STRING
    */
   {
     static const GTypeValueTable value_table = {
-      value_init_string,    /* value_init */
-      value_free_string,    /* value_free */
-      value_copy_string,    /* value_copy */
+      value_init_string,  /* value_init */
+      value_free_string,  /* value_free */
+      value_copy_string,  /* value_copy */
       value_peek_pointer0,  /* value_peek_pointer */
-      "p",          /* collect_format */
+      "p",      /* collect_format */
       value_collect_string, /* collect_value */
-      "p",          /* lcopy_format */
-      value_lcopy_string,   /* lcopy_value */
+      "p",      /* lcopy_format */
+      value_lcopy_string, /* lcopy_value */
     };
     info.value_table = &value_table;
     type = g_type_register_fundamental (G_TYPE_STRING, g_intern_static_string ("gchararray"), &info, &finfo, 0);
     g_assert (type == G_TYPE_STRING);
   }
 
   /* G_TYPE_POINTER
    */
   {
     static const GTypeValueTable value_table = {
-      value_init_pointer,   /* value_init */
-      NULL,         /* value_free */
-      value_copy_pointer,   /* value_copy */
+      value_init_pointer, /* value_init */
+      NULL,     /* value_free */
+      value_copy_pointer, /* value_copy */
       value_peek_pointer0,  /* value_peek_pointer */
-      "p",          /* collect_format */
-      value_collect_pointer,    /* collect_value */
-      "p",          /* lcopy_format */
+      "p",      /* collect_format */
+      value_collect_pointer,  /* collect_value */
+      "p",      /* lcopy_format */
       value_lcopy_pointer,  /* lcopy_value */
     };
     info.value_table = &value_table;
     type = g_type_register_fundamental (G_TYPE_POINTER, g_intern_static_string ("gpointer"), &info, &finfo, 0);
     g_assert (type == G_TYPE_POINTER);
@@ -609,17 +609,17 @@
 
   /* G_TYPE_VARIANT
    */
   {
     static const GTypeValueTable value_table = {
-      value_init_pointer,   /* value_init */
-      value_free_variant,   /* value_free */
-      value_copy_variant,   /* value_copy */
+      value_init_pointer, /* value_init */
+      value_free_variant, /* value_free */
+      value_copy_variant, /* value_copy */
       value_peek_pointer0,  /* value_peek_pointer */
-      "p",          /* collect_format */
-      value_collect_variant,    /* collect_value */
-      "p",          /* lcopy_format */
+      "p",      /* collect_format */
+      value_collect_variant,  /* collect_value */
+      "p",      /* lcopy_format */
       value_lcopy_variant,  /* lcopy_value */
     };
     info.value_table = &value_table;
     type = g_type_register_fundamental (G_TYPE_VARIANT, g_intern_static_string ("GVariant"), &info, &finfo, 0);
     g_assert (type == G_TYPE_VARIANT);
@@ -636,11 +636,11 @@
  * Set the contents of a %G_TYPE_CHAR #GValue to @v_char.
  * Deprecated: 2.32: This function's input type is broken, see g_value_set_schar()
  */
 void
 g_value_set_char (GValue *value,
-          gchar   v_char)
+      gchar   v_char)
 {
   g_return_if_fail (G_VALUE_HOLDS_CHAR (value));
 
   value->data[0].v_int = v_char;
 }
@@ -674,11 +674,11 @@
  *
  * Since: 2.32
  */
 void
 g_value_set_schar (GValue *value,
-           gint8   v_char)
+       gint8   v_char)
 {
   g_return_if_fail (G_VALUE_HOLDS_CHAR (value));
 
   value->data[0].v_int = v_char;
 }
@@ -707,11 +707,11 @@
  *
  * Set the contents of a %G_TYPE_UCHAR #GValue to @v_uchar.
  */
 void
 g_value_set_uchar (GValue *value,
-           guchar  v_uchar)
+       guchar  v_uchar)
 {
   g_return_if_fail (G_VALUE_HOLDS_UCHAR (value));
 
   value->data[0].v_uint = v_uchar;
 }
@@ -739,11 +739,11 @@
  *
  * Set the contents of a %G_TYPE_BOOLEAN #GValue to @v_boolean.
  */
 void
 g_value_set_boolean (GValue  *value,
-             gboolean v_boolean)
+         gboolean v_boolean)
 {
   g_return_if_fail (G_VALUE_HOLDS_BOOLEAN (value));
 
   value->data[0].v_int = v_boolean != FALSE;
 }
@@ -771,11 +771,11 @@
  *
  * Set the contents of a %G_TYPE_INT #GValue to @v_int.
  */
 void
 g_value_set_int (GValue *value,
-         gint    v_int)
+     gint  v_int)
 {
   g_return_if_fail (G_VALUE_HOLDS_INT (value));
 
   value->data[0].v_int = v_int;
 }
@@ -803,11 +803,11 @@
  *
  * Set the contents of a %G_TYPE_UINT #GValue to @v_uint.
  */
 void
 g_value_set_uint (GValue *value,
-          guint   v_uint)
+      guint   v_uint)
 {
   g_return_if_fail (G_VALUE_HOLDS_UINT (value));
 
   value->data[0].v_uint = v_uint;
 }
@@ -835,11 +835,11 @@
  *
  * Set the contents of a %G_TYPE_LONG #GValue to @v_long.
  */
 void
 g_value_set_long (GValue *value,
-          glong   v_long)
+      glong   v_long)
 {
   g_return_if_fail (G_VALUE_HOLDS_LONG (value));
 
   value->data[0].v_long = v_long;
 }
@@ -867,11 +867,11 @@
  *
  * Set the contents of a %G_TYPE_ULONG #GValue to @v_ulong.
  */
 void
 g_value_set_ulong (GValue *value,
-           gulong  v_ulong)
+       gulong  v_ulong)
 {
   g_return_if_fail (G_VALUE_HOLDS_ULONG (value));
 
   value->data[0].v_ulong = v_ulong;
 }
@@ -900,11 +900,11 @@
  *
  * Returns: 64bit integer contents of @value
  */
 void
 g_value_set_int64 (GValue *value,
-           gint64  v_int64)
+       gint64  v_int64)
 {
   g_return_if_fail (G_VALUE_HOLDS_INT64 (value));
 
   value->data[0].v_int64 = v_int64;
 }
@@ -931,11 +931,11 @@
  *
  * Set the contents of a %G_TYPE_UINT64 #GValue to @v_uint64.
  */
 void
 g_value_set_uint64 (GValue *value,
-            guint64 v_uint64)
+        guint64 v_uint64)
 {
   g_return_if_fail (G_VALUE_HOLDS_UINT64 (value));
 
   value->data[0].v_uint64 = v_uint64;
 }
@@ -963,11 +963,11 @@
  *
  * Set the contents of a %G_TYPE_FLOAT #GValue to @v_float.
  */
 void
 g_value_set_float (GValue *value,
-           gfloat  v_float)
+       gfloat  v_float)
 {
   g_return_if_fail (G_VALUE_HOLDS_FLOAT (value));
 
   value->data[0].v_float = v_float;
 }
@@ -995,11 +995,11 @@
  *
  * Set the contents of a %G_TYPE_DOUBLE #GValue to @v_double.
  */
 void
 g_value_set_double (GValue *value,
-            gdouble v_double)
+        gdouble v_double)
 {
   g_return_if_fail (G_VALUE_HOLDS_DOUBLE (value));
 
   value->data[0].v_double = v_double;
 }
@@ -1027,11 +1027,11 @@
  *
  * Set the contents of a %G_TYPE_STRING #GValue to @v_string.
  */
 void
 g_value_set_string (GValue  *value,
-                    const gchar *v_string)
+        const gchar *v_string)
 {
   gchar *new_val;
 
   g_return_if_fail (G_VALUE_HOLDS_STRING (value));
 
@@ -1054,11 +1054,11 @@
  * The string is assumed to be static, and is thus not duplicated
  * when setting the #GValue.
  */
 void
 g_value_set_static_string (GValue      *value,
-               const gchar *v_string)
+         const gchar *v_string)
 {
   g_return_if_fail (G_VALUE_HOLDS_STRING (value));
 
   if (!(value->data[1].v_uint & G_VALUE_NOCOPY_CONTENTS))
     g_free (value->data[0].v_pointer);
@@ -1075,11 +1075,11 @@
  *
  * Deprecated: 2.4: Use g_value_take_string() instead.
  */
 void
 g_value_set_string_take_ownership (GValue *value,
-                   gchar  *v_string)
+           gchar  *v_string)
 {
   g_value_take_string (value, v_string);
 }
 
 /**
@@ -1091,11 +1091,11 @@
  *
  * Since: 2.4
  */
 void
 g_value_take_string (GValue *value,
-             gchar  *v_string)
+         gchar  *v_string)
 {
   g_return_if_fail (G_VALUE_HOLDS_STRING (value));
 
   if (value->data[1].v_uint & G_VALUE_NOCOPY_CONTENTS)
     value->data[1].v_uint = 0;
@@ -1143,11 +1143,11 @@
  *
  * Set the contents of a pointer #GValue to @v_pointer.
  */
 void
 g_value_set_pointer (GValue  *value,
-             gpointer v_pointer)
+         gpointer v_pointer)
 {
   g_return_if_fail (G_VALUE_HOLDS_POINTER (value));
 
   value->data[0].v_pointer = v_pointer;
 }
@@ -1179,11 +1179,11 @@
  *
  * Since: 2.12
  */
 void
 g_value_set_gtype (GValue *value,
-           GType   v_gtype)
+       GType   v_gtype)
 {
   g_return_if_fail (G_VALUE_HOLDS_GTYPE (value));
 
   value->data[0].v_pointer = GSIZE_TO_POINTER (v_gtype);
 
@@ -1341,18 +1341,18 @@
   if (G_VALUE_HOLDS_STRING (value))
     {
       src = g_value_get_string (value);
 
       if (!src)
-    contents = g_strdup ("NULL");
+  contents = g_strdup ("NULL");
       else
-    {
-      gchar *s = g_strescape (src, NULL);
+  {
+    gchar *s = g_strescape (src, NULL);
 
-      contents = g_strdup_printf ("\"%s\"", s);
-      g_free (s);
-    }
+    contents = g_strdup_printf ("\"%s\"", s);
+    g_free (s);
+  }
     }
   else if (g_value_type_transformable (G_VALUE_TYPE (value), G_TYPE_STRING))
     {
       GValue tmp_value = G_VALUE_INIT;
       gchar *s;
@@ -1360,27 +1360,27 @@
       g_value_init (&tmp_value, G_TYPE_STRING);
       g_value_transform (value, &tmp_value);
       s = g_strescape (g_value_get_string (&tmp_value), NULL);
       g_value_unset (&tmp_value);
       if (G_VALUE_HOLDS_ENUM (value) || G_VALUE_HOLDS_FLAGS (value))
-    contents = g_strdup_printf ("((%s) %s)",
-                    g_type_name (G_VALUE_TYPE (value)),
-                    s);
+  contents = g_strdup_printf ("((%s) %s)",
+            g_type_name (G_VALUE_TYPE (value)),
+            s);
       else
-    contents = g_strdup (s ? s : "NULL");
+  contents = g_strdup (s ? s : "NULL");
       g_free (s);
     }
   else if (g_value_fits_pointer (value))
     {
       gpointer p = g_value_peek_pointer (value);
 
       if (!p)
-    contents = g_strdup ("NULL");
+  contents = g_strdup ("NULL");
       else if (G_VALUE_HOLDS_OBJECT (value))
-    contents = g_strdup_printf ("((%s*) %p)", G_OBJECT_TYPE_NAME (p), p);
+  contents = g_strdup_printf ("((%s*) %p)", G_OBJECT_TYPE_NAME (p), p);
       else if (G_VALUE_HOLDS_PARAM (value))
-    contents = g_strdup_printf ("((%s*) %p)", G_PARAM_SPEC_TYPE_NAME (p), p);
+  contents = g_strdup_printf ("((%s*) %p)", G_PARAM_SPEC_TYPE_NAME (p), p);
       else if (G_VALUE_HOLDS (value, G_TYPE_STRV))
         {
           GStrv strv = g_value_get_boxed (value);
           GString *tmp = g_string_new ("[");
 
@@ -1397,15 +1397,15 @@
 
           g_string_append (tmp, "]");
           contents = g_string_free (tmp, FALSE);
         }
       else if (G_VALUE_HOLDS_BOXED (value))
-    contents = g_strdup_printf ("((%s*) %p)", g_type_name (G_VALUE_TYPE (value)), p);
+  contents = g_strdup_printf ("((%s*) %p)", g_type_name (G_VALUE_TYPE (value)), p);
       else if (G_VALUE_HOLDS_POINTER (value))
-    contents = g_strdup_printf ("((gpointer) %p)", p);
+  contents = g_strdup_printf ("((gpointer) %p)", p);
       else
-    contents = g_strdup ("???");
+  contents = g_strdup ("???");
     }
   else
     contents = g_strdup ("???");
 
   return contents;
@@ -1422,20 +1422,20 @@
  */
 GType
 g_pointer_type_register_static (const gchar *name)
 {
   const GTypeInfo type_info = {
-    0,          /* class_size */
-    NULL,       /* base_init */
-    NULL,       /* base_finalize */
-    NULL,       /* class_init */
-    NULL,       /* class_finalize */
-    NULL,       /* class_data */
-    0,          /* instance_size */
-    0,          /* n_preallocs */
-    NULL,       /* instance_init */
-    NULL        /* value_table */
+    0,      /* class_size */
+    NULL,   /* base_init */
+    NULL,   /* base_finalize */
+    NULL,   /* class_init */
+    NULL,   /* class_finalize */
+    NULL,   /* class_data */
+    0,      /* instance_size */
+    0,      /* n_preallocs */
+    NULL,   /* instance_init */
+    NULL    /* value_table */
   };
   GType type;
 
   g_return_val_if_fail (name != NULL, 0);
   g_return_val_if_fail (g_type_from_name (name) == 0, 0);
