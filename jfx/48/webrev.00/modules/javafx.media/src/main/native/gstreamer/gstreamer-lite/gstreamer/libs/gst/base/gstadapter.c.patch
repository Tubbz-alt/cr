diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/libs/gst/base/gstadapter.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/libs/gst/base/gstadapter.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/libs/gst/base/gstadapter.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/libs/gst/base/gstadapter.c
@@ -125,10 +125,11 @@
  */
 
 #include <gst/gst_private.h>
 #include "gstadapter.h"
 #include <string.h>
+#include <gst/base/gstqueuearray.h>
 
 /* default size for the assembled data buffer */
 #define DEFAULT_SIZE 4096
 
 static void gst_adapter_flush_unchecked (GstAdapter * adapter, gsize flush);
@@ -139,12 +140,11 @@
 struct _GstAdapter
 {
   GObject object;
 
   /*< private > */
-  GSList *buflist;
-  GSList *buflist_end;
+  GstQueueArray *bufqueue;
   gsize size;
   gsize skip;
   guint count;
 
   /* we keep state of assembled pieces */
@@ -158,11 +158,12 @@
   guint64 dts_distance;
   guint64 offset;
   guint64 offset_distance;
 
   gsize scan_offset;
-  GSList *scan_entry;
+  /* G_MAXUINT when unset */
+  guint scan_entry_idx;
 
   GstClockTime pts_at_discont;
   GstClockTime dts_at_discont;
   guint64 offset_at_discont;
 
@@ -206,10 +207,11 @@
   adapter->offset_distance = 0;
   adapter->pts_at_discont = GST_CLOCK_TIME_NONE;
   adapter->dts_at_discont = GST_CLOCK_TIME_NONE;
   adapter->offset_at_discont = GST_BUFFER_OFFSET_NONE;
   adapter->distance_from_discont = 0;
+  adapter->bufqueue = gst_queue_array_new (10);
 }
 
 static void
 gst_adapter_dispose (GObject * object)
 {
@@ -225,10 +227,12 @@
 {
   GstAdapter *adapter = GST_ADAPTER (object);
 
   g_free (adapter->assembled_data);
 
+  gst_queue_array_free (adapter->bufqueue);
+
   GST_CALL_PARENT (G_OBJECT_CLASS, finalize, (object));
 }
 
 /**
  * gst_adapter_new:
@@ -250,19 +254,19 @@
  * Removes all buffers from @adapter.
  */
 void
 gst_adapter_clear (GstAdapter * adapter)
 {
+  GstMiniObject *obj;
   g_return_if_fail (GST_IS_ADAPTER (adapter));
 
   if (adapter->info.memory)
     gst_adapter_unmap (adapter);
 
-  g_slist_foreach (adapter->buflist, (GFunc) gst_mini_object_unref, NULL);
-  g_slist_free (adapter->buflist);
-  adapter->buflist = NULL;
-  adapter->buflist_end = NULL;
+  while ((obj = gst_queue_array_pop_head (adapter->bufqueue)))
+    gst_mini_object_unref (obj);
+
   adapter->count = 0;
   adapter->size = 0;
   adapter->skip = 0;
   adapter->assembled_len = 0;
   adapter->pts = GST_CLOCK_TIME_NONE;
@@ -274,11 +278,11 @@
   adapter->pts_at_discont = GST_CLOCK_TIME_NONE;
   adapter->dts_at_discont = GST_CLOCK_TIME_NONE;
   adapter->offset_at_discont = GST_BUFFER_OFFSET_NONE;
   adapter->distance_from_discont = 0;
   adapter->scan_offset = 0;
-  adapter->scan_entry = NULL;
+  adapter->scan_entry_idx = G_MAXUINT;
 }
 
 static inline void
 update_timestamps_and_offset (GstAdapter * adapter, GstBuffer * buf)
 {
@@ -316,28 +320,27 @@
 /* copy data into @dest, skipping @skip bytes from the head buffers */
 static void
 copy_into_unchecked (GstAdapter * adapter, guint8 * dest, gsize skip,
     gsize size)
 {
-  GSList *g;
   GstBuffer *buf;
   gsize bsize, csize;
+  guint idx = 0;
 
   /* first step, do skipping */
   /* we might well be copying where we were scanning */
-  if (adapter->scan_entry && (adapter->scan_offset <= skip)) {
-    g = adapter->scan_entry;
+  if (adapter->scan_entry_idx != G_MAXUINT && (adapter->scan_offset <= skip)) {
+    idx = adapter->scan_entry_idx;
     skip -= adapter->scan_offset;
   } else {
-    g = adapter->buflist;
+    idx = 0;
   }
-  buf = g->data;
+  buf = gst_queue_array_peek_nth (adapter->bufqueue, idx++);
   bsize = gst_buffer_get_size (buf);
   while (G_UNLIKELY (skip >= bsize)) {
     skip -= bsize;
-    g = g_slist_next (g);
-    buf = g->data;
+    buf = gst_queue_array_peek_nth (adapter->bufqueue, idx++);
     bsize = gst_buffer_get_size (buf);
   }
   /* copy partial buffer */
   csize = MIN (bsize - skip, size);
   GST_DEBUG ("bsize %" G_GSIZE_FORMAT ", skip %" G_GSIZE_FORMAT ", csize %"
@@ -348,12 +351,11 @@
   size -= csize;
   dest += csize;
 
   /* second step, copy remainder */
   while (size > 0) {
-    g = g_slist_next (g);
-    buf = g->data;
+    buf = gst_queue_array_peek_nth (adapter->bufqueue, idx++);
     bsize = gst_buffer_get_size (buf);
     if (G_LIKELY (bsize > 0)) {
       csize = MIN (bsize, size);
       GST_CAT_LOG_OBJECT (GST_CAT_PERFORMANCE, adapter,
           "extract %" G_GSIZE_FORMAT " bytes", csize);
@@ -382,21 +384,20 @@
 
   size = gst_buffer_get_size (buf);
   adapter->size += size;
 
   /* Note: merging buffers at this point is premature. */
-  if (G_UNLIKELY (adapter->buflist == NULL)) {
+  if (gst_queue_array_is_empty (adapter->bufqueue)) {
     GST_LOG_OBJECT (adapter, "pushing %p first %" G_GSIZE_FORMAT " bytes",
         buf, size);
-    adapter->buflist = adapter->buflist_end = g_slist_append (NULL, buf);
+    gst_queue_array_push_tail (adapter->bufqueue, buf);
     update_timestamps_and_offset (adapter, buf);
   } else {
     /* Otherwise append to the end, and advance our end pointer */
     GST_LOG_OBJECT (adapter, "pushing %p %" G_GSIZE_FORMAT " bytes at end, "
         "size now %" G_GSIZE_FORMAT, buf, size, adapter->size);
-    adapter->buflist_end = g_slist_append (adapter->buflist_end, buf);
-    adapter->buflist_end = g_slist_next (adapter->buflist_end);
+    gst_queue_array_push_tail (adapter->bufqueue, buf);
   }
   ++adapter->count;
 }
 
 #if 0
@@ -504,11 +505,11 @@
     return adapter->assembled_data;
 
 #if 0
   do {
 #endif
-    cur = adapter->buflist->data;
+    cur = gst_queue_array_peek_head (adapter->bufqueue);
     skip = adapter->skip;
 
     csize = gst_buffer_get_size (cur);
     if (csize >= size + skip) {
       if (!gst_buffer_map (cur, &adapter->info, GST_MAP_READ))
@@ -565,11 +566,11 @@
 gst_adapter_unmap (GstAdapter * adapter)
 {
   g_return_if_fail (GST_IS_ADAPTER (adapter));
 
   if (adapter->info.memory) {
-    GstBuffer *cur = adapter->buflist->data;
+    GstBuffer *cur = gst_queue_array_peek_head (adapter->bufqueue);
     GST_LOG_OBJECT (adapter, "unmap memory buffer %p", cur);
     gst_buffer_unmap (cur, &adapter->info);
     adapter->info.memory = NULL;
   }
 }
@@ -627,11 +628,10 @@
 static void
 gst_adapter_flush_unchecked (GstAdapter * adapter, gsize flush)
 {
   GstBuffer *cur;
   gsize size;
-  GSList *g;
 
   GST_LOG_OBJECT (adapter, "flushing %" G_GSIZE_FORMAT " bytes", flush);
 
   if (adapter->info.memory)
     gst_adapter_unmap (adapter);
@@ -646,46 +646,44 @@
   adapter->pts_distance -= adapter->skip;
   adapter->dts_distance -= adapter->skip;
   adapter->offset_distance -= adapter->skip;
   adapter->distance_from_discont -= adapter->skip;
 
-  g = adapter->buflist;
-  cur = g->data;
+  cur = gst_queue_array_peek_head (adapter->bufqueue);
   size = gst_buffer_get_size (cur);
   while (flush >= size) {
     /* can skip whole buffer */
     GST_LOG_OBJECT (adapter, "flushing out head buffer");
     adapter->pts_distance += size;
     adapter->dts_distance += size;
     adapter->offset_distance += size;
     adapter->distance_from_discont += size;
     flush -= size;
 
-    gst_buffer_unref (cur);
-    g = g_slist_delete_link (g, g);
     --adapter->count;
 
-    if (G_UNLIKELY (g == NULL)) {
+    cur = NULL;
+    gst_buffer_unref (gst_queue_array_pop_head (adapter->bufqueue));
+
+    if (gst_queue_array_is_empty (adapter->bufqueue)) {
       GST_LOG_OBJECT (adapter, "adapter empty now");
-      adapter->buflist_end = NULL;
       break;
     }
     /* there is a new head buffer, update the timestamps */
-    cur = g->data;
+    cur = gst_queue_array_peek_head (adapter->bufqueue);
     update_timestamps_and_offset (adapter, cur);
     size = gst_buffer_get_size (cur);
   }
-  adapter->buflist = g;
   /* account for the remaining bytes */
   adapter->skip = flush;
   adapter->pts_distance += flush;
   adapter->dts_distance += flush;
   adapter->offset_distance += flush;
   adapter->distance_from_discont += flush;
   /* invalidate scan position */
   adapter->scan_offset = 0;
-  adapter->scan_entry = NULL;
+  adapter->scan_entry_idx = G_MAXUINT;
 }
 
 /**
  * gst_adapter_flush:
  * @adapter: a #GstAdapter
@@ -811,13 +809,13 @@
 GstBuffer *
 gst_adapter_get_buffer_fast (GstAdapter * adapter, gsize nbytes)
 {
   GstBuffer *buffer = NULL;
   GstBuffer *cur;
-  GSList *item;
   gsize skip;
   gsize left = nbytes;
+  guint idx, len;
 
   g_return_val_if_fail (GST_IS_ADAPTER (adapter), NULL);
   g_return_val_if_fail (nbytes > 0, NULL);
 
   GST_LOG_OBJECT (adapter, "getting buffer of %" G_GSIZE_FORMAT " bytes",
@@ -828,23 +826,25 @@
    * random size. */
   if (G_UNLIKELY (nbytes > adapter->size))
     return NULL;
 
   skip = adapter->skip;
-  cur = adapter->buflist->data;
+  cur = gst_queue_array_peek_head (adapter->bufqueue);
 
   if (skip == 0 && gst_buffer_get_size (cur) == nbytes) {
     GST_LOG_OBJECT (adapter, "providing buffer of %" G_GSIZE_FORMAT " bytes"
         " as head buffer", nbytes);
     buffer = gst_buffer_ref (cur);
     goto done;
   }
 
-  for (item = adapter->buflist; item && left > 0; item = item->next) {
+  len = gst_queue_array_get_length (adapter->bufqueue);
+
+  for (idx = 0; idx < len && left > 0; idx++) {
     gsize size, cur_size;
 
-    cur = item->data;
+    cur = gst_queue_array_peek_nth (adapter->bufqueue, idx);
     cur_size = gst_buffer_get_size (cur);
     size = MIN (cur_size - skip, left);
 
     GST_LOG_OBJECT (adapter, "appending %" G_GSIZE_FORMAT " bytes"
         " via region copy", size);
@@ -977,11 +977,11 @@
    * as one usually does an _available() first instead of grabbing a
    * random size. */
   if (G_UNLIKELY (nbytes > adapter->size))
     return NULL;
 
-  cur = adapter->buflist->data;
+  cur = gst_queue_array_peek_head (adapter->bufqueue);
   skip = adapter->skip;
   hsize = gst_buffer_get_size (cur);
 
   /* our head buffer has enough data left, return it */
   if (skip == 0 && hsize == nbytes) {
@@ -1012,22 +1012,24 @@
   data = gst_adapter_get_internal (adapter, nbytes);
 
   buffer = gst_buffer_new_wrapped (data, nbytes);
 
   {
-    GSList *g;
+    guint idx, len;
     GstBuffer *cur;
     gsize read_offset = 0;
 
-    g = adapter->buflist;
-    while (g && read_offset < nbytes + adapter->skip) {
-      cur = g->data;
+    idx = 0;
+    len = gst_queue_array_get_length (adapter->bufqueue);
+
+    while (idx < len && read_offset < nbytes + adapter->skip) {
+      cur = gst_queue_array_peek_nth (adapter->bufqueue, idx);
 
       gst_buffer_foreach_meta (cur, foreach_metadata, buffer);
       read_offset += gst_buffer_get_size (cur);
 
-      g = g_slist_next (g);
+      idx++;
     }
   }
 
 done:
 
@@ -1106,11 +1108,11 @@
   g_return_val_if_fail (nbytes <= adapter->size, NULL);
 
   GST_LOG_OBJECT (adapter, "taking %" G_GSIZE_FORMAT " bytes", nbytes);
 
   while (nbytes > 0) {
-    cur = adapter->buflist->data;
+    cur = gst_queue_array_peek_head (adapter->bufqueue);
     skip = adapter->skip;
     cur_size = gst_buffer_get_size (cur);
     hsize = MIN (nbytes, cur_size - skip);
 
     cur = gst_adapter_take_buffer (adapter, hsize);
@@ -1144,22 +1146,22 @@
 gst_adapter_get_list (GstAdapter * adapter, gsize nbytes)
 {
   GQueue queue = G_QUEUE_INIT;
   GstBuffer *cur, *buffer;
   gsize hsize, skip, cur_size;
-  GSList *g = NULL;
+  guint idx;
 
   g_return_val_if_fail (GST_IS_ADAPTER (adapter), NULL);
   g_return_val_if_fail (nbytes <= adapter->size, NULL);
 
   GST_LOG_OBJECT (adapter, "getting %" G_GSIZE_FORMAT " bytes", nbytes);
 
-  g = adapter->buflist;
+  idx = 0;
   skip = adapter->skip;
 
   while (nbytes > 0) {
-    cur = g->data;
+    cur = gst_queue_array_peek_nth (adapter->bufqueue, idx++);
     cur_size = gst_buffer_get_size (cur);
     hsize = MIN (nbytes, cur_size - skip);
 
     if (skip == 0 && cur_size == hsize) {
       GST_LOG_OBJECT (adapter,
@@ -1173,11 +1175,10 @@
 
     g_queue_push_tail (&queue, buffer);
 
     nbytes -= hsize;
     skip = 0;
-    g = g_slist_next (g);
   }
 
   return queue.head;
 }
 
@@ -1222,11 +1223,11 @@
     n_bufs = (adapter->count * nbytes * 1.2 / adapter->size) + 1;
 
   buffer_list = gst_buffer_list_new_sized (n_bufs);
 
   while (nbytes > 0) {
-    cur = adapter->buflist->data;
+    cur = gst_queue_array_peek_head (adapter->bufqueue);
     skip = adapter->skip;
     cur_size = gst_buffer_get_size (cur);
     hsize = MIN (nbytes, cur_size - skip);
 
     gst_buffer_list_add (buffer_list, gst_adapter_take_buffer (adapter, hsize));
@@ -1258,11 +1259,11 @@
 {
   GstBufferList *buffer_list;
   GstBuffer *cur, *buffer;
   gsize hsize, skip, cur_size;
   guint n_bufs;
-  GSList *g = NULL;
+  guint idx;
 
   g_return_val_if_fail (GST_IS_ADAPTER (adapter), NULL);
 
   if (nbytes > adapter->size)
     return NULL;
@@ -1275,15 +1276,15 @@
   else
     n_bufs = (adapter->count * nbytes * 1.2 / adapter->size) + 1;
 
   buffer_list = gst_buffer_list_new_sized (n_bufs);
 
-  g = adapter->buflist;
+  idx = 0;
   skip = adapter->skip;
 
   while (nbytes > 0) {
-    cur = g->data;
+    cur = gst_queue_array_peek_nth (adapter->bufqueue, idx++);
     cur_size = gst_buffer_get_size (cur);
     hsize = MIN (nbytes, cur_size - skip);
 
     if (skip == 0 && cur_size == hsize) {
       GST_LOG_OBJECT (adapter,
@@ -1297,11 +1298,10 @@
 
     gst_buffer_list_add (buffer_list, buffer);
 
     nbytes -= hsize;
     skip = 0;
-    g = g_slist_next (g);
   }
 
   return buffer_list;
 }
 
@@ -1337,11 +1337,11 @@
 gsize
 gst_adapter_available_fast (GstAdapter * adapter)
 {
   GstBuffer *cur;
   gsize size;
-  GSList *g;
+  guint idx;
 
   g_return_val_if_fail (GST_IS_ADAPTER (adapter), 0);
 
   /* no data */
   if (adapter->size == 0)
@@ -1350,17 +1350,16 @@
   /* some stuff we already assembled */
   if (adapter->assembled_len)
     return adapter->assembled_len;
 
   /* take the first non-zero buffer */
-  g = adapter->buflist;
+  idx = 0;
   while (TRUE) {
-    cur = g->data;
+    cur = gst_queue_array_peek_nth (adapter->bufqueue, idx++);
     size = gst_buffer_get_size (cur);
     if (size != 0)
       break;
-    g = g_slist_next (g);
   }
 
   /* we can quickly get the (remaining) data of the first buffer */
   return size - adapter->skip;
 }
@@ -1547,29 +1546,29 @@
 GstClockTime
 gst_adapter_prev_pts_at_offset (GstAdapter * adapter, gsize offset,
     guint64 * distance)
 {
   GstBuffer *cur;
-  GSList *g;
   gsize read_offset = 0;
   gsize pts_offset = 0;
   GstClockTime pts = adapter->pts;
+  guint idx, len;
 
   g_return_val_if_fail (GST_IS_ADAPTER (adapter), GST_CLOCK_TIME_NONE);
 
-  g = adapter->buflist;
+  idx = 0;
+  len = gst_queue_array_get_length (adapter->bufqueue);
 
-  while (g && read_offset < offset + adapter->skip) {
-    cur = g->data;
+  while (idx < len && read_offset < offset + adapter->skip) {
+    cur = gst_queue_array_peek_nth (adapter->bufqueue, idx++);
 
     if (GST_CLOCK_TIME_IS_VALID (GST_BUFFER_PTS (cur))) {
       pts = GST_BUFFER_PTS (cur);
       pts_offset = read_offset;
     }
 
     read_offset += gst_buffer_get_size (cur);
-    g = g_slist_next (g);
   }
 
   if (distance)
     *distance = adapter->pts_distance + offset - pts_offset;
 
@@ -1597,29 +1596,29 @@
 GstClockTime
 gst_adapter_prev_dts_at_offset (GstAdapter * adapter, gsize offset,
     guint64 * distance)
 {
   GstBuffer *cur;
-  GSList *g;
   gsize read_offset = 0;
   gsize dts_offset = 0;
   GstClockTime dts = adapter->dts;
+  guint idx, len;
 
   g_return_val_if_fail (GST_IS_ADAPTER (adapter), GST_CLOCK_TIME_NONE);
 
-  g = adapter->buflist;
+  idx = 0;
+  len = gst_queue_array_get_length (adapter->bufqueue);
 
-  while (g && read_offset < offset + adapter->skip) {
-    cur = g->data;
+  while (idx < len && read_offset < offset + adapter->skip) {
+    cur = gst_queue_array_peek_nth (adapter->bufqueue, idx++);
 
     if (GST_CLOCK_TIME_IS_VALID (GST_BUFFER_DTS (cur))) {
       dts = GST_BUFFER_DTS (cur);
       dts_offset = read_offset;
     }
 
     read_offset += gst_buffer_get_size (cur);
-    g = g_slist_next (g);
   }
 
   if (distance)
     *distance = adapter->dts_distance + offset - dts_offset;
 
@@ -1651,16 +1650,16 @@
  */
 gssize
 gst_adapter_masked_scan_uint32_peek (GstAdapter * adapter, guint32 mask,
     guint32 pattern, gsize offset, gsize size, guint32 * value)
 {
-  GSList *g;
   gsize skip, bsize, i;
   guint32 state;
   GstMapInfo info;
   guint8 *bdata;
   GstBuffer *buf;
+  guint idx;
 
   g_return_val_if_fail (size > 0, -1);
   g_return_val_if_fail (offset + size <= adapter->size, -1);
   g_return_val_if_fail (((~mask) & pattern) == 0, -1);
 
@@ -1670,26 +1669,25 @@
 
   skip = offset + adapter->skip;
 
   /* first step, do skipping and position on the first buffer */
   /* optimistically assume scanning continues sequentially */
-  if (adapter->scan_entry && (adapter->scan_offset <= skip)) {
-    g = adapter->scan_entry;
+  if (adapter->scan_entry_idx != G_MAXUINT && (adapter->scan_offset <= skip)) {
+    idx = adapter->scan_entry_idx;
     skip -= adapter->scan_offset;
   } else {
-    g = adapter->buflist;
+    idx = 0;
     adapter->scan_offset = 0;
-    adapter->scan_entry = NULL;
+    adapter->scan_entry_idx = G_MAXUINT;
   }
-  buf = g->data;
+  buf = gst_queue_array_peek_nth (adapter->bufqueue, idx++);
   bsize = gst_buffer_get_size (buf);
   while (G_UNLIKELY (skip >= bsize)) {
     skip -= bsize;
-    g = g_slist_next (g);
     adapter->scan_offset += bsize;
-    adapter->scan_entry = g;
-    buf = g->data;
+    adapter->scan_entry_idx = idx;
+    buf = gst_queue_array_peek_nth (adapter->bufqueue, idx++);
     bsize = gst_buffer_get_size (buf);
   }
   /* get the data now */
   if (!gst_buffer_map (buf, &info, GST_MAP_READ))
     return -1;
@@ -1721,15 +1719,14 @@
     if (size == 0)
       break;
 
     /* nothing found yet, go to next buffer */
     skip += bsize;
-    g = g_slist_next (g);
     adapter->scan_offset += info.size;
-    adapter->scan_entry = g;
+    adapter->scan_entry_idx = idx;
     gst_buffer_unmap (buf, &info);
-    buf = g->data;
+    buf = gst_queue_array_peek_nth (adapter->bufqueue, idx++);
 
     if (!gst_buffer_map (buf, &info, GST_MAP_READ))
       return -1;
 
     bsize = info.size;
