diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/fft/_kiss_fft_guts_f32.h b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/fft/_kiss_fft_guts_f32.h
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/fft/_kiss_fft_guts_f32.h
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/fft/_kiss_fft_guts_f32.h
@@ -69,44 +69,44 @@
 #  define CHECK_OVERFLOW_OP(a,op,b) /* noop */
 #endif
 
 #define  C_ADD( res, a,b)\
     do { \
-        CHECK_OVERFLOW_OP((a).r,+,(b).r)\
-        CHECK_OVERFLOW_OP((a).i,+,(b).i)\
-        (res).r=(a).r+(b).r;  (res).i=(a).i+(b).i; \
+      CHECK_OVERFLOW_OP((a).r,+,(b).r)\
+      CHECK_OVERFLOW_OP((a).i,+,(b).i)\
+      (res).r=(a).r+(b).r;  (res).i=(a).i+(b).i; \
     }while(0)
 #define  C_SUB( res, a,b)\
     do { \
-        CHECK_OVERFLOW_OP((a).r,-,(b).r)\
-        CHECK_OVERFLOW_OP((a).i,-,(b).i)\
-        (res).r=(a).r-(b).r;  (res).i=(a).i-(b).i; \
+      CHECK_OVERFLOW_OP((a).r,-,(b).r)\
+      CHECK_OVERFLOW_OP((a).i,-,(b).i)\
+      (res).r=(a).r-(b).r;  (res).i=(a).i-(b).i; \
     }while(0)
 #define C_ADDTO( res , a)\
     do { \
-        CHECK_OVERFLOW_OP((res).r,+,(a).r)\
-        CHECK_OVERFLOW_OP((res).i,+,(a).i)\
-        (res).r += (a).r;  (res).i += (a).i;\
+      CHECK_OVERFLOW_OP((res).r,+,(a).r)\
+      CHECK_OVERFLOW_OP((res).i,+,(a).i)\
+      (res).r += (a).r;  (res).i += (a).i;\
     }while(0)
 
 #define C_SUBFROM( res , a)\
     do {\
-        CHECK_OVERFLOW_OP((res).r,-,(a).r)\
-        CHECK_OVERFLOW_OP((res).i,-,(a).i)\
-        (res).r -= (a).r;  (res).i -= (a).i; \
+      CHECK_OVERFLOW_OP((res).r,-,(a).r)\
+      CHECK_OVERFLOW_OP((res).i,-,(a).i)\
+      (res).r -= (a).r;  (res).i -= (a).i; \
     }while(0)
 
 
 #define KISS_FFT_F32_COS(phase) (kiss_fft_f32_scalar) cos(phase)
 #define KISS_FFT_F32_SIN(phase) (kiss_fft_f32_scalar) sin(phase)
 #define HALF_OF(x) ((x)*.5)
 
 #define  kf_cexp(x,phase) \
-    do{ \
-        (x)->r = KISS_FFT_F32_COS(phase);\
-        (x)->i = KISS_FFT_F32_SIN(phase);\
-    }while(0)
+  do{ \
+    (x)->r = KISS_FFT_F32_COS(phase);\
+    (x)->i = KISS_FFT_F32_SIN(phase);\
+  }while(0)
 
 
 /* a debugging function */
 #define pcpx(c)\
     fprintf(stderr,"%g + %gi\n",(double)((c)->r),(double)((c)->i) )
