diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/giounix.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/giounix.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/giounix.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/giounix.c
@@ -29,11 +29,11 @@
  * MT safe
  */
 
 #include "config.h"
 
-#define _POSIX_SOURCE       /* for SSIZE_MAX */
+#define _POSIX_SOURCE   /* for SSIZE_MAX */
 
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <stdio.h>
 #include <unistd.h>
@@ -69,47 +69,48 @@
   GIOChannel   *channel;
   GIOCondition  condition;
 };
 
 
-static GIOStatus    g_io_unix_read      (GIOChannel   *channel,
-                         gchar        *buf,
-                         gsize         count,
-                         gsize        *bytes_read,
-                         GError      **err);
-static GIOStatus    g_io_unix_write     (GIOChannel   *channel,
-                         const gchar  *buf,
-                         gsize         count,
-                         gsize        *bytes_written,
-                         GError      **err);
-static GIOStatus    g_io_unix_seek      (GIOChannel   *channel,
-                         gint64        offset,
-                         GSeekType     type,
-                         GError      **err);
-static GIOStatus    g_io_unix_close     (GIOChannel   *channel,
-                         GError      **err);
-static void     g_io_unix_free      (GIOChannel   *channel);
-static GSource*     g_io_unix_create_watch  (GIOChannel   *channel,
-                         GIOCondition  condition);
-static GIOStatus    g_io_unix_set_flags (GIOChannel   *channel,
-                                     GIOFlags      flags,
-                         GError      **err);
-static GIOFlags     g_io_unix_get_flags (GIOChannel   *channel);
+static GIOStatus  g_io_unix_read    (GIOChannel   *channel,
+             gchar        *buf,
+             gsize         count,
+             gsize        *bytes_read,
+             GError      **err);
+static GIOStatus  g_io_unix_write   (GIOChannel   *channel,
+             const gchar  *buf,
+             gsize         count,
+             gsize        *bytes_written,
+             GError      **err);
+static GIOStatus  g_io_unix_seek    (GIOChannel   *channel,
+             gint64        offset,
+             GSeekType     type,
+             GError      **err);
+static GIOStatus  g_io_unix_close   (GIOChannel   *channel,
+             GError      **err);
+static void   g_io_unix_free    (GIOChannel   *channel);
+static GSource*   g_io_unix_create_watch  (GIOChannel   *channel,
+             GIOCondition  condition);
+static GIOStatus  g_io_unix_set_flags (GIOChannel   *channel,
+                               GIOFlags      flags,
+             GError      **err);
+static GIOFlags   g_io_unix_get_flags (GIOChannel   *channel);
 
 static gboolean g_io_unix_prepare  (GSource     *source,
-                    gint        *timeout);
+            gint        *timeout);
 static gboolean g_io_unix_check    (GSource     *source);
 static gboolean g_io_unix_dispatch (GSource     *source,
-                    GSourceFunc  callback,
-                    gpointer     user_data);
+            GSourceFunc  callback,
+            gpointer     user_data);
 static void     g_io_unix_finalize (GSource     *source);
 
 GSourceFuncs g_io_watch_funcs = {
   g_io_unix_prepare,
   g_io_unix_check,
   g_io_unix_dispatch,
-  g_io_unix_finalize
+  g_io_unix_finalize,
+  NULL, NULL
 };
 
 static GIOFuncs unix_channel_funcs = {
   g_io_unix_read,
   g_io_unix_write,
@@ -121,11 +122,11 @@
   g_io_unix_get_flags,
 };
 
 static gboolean
 g_io_unix_prepare (GSource  *source,
-           gint     *timeout)
+       gint     *timeout)
 {
   GIOUnixWatch *watch = (GIOUnixWatch *)source;
   GIOCondition buffer_condition = g_io_channel_get_buffer_condition (watch->channel);
 
   *timeout = -1;
@@ -145,28 +146,28 @@
   return ((poll_condition | buffer_condition) & watch->condition);
 }
 
 static gboolean
 g_io_unix_dispatch (GSource     *source,
-            GSourceFunc  callback,
-            gpointer     user_data)
+        GSourceFunc  callback,
+        gpointer     user_data)
 
 {
   GIOFunc func = (GIOFunc)callback;
   GIOUnixWatch *watch = (GIOUnixWatch *)source;
   GIOCondition buffer_condition = g_io_channel_get_buffer_condition (watch->channel);
 
   if (!func)
     {
       g_warning ("IO watch dispatched without callback. "
-         "You must call g_source_connect().");
+     "You must call g_source_connect().");
       return FALSE;
     }
 
   return (*func) (watch->channel,
-          (watch->pollfd.revents | buffer_condition) & watch->condition,
-          user_data);
+      (watch->pollfd.revents | buffer_condition) & watch->condition,
+      user_data);
 }
 
 static void
 g_io_unix_finalize (GSource *source)
 {
@@ -175,14 +176,14 @@
   g_io_channel_unref (watch->channel);
 }
 
 static GIOStatus
 g_io_unix_read (GIOChannel *channel,
-        gchar      *buf,
-        gsize       count,
-        gsize      *bytes_read,
-        GError    **err)
+    gchar      *buf,
+    gsize       count,
+    gsize      *bytes_read,
+    GError    **err)
 {
   GIOUnixChannel *unix_channel = (GIOUnixChannel *)channel;
   gssize result;
 
   if (count > SSIZE_MAX) /* At least according to the Debian manpage for read */
@@ -219,14 +220,14 @@
   return (result > 0) ? G_IO_STATUS_NORMAL : G_IO_STATUS_EOF;
 }
 
 static GIOStatus
 g_io_unix_write (GIOChannel  *channel,
-         const gchar *buf,
-         gsize       count,
-         gsize      *bytes_written,
-         GError    **err)
+     const gchar *buf,
+     gsize       count,
+     gsize      *bytes_written,
+     GError    **err)
 {
   GIOUnixChannel *unix_channel = (GIOUnixChannel *)channel;
   gssize result;
 
  retry:
@@ -260,12 +261,12 @@
   return G_IO_STATUS_NORMAL;
 }
 
 static GIOStatus
 g_io_unix_seek (GIOChannel *channel,
-        gint64      offset,
-        GSeekType   type,
+    gint64      offset,
+    GSeekType   type,
                 GError    **err)
 {
   GIOUnixChannel *unix_channel = (GIOUnixChannel *)channel;
   int whence;
   off_t tmp_offset;
@@ -311,11 +312,11 @@
 }
 
 
 static GIOStatus
 g_io_unix_close (GIOChannel *channel,
-         GError    **err)
+     GError    **err)
 {
   GIOUnixChannel *unix_channel = (GIOUnixChannel *)channel;
 
   if (close (unix_channel->fd) < 0)
     {
@@ -337,11 +338,11 @@
   g_free (unix_channel);
 }
 
 static GSource *
 g_io_unix_create_watch (GIOChannel   *channel,
-            GIOCondition  condition)
+      GIOCondition  condition)
 {
   GIOUnixChannel *unix_channel = (GIOUnixChannel *)channel;
   GSource *source;
   GIOUnixWatch *watch;
 
@@ -405,11 +406,11 @@
 
   if (fcntl_flags == -1)
     {
       int err = errno;
       g_warning (G_STRLOC "Error while getting flags for FD: %s (%d)",
-         g_strerror (err), err);
+     g_strerror (err), err);
       return 0;
     }
 
   if (fcntl_flags & O_APPEND)
     flags |= G_IO_FLAG_APPEND;
