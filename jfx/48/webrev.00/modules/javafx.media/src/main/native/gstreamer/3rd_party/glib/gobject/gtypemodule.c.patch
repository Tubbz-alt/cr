diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gtypemodule.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gtypemodule.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gtypemodule.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gtypemodule.c
@@ -77,17 +77,17 @@
   GInterfaceInfo info;
 };
 
 static void g_type_module_use_plugin              (GTypePlugin     *plugin);
 static void g_type_module_complete_type_info      (GTypePlugin     *plugin,
-                           GType            g_type,
-                           GTypeInfo       *info,
-                           GTypeValueTable *value_table);
+               GType            g_type,
+               GTypeInfo       *info,
+               GTypeValueTable *value_table);
 static void g_type_module_complete_interface_info (GTypePlugin     *plugin,
-                           GType            instance_type,
-                           GType            interface_type,
-                           GInterfaceInfo  *info);
+               GType            instance_type,
+               GType            interface_type,
+               GInterfaceInfo  *info);
 
 static gpointer parent_class = NULL;
 
 static void
 g_type_module_dispose (GObject *object)
@@ -173,47 +173,47 @@
  *
  * Sets the name for a #GTypeModule
  */
 void
 g_type_module_set_name (GTypeModule  *module,
-            const gchar  *name)
+      const gchar  *name)
 {
   g_return_if_fail (G_IS_TYPE_MODULE (module));
 
   g_free (module->name);
   module->name = g_strdup (name);
 }
 
 static ModuleTypeInfo *
 g_type_module_find_type_info (GTypeModule *module,
-                  GType        type)
+            GType        type)
 {
   GSList *tmp_list = module->type_infos;
   while (tmp_list)
     {
       ModuleTypeInfo *type_info = tmp_list->data;
       if (type_info->type == type)
-    return type_info;
+  return type_info;
 
       tmp_list = tmp_list->next;
     }
 
   return NULL;
 }
 
 static ModuleInterfaceInfo *
 g_type_module_find_interface_info (GTypeModule *module,
-                   GType        instance_type,
-                   GType        interface_type)
+           GType        instance_type,
+           GType        interface_type)
 {
   GSList *tmp_list = module->interface_infos;
   while (tmp_list)
     {
       ModuleInterfaceInfo *interface_info = tmp_list->data;
       if (interface_info->instance_type == instance_type &&
-      interface_info->interface_type == interface_type)
-    return interface_info;
+    interface_info->interface_type == interface_type)
+  return interface_info;
 
       tmp_list = tmp_list->next;
     }
 
   return NULL;
@@ -240,30 +240,30 @@
   if (module->use_count == 1)
     {
       GSList *tmp_list;
 
       if (!G_TYPE_MODULE_GET_CLASS (module)->load (module))
-    {
-      module->use_count--;
-      return FALSE;
-    }
+  {
+    module->use_count--;
+    return FALSE;
+  }
 
       tmp_list = module->type_infos;
       while (tmp_list)
-    {
-      ModuleTypeInfo *type_info = tmp_list->data;
-      if (!type_info->loaded)
-        {
-          g_warning ("plugin '%s' failed to register type '%s'",
-             module->name ? module->name : "(unknown)",
-             g_type_name (type_info->type));
-          module->use_count--;
-          return FALSE;
-        }
+  {
+    ModuleTypeInfo *type_info = tmp_list->data;
+    if (!type_info->loaded)
+      {
+        g_warning ("plugin '%s' failed to register type '%s'",
+       module->name ? module->name : "(unknown)",
+       g_type_name (type_info->type));
+        module->use_count--;
+        return FALSE;
+      }
 
-      tmp_list = tmp_list->next;
-    }
+    tmp_list = tmp_list->next;
+  }
     }
 
   return TRUE;
 }
 
@@ -291,16 +291,16 @@
 
       G_TYPE_MODULE_GET_CLASS (module)->unload (module);
 
       tmp_list = module->type_infos;
       while (tmp_list)
-    {
-      ModuleTypeInfo *type_info = tmp_list->data;
-      type_info->loaded = FALSE;
+  {
+    ModuleTypeInfo *type_info = tmp_list->data;
+    type_info->loaded = FALSE;
 
-      tmp_list = tmp_list->next;
-    }
+    tmp_list = tmp_list->next;
+  }
     }
 }
 
 static void
 g_type_module_use_plugin (GTypePlugin *plugin)
@@ -308,20 +308,20 @@
   GTypeModule *module = G_TYPE_MODULE (plugin);
 
   if (!g_type_module_use (module))
     {
       g_warning ("Fatal error - Could not reload previously loaded plugin '%s'",
-         module->name ? module->name : "(unknown)");
+     module->name ? module->name : "(unknown)");
       exit (1);
     }
 }
 
 static void
 g_type_module_complete_type_info (GTypePlugin     *plugin,
-                  GType            g_type,
-                  GTypeInfo       *info,
-                  GTypeValueTable *value_table)
+          GType            g_type,
+          GTypeInfo       *info,
+          GTypeValueTable *value_table)
 {
   GTypeModule *module = G_TYPE_MODULE (plugin);
   ModuleTypeInfo *module_type_info = g_type_module_find_type_info (module, g_type);
 #ifdef GSTREAMER_LITE
   if (module_type_info == NULL)
@@ -337,13 +337,13 @@
     *value_table = *module_type_info->info.value_table;
 }
 
 static void
 g_type_module_complete_interface_info (GTypePlugin    *plugin,
-                       GType           instance_type,
-                       GType           interface_type,
-                       GInterfaceInfo *info)
+               GType           instance_type,
+               GType           interface_type,
+               GInterfaceInfo *info)
 {
   GTypeModule *module = G_TYPE_MODULE (plugin);
   ModuleInterfaceInfo *module_interface_info = g_type_module_find_interface_info (module, instance_type, interface_type);
 
   *info = module_interface_info->info;
@@ -374,14 +374,14 @@
  *
  * Returns: the new or existing type ID
  */
 GType
 g_type_module_register_type (GTypeModule     *module,
-                 GType            parent_type,
-                 const gchar     *type_name,
-                 const GTypeInfo *type_info,
-                 GTypeFlags       flags)
+           GType            parent_type,
+           const gchar     *type_name,
+           const GTypeInfo *type_info,
+           GTypeFlags       flags)
 {
   ModuleTypeInfo *module_type_info = NULL;
   GType type;
 
   g_return_val_if_fail (type_name != NULL, 0);
@@ -404,14 +404,14 @@
   if (type)
     {
       GTypePlugin *old_plugin = g_type_get_plugin (type);
 
       if (old_plugin != G_TYPE_PLUGIN (module))
-    {
-      g_warning ("Two different plugins tried to register '%s'.", type_name);
-      return 0;
-    }
+  {
+    g_warning ("Two different plugins tried to register '%s'.", type_name);
+    return 0;
+  }
     }
 
   if (type)
     {
       module_type_info = g_type_module_find_type_info (module, type);
@@ -422,22 +422,22 @@
         return 0;
       }
 #endif // GSTREAMER_LITE
 
       if (module_type_info->parent_type != parent_type)
-    {
-      const gchar *parent_type_name = g_type_name (parent_type);
+  {
+    const gchar *parent_type_name = g_type_name (parent_type);
 
-      g_warning ("Type '%s' recreated with different parent type."
-                 "(was '%s', now '%s')", type_name,
-                 g_type_name (module_type_info->parent_type),
-                 parent_type_name ? parent_type_name : "(unknown)");
-      return 0;
-    }
+    g_warning ("Type '%s' recreated with different parent type."
+         "(was '%s', now '%s')", type_name,
+         g_type_name (module_type_info->parent_type),
+         parent_type_name ? parent_type_name : "(unknown)");
+    return 0;
+  }
 
       if (module_type_info->info.value_table)
-    g_free ((GTypeValueTable *) module_type_info->info.value_table);
+  g_free ((GTypeValueTable *) module_type_info->info.value_table);
     }
   else
     {
       module_type_info = g_new (ModuleTypeInfo, 1);
 
@@ -449,11 +449,11 @@
 
   module_type_info->loaded = TRUE;
   module_type_info->info = *type_info;
   if (type_info->value_table)
     module_type_info->info.value_table = g_memdup (type_info->value_table,
-                           sizeof (GTypeValueTable));
+               sizeof (GTypeValueTable));
 
   return module_type_info->type;
 }
 
 /**
@@ -473,13 +473,13 @@
  * Since 2.56 if @module is %NULL this will call g_type_add_interface_static()
  * instead. This can be used when making a static build of the module.
  */
 void
 g_type_module_add_interface (GTypeModule          *module,
-                 GType                 instance_type,
-                 GType                 interface_type,
-                 const GInterfaceInfo *interface_info)
+           GType                 instance_type,
+           GType                 interface_type,
+           const GInterfaceInfo *interface_info)
 {
   ModuleInterfaceInfo *module_interface_info = NULL;
 
   g_return_if_fail (interface_info != NULL);
 
@@ -490,24 +490,24 @@
     }
 
   if (g_type_is_a (instance_type, interface_type))
     {
       GTypePlugin *old_plugin = g_type_interface_get_plugin (instance_type,
-                                 interface_type);
+                   interface_type);
 
       if (!old_plugin)
-    {
-      g_warning ("Interface '%s' for '%s' was previously registered statically or for a parent type.",
-             g_type_name (interface_type), g_type_name (instance_type));
-      return;
-    }
+  {
+    g_warning ("Interface '%s' for '%s' was previously registered statically or for a parent type.",
+         g_type_name (interface_type), g_type_name (instance_type));
+    return;
+  }
       else if (old_plugin != G_TYPE_PLUGIN (module))
-    {
-      g_warning ("Two different plugins tried to register interface '%s' for '%s'.",
-             g_type_name (interface_type), g_type_name (instance_type));
-      return;
-    }
+  {
+    g_warning ("Two different plugins tried to register interface '%s' for '%s'.",
+         g_type_name (interface_type), g_type_name (instance_type));
+    return;
+  }
 
       module_interface_info = g_type_module_find_interface_info (module, instance_type, interface_type);
 
       g_assert (module_interface_info);
     }
