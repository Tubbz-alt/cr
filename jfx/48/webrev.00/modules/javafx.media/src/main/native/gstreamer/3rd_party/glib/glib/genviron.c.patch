diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/genviron.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/genviron.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/genviron.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/genviron.c
@@ -42,25 +42,37 @@
 #include "gunicode.h"
 #include "gconvert.h"
 #include "gquark.h"
 
 /* Environ array functions {{{1 */
+static gboolean
+g_environ_matches (const gchar *env, const gchar *variable, gsize len)
+{
+#ifdef G_OS_WIN32
+    /* TODO handle Unicode environment variable names */
+    /* Like filesystem paths, environment variables are case-insensitive. */
+    return g_ascii_strncasecmp (env, variable, len) == 0 && env[len] == '=';
+#else
+    return strncmp (env, variable, len) == 0 && env[len] == '=';
+#endif
+}
+
 static gint
 g_environ_find (gchar       **envp,
                 const gchar  *variable)
 {
-  gint len, i;
+  gsize len;
+  gint i;
 
   if (envp == NULL)
     return -1;
 
   len = strlen (variable);
 
   for (i = 0; envp[i]; i++)
     {
-      if (strncmp (envp[i], variable, len) == 0 &&
-          envp[i][len] == '=')
+      if (g_environ_matches (envp[i], variable, len))
         return i;
     }
 
   return -1;
 }
@@ -153,22 +165,22 @@
 static gchar **
 g_environ_unsetenv_internal (gchar        **envp,
                              const gchar   *variable,
                              gboolean       free_value)
 {
-  gint len;
+  gsize len;
   gchar **e, **f;
 
   len = strlen (variable);
 
   /* Note that we remove *all* environment entries for
    * the variable name, not just the first.
    */
   e = f = envp;
   while (*e != NULL)
     {
-      if (strncmp (*e, variable, len) != 0 || (*e)[len] != '=')
+      if (!g_environ_matches (*e, variable, len))
         {
           *f = *e;
           f++;
         }
       else
@@ -654,12 +666,12 @@
   return g_getenv (variable);
 }
 
 gboolean
 g_setenv_utf8 (const gchar *variable,
-          const gchar *value,
-          gboolean     overwrite)
+               const gchar *value,
+               gboolean     overwrite)
 {
   return g_setenv (variable, value, overwrite);
 }
 
 void
