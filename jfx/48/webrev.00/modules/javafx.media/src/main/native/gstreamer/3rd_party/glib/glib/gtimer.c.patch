diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gtimer.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gtimer.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gtimer.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gtimer.c
@@ -214,11 +214,11 @@
  * Returns: seconds elapsed as a floating point value, including any
  *          fractional part.
  **/
 gdouble
 g_timer_elapsed (GTimer *timer,
-         gulong *microseconds)
+     gulong *microseconds)
 {
   gdouble total;
   gint64 elapsed;
 
   g_return_val_if_fail (timer != NULL, 0);
@@ -234,10 +234,27 @@
     *microseconds = elapsed % 1000000;
 
   return total;
 }
 
+/**
+ * g_timer_is_active:
+ * @timer: a #GTimer.
+ *
+ * Exposes whether the timer is currently active.
+ *
+ * Returns: %TRUE if the timer is running, %FALSE otherwise
+ * Since: 2.62
+ **/
+gboolean
+g_timer_is_active (GTimer *timer)
+{
+  g_return_val_if_fail (timer != NULL, FALSE);
+
+  return timer->active;
+}
+
 /**
  * g_usleep:
  * @microseconds: number of microseconds to pause
  *
  * Pauses the current thread for the given number of microseconds.
@@ -267,11 +284,15 @@
  * @time_: a #GTimeVal
  * @microseconds: number of microseconds to add to @time
  *
  * Adds the given number of microseconds to @time_. @microseconds can
  * also be negative to decrease the value of @time_.
+ *
+ * Deprecated: 2.62: #GTimeVal is not year-2038-safe. Use `guint64` for
+ *    representing microseconds since the epoch, or use #GDateTime.
  **/
+G_GNUC_BEGIN_IGNORE_DEPRECATIONS
 void
 g_time_val_add (GTimeVal *time_, glong microseconds)
 {
   g_return_if_fail (time_->tv_usec >= 0 && time_->tv_usec < G_USEC_PER_SEC);
 
@@ -295,10 +316,11 @@
          time_->tv_usec += G_USEC_PER_SEC;
          time_->tv_sec--;
        }
     }
 }
+G_GNUC_END_IGNORE_DEPRECATIONS
 
 /* converts a broken down date representation, relative to UTC,
  * to a timestamp; it uses timegm() if it's available.
  */
 static time_t
@@ -345,17 +367,28 @@
  * zone indicator. (In the absence of any time zone indication, the
  * timestamp is assumed to be in local time.)
  *
  * Any leading or trailing space in @iso_date is ignored.
  *
+ * This function was deprecated, along with #GTimeVal itself, in GLib 2.62.
+ * Equivalent functionality is available using code like:
+ * |[
+ * GDateTime *dt = g_date_time_new_from_iso8601 (iso8601_string, NULL);
+ * gint64 time_val = g_date_time_to_unix (dt);
+ * g_date_time_unref (dt);
+ * ]|
+ *
  * Returns: %TRUE if the conversion was successful.
  *
  * Since: 2.12
+ * Deprecated: 2.62: #GTimeVal is not year-2038-safe. Use
+ *    g_date_time_new_from_iso8601() instead.
  */
+G_GNUC_BEGIN_IGNORE_DEPRECATIONS
 gboolean
 g_time_val_from_iso8601 (const gchar *iso_date,
-             GTimeVal    *time_)
+       GTimeVal    *time_)
 {
   struct tm tm = {0};
   long val;
   long mday, mon, year;
   long hour, min, sec;
@@ -460,11 +493,11 @@
         {
           time_->tv_usec += (*iso_date - '0') * mul;
           mul /= 10;
         }
 
-      /* Skip any remaining digits after weâ€™ve reached our limit of precision. */
+      /* Skip any remaining digits after we've reached our limit of precision. */
       while (g_ascii_isdigit (*iso_date))
         iso_date++;
     }
 
   /* Now parse the offset and convert tm to a time_t */
@@ -509,10 +542,11 @@
   while (g_ascii_isspace (*iso_date))
     iso_date++;
 
   return *iso_date == '\0';
 }
+G_GNUC_END_IGNORE_DEPRECATIONS
 
 /**
  * g_time_val_to_iso8601:
  * @time_: a #GTimeVal
  *
@@ -538,20 +572,29 @@
  * variation of ISO 8601 format is required.
  *
  * If @time_ represents a date which is too large to fit into a `struct tm`,
  * %NULL will be returned. This is platform dependent. Note also that since
  * `GTimeVal` stores the number of seconds as a `glong`, on 32-bit systems it
- * is subject to the year 2038 problem.
+ * is subject to the year 2038 problem. Accordingly, since GLib 2.62, this
+ * function has been deprecated. Equivalent functionality is available using:
+ * |[
+ * GDateTime *dt = g_date_time_new_from_unix_utc (time_val);
+ * iso8601_string = g_date_time_format_iso8601 (dt);
+ * g_date_time_unref (dt);
+ * ]|
  *
  * The return value of g_time_val_to_iso8601() has been nullable since GLib
  * 2.54; before then, GLib would crash under the same conditions.
  *
  * Returns: (nullable): a newly allocated string containing an ISO 8601 date,
  *    or %NULL if @time_ was too large
  *
  * Since: 2.12
+ * Deprecated: 2.62: #GTimeVal is not year-2038-safe. Use
+ *    g_date_time_format_iso8601(dt) instead.
  */
+G_GNUC_BEGIN_IGNORE_DEPRECATIONS
 gchar *
 g_time_val_to_iso8601 (GTimeVal *time_)
 {
   gchar *retval;
   struct tm *tm;
@@ -605,5 +648,6 @@
                                 tm->tm_sec);
     }
 
   return retval;
 }
+G_GNUC_END_IGNORE_DEPRECATIONS
