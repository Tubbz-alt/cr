diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstvalue.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstvalue.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstvalue.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstvalue.c
@@ -219,19 +219,19 @@
       if (print_type) {
         g_string_append_c (s, '(');
         g_string_append (s, _priv_gst_value_gtype_to_abbr (G_VALUE_TYPE (v)));
         g_string_append_c (s, ')');
       }
-    g_string_append (s, s_val);
-    g_free (s_val);
-    if (i < alen - 1) {
-      g_string_append_len (s, ", ", 2);
-    }
+      g_string_append (s, s_val);
+      g_free (s_val);
+      if (i < alen - 1) {
+        g_string_append_len (s, ", ", 2);
+      }
     } else {
       GST_WARNING ("Could not serialize list/array value of type '%s'",
           G_VALUE_TYPE_NAME (v));
-  }
+    }
   }
   g_string_append (s, end);
   return g_string_free (s, FALSE);
 }
 
@@ -1283,11 +1283,11 @@
 static void
 gst_value_transform_int_range_string (const GValue * src_value,
     GValue * dest_value)
 {
   if (INT_RANGE_STEP (src_value) == 1)
-  dest_value->data[0].v_pointer = g_strdup_printf ("[%d,%d]",
+    dest_value->data[0].v_pointer = g_strdup_printf ("[%d,%d]",
         INT_RANGE_MIN (src_value), INT_RANGE_MAX (src_value));
   else
     dest_value->data[0].v_pointer = g_strdup_printf ("[%d,%d,%d]",
         INT_RANGE_MIN (src_value) * INT_RANGE_STEP (src_value),
         INT_RANGE_MAX (src_value) * INT_RANGE_STEP (src_value),
@@ -1315,11 +1315,11 @@
     if (INT_RANGE_STEP (value1) == INT_RANGE_STEP (value2) &&
         INT_RANGE_MIN (value1) == INT_RANGE_MIN (value2) &&
         INT_RANGE_MAX (value1) == INT_RANGE_MAX (value2)) {
       return GST_VALUE_EQUAL;
     }
-  return GST_VALUE_UNORDERED;
+    return GST_VALUE_UNORDERED;
   } else {
     /* if just one, only if the value is equal */
     if (INT_RANGE_MIN (value1) == INT_RANGE_MIN (value2))
       return GST_VALUE_EQUAL;
     return GST_VALUE_UNORDERED;
@@ -1535,12 +1535,12 @@
 static void
 gst_value_transform_int64_range_string (const GValue * src_value,
     GValue * dest_value)
 {
   if (INT64_RANGE_STEP (src_value) == 1)
-  dest_value->data[0].v_pointer =
-      g_strdup_printf ("(gint64)[%" G_GINT64_FORMAT ",%" G_GINT64_FORMAT "]",
+    dest_value->data[0].v_pointer =
+        g_strdup_printf ("(gint64)[%" G_GINT64_FORMAT ",%" G_GINT64_FORMAT "]",
         INT64_RANGE_MIN (src_value), INT64_RANGE_MAX (src_value));
   else
     dest_value->data[0].v_pointer =
         g_strdup_printf ("(gint64)[%" G_GINT64_FORMAT ",%" G_GINT64_FORMAT
         ",%" G_GINT64_FORMAT "]",
@@ -1570,11 +1570,11 @@
     if (INT64_RANGE_STEP (value1) == INT64_RANGE_STEP (value2) &&
         INT64_RANGE_MIN (value1) == INT64_RANGE_MIN (value2) &&
         INT64_RANGE_MAX (value1) == INT64_RANGE_MAX (value2)) {
       return GST_VALUE_EQUAL;
     }
-  return GST_VALUE_UNORDERED;
+    return GST_VALUE_UNORDERED;
   } else {
     /* if just one, only if the value is equal */
     if (INT64_RANGE_MIN (value1) == INT64_RANGE_MIN (value2))
       return GST_VALUE_EQUAL;
     return GST_VALUE_UNORDERED;
@@ -1583,11 +1583,11 @@
 
 static gchar *
 gst_value_serialize_int64_range (const GValue * value)
 {
   if (INT64_RANGE_STEP (value) == 1)
-  return g_strdup_printf ("[ %" G_GINT64_FORMAT ", %" G_GINT64_FORMAT " ]",
+    return g_strdup_printf ("[ %" G_GINT64_FORMAT ", %" G_GINT64_FORMAT " ]",
         INT64_RANGE_MIN (value), INT64_RANGE_MAX (value));
   else
     return g_strdup_printf ("[ %" G_GINT64_FORMAT ", %" G_GINT64_FORMAT ", %"
         G_GINT64_FORMAT " ]",
         INT64_RANGE_MIN (value) * INT64_RANGE_STEP (value),
@@ -2105,11 +2105,11 @@
 gst_value_deserialize_caps (GValue * dest, const gchar * s)
 {
   GstCaps *caps;
 
   if (*s != '"') {
-  caps = gst_caps_from_string (s);
+    caps = gst_caps_from_string (s);
   } else {
     gchar *str = gst_string_unwrap (s);
 
     if (G_UNLIKELY (!str))
       return FALSE;
@@ -2910,11 +2910,11 @@
 
   if (size1 == 0)
     return GST_VALUE_EQUAL;
 
   if (!gst_buffer_map (buf1, &info1, GST_MAP_READ))
-  return GST_VALUE_UNORDERED;
+    return GST_VALUE_UNORDERED;
 
   if (!gst_buffer_map (buf2, &info2, GST_MAP_READ)) {
     gst_buffer_unmap (buf1, &info1);
     return GST_VALUE_UNORDERED;
   }
@@ -3803,12 +3803,12 @@
     found = gst_iterator_find_custom (iter,
         (GCompareFunc) gst_value_deserialize_enum_iter_cmp, &res, (gpointer) s);
 
     if (found) {
       format_def = g_value_get_pointer (&res);
-    g_return_val_if_fail (format_def != NULL, FALSE);
-    g_value_set_enum (dest, (gint) format_def->value);
+      g_return_val_if_fail (format_def != NULL, FALSE);
+      g_value_set_enum (dest, (gint) format_def->value);
       g_value_unset (&res);
     }
     gst_iterator_free (iter);
     return found;
   }
@@ -3865,11 +3865,11 @@
 
   /* if no flags are set, try to serialize to the _NONE string */
   if (!flags) {
     fl = g_flags_get_first_value (klass, flags);
     if (fl)
-    return g_strdup (fl->value_name);
+      return g_strdup (fl->value_name);
     else
       return g_strdup ("0");
   }
 
   /* some flags are set, so serialize one by one */
@@ -3919,11 +3919,11 @@
   if (*pos == '/' || *pos == '+') {
     delimiter = *pos;
     pos++;
   } else {
     delimiter = '+';
-        }
+  }
 
   do {
     /* Find the next delimiter */
     next = pos;
     while (*next != '\0' && *next != '+' && *next != '/')
@@ -3961,22 +3961,22 @@
     *out_flags = flags;
   if (out_mask)
     *out_mask = mask;
 
   return TRUE;
-  }
+}
 
 
 static gboolean
 gst_value_deserialize_gflags (GValue * dest, const gchar * s)
 {
   GFlagsClass *klass = (GFlagsClass *) g_type_class_ref (G_VALUE_TYPE (dest));
   gboolean res = FALSE;
   guint flags = 0;
 
   if (gst_value_gflags_str_to_flags (klass, s, &flags, NULL)) {
-  g_value_set_flags (dest, flags);
+    g_value_set_flags (dest, flags);
     res = TRUE;
   }
 
   g_type_class_unref (klass);
 
@@ -4191,11 +4191,11 @@
   /* check if it's already in the range */
   if (INT_RANGE_MIN (src2) * INT_RANGE_STEP (src2) <= v &&
       INT_RANGE_MAX (src2) * INT_RANGE_STEP (src2) >= v &&
       v % INT_RANGE_STEP (src2) == 0) {
     if (dest)
-    gst_value_init_and_copy (dest, src2);
+      gst_value_init_and_copy (dest, src2);
     return TRUE;
   }
 
   /* check if it extends the range */
   if (v == (INT_RANGE_MIN (src2) - 1) * INT_RANGE_STEP (src2)) {
@@ -4253,15 +4253,15 @@
             INT_RANGE_MAX (src2) >= INT_RANGE_MIN (src1) - 1)) {
       if (dest) {
         gint step = INT_RANGE_STEP (src1);
         gint min = step * MIN (INT_RANGE_MIN (src1), INT_RANGE_MIN (src2));
         gint max = step * MAX (INT_RANGE_MAX (src1), INT_RANGE_MAX (src2));
-    g_value_init (dest, GST_TYPE_INT_RANGE);
+        g_value_init (dest, GST_TYPE_INT_RANGE);
         gst_value_set_int_range_step (dest, min, max, step);
       }
-    return TRUE;
-  }
+      return TRUE;
+    }
   }
 
   /* 3 - single value matches next or previous */
   if (INT_RANGE_STEP (src1) != INT_RANGE_STEP (src2)) {
     gint n1 = INT_RANGE_MAX (src1) - INT_RANGE_MIN (src1) + 1;
@@ -4430,11 +4430,11 @@
 {
   if (INT_RANGE_MIN (src2) * INT_RANGE_STEP (src2) <= src1->data[0].v_int &&
       INT_RANGE_MAX (src2) * INT_RANGE_STEP (src2) >= src1->data[0].v_int &&
       src1->data[0].v_int % INT_RANGE_STEP (src2) == 0) {
     if (dest)
-    gst_value_init_and_copy (dest, src1);
+      gst_value_init_and_copy (dest, src1);
     return TRUE;
   }
 
   return FALSE;
 }
@@ -4464,19 +4464,19 @@
       INT_RANGE_MAX (src2) * INT_RANGE_STEP (src2));
   max = max / step * step;
 
   if (min < max) {
     if (dest) {
-    g_value_init (dest, GST_TYPE_INT_RANGE);
+      g_value_init (dest, GST_TYPE_INT_RANGE);
       gst_value_set_int_range_step (dest, min, max, step);
     }
     return TRUE;
   }
   if (min == max) {
     if (dest) {
-    g_value_init (dest, G_TYPE_INT);
-    g_value_set_int (dest, min);
+      g_value_init (dest, G_TYPE_INT);
+      g_value_set_int (dest, min);
     }
     return TRUE;
   }
 
   return FALSE;
@@ -4491,11 +4491,11 @@
 {
   if (INT64_RANGE_MIN_VAL (src2) <= src1->data[0].v_int64 &&
       INT64_RANGE_MAX_VAL (src2) >= src1->data[0].v_int64 &&
       src1->data[0].v_int64 % INT64_RANGE_STEP (src2) == 0) {
     if (dest)
-    gst_value_init_and_copy (dest, src1);
+      gst_value_init_and_copy (dest, src1);
     return TRUE;
   }
 
   return FALSE;
 }
@@ -4525,19 +4525,19 @@
       INT64_RANGE_MAX (src2) * INT64_RANGE_STEP (src2));
   max = max / step * step;
 
   if (min < max) {
     if (dest) {
-    g_value_init (dest, GST_TYPE_INT64_RANGE);
+      g_value_init (dest, GST_TYPE_INT64_RANGE);
       gst_value_set_int64_range_step (dest, min, max, step);
     }
     return TRUE;
   }
   if (min == max) {
     if (dest) {
-    g_value_init (dest, G_TYPE_INT64);
-    g_value_set_int64 (dest, min);
+      g_value_init (dest, G_TYPE_INT64);
+      g_value_set_int64 (dest, min);
     }
     return TRUE;
   }
 
   return FALSE;
@@ -4548,11 +4548,11 @@
     const GValue * src2)
 {
   if (src2->data[0].v_double <= src1->data[0].v_double &&
       src2->data[1].v_double >= src1->data[0].v_double) {
     if (dest)
-    gst_value_init_and_copy (dest, src1);
+      gst_value_init_and_copy (dest, src1);
     return TRUE;
   }
 
   return FALSE;
 }
@@ -4567,19 +4567,19 @@
   min = MAX (src1->data[0].v_double, src2->data[0].v_double);
   max = MIN (src1->data[1].v_double, src2->data[1].v_double);
 
   if (min < max) {
     if (dest) {
-    g_value_init (dest, GST_TYPE_DOUBLE_RANGE);
-    gst_value_set_double_range (dest, min, max);
+      g_value_init (dest, GST_TYPE_DOUBLE_RANGE);
+      gst_value_set_double_range (dest, min, max);
     }
     return TRUE;
   }
   if (min == max) {
     if (dest) {
-    g_value_init (dest, G_TYPE_DOUBLE);
-    g_value_set_int (dest, (int) min);
+      g_value_init (dest, G_TYPE_DOUBLE);
+      g_value_set_int (dest, (int) min);
     }
     return TRUE;
   }
 
   return FALSE;
@@ -4617,14 +4617,14 @@
         GValue temp;
 
         gst_value_move (&temp, dest);
         gst_value_list_merge (dest, &temp, &intersection);
         g_value_unset (&temp);
-      g_value_unset (&intersection);
+        g_value_unset (&intersection);
+      }
     }
   }
-  }
 
   return ret;
 }
 
 static gboolean
@@ -4683,11 +4683,11 @@
     res2 = gst_value_compare_with_func (&vals[1], src1, compare);
 
     if ((res1 == GST_VALUE_EQUAL || res1 == GST_VALUE_LESS_THAN) &&
         (res2 == GST_VALUE_EQUAL || res2 == GST_VALUE_GREATER_THAN)) {
       if (dest)
-      gst_value_init_and_copy (dest, src1);
+        gst_value_init_and_copy (dest, src1);
       return TRUE;
     }
   }
 
   return FALSE;
@@ -4726,20 +4726,20 @@
 
     res = gst_value_compare_with_func (min, max, compare);
     g_return_val_if_fail (res != GST_VALUE_UNORDERED, FALSE);
     if (res == GST_VALUE_LESS_THAN) {
       if (dest) {
-      g_value_init (dest, GST_TYPE_FRACTION_RANGE);
-      vals1 = dest->data[0].v_pointer;
-      g_value_copy (min, &vals1[0]);
-      g_value_copy (max, &vals1[1]);
+        g_value_init (dest, GST_TYPE_FRACTION_RANGE);
+        vals1 = dest->data[0].v_pointer;
+        g_value_copy (min, &vals1[0]);
+        g_value_copy (max, &vals1[1]);
       }
       return TRUE;
     }
     if (res == GST_VALUE_EQUAL) {
       if (dest)
-      gst_value_init_and_copy (dest, min);
+        gst_value_init_and_copy (dest, min);
       return TRUE;
     }
   }
 
   return FALSE;
@@ -4841,11 +4841,11 @@
   /* subtracting a range from an int only works if the int is not in the
    * range */
   if (val < min || val > max || val % step) {
     /* and the result is the int */
     if (dest)
-    gst_value_init_and_copy (dest, minuend);
+      gst_value_init_and_copy (dest, minuend);
     return TRUE;
   }
   return FALSE;
 }
 
@@ -4917,11 +4917,11 @@
     return FALSE;
 
   /* value is outside of the range, return range unchanged */
   if (val < min || val > max || val % step) {
     if (dest)
-    gst_value_init_and_copy (dest, minuend);
+      gst_value_init_and_copy (dest, minuend);
     return TRUE;
   } else {
     /* max must be MAXINT too as val <= max */
     if (val >= G_MAXINT - step + 1) {
       max -= step;
@@ -4988,11 +4988,11 @@
   /* subtracting a range from an int64 only works if the int64 is not in the
    * range */
   if (val < min || val > max || val % step) {
     /* and the result is the int64 */
     if (dest)
-    gst_value_init_and_copy (dest, minuend);
+      gst_value_init_and_copy (dest, minuend);
     return TRUE;
   }
   return FALSE;
 }
 
@@ -5064,11 +5064,11 @@
     return FALSE;
 
   /* value is outside of the range, return range unchanged */
   if (val < min || val > max || val % step) {
     if (dest)
-    gst_value_init_and_copy (dest, minuend);
+      gst_value_init_and_copy (dest, minuend);
     return TRUE;
   } else {
     /* max must be MAXINT64 too as val <= max */
     if (val >= G_MAXINT64 - step + 1) {
       max -= step;
@@ -5131,11 +5131,11 @@
   gdouble max = gst_value_get_double_range_max (subtrahend);
   gdouble val = g_value_get_double (minuend);
 
   if (val < min || val > max) {
     if (dest)
-    gst_value_init_and_copy (dest, minuend);
+      gst_value_init_and_copy (dest, minuend);
     return TRUE;
   }
   return FALSE;
 }
 
@@ -5144,11 +5144,11 @@
     const GValue * subtrahend)
 {
   /* since we don't have open ranges, we cannot create a hole in
    * a double range. We return the original range */
   if (dest)
-  gst_value_init_and_copy (dest, minuend);
+    gst_value_init_and_copy (dest, minuend);
   return TRUE;
 }
 
 static gboolean
 gst_value_subtract_double_range_double_range (GValue * dest,
@@ -5259,11 +5259,11 @@
     }
   }
   if (dest) {
     gst_value_move (dest, result);
   } else {
-  g_value_unset (result);
+    g_value_unset (result);
   }
   return TRUE;
 }
 
 static gboolean
@@ -5281,11 +5281,11 @@
         GST_VALUE_LESS_THAN ||
         gst_value_compare_with_func (minuend, max, compare) ==
         GST_VALUE_GREATER_THAN) {
       /* and the result is the value */
       if (dest)
-      gst_value_init_and_copy (dest, minuend);
+        gst_value_init_and_copy (dest, minuend);
       return TRUE;
     }
   }
   return FALSE;
 }
@@ -5295,11 +5295,11 @@
     const GValue * minuend, const GValue * subtrahend)
 {
   /* since we don't have open ranges, we cannot create a hole in
    * a range. We return the original range */
   if (dest)
-  gst_value_init_and_copy (dest, minuend);
+    gst_value_init_and_copy (dest, minuend);
   return TRUE;
 }
 
 static gboolean
 gst_value_subtract_fraction_range_fraction_range (GValue * dest,
@@ -5499,11 +5499,11 @@
   /* other combinations don't make sense for equality */
   return FALSE;
 }
 
 /* "Pure" variant of gst_value_compare which is guaranteed to
- * not have list arguments and therefore does basic comparisions
+ * not have list arguments and therefore does basic comparisons
  */
 static inline gint
 _gst_value_compare_nolist (const GValue * value1, const GValue * value2)
 {
   GstValueCompareFunc compare;
@@ -5555,22 +5555,22 @@
       return GST_VALUE_EQUAL;
     }
 
     n = gst_value_list_get_size (value1);
     if (n == 0)
-    return GST_VALUE_UNORDERED;
+      return GST_VALUE_UNORDERED;
 
     for (i = 0; i < n; i++) {
       const GValue *elt;
 
       elt = gst_value_list_get_value (value1, i);
       ret = gst_value_compare (elt, value2);
       if (ret != GST_VALUE_EQUAL && n == 1)
         return ret;
       else if (ret != GST_VALUE_EQUAL)
         return GST_VALUE_UNORDERED;
-  }
+    }
 
     return GST_VALUE_EQUAL;
   } else if (value2_is_list && !value1_is_list) {
     gint i, n, ret;
 
@@ -5578,11 +5578,11 @@
       return GST_VALUE_EQUAL;
     }
 
     n = gst_value_list_get_size (value2);
     if (n == 0)
-  return GST_VALUE_UNORDERED;
+      return GST_VALUE_UNORDERED;
 
     for (i = 0; i < n; i++) {
       const GValue *elt;
 
       elt = gst_value_list_get_value (value2, i);
@@ -5695,15 +5695,15 @@
 
   for (i = 0; i < len; i++) {
     union_info = &g_array_index (gst_value_union_funcs, GstValueUnionInfo, i);
     if (union_info->type1 == type1 && union_info->type2 == type2) {
       return union_info->func (dest, value1, value2);
-      }
+    }
     if (union_info->type1 == type2 && union_info->type2 == type1) {
       return union_info->func (dest, value2, value1);
     }
-      }
+  }
 
   gst_value_list_concat (dest, value1, value2);
   return TRUE;
 }
 
@@ -5829,11 +5829,11 @@
   if (type2 == GST_TYPE_LIST)
     return gst_value_intersect_list (dest, value2, value1);
 
   if (_gst_value_compare_nolist (value1, value2) == GST_VALUE_EQUAL) {
     if (dest)
-    gst_value_init_and_copy (dest, value1);
+      gst_value_init_and_copy (dest, value1);
     return TRUE;
   }
 
   len = gst_value_intersect_funcs->len;
   for (i = 0; i < len; i++) {
@@ -5930,11 +5930,11 @@
     }
   }
 
   if (_gst_value_compare_nolist (minuend, subtrahend) != GST_VALUE_EQUAL) {
     if (dest)
-    gst_value_init_and_copy (dest, minuend);
+      gst_value_init_and_copy (dest, minuend);
     return TRUE;
   }
 
   return FALSE;
 }
@@ -6783,11 +6783,11 @@
   }
 
   datetime = gst_date_time_new_from_iso8601_string (s);
   if (datetime != NULL) {
     g_value_take_boxed (dest, datetime);
-  return TRUE;
+    return TRUE;
   }
   GST_WARNING ("Failed to deserialize date time string '%s'", s);
   return FALSE;
 }
 
@@ -7448,25 +7448,25 @@
 
 FUNC_VALUE_GET_TYPE (bitmask, "GstBitmask");
 
 static const GTypeValueTable _gst_flagset_value_table = {
   gst_value_init_flagset,
-      NULL,
+  NULL,
   gst_value_copy_flagset,
-      NULL,
+  NULL,
   (char *) "ii",
   gst_value_collect_flagset, (char *) "pp", gst_value_lcopy_flagset
-    };
+};
 
 FUNC_VALUE_GET_TYPE_CLASSED (flagset, "GstFlagSet",
     sizeof (GstFlagSetClass), G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_DERIVABLE);
 
 GType
 gst_g_thread_get_type (void)
-  {
+{
   return G_TYPE_THREAD;
-  }
+}
 
 #define SERIAL_VTABLE(t,c,s,d) { t, c, s, d }
 
 #define REGISTER_SERIALIZATION_CONST(_gtype, _type)                     \
 G_STMT_START {                                                          \
@@ -7511,11 +7511,11 @@
 static const gint GST_VALUE_INTERSECT_TABLE_DEFAULT_SIZE = 16;
 static const gint GST_VALUE_SUBTRACT_TABLE_DEFAULT_SIZE = 16;
 
 void
 _priv_gst_value_initialize (void)
-  {
+{
   gst_value_table =
       g_array_sized_new (FALSE, FALSE, sizeof (GstValueTable),
       GST_VALUE_TABLE_DEFAULT_SIZE);
   gst_value_hash = g_hash_table_new (NULL, NULL);
   gst_value_union_funcs = g_array_sized_new (FALSE, FALSE,
