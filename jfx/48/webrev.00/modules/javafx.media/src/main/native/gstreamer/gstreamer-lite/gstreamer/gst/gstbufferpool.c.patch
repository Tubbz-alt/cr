diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstbufferpool.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstbufferpool.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstbufferpool.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstbufferpool.c
@@ -88,13 +88,10 @@
 #endif /* G_OS_WIN32 */
 
 GST_DEBUG_CATEGORY_STATIC (gst_buffer_pool_debug);
 #define GST_CAT_DEFAULT gst_buffer_pool_debug
 
-#define GST_BUFFER_POOL_GET_PRIVATE(obj)  \
-   (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GST_TYPE_BUFFER_POOL, GstBufferPoolPrivate))
-
 #define GST_BUFFER_POOL_LOCK(pool)   (g_rec_mutex_lock(&pool->priv->rec_lock))
 #define GST_BUFFER_POOL_UNLOCK(pool) (g_rec_mutex_unlock(&pool->priv->rec_lock))
 
 struct _GstBufferPoolPrivate
 {
@@ -118,11 +115,11 @@
   GstAllocationParams params;
 };
 
 static void gst_buffer_pool_finalize (GObject * object);
 
-G_DEFINE_TYPE (GstBufferPool, gst_buffer_pool, GST_TYPE_OBJECT);
+G_DEFINE_TYPE_WITH_PRIVATE (GstBufferPool, gst_buffer_pool, GST_TYPE_OBJECT);
 
 static gboolean default_start (GstBufferPool * pool);
 static gboolean default_stop (GstBufferPool * pool);
 static gboolean default_set_config (GstBufferPool * pool,
     GstStructure * config);
@@ -137,12 +134,10 @@
 static void
 gst_buffer_pool_class_init (GstBufferPoolClass * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
 
-  g_type_class_add_private (klass, sizeof (GstBufferPoolPrivate));
-
   gobject_class->finalize = gst_buffer_pool_finalize;
 
   klass->start = default_start;
   klass->stop = default_stop;
   klass->set_config = default_set_config;
@@ -159,11 +154,11 @@
 static void
 gst_buffer_pool_init (GstBufferPool * pool)
 {
   GstBufferPoolPrivate *priv;
 
-  priv = pool->priv = GST_BUFFER_POOL_GET_PRIVATE (pool);
+  priv = pool->priv = gst_buffer_pool_get_instance_private (pool);
 
   g_rec_mutex_init (&priv->rec_lock);
 
   priv->poll = gst_poll_new_timer ();
   priv->queue = gst_atomic_queue_new (16);
@@ -674,12 +669,12 @@
   /* nothing to do if config is unchanged */
   if (priv->configured && gst_structure_is_equal (config, priv->config))
     goto config_unchanged;
 
   /* can't change the settings when active */
-    if (priv->active)
-      goto was_active;
+  if (priv->active)
+    goto was_active;
 
   /* we can't change when outstanding buffers */
   if (g_atomic_int_get (&priv->outstanding) != 0)
     goto have_outstanding;
 
@@ -1153,12 +1148,12 @@
         /* This means that we have two threads trying to allocate buffers
          * already, and the other one already got the wait token. This
          * means that we only have to wait for the poll now and not write the
          * token afterwards: we will be woken up once the other thread is
          * woken up and that one will write the wait token it removed */
-    GST_LOG_OBJECT (pool, "waiting for free buffers or flushing");
-    gst_poll_wait (priv->poll, GST_CLOCK_TIME_NONE);
+        GST_LOG_OBJECT (pool, "waiting for free buffers or flushing");
+        gst_poll_wait (priv->poll, GST_CLOCK_TIME_NONE);
       } else {
         /* This is a critical error, GstPoll already gave a warning */
         result = GST_FLOW_ERROR;
         break;
       }
@@ -1171,12 +1166,12 @@
        * immediately */
       if (!GST_BUFFER_POOL_IS_FLUSHING (pool)) {
         GST_LOG_OBJECT (pool, "waiting for free buffers or flushing");
         gst_poll_wait (priv->poll, GST_CLOCK_TIME_NONE);
       }
-    gst_poll_write_control (pool->priv->poll);
-  }
+      gst_poll_write_control (pool->priv->poll);
+    }
   }
 
   return result;
 
   /* ERRORS */
@@ -1224,10 +1219,17 @@
   GST_BUFFER_DTS (buffer) = GST_CLOCK_TIME_NONE;
   GST_BUFFER_DURATION (buffer) = GST_CLOCK_TIME_NONE;
   GST_BUFFER_OFFSET (buffer) = GST_BUFFER_OFFSET_NONE;
   GST_BUFFER_OFFSET_END (buffer) = GST_BUFFER_OFFSET_NONE;
 
+  /* if the memory is intact reset the size to the full size */
+  if (!GST_BUFFER_FLAG_IS_SET (buffer, GST_BUFFER_FLAG_TAG_MEMORY)) {
+    gsize offset;
+    gst_buffer_get_sizes (buffer, &offset, NULL);
+    gst_buffer_resize (buffer, -offset, pool->priv->size);
+  }
+
   /* remove all metadata without the POOLED flag */
   gst_buffer_foreach_meta (buffer, remove_meta_unpooled, pool);
 }
 
 /**
