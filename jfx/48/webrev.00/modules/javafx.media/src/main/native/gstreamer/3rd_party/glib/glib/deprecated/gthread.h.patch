diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/deprecated/gthread.h b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/deprecated/gthread.h
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/deprecated/gthread.h
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/deprecated/gthread.h
@@ -31,21 +31,19 @@
 
 #include <glib/gthread.h>
 
 G_BEGIN_DECLS
 
-#ifndef G_DISABLE_DEPRECATED
+G_GNUC_BEGIN_IGNORE_DEPRECATIONS
 
 typedef enum
 {
   G_THREAD_PRIORITY_LOW,
   G_THREAD_PRIORITY_NORMAL,
   G_THREAD_PRIORITY_HIGH,
   G_THREAD_PRIORITY_URGENT
-} GThreadPriority;
-
-#endif
+} GThreadPriority GLIB_DEPRECATED_TYPE_IN_2_32;
 
 struct  _GThread
 {
   /*< private >*/
   GThreadFunc func;
@@ -58,13 +56,11 @@
 #else // GSTREAMER_LITE
   GThreadPriority priority;
 #endif // GSTREAMER_LITE
 };
 
-#ifndef G_DISABLE_DEPRECATED
-
-typedef struct _GThreadFunctions GThreadFunctions;
+typedef struct _GThreadFunctions GThreadFunctions GLIB_DEPRECATED_TYPE_IN_2_32;
 struct _GThreadFunctions
 {
   GMutex*  (*mutex_new)           (void);
   void     (*mutex_lock)          (GMutex               *mutex);
   gboolean (*mutex_trylock)       (GMutex               *mutex);
@@ -97,11 +93,11 @@
   void      (*thread_set_priority)(gpointer              thread,
                                    GThreadPriority       priority);
   void      (*thread_self)        (gpointer              thread);
   gboolean  (*thread_equal)       (gpointer              thread1,
                                    gpointer              thread2);
-};
+} GLIB_DEPRECATED_TYPE_IN_2_32;
 
 GLIB_VAR GThreadFunctions       g_thread_functions_for_glib_use;
 GLIB_VAR gboolean               g_thread_use_default_impl;
 
 GLIB_VAR guint64   (*g_thread_gettime) (void);
@@ -132,36 +128,36 @@
 #ifndef G_OS_WIN32
 #include <sys/types.h>
 #include <pthread.h>
 #endif
 
-#define g_static_mutex_get_mutex g_static_mutex_get_mutex_impl
-#define G_STATIC_MUTEX_INIT { NULL }
+#define g_static_mutex_get_mutex g_static_mutex_get_mutex_impl GLIB_DEPRECATED_MACRO_IN_2_32
+#define G_STATIC_MUTEX_INIT { NULL } GLIB_DEPRECATED_MACRO_IN_2_32_FOR(g_mutex_init)
 typedef struct
 {
   GMutex *mutex;
 #ifndef G_OS_WIN32
   /* only for ABI compatibility reasons */
   pthread_mutex_t unused;
 #endif
-} GStaticMutex;
+} GStaticMutex GLIB_DEPRECATED_TYPE_IN_2_32_FOR(GMutex);
 
 #define g_static_mutex_lock(mutex) \
-    g_mutex_lock (g_static_mutex_get_mutex (mutex))
+    g_mutex_lock (g_static_mutex_get_mutex (mutex)) GLIB_DEPRECATED_MACRO_IN_2_32_FOR(g_mutex_lock)
 #define g_static_mutex_trylock(mutex) \
-    g_mutex_trylock (g_static_mutex_get_mutex (mutex))
+    g_mutex_trylock (g_static_mutex_get_mutex (mutex)) GLIB_DEPRECATED_MACRO_IN_2_32_FOR(g_mutex_trylock)
 #define g_static_mutex_unlock(mutex) \
-    g_mutex_unlock (g_static_mutex_get_mutex (mutex))
+    g_mutex_unlock (g_static_mutex_get_mutex (mutex)) GLIB_DEPRECATED_MACRO_IN_2_32_FOR(g_mutex_unlock)
 
 GLIB_DEPRECATED_IN_2_32_FOR(g_mutex_init)
 void    g_static_mutex_init           (GStaticMutex *mutex);
 GLIB_DEPRECATED_IN_2_32_FOR(g_mutex_clear)
 void    g_static_mutex_free           (GStaticMutex *mutex);
 GLIB_DEPRECATED_IN_2_32_FOR(GMutex)
 GMutex *g_static_mutex_get_mutex_impl (GStaticMutex *mutex);
 
-typedef struct _GStaticRecMutex GStaticRecMutex;
+typedef struct _GStaticRecMutex GStaticRecMutex GLIB_DEPRECATED_TYPE_IN_2_32_FOR(GRecMutex);
 struct _GStaticRecMutex
 {
   /*< private >*/
   GStaticMutex mutex;
   guint depth;
@@ -173,13 +169,13 @@
 #else
     pthread_t owner;
 #endif
     gdouble dummy;
   } unused;
-};
+} GLIB_DEPRECATED_TYPE_IN_2_32_FOR(GRecMutex);
 
-#define G_STATIC_REC_MUTEX_INIT { G_STATIC_MUTEX_INIT }
+#define G_STATIC_REC_MUTEX_INIT { G_STATIC_MUTEX_INIT, 0, { 0 } } GLIB_DEPRECATED_MACRO_IN_2_32_FOR(g_rec_mutex_init)
 GLIB_DEPRECATED_IN_2_32_FOR(g_rec_mutex_init)
 void     g_static_rec_mutex_init        (GStaticRecMutex *mutex);
 
 GLIB_DEPRECATED_IN_2_32_FOR(g_rec_mutex_lock)
 void     g_static_rec_mutex_lock        (GStaticRecMutex *mutex);
@@ -198,24 +194,24 @@
 guint    g_static_rec_mutex_unlock_full (GStaticRecMutex *mutex);
 
 GLIB_DEPRECATED_IN_2_32_FOR(g_rec_mutex_free)
 void     g_static_rec_mutex_free        (GStaticRecMutex *mutex);
 
-typedef struct _GStaticRWLock GStaticRWLock;
+typedef struct _GStaticRWLock GStaticRWLock GLIB_DEPRECATED_TYPE_IN_2_32_FOR(GRWLock);
 struct _GStaticRWLock
 {
   /*< private >*/
   GStaticMutex mutex;
   GCond *read_cond;
   GCond *write_cond;
   guint read_counter;
   gboolean have_writer;
   guint want_to_read;
   guint want_to_write;
-};
+} GLIB_DEPRECATED_TYPE_IN_2_32_FOR(GRWLock);
 
-#define G_STATIC_RW_LOCK_INIT { G_STATIC_MUTEX_INIT, NULL, NULL, 0, FALSE, 0, 0 }
+#define G_STATIC_RW_LOCK_INIT { G_STATIC_MUTEX_INIT, NULL, NULL, 0, FALSE, 0, 0 } GLIB_DEPRECATED_MACRO_IN_2_32_FOR(g_rw_lock_init)
 
 GLIB_DEPRECATED_IN_2_32_FOR(g_rw_lock_init)
 void      g_static_rw_lock_init           (GStaticRWLock *lock);
 
 GLIB_DEPRECATED_IN_2_32_FOR(g_rw_lock_reader_lock)
@@ -240,18 +236,18 @@
 void      g_static_rw_lock_free           (GStaticRWLock *lock);
 
 GLIB_DEPRECATED_IN_2_32
 GPrivate *      g_private_new             (GDestroyNotify notify);
 
-typedef struct _GStaticPrivate  GStaticPrivate;
+typedef struct _GStaticPrivate  GStaticPrivate GLIB_DEPRECATED_TYPE_IN_2_32_FOR(GPrivate);
 struct _GStaticPrivate
 {
   /*< private >*/
   guint index;
-};
+} GLIB_DEPRECATED_TYPE_IN_2_32_FOR(GPrivate);
 
-#define G_STATIC_PRIVATE_INIT { 0 }
+#define G_STATIC_PRIVATE_INIT { 0 } GLIB_DEPRECATED_MACRO_IN_2_32_FOR(G_PRIVATE_INIT)
 GLIB_DEPRECATED_IN_2_32
 void     g_static_private_init           (GStaticPrivate *private_key);
 
 GLIB_DEPRECATED_IN_2_32_FOR(g_private_get)
 gpointer g_static_private_get            (GStaticPrivate *private_key);
@@ -275,11 +271,11 @@
 GLIB_DEPRECATED_IN_2_32
 gboolean g_thread_get_initialized        (void);
 
 GLIB_VAR gboolean g_threads_got_initialized;
 
-#define g_thread_supported()     (1)
+#define g_thread_supported()     (1) GLIB_DEPRECATED_MACRO_IN_2_32
 
 GLIB_DEPRECATED_IN_2_32
 GMutex *        g_mutex_new             (void);
 GLIB_DEPRECATED_IN_2_32
 void            g_mutex_free            (GMutex *mutex);
@@ -290,10 +286,10 @@
 GLIB_DEPRECATED_IN_2_32
 gboolean        g_cond_timed_wait       (GCond          *cond,
                                          GMutex         *mutex,
                                          GTimeVal       *timeval);
 
-#endif
+G_GNUC_END_IGNORE_DEPRECATIONS
 
 G_END_DECLS
 
 #endif /* __G_DEPRECATED_THREAD_H__ */
