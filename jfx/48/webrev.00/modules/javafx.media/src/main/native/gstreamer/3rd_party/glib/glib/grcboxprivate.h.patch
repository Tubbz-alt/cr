diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/grcboxprivate.h b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/grcboxprivate.h
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/grcboxprivate.h
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/grcboxprivate.h
@@ -25,10 +25,11 @@
 
 typedef struct {
   grefcount ref_count;
 
   gsize mem_size;
+  gsize private_offset;
 
 #ifndef G_DISABLE_ASSERT
   /* A "magic" number, used to perform additional integrity
    * checks on the allocated data
    */
@@ -38,10 +39,11 @@
 
 typedef struct {
   gatomicrefcount ref_count;
 
   gsize mem_size;
+  gsize private_offset;
 
 #ifndef G_DISABLE_ASSERT
   guint32 magic;
 #endif
 } GArcBox;
@@ -49,13 +51,21 @@
 #define G_BOX_MAGIC             0x44ae2bf0
 
 /* Keep the two refcounted boxes identical in size */
 G_STATIC_ASSERT (sizeof (GRcBox) == sizeof (GArcBox));
 
+/* This is the default alignment we use when allocating the
+ * refcounted memory blocks; it's similar to the alignment
+ * guaranteed by the malloc() in GNU's libc and by the GSlice
+ * allocator
+ */
+#define STRUCT_ALIGNMENT (2 * sizeof (gsize))
+
 #define G_RC_BOX_SIZE sizeof (GRcBox)
 #define G_ARC_BOX_SIZE sizeof (GArcBox)
 
 gpointer        g_rc_box_alloc_full     (gsize    block_size,
+                                         gsize    alignment,
                                          gboolean atomic,
                                          gboolean clear);
 
 G_END_DECLS
