diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gkeyfile.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gkeyfile.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gkeyfile.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gkeyfile.c
@@ -536,93 +536,94 @@
   gchar *key;  /* NULL for comments */
   gchar *value;
 };
 
 static gint                  find_file_in_data_dirs            (const gchar            *file,
-                                const gchar           **data_dirs,
-                                gchar                 **output_file,
-                                GError                **error);
+                const gchar           **data_dirs,
+                gchar                 **output_file,
+                GError                **error);
 static gboolean              g_key_file_load_from_fd           (GKeyFile               *key_file,
-                                gint                    fd,
-                                GKeyFileFlags           flags,
-                                GError                **error);
+                gint                    fd,
+                GKeyFileFlags           flags,
+                GError                **error);
 static GList                *g_key_file_lookup_group_node      (GKeyFile               *key_file,
-                                                    const gchar            *group_name);
+                                              const gchar            *group_name);
 static GKeyFileGroup        *g_key_file_lookup_group           (GKeyFile               *key_file,
-                                const gchar            *group_name);
+                const gchar            *group_name);
 
 static GList                *g_key_file_lookup_key_value_pair_node  (GKeyFile       *key_file,
-                                                         GKeyFileGroup  *group,
+                                                   GKeyFileGroup  *group,
                                                                      const gchar    *key);
 static GKeyFileKeyValuePair *g_key_file_lookup_key_value_pair       (GKeyFile       *key_file,
                                                                      GKeyFileGroup  *group,
                                                                      const gchar    *key);
 
 static void                  g_key_file_remove_group_node          (GKeyFile      *key_file,
-                                    GList         *group_node);
+                      GList         *group_node);
 static void                  g_key_file_remove_key_value_pair_node (GKeyFile      *key_file,
                                                                     GKeyFileGroup *group,
                                                                     GList         *pair_node);
 
 static void                  g_key_file_add_key_value_pair     (GKeyFile               *key_file,
                                                                 GKeyFileGroup          *group,
                                                                 GKeyFileKeyValuePair   *pair);
 static void                  g_key_file_add_key                (GKeyFile               *key_file,
-                                GKeyFileGroup          *group,
-                                const gchar            *key,
-                                const gchar            *value);
+                GKeyFileGroup          *group,
+                const gchar            *key,
+                const gchar            *value);
 static void                  g_key_file_add_group              (GKeyFile               *key_file,
-                                const gchar            *group_name);
+                const gchar            *group_name);
 static gboolean              g_key_file_is_group_name          (const gchar *name);
 static gboolean              g_key_file_is_key_name            (const gchar *name);
 static void                  g_key_file_key_value_pair_free    (GKeyFileKeyValuePair   *pair);
 static gboolean              g_key_file_line_is_comment        (const gchar            *line);
 static gboolean              g_key_file_line_is_group          (const gchar            *line);
 static gboolean              g_key_file_line_is_key_value_pair (const gchar            *line);
 static gchar                *g_key_file_parse_value_as_string  (GKeyFile               *key_file,
-                                const gchar            *value,
-                                GSList                **separators,
-                                GError                **error);
+                const gchar            *value,
+                GSList                **separators,
+                GError                **error);
 static gchar                *g_key_file_parse_string_as_value  (GKeyFile               *key_file,
-                                const gchar            *string,
-                                gboolean                escape_separator);
+                const gchar            *string,
+                gboolean                escape_separator);
 static gint                  g_key_file_parse_value_as_integer (GKeyFile               *key_file,
-                                const gchar            *value,
-                                GError                **error);
+                const gchar            *value,
+                GError                **error);
 static gchar                *g_key_file_parse_integer_as_value (GKeyFile               *key_file,
-                                gint                    value);
+                gint                    value);
 static gdouble               g_key_file_parse_value_as_double  (GKeyFile               *key_file,
                                                                 const gchar            *value,
                                                                 GError                **error);
 static gboolean              g_key_file_parse_value_as_boolean (GKeyFile               *key_file,
-                                const gchar            *value,
-                                GError                **error);
+                const gchar            *value,
+                GError                **error);
 static gchar                *g_key_file_parse_boolean_as_value (GKeyFile               *key_file,
-                                gboolean                value);
+                gboolean                value);
 static gchar                *g_key_file_parse_value_as_comment (GKeyFile               *key_file,
-                                                                const gchar            *value);
+                                                                const gchar            *value,
+                                                                gboolean                is_final_line);
 static gchar                *g_key_file_parse_comment_as_value (GKeyFile               *key_file,
                                                                 const gchar            *comment);
 static void                  g_key_file_parse_key_value_pair   (GKeyFile               *key_file,
-                                const gchar            *line,
-                                gsize                   length,
-                                GError                **error);
+                const gchar            *line,
+                gsize                   length,
+                GError                **error);
 static void                  g_key_file_parse_comment          (GKeyFile               *key_file,
-                                const gchar            *line,
-                                gsize                   length,
-                                GError                **error);
+                const gchar            *line,
+                gsize                   length,
+                GError                **error);
 static void                  g_key_file_parse_group            (GKeyFile               *key_file,
-                                const gchar            *line,
-                                gsize                   length,
-                                GError                **error);
+                const gchar            *line,
+                gsize                   length,
+                GError                **error);
 static gchar                *key_get_locale                    (const gchar            *key);
 static void                  g_key_file_parse_data             (GKeyFile               *key_file,
-                                const gchar            *data,
-                                gsize                   length,
-                                GError                **error);
+                const gchar            *data,
+                gsize                   length,
+                GError                **error);
 static void                  g_key_file_flush_parse_buffer     (GKeyFile               *key_file,
-                                GError                **error);
+                GError                **error);
 
 G_DEFINE_QUARK (g-key-file-error-quark, g_key_file_error)
 
 static void
 g_key_file_init (GKeyFile *key_file)
@@ -707,11 +708,11 @@
  *
  * Since: 2.6
  */
 void
 g_key_file_set_list_separator (GKeyFile *key_file,
-                   gchar     separator)
+             gchar     separator)
 {
   g_return_if_fail (key_file != NULL);
 
   key_file->list_separator = separator;
 }
@@ -797,13 +798,13 @@
   return fd;
 }
 
 static gboolean
 g_key_file_load_from_fd (GKeyFile       *key_file,
-             gint            fd,
-             GKeyFileFlags   flags,
-             GError        **error)
+       gint            fd,
+       GKeyFileFlags   flags,
+       GError        **error)
 {
   GError *key_file_error = NULL;
   gssize bytes_read;
   struct stat stat_buf;
   gchar read_buf[4096];
@@ -852,12 +853,12 @@
                                g_strerror (errsv));
           return FALSE;
         }
 
       g_key_file_parse_data (key_file,
-                 read_buf, bytes_read,
-                 &key_file_error);
+           read_buf, bytes_read,
+           &key_file_error);
     }
   while (!key_file_error);
 
   if (key_file_error)
     {
@@ -896,13 +897,13 @@
  *
  * Since: 2.6
  **/
 gboolean
 g_key_file_load_from_file (GKeyFile       *key_file,
-               const gchar    *file,
-               GKeyFileFlags   flags,
-               GError        **error)
+         const gchar    *file,
+         GKeyFileFlags   flags,
+         GError        **error)
 {
   GError *key_file_error = NULL;
   gint fd;
   int errsv;
 
@@ -947,14 +948,14 @@
  *
  * Since: 2.6
  **/
 gboolean
 g_key_file_load_from_data (GKeyFile       *key_file,
-               const gchar    *data,
-               gsize           length,
-               GKeyFileFlags   flags,
-               GError        **error)
+         const gchar    *data,
+         gsize           length,
+         GKeyFileFlags   flags,
+         GError        **error)
 {
   GError *key_file_error = NULL;
   gchar list_separator;
 
   g_return_val_if_fail (key_file != NULL, FALSE);
@@ -1073,21 +1074,21 @@
 
       if (fd == -1)
         {
           if (key_file_error)
             g_propagate_error (error, key_file_error);
-      break;
+    break;
         }
 
       found_file = g_key_file_load_from_fd (key_file, fd, flags,
-                                        &key_file_error);
+                                      &key_file_error);
       close (fd);
 
       if (key_file_error)
         {
-      g_propagate_error (error, key_file_error);
-      break;
+    g_propagate_error (error, key_file_error);
+    break;
         }
     }
 
   if (found_file && full_path)
     *full_path = output_path;
@@ -1115,14 +1116,14 @@
  * Returns: %TRUE if a key file could be loaded, %FALSE othewise
  * Since: 2.6
  **/
 gboolean
 g_key_file_load_from_data_dirs (GKeyFile       *key_file,
-                const gchar    *file,
-                gchar         **full_path,
-                GKeyFileFlags   flags,
-                GError        **error)
+        const gchar    *file,
+        gchar         **full_path,
+        GKeyFileFlags   flags,
+        GError        **error)
 {
   gchar **all_data_dirs;
   const gchar * user_data_dir;
   const gchar * const * system_data_dirs;
   gsize i, j;
@@ -1222,31 +1223,31 @@
 /* If G_KEY_FILE_KEEP_TRANSLATIONS is not set, only returns
  * true for locales that match those in g_get_language_names().
  */
 static gboolean
 g_key_file_locale_is_interesting (GKeyFile    *key_file,
-                  const gchar *locale)
+          const gchar *locale)
 {
   gsize i;
 
   if (key_file->flags & G_KEY_FILE_KEEP_TRANSLATIONS)
     return TRUE;
 
   for (i = 0; key_file->locales[i] != NULL; i++)
     {
       if (g_ascii_strcasecmp (key_file->locales[i], locale) == 0)
-    return TRUE;
+  return TRUE;
     }
 
   return FALSE;
 }
 
 static void
 g_key_file_parse_line (GKeyFile     *key_file,
-               const gchar  *line,
-               gsize         length,
-               GError      **error)
+           const gchar  *line,
+           gsize         length,
+           GError      **error)
 {
   GError *parse_error = NULL;
   gchar *line_start;
 
   g_return_if_fail (key_file != NULL);
@@ -1258,16 +1259,16 @@
 
   if (g_key_file_line_is_comment (line_start))
     g_key_file_parse_comment (key_file, line, length, &parse_error);
   else if (g_key_file_line_is_group (line_start))
     g_key_file_parse_group (key_file, line_start,
-                length - (line_start - line),
-                &parse_error);
+          length - (line_start - line),
+          &parse_error);
   else if (g_key_file_line_is_key_value_pair (line_start))
     g_key_file_parse_key_value_pair (key_file, line_start,
-                     length - (line_start - line),
-                     &parse_error);
+             length - (line_start - line),
+             &parse_error);
   else
     {
       gchar *line_utf8 = g_utf8_make_valid (line, length);
       g_set_error (error, G_KEY_FILE_ERROR,
                    G_KEY_FILE_ERROR_PARSE,
@@ -1283,13 +1284,13 @@
     g_propagate_error (error, parse_error);
 }
 
 static void
 g_key_file_parse_comment (GKeyFile     *key_file,
-              const gchar  *line,
-              gsize         length,
-              GError      **error)
+        const gchar  *line,
+        gsize         length,
+        GError      **error)
 {
   GKeyFileKeyValuePair *pair;
 
   if (!(key_file->flags & G_KEY_FILE_KEEP_COMMENTS))
     return;
@@ -1310,13 +1311,13 @@
     g_list_prepend (key_file->current_group->key_value_pairs, pair);
 }
 
 static void
 g_key_file_parse_group (GKeyFile     *key_file,
-            const gchar  *line,
-            gsize         length,
-            GError      **error)
+      const gchar  *line,
+      gsize         length,
+      GError      **error)
 {
   gchar *group_name;
   const gchar *group_name_start, *group_name_end;
 
   /* advance past opening '['
@@ -1331,25 +1332,25 @@
                           group_name_end - group_name_start);
 
   if (!g_key_file_is_group_name (group_name))
     {
       g_set_error (error, G_KEY_FILE_ERROR,
-           G_KEY_FILE_ERROR_PARSE,
-           _("Invalid group name: %s"), group_name);
+       G_KEY_FILE_ERROR_PARSE,
+       _("Invalid group name: %s"), group_name);
       g_free (group_name);
       return;
     }
 
   g_key_file_add_group (key_file, group_name);
   g_free (group_name);
 }
 
 static void
 g_key_file_parse_key_value_pair (GKeyFile     *key_file,
-                 const gchar  *line,
-                 gsize         length,
-                 GError      **error)
+         const gchar  *line,
+         gsize         length,
+         GError      **error)
 {
   gchar *key, *value, *key_end, *value_start, *locale;
   gsize key_len, value_len;
 
   if (key_file->current_group == NULL || key_file->current_group->name == NULL)
@@ -1404,16 +1405,16 @@
                  key_file->current_group->name) == 0
       && strcmp (key, "Encoding") == 0)
     {
       if (g_ascii_strcasecmp (value, "UTF-8") != 0)
         {
-      gchar *value_utf8 = g_utf8_make_valid (value, value_len);
+    gchar *value_utf8 = g_utf8_make_valid (value, value_len);
           g_set_error (error, G_KEY_FILE_ERROR,
                        G_KEY_FILE_ERROR_UNKNOWN_ENCODING,
                        _("Key file contains unsupported "
-                         "encoding '%s'"), value_utf8);
-          g_free (value_utf8);
+       "encoding '%s'"), value_utf8);
+    g_free (value_utf8);
 
           g_free (key);
           g_free (value);
           return;
         }
@@ -1466,13 +1467,13 @@
   return locale;
 }
 
 static void
 g_key_file_parse_data (GKeyFile     *key_file,
-               const gchar  *data,
-               gsize         length,
-               GError      **error)
+           const gchar  *data,
+           gsize         length,
+           GError      **error)
 {
   GError *parse_error;
   gsize i;
 
   g_return_if_fail (key_file != NULL);
@@ -1483,16 +1484,16 @@
   i = 0;
   while (i < length)
     {
       if (data[i] == '\n')
         {
-      if (key_file->parse_buffer->len > 0
-          && (key_file->parse_buffer->str[key_file->parse_buffer->len - 1]
-          == '\r'))
-        g_string_erase (key_file->parse_buffer,
-                key_file->parse_buffer->len - 1,
-                1);
+    if (key_file->parse_buffer->len > 0
+        && (key_file->parse_buffer->str[key_file->parse_buffer->len - 1]
+      == '\r'))
+      g_string_erase (key_file->parse_buffer,
+          key_file->parse_buffer->len - 1,
+          1);
 
           /* When a newline is encountered flush the parse buffer so that the
            * line can be parsed.  Note that completely blank lines won't show
            * up in the parse buffer, so they get parsed directly.
            */
@@ -1528,23 +1529,23 @@
     }
 }
 
 static void
 g_key_file_flush_parse_buffer (GKeyFile  *key_file,
-                   GError   **error)
+             GError   **error)
 {
   GError *file_error = NULL;
 
   g_return_if_fail (key_file != NULL);
 
   file_error = NULL;
 
   if (key_file->parse_buffer->len > 0)
     {
       g_key_file_parse_line (key_file, key_file->parse_buffer->str,
-                 key_file->parse_buffer->len,
-                 &file_error);
+           key_file->parse_buffer->len,
+           &file_error);
       g_string_erase (key_file->parse_buffer, 0, -1);
 
       if (file_error)
         {
           g_propagate_error (error, file_error);
@@ -1570,12 +1571,12 @@
  *
  * Since: 2.6
  **/
 gchar *
 g_key_file_to_data (GKeyFile  *key_file,
-            gsize     *length,
-            GError   **error)
+        gsize     *length,
+        GError   **error)
 {
   GString *data_string;
   GList *group_node, *key_file_node;
 
   g_return_val_if_fail (key_file != NULL, NULL);
@@ -1640,13 +1641,13 @@
  *
  * Since: 2.6
  **/
 gchar **
 g_key_file_get_keys (GKeyFile     *key_file,
-             const gchar  *group_name,
-             gsize        *length,
-             GError      **error)
+         const gchar  *group_name,
+         gsize        *length,
+         GError      **error)
 {
   GKeyFileGroup *group;
   GList *tmp;
   gchar **keys;
   gsize i, num_keys;
@@ -1675,11 +1676,11 @@
       GKeyFileKeyValuePair *pair;
 
       pair = (GKeyFileKeyValuePair *) tmp->data;
 
       if (pair->key)
-    num_keys++;
+  num_keys++;
     }
 
   keys = g_new (gchar *, num_keys + 1);
 
   i = num_keys - 1;
@@ -1688,14 +1689,14 @@
       GKeyFileKeyValuePair *pair;
 
       pair = (GKeyFileKeyValuePair *) tmp->data;
 
       if (pair->key)
-    {
-      keys[i] = g_strdup (pair->key);
-      i--;
-    }
+  {
+    keys[i] = g_strdup (pair->key);
+    i--;
+  }
     }
 
   keys[num_keys] = NULL;
 
   if (length)
@@ -1738,11 +1739,11 @@
  *   Use g_strfreev() to free it.
  * Since: 2.6
  **/
 gchar **
 g_key_file_get_groups (GKeyFile *key_file,
-               gsize    *length)
+           gsize    *length)
 {
   GList *group_node;
   gchar **groups;
   gsize i, num_groups;
 
@@ -1817,13 +1818,13 @@
  *
  * Since: 2.6
  **/
 gchar *
 g_key_file_get_value (GKeyFile     *key_file,
-              const gchar  *group_name,
-              const gchar  *key,
-              GError      **error)
+          const gchar  *group_name,
+          const gchar  *key,
+          GError      **error)
 {
   GKeyFileGroup *group;
   GKeyFileKeyValuePair *pair;
   gchar *value = NULL;
 
@@ -1872,13 +1873,13 @@
  *
  * Since: 2.6
  **/
 void
 g_key_file_set_value (GKeyFile    *key_file,
-              const gchar *group_name,
-              const gchar *key,
-              const gchar *value)
+          const gchar *group_name,
+          const gchar *key,
+          const gchar *value)
 {
   GKeyFileGroup *group;
   GKeyFileKeyValuePair *pair;
 
   g_return_if_fail (key_file != NULL);
@@ -1930,13 +1931,13 @@
  *
  * Since: 2.6
  **/
 gchar *
 g_key_file_get_string (GKeyFile     *key_file,
-               const gchar  *group_name,
-               const gchar  *key,
-               GError      **error)
+           const gchar  *group_name,
+           const gchar  *key,
+           GError      **error)
 {
   gchar *value, *string_value;
   GError *key_file_error;
 
   g_return_val_if_fail (key_file != NULL, NULL);
@@ -1965,11 +1966,11 @@
 
       return NULL;
     }
 
   string_value = g_key_file_parse_value_as_string (key_file, value, NULL,
-                           &key_file_error);
+               &key_file_error);
   g_free (value);
 
   if (key_file_error)
     {
       if (g_error_matches (key_file_error,
@@ -2005,13 +2006,13 @@
  *
  * Since: 2.6
  **/
 void
 g_key_file_set_string (GKeyFile    *key_file,
-               const gchar *group_name,
-               const gchar *key,
-               const gchar *string)
+           const gchar *group_name,
+           const gchar *key,
+           const gchar *string)
 {
   gchar *value;
 
   g_return_if_fail (key_file != NULL);
   g_return_if_fail (string != NULL);
@@ -2042,14 +2043,14 @@
  *
  * Since: 2.6
  **/
 gchar **
 g_key_file_get_string_list (GKeyFile     *key_file,
-                const gchar  *group_name,
-                const gchar  *key,
-                gsize        *length,
-                GError      **error)
+          const gchar  *group_name,
+          const gchar  *key,
+          gsize        *length,
+          GError      **error)
 {
   GError *key_file_error = NULL;
   gchar *value, *string_value, **values;
   gint i, len;
   GSList *p, *pieces = NULL;
@@ -2134,14 +2135,14 @@
  *
  * Since: 2.6
  **/
 void
 g_key_file_set_string_list (GKeyFile            *key_file,
-                const gchar         *group_name,
-                const gchar         *key,
-                const gchar * const  list[],
-                gsize                length)
+          const gchar         *group_name,
+          const gchar         *key,
+          const gchar * const  list[],
+          gsize                length)
 {
   GString *value_list;
   gsize i;
 
   g_return_if_fail (key_file != NULL);
@@ -2181,14 +2182,14 @@
  *
  * Since: 2.6
  **/
 void
 g_key_file_set_locale_string (GKeyFile     *key_file,
-                  const gchar  *group_name,
-                  const gchar  *key,
-                  const gchar  *locale,
-                  const gchar  *string)
+            const gchar  *group_name,
+            const gchar  *key,
+            const gchar  *locale,
+            const gchar  *string)
 {
   gchar *full_key, *value;
 
   g_return_if_fail (key_file != NULL);
   g_return_if_fail (key != NULL);
@@ -2228,14 +2229,14 @@
  *
  * Since: 2.6
  **/
 gchar *
 g_key_file_get_locale_string (GKeyFile     *key_file,
-                  const gchar  *group_name,
-                  const gchar  *key,
-                  const gchar  *locale,
-                  GError      **error)
+            const gchar  *group_name,
+            const gchar  *key,
+            const gchar  *locale,
+            GError      **error)
 {
   gchar *candidate_key, *translated_value;
   GError *key_file_error;
   gchar **languages;
   gboolean free_languages = FALSE;
@@ -2263,27 +2264,27 @@
   for (i = 0; languages[i]; i++)
     {
       candidate_key = g_strdup_printf ("%s[%s]", key, languages[i]);
 
       translated_value = g_key_file_get_string (key_file,
-                        group_name,
-                        candidate_key, NULL);
+            group_name,
+            candidate_key, NULL);
       g_free (candidate_key);
 
       if (translated_value)
-    break;
+  break;
 
       g_free (translated_value);
       translated_value = NULL;
    }
 
   /* Fallback to untranslated key
    */
   if (!translated_value)
     {
       translated_value = g_key_file_get_string (key_file, group_name, key,
-                        &key_file_error);
+            &key_file_error);
 
       if (!translated_value)
         g_propagate_error (error, key_file_error);
     }
 
@@ -2388,15 +2389,15 @@
  *
  * Since: 2.6
  **/
 gchar **
 g_key_file_get_locale_string_list (GKeyFile     *key_file,
-                   const gchar  *group_name,
-                   const gchar  *key,
-                   const gchar  *locale,
-                   gsize        *length,
-                   GError      **error)
+           const gchar  *group_name,
+           const gchar  *key,
+           const gchar  *locale,
+           gsize        *length,
+           GError      **error)
 {
   GError *key_file_error;
   gchar **values, *value;
   char list_separator[2];
   gsize len;
@@ -2406,12 +2407,12 @@
   g_return_val_if_fail (key != NULL, NULL);
 
   key_file_error = NULL;
 
   value = g_key_file_get_locale_string (key_file, group_name,
-                    key, locale,
-                    &key_file_error);
+          key, locale,
+          &key_file_error);
 
   if (key_file_error)
     g_propagate_error (error, key_file_error);
 
   if (!value)
@@ -2452,15 +2453,15 @@
  *
  * Since: 2.6
  **/
 void
 g_key_file_set_locale_string_list (GKeyFile            *key_file,
-                   const gchar         *group_name,
-                   const gchar         *key,
-                   const gchar         *locale,
-                   const gchar * const  list[],
-                   gsize                length)
+           const gchar         *group_name,
+           const gchar         *key,
+           const gchar         *locale,
+           const gchar * const  list[],
+           gsize                length)
 {
   GString *value_list;
   gchar *full_key;
   gsize i;
 
@@ -2512,13 +2513,13 @@
  *
  * Since: 2.6
  **/
 gboolean
 g_key_file_get_boolean (GKeyFile     *key_file,
-            const gchar  *group_name,
-            const gchar  *key,
-            GError      **error)
+      const gchar  *group_name,
+      const gchar  *key,
+      GError      **error)
 {
   GError *key_file_error = NULL;
   gchar *value;
   gboolean bool_value;
 
@@ -2533,11 +2534,11 @@
       g_propagate_error (error, key_file_error);
       return FALSE;
     }
 
   bool_value = g_key_file_parse_value_as_boolean (key_file, value,
-                          &key_file_error);
+              &key_file_error);
   g_free (value);
 
   if (key_file_error)
     {
       if (g_error_matches (key_file_error,
@@ -2570,13 +2571,13 @@
  *
  * Since: 2.6
  **/
 void
 g_key_file_set_boolean (GKeyFile    *key_file,
-            const gchar *group_name,
-            const gchar *key,
-            gboolean     value)
+      const gchar *group_name,
+      const gchar *key,
+      gboolean     value)
 {
   gchar *result;
 
   g_return_if_fail (key_file != NULL);
 
@@ -2608,14 +2609,14 @@
  *
  * Since: 2.6
  **/
 gboolean *
 g_key_file_get_boolean_list (GKeyFile     *key_file,
-                 const gchar  *group_name,
-                 const gchar  *key,
-                 gsize        *length,
-                 GError      **error)
+           const gchar  *group_name,
+           const gchar  *key,
+           gsize        *length,
+           GError      **error)
 {
   GError *key_file_error;
   gchar **values;
   gboolean *bool_values;
   gsize i, num_bools;
@@ -2628,11 +2629,11 @@
     *length = 0;
 
   key_file_error = NULL;
 
   values = g_key_file_get_string_list (key_file, group_name, key,
-                       &num_bools, &key_file_error);
+               &num_bools, &key_file_error);
 
   if (key_file_error)
     g_propagate_error (error, key_file_error);
 
   if (!values)
@@ -2641,12 +2642,12 @@
   bool_values = g_new (gboolean, num_bools);
 
   for (i = 0; i < num_bools; i++)
     {
       bool_values[i] = g_key_file_parse_value_as_boolean (key_file,
-                              values[i],
-                              &key_file_error);
+                values[i],
+                &key_file_error);
 
       if (key_file_error)
         {
           g_propagate_error (error, key_file_error);
           g_strfreev (values);
@@ -2677,14 +2678,14 @@
  *
  * Since: 2.6
  **/
 void
 g_key_file_set_boolean_list (GKeyFile    *key_file,
-                 const gchar *group_name,
-                 const gchar *key,
-                 gboolean     list[],
-                 gsize        length)
+           const gchar *group_name,
+           const gchar *key,
+           gboolean     list[],
+           gsize        length)
 {
   GString *value_list;
   gsize i;
 
   g_return_if_fail (key_file != NULL);
@@ -2733,13 +2734,13 @@
  *
  * Since: 2.6
  **/
 gint
 g_key_file_get_integer (GKeyFile     *key_file,
-            const gchar  *group_name,
-            const gchar  *key,
-            GError      **error)
+      const gchar  *group_name,
+      const gchar  *key,
+      GError      **error)
 {
   GError *key_file_error;
   gchar *value;
   gint int_value;
 
@@ -2756,11 +2757,11 @@
       g_propagate_error (error, key_file_error);
       return 0;
     }
 
   int_value = g_key_file_parse_value_as_integer (key_file, value,
-                         &key_file_error);
+             &key_file_error);
   g_free (value);
 
   if (key_file_error)
     {
       if (g_error_matches (key_file_error,
@@ -2793,13 +2794,13 @@
  *
  * Since: 2.6
  **/
 void
 g_key_file_set_integer (GKeyFile    *key_file,
-            const gchar *group_name,
-            const gchar *key,
-            gint         value)
+      const gchar *group_name,
+      const gchar *key,
+      gint         value)
 {
   gchar *result;
 
   g_return_if_fail (key_file != NULL);
 
@@ -2986,14 +2987,14 @@
  *
  * Since: 2.6
  **/
 gint *
 g_key_file_get_integer_list (GKeyFile     *key_file,
-                 const gchar  *group_name,
-                 const gchar  *key,
-                 gsize        *length,
-                 GError      **error)
+           const gchar  *group_name,
+           const gchar  *key,
+           gsize        *length,
+           GError      **error)
 {
   GError *key_file_error = NULL;
   gchar **values;
   gint *int_values;
   gsize i, num_ints;
@@ -3004,11 +3005,11 @@
 
   if (length)
     *length = 0;
 
   values = g_key_file_get_string_list (key_file, group_name, key,
-                       &num_ints, &key_file_error);
+               &num_ints, &key_file_error);
 
   if (key_file_error)
     g_propagate_error (error, key_file_error);
 
   if (!values)
@@ -3017,12 +3018,12 @@
   int_values = g_new (gint, num_ints);
 
   for (i = 0; i < num_ints; i++)
     {
       int_values[i] = g_key_file_parse_value_as_integer (key_file,
-                             values[i],
-                             &key_file_error);
+               values[i],
+               &key_file_error);
 
       if (key_file_error)
         {
           g_propagate_error (error, key_file_error);
           g_strfreev (values);
@@ -3052,14 +3053,14 @@
  *
  * Since: 2.6
  **/
 void
 g_key_file_set_integer_list (GKeyFile    *key_file,
-                 const gchar *group_name,
-                 const gchar *key,
-                 gint         list[],
-                 gsize        length)
+           const gchar *group_name,
+           const gchar *key,
+           gint         list[],
+           gsize        length)
 {
   GString *values;
   gsize i;
 
   g_return_if_fail (key_file != NULL);
@@ -3158,11 +3159,11 @@
 /**
  * g_key_file_set_double:
  * @key_file: a #GKeyFile
  * @group_name: a group name
  * @key: a key
- * @value: an double value
+ * @value: a double value
  *
  * Associates a new double value with @key under @group_name.
  * If @key cannot be found then it is created.
  *
  * Since: 2.12
@@ -3235,12 +3236,12 @@
   double_values = g_new (gdouble, num_doubles);
 
   for (i = 0; i < num_doubles; i++)
     {
       double_values[i] = g_key_file_parse_value_as_double (key_file,
-                               values[i],
-                               &key_file_error);
+                 values[i],
+                 &key_file_error);
 
       if (key_file_error)
         {
           g_propagate_error (error, key_file_error);
           g_strfreev (values);
@@ -3270,14 +3271,14 @@
  *
  * Since: 2.12
  **/
 void
 g_key_file_set_double_list (GKeyFile    *key_file,
-                const gchar *group_name,
-                const gchar *key,
-                gdouble      list[],
-                gsize        length)
+          const gchar *group_name,
+          const gchar *key,
+          gdouble      list[],
+          gsize        length)
 {
   GString *values;
   gsize i;
 
   g_return_if_fail (key_file != NULL);
@@ -3570,13 +3571,14 @@
   while (tmp != key_node)
     {
       pair = (GKeyFileKeyValuePair *) tmp->data;
 
       if (string == NULL)
-    string = g_string_sized_new (512);
+  string = g_string_sized_new (512);
 
-      comment = g_key_file_parse_value_as_comment (key_file, pair->value);
+      comment = g_key_file_parse_value_as_comment (key_file, pair->value,
+                                                   (tmp->prev == key_node));
       g_string_append (string, comment);
       g_free (comment);
 
       tmp = tmp->prev;
     }
@@ -3592,12 +3594,12 @@
   return comment;
 }
 
 static gchar *
 get_group_comment (GKeyFile       *key_file,
-           GKeyFileGroup  *group,
-           GError        **error)
+       GKeyFileGroup  *group,
+       GError        **error)
 {
   GString *string;
   GList *tmp;
   gchar *comment;
 
@@ -3609,17 +3611,17 @@
       GKeyFileKeyValuePair *pair;
 
       pair = (GKeyFileKeyValuePair *) tmp->data;
 
       if (pair->key != NULL)
-    {
-      tmp = tmp->prev;
-      break;
-    }
+  {
+    tmp = tmp->prev;
+    break;
+  }
 
       if (tmp->next == NULL)
-    break;
+  break;
 
       tmp = tmp->next;
     }
 
   while (tmp != NULL)
@@ -3629,11 +3631,12 @@
       pair = (GKeyFileKeyValuePair *) tmp->data;
 
       if (string == NULL)
         string = g_string_sized_new (512);
 
-      comment = g_key_file_parse_value_as_comment (key_file, pair->value);
+      comment = g_key_file_parse_value_as_comment (key_file, pair->value,
+                                                   (tmp->prev == NULL));
       g_string_append (string, comment);
       g_free (comment);
 
       tmp = tmp->prev;
     }
@@ -3700,11 +3703,13 @@
  * Retrieves a comment above @key from @group_name.
  * If @key is %NULL then @comment will be read from above
  * @group_name. If both @key and @group_name are %NULL, then
  * @comment will be read from above the first group in the file.
  *
- * Note that the returned string includes the '#' comment markers.
+ * Note that the returned string does not include the '#' comment markers,
+ * but does include any whitespace after them (on each line). It includes
+ * the line breaks between lines, but does not include the final line break.
  *
  * Returns: a comment that should be freed with g_free()
  *
  * Since: 2.6
  **/
@@ -3768,11 +3773,11 @@
  * otherwise.
  * Since: 2.6
  **/
 gboolean
 g_key_file_has_group (GKeyFile    *key_file,
-              const gchar *group_name)
+          const gchar *group_name)
 {
   g_return_val_if_fail (key_file != NULL, FALSE);
   g_return_val_if_fail (group_name != NULL, FALSE);
 
   return g_key_file_lookup_group (key_file, group_name) != NULL;
@@ -3781,14 +3786,14 @@
 /* This code remains from a historical attempt to add a new public API
  * which respects the GError rules.
  */
 static gboolean
 g_key_file_has_key_full (GKeyFile     *key_file,
-             const gchar  *group_name,
-             const gchar  *key,
-             gboolean     *has_key,
-             GError      **error)
+       const gchar  *group_name,
+       const gchar  *key,
+       gboolean     *has_key,
+       GError      **error)
 {
   GKeyFileKeyValuePair *pair;
   GKeyFileGroup *group;
 
   g_return_val_if_fail (key_file != NULL, FALSE);
@@ -3840,13 +3845,13 @@
  *
  * Since: 2.6
  **/
 gboolean
 g_key_file_has_key (GKeyFile     *key_file,
-            const gchar  *group_name,
-            const gchar  *key,
-            GError      **error)
+        const gchar  *group_name,
+        const gchar  *key,
+        GError      **error)
 {
   GError *temp_error = NULL;
   gboolean has_key;
 
   if (g_key_file_has_key_full (key_file, group_name, key, &has_key, &temp_error))
@@ -3860,11 +3865,11 @@
     }
 }
 
 static void
 g_key_file_add_group (GKeyFile    *key_file,
-              const gchar *group_name)
+          const gchar *group_name)
 {
   GKeyFileGroup *group;
 
   g_return_if_fail (key_file != NULL);
   g_return_if_fail (g_key_file_is_group_name (group_name));
@@ -3909,11 +3914,11 @@
  *     anyway.
  */
 static void
 g_key_file_remove_key_value_pair_node (GKeyFile      *key_file,
                                        GKeyFileGroup *group,
-                           GList         *pair_node)
+                     GList         *pair_node)
 {
 
   GKeyFileKeyValuePair *pair;
 
   pair = (GKeyFileKeyValuePair *) pair_node->data;
@@ -3927,11 +3932,11 @@
   g_list_free_1 (pair_node);
 }
 
 static void
 g_key_file_remove_group_node (GKeyFile *key_file,
-                  GList    *group_node)
+            GList    *group_node)
 {
   GKeyFileGroup *group;
   GList *tmp;
 
   group = (GKeyFileGroup *) group_node->data;
@@ -3958,17 +3963,17 @@
    */
   if (key_file->start_group == group)
     {
       tmp = g_list_last (key_file->groups);
       while (tmp != NULL)
-    {
-      if (tmp != group_node &&
-          ((GKeyFileGroup *) tmp->data)->name != NULL)
-        break;
+  {
+    if (tmp != group_node &&
+        ((GKeyFileGroup *) tmp->data)->name != NULL)
+      break;
 
-      tmp = tmp->prev;
-    }
+    tmp = tmp->prev;
+  }
 
       if (tmp)
         key_file->start_group = (GKeyFileGroup *) tmp->data;
       else
         key_file->start_group = NULL;
@@ -4018,12 +4023,12 @@
  *
  * Since: 2.6
  **/
 gboolean
 g_key_file_remove_group (GKeyFile     *key_file,
-             const gchar  *group_name,
-             GError      **error)
+       const gchar  *group_name,
+       GError      **error)
 {
   GList *group_node;
 
   g_return_val_if_fail (key_file != NULL, FALSE);
   g_return_val_if_fail (group_name != NULL, FALSE);
@@ -4031,13 +4036,13 @@
   group_node = g_key_file_lookup_group_node (key_file, group_name);
 
   if (!group_node)
     {
       g_set_error (error, G_KEY_FILE_ERROR,
-                   G_KEY_FILE_ERROR_GROUP_NOT_FOUND,
-                   _("Key file does not have group '%s'"),
-                   group_name);
+       G_KEY_FILE_ERROR_GROUP_NOT_FOUND,
+       _("Key file does not have group '%s'"),
+       group_name);
       return FALSE;
     }
 
   g_key_file_remove_group_node (key_file, group_node);
 
@@ -4053,13 +4058,13 @@
   group->key_value_pairs = g_list_prepend (group->key_value_pairs, pair);
 }
 
 static void
 g_key_file_add_key (GKeyFile      *key_file,
-            GKeyFileGroup *group,
-            const gchar   *key,
-            const gchar   *value)
+        GKeyFileGroup *group,
+        const gchar   *key,
+        const gchar   *value)
 {
   GKeyFileKeyValuePair *pair;
 
   pair = g_slice_new (GKeyFileKeyValuePair);
 #ifdef GSTREAMER_LITE
@@ -4086,13 +4091,13 @@
  *
  * Since: 2.6
  **/
 gboolean
 g_key_file_remove_key (GKeyFile     *key_file,
-               const gchar  *group_name,
-               const gchar  *key,
-               GError      **error)
+           const gchar  *group_name,
+           const gchar  *key,
+           GError      **error)
 {
   GKeyFileGroup *group;
   GKeyFileKeyValuePair *pair;
 
   g_return_val_if_fail (key_file != NULL, FALSE);
@@ -4130,11 +4135,11 @@
   return TRUE;
 }
 
 static GList *
 g_key_file_lookup_group_node (GKeyFile    *key_file,
-                  const gchar *group_name)
+            const gchar *group_name)
 {
   GKeyFileGroup *group;
   GList *tmp;
 
   for (tmp = key_file->groups; tmp != NULL; tmp = tmp->next)
@@ -4148,18 +4153,18 @@
   return tmp;
 }
 
 static GKeyFileGroup *
 g_key_file_lookup_group (GKeyFile    *key_file,
-             const gchar *group_name)
+       const gchar *group_name)
 {
   return (GKeyFileGroup *)g_hash_table_lookup (key_file->group_hash, group_name);
 }
 
 static GList *
 g_key_file_lookup_key_value_pair_node (GKeyFile       *key_file,
-                           GKeyFileGroup  *group,
+                     GKeyFileGroup  *group,
                                        const gchar    *key)
 {
   GList *key_node;
 
   for (key_node = group->key_value_pairs;
@@ -4177,12 +4182,12 @@
   return key_node;
 }
 
 static GKeyFileKeyValuePair *
 g_key_file_lookup_key_value_pair (GKeyFile      *key_file,
-                  GKeyFileGroup *group,
-                  const gchar   *key)
+          GKeyFileGroup *group,
+          const gchar   *key)
 {
   return (GKeyFileKeyValuePair *) g_hash_table_lookup (group->lookup_map, key);
 }
 
 /* Lines starting with # or consisting entirely of whitespace are merely
@@ -4307,13 +4312,13 @@
   return TRUE;
 }
 
 static gchar *
 g_key_file_parse_value_as_string (GKeyFile     *key_file,
-                  const gchar  *value,
-                  GSList      **pieces,
-                  GError      **error)
+          const gchar  *value,
+          GSList      **pieces,
+          GError      **error)
 {
   gchar *string_value, *p, *q0, *q;
 
   string_value = g_new (gchar, strlen (value) + 1);
 
@@ -4345,54 +4350,54 @@
 
             case '\\':
               *q = '\\';
               break;
 
-        case '\0':
-          g_set_error_literal (error, G_KEY_FILE_ERROR,
+      case '\0':
+        g_set_error_literal (error, G_KEY_FILE_ERROR,
                                    G_KEY_FILE_ERROR_INVALID_VALUE,
                                    _("Key file contains escape character "
                                      "at end of line"));
-          break;
+        break;
 
             default:
-          if (pieces && *p == key_file->list_separator)
-        *q = key_file->list_separator;
-          else
-        {
-          *q++ = '\\';
-          *q = *p;
+        if (pieces && *p == key_file->list_separator)
+    *q = key_file->list_separator;
+        else
+    {
+      *q++ = '\\';
+      *q = *p;
 
-          if (*error == NULL)
-            {
-              gchar sequence[3];
+      if (*error == NULL)
+        {
+          gchar sequence[3];
 
-              sequence[0] = '\\';
-              sequence[1] = *p;
-              sequence[2] = '\0';
+          sequence[0] = '\\';
+          sequence[1] = *p;
+          sequence[2] = '\0';
 
-              g_set_error (error, G_KEY_FILE_ERROR,
-                           G_KEY_FILE_ERROR_INVALID_VALUE,
-                           _("Key file contains invalid escape "
-                           "sequence '%s'"), sequence);
-            }
+          g_set_error (error, G_KEY_FILE_ERROR,
+           G_KEY_FILE_ERROR_INVALID_VALUE,
+           _("Key file contains invalid escape "
+             "sequence '%s'"), sequence);
         }
+    }
               break;
             }
         }
       else
-    {
-      *q = *p;
-      if (pieces && (*p == key_file->list_separator))
-        {
-          *pieces = g_slist_prepend (*pieces, g_strndup (q0, q - q0));
-          q0 = q + 1;
-        }
-    }
+  {
+    *q = *p;
+    if (pieces && (*p == key_file->list_separator))
+      {
+        *pieces = g_slist_prepend (*pieces, g_strndup (q0, q - q0));
+        q0 = q + 1;
+      }
+  }
 
       if (*p == '\0')
-    break;
+  break;
 
       q++;
       p++;
     }
 
@@ -4407,12 +4412,12 @@
   return string_value;
 }
 
 static gchar *
 g_key_file_parse_string_as_value (GKeyFile    *key_file,
-                  const gchar *string,
-                  gboolean     escape_separator)
+          const gchar *string,
+          gboolean     escape_separator)
 {
   gchar *value, *p, *q;
   gsize length;
   gboolean parsing_leading_space;
 
@@ -4439,12 +4444,12 @@
               strcpy (q, escaped_character);
               q += 2;
             }
           else
             {
-          *q = *p;
-          q++;
+        *q = *p;
+        q++;
             }
           break;
         case '\t':
           if (parsing_leading_space)
             {
@@ -4452,12 +4457,12 @@
               strcpy (q, escaped_character);
               q += 2;
             }
           else
             {
-          *q = *p;
-          q++;
+        *q = *p;
+        q++;
             }
           break;
         case '\n':
           escaped_character[1] = 'n';
           strcpy (q, escaped_character);
@@ -4473,23 +4478,23 @@
           strcpy (q, escaped_character);
           q += 2;
           parsing_leading_space = FALSE;
           break;
         default:
-      if (escape_separator && *p == key_file->list_separator)
-        {
-          escaped_character[1] = key_file->list_separator;
-          strcpy (q, escaped_character);
-          q += 2;
+    if (escape_separator && *p == key_file->list_separator)
+      {
+        escaped_character[1] = key_file->list_separator;
+        strcpy (q, escaped_character);
+        q += 2;
               parsing_leading_space = TRUE;
-        }
-      else
-        {
-          *q = *p;
-          q++;
+      }
+    else
+      {
+        *q = *p;
+        q++;
               parsing_leading_space = FALSE;
-        }
+      }
           break;
         }
       p++;
     }
   *q = '\0';
@@ -4497,12 +4502,12 @@
   return value;
 }
 
 static gint
 g_key_file_parse_value_as_integer (GKeyFile     *key_file,
-                   const gchar  *value,
-                   GError      **error)
+           const gchar  *value,
+           GError      **error)
 {
   gchar *eof_int;
   glong long_value;
   gint int_value;
   int errsv;
@@ -4513,38 +4518,38 @@
 
   if (*value == '\0' || (*eof_int != '\0' && !g_ascii_isspace(*eof_int)))
     {
       gchar *value_utf8 = g_utf8_make_valid (value, -1);
       g_set_error (error, G_KEY_FILE_ERROR,
-                   G_KEY_FILE_ERROR_INVALID_VALUE,
-                   _("Value '%s' cannot be interpreted "
-                   "as a number."), value_utf8);
+       G_KEY_FILE_ERROR_INVALID_VALUE,
+       _("Value '%s' cannot be interpreted "
+         "as a number."), value_utf8);
       g_free (value_utf8);
 
       return 0;
     }
 
   int_value = long_value;
   if (int_value != long_value || errsv == ERANGE)
     {
       gchar *value_utf8 = g_utf8_make_valid (value, -1);
       g_set_error (error,
-                   G_KEY_FILE_ERROR,
-                   G_KEY_FILE_ERROR_INVALID_VALUE,
-                   _("Integer value '%s' out of range"),
-                   value_utf8);
+       G_KEY_FILE_ERROR,
+       G_KEY_FILE_ERROR_INVALID_VALUE,
+       _("Integer value '%s' out of range"),
+       value_utf8);
       g_free (value_utf8);
 
       return 0;
     }
 
   return int_value;
 }
 
 static gchar *
 g_key_file_parse_integer_as_value (GKeyFile *key_file,
-                   gint      value)
+           gint      value)
 
 {
   return g_strdup_printf ("%d", value);
 }
 
@@ -4560,14 +4565,14 @@
 
   if (*end_of_valid_d != '\0' || end_of_valid_d == value)
     {
       gchar *value_utf8 = g_utf8_make_valid (value, -1);
       g_set_error (error, G_KEY_FILE_ERROR,
-                   G_KEY_FILE_ERROR_INVALID_VALUE,
-                   _("Value '%s' cannot be interpreted "
-                   "as a float number."),
-                   value_utf8);
+       G_KEY_FILE_ERROR_INVALID_VALUE,
+       _("Value '%s' cannot be interpreted "
+         "as a float number."),
+       value_utf8);
       g_free (value_utf8);
 
       double_value = 0;
     }
 
@@ -4581,12 +4586,12 @@
   return strncmp (s1, s2, MAX (len1, len2));
 }
 
 static gboolean
 g_key_file_parse_value_as_boolean (GKeyFile     *key_file,
-                   const gchar  *value,
-                   GError      **error)
+           const gchar  *value,
+           GError      **error)
 {
   gchar *value_utf8;
   gint i, length = 0;
 
   /* Count the number of non-whitespace characters */
@@ -4601,29 +4606,30 @@
 
   value_utf8 = g_utf8_make_valid (value, -1);
   g_set_error (error, G_KEY_FILE_ERROR,
                G_KEY_FILE_ERROR_INVALID_VALUE,
                _("Value '%s' cannot be interpreted "
-               "as a boolean."), value_utf8);
+     "as a boolean."), value_utf8);
   g_free (value_utf8);
 
   return FALSE;
 }
 
 static gchar *
 g_key_file_parse_boolean_as_value (GKeyFile *key_file,
-                   gboolean  value)
+           gboolean  value)
 {
   if (value)
     return g_strdup ("true");
   else
     return g_strdup ("false");
 }
 
 static gchar *
 g_key_file_parse_value_as_comment (GKeyFile    *key_file,
-                                   const gchar *value)
+                                   const gchar *value,
+                                   gboolean     is_final_line)
 {
   GString *string;
   gchar **lines;
   gsize i;
 
@@ -4631,17 +4637,26 @@
 
   lines = g_strsplit (value, "\n", 0);
 
   for (i = 0; lines[i] != NULL; i++)
     {
-        if (lines[i][0] != '#')
-           g_string_append_printf (string, "%s\n", lines[i]);
-        else
-           g_string_append_printf (string, "%s\n", lines[i] + 1);
+      const gchar *line = lines[i];
+
+      if (i != 0)
+        g_string_append_c (string, '\n');
+
+      if (line[0] == '#')
+        line++;
+      g_string_append (string, line);
     }
   g_strfreev (lines);
 
+  /* This function gets called once per line of a comment, but we don't want
+   * to add a trailing newline. */
+  if (!is_final_line)
+    g_string_append_c (string, '\n');
+
   return g_string_free (string, FALSE);
 }
 
 static gchar *
 g_key_file_parse_comment_as_value (GKeyFile      *key_file,
