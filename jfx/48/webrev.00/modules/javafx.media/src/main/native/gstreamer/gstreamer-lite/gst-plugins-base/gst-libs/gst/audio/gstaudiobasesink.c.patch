diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudiobasesink.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudiobasesink.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudiobasesink.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudiobasesink.c
@@ -28,22 +28,22 @@
  *
  * This is the base class for audio sinks. Subclasses need to implement the
  * ::create_ringbuffer vmethod. This base class will then take care of
  * writing samples to the ringbuffer, synchronisation, clipping and flushing.
  */
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
 
 #include <string.h>
 
 #include <gst/audio/audio.h>
 #include "gstaudiobasesink.h"
 
 GST_DEBUG_CATEGORY_STATIC (gst_audio_base_sink_debug);
 #define GST_CAT_DEFAULT gst_audio_base_sink_debug
 
-#define GST_AUDIO_BASE_SINK_GET_PRIVATE(obj)  \
-   (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GST_TYPE_AUDIO_BASE_SINK, GstAudioBaseSinkPrivate))
-
 struct _GstAudioBaseSinkPrivate
 {
   /* upstream latency */
   GstClockTime us_latency;
   /* the clock slaving algorithm in use */
@@ -127,11 +127,11 @@
 
 #define _do_init \
     GST_DEBUG_CATEGORY_INIT (gst_audio_base_sink_debug, "audiobasesink", 0, "audiobasesink element");
 #define gst_audio_base_sink_parent_class parent_class
 G_DEFINE_TYPE_WITH_CODE (GstAudioBaseSink, gst_audio_base_sink,
-    GST_TYPE_BASE_SINK, _do_init);
+    GST_TYPE_BASE_SINK, G_ADD_PRIVATE (GstAudioBaseSink) _do_init);
 
 static void gst_audio_base_sink_dispose (GObject * object);
 
 static void gst_audio_base_sink_set_property (GObject * object, guint prop_id,
     const GValue * value, GParamSpec * pspec);
@@ -182,12 +182,10 @@
 
   gobject_class = (GObjectClass *) klass;
   gstelement_class = (GstElementClass *) klass;
   gstbasesink_class = (GstBaseSinkClass *) klass;
 
-  g_type_class_add_private (klass, sizeof (GstAudioBaseSinkPrivate));
-
   gobject_class->set_property = gst_audio_base_sink_set_property;
   gobject_class->get_property = gst_audio_base_sink_get_property;
   gobject_class->dispose = gst_audio_base_sink_dispose;
 
   g_object_class_install_property (gobject_class, PROP_BUFFER_TIME,
@@ -280,13 +278,14 @@
 }
 
 static void
 gst_audio_base_sink_init (GstAudioBaseSink * audiobasesink)
 {
-  GstBaseSink *basesink;
+  GstBaseSink *basesink = GST_BASE_SINK_CAST (audiobasesink);
 
-  audiobasesink->priv = GST_AUDIO_BASE_SINK_GET_PRIVATE (audiobasesink);
+  audiobasesink->priv =
+      gst_audio_base_sink_get_instance_private (audiobasesink);
 
   audiobasesink->buffer_time = DEFAULT_BUFFER_TIME;
   audiobasesink->latency_time = DEFAULT_LATENCY_TIME;
   audiobasesink->priv->slave_method = DEFAULT_SLAVE_METHOD;
   audiobasesink->priv->drift_tolerance = DEFAULT_DRIFT_TOLERANCE;
@@ -298,11 +297,10 @@
 
   audiobasesink->provided_clock = gst_audio_clock_new ("GstAudioSinkClock",
       (GstAudioClockGetTimeFunc) gst_audio_base_sink_get_time, audiobasesink,
       NULL);
 
-  basesink = GST_BASE_SINK_CAST (audiobasesink);
   basesink->can_activate_push = TRUE;
   basesink->can_activate_pull = DEFAULT_CAN_ACTIVATE_PULL;
 
   gst_base_sink_set_last_sample_enabled (basesink, FALSE);
   if (DEFAULT_PROVIDE_CLOCK)
@@ -1136,14 +1134,14 @@
 
       gst_audio_base_sink_force_start (sink);
       /* Make sure the ringbuffer will start again if interrupted during event_wait() */
       g_atomic_int_set (&sink->eos_rendering, 1);
       clear_force_start_flag = TRUE;
-        break;
+      break;
     default:
       break;
-      }
+  }
 
   ret = GST_BASE_SINK_CLASS (parent_class)->wait_event (bsink, event);
   if (ret != GST_FLOW_OK)
     goto done;
 
@@ -1422,11 +1420,11 @@
     GstClockTime render_start, GstClockTime render_stop,
     GstClockTime * srender_start, GstClockTime * srender_stop)
 {
   GstClockTime cinternal, cexternal, crate_num, crate_denom;
   GstClockTime etime, itime;
-  GstClockTimeDiff skew, mdrift, mdrift2;
+  GstClockTimeDiff skew, drift, mdrift2;
   gint driftsamples;
   gint64 last_align;
 
   /* get calibration parameters to compensate for offsets */
   gst_clock_get_calibration (sink->provided_clock, &cinternal, &cexternal,
@@ -1464,29 +1462,31 @@
       GST_TIME_FORMAT " skew %" GST_STIME_FORMAT " avg %" GST_STIME_FORMAT,
       GST_TIME_ARGS (itime), GST_TIME_ARGS (etime), GST_STIME_ARGS (skew),
       GST_STIME_ARGS (sink->priv->avg_skew));
 
   /* the max drift we allow */
-  mdrift = sink->priv->drift_tolerance * 1000;
-  mdrift2 = mdrift / 2;
+  mdrift2 = (sink->priv->drift_tolerance * 1000) / 2;
 
   /* adjust playout pointer based on skew */
   if (sink->priv->avg_skew > mdrift2) {
-    /* master is running slower, move internal time forward */
+    /* master is running slower, move external time backwards */
     GST_WARNING_OBJECT (sink,
         "correct clock skew %" GST_STIME_FORMAT " > %" GST_STIME_FORMAT,
         GST_STIME_ARGS (sink->priv->avg_skew), GST_STIME_ARGS (mdrift2));
 
-    if (sink->priv->avg_skew > (2 * mdrift)) {
-      cexternal -= sink->priv->avg_skew;
-      sink->priv->avg_skew = 0;
-    } else {
-    cexternal = cexternal > mdrift ? cexternal - mdrift : 0;
-    sink->priv->avg_skew -= mdrift;
-    }
+    /* Move the external time backward by the average skew, but don't ever
+     * go negative.  Moving the average skew by the same distance defines
+     * the new clock skew window center point.  This allows the clock to
+     * drift equally into either direction after the correction. */
+    if (G_LIKELY (cexternal > sink->priv->avg_skew))
+      drift = sink->priv->avg_skew;
+    else
+      drift = cexternal;
+    cexternal -= drift;
+    sink->priv->avg_skew -= drift;
 
-    driftsamples = (sink->ringbuffer->spec.info.rate * mdrift) / GST_SECOND;
+    driftsamples = (sink->ringbuffer->spec.info.rate * drift) / GST_SECOND;
     last_align = sink->priv->last_align;
 
     /* if we were aligning in the wrong direction or we aligned more than what
      * we will correct, resync */
     if (last_align < 0 || last_align > driftsamples)
@@ -1502,19 +1502,19 @@
     /* master is running faster, move external time forwards */
     GST_WARNING_OBJECT (sink,
         "correct clock skew %" GST_STIME_FORMAT " < -%" GST_STIME_FORMAT,
         GST_STIME_ARGS (sink->priv->avg_skew), GST_STIME_ARGS (mdrift2));
 
-    if (sink->priv->avg_skew < (2 * -mdrift)) {
-      cexternal -= sink->priv->avg_skew;
-      sink->priv->avg_skew = 0;
-    } else {
-    cexternal += mdrift;
-    sink->priv->avg_skew += mdrift;
-    }
+    /* Move the external time forward by the average skew, and move the
+     * average skew by the same distance (which equals a reset to 0). This
+     * defines the new clock skew window center point.  This allows the
+     * clock to drift equally into either direction after the correction. */
+    drift = -sink->priv->avg_skew;
+    cexternal += drift;
+    sink->priv->avg_skew = 0;
 
-    driftsamples = (sink->ringbuffer->spec.info.rate * mdrift) / GST_SECOND;
+    driftsamples = (sink->ringbuffer->spec.info.rate * drift) / GST_SECOND;
     last_align = sink->priv->last_align;
 
     /* if we were aligning in the wrong direction or we aligned more than what
      * we will correct, resync */
     if (last_align > 0 || -last_align > driftsamples)
@@ -1875,11 +1875,10 @@
   size = gst_buffer_get_size (buf);
   if (G_UNLIKELY (size % bpf) != 0)
     goto wrong_size;
 
   samples = size / bpf;
-  out_samples = samples;
 
   time = GST_BUFFER_TIMESTAMP (buf);
 
   /* Last ditch attempt to ensure that we only play silence if
    * we are in trickmode no-audio mode (or if a buffer is marked as a GAP)
@@ -2017,24 +2016,24 @@
   }
 
   if (G_UNLIKELY (sync_offset != 0)) {
     /* compensate for ts-offset and delay. We know this will not underflow
      * because we clipped above. */
-  GST_DEBUG_OBJECT (sink,
-      "compensating for sync-offset %" GST_TIME_FORMAT,
-      GST_TIME_ARGS (sync_offset));
-  render_start += sync_offset;
-  render_stop += sync_offset;
+    GST_DEBUG_OBJECT (sink,
+        "compensating for sync-offset %" GST_TIME_FORMAT,
+        GST_TIME_ARGS (sync_offset));
+    render_start += sync_offset;
+    render_stop += sync_offset;
   }
 
   if (base_time != 0) {
     GST_DEBUG_OBJECT (sink, "adding base_time %" GST_TIME_FORMAT,
-      GST_TIME_ARGS (base_time));
+        GST_TIME_ARGS (base_time));
 
-  /* add base time to sync against the clock */
-  render_start += base_time;
-  render_stop += base_time;
+    /* add base time to sync against the clock */
+    render_start += base_time;
+    render_stop += base_time;
   }
 
   if (G_UNLIKELY ((slaved = (clock != sink->provided_clock)))) {
     /* handle clock slaving */
     gst_audio_base_sink_handle_slaving (sink, render_start, render_stop,
@@ -2414,11 +2413,11 @@
 
   switch (transition) {
     case GST_STATE_CHANGE_NULL_TO_READY:{
       GstAudioRingBuffer *rb;
 
-        gst_audio_clock_reset (GST_AUDIO_CLOCK (sink->provided_clock), 0);
+      gst_audio_clock_reset (GST_AUDIO_CLOCK (sink->provided_clock), 0);
       rb = gst_audio_base_sink_create_ringbuffer (sink);
       if (rb == NULL)
         goto create_failed;
 
       GST_OBJECT_LOCK (sink);
