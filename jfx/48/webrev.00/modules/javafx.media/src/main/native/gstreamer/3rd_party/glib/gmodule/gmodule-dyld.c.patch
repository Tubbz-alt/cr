diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gmodule/gmodule-dyld.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gmodule/gmodule-dyld.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gmodule/gmodule-dyld.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gmodule/gmodule-dyld.c
@@ -23,12 +23,12 @@
 
 static gpointer self_module = GINT_TO_POINTER (1);
 
 static gpointer
 _g_module_open (const gchar *file_name,
-        gboolean     bind_lazy,
-        gboolean     bind_local)
+    gboolean     bind_lazy,
+    gboolean     bind_local)
 {
   NSObjectFileImage image;
   NSObjectFileImageReturnCode ret;
   NSModule module;
   unsigned long options;
@@ -36,32 +36,32 @@
 
   ret = NSCreateObjectFileImageFromFile (file_name, &image);
   if (ret != NSObjectFileImageSuccess)
     {
       switch (ret)
-    {
-    case NSObjectFileImageInappropriateFile:
-    case NSObjectFileImageFormat:
-      msg = g_strdup_printf ("%s is not a loadable module", file_name);
-      break;
-
-    case NSObjectFileImageArch:
-      msg = g_strdup_printf ("%s is not built for this architecture",
-                 file_name);
-      break;
-
-    case NSObjectFileImageAccess:
-      if (access (file_name, F_OK) == 0)
-        msg = g_strdup_printf ("%s: permission denied", file_name);
-      else
-        msg = g_strdup_printf ("%s: no such file or directory", file_name);
-      break;
-
-    default:
-      msg = g_strdup_printf ("unknown error for %s", file_name);
-      break;
-    }
+  {
+  case NSObjectFileImageInappropriateFile:
+  case NSObjectFileImageFormat:
+    msg = g_strdup_printf ("%s is not a loadable module", file_name);
+    break;
+
+  case NSObjectFileImageArch:
+    msg = g_strdup_printf ("%s is not built for this architecture",
+         file_name);
+    break;
+
+  case NSObjectFileImageAccess:
+    if (access (file_name, F_OK) == 0)
+      msg = g_strdup_printf ("%s: permission denied", file_name);
+    else
+      msg = g_strdup_printf ("%s: no such file or directory", file_name);
+    break;
+
+  default:
+    msg = g_strdup_printf ("unknown error for %s", file_name);
+    break;
+  }
 
       g_module_set_error (msg);
       g_free (msg);
       return NULL;
     }
@@ -95,32 +95,32 @@
   return &self_module;
 }
 
 static void
 _g_module_close (gpointer handle,
-         gboolean is_unref)
+     gboolean is_unref)
 {
   if (handle == &self_module)
     return;
 
   if (!NSUnLinkModule (handle, 0))
     g_module_set_error ("could not unlink module");
 }
 
 static gpointer
 _g_module_symbol (gpointer     handle,
-          const gchar *symbol_name)
+      const gchar *symbol_name)
 {
   NSSymbol sym;
   char *msg;
 
   if (handle == &self_module)
     {
       if (NSIsSymbolNameDefined (symbol_name))
-    sym = NSLookupAndBindSymbol (symbol_name);
+  sym = NSLookupAndBindSymbol (symbol_name);
       else
-    sym = NULL;
+  sym = NULL;
     }
   else
     sym = NSLookupSymbolInModule (handle, symbol_name);
 
   if (!sym)
@@ -134,18 +134,18 @@
   return NSAddressOfSymbol (sym);
 }
 
 static gchar*
 _g_module_build_path (const gchar *directory,
-              const gchar *module_name)
+          const gchar *module_name)
 {
   if (directory && *directory)
     {
       if (strncmp (module_name, "lib", 3) == 0)
-    return g_strconcat (directory, "/", module_name, NULL);
+  return g_strconcat (directory, "/", module_name, NULL);
       else
-    return g_strconcat (directory, "/lib", module_name, "." G_MODULE_SUFFIX, NULL);
+  return g_strconcat (directory, "/lib", module_name, "." G_MODULE_SUFFIX, NULL);
     }
   else if (strncmp (module_name, "lib", 3) == 0)
     return g_strdup (module_name);
   else
     return g_strconcat ("lib", module_name, "." G_MODULE_SUFFIX, NULL);
