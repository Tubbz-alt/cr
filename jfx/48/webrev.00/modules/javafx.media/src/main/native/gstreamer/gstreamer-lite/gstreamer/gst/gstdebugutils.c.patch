diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstdebugutils.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstdebugutils.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstdebugutils.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstdebugutils.c
@@ -1,9 +1,9 @@
 /* GStreamer
  * Copyright (C) 2007 Stefan Kost <ensonic@users.sf.net>
  *
- * gstdebugutils.c: debugging and analysis utillities
+ * gstdebugutils.c: debugging and analysis utilities
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -19,11 +19,11 @@
  * Boston, MA 02110-1301, USA.
  */
 /* TODO:
  * edge [ constraint=false ];
  *   this creates strange graphs ("minlen=0" is better)
- * try puting src/sink ghostpads for each bin into invisible clusters
+ * try putting src/sink ghostpads for each bin into invisible clusters
  *
  * for more compact nodes, try
  * - changing node-shape from box into record
  * - use labels like : element [ label="{element | <src> src | <sink> sink}"]
  * - point to record-connectors : element1:src -> element2:sink
@@ -181,19 +181,19 @@
           if (s->len == 0)
             g_string_assign (s, "(none)");
 
           tmp = g_string_free (s, FALSE);
         } else {
-        tmp = g_strdup_value_contents (&value);
+          tmp = g_strdup_value_contents (&value);
         }
         value_str = g_strescape (tmp, NULL);
         g_free (tmp);
 
         /* too long, ellipsize */
         if (!(details & GST_DEBUG_GRAPH_SHOW_FULL_PARAMS) &&
             strlen (value_str) > PARAM_MAX_LENGTH)
-          ellipses = "...";
+          ellipses = "â€¦";
         else
           ellipses = "";
 
         if (param_name)
           tmp = param_name;
@@ -585,11 +585,11 @@
         break;
     }
   }
   if (*num_pads) {
     g_string_append_printf (str, "%s}\n\n", spc);
-}
+  }
 }
 
 /*
  * debug_dump_element:
  * @bin: the bin that should be analyzed
@@ -793,10 +793,11 @@
 }
 
 /**
  * gst_debug_bin_to_dot_data:
  * @bin: the top-level pipeline that should be analyzed
+ * @details: type of #GstDebugGraphDetails to use
  *
  * To aid debugging applications one can use this method to obtain the whole
  * network of gstreamer elements that form the pipeline into an dot file.
  * This data can be processed with graphviz to get an image.
  *
@@ -820,10 +821,11 @@
 }
 
 /**
  * gst_debug_bin_to_dot_file:
  * @bin: the top-level pipeline that should be analyzed
+ * @details: type of #GstDebugGraphDetails to use
  * @file_name: (type filename): output base filename (e.g. "myplayer")
  *
  * To aid debugging applications one can use this method to write out the whole
  * network of gstreamer elements that form the pipeline into an dot file.
  * This file can be processed with graphviz to get an image.
@@ -870,10 +872,11 @@
 }
 
 /**
  * gst_debug_bin_to_dot_file_with_ts:
  * @bin: the top-level pipeline that should be analyzed
+ * @details: type of #GstDebugGraphDetails to use
  * @file_name: (type filename): output base filename (e.g. "myplayer")
  *
  * This works like gst_debug_bin_to_dot_file(), but adds the current timestamp
  * to the filename, so that it can be used to take multiple snapshots.
  */
