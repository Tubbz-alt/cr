diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/libs/gst/base/gstbasetransform.h b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/libs/gst/base/gstbasetransform.h
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/libs/gst/base/gstbasetransform.h
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/libs/gst/base/gstbasetransform.h
@@ -24,24 +24,24 @@
 #include <gst/gst.h>
 #include <gst/base/base-prelude.h>
 
 G_BEGIN_DECLS
 
-#define GST_TYPE_BASE_TRANSFORM        (gst_base_transform_get_type())
-#define GST_BASE_TRANSFORM(obj)        (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_BASE_TRANSFORM,GstBaseTransform))
+#define GST_TYPE_BASE_TRANSFORM      (gst_base_transform_get_type())
+#define GST_BASE_TRANSFORM(obj)      (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_BASE_TRANSFORM,GstBaseTransform))
 #define GST_BASE_TRANSFORM_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_BASE_TRANSFORM,GstBaseTransformClass))
 #define GST_BASE_TRANSFORM_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj),GST_TYPE_BASE_TRANSFORM,GstBaseTransformClass))
 #define GST_IS_BASE_TRANSFORM(obj)     (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_BASE_TRANSFORM))
 #define GST_IS_BASE_TRANSFORM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_BASE_TRANSFORM))
-#define GST_BASE_TRANSFORM_CAST(obj)    ((GstBaseTransform *)(obj))
+#define GST_BASE_TRANSFORM_CAST(obj)  ((GstBaseTransform *)(obj))
 
 /**
  * GST_BASE_TRANSFORM_SINK_NAME:
  *
  * The name of the templates for the sink pad.
  */
-#define GST_BASE_TRANSFORM_SINK_NAME    "sink"
+#define GST_BASE_TRANSFORM_SINK_NAME  "sink"
 /**
  * GST_BASE_TRANSFORM_SRC_NAME:
  *
  * The name of the templates for the source pad.
  */
@@ -51,19 +51,19 @@
  * GST_BASE_TRANSFORM_SRC_PAD:
  * @obj: base transform instance
  *
  * Gives the pointer to the source #GstPad object of the element.
  */
-#define GST_BASE_TRANSFORM_SRC_PAD(obj)     (GST_BASE_TRANSFORM_CAST (obj)->srcpad)
+#define GST_BASE_TRANSFORM_SRC_PAD(obj)   (GST_BASE_TRANSFORM_CAST (obj)->srcpad)
 
 /**
  * GST_BASE_TRANSFORM_SINK_PAD:
  * @obj: base transform instance
  *
  * Gives the pointer to the sink #GstPad object of the element.
  */
-#define GST_BASE_TRANSFORM_SINK_PAD(obj)    (GST_BASE_TRANSFORM_CAST (obj)->sinkpad)
+#define GST_BASE_TRANSFORM_SINK_PAD(obj)  (GST_BASE_TRANSFORM_CAST (obj)->sinkpad)
 
 /**
  * GST_BASE_TRANSFORM_FLOW_DROPPED:
  *
  * A #GstFlowReturn that can be returned from transform and transform_ip to
@@ -79,16 +79,16 @@
  * GstBaseTransform:
  *
  * The opaque #GstBaseTransform data structure.
  */
 struct _GstBaseTransform {
-  GstElement     element;
+  GstElement   element;
 
   /*< protected >*/
   /* source and sink pads */
-  GstPad    *sinkpad;
-  GstPad    *srcpad;
+  GstPad  *sinkpad;
+  GstPad  *srcpad;
 
   /* MT-protected (with STREAM_LOCK) */
   gboolean       have_segment;
   GstSegment     segment;
   /* Default submit_input_buffer places the buffer here,
@@ -197,20 +197,20 @@
  *                  The default implementation performs caps (re)negotiation, then
  *                  QoS if needed, and places the input buffer into the @queued_buf
  *                  member variable. If the buffer is dropped due to QoS, it returns
  *                  GST_BASE_TRANSFORM_FLOW_DROPPED. If this input buffer is not
  *                  contiguous with any previous input buffer, then @is_discont
- *                  is set to %TRUE. (Since 1.6)
+ *                  is set to %TRUE. (Since: 1.6)
  * @generate_output: Called after each new input buffer is submitted repeatedly
  *                   until it either generates an error or fails to generate an output
  *                   buffer. The default implementation takes the contents of the
  *                   @queued_buf variable, generates an output buffer if needed
  *                   by calling the class @prepare_output_buffer, and then
  *                   calls either @transform or @transform_ip. Elements that don't
  *                   do 1-to-1 transformations on input to output buffers can either
  *                   return GST_BASE_TRANSFORM_FLOW_DROPPED or simply not generate
- *                   an output buffer until they are ready to do so. (Since 1.6)
+ *                   an output buffer until they are ready to do so. (Since: 1.6)
  *
  * Subclasses can override any of the available virtual methods or not, as
  * needed. At minimum either @transform or @transform_ip need to be overridden.
  * If the element can overwrite the input data with the results (data is of the
  * same type and quantity) it should provide @transform_ip.
@@ -303,31 +303,31 @@
 
 GST_BASE_API
 GType           gst_base_transform_get_type         (void);
 
 GST_BASE_API
-void        gst_base_transform_set_passthrough  (GstBaseTransform *trans,
-                                                 gboolean passthrough);
+void    gst_base_transform_set_passthrough  (GstBaseTransform *trans,
+                                               gboolean passthrough);
 GST_BASE_API
-gboolean    gst_base_transform_is_passthrough   (GstBaseTransform *trans);
+gboolean  gst_base_transform_is_passthrough   (GstBaseTransform *trans);
 
 GST_BASE_API
-void        gst_base_transform_set_in_place     (GstBaseTransform *trans,
-                                                 gboolean in_place);
+void    gst_base_transform_set_in_place     (GstBaseTransform *trans,
+                                               gboolean in_place);
 GST_BASE_API
-gboolean    gst_base_transform_is_in_place      (GstBaseTransform *trans);
+gboolean  gst_base_transform_is_in_place      (GstBaseTransform *trans);
 
 GST_BASE_API
-void        gst_base_transform_update_qos       (GstBaseTransform *trans,
-                             gdouble proportion,
-                             GstClockTimeDiff diff,
-                             GstClockTime timestamp);
+void    gst_base_transform_update_qos       (GstBaseTransform *trans,
+                 gdouble proportion,
+                 GstClockTimeDiff diff,
+                 GstClockTime timestamp);
 GST_BASE_API
-void        gst_base_transform_set_qos_enabled  (GstBaseTransform *trans,
-                                             gboolean enabled);
+void    gst_base_transform_set_qos_enabled  (GstBaseTransform *trans,
+                                         gboolean enabled);
 GST_BASE_API
-gboolean    gst_base_transform_is_qos_enabled   (GstBaseTransform *trans);
+gboolean  gst_base_transform_is_qos_enabled   (GstBaseTransform *trans);
 
 GST_BASE_API
 void            gst_base_transform_set_gap_aware    (GstBaseTransform *trans,
                                                      gboolean gap_aware);
 GST_BASE_API
@@ -339,14 +339,14 @@
 GST_BASE_API
 void            gst_base_transform_get_allocator    (GstBaseTransform *trans,
                                                      GstAllocator **allocator,
                                                      GstAllocationParams *params);
 GST_BASE_API
-void        gst_base_transform_reconfigure_sink (GstBaseTransform *trans);
+void    gst_base_transform_reconfigure_sink (GstBaseTransform *trans);
 
 GST_BASE_API
-void        gst_base_transform_reconfigure_src  (GstBaseTransform *trans);
+void    gst_base_transform_reconfigure_src  (GstBaseTransform *trans);
 
 GST_BASE_API
 gboolean gst_base_transform_update_src_caps (GstBaseTransform *trans,
                                              GstCaps *updated_caps);
 
