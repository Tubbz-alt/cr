diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gasyncqueue.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gasyncqueue.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gasyncqueue.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gasyncqueue.c
@@ -413,17 +413,17 @@
   if (!g_queue_peek_tail_link (&queue->queue) && wait)
     {
       queue->waiting_threads++;
       while (!g_queue_peek_tail_link (&queue->queue))
         {
-      if (end_time == -1)
-        g_cond_wait (&queue->cond, &queue->mutex);
-      else
-        {
-          if (!g_cond_wait_until (&queue->cond, &queue->mutex, end_time))
-        break;
-        }
+    if (end_time == -1)
+      g_cond_wait (&queue->cond, &queue->mutex);
+    else
+      {
+        if (!g_cond_wait_until (&queue->cond, &queue->mutex, end_time))
+    break;
+      }
         }
       queue->waiting_threads--;
     }
 
   retval = g_queue_pop_tail (&queue->queue);
@@ -532,11 +532,11 @@
  * Returns: data from the queue or %NULL, when no data is
  *     received before the timeout.
  */
 gpointer
 g_async_queue_timeout_pop (GAsyncQueue *queue,
-               guint64      timeout)
+         guint64      timeout)
 {
   gint64 end_time = g_get_monotonic_time () + timeout;
   gpointer retval;
 
   g_return_val_if_fail (queue != NULL, NULL);
@@ -563,11 +563,11 @@
  * Returns: data from the queue or %NULL, when no data is
  *     received before the timeout.
  */
 gpointer
 g_async_queue_timeout_pop_unlocked (GAsyncQueue *queue,
-                    guint64      timeout)
+            guint64      timeout)
 {
   gint64 end_time = g_get_monotonic_time () + timeout;
 
   g_return_val_if_fail (queue != NULL, NULL);
 
@@ -582,18 +582,19 @@
  * Pops data from the @queue. If the queue is empty, blocks until
  * @end_time or until data becomes available.
  *
  * If no data is received before @end_time, %NULL is returned.
  *
- * To easily calculate @end_time, a combination of g_get_current_time()
+ * To easily calculate @end_time, a combination of g_get_real_time()
  * and g_time_val_add() can be used.
  *
  * Returns: data from the queue or %NULL, when no data is
  *     received before @end_time.
  *
  * Deprecated: use g_async_queue_timeout_pop().
  */
+G_GNUC_BEGIN_IGNORE_DEPRECATIONS
 gpointer
 g_async_queue_timed_pop (GAsyncQueue *queue,
                          GTimeVal    *end_time)
 {
   gint64 m_end_time;
@@ -613,10 +614,11 @@
   retval = g_async_queue_pop_intern_unlocked (queue, TRUE, m_end_time);
   g_mutex_unlock (&queue->mutex);
 
   return retval;
 }
+G_GNUC_END_IGNORE_DEPRECATIONS
 
 /**
  * g_async_queue_timed_pop_unlocked:
  * @queue: a #GAsyncQueue
  * @end_time: a #GTimeVal, determining the final time
@@ -624,20 +626,21 @@
  * Pops data from the @queue. If the queue is empty, blocks until
  * @end_time or until data becomes available.
  *
  * If no data is received before @end_time, %NULL is returned.
  *
- * To easily calculate @end_time, a combination of g_get_current_time()
+ * To easily calculate @end_time, a combination of g_get_real_time()
  * and g_time_val_add() can be used.
  *
  * This function must be called while holding the @queue's lock.
  *
  * Returns: data from the queue or %NULL, when no data is
  *     received before @end_time.
  *
  * Deprecated: use g_async_queue_timeout_pop_unlocked().
  */
+G_GNUC_BEGIN_IGNORE_DEPRECATIONS
 gpointer
 g_async_queue_timed_pop_unlocked (GAsyncQueue *queue,
                                   GTimeVal    *end_time)
 {
   gint64 m_end_time;
@@ -652,10 +655,11 @@
   else
     m_end_time = -1;
 
   return g_async_queue_pop_intern_unlocked (queue, TRUE, m_end_time);
 }
+G_GNUC_END_IGNORE_DEPRECATIONS
 
 /**
  * g_async_queue_length:
  * @queue: a #GAsyncQueue.
  *
