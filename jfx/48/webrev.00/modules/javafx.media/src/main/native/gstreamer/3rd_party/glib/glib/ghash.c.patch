diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/ghash.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/ghash.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/ghash.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/ghash.c
@@ -29,17 +29,39 @@
 #include "config.h"
 
 #include <string.h>  /* memset */
 
 #include "ghash.h"
-
+#include "gmacros.h"
 #include "glib-private.h"
 #include "gstrfuncs.h"
 #include "gatomic.h"
 #include "gtestutils.h"
 #include "gslice.h"
 #include "grefcount.h"
+#include "gvalgrind.h"
+
+/* The following #pragma is here so we can do this...
+ *
+ *   #ifndef USE_SMALL_ARRAYS
+ *     is_big = TRUE;
+ *   #endif
+ *     return is_big ? *(((gpointer *) a) + index) : GUINT_TO_POINTER (*(((guint *) a) + index));
+ *
+ * ...instead of this...
+ *
+ *   #ifndef USE_SMALL_ARRAYS
+ *     return *(((gpointer *) a) + index);
+ *   #else
+ *     return is_big ? *(((gpointer *) a) + index) : GUINT_TO_POINTER (*(((guint *) a) + index));
+ *   #endif
+ *
+ * ...and still compile successfully when -Werror=duplicated-branches is passed. */
+
+#if defined(__GNUC__) && __GNUC__ > 6
+#pragma GCC diagnostic ignored "-Wduplicated-branches"
+#endif
 
 /**
  * SECTION:hash_tables
  * @title: Hash Tables
  * @short_description: associations between keys and values so that
@@ -65,20 +87,20 @@
  * To create a #GHashTable, use g_hash_table_new().
  *
  * To insert a key and value into a #GHashTable, use
  * g_hash_table_insert().
  *
- * To lookup a value corresponding to a given key, use
+ * To look up a value corresponding to a given key, use
  * g_hash_table_lookup() and g_hash_table_lookup_extended().
  *
  * g_hash_table_lookup_extended() can also be used to simply
  * check if a key is present in the hash table.
  *
  * To remove a key and value, use g_hash_table_remove().
  *
  * To call a function for each key and value pair use
- * g_hash_table_foreach() or use a iterator to iterate over the
+ * g_hash_table_foreach() or use an iterator to iterate over the
  * key/value pairs in the hash table, see #GHashTableIter.
  *
  * To destroy a #GHashTable use g_hash_table_destroy().
  *
  * A common use-case for hash tables is to store information about a
@@ -211,21 +233,36 @@
 #define TOMBSTONE_HASH_VALUE 1
 #define HASH_IS_UNUSED(h_) ((h_) == UNUSED_HASH_VALUE)
 #define HASH_IS_TOMBSTONE(h_) ((h_) == TOMBSTONE_HASH_VALUE)
 #define HASH_IS_REAL(h_) ((h_) >= 2)
 
+/* If int is smaller than void * on our arch, we start out with
+ * int-sized keys and values and resize to pointer-sized entries as
+ * needed. This saves a good amount of memory when the HT is being
+ * used with e.g. GUINT_TO_POINTER(). */
+
+#define BIG_ENTRY_SIZE (SIZEOF_VOID_P)
+#define SMALL_ENTRY_SIZE (SIZEOF_INT)
+
+#if SMALL_ENTRY_SIZE < BIG_ENTRY_SIZE
+# define USE_SMALL_ARRAYS
+#endif
+
 struct _GHashTable
 {
-  gint             size;
+  gsize            size;
   gint             mod;
   guint            mask;
   gint             nnodes;
   gint             noccupied;  /* nnodes + tombstones */
 
-  gpointer        *keys;
+  guint            have_big_keys : 1;
+  guint            have_big_values : 1;
+
+  gpointer         keys;
   guint           *hashes;
-  gpointer        *values;
+  gpointer         values;
 
   GHashFunc        hash_func;
   GEqualFunc       key_equal_func;
   gatomicrefcount  ref_count;
 #ifndef G_DISABLE_ASSERT
@@ -243,17 +280,17 @@
 typedef struct
 {
   GHashTable  *hash_table;
   gpointer     dummy1;
   gpointer     dummy2;
-  int          position;
+  gint         position;
   gboolean     dummy3;
-  int          version;
+  gint         version;
 } RealIter;
 
 G_STATIC_ASSERT (sizeof (GHashTableIter) == sizeof (RealIter));
-G_STATIC_ASSERT (_g_alignof (GHashTableIter) >= _g_alignof (RealIter));
+G_STATIC_ASSERT (G_ALIGNOF (GHashTableIter) >= G_ALIGNOF (RealIter));
 
 /* Each table size has an associated prime modulo (the first prime
  * lower than the table size) used to find the initial bucket. Probing
  * then works modulo 2^n. The prime modulo is necessary to get a
  * good distribution with poor hash functions.
@@ -295,23 +332,19 @@
 };
 
 static void
 g_hash_table_set_shift (GHashTable *hash_table, gint shift)
 {
-  gint i;
-  guint mask = 0;
-
   hash_table->size = 1 << shift;
   hash_table->mod  = prime_mod [shift];
 
-  for (i = 0; i < shift; i++)
-    {
-      mask <<= 1;
-      mask |= 1;
-    }
+  /* hash_table->size is always a power of two, so we can calculate the mask
+   * by simply subtracting 1 from it. The leading assertion ensures that
+   * we're really dealing with a power of two. */
 
-  hash_table->mask = mask;
+  g_assert ((hash_table->size & (hash_table->size - 1)) == 0);
+  hash_table->mask = hash_table->size - 1;
 }
 
 static gint
 g_hash_table_find_closest_shift (gint n)
 {
@@ -332,14 +365,75 @@
   shift = MAX (shift, HASH_TABLE_MIN_SHIFT);
 
   g_hash_table_set_shift (hash_table, shift);
 }
 
+static inline gpointer
+g_hash_table_realloc_key_or_value_array (gpointer a, guint size, G_GNUC_UNUSED gboolean is_big)
+{
+#ifdef USE_SMALL_ARRAYS
+  return g_realloc (a, size * (is_big ? BIG_ENTRY_SIZE : SMALL_ENTRY_SIZE));
+#else
+  return g_renew (gpointer, a, size);
+#endif
+}
+
+static inline gpointer
+g_hash_table_fetch_key_or_value (gpointer a, guint index, gboolean is_big)
+{
+#ifndef USE_SMALL_ARRAYS
+  is_big = TRUE;
+#endif
+  return is_big ? *(((gpointer *) a) + index) : GUINT_TO_POINTER (*(((guint *) a) + index));
+}
+
+static inline void
+g_hash_table_assign_key_or_value (gpointer a, guint index, gboolean is_big, gpointer v)
+{
+#ifndef USE_SMALL_ARRAYS
+  is_big = TRUE;
+#endif
+  if (is_big)
+    *(((gpointer *) a) + index) = v;
+  else
+    *(((guint *) a) + index) = GPOINTER_TO_UINT (v);
+}
+
+static inline gpointer
+g_hash_table_evict_key_or_value (gpointer a, guint index, gboolean is_big, gpointer v)
+{
+#ifndef USE_SMALL_ARRAYS
+  is_big = TRUE;
+#endif
+  if (is_big)
+    {
+      gpointer r = *(((gpointer *) a) + index);
+      *(((gpointer *) a) + index) = v;
+      return r;
+    }
+  else
+    {
+      gpointer r = GUINT_TO_POINTER (*(((guint *) a) + index));
+      *(((guint *) a) + index) = GPOINTER_TO_UINT (v);
+      return r;
+    }
+}
+
+static inline guint
+g_hash_table_hash_to_index (GHashTable *hash_table, guint hash)
+{
+  /* Multiply the hash by a small prime before applying the modulo. This
+   * prevents the table from becoming densely packed, even with a poor hash
+   * function. A densely packed table would have poor performance on
+   * workloads with many failed lookups or a high degree of churn. */
+  return (hash * 11) % hash_table->mod;
+}
+
 /*
  * g_hash_table_lookup_node:
  * @hash_table: our #GHashTable
- * @key: the key to lookup against
+ * @key: the key to look up against
  * @hash_return: key hash return location
  *
  * Performs a lookup in the hash table, preserving extra information
  * usually needed for insertion.
  *
@@ -380,22 +474,22 @@
   if (G_UNLIKELY (!HASH_IS_REAL (hash_value)))
     hash_value = 2;
 
   *hash_return = hash_value;
 
-  node_index = hash_value % hash_table->mod;
+  node_index = g_hash_table_hash_to_index (hash_table, hash_value);
   node_hash = hash_table->hashes[node_index];
 
   while (!HASH_IS_UNUSED (node_hash))
     {
       /* We first check if our full hash values
        * are equal so we can avoid calling the full-blown
        * key equality function in most cases.
        */
       if (node_hash == hash_value)
         {
-          gpointer node_key = hash_table->keys[node_index];
+          gpointer node_key = g_hash_table_fetch_key_or_value (hash_table->keys, node_index, hash_table->have_big_keys);
 
           if (hash_table->key_equal_func)
             {
               if (hash_table->key_equal_func (node_key, key))
                 return node_index;
@@ -441,19 +535,19 @@
                           gboolean      notify)
 {
   gpointer key;
   gpointer value;
 
-  key = hash_table->keys[i];
-  value = hash_table->values[i];
+  key = g_hash_table_fetch_key_or_value (hash_table->keys, i, hash_table->have_big_keys);
+  value = g_hash_table_fetch_key_or_value (hash_table->values, i, hash_table->have_big_values);
 
   /* Erect tombstone */
   hash_table->hashes[i] = TOMBSTONE_HASH_VALUE;
 
   /* Be GC friendly */
-  hash_table->keys[i] = NULL;
-  hash_table->values[i] = NULL;
+  g_hash_table_assign_key_or_value (hash_table->keys, i, hash_table->have_big_keys, NULL);
+  g_hash_table_assign_key_or_value (hash_table->values, i, hash_table->have_big_values, NULL);
 
   hash_table->nnodes--;
 
   if (notify && hash_table->key_destroy_func)
     hash_table->key_destroy_func (key);
@@ -461,20 +555,63 @@
   if (notify && hash_table->value_destroy_func)
     hash_table->value_destroy_func (value);
 
 }
 
+/*
+ * g_hash_table_setup_storage:
+ * @hash_table: our #GHashTable
+ *
+ * Initialise the hash table size, mask, mod, and arrays.
+ */
+static void
+g_hash_table_setup_storage (GHashTable *hash_table)
+{
+  gboolean small;
+
+  /* We want to use small arrays only if:
+   *   - we are running on a system where that makes sense (64 bit); and
+   *   - we are not running under valgrind.
+   */
+  small = FALSE;
+
+#ifdef USE_SMALL_ARRAYS
+  small = TRUE;
+
+# ifdef ENABLE_VALGRIND
+  if (RUNNING_ON_VALGRIND)
+    small = FALSE;
+# endif
+#endif
+
+  g_hash_table_set_shift (hash_table, HASH_TABLE_MIN_SHIFT);
+
+  hash_table->have_big_keys = !small;
+  hash_table->have_big_values = !small;
+
+  hash_table->keys   = g_hash_table_realloc_key_or_value_array (NULL, hash_table->size, hash_table->have_big_keys);
+  hash_table->values = hash_table->keys;
+  hash_table->hashes = g_new0 (guint, hash_table->size);
+}
+
 /*
  * g_hash_table_remove_all_nodes:
  * @hash_table: our #GHashTable
  * @notify: %TRUE if the destroy notify handlers are to be called
  *
- * Removes all nodes from the table.  Since this may be a precursor to
- * freeing the table entirely, no resize is performed.
+ * Removes all nodes from the table.
  *
  * If @notify is %TRUE then the destroy notify functions are called
  * for the key and value of the hash node.
+ *
+ * Since this may be a precursor to freeing the table entirely, we'd
+ * ideally perform no resize, and we can indeed avoid that in some
+ * cases.  However: in the case that we'll be making callbacks to user
+ * code (via destroy notifies) we need to consider that the user code
+ * might call back into the table again.  In this case, we setup a new
+ * set of arrays so that any callers will see an empty (but valid)
+ * table.
  */
 static void
 g_hash_table_remove_all_nodes (GHashTable *hash_table,
                                gboolean    notify,
                                gboolean    destruction)
@@ -484,84 +621,222 @@
   gpointer value;
   gint old_size;
   gpointer *old_keys;
   gpointer *old_values;
   guint    *old_hashes;
+  gboolean  old_have_big_keys;
+  gboolean  old_have_big_values;
 
   /* If the hash table is already empty, there is nothing to be done. */
   if (hash_table->nnodes == 0)
     return;
 
   hash_table->nnodes = 0;
   hash_table->noccupied = 0;
 
+  /* Easy case: no callbacks, so we just zero out the arrays */
   if (!notify ||
       (hash_table->key_destroy_func == NULL &&
        hash_table->value_destroy_func == NULL))
     {
       if (!destruction)
         {
-      memset (hash_table->hashes, 0, hash_table->size * sizeof (guint));
-      memset (hash_table->keys, 0, hash_table->size * sizeof (gpointer));
-      memset (hash_table->values, 0, hash_table->size * sizeof (gpointer));
+          memset (hash_table->hashes, 0, hash_table->size * sizeof (guint));
+
+#ifdef USE_SMALL_ARRAYS
+          memset (hash_table->keys, 0, hash_table->size * (hash_table->have_big_keys ? BIG_ENTRY_SIZE : SMALL_ENTRY_SIZE));
+          memset (hash_table->values, 0, hash_table->size * (hash_table->have_big_values ? BIG_ENTRY_SIZE : SMALL_ENTRY_SIZE));
+#else
+          memset (hash_table->keys, 0, hash_table->size * sizeof (gpointer));
+          memset (hash_table->values, 0, hash_table->size * sizeof (gpointer));
+#endif
         }
 
       return;
     }
 
-  /* Keep the old storage space around to iterate over it. */
+  /* Hard case: we need to do user callbacks.  There are two
+   * possibilities here:
+   *
+   *   1) there are no outstanding references on the table and therefore
+   *   nobody should be calling into it again (destroying == true)
+   *
+   *   2) there are outstanding references, and there may be future
+   *   calls into the table, either after we return, or from the destroy
+   *   notifies that we're about to do (destroying == false)
+   *
+   * We handle both cases by taking the current state of the table into
+   * local variables and replacing it with something else: in the "no
+   * outstanding references" cases we replace it with a bunch of
+   * null/zero values so that any access to the table will fail.  In the
+   * "may receive future calls" case, we reinitialise the struct to
+   * appear like a newly-created empty table.
+   *
+   * In both cases, we take over the references for the current state,
+   * freeing them below.
+   */
   old_size = hash_table->size;
-  old_keys   = hash_table->keys;
-  old_values = hash_table->values;
-  old_hashes = hash_table->hashes;
-
-  /* Now create a new storage space; If the table is destroyed we can use the
-   * shortcut of not creating a new storage. This saves the allocation at the
-   * cost of not allowing any recursive access.
-   * However, the application doesn't own any reference anymore, so access
-   * is not allowed. If accesses are done, then either an assert or crash
-   * *will* happen. */
-  g_hash_table_set_shift (hash_table, HASH_TABLE_MIN_SHIFT);
+  old_have_big_keys = hash_table->have_big_keys;
+  old_have_big_values = hash_table->have_big_values;
+  old_keys   = g_steal_pointer (&hash_table->keys);
+  old_values = g_steal_pointer (&hash_table->values);
+  old_hashes = g_steal_pointer (&hash_table->hashes);
+
   if (!destruction)
-    {
-      hash_table->keys   = g_new0 (gpointer, hash_table->size);
-      hash_table->values = hash_table->keys;
-      hash_table->hashes = g_new0 (guint, hash_table->size);
-    }
+    /* Any accesses will see an empty table */
+    g_hash_table_setup_storage (hash_table);
   else
-        {
-      hash_table->keys   = NULL;
-      hash_table->values = NULL;
-      hash_table->hashes = NULL;
-    }
+    /* Will cause a quick crash on any attempted access */
+    hash_table->size = hash_table->mod = hash_table->mask = 0;
 
+  /* Now do the actual destroy notifies */
   for (i = 0; i < old_size; i++)
     {
       if (HASH_IS_REAL (old_hashes[i]))
         {
-          key = old_keys[i];
-          value = old_values[i];
+          key = g_hash_table_fetch_key_or_value (old_keys, i, old_have_big_keys);
+          value = g_hash_table_fetch_key_or_value (old_values, i, old_have_big_values);
 
           old_hashes[i] = UNUSED_HASH_VALUE;
-          old_keys[i] = NULL;
-          old_values[i] = NULL;
+
+          g_hash_table_assign_key_or_value (old_keys, i, old_have_big_keys, NULL);
+          g_hash_table_assign_key_or_value (old_values, i, old_have_big_values, NULL);
 
           if (hash_table->key_destroy_func != NULL)
             hash_table->key_destroy_func (key);
 
           if (hash_table->value_destroy_func != NULL)
             hash_table->value_destroy_func (value);
         }
-        }
+    }
 
   /* Destroy old storage space. */
   if (old_keys != old_values)
     g_free (old_values);
 
   g_free (old_keys);
   g_free (old_hashes);
-    }
+}
+
+static void
+realloc_arrays (GHashTable *hash_table, gboolean is_a_set)
+{
+  hash_table->hashes = g_renew (guint, hash_table->hashes, hash_table->size);
+  hash_table->keys = g_hash_table_realloc_key_or_value_array (hash_table->keys, hash_table->size, hash_table->have_big_keys);
+
+  if (is_a_set)
+    hash_table->values = hash_table->keys;
+  else
+    hash_table->values = g_hash_table_realloc_key_or_value_array (hash_table->values, hash_table->size, hash_table->have_big_values);
+}
+
+/* When resizing the table in place, we use a temporary bit array to keep
+ * track of which entries have been assigned a proper location in the new
+ * table layout.
+ *
+ * Each bit corresponds to a bucket. A bit is set if an entry was assigned
+ * its corresponding location during the resize and thus should not be
+ * evicted. The array starts out cleared to zero. */
+
+static inline gboolean
+get_status_bit (const guint32 *bitmap, guint index)
+{
+  return (bitmap[index / 32] >> (index % 32)) & 1;
+}
+
+static inline void
+set_status_bit (guint32 *bitmap, guint index)
+{
+  bitmap[index / 32] |= 1U << (index % 32);
+}
+
+/* By calling dedicated resize functions for sets and maps, we avoid 2x
+ * test-and-branch per key in the inner loop. This yields a small
+ * performance improvement at the cost of a bit of macro gunk. */
+
+#define DEFINE_RESIZE_FUNC(fname) \
+static void fname (GHashTable *hash_table, guint old_size, guint32 *reallocated_buckets_bitmap) \
+{                                                                       \
+  guint i;                                                              \
+                                                                        \
+  for (i = 0; i < old_size; i++)                                        \
+    {                                                                   \
+      guint node_hash = hash_table->hashes[i];                          \
+      gpointer key, value G_GNUC_UNUSED;                                \
+                                                                        \
+      if (!HASH_IS_REAL (node_hash))                                    \
+        {                                                               \
+          /* Clear tombstones */                                        \
+          hash_table->hashes[i] = UNUSED_HASH_VALUE;                    \
+          continue;                                                     \
+        }                                                               \
+                                                                        \
+      /* Skip entries relocated through eviction */                     \
+      if (get_status_bit (reallocated_buckets_bitmap, i))               \
+        continue;                                                       \
+                                                                        \
+      hash_table->hashes[i] = UNUSED_HASH_VALUE;                        \
+      EVICT_KEYVAL (hash_table, i, NULL, NULL, key, value);             \
+                                                                        \
+      for (;;)                                                          \
+        {                                                               \
+          guint hash_val;                                               \
+          guint replaced_hash;                                          \
+          guint step = 0;                                               \
+                                                                        \
+          hash_val = g_hash_table_hash_to_index (hash_table, node_hash); \
+                                                                        \
+          while (get_status_bit (reallocated_buckets_bitmap, hash_val)) \
+            {                                                           \
+              step++;                                                   \
+              hash_val += step;                                         \
+              hash_val &= hash_table->mask;                             \
+            }                                                           \
+                                                                        \
+          set_status_bit (reallocated_buckets_bitmap, hash_val);        \
+                                                                        \
+          replaced_hash = hash_table->hashes[hash_val];                 \
+          hash_table->hashes[hash_val] = node_hash;                     \
+          if (!HASH_IS_REAL (replaced_hash))                            \
+            {                                                           \
+              ASSIGN_KEYVAL (hash_table, hash_val, key, value);         \
+              break;                                                    \
+            }                                                           \
+                                                                        \
+          node_hash = replaced_hash;                                    \
+          EVICT_KEYVAL (hash_table, hash_val, key, value, key, value);  \
+        }                                                               \
+    }                                                                   \
+}
+
+#define ASSIGN_KEYVAL(ht, index, key, value) G_STMT_START{ \
+    g_hash_table_assign_key_or_value ((ht)->keys, (index), (ht)->have_big_keys, (key)); \
+    g_hash_table_assign_key_or_value ((ht)->values, (index), (ht)->have_big_values, (value)); \
+  }G_STMT_END
+
+#define EVICT_KEYVAL(ht, index, key, value, outkey, outvalue) G_STMT_START{ \
+    (outkey) = g_hash_table_evict_key_or_value ((ht)->keys, (index), (ht)->have_big_keys, (key)); \
+    (outvalue) = g_hash_table_evict_key_or_value ((ht)->values, (index), (ht)->have_big_values, (value)); \
+  }G_STMT_END
+
+DEFINE_RESIZE_FUNC (resize_map)
+
+#undef ASSIGN_KEYVAL
+#undef EVICT_KEYVAL
+
+#define ASSIGN_KEYVAL(ht, index, key, value) G_STMT_START{ \
+    g_hash_table_assign_key_or_value ((ht)->keys, (index), (ht)->have_big_keys, (key)); \
+  }G_STMT_END
+
+#define EVICT_KEYVAL(ht, index, key, value, outkey, outvalue) G_STMT_START{ \
+    (outkey) = g_hash_table_evict_key_or_value ((ht)->keys, (index), (ht)->have_big_keys, (key)); \
+  }G_STMT_END
+
+DEFINE_RESIZE_FUNC (resize_set)
+
+#undef ASSIGN_KEYVAL
+#undef EVICT_KEYVAL
 
 /*
  * g_hash_table_resize:
  * @hash_table: our #GHashTable
  *
@@ -575,58 +850,51 @@
  * the probe sequences.
  */
 static void
 g_hash_table_resize (GHashTable *hash_table)
 {
-  gpointer *new_keys;
-  gpointer *new_values;
-  guint *new_hashes;
-  gint old_size;
-  gint i;
+  guint32 *reallocated_buckets_bitmap;
+  gsize old_size;
+  gboolean is_a_set;
 
   old_size = hash_table->size;
-  g_hash_table_set_shift_from_size (hash_table, hash_table->nnodes * 2);
-
-  new_keys = g_new0 (gpointer, hash_table->size);
-  if (hash_table->keys == hash_table->values)
-    new_values = new_keys;
-  else
-    new_values = g_new0 (gpointer, hash_table->size);
-  new_hashes = g_new0 (guint, hash_table->size);
-
-  for (i = 0; i < old_size; i++)
-    {
-      guint node_hash = hash_table->hashes[i];
-      guint hash_val;
-      guint step = 0;
+  is_a_set = hash_table->keys == hash_table->values;
 
-      if (!HASH_IS_REAL (node_hash))
-        continue;
+  /* The outer checks in g_hash_table_maybe_resize() will only consider
+   * cleanup/resize when the load factor goes below .25 (1/4, ignoring
+   * tombstones) or above .9375 (15/16, including tombstones).
+   *
+   * Once this happens, tombstones will always be cleaned out. If our
+   * load sans tombstones is greater than .75 (1/1.333, see below), we'll
+   * take this opportunity to grow the table too.
+   *
+   * Immediately after growing, the load factor will be in the range
+   * .375 .. .469. After shrinking, it will be exactly .5. */
 
-      hash_val = node_hash % hash_table->mod;
+  g_hash_table_set_shift_from_size (hash_table, hash_table->nnodes * 1.333);
 
-      while (!HASH_IS_UNUSED (new_hashes[hash_val]))
-        {
-          step++;
-          hash_val += step;
-          hash_val &= hash_table->mask;
-        }
+  if (hash_table->size > old_size)
+    {
+      realloc_arrays (hash_table, is_a_set);
+      memset (&hash_table->hashes[old_size], 0, (hash_table->size - old_size) * sizeof (guint));
 
-      new_hashes[hash_val] = hash_table->hashes[i];
-      new_keys[hash_val] = hash_table->keys[i];
-      new_values[hash_val] = hash_table->values[i];
+      reallocated_buckets_bitmap = g_new0 (guint32, (hash_table->size + 31) / 32);
+    }
+  else
+    {
+      reallocated_buckets_bitmap = g_new0 (guint32, (old_size + 31) / 32);
     }
 
-  if (hash_table->keys != hash_table->values)
-    g_free (hash_table->values);
+  if (is_a_set)
+    resize_set (hash_table, old_size, reallocated_buckets_bitmap);
+  else
+    resize_map (hash_table, old_size, reallocated_buckets_bitmap);
 
-  g_free (hash_table->keys);
-  g_free (hash_table->hashes);
+  g_free (reallocated_buckets_bitmap);
 
-  hash_table->keys = new_keys;
-  hash_table->values = new_values;
-  hash_table->hashes = new_hashes;
+  if (hash_table->size < old_size)
+    realloc_arrays (hash_table, is_a_set);
 
   hash_table->noccupied = hash_table->nnodes;
 }
 
 /*
@@ -647,10 +915,98 @@
   if ((size > hash_table->nnodes * 4 && size > 1 << HASH_TABLE_MIN_SHIFT) ||
       (size <= noccupied + (noccupied / 16)))
     g_hash_table_resize (hash_table);
 }
 
+#ifdef USE_SMALL_ARRAYS
+
+static inline gboolean
+entry_is_big (gpointer v)
+{
+  return (((guintptr) v) >> ((BIG_ENTRY_SIZE - SMALL_ENTRY_SIZE) * 8)) != 0;
+}
+
+static inline gboolean
+g_hash_table_maybe_make_big_keys_or_values (gpointer *a_p, gpointer v, gint ht_size)
+{
+  if (entry_is_big (v))
+    {
+      guint *a = (guint *) *a_p;
+      gpointer *a_new;
+      gint i;
+
+      a_new = g_new (gpointer, ht_size);
+
+      for (i = 0; i < ht_size; i++)
+        {
+          a_new[i] = GUINT_TO_POINTER (a[i]);
+        }
+
+      g_free (a);
+      *a_p = a_new;
+      return TRUE;
+    }
+
+  return FALSE;
+}
+
+#endif
+
+static inline void
+g_hash_table_ensure_keyval_fits (GHashTable *hash_table, gpointer key, gpointer value)
+{
+  gboolean is_a_set = (hash_table->keys == hash_table->values);
+
+#ifdef USE_SMALL_ARRAYS
+
+  /* Convert from set to map? */
+  if (is_a_set)
+    {
+      if (hash_table->have_big_keys)
+        {
+          if (key != value)
+            hash_table->values = g_memdup (hash_table->keys, sizeof (gpointer) * hash_table->size);
+          /* Keys and values are both big now, so no need for further checks */
+          return;
+        }
+      else
+        {
+          if (key != value)
+            {
+              hash_table->values = g_memdup (hash_table->keys, sizeof (guint) * hash_table->size);
+              is_a_set = FALSE;
+            }
+        }
+    }
+
+  /* Make keys big? */
+  if (!hash_table->have_big_keys)
+    {
+      hash_table->have_big_keys = g_hash_table_maybe_make_big_keys_or_values (&hash_table->keys, key, hash_table->size);
+
+      if (is_a_set)
+        {
+          hash_table->values = hash_table->keys;
+          hash_table->have_big_values = hash_table->have_big_keys;
+        }
+    }
+
+  /* Make values big? */
+  if (!is_a_set && !hash_table->have_big_values)
+    {
+      hash_table->have_big_values = g_hash_table_maybe_make_big_keys_or_values (&hash_table->values, value, hash_table->size);
+    }
+
+#else
+
+  /* Just split if necessary */
+  if (is_a_set && key != value)
+    hash_table->values = g_memdup (hash_table->keys, sizeof (gpointer) * hash_table->size);
+
+#endif
+}
+
 /**
  * g_hash_table_new:
  * @hash_func: a function to create a hash value from a key
  * @key_equal_func: a function to check two keys for equality
  *
@@ -718,24 +1074,22 @@
 #ifdef GSTREAMER_LITE
   if (hash_table == NULL) {
     return NULL;
   }
 #endif // GSTREAMER_LITE
-  g_hash_table_set_shift (hash_table, HASH_TABLE_MIN_SHIFT);
   g_atomic_ref_count_init (&hash_table->ref_count);
   hash_table->nnodes             = 0;
   hash_table->noccupied          = 0;
   hash_table->hash_func          = hash_func ? hash_func : g_direct_hash;
   hash_table->key_equal_func     = key_equal_func;
 #ifndef G_DISABLE_ASSERT
   hash_table->version            = 0;
 #endif
   hash_table->key_destroy_func   = key_destroy_func;
   hash_table->value_destroy_func = value_destroy_func;
-  hash_table->keys               = g_new0 (gpointer, hash_table->size);
-  hash_table->values             = hash_table->keys;
-  hash_table->hashes             = g_new0 (guint, hash_table->size);
+
+  g_hash_table_setup_storage (hash_table);
 
   return hash_table;
 }
 
 /**
@@ -799,29 +1153,29 @@
 
   g_return_val_if_fail (iter != NULL, FALSE);
 #ifndef G_DISABLE_ASSERT
   g_return_val_if_fail (ri->version == ri->hash_table->version, FALSE);
 #endif
-  g_return_val_if_fail (ri->position < ri->hash_table->size, FALSE);
+  g_return_val_if_fail (ri->position < (gssize) ri->hash_table->size, FALSE);
 
   position = ri->position;
 
   do
     {
       position++;
-      if (position >= ri->hash_table->size)
+      if (position >= (gssize) ri->hash_table->size)
         {
           ri->position = position;
           return FALSE;
         }
     }
   while (!HASH_IS_REAL (ri->hash_table->hashes[position]));
 
   if (key != NULL)
-    *key = ri->hash_table->keys[position];
+    *key = g_hash_table_fetch_key_or_value (ri->hash_table->keys, position, ri->hash_table->have_big_keys);
   if (value != NULL)
-    *value = ri->hash_table->values[position];
+    *value = g_hash_table_fetch_key_or_value (ri->hash_table->values, position, ri->hash_table->have_big_values);
 
   ri->position = position;
   return TRUE;
 }
 
@@ -849,11 +1203,11 @@
   g_return_if_fail (ri != NULL);
 #ifndef G_DISABLE_ASSERT
   g_return_if_fail (ri->version == ri->hash_table->version);
 #endif
   g_return_if_fail (ri->position >= 0);
-  g_return_if_fail (ri->position < ri->hash_table->size);
+  g_return_if_fail ((gsize) ri->position < ri->hash_table->size);
 
   g_hash_table_remove_node (ri->hash_table, ri->position, notify);
 
 #ifndef G_DISABLE_ASSERT
   ri->version++;
@@ -920,10 +1274,11 @@
                           gboolean    reusing_key)
 {
   gboolean already_exists;
   guint old_hash;
   gpointer key_to_free = NULL;
+  gpointer key_to_keep = NULL;
   gpointer value_to_free = NULL;
 
   old_hash = hash_table->hashes[node_index];
   already_exists = HASH_IS_REAL (old_hash);
 
@@ -949,35 +1304,35 @@
     {
       /* Note: we must record the old value before writing the new key
        * because we might change the value in the event that the two
        * arrays are shared.
        */
-      value_to_free = hash_table->values[node_index];
+      value_to_free = g_hash_table_fetch_key_or_value (hash_table->values, node_index, hash_table->have_big_values);
 
       if (keep_new_key)
         {
-          key_to_free = hash_table->keys[node_index];
-          hash_table->keys[node_index] = new_key;
+          key_to_free = g_hash_table_fetch_key_or_value (hash_table->keys, node_index, hash_table->have_big_keys);
+          key_to_keep = new_key;
         }
       else
-        key_to_free = new_key;
+        {
+          key_to_free = new_key;
+          key_to_keep = g_hash_table_fetch_key_or_value (hash_table->keys, node_index, hash_table->have_big_keys);
+        }
     }
   else
     {
       hash_table->hashes[node_index] = key_hash;
-      hash_table->keys[node_index] = new_key;
+      key_to_keep = new_key;
     }
 
-  /* Step two: check if the value that we are about to write to the
-   * table is the same as the key in the same position.  If it's not,
-   * split the table.
-   */
-  if (G_UNLIKELY (hash_table->keys == hash_table->values && hash_table->keys[node_index] != new_value))
-    hash_table->values = g_memdup (hash_table->keys, sizeof (gpointer) * hash_table->size);
+  /* Resize key/value arrays and split table as necessary */
+  g_hash_table_ensure_keyval_fits (hash_table, key_to_keep, new_value);
+  g_hash_table_assign_key_or_value (hash_table->keys, node_index, hash_table->have_big_keys, key_to_keep);
 
   /* Step 3: Actually do the write */
-  hash_table->values[node_index] = new_value;
+  g_hash_table_assign_key_or_value (hash_table->values, node_index, hash_table->have_big_values, new_value);
 
   /* Now, the bookkeeping... */
   if (!already_exists)
     {
       hash_table->nnodes++;
@@ -1032,14 +1387,15 @@
   g_return_if_fail (ri != NULL);
 #ifndef G_DISABLE_ASSERT
   g_return_if_fail (ri->version == ri->hash_table->version);
 #endif
   g_return_if_fail (ri->position >= 0);
-  g_return_if_fail (ri->position < ri->hash_table->size);
+  g_return_if_fail ((gsize) ri->position < ri->hash_table->size);
 
   node_hash = ri->hash_table->hashes[ri->position];
-  key = ri->hash_table->keys[ri->position];
+
+  key = g_hash_table_fetch_key_or_value (ri->hash_table->keys, ri->position, ri->hash_table->have_big_keys);
 
   g_hash_table_insert_node (ri->hash_table, ri->position, node_hash, key, value, TRUE, TRUE);
 
 #ifndef G_DISABLE_ASSERT
   ri->version++;
@@ -1156,11 +1512,11 @@
   g_return_val_if_fail (hash_table != NULL, NULL);
 
   node_index = g_hash_table_lookup_node (hash_table, key, &node_hash);
 
   return HASH_IS_REAL (hash_table->hashes[node_index])
-    ? hash_table->values[node_index]
+    ? g_hash_table_fetch_key_or_value (hash_table->values, node_index, hash_table->have_big_values)
     : NULL;
 }
 
 /**
  * g_hash_table_lookup_extended:
@@ -1193,17 +1549,24 @@
   g_return_val_if_fail (hash_table != NULL, FALSE);
 
   node_index = g_hash_table_lookup_node (hash_table, lookup_key, &node_hash);
 
   if (!HASH_IS_REAL (hash_table->hashes[node_index]))
-    return FALSE;
+    {
+      if (orig_key != NULL)
+        *orig_key = NULL;
+      if (value != NULL)
+        *value = NULL;
+
+      return FALSE;
+    }
 
   if (orig_key)
-    *orig_key = hash_table->keys[node_index];
+    *orig_key = g_hash_table_fetch_key_or_value (hash_table->keys, node_index, hash_table->have_big_keys);
 
   if (value)
-    *value = hash_table->values[node_index];
+    *value = g_hash_table_fetch_key_or_value (hash_table->values, node_index, hash_table->have_big_values);
 
   return TRUE;
 }
 
 /*
@@ -1470,14 +1833,20 @@
         *stolen_value = NULL;
       return FALSE;
     }
 
   if (stolen_key != NULL)
-    *stolen_key = g_steal_pointer (&hash_table->keys[node_index]);
+  {
+    *stolen_key = g_hash_table_fetch_key_or_value (hash_table->keys, node_index, hash_table->have_big_keys);
+    g_hash_table_assign_key_or_value (hash_table->keys, node_index, hash_table->have_big_keys, NULL);
+  }
 
   if (stolen_value != NULL)
-    *stolen_value = g_steal_pointer (&hash_table->values[node_index]);
+  {
+    *stolen_value = g_hash_table_fetch_key_or_value (hash_table->values, node_index, hash_table->have_big_values);
+    g_hash_table_assign_key_or_value (hash_table->values, node_index, hash_table->have_big_values, NULL);
+  }
 
   g_hash_table_remove_node (hash_table, node_index, FALSE);
   g_hash_table_maybe_resize (hash_table);
 
 #ifndef G_DISABLE_ASSERT
@@ -1559,20 +1928,20 @@
                                       GHRFunc     func,
                                       gpointer    user_data,
                                       gboolean    notify)
 {
   guint deleted = 0;
-  gint i;
+  gsize i;
 #ifndef G_DISABLE_ASSERT
   gint version = hash_table->version;
 #endif
 
   for (i = 0; i < hash_table->size; i++)
     {
       guint node_hash = hash_table->hashes[i];
-      gpointer node_key = hash_table->keys[i];
-      gpointer node_value = hash_table->values[i];
+      gpointer node_key = g_hash_table_fetch_key_or_value (hash_table->keys, i, hash_table->have_big_keys);
+      gpointer node_value = g_hash_table_fetch_key_or_value (hash_table->values, i, hash_table->have_big_values);
 
       if (HASH_IS_REAL (node_hash) &&
           (* func) (node_key, node_value, user_data))
         {
           g_hash_table_remove_node (hash_table, i, notify);
@@ -1668,11 +2037,11 @@
 void
 g_hash_table_foreach (GHashTable *hash_table,
                       GHFunc      func,
                       gpointer    user_data)
 {
-  gint i;
+  gsize i;
 #ifndef G_DISABLE_ASSERT
   gint version;
 #endif
 
   g_return_if_fail (hash_table != NULL);
@@ -1683,12 +2052,12 @@
 #endif
 
   for (i = 0; i < hash_table->size; i++)
     {
       guint node_hash = hash_table->hashes[i];
-      gpointer node_key = hash_table->keys[i];
-      gpointer node_value = hash_table->values[i];
+      gpointer node_key = g_hash_table_fetch_key_or_value (hash_table->keys, i, hash_table->have_big_keys);
+      gpointer node_value = g_hash_table_fetch_key_or_value (hash_table->values, i, hash_table->have_big_values);
 
       if (HASH_IS_REAL (node_hash))
         (* func) (node_key, node_value, user_data);
 
 #ifndef G_DISABLE_ASSERT
@@ -1726,11 +2095,11 @@
 gpointer
 g_hash_table_find (GHashTable *hash_table,
                    GHRFunc     predicate,
                    gpointer    user_data)
 {
-  gint i;
+  gsize i;
 #ifndef G_DISABLE_ASSERT
   gint version;
 #endif
   gboolean match;
 
@@ -1744,12 +2113,12 @@
   match = FALSE;
 
   for (i = 0; i < hash_table->size; i++)
     {
       guint node_hash = hash_table->hashes[i];
-      gpointer node_key = hash_table->keys[i];
-      gpointer node_value = hash_table->values[i];
+      gpointer node_key = g_hash_table_fetch_key_or_value (hash_table->keys, i, hash_table->have_big_keys);
+      gpointer node_value = g_hash_table_fetch_key_or_value (hash_table->values, i, hash_table->have_big_values);
 
       if (HASH_IS_REAL (node_hash))
         match = predicate (node_key, node_value, user_data);
 
 #ifndef G_DISABLE_ASSERT
@@ -1798,20 +2167,20 @@
  * Since: 2.14
  */
 GList *
 g_hash_table_get_keys (GHashTable *hash_table)
 {
-  gint i;
+  gsize i;
   GList *retval;
 
   g_return_val_if_fail (hash_table != NULL, NULL);
 
   retval = NULL;
   for (i = 0; i < hash_table->size; i++)
     {
       if (HASH_IS_REAL (hash_table->hashes[i]))
-        retval = g_list_prepend (retval, hash_table->keys[i]);
+        retval = g_list_prepend (retval, g_hash_table_fetch_key_or_value (hash_table->keys, i, hash_table->have_big_keys));
     }
 
   return retval;
 }
 
@@ -1846,17 +2215,17 @@
 gpointer *
 g_hash_table_get_keys_as_array (GHashTable *hash_table,
                                 guint      *length)
 {
   gpointer *result;
-  guint i, j = 0;
+  gsize i, j = 0;
 
   result = g_new (gpointer, hash_table->nnodes + 1);
   for (i = 0; i < hash_table->size; i++)
     {
       if (HASH_IS_REAL (hash_table->hashes[i]))
-        result[j++] = hash_table->keys[i];
+        result[j++] = g_hash_table_fetch_key_or_value (hash_table->keys, i, hash_table->have_big_keys);
     }
   g_assert_cmpint (j, ==, hash_table->nnodes);
   result[j] = NULL;
 
   if (length)
@@ -1884,20 +2253,20 @@
  * Since: 2.14
  */
 GList *
 g_hash_table_get_values (GHashTable *hash_table)
 {
-  gint i;
+  gsize i;
   GList *retval;
 
   g_return_val_if_fail (hash_table != NULL, NULL);
 
   retval = NULL;
   for (i = 0; i < hash_table->size; i++)
     {
       if (HASH_IS_REAL (hash_table->hashes[i]))
-        retval = g_list_prepend (retval, hash_table->values[i]);
+        retval = g_list_prepend (retval, g_hash_table_fetch_key_or_value (hash_table->values, i, hash_table->have_big_values));
     }
 
   return retval;
 }
 
