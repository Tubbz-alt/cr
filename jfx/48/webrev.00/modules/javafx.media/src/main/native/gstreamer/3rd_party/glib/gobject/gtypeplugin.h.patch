diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gtypeplugin.h b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gtypeplugin.h
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gtypeplugin.h
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gtypeplugin.h
@@ -19,53 +19,53 @@
 
 #if !defined (__GLIB_GOBJECT_H_INSIDE__) && !defined (GOBJECT_COMPILATION)
 #error "Only <glib-object.h> can be included directly."
 #endif
 
-#include    <gobject/gtype.h>
+#include  <gobject/gtype.h>
 
 G_BEGIN_DECLS
 
 /* --- type macros --- */
-#define G_TYPE_TYPE_PLUGIN      (g_type_plugin_get_type ())
-#define G_TYPE_PLUGIN(inst)     (G_TYPE_CHECK_INSTANCE_CAST ((inst), G_TYPE_TYPE_PLUGIN, GTypePlugin))
+#define G_TYPE_TYPE_PLUGIN    (g_type_plugin_get_type ())
+#define G_TYPE_PLUGIN(inst)   (G_TYPE_CHECK_INSTANCE_CAST ((inst), G_TYPE_TYPE_PLUGIN, GTypePlugin))
 #define G_TYPE_PLUGIN_CLASS(vtable) (G_TYPE_CHECK_CLASS_CAST ((vtable), G_TYPE_TYPE_PLUGIN, GTypePluginClass))
-#define G_IS_TYPE_PLUGIN(inst)      (G_TYPE_CHECK_INSTANCE_TYPE ((inst), G_TYPE_TYPE_PLUGIN))
+#define G_IS_TYPE_PLUGIN(inst)    (G_TYPE_CHECK_INSTANCE_TYPE ((inst), G_TYPE_TYPE_PLUGIN))
 #define G_IS_TYPE_PLUGIN_CLASS(vtable)  (G_TYPE_CHECK_CLASS_TYPE ((vtable), G_TYPE_TYPE_PLUGIN))
-#define G_TYPE_PLUGIN_GET_CLASS(inst)   (G_TYPE_INSTANCE_GET_INTERFACE ((inst), G_TYPE_TYPE_PLUGIN, GTypePluginClass))
+#define G_TYPE_PLUGIN_GET_CLASS(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), G_TYPE_TYPE_PLUGIN, GTypePluginClass))
 
 
 /* --- typedefs & structures --- */
-typedef struct _GTypePluginClass           GTypePluginClass;
+typedef struct _GTypePluginClass       GTypePluginClass;
 /**
  * GTypePluginUse:
  * @plugin: the #GTypePlugin whose use count should be increased
  *
  * The type of the @use_plugin function of #GTypePluginClass, which gets called
  * to increase the use count of @plugin.
  */
-typedef void  (*GTypePluginUse)           (GTypePlugin     *plugin);
+typedef void  (*GTypePluginUse)       (GTypePlugin     *plugin);
 /**
  * GTypePluginUnuse:
  * @plugin: the #GTypePlugin whose use count should be decreased
  *
  * The type of the @unuse_plugin function of #GTypePluginClass.
  */
-typedef void  (*GTypePluginUnuse)         (GTypePlugin     *plugin);
+typedef void  (*GTypePluginUnuse)     (GTypePlugin     *plugin);
 /**
  * GTypePluginCompleteTypeInfo:
  * @plugin: the #GTypePlugin
  * @g_type: the #GType whose info is completed
  * @info: the #GTypeInfo struct to fill in
  * @value_table: the #GTypeValueTable to fill in
  *
  * The type of the @complete_type_info function of #GTypePluginClass.
  */
-typedef void  (*GTypePluginCompleteTypeInfo)      (GTypePlugin     *plugin,
-                           GType            g_type,
-                           GTypeInfo       *info,
-                           GTypeValueTable *value_table);
+typedef void  (*GTypePluginCompleteTypeInfo)    (GTypePlugin     *plugin,
+               GType            g_type,
+               GTypeInfo       *info,
+               GTypeValueTable *value_table);
 /**
  * GTypePluginCompleteInterfaceInfo:
  * @plugin: the #GTypePlugin
  * @instance_type: the #GType of an instantiable type to which the interface
  *  is added
@@ -73,13 +73,13 @@
  * @info: the #GInterfaceInfo to fill in
  *
  * The type of the @complete_interface_info function of #GTypePluginClass.
  */
 typedef void  (*GTypePluginCompleteInterfaceInfo) (GTypePlugin     *plugin,
-                           GType            instance_type,
-                           GType            interface_type,
-                           GInterfaceInfo  *info);
+               GType            instance_type,
+               GType            interface_type,
+               GInterfaceInfo  *info);
 /**
  * GTypePlugin:
  *
  * The GTypePlugin typedef is used as a placeholder
  * for objects that implement the GTypePlugin interface.
@@ -99,36 +99,36 @@
  * the lifecycle of dynamically loaded types.
  */
 struct _GTypePluginClass
 {
   /*< private >*/
-  GTypeInterface           base_iface;
+  GTypeInterface       base_iface;
 
   /*< public >*/
-  GTypePluginUse           use_plugin;
-  GTypePluginUnuse         unuse_plugin;
-  GTypePluginCompleteTypeInfo      complete_type_info;
+  GTypePluginUse       use_plugin;
+  GTypePluginUnuse       unuse_plugin;
+  GTypePluginCompleteTypeInfo    complete_type_info;
   GTypePluginCompleteInterfaceInfo complete_interface_info;
 };
 
 
 /* --- prototypes --- */
 GLIB_AVAILABLE_IN_ALL
-GType   g_type_plugin_get_type          (void)  G_GNUC_CONST;
+GType g_type_plugin_get_type      (void)  G_GNUC_CONST;
 GLIB_AVAILABLE_IN_ALL
-void    g_type_plugin_use           (GTypePlugin     *plugin);
+void  g_type_plugin_use     (GTypePlugin   *plugin);
 GLIB_AVAILABLE_IN_ALL
-void    g_type_plugin_unuse         (GTypePlugin     *plugin);
+void  g_type_plugin_unuse     (GTypePlugin   *plugin);
 GLIB_AVAILABLE_IN_ALL
-void    g_type_plugin_complete_type_info    (GTypePlugin     *plugin,
-                         GType            g_type,
-                         GTypeInfo       *info,
-                         GTypeValueTable *value_table);
+void  g_type_plugin_complete_type_info  (GTypePlugin     *plugin,
+             GType            g_type,
+             GTypeInfo       *info,
+             GTypeValueTable *value_table);
 GLIB_AVAILABLE_IN_ALL
-void    g_type_plugin_complete_interface_info   (GTypePlugin     *plugin,
-                         GType            instance_type,
-                         GType            interface_type,
-                         GInterfaceInfo  *info);
+void  g_type_plugin_complete_interface_info (GTypePlugin     *plugin,
+             GType            instance_type,
+             GType            interface_type,
+             GInterfaceInfo  *info);
 
 G_END_DECLS
 
 #endif /* __G_TYPE_PLUGIN_H__ */
