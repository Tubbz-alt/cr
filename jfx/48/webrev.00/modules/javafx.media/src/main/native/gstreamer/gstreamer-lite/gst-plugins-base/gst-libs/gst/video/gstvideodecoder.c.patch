diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/gstvideodecoder.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/gstvideodecoder.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/gstvideodecoder.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/gstvideodecoder.c
@@ -286,14 +286,10 @@
 #include <string.h>
 
 GST_DEBUG_CATEGORY (videodecoder_debug);
 #define GST_CAT_DEFAULT videodecoder_debug
 
-#define GST_VIDEO_DECODER_GET_PRIVATE(obj)  \
-    (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GST_TYPE_VIDEO_DECODER, \
-        GstVideoDecoderPrivate))
-
 struct _GstVideoDecoderPrivate
 {
   /* FIXME introduce a context ? */
 
   GstBufferPool *pool;
@@ -408,10 +404,12 @@
   GstClockTime last_reset_time;
 #endif
 };
 
 static GstElementClass *parent_class = NULL;
+static gint private_offset = 0;
+
 static void gst_video_decoder_class_init (GstVideoDecoderClass * klass);
 static void gst_video_decoder_init (GstVideoDecoder * dec,
     GstVideoDecoderClass * klass);
 
 static void gst_video_decoder_finalize (GObject * object);
@@ -491,15 +489,25 @@
       (GInstanceInitFunc) gst_video_decoder_init,
     };
 
     _type = g_type_register_static (GST_TYPE_ELEMENT,
         "GstVideoDecoder", &info, G_TYPE_FLAG_ABSTRACT);
+
+    private_offset =
+        g_type_add_instance_private (_type, sizeof (GstVideoDecoderPrivate));
+
     g_once_init_leave (&type, _type);
   }
   return type;
 }
 
+static inline GstVideoDecoderPrivate *
+gst_video_decoder_get_instance_private (GstVideoDecoder * self)
+{
+  return (G_STRUCT_MEMBER_P (self, private_offset));
+}
+
 static void
 gst_video_decoder_class_init (GstVideoDecoderClass * klass)
 {
   GObjectClass *gobject_class;
   GstElementClass *gstelement_class;
@@ -509,11 +517,13 @@
 
   GST_DEBUG_CATEGORY_INIT (videodecoder_debug, "videodecoder", 0,
       "Base Video Decoder");
 
   parent_class = g_type_class_peek_parent (klass);
-  g_type_class_add_private (klass, sizeof (GstVideoDecoderPrivate));
+
+  if (private_offset != 0)
+    g_type_class_adjust_private_offset (klass, &private_offset);
 
   gobject_class->finalize = gst_video_decoder_finalize;
 
   gstelement_class->change_state =
       GST_DEBUG_FUNCPTR (gst_video_decoder_change_state);
@@ -534,11 +544,11 @@
   GstPadTemplate *pad_template;
   GstPad *pad;
 
   GST_DEBUG_OBJECT (decoder, "gst_video_decoder_init");
 
-  decoder->priv = GST_VIDEO_DECODER_GET_PRIVATE (decoder);
+  decoder->priv = gst_video_decoder_get_instance_private (decoder);
 
   pad_template =
       gst_element_class_get_pad_template (GST_ELEMENT_CLASS (klass), "sink");
   g_return_if_fail (pad_template != NULL);
 
@@ -607,19 +617,20 @@
     return NULL;
   }
 }
 
 static GstVideoCodecState *
-_new_output_state (GstVideoFormat fmt, guint width, guint height,
-    GstVideoCodecState * reference)
+_new_output_state (GstVideoFormat fmt, GstVideoInterlaceMode mode, guint width,
+    guint height, GstVideoCodecState * reference)
 {
   GstVideoCodecState *state;
 
   state = g_slice_new0 (GstVideoCodecState);
   state->ref_count = 1;
   gst_video_info_init (&state->info);
-  if (!gst_video_info_set_format (&state->info, fmt, width, height)) {
+  if (!gst_video_info_set_interlaced_format (&state->info, fmt, mode, width,
+          height)) {
     g_slice_free (GstVideoCodecState, state);
     return NULL;
   }
 
   if (reference) {
@@ -988,12 +999,10 @@
   caps_size = gst_caps_get_size (caps);
   if (decoder->priv->input_state && decoder->priv->input_state->caps) {
     GstCaps *sinkcaps = decoder->priv->input_state->caps;
     GstStructure *structure = gst_caps_get_structure (sinkcaps, 0);
     gint width, height;
-    gint par_n, par_d;
-    gint fps_n, fps_d;
 
     if (gst_structure_get_int (structure, "width", &width)) {
       for (i = 0; i < caps_size; i++) {
         gst_structure_set (gst_caps_get_structure (caps, i), "width",
             G_TYPE_INT, width, NULL);
@@ -1004,30 +1013,15 @@
       for (i = 0; i < caps_size; i++) {
         gst_structure_set (gst_caps_get_structure (caps, i), "height",
             G_TYPE_INT, height, NULL);
       }
     }
-
-    if (gst_structure_get_fraction (structure, "framerate", &fps_n, &fps_d)) {
-      for (i = 0; i < caps_size; i++) {
-        gst_structure_set (gst_caps_get_structure (caps, i), "framerate",
-            GST_TYPE_FRACTION, fps_n, fps_d, NULL);
-      }
-    }
-
-    if (gst_structure_get_fraction (structure, "pixel-aspect-ratio", &par_n,
-            &par_d)) {
-      for (i = 0; i < caps_size; i++) {
-        gst_structure_set (gst_caps_get_structure (caps, i),
-            "pixel-aspect-ratio", GST_TYPE_FRACTION, par_n, par_d, NULL);
-      }
-    }
   }
 
   for (i = 0; i < caps_size; i++) {
     structure = gst_caps_get_structure (caps, i);
-    /* Random I420 1280x720@30 for fixation */
+    /* Random I420 1280x720 for fixation */
     if (gst_structure_has_field (structure, "format"))
       gst_structure_fixate_field_string (structure, "format", "I420");
     else
       gst_structure_set (structure, "format", G_TYPE_STRING, "I420", NULL);
 
@@ -1038,27 +1032,12 @@
 
     if (gst_structure_has_field (structure, "height"))
       gst_structure_fixate_field_nearest_int (structure, "height", 720);
     else
       gst_structure_set (structure, "height", G_TYPE_INT, 720, NULL);
-
-    if (gst_structure_has_field (structure, "framerate"))
-      gst_structure_fixate_field_nearest_fraction (structure, "framerate", 30,
-          1);
-    else
-      gst_structure_set (structure, "framerate", GST_TYPE_FRACTION, 30, 1,
-          NULL);
-
-    if (gst_structure_has_field (structure, "pixel-aspect-ratio"))
-      gst_structure_fixate_field_nearest_fraction (structure,
-          "pixel-aspect-ratio", 1, 1);
-    else
-      gst_structure_set (structure, "pixel-aspect-ratio", GST_TYPE_FRACTION,
-          1, 1, NULL);
   }
   caps = gst_caps_fixate (caps);
-  structure = gst_caps_get_structure (caps, 0);
 
   if (!caps || !gst_video_info_from_caps (&info, caps))
     goto caps_error;
 
   GST_INFO_OBJECT (decoder,
@@ -1178,11 +1157,12 @@
       gboolean needs_reconfigure = FALSE;
       GList *events;
       GList *frame_events;
 
       GST_VIDEO_DECODER_STREAM_LOCK (decoder);
-      flow_ret = gst_video_decoder_drain_out (decoder, FALSE);
+      if (decoder->input_segment.flags & GST_SEEK_FLAG_TRICKMODE_KEY_UNITS)
+        flow_ret = gst_video_decoder_drain_out (decoder, FALSE);
       ret = (flow_ret == GST_FLOW_OK);
 
       /* Ensure we have caps before forwarding the event */
       if (!decoder->priv->output_state) {
         if (!gst_video_decoder_negotiate_default_caps (decoder)) {
@@ -2112,11 +2092,12 @@
   g_return_val_if_fail (priv->packetized || klass->parse, GST_FLOW_ERROR);
 
   /* Draining on DISCONT is handled in chain_reverse() for reverse playback,
    * and this function would only be called to get everything collected GOP
    * by GOP in the parse_gather list */
-  if (decoder->input_segment.rate > 0.0 && GST_BUFFER_IS_DISCONT (buf))
+  if (decoder->input_segment.rate > 0.0 && GST_BUFFER_IS_DISCONT (buf)
+      && (decoder->input_segment.flags & GST_SEEK_FLAG_TRICKMODE_KEY_UNITS))
     ret = gst_video_decoder_drain_out (decoder, FALSE);
 
   if (priv->current_frame == NULL)
     priv->current_frame = gst_video_decoder_new_frame (decoder);
 
@@ -2337,10 +2318,13 @@
       /* now send queued data downstream */
       walk = priv->output_queued;
       while (walk) {
         GstBuffer *buf = GST_BUFFER_CAST (walk->data);
 
+        priv->output_queued =
+            g_list_delete_link (priv->output_queued, priv->output_queued);
+
         if (G_LIKELY (res == GST_FLOW_OK)) {
           /* avoid stray DISCONT from forward processing,
            * which have no meaning in reverse pushing */
           GST_BUFFER_FLAG_UNSET (buf, GST_BUFFER_FLAG_DISCONT);
 
@@ -2361,12 +2345,10 @@
           res = gst_video_decoder_clip_and_push_buf (dec, buf);
         } else {
           gst_buffer_unref (buf);
         }
 
-        priv->output_queued =
-            g_list_delete_link (priv->output_queued, priv->output_queued);
         walk = priv->output_queued;
       }
 
       /* clear buffer and decoder state again
        * before moving to the previous keyframe */
@@ -3201,11 +3183,15 @@
         " to produce", GST_TIME_ARGS (elapsed));
     priv->last_reset_time = GST_CLOCK_TIME_NONE;
   }
 #endif
 
+  /* release STREAM_LOCK not to block upstream
+   * while pushing buffer downstream */
+  GST_VIDEO_DECODER_STREAM_UNLOCK (decoder);
   ret = gst_pad_push (decoder->srcpad, buf);
+  GST_VIDEO_DECODER_STREAM_LOCK (decoder);
 
 done:
   return ret;
 }
 
@@ -3471,19 +3457,44 @@
  */
 GstVideoCodecState *
 gst_video_decoder_set_output_state (GstVideoDecoder * decoder,
     GstVideoFormat fmt, guint width, guint height,
     GstVideoCodecState * reference)
+{
+  return gst_video_decoder_set_interlaced_output_state (decoder, fmt,
+      GST_VIDEO_INTERLACE_MODE_PROGRESSIVE, width, height, reference);
+}
+
+/**
+ * gst_video_decoder_set_interlaced_output_state:
+ * @decoder: a #GstVideoDecoder
+ * @fmt: a #GstVideoFormat
+ * @width: The width in pixels
+ * @height: The height in pixels
+ * @mode: A #GstVideoInterlaceMode
+ * @reference: (allow-none) (transfer none): An optional reference #GstVideoCodecState
+ *
+ * Same as #gst_video_decoder_set_output_state() but also allows you to also set
+ * the interlacing mode.
+ *
+ * Returns: (transfer full): the newly configured output state.
+ *
+ * Since: 1.16.
+ */
+GstVideoCodecState *
+gst_video_decoder_set_interlaced_output_state (GstVideoDecoder * decoder,
+    GstVideoFormat fmt, GstVideoInterlaceMode mode, guint width, guint height,
+    GstVideoCodecState * reference)
 {
   GstVideoDecoderPrivate *priv = decoder->priv;
   GstVideoCodecState *state;
 
   GST_DEBUG_OBJECT (decoder, "fmt:%d, width:%d, height:%d, reference:%p",
       fmt, width, height, reference);
 
   /* Create the new output state */
-  state = _new_output_state (fmt, width, height, reference);
+  state = _new_output_state (fmt, mode, width, height, reference);
   if (!state)
     return NULL;
 
   GST_VIDEO_DECODER_STREAM_LOCK (decoder);
 
@@ -4389,11 +4400,11 @@
  * gst_video_decoder_get_allocator:
  * @decoder: a #GstVideoDecoder
  * @allocator: (out) (allow-none) (transfer full): the #GstAllocator
  * used
  * @params: (out) (allow-none) (transfer full): the
- * #GstAllocatorParams of @allocator
+ * #GstAllocationParams of @allocator
  *
  * Lets #GstVideoDecoder sub-classes to know the memory @allocator
  * used by the base class and its @params.
  *
  * Unref the @allocator after use it.
