diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gunicollate.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gunicollate.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gunicollate.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gunicollate.c
@@ -18,11 +18,11 @@
 
 #include "config.h"
 
 #include <locale.h>
 #include <string.h>
-#ifdef __STDC_ISO_10646__
+#ifdef HAVE_WCHAR_H
 #include <wchar.h>
 #endif
 
 #ifdef HAVE_CARBON
 #include <CoreServices/CoreServices.h>
@@ -33,21 +33,22 @@
 #include "gunicodeprivate.h"
 #include "gstring.h"
 #include "gstrfuncs.h"
 #include "gtestutils.h"
 #include "gcharset.h"
-#ifndef __STDC_ISO_10646__
 #include "gconvert.h"
-#endif
 
+#if SIZEOF_WCHAR_T == 4 && defined(__STDC_ISO_10646__)
+#define GUNICHAR_EQUALS_WCHAR_T 1
+#endif
 
 #ifdef _MSC_VER
 /* Workaround for bug in MSVCR80.DLL */
 static gsize
 msc_strxfrm_wrapper (char       *string1,
-             const char *string2,
-             gsize       count)
+         const char *string2,
+         gsize       count)
 {
   if (!string1 || count <= 0)
     {
       char tmp;
 
@@ -73,11 +74,11 @@
  * Returns: < 0 if @str1 compares before @str2,
  *   0 if they compare equal, > 0 if @str1 compares after @str2.
  **/
 gint
 g_utf8_collate (const gchar *str1,
-        const gchar *str2)
+    const gchar *str2)
 {
   gint result;
 
 #ifdef HAVE_CARBON
 
@@ -99,11 +100,11 @@
   result = retval;
 
   g_free (str2_utf16);
   g_free (str1_utf16);
 
-#elif defined(__STDC_ISO_10646__)
+#elif defined(HAVE_WCHAR_H) && defined(GUNICHAR_EQUALS_WCHAR_T)
 
   gunichar *str1_norm;
   gunichar *str2_norm;
 
   g_return_val_if_fail (str1 != NULL, 0);
@@ -115,11 +116,11 @@
   result = wcscoll ((wchar_t *)str1_norm, (wchar_t *)str2_norm);
 
   g_free (str1_norm);
   g_free (str2_norm);
 
-#else /* !__STDC_ISO_10646__ */
+#else
 
   const gchar *charset;
   gchar *str1_norm;
   gchar *str2_norm;
 
@@ -137,31 +138,31 @@
     {
       gchar *str1_locale = g_convert (str1_norm, -1, charset, "UTF-8", NULL, NULL, NULL);
       gchar *str2_locale = g_convert (str2_norm, -1, charset, "UTF-8", NULL, NULL, NULL);
 
       if (str1_locale && str2_locale)
-    result =  strcoll (str1_locale, str2_locale);
+  result =  strcoll (str1_locale, str2_locale);
       else if (str1_locale)
-    result = -1;
+  result = -1;
       else if (str2_locale)
-    result = 1;
+  result = 1;
       else
-    result = strcmp (str1_norm, str2_norm);
+  result = strcmp (str1_norm, str2_norm);
 
       g_free (str1_locale);
       g_free (str2_locale);
     }
 
   g_free (str1_norm);
   g_free (str2_norm);
 
-#endif /* __STDC_ISO_10646__ */
+#endif
 
   return result;
 }
 
-#if defined(__STDC_ISO_10646__)
+#if defined(HAVE_WCHAR_H) && defined(GUNICHAR_EQUALS_WCHAR_T)
 /* We need UTF-8 encoding of numbers to encode the weights if
  * we are using wcsxfrm. However, we aren't encoding Unicode
  * characters, so we can't simply use g_unichar_to_utf8.
  *
  * The following routine is taken (with modification) from GNU
@@ -176,11 +177,11 @@
   int retval;
 
   if (val < 0x80)
     {
       if (buf)
-    *buf++ = (char) val;
+  *buf++ = (char) val;
       retval = 1;
     }
   else
     {
       int step;
@@ -189,26 +190,26 @@
         if ((val & (~(guint32)0 << (5 * step + 1))) == 0)
           break;
       retval = step;
 
       if (buf)
-    {
-      *buf = (unsigned char) (~0xff >> step);
-      --step;
-      do
-        {
-          buf[step] = 0x80 | (val & 0x3f);
-          val >>= 6;
-        }
-      while (--step > 0);
-      *buf |= val;
-    }
+  {
+    *buf = (unsigned char) (~0xff >> step);
+    --step;
+    do
+      {
+        buf[step] = 0x80 | (val & 0x3f);
+        val >>= 6;
+      }
+    while (--step > 0);
+    *buf |= val;
+  }
     }
 
   return retval;
 }
-#endif /* __STDC_ISO_10646__ */
+#endif
 
 #ifdef HAVE_CARBON
 
 static gchar *
 collate_key_to_string (UCCollationValue *key,
@@ -371,20 +372,20 @@
  * Returns: a newly allocated string. This string should
  *   be freed with g_free() when you are done with it.
  **/
 gchar *
 g_utf8_collate_key (const gchar *str,
-            gssize       len)
+        gssize       len)
 {
   gchar *result;
 
 #ifdef HAVE_CARBON
 
   g_return_val_if_fail (str != NULL, NULL);
   result = carbon_collate_key (str, len);
 
-#elif defined(__STDC_ISO_10646__)
+#elif defined(HAVE_WCHAR_H) && defined(GUNICHAR_EQUALS_WCHAR_T)
 
   gsize xfrm_len;
   gunichar *str_norm;
   wchar_t *result_wc;
   gsize i;
@@ -410,11 +411,11 @@
 
   g_free (result_wc);
   g_free (str_norm);
 
   return result;
-#else /* !__STDC_ISO_10646__ */
+#else
 
   gsize xfrm_len;
   const gchar *charset;
   gchar *str_norm;
 
@@ -436,26 +437,26 @@
   else
     {
       gchar *str_locale = g_convert (str_norm, -1, charset, "UTF-8", NULL, NULL, NULL);
 
       if (str_locale)
-    {
-      xfrm_len = strxfrm (NULL, str_locale, 0);
-      if (xfrm_len < 0 || xfrm_len >= G_MAXINT - 2)
-        {
-          g_free (str_locale);
-          str_locale = NULL;
-        }
-    }
+  {
+    xfrm_len = strxfrm (NULL, str_locale, 0);
+    if (xfrm_len < 0 || xfrm_len >= G_MAXINT - 2)
+      {
+        g_free (str_locale);
+        str_locale = NULL;
+      }
+  }
       if (str_locale)
-    {
-      result = g_malloc (xfrm_len + 2);
-      result[0] = 'A';
-      strxfrm (result + 1, str_locale, xfrm_len + 1);
+  {
+    result = g_malloc (xfrm_len + 2);
+    result[0] = 'A';
+    strxfrm (result + 1, str_locale, xfrm_len + 1);
 
-      g_free (str_locale);
-    }
+    g_free (str_locale);
+  }
     }
 
   if (!result)
     {
       xfrm_len = strlen (str_norm);
@@ -464,11 +465,11 @@
       memcpy (result + 1, str_norm, xfrm_len);
       result[xfrm_len+1] = '\0';
     }
 
   g_free (str_norm);
-#endif /* __STDC_ISO_10646__ */
+#endif
 
   return result;
 }
 
 /* This is a collation key that is very very likely to sort before any
@@ -500,11 +501,11 @@
  *
  * Since: 2.8
  */
 gchar *
 g_utf8_collate_key_for_filename (const gchar *str,
-                 gssize       len)
+         gssize       len)
 {
 #ifndef HAVE_CARBON
   GString *result;
   GString *append;
   const gchar *p;
@@ -570,101 +571,101 @@
 
   /* No need to use utf8 functions, since we're only looking for ascii chars */
   for (prev = p = str; p < end; p++)
     {
       switch (*p)
-    {
-    case '.':
-      if (prev != p)
-        {
-          collate_key = g_utf8_collate_key (prev, p - prev);
-          g_string_append (result, collate_key);
-          g_free (collate_key);
-        }
-
-      g_string_append (result, COLLATION_SENTINEL "\1");
-
-      /* skip the dot */
-      prev = p + 1;
-      break;
-
-    case '0':
-    case '1':
-    case '2':
-    case '3':
-    case '4':
-    case '5':
-    case '6':
-    case '7':
-    case '8':
-    case '9':
-      if (prev != p)
-        {
-          collate_key = g_utf8_collate_key (prev, p - prev);
-          g_string_append (result, collate_key);
-          g_free (collate_key);
-        }
-
-      g_string_append (result, COLLATION_SENTINEL "\2");
-
-      prev = p;
-
-      /* write d-1 colons */
-      if (*p == '0')
-        {
-          leading_zeros = 1;
-          digits = 0;
-        }
-      else
-        {
-          leading_zeros = 0;
-          digits = 1;
-        }
-
-      while (++p < end)
-        {
-          if (*p == '0' && !digits)
-        ++leading_zeros;
-          else if (g_ascii_isdigit(*p))
-        ++digits;
-          else
+  {
+  case '.':
+    if (prev != p)
+      {
+        collate_key = g_utf8_collate_key (prev, p - prev);
+        g_string_append (result, collate_key);
+        g_free (collate_key);
+      }
+
+    g_string_append (result, COLLATION_SENTINEL "\1");
+
+    /* skip the dot */
+    prev = p + 1;
+    break;
+
+  case '0':
+  case '1':
+  case '2':
+  case '3':
+  case '4':
+  case '5':
+  case '6':
+  case '7':
+  case '8':
+  case '9':
+    if (prev != p)
+      {
+        collate_key = g_utf8_collate_key (prev, p - prev);
+        g_string_append (result, collate_key);
+        g_free (collate_key);
+      }
+
+    g_string_append (result, COLLATION_SENTINEL "\2");
+
+    prev = p;
+
+    /* write d-1 colons */
+    if (*p == '0')
+      {
+        leading_zeros = 1;
+        digits = 0;
+      }
+    else
+      {
+        leading_zeros = 0;
+        digits = 1;
+      }
+
+    while (++p < end)
+      {
+        if (*p == '0' && !digits)
+    ++leading_zeros;
+        else if (g_ascii_isdigit(*p))
+    ++digits;
+        else
                 {
-          /* count an all-zero sequence as
+      /* count an all-zero sequence as
                    * one digit plus leading zeros
                    */
               if (!digits)
                     {
                       ++digits;
                       --leading_zeros;
                     }
-          break;
-                }
-        }
-
-      while (digits > 1)
-        {
-          g_string_append_c (result, ':');
-          --digits;
-        }
-
-      if (leading_zeros > 0)
-        {
-          g_string_append_c (append, (char)leading_zeros);
-          prev += leading_zeros;
-        }
-
-      /* write the number itself */
-      g_string_append_len (result, prev, p - prev);
-
-      prev = p;
-      --p;    /* go one step back to avoid disturbing outer loop */
-      break;
-
-    default:
-      /* other characters just accumulate */
       break;
-    }
+                }
+      }
+
+    while (digits > 1)
+      {
+        g_string_append_c (result, ':');
+        --digits;
+      }
+
+    if (leading_zeros > 0)
+      {
+        g_string_append_c (append, (char)leading_zeros);
+        prev += leading_zeros;
+      }
+
+    /* write the number itself */
+    g_string_append_len (result, prev, p - prev);
+
+    prev = p;
+    --p;    /* go one step back to avoid disturbing outer loop */
+    break;
+
+  default:
+    /* other characters just accumulate */
+    break;
+  }
     }
 
   if (prev != p)
     {
       collate_key = g_utf8_collate_key (prev, p - prev);
