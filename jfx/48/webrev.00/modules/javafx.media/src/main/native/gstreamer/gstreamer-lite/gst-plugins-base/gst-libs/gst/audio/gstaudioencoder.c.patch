diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudioencoder.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudioencoder.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudioencoder.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudioencoder.c
@@ -135,14 +135,10 @@
 
 
 GST_DEBUG_CATEGORY_STATIC (gst_audio_encoder_debug);
 #define GST_CAT_DEFAULT gst_audio_encoder_debug
 
-#define GST_AUDIO_ENCODER_GET_PRIVATE(obj)  \
-    (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GST_TYPE_AUDIO_ENCODER, \
-        GstAudioEncoderPrivate))
-
 enum
 {
   PROP_0,
   PROP_PERFECT_TS,
   PROP_GRANULE,
@@ -245,10 +241,11 @@
   GList *pending_events;
 };
 
 
 static GstElementClass *parent_class = NULL;
+static gint private_offset = 0;
 
 static void gst_audio_encoder_class_init (GstAudioEncoderClass * klass);
 static void gst_audio_encoder_init (GstAudioEncoder * parse,
     GstAudioEncoderClass * klass);
 
@@ -278,18 +275,28 @@
 #endif // GSTREAMER_LITE
 
     audio_encoder_type = g_type_register_static (GST_TYPE_ELEMENT,
         "GstAudioEncoder", &audio_encoder_info, G_TYPE_FLAG_ABSTRACT);
 
+    private_offset =
+        g_type_add_instance_private (audio_encoder_type,
+        sizeof (GstAudioEncoderPrivate));
+
 #ifndef GSTREAMER_LITE
     g_type_add_interface_static (audio_encoder_type, GST_TYPE_PRESET,
         &preset_interface_info);
 #endif // GSTREAMER_LITE
   }
   return audio_encoder_type;
 }
 
+static inline GstAudioEncoderPrivate *
+gst_audio_encoder_get_instance_private (GstAudioEncoder * self)
+{
+  return (G_STRUCT_MEMBER_P (self, private_offset));
+}
+
 static void gst_audio_encoder_finalize (GObject * object);
 static void gst_audio_encoder_reset (GstAudioEncoder * enc, gboolean full);
 
 static void gst_audio_encoder_set_property (GObject * object,
     guint prop_id, const GValue * value, GParamSpec * pspec);
@@ -347,11 +354,12 @@
   parent_class = g_type_class_peek_parent (klass);
 
   GST_DEBUG_CATEGORY_INIT (gst_audio_encoder_debug, "audioencoder", 0,
       "audio encoder base class");
 
-  g_type_class_add_private (klass, sizeof (GstAudioEncoderPrivate));
+  if (private_offset != 0)
+    g_type_class_adjust_private_offset (klass, &private_offset);
 
   gobject_class->set_property = gst_audio_encoder_set_property;
   gobject_class->get_property = gst_audio_encoder_get_property;
 
   gobject_class->finalize = GST_DEBUG_FUNCPTR (gst_audio_encoder_finalize);
@@ -394,11 +402,11 @@
 {
   GstPadTemplate *pad_template;
 
   GST_DEBUG_OBJECT (enc, "gst_audio_encoder_init");
 
-  enc->priv = GST_AUDIO_ENCODER_GET_PRIVATE (enc);
+  enc->priv = gst_audio_encoder_get_instance_private (enc);
 
   /* only push mode supported */
   pad_template =
       gst_element_class_get_pad_template (GST_ELEMENT_CLASS (bclass), "sink");
   g_return_if_fail (pad_template != NULL);
@@ -626,15 +634,15 @@
   if (gst_tag_list_is_empty (merged_tags)) {
     gst_tag_list_unref (merged_tags);
     return NULL;
   }
 
-    /* add codec info to pending tags */
+  /* add codec info to pending tags */
 #if 0
-    caps = gst_pad_get_current_caps (enc->srcpad);
+  caps = gst_pad_get_current_caps (enc->srcpad);
   gst_pb_utils_add_codec_description_to_tag_list (merged_tags,
-        GST_TAG_AUDIO_CODEC, caps);
+      GST_TAG_AUDIO_CODEC, caps);
 #endif
 
   return gst_event_new_tag (merged_tags);
 }
 
@@ -722,11 +730,11 @@
  * If @samples < 0, then best estimate is all samples provided to encoder
  * (subclass) so far.  @buf may be NULL, in which case next number of @samples
  * are considered discarded, e.g. as a result of discontinuous transmission,
  * and a discontinuity is marked.
  *
- * Note that samples received in gst_audio_encoder_handle_frame()
+ * Note that samples received in #GstAudioEncoderClass.handle_frame()
  * may be invalidated by a call to this function.
  *
  * Returns: a #GstFlowReturn that should be escalated to caller (of caller)
  */
 GstFlowReturn
@@ -842,11 +850,11 @@
           gst_adapter_clear (priv->adapter);
         } else if (avail > 0) {
           inbuf =
               gst_adapter_take_buffer_fast (priv->adapter,
               samples * ctx->info.bpf);
-      }
+        }
       }
     } else {
       guint avail = gst_adapter_available (priv->adapter);
 
       if (avail > 0) {
@@ -901,11 +909,11 @@
         ret = gst_pad_push (enc->srcpad, tmpbuf);
         if (ret != GST_FLOW_OK) {
           GST_WARNING_OBJECT (enc, "pushing header returned %s",
               gst_flow_get_name (ret));
           goto exit;
-      }
+        }
       }
       priv->ctx.new_headers = FALSE;
     }
 
     size = gst_buffer_get_size (buf);
@@ -1382,11 +1390,11 @@
     GST_ELEMENT_ERROR (enc, STREAM, ENCODE, (NULL),
         ("buffer going too far back in time"));
     gst_buffer_unref (buffer);
     ret = GST_FLOW_ERROR;
     goto done;
-}
+  }
 }
 
 static gboolean
 gst_audio_encoder_sink_setcaps (GstAudioEncoder * enc, GstCaps * caps)
 {
@@ -1492,11 +1500,11 @@
     GstCaps * filter)
 {
   return __gst_audio_element_proxy_getcaps (GST_ELEMENT_CAST (enc),
       GST_AUDIO_ENCODER_SINK_PAD (enc), GST_AUDIO_ENCODER_SRC_PAD (enc),
       caps, filter);
-  }
+}
 
 static GstCaps *
 gst_audio_encoder_getcaps_default (GstAudioEncoder * enc, GstCaps * filter)
 {
   GstCaps *caps;
@@ -1635,24 +1643,24 @@
       gst_event_parse_tag (event, &tags);
 
       if (gst_tag_list_get_scope (tags) == GST_TAG_SCOPE_STREAM) {
         GST_AUDIO_ENCODER_STREAM_LOCK (enc);
         if (enc->priv->upstream_tags != tags) {
-        tags = gst_tag_list_copy (tags);
-
-        /* FIXME: make generic based on GST_TAG_FLAG_ENCODED */
-        gst_tag_list_remove_tag (tags, GST_TAG_CODEC);
-        gst_tag_list_remove_tag (tags, GST_TAG_AUDIO_CODEC);
-        gst_tag_list_remove_tag (tags, GST_TAG_VIDEO_CODEC);
-        gst_tag_list_remove_tag (tags, GST_TAG_SUBTITLE_CODEC);
-        gst_tag_list_remove_tag (tags, GST_TAG_CONTAINER_FORMAT);
-        gst_tag_list_remove_tag (tags, GST_TAG_BITRATE);
-        gst_tag_list_remove_tag (tags, GST_TAG_NOMINAL_BITRATE);
-        gst_tag_list_remove_tag (tags, GST_TAG_MAXIMUM_BITRATE);
-        gst_tag_list_remove_tag (tags, GST_TAG_MINIMUM_BITRATE);
-        gst_tag_list_remove_tag (tags, GST_TAG_ENCODER);
-        gst_tag_list_remove_tag (tags, GST_TAG_ENCODER_VERSION);
+          tags = gst_tag_list_copy (tags);
+
+          /* FIXME: make generic based on GST_TAG_FLAG_ENCODED */
+          gst_tag_list_remove_tag (tags, GST_TAG_CODEC);
+          gst_tag_list_remove_tag (tags, GST_TAG_AUDIO_CODEC);
+          gst_tag_list_remove_tag (tags, GST_TAG_VIDEO_CODEC);
+          gst_tag_list_remove_tag (tags, GST_TAG_SUBTITLE_CODEC);
+          gst_tag_list_remove_tag (tags, GST_TAG_CONTAINER_FORMAT);
+          gst_tag_list_remove_tag (tags, GST_TAG_BITRATE);
+          gst_tag_list_remove_tag (tags, GST_TAG_NOMINAL_BITRATE);
+          gst_tag_list_remove_tag (tags, GST_TAG_MAXIMUM_BITRATE);
+          gst_tag_list_remove_tag (tags, GST_TAG_MINIMUM_BITRATE);
+          gst_tag_list_remove_tag (tags, GST_TAG_ENCODER);
+          gst_tag_list_remove_tag (tags, GST_TAG_ENCODER_VERSION);
 
           if (enc->priv->upstream_tags)
             gst_tag_list_unref (enc->priv->upstream_tags);
           enc->priv->upstream_tags = tags;
           GST_INFO_OBJECT (enc, "upstream stream tags: %" GST_PTR_FORMAT, tags);
@@ -1661,13 +1669,13 @@
         event = gst_audio_encoder_create_merged_tags_event (enc);
         GST_AUDIO_ENCODER_STREAM_UNLOCK (enc);
 
         /* No tags, go out of here instead of fall through */
         if (!event) {
-        res = TRUE;
-        break;
-      }
+          res = TRUE;
+          break;
+        }
       }
       /* fall through */
     }
     default:
       /* Forward non-serialized events immediately. */
@@ -1953,11 +1961,11 @@
       gint64 src_val, dest_val;
 
       gst_query_parse_convert (query, &src_fmt, &src_val, &dest_fmt, &dest_val);
       GST_OBJECT_LOCK (enc);
       res = __gst_audio_encoded_audio_convert (&enc->priv->ctx.info,
-                  enc->priv->bytes_out, enc->priv->samples_in, src_fmt, src_val,
+          enc->priv->bytes_out, enc->priv->samples_in, src_fmt, src_val,
           &dest_fmt, &dest_val);
       GST_OBJECT_UNLOCK (enc);
       if (!res)
         break;
       gst_query_set_convert (query, src_fmt, src_val, dest_fmt, dest_val);
@@ -1974,11 +1982,11 @@
             GST_TIME_FORMAT " max %" GST_TIME_FORMAT, live,
             GST_TIME_ARGS (min_latency), GST_TIME_ARGS (max_latency));
 
         GST_OBJECT_LOCK (enc);
         /* add our latency */
-          min_latency += enc->priv->ctx.min_latency;
+        min_latency += enc->priv->ctx.min_latency;
         if (max_latency == -1 || enc->priv->ctx.max_latency == -1)
           max_latency = -1;
         else
           max_latency += enc->priv->ctx.max_latency;
         GST_OBJECT_UNLOCK (enc);
@@ -2150,11 +2158,11 @@
  *
  * If an exact number of samples is required, gst_audio_encoder_set_frame_samples_max()
  * must be called with the same number.
  *
  * Note: This value will be reset to 0 every time before
- * GstAudioEncoder::set_format() is called.
+ * #GstAudioEncoderClass.set_format() is called.
  */
 void
 gst_audio_encoder_set_frame_samples_min (GstAudioEncoder * enc, gint num)
 {
   g_return_if_fail (GST_IS_AUDIO_ENCODER (enc));
@@ -2187,11 +2195,11 @@
  *
  * If an exact number of samples is required, gst_audio_encoder_set_frame_samples_min()
  * must be called with the same number.
  *
  * Note: This value will be reset to 0 every time before
- * GstAudioEncoder::set_format() is called.
+ * #GstAudioEncoderClass.set_format() is called.
  */
 void
 gst_audio_encoder_set_frame_samples_max (GstAudioEncoder * enc, gint num)
 {
   g_return_if_fail (GST_IS_AUDIO_ENCODER (enc));
@@ -2221,11 +2229,11 @@
  *
  * Sets max number of frames accepted at once (assumed minimally 1).
  * Requires @frame_samples_min and @frame_samples_max to be the equal.
  *
  * Note: This value will be reset to 0 every time before
- * GstAudioEncoder::set_format() is called.
+ * #GstAudioEncoderClass.set_format() is called.
  */
 void
 gst_audio_encoder_set_frame_max (GstAudioEncoder * enc, gint num)
 {
   g_return_if_fail (GST_IS_AUDIO_ENCODER (enc));
@@ -2254,11 +2262,11 @@
  * @num: lookahead
  *
  * Sets encoder lookahead (in units of input rate samples)
  *
  * Note: This value will be reset to 0 every time before
- * GstAudioEncoder::set_format() is called.
+ * #GstAudioEncoderClass.set_format() is called.
  */
 void
 gst_audio_encoder_set_lookahead (GstAudioEncoder * enc, gint num)
 {
   g_return_if_fail (GST_IS_AUDIO_ENCODER (enc));
@@ -2683,11 +2691,11 @@
       enc->priv->tags = gst_tag_list_ref ((GstTagList *) tags);
       enc->priv->tags_merge_mode = mode;
     }
 
     GST_DEBUG_OBJECT (enc, "setting encoder tags to %" GST_PTR_FORMAT, tags);
-  enc->priv->tags_changed = TRUE;
+    enc->priv->tags_changed = TRUE;
   }
   GST_AUDIO_ENCODER_STREAM_UNLOCK (enc);
 }
 
 static gboolean
@@ -2929,11 +2937,11 @@
  * gst_audio_encoder_get_allocator:
  * @enc: a #GstAudioEncoder
  * @allocator: (out) (allow-none) (transfer full): the #GstAllocator
  * used
  * @params: (out) (allow-none) (transfer full): the
- * #GstAllocatorParams of @allocator
+ * #GstAllocationParams of @allocator
  *
  * Lets #GstAudioEncoder sub-classes to know the memory @allocator
  * used by the base class and its @params.
  *
  * Unref the @allocator after use it.
