diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gclosure.h b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gclosure.h
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gclosure.h
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gclosure.h
@@ -47,11 +47,11 @@
  * See g_closure_set_meta_marshal(), g_closure_add_finalize_notifier(),
  * g_closure_add_invalidate_notifier() and g_closure_add_marshal_guards().
  *
  * Returns: number of notifiers
  */
-#define G_CLOSURE_N_NOTIFIERS(cl)    (((cl)->n_guards << 1L) + \
+#define G_CLOSURE_N_NOTIFIERS(cl)  (((cl)->n_guards << 1L) + \
                                           (cl)->n_fnotifiers + (cl)->n_inotifiers)
 /**
  * G_CCLOSURE_SWAP_DATA:
  * @cclosure: a #GCClosure
  *
@@ -65,15 +65,15 @@
  * G_CALLBACK:
  * @f: a function pointer.
  *
  * Cast a function pointer to a #GCallback.
  */
-#define G_CALLBACK(f)            ((GCallback) (f))
+#define G_CALLBACK(f)      ((GCallback) (f))
 
 
 /* -- typedefs --- */
-typedef struct _GClosure         GClosure;
+typedef struct _GClosure     GClosure;
 typedef struct _GClosureNotifyData   GClosureNotifyData;
 
 /**
  * GCallback:
  *
@@ -90,12 +90,12 @@
  * @closure: the #GClosure on which the notification is emitted
  *
  * The type used for the various notification callbacks which can be registered
  * on closures.
  */
-typedef void  (*GClosureNotify)     (gpointer    data,
-                     GClosure   *closure);
+typedef void  (*GClosureNotify)   (gpointer  data,
+           GClosure *closure);
 /**
  * GClosureMarshal:
  * @closure: the #GClosure to which the marshaller belongs
  * @return_value: (nullable): a #GValue to store the return
  *  value. May be %NULL if the callback of @closure doesn't return a
@@ -110,16 +110,16 @@
  *  registering the marshaller, see g_closure_set_marshal() and
  *  g_closure_set_meta_marshal()
  *
  * The type used for marshaller functions.
  */
-typedef void  (*GClosureMarshal)    (GClosure   *closure,
-                     GValue         *return_value,
-                     guint           n_param_values,
-                     const GValue   *param_values,
-                     gpointer        invocation_hint,
-                     gpointer    marshal_data);
+typedef void  (*GClosureMarshal)  (GClosure *closure,
+           GValue         *return_value,
+           guint           n_param_values,
+           const GValue   *param_values,
+           gpointer        invocation_hint,
+           gpointer  marshal_data);
 
 /**
  * GVaClosureMarshal:
  * @closure: the #GClosure to which the marshaller belongs
  * @return_value: (nullable): a #GValue to store the return
@@ -138,25 +138,25 @@
  * This is the signature of va_list marshaller functions, an optional
  * marshaller that can be used in some situations to avoid
  * marshalling the signal argument into GValues.
  */
 typedef void (* GVaClosureMarshal) (GClosure *closure,
-                    GValue   *return_value,
-                    gpointer  instance,
-                    va_list   args,
-                    gpointer  marshal_data,
-                    int       n_params,
-                    GType    *param_types);
+            GValue   *return_value,
+            gpointer  instance,
+            va_list   args,
+            gpointer  marshal_data,
+            int       n_params,
+            GType    *param_types);
 
 /**
  * GCClosure:
  * @closure: the #GClosure
  * @callback: the callback function
  *
  * A #GCClosure is a specialization of #GClosure for C function callbacks.
  */
-typedef struct _GCClosure        GCClosure;
+typedef struct _GCClosure    GCClosure;
 
 
 /* --- structures --- */
 struct _GClosureNotifyData
 {
@@ -173,34 +173,34 @@
  * A #GClosure represents a callback supplied by the programmer.
  */
 struct _GClosure
 {
   /*< private >*/
-  volatile          guint    ref_count : 15;
+  volatile        guint  ref_count : 15;
   /* meta_marshal is not used anymore but must be zero for historical reasons
      as it was exposed in the G_CLOSURE_N_NOTIFIERS macro */
-  volatile          guint    meta_marshal_nouse : 1;
-  volatile          guint    n_guards : 1;
-  volatile          guint    n_fnotifiers : 2;  /* finalization notifiers */
-  volatile          guint    n_inotifiers : 8;  /* invalidation notifiers */
-  volatile          guint    in_inotify : 1;
-  volatile          guint    floating : 1;
+  volatile        guint  meta_marshal_nouse : 1;
+  volatile        guint  n_guards : 1;
+  volatile        guint  n_fnotifiers : 2;  /* finalization notifiers */
+  volatile        guint  n_inotifiers : 8;  /* invalidation notifiers */
+  volatile        guint  in_inotify : 1;
+  volatile        guint  floating : 1;
   /*< protected >*/
-  volatile          guint    derivative_flag : 1;
+  volatile          guint  derivative_flag : 1;
   /*< public >*/
-  volatile          guint    in_marshal : 1;
-  volatile          guint    is_invalid : 1;
+  volatile        guint  in_marshal : 1;
+  volatile        guint  is_invalid : 1;
 
-  /*< private >*/   void   (*marshal)  (GClosure       *closure,
-                        GValue /*out*/ *return_value,
-                        guint           n_param_values,
-                        const GValue   *param_values,
-                        gpointer        invocation_hint,
-                        gpointer        marshal_data);
+  /*< private >*/ void   (*marshal)  (GClosure       *closure,
+              GValue /*out*/ *return_value,
+              guint           n_param_values,
+              const GValue   *param_values,
+              gpointer        invocation_hint,
+              gpointer      marshal_data);
   /*< protected >*/ gpointer data;
 
-  /*< private >*/   GClosureNotifyData *notifiers;
+  /*< private >*/ GClosureNotifyData *notifiers;
 
   /* invariants/constraints:
    * - ->marshal and ->data are _invalid_ as soon as ->is_invalid==TRUE
    * - invocation of all inotifiers occours prior to fnotifiers
    * - order of inotifiers is random
@@ -220,76 +220,76 @@
 };
 
 
 /* --- prototypes --- */
 GLIB_AVAILABLE_IN_ALL
-GClosure* g_cclosure_new            (GCallback  callback_func,
-                         gpointer   user_data,
-                         GClosureNotify destroy_data);
+GClosure* g_cclosure_new      (GCallback  callback_func,
+             gpointer user_data,
+             GClosureNotify destroy_data);
 GLIB_AVAILABLE_IN_ALL
-GClosure* g_cclosure_new_swap           (GCallback  callback_func,
-                         gpointer   user_data,
-                         GClosureNotify destroy_data);
+GClosure* g_cclosure_new_swap     (GCallback  callback_func,
+             gpointer user_data,
+             GClosureNotify destroy_data);
 GLIB_AVAILABLE_IN_ALL
-GClosure* g_signal_type_cclosure_new        (GType          itype,
-                         guint          struct_offset);
+GClosure* g_signal_type_cclosure_new    (GType          itype,
+             guint          struct_offset);
 
 
 /* --- prototypes --- */
 GLIB_AVAILABLE_IN_ALL
-GClosure* g_closure_ref             (GClosure   *closure);
+GClosure* g_closure_ref       (GClosure *closure);
 GLIB_AVAILABLE_IN_ALL
-void      g_closure_sink            (GClosure   *closure);
+void    g_closure_sink      (GClosure *closure);
 GLIB_AVAILABLE_IN_ALL
-void      g_closure_unref           (GClosure   *closure);
+void    g_closure_unref     (GClosure *closure);
 /* intimidating */
 GLIB_AVAILABLE_IN_ALL
-GClosure* g_closure_new_simple          (guint       sizeof_closure,
-                         gpointer    data);
+GClosure* g_closure_new_simple      (guint     sizeof_closure,
+             gpointer  data);
 GLIB_AVAILABLE_IN_ALL
-void      g_closure_add_finalize_notifier   (GClosure       *closure,
-                         gpointer    notify_data,
-                         GClosureNotify  notify_func);
+void    g_closure_add_finalize_notifier (GClosure       *closure,
+             gpointer  notify_data,
+             GClosureNotify  notify_func);
 GLIB_AVAILABLE_IN_ALL
-void      g_closure_remove_finalize_notifier    (GClosure       *closure,
-                         gpointer    notify_data,
-                         GClosureNotify  notify_func);
+void    g_closure_remove_finalize_notifier  (GClosure       *closure,
+             gpointer  notify_data,
+             GClosureNotify  notify_func);
 GLIB_AVAILABLE_IN_ALL
-void      g_closure_add_invalidate_notifier (GClosure       *closure,
-                         gpointer    notify_data,
-                         GClosureNotify  notify_func);
+void    g_closure_add_invalidate_notifier (GClosure       *closure,
+             gpointer  notify_data,
+             GClosureNotify  notify_func);
 GLIB_AVAILABLE_IN_ALL
-void      g_closure_remove_invalidate_notifier  (GClosure       *closure,
-                         gpointer    notify_data,
-                         GClosureNotify  notify_func);
+void    g_closure_remove_invalidate_notifier  (GClosure       *closure,
+             gpointer  notify_data,
+             GClosureNotify  notify_func);
 GLIB_AVAILABLE_IN_ALL
-void      g_closure_add_marshal_guards      (GClosure   *closure,
-                         gpointer        pre_marshal_data,
-                         GClosureNotify  pre_marshal_notify,
-                         gpointer        post_marshal_data,
-                         GClosureNotify  post_marshal_notify);
+void    g_closure_add_marshal_guards    (GClosure *closure,
+             gpointer        pre_marshal_data,
+             GClosureNotify  pre_marshal_notify,
+             gpointer        post_marshal_data,
+             GClosureNotify  post_marshal_notify);
 GLIB_AVAILABLE_IN_ALL
-void      g_closure_set_marshal         (GClosure   *closure,
-                         GClosureMarshal marshal);
+void    g_closure_set_marshal     (GClosure *closure,
+             GClosureMarshal marshal);
 GLIB_AVAILABLE_IN_ALL
-void      g_closure_set_meta_marshal        (GClosure       *closure,
-                         gpointer    marshal_data,
-                         GClosureMarshal meta_marshal);
+void    g_closure_set_meta_marshal    (GClosure       *closure,
+             gpointer  marshal_data,
+             GClosureMarshal meta_marshal);
 GLIB_AVAILABLE_IN_ALL
-void      g_closure_invalidate          (GClosure   *closure);
+void    g_closure_invalidate      (GClosure *closure);
 GLIB_AVAILABLE_IN_ALL
-void      g_closure_invoke          (GClosure   *closure,
-                         GValue /*out*/ *return_value,
-                         guint       n_param_values,
-                         const GValue   *param_values,
-                         gpointer    invocation_hint);
+void    g_closure_invoke      (GClosure   *closure,
+             GValue /*out*/ *return_value,
+             guint     n_param_values,
+             const GValue *param_values,
+             gpointer  invocation_hint);
 
 /* FIXME:
-   OK:  data_object::destroy        -> closure_invalidate();
-   MIS: closure_invalidate()        -> disconnect(closure);
-   MIS: disconnect(closure)     -> (unlink) closure_unref();
-   OK:  closure_finalize()      -> g_free (data_string);
+   OK:  data_object::destroy    -> closure_invalidate();
+   MIS: closure_invalidate()    -> disconnect(closure);
+   MIS: disconnect(closure)   -> (unlink) closure_unref();
+   OK:  closure_finalize()    -> g_free (data_string);
 
    random remarks:
    - need marshaller repo with decent aliasing to base types
    - provide marshaller collection, virtually covering anything out there
 */
@@ -302,16 +302,16 @@
                                  gpointer      invocation_hint,
                                  gpointer      marshal_data);
 
 GLIB_AVAILABLE_IN_ALL
 void g_cclosure_marshal_generic_va (GClosure *closure,
-                    GValue   *return_value,
-                    gpointer  instance,
-                    va_list   args_list,
-                    gpointer  marshal_data,
-                    int       n_params,
-                    GType    *param_types);
+            GValue   *return_value,
+            gpointer  instance,
+            va_list   args_list,
+            gpointer  marshal_data,
+            int       n_params,
+            GType    *param_types);
 
 
 G_END_DECLS
 
 #endif /* __G_CLOSURE_H__ */
