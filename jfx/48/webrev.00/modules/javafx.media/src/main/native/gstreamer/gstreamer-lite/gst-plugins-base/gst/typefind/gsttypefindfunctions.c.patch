diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst/typefind/gsttypefindfunctions.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst/typefind/gsttypefindfunctions.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst/typefind/gsttypefindfunctions.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst/typefind/gsttypefindfunctions.c
@@ -53,11 +53,11 @@
 
 typedef struct
 {
   guint64 offset;
   const guint8 *data;
-  gint size;
+  guint size;
 } DataScanCtx;
 
 static inline void
 data_scan_ctx_advance (GstTypeFind * tf, DataScanCtx * c, guint bytes_to_skip)
 {
@@ -70,11 +70,11 @@
     c->size = 0;
   }
 }
 
 static inline gboolean
-data_scan_ctx_ensure_data (GstTypeFind * tf, DataScanCtx * c, gint min_len)
+data_scan_ctx_ensure_data (GstTypeFind * tf, DataScanCtx * c, guint min_len)
 {
   const guint8 *data;
   guint64 len;
   guint chunk_len = MAX (DATA_SCAN_CTX_CHUNK_SIZE, min_len);
 
@@ -110,10 +110,13 @@
 
 static inline gboolean
 data_scan_ctx_memcmp (GstTypeFind * tf, DataScanCtx * c, guint offset,
     const gchar * data, guint len)
 {
+  if (G_UNLIKELY (offset + len >= G_MAXUINT32))
+    return FALSE;
+
   if (!data_scan_ctx_ensure_data (tf, c, offset + len))
     return FALSE;
 
   return (memcmp (c->data + offset, data, len) == 0);
 }
@@ -277,12 +280,12 @@
 
 static void
 unicode_type_find (GstTypeFind * tf, const GstUnicodeTester * tester,
     guint n_tester, const char *media_type, gboolean require_bom)
 {
-  size_t n;
-  gint len = 4;
+  gsize n;
+  gsize len = 4;
   const guint8 *data = gst_type_find_peek (tf, 0, len);
   int prob = -1;
   const gint max_scan_size = 256 * 1024;
   int endianness = 0;
 
@@ -678,10 +681,25 @@
       xml_check_first_element (tf, "mpd", 3, FALSE)) {
     gst_type_find_suggest (tf, GST_TYPE_FIND_MAXIMUM, DASH_CAPS);
   }
 }
 
+/*** application/xges ****************************************************/
+
+static GstStaticCaps xges_caps = GST_STATIC_CAPS ("application/xges");
+
+#define XGES_CAPS gst_static_caps_get (&xges_caps)
+
+static void
+xges_type_find (GstTypeFind * tf, gpointer unused)
+{
+  if (xml_check_first_element (tf, "ges", 3, FALSE)) {
+    gst_type_find_suggest (tf, GST_TYPE_FIND_MAXIMUM, XGES_CAPS);
+  }
+}
+
+
 /*** application/sdp *********************************************************/
 
 static GstStaticCaps sdp_caps = GST_STATIC_CAPS ("application/sdp");
 
 #define SDP_CAPS (gst_static_caps_get(&sdp_caps))
@@ -1094,11 +1112,11 @@
 aac_type_find (GstTypeFind * tf, gpointer unused)
 {
   DataScanCtx c = { 0, NULL, 0 };
   GstTypeFindProbability best_probability = GST_TYPE_FIND_NONE;
   GstCaps *best_caps = NULL;
-  guint best_count = 0;
+  gint best_count = 0;
 
   while (c.offset < AAC_AMOUNT) {
     guint snc, len, offset, i;
 
     /* detect adts header or adif header.
@@ -1181,11 +1199,11 @@
         len = ((c.data[offset + 3] & 0x03) << 11) |
             (c.data[offset + 4] << 3) | ((c.data[offset + 5] & 0xe0) >> 5);
 
         if (len == 0 || !data_scan_ctx_ensure_data (tf, &c, offset + len + 6)) {
           GST_DEBUG ("Wrong sync or next frame not within reach, len=%u", len);
-        gst_type_find_suggest (tf, GST_TYPE_FIND_LIKELY, caps);
+          gst_type_find_suggest (tf, GST_TYPE_FIND_LIKELY, caps);
         } else {
           offset += len;
           /* find more aac sync to select correctly */
           /* check if there's a third/fourth/fifth/sixth ADTS frame, if there is a sixth frame, set probability to maximum:100% */
           for (i = 3; i <= 6; i++) {
@@ -1233,11 +1251,11 @@
             "mpegversion", G_TYPE_INT, 4,
             "stream-format", G_TYPE_STRING, "loas", NULL);
         best_count = count;
         best_probability = GST_TYPE_FIND_POSSIBLE - 10 + count * 3;
         if (best_probability >= GST_TYPE_FIND_LIKELY)
-        break;
+          break;
       }
     } else if (!memcmp (c.data, "ADIF", 4)) {
       /* ADIF header */
       gst_type_find_suggest_simple (tf, GST_TYPE_FIND_LIKELY, "audio/mpeg",
           "framed", G_TYPE_BOOLEAN, FALSE, "mpegversion", G_TYPE_INT, 4,
@@ -1596,14 +1614,14 @@
 
   /* a valid header right at the start makes it more likely
    * that this is actually plain mpeg-1 audio */
   if (prob > 0) {
     data = gst_type_find_peek (tf, 0, 4);       /* use min. frame size? */
-  if (data && mp3_type_frame_length_from_header (GST_READ_UINT32_BE (data),
-          &layer, NULL, NULL, NULL, NULL, 0) != 0) {
+    if (data && mp3_type_frame_length_from_header (GST_READ_UINT32_BE (data),
+            &layer, NULL, NULL, NULL, NULL, 0) != 0) {
       prob = MIN (prob + 10, GST_TYPE_FIND_MAXIMUM);
-  }
+    }
   }
 
   if (prob > 0)
     goto suggest;
 
@@ -2468,11 +2486,11 @@
       size = GST_MPEGTS_TYPEFIND_SYNC_SIZE;
     }
 
     /* Have at least MPEGTS_HDR_SIZE bytes at this point */
     if (IS_MPEGTS_HEADER (data)) {
-      gint p;
+      gsize p;
 
       GST_LOG ("possible mpeg-ts sync at offset %" G_GUINT64_FORMAT, skipped);
 
       for (p = 0; p < G_N_ELEMENTS (pack_sizes); p++) {
         gint found;
@@ -2690,11 +2708,11 @@
         pc_type = data & 0x02;
         pb_mode = c.data[1] & 0x20 >> 4;
         if (!pc_type && pb_mode)
           bad++;
         else
-        good++;
+          good++;
       } else
         bad++;
 
       /* FIXME: maybe bail out early if we get mostly bad syncs ? */
     }
@@ -2771,17 +2789,17 @@
         } else if (nut == 14 || nut == 20) {
           /* Sometimes we see NAL 14 or 20 without SSPS
            * if dropped into the middle of a stream -
            * just ignore those (don't add to bad count) */
           if (seen_ssps)
-          good++;
+            good++;
         } else {
-        /* reserved */
-        /* Theoretically these are good, since if they exist in the
-           stream it merely means that a newer backwards-compatible
-           h.264 stream.  But we should be identifying that separately. */
-        bad++;
+          /* reserved */
+          /* Theoretically these are good, since if they exist in the
+             stream it merely means that a newer backwards-compatible
+             h.264 stream.  But we should be identifying that separately. */
+          bad++;
         }
       } else {
         /* unspecified, application specific */
         /* don't consider these bad */
       }
@@ -2921,11 +2939,11 @@
   DataScanCtx c = { 0, NULL, 0 };
   gboolean seen_seq_at_0 = FALSE;
   gboolean seen_seq = FALSE;
   gboolean seen_gop = FALSE;
   guint64 last_pic_offset = 0;
-  guint num_pic_headers = 0;
+  gint num_pic_headers = 0;
   gint found = 0;
 
   while (c.offset < GST_MPEGVID_TYPEFIND_TRY_SYNC) {
     if (found >= GST_MPEGVID_TYPEFIND_TRY_PICTURES)
       break;
@@ -3120,11 +3138,11 @@
 static void
 q3gp_type_find (GstTypeFind * tf, gpointer unused)
 {
   const gchar *profile;
   guint32 ftyp_size = 0;
-  gint offset = 0;
+  guint32 offset = 0;
   const guint8 *data = NULL;
 
   if ((data = gst_type_find_peek (tf, 0, 12)) == NULL) {
     return;
   }
@@ -3147,16 +3165,16 @@
     ftyp_size = GST_READ_UINT32_BE (data);
   }
   if ((data = gst_type_find_peek (tf, 0, ftyp_size)) != NULL) {
     for (offset = 16; offset + 4 < ftyp_size; offset += 4) {
       if ((profile = q3gp_type_find_get_profile (data + offset))) {
-      gst_type_find_suggest_simple (tf, GST_TYPE_FIND_MAXIMUM,
-          "application/x-3gp", "profile", G_TYPE_STRING, profile, NULL);
-      return;
+        gst_type_find_suggest_simple (tf, GST_TYPE_FIND_MAXIMUM,
+            "application/x-3gp", "profile", G_TYPE_STRING, profile, NULL);
+        return;
+      }
     }
   }
-  }
 
   return;
 
 }
 
@@ -3362,12 +3380,12 @@
     if (size + offset >= G_MAXINT64)
       break;
     /* check compatible brands rather than ever expaning major brands above */
     if ((STRNCMP (&data[4], "ftyp", 4) == 0) && (size >= 16)) {
       data = gst_type_find_peek (tf, offset, size);
-        if (data == NULL)
-          goto done;
+      if (data == NULL)
+        goto done;
       new_offset = 12;
       while (new_offset + 4 <= size) {
         if (STRNCMP (&data[new_offset], "isom", 4) == 0 ||
             STRNCMP (&data[new_offset], "dash", 4) == 0 ||
             STRNCMP (&data[new_offset], "avc1", 4) == 0 ||
@@ -3599,11 +3617,11 @@
     if ((memcmp (data, "AMF", 3) == 0) && (data[3] > 10) && (data[3] < 14)) {
       mod_type = "dsmi-amf";
       probability = GST_TYPE_FIND_MAXIMUM;
       goto suggest_audio_mod_caps;
     }
-        /* IT */
+    /* IT */
     if (memcmp (data, "IMPM", 4) == 0) {
       mod_type = "it";
       probability = GST_TYPE_FIND_MAXIMUM;
       goto suggest_audio_mod_caps;
     }
@@ -3629,17 +3647,17 @@
     if (memcmp (data, "DDMF", 4) == 0) {
       mod_type = "dmf";
       probability = GST_TYPE_FIND_MAXIMUM;
       goto suggest_audio_mod_caps;
     }
-        /* MED */
+    /* MED */
     if ((memcmp (data, "MMD0", 4) == 0) || (memcmp (data, "MMD1", 4) == 0)) {
       mod_type = "med";
       probability = GST_TYPE_FIND_MAXIMUM;
       goto suggest_audio_mod_caps;
     }
-        /* MTM */
+    /* MTM */
     if (memcmp (data, "MTM", 3) == 0) {
       mod_type = "mtm";
       probability = GST_TYPE_FIND_MAXIMUM;
       goto suggest_audio_mod_caps;
     }
@@ -3698,11 +3716,11 @@
     /* UMX */
     if (memcmp (data, "\xC1\x83\x2A\x9E", 4) == 0) {
       mod_type = "umx";
       probability = GST_TYPE_FIND_POSSIBLE;
       goto suggest_audio_mod_caps;
-  }
+    }
   }
   /* FAR (Farandole) (secondary detection) */
   if ((data = gst_type_find_peek (tf, 44, 3)) != NULL) {
     if (memcmp (data, "\x0D\x0A\x1A", 3) == 0) {
       mod_type = "far";
@@ -3812,50 +3830,50 @@
     return;
   }
 
   length = gst_type_find_get_length (tf);
 
-    /* try detecting the charset */
+  /* try detecting the charset */
   data = gst_type_find_peek (tf, 0, 3);
 
-    if (data == NULL)
-      return;
+  if (data == NULL)
+    return;
 
-    /* look for a possible BOM */
+  /* look for a possible BOM */
   if (data[0] == 0xEF && data[1] == 0xBB && data[2] == 0xBF)
     utf8_bom_detected = TRUE;
   else if (data[0] == 0xFF && data[1] == 0xFE)
     data_endianness = G_LITTLE_ENDIAN;
   else if (data[0] == 0xFE && data[1] == 0xFF)
     data_endianness = G_BIG_ENDIAN;
   else
     return;
 
-      /* try a default that should be enough */
-      if (length == 0)
-        length = 512;
+  /* try a default that should be enough */
+  if (length == 0)
+    length = 512;
   else if (length < 64)
     return;
   else                          /* the first few bytes should be enough */
     length = MIN (1024, length);
 
-      data = gst_type_find_peek (tf, 0, length);
+  data = gst_type_find_peek (tf, 0, length);
 
   if (data == NULL)
     return;
 
-        /* skip the BOM */
-        data += 2;
-        length -= 2;
+  /* skip the BOM */
+  data += 2;
+  length -= 2;
 
   if (utf8_bom_detected) {
     /* skip last byte of the BOM */
     data++;
     length--;
 
     if (xml_check_first_element_from_data (data, length,
-                  "SmoothStreamingMedia", 20, TRUE))
+            "SmoothStreamingMedia", 20, TRUE))
       gst_type_find_suggest (tf, GST_TYPE_FIND_MAXIMUM, MSS_MANIFEST_CAPS);
   } else {
     length = GST_ROUND_DOWN_2 (length);
 
     /* convert to native endian UTF-16 */
@@ -3865,14 +3883,14 @@
     utf8 = g_utf16_to_utf8 (utf16_ne, length / 2, &n_read, &size, NULL);
     if (utf8 != NULL && n_read > 0) {
       if (xml_check_first_element_from_data ((const guint8 *) utf8, size,
               "SmoothStreamingMedia", 20, TRUE))
         gst_type_find_suggest (tf, GST_TYPE_FIND_MAXIMUM, MSS_MANIFEST_CAPS);
-        }
-    g_free (utf8);
-      }
     }
+    g_free (utf8);
+  }
+}
 
 /*** image/jpeg ***/
 
 #define JPEG_MARKER_IS_START_OF_FRAME(x) \
     ((x)>=0xc0 && (x) <= 0xcf && (x)!=0xc4 && (x)!=0xc8 && (x)!=0xcc)
@@ -4359,34 +4377,39 @@
 ebml_parse_chunk (GstTypeFind * tf, DataScanCtx * ctx, guint32 chunk_id,
     guint chunk_size, GstMatroskaInfo * info, guint depth)
 {                               /* FIXME: make sure input size is clipped to 32 bit */
   static const gchar SPACES[] = "                ";
   DataScanCtx c = *ctx;
-  guint64 element_size;
+  guint64 element_size = 0;
   guint32 id, hdr_len;
 
   if (depth >= 8)               /* keep SPACES large enough for depth */
     return FALSE;
 
   while (chunk_size > 0) {
     if (c.offset > EBML_MAX_LEN || !data_scan_ctx_ensure_data (tf, &c, 64))
-    return FALSE;
+      return FALSE;
 
     hdr_len = ebml_read_chunk_header (tf, &c, chunk_size, &id, &element_size);
     if (hdr_len == 0)
-    return FALSE;
+      return FALSE;
 
     g_assert (hdr_len <= chunk_size);
     chunk_size -= hdr_len;
 
     if (element_size > chunk_size)
-    return FALSE;
+      return FALSE;
 
     GST_DEBUG ("%s %08x, size %" G_GUINT64_FORMAT " / %" G_GUINT64_FORMAT,
         SPACES + sizeof (SPACES) - 1 - (2 * depth), id, element_size,
         hdr_len + element_size);
 
+    if (element_size >= G_MAXUINT32) {
+      GST_DEBUG ("Chunk too big for typefinding");
+      return FALSE;
+    }
+
     if (!data_scan_ctx_ensure_data (tf, &c, element_size)) {
       GST_DEBUG ("not enough data");
       return FALSE;
     }
 
@@ -4399,11 +4422,11 @@
         break;
       case MATROSKA_SEGMENT:
         GST_LOG ("parsing segment");
         ebml_parse_chunk (tf, &c, id, element_size, info, depth + 1);
         GST_LOG ("parsed segment, done");
-  return FALSE;
+        return FALSE;
       case MATROSKA_TRACKS:
         GST_LOG ("parsing tracks");
         info->tracks_ok =
             ebml_parse_chunk (tf, &c, id, element_size, info, depth + 1);
         GST_LOG ("parsed tracks: %s, done (after %" G_GUINT64_FORMAT " bytes)",
@@ -5236,10 +5259,32 @@
       gst_type_find_suggest (tf, GST_TYPE_FIND_MAXIMUM, DIRAC_CAPS);
     }
   }
 }
 
+/*** audio/x-tap-tap ***/
+
+/* NOTE: we cannot replace this function with TYPE_FIND_REGISTER_START_WITH,
+ * as it is only possible to register one typefind factory per 'name'
+ * (which is in this case the caps), and the first one would be replaced by
+ * the second one. */
+static GstStaticCaps tap_caps = GST_STATIC_CAPS ("audio/x-tap-tap");
+
+#define TAP_CAPS (gst_static_caps_get(&tap_caps))
+static void
+tap_type_find (GstTypeFind * tf, gpointer unused)
+{
+  const guint8 *data = gst_type_find_peek (tf, 0, 16);
+
+  if (data) {
+    if (memcmp (data, "C64-TAPE-RAW", 12) == 0
+        || memcmp (data, "C16-TAPE-RAW", 12) == 0) {
+      gst_type_find_suggest (tf, GST_TYPE_FIND_MAXIMUM, TAP_CAPS);
+    }
+  }
+}
+
 /*** video/vivo ***/
 
 static GstStaticCaps vivo_caps = GST_STATIC_CAPS ("video/vivo");
 
 #define VIVO_CAPS gst_static_caps_get(&vivo_caps)
@@ -5613,10 +5658,36 @@
   }
 
   g_free (str);
 }
 
+/*** application/x-mcc ***/
+static GstStaticCaps mcc_caps = GST_STATIC_CAPS ("application/x-mcc");
+
+#define MCC_CAPS gst_static_caps_get(&mcc_caps)
+
+static void
+mcc_type_find (GstTypeFind * tf, gpointer private)
+{
+  const guint8 *data;
+
+  data = gst_type_find_peek (tf, 0, 31);
+
+  if (data == NULL)
+    return;
+
+  /* MCC files always start with this followed by the version */
+  if (memcmp (data, "File Format=MacCaption_MCC V", 28) != 0 ||
+      !g_ascii_isdigit (data[28]) || data[29] != '.' ||
+      !g_ascii_isdigit (data[30])) {
+    return;
+  }
+
+  gst_type_find_suggest_simple (tf, GST_TYPE_FIND_MAXIMUM,
+      "application/x-mcc", "version", G_TYPE_INT, data[28] - '0', NULL);
+}
+
 /*** video/x-pva ***/
 
 static GstStaticCaps pva_caps = GST_STATIC_CAPS ("video/x-pva");
 
 #define PVA_CAPS gst_static_caps_get(&pva_caps)
@@ -5783,10 +5854,15 @@
   TYPE_FIND_REGISTER_START_WITH (plugin, "video/x-vcd", GST_RANK_PRIMARY,
       "dat", "\000\377\377\377\377\377\377\377\377\377\377\000", 12,
       GST_TYPE_FIND_MAXIMUM);
   TYPE_FIND_REGISTER_START_WITH (plugin, "audio/x-imelody", GST_RANK_PRIMARY,
       "imy,ime,imelody", "BEGIN:IMELODY", 13, GST_TYPE_FIND_MAXIMUM);
+  TYPE_FIND_REGISTER_START_WITH (plugin, "application/x-scc", GST_RANK_PRIMARY,
+      "scc", "Scenarist_SCC V1.0", 18, GST_TYPE_FIND_MAXIMUM);
+  TYPE_FIND_REGISTER (plugin, "application/x-mcc", GST_RANK_PRIMARY,
+      mcc_type_find, "mcc", MCC_CAPS, NULL, NULL);
+
 #if 0
   TYPE_FIND_REGISTER_START_WITH (plugin, "video/x-smoke", GST_RANK_PRIMARY,
       NULL, "\x80smoke\x00\x01\x00", 6, GST_TYPE_FIND_MAXIMUM);
 #endif
   TYPE_FIND_REGISTER (plugin, "audio/midi", GST_RANK_PRIMARY, mid_type_find,
@@ -5861,10 +5937,12 @@
   TYPE_FIND_REGISTER_START_WITH (plugin, "application/x-pn-realaudio",
       GST_RANK_SECONDARY, "ra,ram,rm,rmvb", ".ra\375", 4,
       GST_TYPE_FIND_MAXIMUM);
   TYPE_FIND_REGISTER (plugin, "application/x-shockwave-flash",
       GST_RANK_SECONDARY, swf_type_find, "swf,swfl", SWF_CAPS, NULL, NULL);
+  TYPE_FIND_REGISTER (plugin, "application/xges",
+      GST_RANK_PRIMARY, xges_type_find, "xges", XGES_CAPS, NULL, NULL);
   TYPE_FIND_REGISTER (plugin, "application/dash+xml",
       GST_RANK_PRIMARY, dash_mpd_type_find, "mpd,MPD", DASH_CAPS, NULL, NULL);
   TYPE_FIND_REGISTER (plugin, "application/vnd.ms-sstr+xml",
       GST_RANK_PRIMARY, mss_manifest_type_find, NULL, MSS_MANIFEST_CAPS, NULL,
       NULL);
@@ -6084,15 +6162,20 @@
 
   TYPE_FIND_REGISTER (plugin, "audio/audible", GST_RANK_MARGINAL,
       aa_type_find, "aa,aax", AA_CAPS, NULL, NULL);
 #endif // GSTREAMER_LITE
 
+  TYPE_FIND_REGISTER (plugin, "audio/x-tap-tap", GST_RANK_PRIMARY,
+      tap_type_find, "tap", TAP_CAPS, NULL, NULL);
+  TYPE_FIND_REGISTER_START_WITH (plugin, "audio/x-tap-dmp",
+      GST_RANK_SECONDARY, "dmp", "DC2N-TAP-RAW", 12, GST_TYPE_FIND_LIKELY);
+
   return TRUE;
 }
 
 #ifndef GSTREAMER_LITE
 GST_PLUGIN_DEFINE (GST_VERSION_MAJOR,
     GST_VERSION_MINOR,
     typefindfunctions,
     "default typefind functions",
     plugin_init, VERSION, GST_LICENSE, GST_PACKAGE_NAME, GST_PACKAGE_ORIGIN)
-#endif // GSTREAMER_LITE
+#endif // GSTREAMER_LITE
