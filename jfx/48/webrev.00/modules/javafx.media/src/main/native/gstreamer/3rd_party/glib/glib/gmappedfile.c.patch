diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gmappedfile.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gmappedfile.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gmappedfile.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gmappedfile.c
@@ -105,11 +105,11 @@
   g_slice_free (GMappedFile, file);
 }
 
 static GMappedFile*
 mapped_file_new_from_fd (int           fd,
-             gboolean      writable,
+       gboolean      writable,
                          const gchar  *filename,
                          GError      **error)
 {
   GMappedFile *file;
   struct stat st;
@@ -125,15 +125,15 @@
 
       g_set_error (error,
                    G_FILE_ERROR,
                    g_file_error_from_errno (save_errno),
                    _("Failed to get attributes of file '%s%s%s%s': fstat() failed: %s"),
-           display_filename ? display_filename : "fd",
-           display_filename ? "' " : "",
-           display_filename ? display_filename : "",
-           display_filename ? "'" : "",
-           g_strerror (save_errno));
+       display_filename ? display_filename : "fd",
+       display_filename ? "' " : "",
+       display_filename ? display_filename : "",
+       display_filename ? "'" : "",
+       g_strerror (save_errno));
       g_free (display_filename);
       goto out;
     }
 
   /* mmap() on size 0 will fail with EINVAL, so we avoid calling mmap()
@@ -148,58 +148,58 @@
     }
 
   file->contents = MAP_FAILED;
 
 #ifdef HAVE_MMAP
-  if (st.st_size > G_MAXSIZE)
+  if (sizeof (st.st_size) > sizeof (gsize) && st.st_size > (off_t) G_MAXSIZE)
     {
       errno = EINVAL;
     }
   else
     {
       file->length = (gsize) st.st_size;
       file->contents = (gchar *) mmap (NULL,  file->length,
-                       writable ? PROT_READ|PROT_WRITE : PROT_READ,
-                       MAP_PRIVATE, fd, 0);
+               writable ? PROT_READ|PROT_WRITE : PROT_READ,
+               MAP_PRIVATE, fd, 0);
     }
 #endif
 #ifdef G_OS_WIN32
   file->length = st.st_size;
   file->mapping = CreateFileMapping ((HANDLE) _get_osfhandle (fd), NULL,
-                     writable ? PAGE_WRITECOPY : PAGE_READONLY,
-                     0, 0,
-                     NULL);
+             writable ? PAGE_WRITECOPY : PAGE_READONLY,
+             0, 0,
+             NULL);
   if (file->mapping != NULL)
     {
       file->contents = MapViewOfFile (file->mapping,
-                      writable ? FILE_MAP_COPY : FILE_MAP_READ,
-                      0, 0,
-                      0);
+              writable ? FILE_MAP_COPY : FILE_MAP_READ,
+              0, 0,
+              0);
       if (file->contents == NULL)
-    {
-      file->contents = MAP_FAILED;
-      CloseHandle (file->mapping);
-      file->mapping = NULL;
-    }
+  {
+    file->contents = MAP_FAILED;
+    CloseHandle (file->mapping);
+    file->mapping = NULL;
+  }
     }
 #endif
 
 
   if (file->contents == MAP_FAILED)
     {
       int save_errno = errno;
       gchar *display_filename = filename ? g_filename_display_name (filename) : NULL;
 
       g_set_error (error,
-           G_FILE_ERROR,
-           g_file_error_from_errno (save_errno),
-           _("Failed to map %s%s%s%s: mmap() failed: %s"),
-           display_filename ? display_filename : "fd",
-           display_filename ? "' " : "",
-           display_filename ? display_filename : "",
-           display_filename ? "'" : "",
-           g_strerror (save_errno));
+       G_FILE_ERROR,
+       g_file_error_from_errno (save_errno),
+       _("Failed to map %s%s%s%s: mmap() failed: %s"),
+       display_filename ? display_filename : "fd",
+       display_filename ? "' " : "",
+       display_filename ? display_filename : "",
+       display_filename ? "'" : "",
+       g_strerror (save_errno));
       g_free (display_filename);
       goto out;
     }
 
   return file;
@@ -239,12 +239,12 @@
  *
  * Since: 2.8
  */
 GMappedFile *
 g_mapped_file_new (const gchar  *filename,
-           gboolean      writable,
-           GError      **error)
+       gboolean      writable,
+       GError      **error)
 {
   GMappedFile *file;
   int fd;
 
   g_return_val_if_fail (filename != NULL, NULL);
@@ -259,11 +259,11 @@
       g_set_error (error,
                    G_FILE_ERROR,
                    g_file_error_from_errno (save_errno),
                    _("Failed to open file '%s': open() failed: %s"),
                    display_filename,
-           g_strerror (save_errno));
+       g_strerror (save_errno));
       g_free (display_filename);
       return NULL;
     }
 
   file = mapped_file_new_from_fd (fd, writable, filename, error);
@@ -297,12 +297,12 @@
  *
  * Since: 2.32
  */
 GMappedFile *
 g_mapped_file_new_from_fd (gint          fd,
-               gboolean      writable,
-               GError      **error)
+         gboolean      writable,
+         GError      **error)
 {
   return mapped_file_new_from_fd (fd, writable, NULL, error);
 }
 
 /**
@@ -420,9 +420,9 @@
 g_mapped_file_get_bytes (GMappedFile *file)
 {
   g_return_val_if_fail (file != NULL, NULL);
 
   return g_bytes_new_with_free_func (file->contents,
-                     file->length,
-                     (GDestroyNotify) g_mapped_file_unref,
-                     g_mapped_file_ref (file));
+             file->length,
+             (GDestroyNotify) g_mapped_file_unref,
+             g_mapped_file_ref (file));
 }
