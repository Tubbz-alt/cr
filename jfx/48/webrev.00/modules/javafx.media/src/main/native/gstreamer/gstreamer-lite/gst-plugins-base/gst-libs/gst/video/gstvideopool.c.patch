diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/gstvideopool.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/gstvideopool.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/gstvideopool.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/gstvideopool.c
@@ -14,10 +14,13 @@
  * You should have received a copy of the GNU Library General Public
  * License along with this library; if not, write to the
  * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
  * Boston, MA 02110-1301, USA.
  */
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
 
 #include "gst/video/gstvideometa.h"
 #include "gst/video/gstvideopool.h"
 
 
@@ -92,26 +95,23 @@
 }
 
 /* bufferpool */
 struct _GstVideoBufferPoolPrivate
 {
-  GstCaps *caps;
   GstVideoInfo info;
   GstVideoAlignment video_align;
   gboolean add_videometa;
   gboolean need_alignment;
   GstAllocator *allocator;
   GstAllocationParams params;
 };
 
 static void gst_video_buffer_pool_finalize (GObject * object);
 
-#define GST_VIDEO_BUFFER_POOL_GET_PRIVATE(obj)  \
-   (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GST_TYPE_VIDEO_BUFFER_POOL, GstVideoBufferPoolPrivate))
-
 #define gst_video_buffer_pool_parent_class parent_class
-G_DEFINE_TYPE (GstVideoBufferPool, gst_video_buffer_pool, GST_TYPE_BUFFER_POOL);
+G_DEFINE_TYPE_WITH_PRIVATE (GstVideoBufferPool, gst_video_buffer_pool,
+    GST_TYPE_BUFFER_POOL);
 
 static const gchar **
 video_buffer_pool_get_options (GstBufferPool * pool)
 {
   static const gchar *options[] = { GST_BUFFER_POOL_OPTION_VIDEO_META,
@@ -152,14 +152,10 @@
   width = info.width;
   height = info.height;
 
   GST_LOG_OBJECT (pool, "%dx%d, caps %" GST_PTR_FORMAT, width, height, caps);
 
-  if (priv->caps)
-    gst_caps_unref (priv->caps);
-  priv->caps = gst_caps_ref (caps);
-
   priv->params = params;
   if (priv->allocator)
     gst_object_unref (priv->allocator);
   if ((priv->allocator = allocator))
     gst_object_ref (allocator);
@@ -226,11 +222,12 @@
     return FALSE;
   }
 wrong_size:
   {
     GST_WARNING_OBJECT (pool,
-        "Provided size is to small for the caps: %u", size);
+        "Provided size is to small for the caps: %u < %" G_GSIZE_FORMAT, size,
+        info.size);
     return FALSE;
   }
 failed_to_align:
   {
     GST_WARNING_OBJECT (pool, "Failed to align");
@@ -299,12 +296,10 @@
 gst_video_buffer_pool_class_init (GstVideoBufferPoolClass * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
   GstBufferPoolClass *gstbufferpool_class = (GstBufferPoolClass *) klass;
 
-  g_type_class_add_private (klass, sizeof (GstVideoBufferPoolPrivate));
-
   gobject_class->finalize = gst_video_buffer_pool_finalize;
 
   gstbufferpool_class->get_options = video_buffer_pool_get_options;
   gstbufferpool_class->set_config = video_buffer_pool_set_config;
   gstbufferpool_class->alloc_buffer = video_buffer_pool_alloc;
@@ -314,24 +309,21 @@
 }
 
 static void
 gst_video_buffer_pool_init (GstVideoBufferPool * pool)
 {
-  pool->priv = GST_VIDEO_BUFFER_POOL_GET_PRIVATE (pool);
+  pool->priv = gst_video_buffer_pool_get_instance_private (pool);
 }
 
 static void
 gst_video_buffer_pool_finalize (GObject * object)
 {
   GstVideoBufferPool *pool = GST_VIDEO_BUFFER_POOL_CAST (object);
   GstVideoBufferPoolPrivate *priv = pool->priv;
 
   GST_LOG_OBJECT (pool, "finalize video buffer pool %p", pool);
 
-  if (priv->caps)
-    gst_caps_unref (priv->caps);
-
   if (priv->allocator)
     gst_object_unref (priv->allocator);
 
   G_OBJECT_CLASS (gst_video_buffer_pool_parent_class)->finalize (object);
 }
