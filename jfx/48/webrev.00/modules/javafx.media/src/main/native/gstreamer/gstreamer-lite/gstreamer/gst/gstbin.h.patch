diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstbin.h b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstbin.h
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstbin.h
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstbin.h
@@ -39,26 +39,26 @@
 #define GST_BIN_CAST(obj)        ((GstBin*)(obj))
 
 /**
  * GstBinFlags:
  * @GST_BIN_FLAG_NO_RESYNC: don't resync a state change when elements are
- *             added or linked in the bin (Since 1.0.5)
+ *             added or linked in the bin (Since: 1.0.5)
  * @GST_BIN_FLAG_STREAMS_AWARE: Indicates whether the bin can handle elements
  *             that add/remove source pads at any point in time without
- *             first posting a no-more-pads signal (Since 1.10)
+ *             first posting a no-more-pads signal (Since: 1.10)
  * @GST_BIN_FLAG_LAST: the last enum in the series of flags for bins.
  * Derived classes can use this as first value in a list of flags.
  *
  * GstBinFlags are a set of flags specific to bins. Most are set/used
  * internally. They can be checked using the GST_OBJECT_FLAG_IS_SET () macro,
  * and (un)set using GST_OBJECT_FLAG_SET () and GST_OBJECT_FLAG_UNSET ().
  */
 typedef enum {
-  GST_BIN_FLAG_NO_RESYNC    = (GST_ELEMENT_FLAG_LAST << 0),
-  GST_BIN_FLAG_STREAMS_AWARE    = (GST_ELEMENT_FLAG_LAST << 1),
+  GST_BIN_FLAG_NO_RESYNC  = (GST_ELEMENT_FLAG_LAST << 0),
+  GST_BIN_FLAG_STREAMS_AWARE  = (GST_ELEMENT_FLAG_LAST << 1),
   /* padding */
-  GST_BIN_FLAG_LAST     = (GST_ELEMENT_FLAG_LAST << 5)
+  GST_BIN_FLAG_LAST   = (GST_ELEMENT_FLAG_LAST << 5)
 } GstBinFlags;
 
 /**
  * GST_BIN_IS_NO_RESYNC:
  * @bin: A #GstBin
@@ -78,25 +78,25 @@
  * GST_BIN_NUMCHILDREN:
  * @bin: a #GstBin
  *
  * Gets the number of children in a bin.
  */
-#define GST_BIN_NUMCHILDREN(bin)    (GST_BIN_CAST(bin)->numchildren)
+#define GST_BIN_NUMCHILDREN(bin)  (GST_BIN_CAST(bin)->numchildren)
 /**
  * GST_BIN_CHILDREN:
  * @bin: a #GstBin
  *
  * Gets the list with children in a bin.
  */
-#define GST_BIN_CHILDREN(bin)       (GST_BIN_CAST(bin)->children)
+#define GST_BIN_CHILDREN(bin)   (GST_BIN_CAST(bin)->children)
 /**
  * GST_BIN_CHILDREN_COOKIE:
  * @bin: a #GstBin
  *
  * Gets the children cookie that watches the children list.
  */
-#define GST_BIN_CHILDREN_COOKIE(bin)    (GST_BIN_CAST(bin)->children_cookie)
+#define GST_BIN_CHILDREN_COOKIE(bin)  (GST_BIN_CAST(bin)->children_cookie)
 
 /**
  * GstBin:
  * @numchildren: the number of children in this bin
  * @children: (element-type Gst.Element): the list of children in this bin
@@ -111,18 +111,18 @@
  *
  * The GstBin base class. Subclasses can access these fields provided
  * the LOCK is taken.
  */
 struct _GstBin {
-  GstElement     element;
+  GstElement   element;
 
   /*< public >*/ /* with LOCK */
   /* our children, subclass are supposed to update these
    * fields to reflect their state with _iterate_*() */
-  gint       numchildren;
-  GList     *children;
-  guint32    children_cookie;
+  gint     numchildren;
+  GList   *children;
+  guint32  children_cookie;
 
   GstBus        *child_bus;
   GList         *messages;
 
   gboolean   polling;
@@ -167,19 +167,19 @@
 
   /*< private >*/
   GThreadPool  *pool; /* deprecated */
 
   /* signals */
-  void      (*element_added)    (GstBin *bin, GstElement *child);
-  void      (*element_removed)  (GstBin *bin, GstElement *child);
+  void    (*element_added)  (GstBin *bin, GstElement *child);
+  void    (*element_removed)  (GstBin *bin, GstElement *child);
 
   /*< public >*/
   /* virtual methods for subclasses */
-  gboolean  (*add_element)      (GstBin *bin, GstElement *element);
-  gboolean  (*remove_element)   (GstBin *bin, GstElement *element);
+  gboolean  (*add_element)    (GstBin *bin, GstElement *element);
+  gboolean  (*remove_element) (GstBin *bin, GstElement *element);
 
-  void      (*handle_message)   (GstBin *bin, GstMessage *message);
+  void    (*handle_message) (GstBin *bin, GstMessage *message);
 
   /*< private >*/
   /* signal */
   gboolean  (*do_latency)           (GstBin *bin);
 
@@ -191,53 +191,53 @@
   /*< private >*/
   gpointer _gst_reserved[GST_PADDING-2];
 };
 
 GST_API
-GType       gst_bin_get_type        (void);
+GType   gst_bin_get_type    (void);
 
 GST_API
-GstElement* gst_bin_new         (const gchar *name);
+GstElement* gst_bin_new     (const gchar *name);
 
 /* add and remove elements from the bin */
 
 GST_API
-gboolean    gst_bin_add         (GstBin *bin, GstElement *element);
+gboolean  gst_bin_add     (GstBin *bin, GstElement *element);
 
 GST_API
-gboolean    gst_bin_remove          (GstBin *bin, GstElement *element);
+gboolean  gst_bin_remove      (GstBin *bin, GstElement *element);
 
 /* retrieve a single child */
 
 GST_API
-GstElement* gst_bin_get_by_name      (GstBin *bin, const gchar *name);
+GstElement* gst_bin_get_by_name    (GstBin *bin, const gchar *name);
 
 GST_API
 GstElement* gst_bin_get_by_name_recurse_up   (GstBin *bin, const gchar *name);
 
 GST_API
-GstElement* gst_bin_get_by_interface     (GstBin *bin, GType iface);
+GstElement* gst_bin_get_by_interface   (GstBin *bin, GType iface);
 
 /* retrieve multiple children */
 
 GST_API
-GstIterator*    gst_bin_iterate_elements     (GstBin *bin);
+GstIterator*    gst_bin_iterate_elements   (GstBin *bin);
 
 GST_API
-GstIterator*    gst_bin_iterate_sorted       (GstBin *bin);
+GstIterator*    gst_bin_iterate_sorted     (GstBin *bin);
 
 GST_API
-GstIterator*    gst_bin_iterate_recurse      (GstBin *bin);
+GstIterator*    gst_bin_iterate_recurse    (GstBin *bin);
 
 GST_API
-GstIterator*    gst_bin_iterate_sinks        (GstBin *bin);
+GstIterator*  gst_bin_iterate_sinks    (GstBin *bin);
 
 GST_API
-GstIterator*    gst_bin_iterate_sources      (GstBin *bin);
+GstIterator*  gst_bin_iterate_sources    (GstBin *bin);
 
 GST_API
-GstIterator*    gst_bin_iterate_all_by_interface (GstBin *bin, GType iface);
+GstIterator*  gst_bin_iterate_all_by_interface (GstBin *bin, GType iface);
 
 /* latency */
 
 GST_API
 gboolean        gst_bin_recalculate_latency      (GstBin * bin);
