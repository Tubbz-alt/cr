diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gparamspecs.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gparamspecs.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gparamspecs.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gparamspecs.c
@@ -51,12 +51,12 @@
  * characters can be letters, numbers or a '-'.
  * All other characters are replaced by a '-' during construction.
  */
 
 
-#define G_FLOAT_EPSILON     (1e-30)
-#define G_DOUBLE_EPSILON    (1e-90)
+#define G_FLOAT_EPSILON   (1e-30)
+#define G_DOUBLE_EPSILON  (1e-90)
 
 
 /* --- param spec functions --- */
 static void
 param_char_init (GParamSpec *pspec)
@@ -68,18 +68,18 @@
   cspec->default_value = 0;
 }
 
 static void
 param_char_set_default (GParamSpec *pspec,
-            GValue     *value)
+      GValue     *value)
 {
   value->data[0].v_int = G_PARAM_SPEC_CHAR (pspec)->default_value;
 }
 
 static gboolean
 param_char_validate (GParamSpec *pspec,
-             GValue     *value)
+         GValue     *value)
 {
   GParamSpecChar *cspec = G_PARAM_SPEC_CHAR (pspec);
   gint oval = value->data[0].v_int;
 
   value->data[0].v_int = CLAMP (value->data[0].v_int, cspec->minimum, cspec->maximum);
@@ -97,18 +97,18 @@
   uspec->default_value = 0;
 }
 
 static void
 param_uchar_set_default (GParamSpec *pspec,
-             GValue     *value)
+       GValue     *value)
 {
   value->data[0].v_uint = G_PARAM_SPEC_UCHAR (pspec)->default_value;
 }
 
 static gboolean
 param_uchar_validate (GParamSpec *pspec,
-              GValue     *value)
+          GValue     *value)
 {
   GParamSpecUChar *uspec = G_PARAM_SPEC_UCHAR (pspec);
   guint oval = value->data[0].v_uint;
 
   value->data[0].v_uint = CLAMP (value->data[0].v_uint, uspec->minimum, uspec->maximum);
@@ -116,18 +116,18 @@
   return value->data[0].v_uint != oval;
 }
 
 static void
 param_boolean_set_default (GParamSpec *pspec,
-               GValue     *value)
+         GValue     *value)
 {
   value->data[0].v_int = G_PARAM_SPEC_BOOLEAN (pspec)->default_value;
 }
 
 static gboolean
 param_boolean_validate (GParamSpec *pspec,
-            GValue     *value)
+      GValue     *value)
 {
   gint oval = value->data[0].v_int;
 
   value->data[0].v_int = value->data[0].v_int != FALSE;
 
@@ -144,18 +144,18 @@
   ispec->default_value = 0;
 }
 
 static void
 param_int_set_default (GParamSpec *pspec,
-               GValue     *value)
+           GValue     *value)
 {
   value->data[0].v_int = G_PARAM_SPEC_INT (pspec)->default_value;
 }
 
 static gboolean
 param_int_validate (GParamSpec *pspec,
-            GValue     *value)
+        GValue     *value)
 {
   GParamSpecInt *ispec = G_PARAM_SPEC_INT (pspec);
   gint oval = value->data[0].v_int;
 
   value->data[0].v_int = CLAMP (value->data[0].v_int, ispec->minimum, ispec->maximum);
@@ -163,12 +163,12 @@
   return value->data[0].v_int != oval;
 }
 
 static gint
 param_int_values_cmp (GParamSpec   *pspec,
-              const GValue *value1,
-              const GValue *value2)
+          const GValue *value1,
+          const GValue *value2)
 {
   if (value1->data[0].v_int < value2->data[0].v_int)
     return -1;
   else
     return value1->data[0].v_int > value2->data[0].v_int;
@@ -184,18 +184,18 @@
   uspec->default_value = 0;
 }
 
 static void
 param_uint_set_default (GParamSpec *pspec,
-            GValue     *value)
+      GValue     *value)
 {
   value->data[0].v_uint = G_PARAM_SPEC_UINT (pspec)->default_value;
 }
 
 static gboolean
 param_uint_validate (GParamSpec *pspec,
-             GValue     *value)
+         GValue     *value)
 {
   GParamSpecUInt *uspec = G_PARAM_SPEC_UINT (pspec);
   guint oval = value->data[0].v_uint;
 
   value->data[0].v_uint = CLAMP (value->data[0].v_uint, uspec->minimum, uspec->maximum);
@@ -203,12 +203,12 @@
   return value->data[0].v_uint != oval;
 }
 
 static gint
 param_uint_values_cmp (GParamSpec   *pspec,
-               const GValue *value1,
-               const GValue *value2)
+           const GValue *value1,
+           const GValue *value2)
 {
   if (value1->data[0].v_uint < value2->data[0].v_uint)
     return -1;
   else
     return value1->data[0].v_uint > value2->data[0].v_uint;
@@ -229,18 +229,18 @@
   lspec->default_value = 0;
 }
 
 static void
 param_long_set_default (GParamSpec *pspec,
-            GValue     *value)
+      GValue     *value)
 {
   value->data[0].v_long = G_PARAM_SPEC_LONG (pspec)->default_value;
 }
 
 static gboolean
 param_long_validate (GParamSpec *pspec,
-             GValue     *value)
+         GValue     *value)
 {
   GParamSpecLong *lspec = G_PARAM_SPEC_LONG (pspec);
   glong oval = value->data[0].v_long;
 
   value->data[0].v_long = CLAMP (value->data[0].v_long, lspec->minimum, lspec->maximum);
@@ -248,12 +248,12 @@
   return value->data[0].v_long != oval;
 }
 
 static gint
 param_long_values_cmp (GParamSpec   *pspec,
-               const GValue *value1,
-               const GValue *value2)
+           const GValue *value1,
+           const GValue *value2)
 {
   if (value1->data[0].v_long < value2->data[0].v_long)
     return -1;
   else
     return value1->data[0].v_long > value2->data[0].v_long;
@@ -273,18 +273,18 @@
   uspec->default_value = 0;
 }
 
 static void
 param_ulong_set_default (GParamSpec *pspec,
-             GValue     *value)
+       GValue     *value)
 {
   value->data[0].v_ulong = G_PARAM_SPEC_ULONG (pspec)->default_value;
 }
 
 static gboolean
 param_ulong_validate (GParamSpec *pspec,
-              GValue     *value)
+          GValue     *value)
 {
   GParamSpecULong *uspec = G_PARAM_SPEC_ULONG (pspec);
   gulong oval = value->data[0].v_ulong;
 
   value->data[0].v_ulong = CLAMP (value->data[0].v_ulong, uspec->minimum, uspec->maximum);
@@ -292,12 +292,12 @@
   return value->data[0].v_ulong != oval;
 }
 
 static gint
 param_ulong_values_cmp (GParamSpec   *pspec,
-            const GValue *value1,
-            const GValue *value2)
+      const GValue *value1,
+      const GValue *value2)
 {
   if (value1->data[0].v_ulong < value2->data[0].v_ulong)
     return -1;
   else
     return value1->data[0].v_ulong > value2->data[0].v_ulong;
@@ -313,18 +313,18 @@
   lspec->default_value = 0;
 }
 
 static void
 param_int64_set_default (GParamSpec *pspec,
-            GValue     *value)
+      GValue     *value)
 {
   value->data[0].v_int64 = G_PARAM_SPEC_INT64 (pspec)->default_value;
 }
 
 static gboolean
 param_int64_validate (GParamSpec *pspec,
-             GValue     *value)
+         GValue     *value)
 {
   GParamSpecInt64 *lspec = G_PARAM_SPEC_INT64 (pspec);
   gint64 oval = value->data[0].v_int64;
 
   value->data[0].v_int64 = CLAMP (value->data[0].v_int64, lspec->minimum, lspec->maximum);
@@ -332,12 +332,12 @@
   return value->data[0].v_int64 != oval;
 }
 
 static gint
 param_int64_values_cmp (GParamSpec   *pspec,
-               const GValue *value1,
-               const GValue *value2)
+           const GValue *value1,
+           const GValue *value2)
 {
   if (value1->data[0].v_int64 < value2->data[0].v_int64)
     return -1;
   else
     return value1->data[0].v_int64 > value2->data[0].v_int64;
@@ -353,18 +353,18 @@
   uspec->default_value = 0;
 }
 
 static void
 param_uint64_set_default (GParamSpec *pspec,
-             GValue     *value)
+       GValue     *value)
 {
   value->data[0].v_uint64 = G_PARAM_SPEC_UINT64 (pspec)->default_value;
 }
 
 static gboolean
 param_uint64_validate (GParamSpec *pspec,
-              GValue     *value)
+          GValue     *value)
 {
   GParamSpecUInt64 *uspec = G_PARAM_SPEC_UINT64 (pspec);
   guint64 oval = value->data[0].v_uint64;
 
   value->data[0].v_uint64 = CLAMP (value->data[0].v_uint64, uspec->minimum, uspec->maximum);
@@ -372,12 +372,12 @@
   return value->data[0].v_uint64 != oval;
 }
 
 static gint
 param_uint64_values_cmp (GParamSpec   *pspec,
-            const GValue *value1,
-            const GValue *value2)
+      const GValue *value1,
+      const GValue *value2)
 {
   if (value1->data[0].v_uint64 < value2->data[0].v_uint64)
     return -1;
   else
     return value1->data[0].v_uint64 > value2->data[0].v_uint64;
@@ -391,18 +391,18 @@
   uspec->default_value = 0;
 }
 
 static void
 param_unichar_set_default (GParamSpec *pspec,
-             GValue     *value)
+       GValue     *value)
 {
   value->data[0].v_uint = G_PARAM_SPEC_UNICHAR (pspec)->default_value;
 }
 
 static gboolean
 param_unichar_validate (GParamSpec *pspec,
-                GValue     *value)
+            GValue     *value)
 {
   gunichar oval = value->data[0].v_uint;
   gboolean changed = FALSE;
 
   if (!g_unichar_validate (oval))
@@ -414,12 +414,12 @@
   return changed;
 }
 
 static gint
 param_unichar_values_cmp (GParamSpec   *pspec,
-            const GValue *value1,
-            const GValue *value2)
+      const GValue *value1,
+      const GValue *value2)
 {
   if (value1->data[0].v_uint < value2->data[0].v_uint)
     return -1;
   else
     return value1->data[0].v_uint > value2->data[0].v_uint;
@@ -449,18 +449,18 @@
   parent_class->finalize (pspec);
 }
 
 static void
 param_enum_set_default (GParamSpec *pspec,
-            GValue     *value)
+      GValue     *value)
 {
   value->data[0].v_long = G_PARAM_SPEC_ENUM (pspec)->default_value;
 }
 
 static gboolean
 param_enum_validate (GParamSpec *pspec,
-             GValue     *value)
+         GValue     *value)
 {
   GParamSpecEnum *espec = G_PARAM_SPEC_ENUM (pspec);
   glong oval = value->data[0].v_long;
 
   if (!espec->enum_class ||
@@ -494,18 +494,18 @@
   parent_class->finalize (pspec);
 }
 
 static void
 param_flags_set_default (GParamSpec *pspec,
-             GValue     *value)
+       GValue     *value)
 {
   value->data[0].v_ulong = G_PARAM_SPEC_FLAGS (pspec)->default_value;
 }
 
 static gboolean
 param_flags_validate (GParamSpec *pspec,
-              GValue     *value)
+          GValue     *value)
 {
   GParamSpecFlags *fspec = G_PARAM_SPEC_FLAGS (pspec);
   gulong oval = value->data[0].v_ulong;
 
   if (fspec->flags_class)
@@ -527,18 +527,18 @@
   fspec->epsilon = G_FLOAT_EPSILON;
 }
 
 static void
 param_float_set_default (GParamSpec *pspec,
-             GValue     *value)
+       GValue     *value)
 {
   value->data[0].v_float = G_PARAM_SPEC_FLOAT (pspec)->default_value;
 }
 
 static gboolean
 param_float_validate (GParamSpec *pspec,
-              GValue     *value)
+          GValue     *value)
 {
   GParamSpecFloat *fspec = G_PARAM_SPEC_FLOAT (pspec);
   gfloat oval = value->data[0].v_float;
 
   value->data[0].v_float = CLAMP (value->data[0].v_float, fspec->minimum, fspec->maximum);
@@ -546,12 +546,12 @@
   return value->data[0].v_float != oval;
 }
 
 static gint
 param_float_values_cmp (GParamSpec   *pspec,
-            const GValue *value1,
-            const GValue *value2)
+      const GValue *value1,
+      const GValue *value2)
 {
   gfloat epsilon = G_PARAM_SPEC_FLOAT (pspec)->epsilon;
 
   if (value1->data[0].v_float < value2->data[0].v_float)
     return - (value2->data[0].v_float - value1->data[0].v_float > epsilon);
@@ -570,18 +570,18 @@
   dspec->epsilon = G_DOUBLE_EPSILON;
 }
 
 static void
 param_double_set_default (GParamSpec *pspec,
-              GValue     *value)
+        GValue     *value)
 {
   value->data[0].v_double = G_PARAM_SPEC_DOUBLE (pspec)->default_value;
 }
 
 static gboolean
 param_double_validate (GParamSpec *pspec,
-               GValue     *value)
+           GValue     *value)
 {
   GParamSpecDouble *dspec = G_PARAM_SPEC_DOUBLE (pspec);
   gdouble oval = value->data[0].v_double;
 
   value->data[0].v_double = CLAMP (value->data[0].v_double, dspec->minimum, dspec->maximum);
@@ -589,12 +589,12 @@
   return value->data[0].v_double != oval;
 }
 
 static gint
 param_double_values_cmp (GParamSpec   *pspec,
-             const GValue *value1,
-             const GValue *value2)
+       const GValue *value1,
+       const GValue *value2)
 {
   gdouble epsilon = G_PARAM_SPEC_DOUBLE (pspec)->epsilon;
 
   if (value1->data[0].v_double < value2->data[0].v_double)
     return - (value2->data[0].v_double - value1->data[0].v_double > epsilon);
@@ -631,52 +631,52 @@
   parent_class->finalize (pspec);
 }
 
 static void
 param_string_set_default (GParamSpec *pspec,
-              GValue     *value)
+        GValue     *value)
 {
   value->data[0].v_pointer = g_strdup (G_PARAM_SPEC_STRING (pspec)->default_value);
 }
 
 static gboolean
 param_string_validate (GParamSpec *pspec,
-               GValue     *value)
+           GValue     *value)
 {
   GParamSpecString *sspec = G_PARAM_SPEC_STRING (pspec);
   gchar *string = value->data[0].v_pointer;
   guint changed = 0;
 
   if (string && string[0])
     {
       gchar *s;
 
       if (sspec->cset_first && !strchr (sspec->cset_first, string[0]))
-    {
+  {
           if (value->data[1].v_uint & G_VALUE_NOCOPY_CONTENTS)
             {
               value->data[0].v_pointer = g_strdup (string);
               string = value->data[0].v_pointer;
               value->data[1].v_uint &= ~G_VALUE_NOCOPY_CONTENTS;
             }
-      string[0] = sspec->substitutor;
-      changed++;
-    }
+    string[0] = sspec->substitutor;
+    changed++;
+  }
       if (sspec->cset_nth)
-    for (s = string + 1; *s; s++)
-      if (!strchr (sspec->cset_nth, *s))
-        {
+  for (s = string + 1; *s; s++)
+    if (!strchr (sspec->cset_nth, *s))
+      {
               if (value->data[1].v_uint & G_VALUE_NOCOPY_CONTENTS)
                 {
                   value->data[0].v_pointer = g_strdup (string);
                   s = (gchar*) value->data[0].v_pointer + (s - string);
                   string = value->data[0].v_pointer;
                   value->data[1].v_uint &= ~G_VALUE_NOCOPY_CONTENTS;
                 }
-          *s = sspec->substitutor;
-          changed++;
-        }
+        *s = sspec->substitutor;
+        changed++;
+      }
     }
   if (sspec->null_fold_if_empty && string && string[0] == 0)
     {
       if (!(value->data[1].v_uint & G_VALUE_NOCOPY_CONTENTS))
         g_free (value->data[0].v_pointer);
@@ -697,12 +697,12 @@
   return changed;
 }
 
 static gint
 param_string_values_cmp (GParamSpec   *pspec,
-             const GValue *value1,
-             const GValue *value2)
+       const GValue *value1,
+       const GValue *value2)
 {
   if (!value1->data[0].v_pointer)
     return value2->data[0].v_pointer != NULL ? -1 : 0;
   else if (!value2->data[0].v_pointer)
     return value1->data[0].v_pointer != NULL;
@@ -716,18 +716,18 @@
   /* GParamSpecParam *spec = G_PARAM_SPEC_PARAM (pspec); */
 }
 
 static void
 param_param_set_default (GParamSpec *pspec,
-             GValue     *value)
+       GValue     *value)
 {
   value->data[0].v_pointer = NULL;
 }
 
 static gboolean
 param_param_validate (GParamSpec *pspec,
-              GValue     *value)
+          GValue     *value)
 {
   /* GParamSpecParam *spec = G_PARAM_SPEC_PARAM (pspec); */
   GParamSpec *param = value->data[0].v_pointer;
   guint changed = 0;
 
@@ -747,18 +747,18 @@
   /* GParamSpecBoxed *bspec = G_PARAM_SPEC_BOXED (pspec); */
 }
 
 static void
 param_boxed_set_default (GParamSpec *pspec,
-             GValue     *value)
+       GValue     *value)
 {
   value->data[0].v_pointer = NULL;
 }
 
 static gboolean
 param_boxed_validate (GParamSpec *pspec,
-              GValue     *value)
+          GValue     *value)
 {
   /* GParamSpecBoxed *bspec = G_PARAM_SPEC_BOXED (pspec); */
   guint changed = 0;
 
   /* can't do a whole lot here since we haven't even G_BOXED_TYPE() */
@@ -766,12 +766,12 @@
   return changed;
 }
 
 static gint
 param_boxed_values_cmp (GParamSpec    *pspec,
-             const GValue *value1,
-             const GValue *value2)
+       const GValue *value1,
+       const GValue *value2)
 {
   guint8 *p1 = value1->data[0].v_pointer;
   guint8 *p2 = value2->data[0].v_pointer;
 
   /* not much to compare here, try to at least provide stable lesser/greater result */
@@ -785,29 +785,29 @@
   /* GParamSpecPointer *spec = G_PARAM_SPEC_POINTER (pspec); */
 }
 
 static void
 param_pointer_set_default (GParamSpec *pspec,
-               GValue     *value)
+         GValue     *value)
 {
   value->data[0].v_pointer = NULL;
 }
 
 static gboolean
 param_pointer_validate (GParamSpec *pspec,
-            GValue     *value)
+      GValue     *value)
 {
   /* GParamSpecPointer *spec = G_PARAM_SPEC_POINTER (pspec); */
   guint changed = 0;
 
   return changed;
 }
 
 static gint
 param_pointer_values_cmp (GParamSpec   *pspec,
-              const GValue *value1,
-              const GValue *value2)
+        const GValue *value1,
+        const GValue *value2)
 {
   guint8 *p1 = value1->data[0].v_pointer;
   guint8 *p2 = value2->data[0].v_pointer;
 
   /* not much to compare here, try to at least provide stable lesser/greater result */
@@ -824,26 +824,26 @@
   aspec->fixed_n_elements = 0; /* disable */
 }
 
 static inline guint
 value_array_ensure_size (GValueArray *value_array,
-             guint        fixed_n_elements)
+       guint        fixed_n_elements)
 {
   guint changed = 0;
 
   if (fixed_n_elements)
     {
       while (value_array->n_values < fixed_n_elements)
-    {
-      g_value_array_append (value_array, NULL);
-      changed++;
-    }
+  {
+    g_value_array_append (value_array, NULL);
+    changed++;
+  }
       while (value_array->n_values > fixed_n_elements)
-    {
-      g_value_array_remove (value_array, value_array->n_values - 1);
-      changed++;
-    }
+  {
+    g_value_array_remove (value_array, value_array->n_values - 1);
+    changed++;
+  }
     }
   return changed;
 }
 
 static void
@@ -861,11 +861,11 @@
   parent_class->finalize (pspec);
 }
 
 static void
 param_value_array_set_default (GParamSpec *pspec,
-                   GValue     *value)
+             GValue     *value)
 {
   GParamSpecValueArray *aspec = G_PARAM_SPEC_VALUE_ARRAY (pspec);
 
   if (!value->data[0].v_pointer && aspec->fixed_n_elements)
     value->data[0].v_pointer = g_value_array_new (aspec->fixed_n_elements);
@@ -877,11 +877,11 @@
     }
 }
 
 static gboolean
 param_value_array_validate (GParamSpec *pspec,
-                GValue     *value)
+          GValue     *value)
 {
   GParamSpecValueArray *aspec = G_PARAM_SPEC_VALUE_ARRAY (pspec);
   GValueArray *value_array = value->data[0].v_pointer;
   guint changed = 0;
 
@@ -893,40 +893,40 @@
       /* ensure array size validity */
       changed += value_array_ensure_size (value_array, aspec->fixed_n_elements);
 
       /* ensure array values validity against a present element spec */
       if (aspec->element_spec)
-    {
-      GParamSpec *element_spec = aspec->element_spec;
-      guint i;
+  {
+    GParamSpec *element_spec = aspec->element_spec;
+    guint i;
 
-      for (i = 0; i < value_array->n_values; i++)
-        {
-          GValue *element = value_array->values + i;
-
-          /* need to fixup value type, or ensure that the array value is initialized at all */
-          if (!g_value_type_compatible (G_VALUE_TYPE (element), G_PARAM_SPEC_VALUE_TYPE (element_spec)))
-        {
-          if (G_VALUE_TYPE (element) != 0)
-            g_value_unset (element);
-          g_value_init (element, G_PARAM_SPEC_VALUE_TYPE (element_spec));
-          g_param_value_set_default (element_spec, element);
-          changed++;
-        }
-          /* validate array value against element_spec */
-          changed += g_param_value_validate (element_spec, element);
-        }
+    for (i = 0; i < value_array->n_values; i++)
+      {
+        GValue *element = value_array->values + i;
+
+        /* need to fixup value type, or ensure that the array value is initialized at all */
+        if (!g_value_type_compatible (G_VALUE_TYPE (element), G_PARAM_SPEC_VALUE_TYPE (element_spec)))
+    {
+      if (G_VALUE_TYPE (element) != 0)
+        g_value_unset (element);
+      g_value_init (element, G_PARAM_SPEC_VALUE_TYPE (element_spec));
+      g_param_value_set_default (element_spec, element);
+      changed++;
     }
+        /* validate array value against element_spec */
+        changed += g_param_value_validate (element_spec, element);
+      }
+  }
     }
 
   return changed;
 }
 
 static gint
 param_value_array_values_cmp (GParamSpec   *pspec,
-                  const GValue *value1,
-                  const GValue *value2)
+            const GValue *value1,
+            const GValue *value2)
 {
   GParamSpecValueArray *aspec = G_PARAM_SPEC_VALUE_ARRAY (pspec);
   GValueArray *value_array1 = value1->data[0].v_pointer;
   GValueArray *value_array2 = value2->data[0].v_pointer;
 
@@ -945,22 +945,22 @@
   else /* value_array1->n_values == value_array2->n_values */
     {
       guint i;
 
       for (i = 0; i < value_array1->n_values; i++)
-    {
-      GValue *element1 = value_array1->values + i;
-      GValue *element2 = value_array2->values + i;
-      gint cmp;
-
-      /* need corresponding element types, provide stable result otherwise */
-      if (G_VALUE_TYPE (element1) != G_VALUE_TYPE (element2))
-        return G_VALUE_TYPE (element1) < G_VALUE_TYPE (element2) ? -1 : 1;
-      cmp = g_param_values_cmp (aspec->element_spec, element1, element2);
-      if (cmp)
-        return cmp;
-    }
+  {
+    GValue *element1 = value_array1->values + i;
+    GValue *element2 = value_array2->values + i;
+    gint cmp;
+
+    /* need corresponding element types, provide stable result otherwise */
+    if (G_VALUE_TYPE (element1) != G_VALUE_TYPE (element2))
+      return G_VALUE_TYPE (element1) < G_VALUE_TYPE (element2) ? -1 : 1;
+    cmp = g_param_values_cmp (aspec->element_spec, element1, element2);
+    if (cmp)
+      return cmp;
+  }
       return 0;
     }
 }
 
 static void
@@ -969,18 +969,18 @@
   /* GParamSpecObject *ospec = G_PARAM_SPEC_OBJECT (pspec); */
 }
 
 static void
 param_object_set_default (GParamSpec *pspec,
-              GValue     *value)
+        GValue     *value)
 {
   value->data[0].v_pointer = NULL;
 }
 
 static gboolean
 param_object_validate (GParamSpec *pspec,
-               GValue     *value)
+           GValue     *value)
 {
   GParamSpecObject *ospec = G_PARAM_SPEC_OBJECT (pspec);
   GObject *object = value->data[0].v_pointer;
   guint changed = 0;
 
@@ -994,12 +994,12 @@
   return changed;
 }
 
 static gint
 param_object_values_cmp (GParamSpec   *pspec,
-             const GValue *value1,
-             const GValue *value2)
+       const GValue *value1,
+       const GValue *value2)
 {
   guint8 *p1 = value1->data[0].v_pointer;
   guint8 *p2 = value2->data[0].v_pointer;
 
   /* not much to compare here, try to at least provide stable lesser/greater result */
@@ -1028,30 +1028,30 @@
   parent_class->finalize (pspec);
 }
 
 static void
 param_override_set_default (GParamSpec *pspec,
-                GValue     *value)
+          GValue     *value)
 {
   GParamSpecOverride *ospec = G_PARAM_SPEC_OVERRIDE (pspec);
 
   g_param_value_set_default (ospec->overridden, value);
 }
 
 static gboolean
 param_override_validate (GParamSpec *pspec,
-             GValue     *value)
+       GValue     *value)
 {
   GParamSpecOverride *ospec = G_PARAM_SPEC_OVERRIDE (pspec);
 
   return g_param_value_validate (ospec->overridden, value);
 }
 
 static gint
 param_override_values_cmp (GParamSpec   *pspec,
-               const GValue *value1,
-               const GValue *value2)
+         const GValue *value1,
+         const GValue *value2)
 {
   GParamSpecOverride *ospec = G_PARAM_SPEC_OVERRIDE (pspec);
 
   return g_param_values_cmp (ospec->overridden, value1, value2);
 }
@@ -1061,20 +1061,20 @@
 {
 }
 
 static void
 param_gtype_set_default (GParamSpec *pspec,
-             GValue     *value)
+       GValue     *value)
 {
   GParamSpecGType *tspec = G_PARAM_SPEC_GTYPE (pspec);
 
   value->data[0].v_pointer = GSIZE_TO_POINTER (tspec->is_a_type);
 }
 
 static gboolean
 param_gtype_validate (GParamSpec *pspec,
-              GValue     *value)
+          GValue     *value)
 {
   GParamSpecGType *tspec = G_PARAM_SPEC_GTYPE (pspec);
   GType gtype = GPOINTER_TO_SIZE (value->data[0].v_pointer);
   guint changed = 0;
 
@@ -1087,12 +1087,12 @@
   return changed;
 }
 
 static gint
 param_gtype_values_cmp (GParamSpec   *pspec,
-            const GValue *value1,
-            const GValue *value2)
+      const GValue *value1,
+      const GValue *value2)
 {
   GType p1 = GPOINTER_TO_SIZE (value1->data[0].v_pointer);
   GType p2 = GPOINTER_TO_SIZE (value2->data[0].v_pointer);
 
   /* not much to compare here, try to at least provide stable lesser/greater result */
@@ -1189,26 +1189,31 @@
 
 void
 _g_param_spec_types_init (void)
 {
   const guint n_types = 23;
-  GType type, *spec_types, *spec_types_bound;
+  GType type, *spec_types;
+#ifndef G_DISABLE_ASSERT
+  GType *spec_types_bound;
+#endif
 
   g_param_spec_types = g_new0 (GType, n_types);
   spec_types = g_param_spec_types;
+#ifndef G_DISABLE_ASSERT
   spec_types_bound = g_param_spec_types + n_types;
+#endif
 
   /* G_TYPE_PARAM_CHAR
    */
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecChar),  /* instance_size */
-      16,           /* n_preallocs */
-      param_char_init,      /* instance_init */
-      G_TYPE_CHAR,      /* value_type */
-      NULL,         /* finalize */
-      param_char_set_default,   /* value_set_default */
+      16,     /* n_preallocs */
+      param_char_init,    /* instance_init */
+      G_TYPE_CHAR,    /* value_type */
+      NULL,     /* finalize */
+      param_char_set_default, /* value_set_default */
       param_char_validate,  /* value_validate */
       param_int_values_cmp, /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamChar"), &pspec_info);
     *spec_types++ = type;
@@ -1220,15 +1225,15 @@
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecUChar), /* instance_size */
       16,                       /* n_preallocs */
       param_uchar_init,         /* instance_init */
-      G_TYPE_UCHAR,     /* value_type */
-      NULL,         /* finalize */
+      G_TYPE_UCHAR,   /* value_type */
+      NULL,     /* finalize */
       param_uchar_set_default,  /* value_set_default */
       param_uchar_validate, /* value_validate */
-      param_uint_values_cmp,    /* values_cmp */
+      param_uint_values_cmp,  /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamUChar"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_UCHAR);
   }
@@ -1237,11 +1242,11 @@
    */
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecBoolean), /* instance_size */
       16,                         /* n_preallocs */
-      NULL,           /* instance_init */
+      NULL,       /* instance_init */
       G_TYPE_BOOLEAN,             /* value_type */
       NULL,                       /* finalize */
       param_boolean_set_default,  /* value_set_default */
       param_boolean_validate,     /* value_validate */
       param_int_values_cmp,       /* values_cmp */
@@ -1256,14 +1261,14 @@
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecInt),   /* instance_size */
       16,                       /* n_preallocs */
       param_int_init,           /* instance_init */
-      G_TYPE_INT,       /* value_type */
-      NULL,         /* finalize */
-      param_int_set_default,    /* value_set_default */
-      param_int_validate,   /* value_validate */
+      G_TYPE_INT,   /* value_type */
+      NULL,     /* finalize */
+      param_int_set_default,  /* value_set_default */
+      param_int_validate, /* value_validate */
       param_int_values_cmp, /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamInt"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_INT);
@@ -1274,15 +1279,15 @@
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecUInt),  /* instance_size */
       16,                       /* n_preallocs */
       param_uint_init,          /* instance_init */
-      G_TYPE_UINT,      /* value_type */
-      NULL,         /* finalize */
-      param_uint_set_default,   /* value_set_default */
+      G_TYPE_UINT,    /* value_type */
+      NULL,     /* finalize */
+      param_uint_set_default, /* value_set_default */
       param_uint_validate,  /* value_validate */
-      param_uint_values_cmp,    /* values_cmp */
+      param_uint_values_cmp,  /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamUInt"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_UINT);
   }
@@ -1292,15 +1297,15 @@
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecLong),  /* instance_size */
       16,                       /* n_preallocs */
       param_long_init,          /* instance_init */
-      G_TYPE_LONG,      /* value_type */
-      NULL,         /* finalize */
-      param_long_set_default,   /* value_set_default */
+      G_TYPE_LONG,    /* value_type */
+      NULL,     /* finalize */
+      param_long_set_default, /* value_set_default */
       param_long_validate,  /* value_validate */
-      param_long_values_cmp,    /* values_cmp */
+      param_long_values_cmp,  /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamLong"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_LONG);
   }
@@ -1310,15 +1315,15 @@
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecULong), /* instance_size */
       16,                       /* n_preallocs */
       param_ulong_init,         /* instance_init */
-      G_TYPE_ULONG,     /* value_type */
-      NULL,         /* finalize */
+      G_TYPE_ULONG,   /* value_type */
+      NULL,     /* finalize */
       param_ulong_set_default,  /* value_set_default */
       param_ulong_validate, /* value_validate */
-      param_ulong_values_cmp,   /* values_cmp */
+      param_ulong_values_cmp, /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamULong"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_ULONG);
   }
@@ -1328,15 +1333,15 @@
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecInt64),  /* instance_size */
       16,                       /* n_preallocs */
       param_int64_init,         /* instance_init */
-      G_TYPE_INT64,     /* value_type */
-      NULL,         /* finalize */
+      G_TYPE_INT64,   /* value_type */
+      NULL,     /* finalize */
       param_int64_set_default,  /* value_set_default */
       param_int64_validate, /* value_validate */
-      param_int64_values_cmp,   /* values_cmp */
+      param_int64_values_cmp, /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamInt64"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_INT64);
   }
@@ -1346,14 +1351,14 @@
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecUInt64), /* instance_size */
       16,                       /* n_preallocs */
       param_uint64_init,        /* instance_init */
-      G_TYPE_UINT64,        /* value_type */
-      NULL,         /* finalize */
+      G_TYPE_UINT64,    /* value_type */
+      NULL,     /* finalize */
       param_uint64_set_default, /* value_set_default */
-      param_uint64_validate,    /* value_validate */
+      param_uint64_validate,  /* value_validate */
       param_uint64_values_cmp,  /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamUInt64"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_UINT64);
@@ -1363,15 +1368,15 @@
    */
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecUnichar), /* instance_size */
       16,                        /* n_preallocs */
-      param_unichar_init,    /* instance_init */
-      G_TYPE_UINT,       /* value_type */
-      NULL,          /* finalize */
+      param_unichar_init,  /* instance_init */
+      G_TYPE_UINT,     /* value_type */
+      NULL,      /* finalize */
       param_unichar_set_default, /* value_set_default */
-      param_unichar_validate,    /* value_validate */
+      param_unichar_validate,  /* value_validate */
       param_unichar_values_cmp,  /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamUnichar"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_UNICHAR);
@@ -1382,15 +1387,15 @@
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecEnum),  /* instance_size */
       16,                       /* n_preallocs */
       param_enum_init,          /* instance_init */
-      G_TYPE_ENUM,      /* value_type */
+      G_TYPE_ENUM,    /* value_type */
       param_enum_finalize,  /* finalize */
-      param_enum_set_default,   /* value_set_default */
+      param_enum_set_default, /* value_set_default */
       param_enum_validate,  /* value_validate */
-      param_long_values_cmp,    /* values_cmp */
+      param_long_values_cmp,  /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamEnum"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_ENUM);
   }
@@ -1398,17 +1403,17 @@
   /* G_TYPE_PARAM_FLAGS
    */
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecFlags), /* instance_size */
-      16,           /* n_preallocs */
-      param_flags_init,     /* instance_init */
-      G_TYPE_FLAGS,     /* value_type */
+      16,     /* n_preallocs */
+      param_flags_init,   /* instance_init */
+      G_TYPE_FLAGS,   /* value_type */
       param_flags_finalize, /* finalize */
       param_flags_set_default,  /* value_set_default */
       param_flags_validate, /* value_validate */
-      param_ulong_values_cmp,   /* values_cmp */
+      param_ulong_values_cmp, /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamFlags"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_FLAGS);
   }
@@ -1418,51 +1423,51 @@
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecFloat), /* instance_size */
       16,                       /* n_preallocs */
       param_float_init,         /* instance_init */
-      G_TYPE_FLOAT,     /* value_type */
-      NULL,         /* finalize */
+      G_TYPE_FLOAT,   /* value_type */
+      NULL,     /* finalize */
       param_float_set_default,  /* value_set_default */
       param_float_validate, /* value_validate */
-      param_float_values_cmp,   /* values_cmp */
+      param_float_values_cmp, /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamFloat"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_FLOAT);
   }
 
   /* G_TYPE_PARAM_DOUBLE
    */
   {
     const GParamSpecTypeInfo pspec_info = {
-      sizeof (GParamSpecDouble),    /* instance_size */
-      16,               /* n_preallocs */
-      param_double_init,        /* instance_init */
-      G_TYPE_DOUBLE,            /* value_type */
-      NULL,             /* finalize */
-      param_double_set_default,     /* value_set_default */
-      param_double_validate,        /* value_validate */
-      param_double_values_cmp,      /* values_cmp */
+      sizeof (GParamSpecDouble),  /* instance_size */
+      16,       /* n_preallocs */
+      param_double_init,    /* instance_init */
+      G_TYPE_DOUBLE,      /* value_type */
+      NULL,       /* finalize */
+      param_double_set_default,   /* value_set_default */
+      param_double_validate,    /* value_validate */
+      param_double_values_cmp,    /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamDouble"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_DOUBLE);
   }
 
   /* G_TYPE_PARAM_STRING
    */
   {
     const GParamSpecTypeInfo pspec_info = {
-      sizeof (GParamSpecString),    /* instance_size */
-      16,               /* n_preallocs */
-      param_string_init,        /* instance_init */
-      G_TYPE_STRING,            /* value_type */
-      param_string_finalize,        /* finalize */
-      param_string_set_default,     /* value_set_default */
-      param_string_validate,        /* value_validate */
-      param_string_values_cmp,      /* values_cmp */
+      sizeof (GParamSpecString),  /* instance_size */
+      16,       /* n_preallocs */
+      param_string_init,    /* instance_init */
+      G_TYPE_STRING,      /* value_type */
+      param_string_finalize,    /* finalize */
+      param_string_set_default,   /* value_set_default */
+      param_string_validate,    /* value_validate */
+      param_string_values_cmp,    /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamString"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_STRING);
   }
@@ -1470,14 +1475,14 @@
   /* G_TYPE_PARAM_PARAM
    */
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecParam), /* instance_size */
-      16,           /* n_preallocs */
-      param_param_init,     /* instance_init */
-      G_TYPE_PARAM,     /* value_type */
-      NULL,         /* finalize */
+      16,     /* n_preallocs */
+      param_param_init,   /* instance_init */
+      G_TYPE_PARAM,   /* value_type */
+      NULL,     /* finalize */
       param_param_set_default,  /* value_set_default */
       param_param_validate, /* value_validate */
       param_pointer_values_cmp, /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamParam"), &pspec_info);
@@ -1488,17 +1493,17 @@
   /* G_TYPE_PARAM_BOXED
    */
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecBoxed), /* instance_size */
-      4,            /* n_preallocs */
-      param_boxed_init,     /* instance_init */
-      G_TYPE_BOXED,     /* value_type */
-      NULL,         /* finalize */
+      4,      /* n_preallocs */
+      param_boxed_init,   /* instance_init */
+      G_TYPE_BOXED,   /* value_type */
+      NULL,     /* finalize */
       param_boxed_set_default,  /* value_set_default */
       param_boxed_validate, /* value_validate */
-      param_boxed_values_cmp,   /* values_cmp */
+      param_boxed_values_cmp, /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamBoxed"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_BOXED);
   }
@@ -1507,15 +1512,15 @@
    */
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecPointer),  /* instance_size */
       0,                           /* n_preallocs */
-      param_pointer_init,      /* instance_init */
-      G_TYPE_POINTER,          /* value_type */
-      NULL,            /* finalize */
+      param_pointer_init,    /* instance_init */
+      G_TYPE_POINTER,        /* value_type */
+      NULL,        /* finalize */
       param_pointer_set_default,   /* value_set_default */
-      param_pointer_validate,      /* value_validate */
+      param_pointer_validate,    /* value_validate */
       param_pointer_values_cmp,    /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamPointer"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_POINTER);
@@ -1523,17 +1528,17 @@
 
   /* G_TYPE_PARAM_VALUE_ARRAY
    */
   {
     /* const */ GParamSpecTypeInfo pspec_info = {
-      sizeof (GParamSpecValueArray),    /* instance_size */
-      0,                /* n_preallocs */
-      param_value_array_init,       /* instance_init */
-      0xdeadbeef,           /* value_type, assigned further down */
-      param_value_array_finalize,   /* finalize */
-      param_value_array_set_default,    /* value_set_default */
-      param_value_array_validate,   /* value_validate */
+      sizeof (GParamSpecValueArray),  /* instance_size */
+      0,        /* n_preallocs */
+      param_value_array_init,   /* instance_init */
+      0xdeadbeef,     /* value_type, assigned further down */
+      param_value_array_finalize, /* finalize */
+      param_value_array_set_default,  /* value_set_default */
+      param_value_array_validate, /* value_validate */
       param_value_array_values_cmp, /* values_cmp */
     };
     pspec_info.value_type = G_TYPE_VALUE_ARRAY;
     type = g_param_type_register_static (g_intern_static_string ("GParamValueArray"), &pspec_info);
     *spec_types++ = type;
@@ -1544,15 +1549,15 @@
    */
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecObject), /* instance_size */
       16,                        /* n_preallocs */
-      param_object_init,     /* instance_init */
-      G_TYPE_OBJECT,         /* value_type */
-      NULL,          /* finalize */
+      param_object_init,   /* instance_init */
+      G_TYPE_OBJECT,     /* value_type */
+      NULL,      /* finalize */
       param_object_set_default,  /* value_set_default */
-      param_object_validate,     /* value_validate */
+      param_object_validate,   /* value_validate */
       param_object_values_cmp,   /* values_cmp */
     };
     type = g_param_type_register_static (g_intern_static_string ("GParamObject"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_OBJECT);
@@ -1563,11 +1568,11 @@
   {
     const GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecOverride), /* instance_size */
       16,                        /* n_preallocs */
       param_override_init,   /* instance_init */
-      G_TYPE_NONE,       /* value_type */
+      G_TYPE_NONE,     /* value_type */
       param_override_finalize,   /* finalize */
       param_override_set_default, /* value_set_default */
       param_override_validate,    /* value_validate */
       param_override_values_cmp,  /* values_cmp */
     };
@@ -1579,17 +1584,17 @@
   /* G_TYPE_PARAM_GTYPE
    */
   {
     GParamSpecTypeInfo pspec_info = {
       sizeof (GParamSpecGType), /* instance_size */
-      0,            /* n_preallocs */
-      param_gtype_init,     /* instance_init */
-      0xdeadbeef,       /* value_type, assigned further down */
-      NULL,         /* finalize */
+      0,      /* n_preallocs */
+      param_gtype_init,   /* instance_init */
+      0xdeadbeef,   /* value_type, assigned further down */
+      NULL,     /* finalize */
       param_gtype_set_default,  /* value_set_default */
       param_gtype_validate, /* value_validate */
-      param_gtype_values_cmp,   /* values_cmp */
+      param_gtype_values_cmp, /* values_cmp */
     };
     pspec_info.value_type = G_TYPE_GTYPE;
     type = g_param_type_register_static (g_intern_static_string ("GParamGType"), &pspec_info);
     *spec_types++ = type;
     g_assert (type == G_TYPE_PARAM_GTYPE);
@@ -1632,26 +1637,26 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_char (const gchar *name,
-                   const gchar *nick,
-                   const gchar *blurb,
-           gint8    minimum,
-           gint8    maximum,
-           gint8    default_value,
-           GParamFlags  flags)
+       const gchar *nick,
+       const gchar *blurb,
+       gint8  minimum,
+       gint8  maximum,
+       gint8  default_value,
+       GParamFlags  flags)
 {
   GParamSpecChar *cspec;
 
   g_return_val_if_fail (default_value >= minimum && default_value <= maximum, NULL);
 
   cspec = g_param_spec_internal (G_TYPE_PARAM_CHAR,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (cspec == NULL)
     return NULL;
 
   cspec->minimum = minimum;
   cspec->maximum = maximum;
@@ -1674,26 +1679,26 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_uchar (const gchar *name,
-                    const gchar *nick,
-                    const gchar *blurb,
-            guint8   minimum,
-            guint8   maximum,
-            guint8   default_value,
-            GParamFlags  flags)
+        const gchar *nick,
+        const gchar *blurb,
+        guint8   minimum,
+        guint8   maximum,
+        guint8   default_value,
+        GParamFlags  flags)
 {
   GParamSpecUChar *uspec;
 
   g_return_val_if_fail (default_value >= minimum && default_value <= maximum, NULL);
 
   uspec = g_param_spec_internal (G_TYPE_PARAM_UCHAR,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (uspec == NULL)
     return NULL;
 
   uspec->minimum = minimum;
   uspec->maximum = maximum;
@@ -1720,24 +1725,24 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_boolean (const gchar *name,
-                      const gchar *nick,
-                      const gchar *blurb,
-              gboolean     default_value,
-                      GParamFlags  flags)
+          const gchar *nick,
+          const gchar *blurb,
+          gboolean     default_value,
+          GParamFlags  flags)
 {
   GParamSpecBoolean *bspec;
 
   g_return_val_if_fail (default_value == TRUE || default_value == FALSE, NULL);
 
   bspec = g_param_spec_internal (G_TYPE_PARAM_BOOLEAN,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (bspec == NULL)
     return NULL;
 
   bspec->default_value = default_value;
 
@@ -1760,26 +1765,26 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_int (const gchar *name,
-                  const gchar *nick,
-                  const gchar *blurb,
-          gint         minimum,
-          gint         maximum,
-          gint         default_value,
-                  GParamFlags  flags)
+      const gchar *nick,
+      const gchar *blurb,
+      gint         minimum,
+      gint         maximum,
+      gint         default_value,
+      GParamFlags  flags)
 {
   GParamSpecInt *ispec;
 
   g_return_val_if_fail (default_value >= minimum && default_value <= maximum, NULL);
 
   ispec = g_param_spec_internal (G_TYPE_PARAM_INT,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (ispec == NULL)
     return NULL;
 
   ispec->minimum = minimum;
   ispec->maximum = maximum;
@@ -1804,26 +1809,26 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_uint (const gchar *name,
-                   const gchar *nick,
-                   const gchar *blurb,
-           guint    minimum,
-           guint    maximum,
-           guint    default_value,
-           GParamFlags  flags)
+       const gchar *nick,
+       const gchar *blurb,
+       guint  minimum,
+       guint  maximum,
+       guint  default_value,
+       GParamFlags  flags)
 {
   GParamSpecUInt *uspec;
 
   g_return_val_if_fail (default_value >= minimum && default_value <= maximum, NULL);
 
   uspec = g_param_spec_internal (G_TYPE_PARAM_UINT,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (uspec == NULL)
     return NULL;
 
   uspec->minimum = minimum;
   uspec->maximum = maximum;
@@ -1848,26 +1853,26 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_long (const gchar *name,
-                   const gchar *nick,
-                   const gchar *blurb,
-           glong    minimum,
-           glong    maximum,
-           glong    default_value,
-           GParamFlags  flags)
+       const gchar *nick,
+       const gchar *blurb,
+       glong  minimum,
+       glong  maximum,
+       glong  default_value,
+       GParamFlags  flags)
 {
   GParamSpecLong *lspec;
 
   g_return_val_if_fail (default_value >= minimum && default_value <= maximum, NULL);
 
   lspec = g_param_spec_internal (G_TYPE_PARAM_LONG,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (lspec == NULL)
     return NULL;
 
   lspec->minimum = minimum;
   lspec->maximum = maximum;
@@ -1893,26 +1898,26 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_ulong (const gchar *name,
-                    const gchar *nick,
-                    const gchar *blurb,
-            gulong   minimum,
-            gulong   maximum,
-            gulong   default_value,
-            GParamFlags  flags)
+        const gchar *nick,
+        const gchar *blurb,
+        gulong   minimum,
+        gulong   maximum,
+        gulong   default_value,
+        GParamFlags  flags)
 {
   GParamSpecULong *uspec;
 
   g_return_val_if_fail (default_value >= minimum && default_value <= maximum, NULL);
 
   uspec = g_param_spec_internal (G_TYPE_PARAM_ULONG,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (uspec == NULL)
     return NULL;
 
   uspec->minimum = minimum;
   uspec->maximum = maximum;
@@ -1937,26 +1942,26 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_int64 (const gchar *name,
-                    const gchar *nick,
-                    const gchar *blurb,
-            gint64   minimum,
-            gint64   maximum,
-            gint64   default_value,
-            GParamFlags  flags)
+        const gchar *nick,
+        const gchar *blurb,
+        gint64   minimum,
+        gint64   maximum,
+        gint64   default_value,
+        GParamFlags  flags)
 {
   GParamSpecInt64 *lspec;
 
   g_return_val_if_fail (default_value >= minimum && default_value <= maximum, NULL);
 
   lspec = g_param_spec_internal (G_TYPE_PARAM_INT64,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (lspec == NULL)
     return NULL;
 
   lspec->minimum = minimum;
   lspec->maximum = maximum;
@@ -1982,26 +1987,26 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_uint64 (const gchar *name,
-                     const gchar *nick,
-                     const gchar *blurb,
-             guint64      minimum,
-             guint64      maximum,
-             guint64      default_value,
-                     GParamFlags  flags)
+         const gchar *nick,
+         const gchar *blurb,
+         guint64    minimum,
+         guint64    maximum,
+         guint64    default_value,
+         GParamFlags  flags)
 {
   GParamSpecUInt64 *uspec;
 
   g_return_val_if_fail (default_value >= minimum && default_value <= maximum, NULL);
 
   uspec = g_param_spec_internal (G_TYPE_PARAM_UINT64,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (uspec == NULL)
     return NULL;
 
   uspec->minimum = minimum;
   uspec->maximum = maximum;
@@ -2026,22 +2031,22 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_unichar (const gchar *name,
-                      const gchar *nick,
-                      const gchar *blurb,
-              gunichar     default_value,
-                      GParamFlags  flags)
+          const gchar *nick,
+          const gchar *blurb,
+          gunichar     default_value,
+          GParamFlags  flags)
 {
   GParamSpecUnichar *uspec;
 
   uspec = g_param_spec_internal (G_TYPE_PARAM_UNICHAR,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (uspec == NULL)
     return NULL;
 
   uspec->default_value = default_value;
 
@@ -2064,15 +2069,15 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_enum (const gchar *name,
-                   const gchar *nick,
-                   const gchar *blurb,
-           GType    enum_type,
-           gint     default_value,
-           GParamFlags  flags)
+       const gchar *nick,
+       const gchar *blurb,
+       GType  enum_type,
+       gint   default_value,
+       GParamFlags  flags)
 {
   GParamSpecEnum *espec;
   GEnumClass *enum_class;
 
   g_return_val_if_fail (G_TYPE_IS_ENUM (enum_type), NULL);
@@ -2080,14 +2085,14 @@
   enum_class = g_type_class_ref (enum_type);
 
   g_return_val_if_fail (g_enum_get_value (enum_class, default_value) != NULL, NULL);
 
   espec = g_param_spec_internal (G_TYPE_PARAM_ENUM,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (espec == NULL)
     return NULL;
 
   espec->enum_class = enum_class;
   espec->default_value = default_value;
@@ -2112,15 +2117,15 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_flags (const gchar *name,
-                    const gchar *nick,
-                    const gchar *blurb,
-            GType    flags_type,
-            guint    default_value,
-            GParamFlags  flags)
+        const gchar *nick,
+        const gchar *blurb,
+        GType  flags_type,
+        guint  default_value,
+        GParamFlags  flags)
 {
   GParamSpecFlags *fspec;
   GFlagsClass *flags_class;
 
   g_return_val_if_fail (G_TYPE_IS_FLAGS (flags_type), NULL);
@@ -2132,14 +2137,14 @@
 #endif // GSTREAMER_LITE
 
   g_return_val_if_fail ((default_value & flags_class->mask) == default_value, NULL);
 
   fspec = g_param_spec_internal (G_TYPE_PARAM_FLAGS,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (fspec == NULL)
     return NULL;
 
   fspec->flags_class = flags_class;
   fspec->default_value = default_value;
@@ -2164,26 +2169,26 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_float (const gchar *name,
-                    const gchar *nick,
-                    const gchar *blurb,
-            gfloat   minimum,
-            gfloat   maximum,
-            gfloat   default_value,
-            GParamFlags  flags)
+        const gchar *nick,
+        const gchar *blurb,
+        gfloat   minimum,
+        gfloat   maximum,
+        gfloat   default_value,
+        GParamFlags  flags)
 {
   GParamSpecFloat *fspec;
 
   g_return_val_if_fail (default_value >= minimum && default_value <= maximum, NULL);
 
   fspec = g_param_spec_internal (G_TYPE_PARAM_FLOAT,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (fspec == NULL)
     return NULL;
 
   fspec->minimum = minimum;
   fspec->maximum = maximum;
@@ -2209,26 +2214,26 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_double (const gchar *name,
-                     const gchar *nick,
-                     const gchar *blurb,
-             gdouble      minimum,
-             gdouble      maximum,
-             gdouble      default_value,
-                     GParamFlags  flags)
+         const gchar *nick,
+         const gchar *blurb,
+         gdouble    minimum,
+         gdouble    maximum,
+         gdouble    default_value,
+         GParamFlags  flags)
 {
   GParamSpecDouble *dspec;
 
   g_return_val_if_fail (default_value >= minimum && default_value <= maximum, NULL);
 
   dspec = g_param_spec_internal (G_TYPE_PARAM_DOUBLE,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (dspec == NULL)
     return NULL;
 
   dspec->minimum = minimum;
   dspec->maximum = maximum;
@@ -2251,20 +2256,20 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_string (const gchar *name,
-             const gchar *nick,
-             const gchar *blurb,
-             const gchar *default_value,
-             GParamFlags  flags)
+         const gchar *nick,
+         const gchar *blurb,
+         const gchar *default_value,
+         GParamFlags  flags)
 {
   GParamSpecString *sspec = g_param_spec_internal (G_TYPE_PARAM_STRING,
-                           name,
-                           nick,
-                           blurb,
-                           flags);
+               name,
+               nick,
+               blurb,
+               flags);
   if (sspec == NULL)
     return NULL;
 
   g_free (sspec->default_value);
   sspec->default_value = g_strdup (default_value);
@@ -2287,24 +2292,24 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_param (const gchar *name,
-                    const gchar *nick,
-                    const gchar *blurb,
-            GType    param_type,
-                    GParamFlags  flags)
+        const gchar *nick,
+        const gchar *blurb,
+        GType  param_type,
+        GParamFlags  flags)
 {
   GParamSpecParam *pspec;
 
   g_return_val_if_fail (G_TYPE_IS_PARAM (param_type), NULL);
 
   pspec = g_param_spec_internal (G_TYPE_PARAM_PARAM,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (pspec == NULL)
     return NULL;
 
   G_PARAM_SPEC (pspec)->value_type = param_type;
 
@@ -2326,25 +2331,25 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_boxed (const gchar *name,
-                    const gchar *nick,
-                    const gchar *blurb,
-            GType    boxed_type,
-                    GParamFlags  flags)
+        const gchar *nick,
+        const gchar *blurb,
+        GType  boxed_type,
+        GParamFlags  flags)
 {
   GParamSpecBoxed *bspec;
 
   g_return_val_if_fail (G_TYPE_IS_BOXED (boxed_type), NULL);
   g_return_val_if_fail (G_TYPE_IS_VALUE_TYPE (boxed_type), NULL);
 
   bspec = g_param_spec_internal (G_TYPE_PARAM_BOXED,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (bspec == NULL)
     return NULL;
 
   G_PARAM_SPEC (bspec)->value_type = boxed_type;
 
@@ -2366,21 +2371,21 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_pointer (const gchar *name,
-              const gchar *nick,
-              const gchar *blurb,
-              GParamFlags  flags)
+          const gchar *nick,
+          const gchar *blurb,
+          GParamFlags  flags)
 {
   GParamSpecPointer *pspec;
 
   pspec = g_param_spec_internal (G_TYPE_PARAM_POINTER,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (pspec == NULL)
     return NULL;
 
   return G_PARAM_SPEC (pspec);
 }
@@ -2403,22 +2408,22 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_gtype (const gchar *name,
-            const gchar *nick,
-            const gchar *blurb,
-            GType        is_a_type,
-            GParamFlags  flags)
+        const gchar *nick,
+        const gchar *blurb,
+        GType        is_a_type,
+        GParamFlags  flags)
 {
   GParamSpecGType *tspec;
 
   tspec = g_param_spec_internal (G_TYPE_PARAM_GTYPE,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (tspec == NULL)
     return NULL;
 
   tspec->is_a_type = is_a_type;
 
@@ -2443,25 +2448,25 @@
  *
  * Returns: a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_value_array (const gchar *name,
-              const gchar *nick,
-              const gchar *blurb,
-              GParamSpec  *element_spec,
-              GParamFlags  flags)
+        const gchar *nick,
+        const gchar *blurb,
+        GParamSpec  *element_spec,
+        GParamFlags  flags)
 {
   GParamSpecValueArray *aspec;
 
   if (element_spec)
     g_return_val_if_fail (G_IS_PARAM_SPEC (element_spec), NULL);
 
   aspec = g_param_spec_internal (G_TYPE_PARAM_VALUE_ARRAY,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (aspec == NULL)
     return NULL;
 
   if (element_spec)
     {
@@ -2487,24 +2492,24 @@
  *
  * Returns: (transfer full): a newly created parameter specification
  */
 GParamSpec*
 g_param_spec_object (const gchar *name,
-                     const gchar *nick,
-                     const gchar *blurb,
-             GType    object_type,
-                     GParamFlags  flags)
+         const gchar *nick,
+         const gchar *blurb,
+         GType    object_type,
+         GParamFlags  flags)
 {
   GParamSpecObject *ospec;
 
   g_return_val_if_fail (g_type_is_a (object_type, G_TYPE_OBJECT), NULL);
 
   ospec = g_param_spec_internal (G_TYPE_PARAM_OBJECT,
-                 name,
-                 nick,
-                 blurb,
-                 flags);
+         name,
+         nick,
+         blurb,
+         flags);
   if (ospec == NULL)
     return NULL;
 
   G_PARAM_SPEC (ospec)->value_type = object_type;
 
@@ -2524,11 +2529,11 @@
  *
  * Returns: the newly created #GParamSpec
  */
 GParamSpec*
 g_param_spec_override (const gchar *name,
-               GParamSpec  *overridden)
+           GParamSpec  *overridden)
 {
   GParamSpec *pspec;
 
   g_return_val_if_fail (name != NULL, NULL);
   g_return_val_if_fail (G_IS_PARAM_SPEC (overridden), NULL);
@@ -2537,18 +2542,18 @@
    */
   while (TRUE)
     {
       GParamSpec *indirect = g_param_spec_get_redirect_target (overridden);
       if (indirect)
-    overridden = indirect;
+  overridden = indirect;
       else
-    break;
+  break;
     }
 
   pspec = g_param_spec_internal (G_TYPE_PARAM_OVERRIDE,
-                 name, NULL, NULL,
-                 overridden->flags);
+         name, NULL, NULL,
+         overridden->flags);
   if (pspec == NULL)
     return NULL;
 
   pspec->value_type = G_PARAM_SPEC_VALUE_TYPE (overridden);
   G_PARAM_SPEC_OVERRIDE (pspec)->overridden = g_param_spec_ref (overridden);
