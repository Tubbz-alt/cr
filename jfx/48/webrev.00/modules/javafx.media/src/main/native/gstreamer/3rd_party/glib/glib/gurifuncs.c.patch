diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gurifuncs.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gurifuncs.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gurifuncs.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gurifuncs.c
@@ -81,12 +81,12 @@
  *
  * Since: 2.16
  **/
 char *
 g_uri_unescape_segment (const char *escaped_string,
-            const char *escaped_string_end,
-            const char *illegal_characters)
+      const char *escaped_string_end,
+      const char *illegal_characters)
 {
   const char *in;
   char *out, *result;
   gint character;
 
@@ -102,33 +102,33 @@
   for (in = escaped_string; in < escaped_string_end; in++)
     {
       character = *in;
 
       if (*in == '%')
-    {
-      in++;
-
-      if (escaped_string_end - in < 2)
-        {
-          /* Invalid escaped char (to short) */
-          g_free (result);
-          return NULL;
-        }
-
-      character = unescape_character (in);
-
-      /* Check for an illegal character. We consider '\0' illegal here. */
-      if (character <= 0 ||
-          (illegal_characters != NULL &&
-           strchr (illegal_characters, (char)character) != NULL))
-        {
-          g_free (result);
-          return NULL;
-        }
-
-      in++; /* The other char will be eaten in the loop header */
-    }
+  {
+    in++;
+
+    if (escaped_string_end - in < 2)
+      {
+        /* Invalid escaped char (to short) */
+        g_free (result);
+        return NULL;
+      }
+
+    character = unescape_character (in);
+
+    /* Check for an illegal character. We consider '\0' illegal here. */
+    if (character <= 0 ||
+        (illegal_characters != NULL &&
+         strchr (illegal_characters, (char)character) != NULL))
+      {
+        g_free (result);
+        return NULL;
+      }
+
+    in++; /* The other char will be eaten in the loop header */
+  }
       *out++ = (char)character;
     }
 
   *out = '\0';
 
@@ -154,11 +154,11 @@
  *
  * Since: 2.16
  **/
 char *
 g_uri_unescape_string (const char *escaped_string,
-               const char *illegal_characters)
+           const char *illegal_characters)
 {
   return g_uri_unescape_segment (escaped_string, NULL, illegal_characters);
 }
 
 /**
@@ -200,17 +200,17 @@
   while (1)
     {
       c = *p++;
 
       if (c == ':')
-    break;
+  break;
 
       if (!(g_ascii_isalnum(c) ||
-        c == '+' ||
-        c == '-' ||
-        c == '.'))
-    return NULL;
+      c == '+' ||
+      c == '-' ||
+      c == '.'))
+  return NULL;
     }
 
   return g_strndup (uri, p - uri - 1);
 }
 
@@ -235,12 +235,12 @@
  *
  * Since: 2.16
  **/
 char *
 g_uri_escape_string (const char *unescaped,
-             const char  *reserved_chars_allowed,
-             gboolean     allow_utf8)
+         const char  *reserved_chars_allowed,
+         gboolean     allow_utf8)
 {
   GString *s;
 
   g_return_val_if_fail (unescaped != NULL, NULL);
 
