diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gpattern.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gpattern.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gpattern.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gpattern.c
@@ -78,12 +78,12 @@
 
 
 /* --- functions --- */
 static inline gboolean
 g_pattern_ph_match (const gchar *match_pattern,
-            const gchar *match_string,
-            gboolean    *wildcard_reached_p)
+        const gchar *match_string,
+        gboolean    *wildcard_reached_p)
 {
   const gchar *pattern, *string;
   gchar ch;
 
   pattern = match_pattern;
@@ -92,64 +92,64 @@
   ch = *pattern;
   pattern++;
   while (ch)
     {
       switch (ch)
+  {
+  case '?':
+    if (!*string)
+      return FALSE;
+    string = g_utf8_next_char (string);
+    break;
+
+  case '*':
+    *wildcard_reached_p = TRUE;
+    do
+      {
+        ch = *pattern;
+        pattern++;
+        if (ch == '?')
     {
-    case '?':
       if (!*string)
         return FALSE;
       string = g_utf8_next_char (string);
-      break;
-
-    case '*':
-      *wildcard_reached_p = TRUE;
-      do
-        {
-          ch = *pattern;
-          pattern++;
-          if (ch == '?')
-        {
-          if (!*string)
-            return FALSE;
-          string = g_utf8_next_char (string);
-        }
-        }
-      while (ch == '*' || ch == '?');
-      if (!ch)
-        return TRUE;
-      do
-        {
+    }
+      }
+    while (ch == '*' || ch == '?');
+    if (!ch)
+      return TRUE;
+    do
+      {
               gboolean next_wildcard_reached = FALSE;
-          while (ch != *string)
-        {
-          if (!*string)
-            return FALSE;
-          string = g_utf8_next_char (string);
-        }
-          string++;
-          if (g_pattern_ph_match (pattern, string, &next_wildcard_reached))
-        return TRUE;
+        while (ch != *string)
+    {
+      if (!*string)
+        return FALSE;
+      string = g_utf8_next_char (string);
+    }
+        string++;
+        if (g_pattern_ph_match (pattern, string, &next_wildcard_reached))
+    return TRUE;
               if (next_wildcard_reached)
                 /* the forthcoming pattern substring up to the next wildcard has
                  * been matched, but a mismatch occoured for the rest of the
                  * pattern, following the next wildcard.
                  * there's no need to advance the current match position any
                  * further if the rest pattern will not match.
                  */
-        return FALSE;
-        }
-      while (*string);
-      break;
+    return FALSE;
+      }
+    while (*string);
+    break;
 
-    default:
-      if (ch == *string)
-        string++;
-      else
-        return FALSE;
-      break;
-    }
+  default:
+    if (ch == *string)
+      string++;
+    else
+      return FALSE;
+    break;
+  }
 
       ch = *pattern;
       pattern++;
     }
 
@@ -184,13 +184,13 @@
  *
  * Returns: %TRUE if @string matches @pspec
  **/
 gboolean
 g_pattern_match (GPatternSpec *pspec,
-         guint         string_length,
-         const gchar  *string,
-         const gchar  *string_reversed)
+     guint         string_length,
+     const gchar  *string,
+     const gchar  *string_reversed)
 {
   g_return_val_if_fail (pspec != NULL, FALSE);
   g_return_val_if_fail (string != NULL, FALSE);
 
   if (string_length < pspec->min_length ||
@@ -202,32 +202,32 @@
       gboolean dummy;
     case G_MATCH_ALL:
       return g_pattern_ph_match (pspec->pattern, string, &dummy);
     case G_MATCH_ALL_TAIL:
       if (string_reversed)
-    return g_pattern_ph_match (pspec->pattern, string_reversed, &dummy);
+  return g_pattern_ph_match (pspec->pattern, string_reversed, &dummy);
       else
-    {
+  {
           gboolean result;
           gchar *tmp;
-      tmp = g_utf8_strreverse (string, string_length);
-      result = g_pattern_ph_match (pspec->pattern, tmp, &dummy);
-      g_free (tmp);
-      return result;
-    }
+    tmp = g_utf8_strreverse (string, string_length);
+    result = g_pattern_ph_match (pspec->pattern, tmp, &dummy);
+    g_free (tmp);
+    return result;
+  }
     case G_MATCH_HEAD:
       if (pspec->pattern_length == string_length)
-    return strcmp (pspec->pattern, string) == 0;
+  return strcmp (pspec->pattern, string) == 0;
       else if (pspec->pattern_length)
-    return strncmp (pspec->pattern, string, pspec->pattern_length) == 0;
+  return strncmp (pspec->pattern, string, pspec->pattern_length) == 0;
       else
-    return TRUE;
+  return TRUE;
     case G_MATCH_TAIL:
       if (pspec->pattern_length)
         return strcmp (pspec->pattern, string + (string_length - pspec->pattern_length)) == 0;
       else
-    return TRUE;
+  return TRUE;
     case G_MATCH_EXACT:
       if (pspec->pattern_length != string_length)
         return FALSE;
       else
         return strcmp (pspec->pattern, string) == 0;
@@ -267,39 +267,39 @@
   pspec->pattern = g_new (gchar, pspec->pattern_length + 1);
   d = pspec->pattern;
   for (i = 0, s = pattern; *s != 0; s++)
     {
       switch (*s)
-    {
-    case '*':
-      if (follows_wildcard) /* compress multiple wildcards */
-        {
-          pspec->pattern_length--;
-          continue;
-        }
-      follows_wildcard = TRUE;
-      if (hw_pos < 0)
-        hw_pos = i;
-      tw_pos = i;
-      break;
-    case '?':
-      pending_jokers++;
-      pspec->min_length++;
-      pspec->max_length += 4; /* maximum UTF-8 character length */
-      continue;
-    default:
-      for (; pending_jokers; pending_jokers--, i++) {
-        *d++ = '?';
-        if (hj_pos < 0)
-         hj_pos = i;
-        tj_pos = i;
+  {
+  case '*':
+    if (follows_wildcard) /* compress multiple wildcards */
+      {
+        pspec->pattern_length--;
+        continue;
       }
-      follows_wildcard = FALSE;
-      pspec->min_length++;
-      pspec->max_length++;
-      break;
+    follows_wildcard = TRUE;
+    if (hw_pos < 0)
+      hw_pos = i;
+    tw_pos = i;
+    break;
+  case '?':
+    pending_jokers++;
+    pspec->min_length++;
+    pspec->max_length += 4; /* maximum UTF-8 character length */
+    continue;
+  default:
+    for (; pending_jokers; pending_jokers--, i++) {
+      *d++ = '?';
+        if (hj_pos < 0)
+       hj_pos = i;
+      tj_pos = i;
     }
+    follows_wildcard = FALSE;
+    pspec->min_length++;
+    pspec->max_length++;
+    break;
+  }
       *d++ = *s;
       i++;
     }
   for (; pending_jokers; pending_jokers--) {
     *d++ = '?';
@@ -316,28 +316,28 @@
 
   /* special case sole head/tail wildcard or exact matches */
   if (!seen_joker && !more_wildcards)
     {
       if (pspec->pattern[0] == '*')
-    {
-      pspec->match_type = G_MATCH_TAIL;
+  {
+    pspec->match_type = G_MATCH_TAIL;
           memmove (pspec->pattern, pspec->pattern + 1, --pspec->pattern_length);
-      pspec->pattern[pspec->pattern_length] = 0;
-      return pspec;
-    }
+    pspec->pattern[pspec->pattern_length] = 0;
+    return pspec;
+  }
       if (pspec->pattern_length > 0 &&
-      pspec->pattern[pspec->pattern_length - 1] == '*')
-    {
-      pspec->match_type = G_MATCH_HEAD;
-      pspec->pattern[--pspec->pattern_length] = 0;
-      return pspec;
-    }
+    pspec->pattern[pspec->pattern_length - 1] == '*')
+  {
+    pspec->match_type = G_MATCH_HEAD;
+    pspec->pattern[--pspec->pattern_length] = 0;
+    return pspec;
+  }
       if (!seen_wildcard)
-    {
-      pspec->match_type = G_MATCH_EXACT;
-      return pspec;
-    }
+  {
+    pspec->match_type = G_MATCH_EXACT;
+    return pspec;
+  }
     }
 
   /* now just need to distinguish between head or tail match start */
   tw_pos = pspec->pattern_length - 1 - tw_pos;  /* last pos to tail distance */
   tj_pos = pspec->pattern_length - 1 - tj_pos;  /* last pos to tail distance */
@@ -378,18 +378,18 @@
  *
  * Returns: Whether the compiled patterns are equal
  **/
 gboolean
 g_pattern_spec_equal (GPatternSpec *pspec1,
-              GPatternSpec *pspec2)
+          GPatternSpec *pspec2)
 {
   g_return_val_if_fail (pspec1 != NULL, FALSE);
   g_return_val_if_fail (pspec2 != NULL, FALSE);
 
   return (pspec1->pattern_length == pspec2->pattern_length &&
-      pspec1->match_type == pspec2->match_type &&
-      strcmp (pspec1->pattern, pspec2->pattern) == 0);
+    pspec1->match_type == pspec2->match_type &&
+    strcmp (pspec1->pattern, pspec2->pattern) == 0);
 }
 
 /**
  * g_pattern_match_string:
  * @pspec: a #GPatternSpec
@@ -401,11 +401,11 @@
  *
  * Returns: %TRUE if @string matches @pspec
  **/
 gboolean
 g_pattern_match_string (GPatternSpec *pspec,
-            const gchar  *string)
+      const gchar  *string)
 {
   g_return_val_if_fail (pspec != NULL, FALSE);
   g_return_val_if_fail (string != NULL, FALSE);
 
   return g_pattern_match (pspec, strlen (string), string, NULL);
@@ -423,11 +423,11 @@
  *
  * Returns: %TRUE if @string matches @pspec
  **/
 gboolean
 g_pattern_match_simple (const gchar *pattern,
-            const gchar *string)
+      const gchar *string)
 {
   GPatternSpec *pspec;
   gboolean ergo;
 
   g_return_val_if_fail (pattern != NULL, FALSE);
