diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/app/gstappsrc.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/app/gstappsrc.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/app/gstappsrc.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/app/gstappsrc.c
@@ -240,10 +240,11 @@
 
 static guint gst_app_src_signals[LAST_SIGNAL] = { 0 };
 
 #define gst_app_src_parent_class parent_class
 G_DEFINE_TYPE_WITH_CODE (GstAppSrc, gst_app_src, GST_TYPE_BASE_SRC,
+    G_ADD_PRIVATE (GstAppSrc)
     G_IMPLEMENT_INTERFACE (GST_TYPE_URI_HANDLER, gst_app_src_uri_handler_init));
 
 static void
 gst_app_src_class_init (GstAppSrcClass * klass)
 {
@@ -370,11 +371,11 @@
           "Emit need-data, enough-data and seek-data signals",
           DEFAULT_PROP_EMIT_SIGNALS,
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
   /**
-   * GstAppSrc::empty-percent:
+   * GstAppSrc::min-percent:
    *
    * Make appsrc emit the "need-data" signal when the amount of bytes in the
    * queue drops below this percentage of max-bytes.
    */
   g_object_class_install_property (gobject_class, PROP_MIN_PERCENT,
@@ -560,21 +561,18 @@
 
   klass->push_buffer = gst_app_src_push_buffer_action;
   klass->push_buffer_list = gst_app_src_push_buffer_list_action;
   klass->push_sample = gst_app_src_push_sample_action;
   klass->end_of_stream = gst_app_src_end_of_stream;
-
-  g_type_class_add_private (klass, sizeof (GstAppSrcPrivate));
 }
 
 static void
 gst_app_src_init (GstAppSrc * appsrc)
 {
   GstAppSrcPrivate *priv;
 
-  priv = appsrc->priv = G_TYPE_INSTANCE_GET_PRIVATE (appsrc, GST_TYPE_APP_SRC,
-      GstAppSrcPrivate);
+  priv = appsrc->priv = gst_app_src_get_instance_private (appsrc);
 
   g_mutex_init (&priv->mutex);
   g_cond_init (&priv->cond);
   priv->queue = gst_queue_array_new (16);
   priv->wait_status = NOONE_WAITING;
@@ -1200,11 +1198,11 @@
         if (next_caps) {
           gst_caps_unref (next_caps);
         }
 
         if (caps_changed)
-        gst_app_src_do_negotiate (bsrc);
+          gst_app_src_do_negotiate (bsrc);
 
         /* Lock has released so now may need
          *- flushing
          *- new caps change
          *- check queue has data */
@@ -1215,11 +1213,11 @@
         continue;
       }
 
       if (GST_IS_BUFFER (obj)) {
         *buf = GST_BUFFER (obj);
-      buf_size = gst_buffer_get_size (*buf);
+        buf_size = gst_buffer_get_size (*buf);
         GST_LOG_OBJECT (appsrc, "have buffer %p of size %u", *buf, buf_size);
       } else {
         GstBufferList *buffer_list;
 
         g_assert (GST_IS_BUFFER_LIST (obj));
@@ -1241,13 +1239,13 @@
       if (priv->stream_type == GST_APP_STREAM_TYPE_RANDOM_ACCESS)
         priv->offset += buf_size;
 
       /* signal that we removed an item */
       if ((priv->wait_status & APP_WAITING))
-      g_cond_broadcast (&priv->cond);
+        g_cond_broadcast (&priv->cond);
 
-      /* see if we go lower than the empty-percent */
+      /* see if we go lower than the min-percent */
       if (priv->min_percent && priv->max_bytes) {
         if (priv->queued_bytes * 100 / priv->max_bytes <= priv->min_percent)
           /* ignore flushing state, we got a buffer and we will return it now.
            * Errors will be handled in the next round */
           gst_app_src_emit_need_data (appsrc, size);
@@ -1339,15 +1337,15 @@
   if (caps_changed) {
     GstCaps *new_caps;
     gpointer t;
 
     new_caps = caps ? gst_caps_copy (caps) : NULL;
-  GST_DEBUG_OBJECT (appsrc, "setting caps to %" GST_PTR_FORMAT, caps);
+    GST_DEBUG_OBJECT (appsrc, "setting caps to %" GST_PTR_FORMAT, caps);
 
     while ((t = gst_queue_array_peek_tail (priv->queue)) && GST_IS_CAPS (t)) {
       gst_caps_unref (gst_queue_array_pop_tail (priv->queue));
-  }
+    }
     gst_queue_array_push_tail (priv->queue, new_caps);
     gst_caps_replace (&priv->last_caps, new_caps);
   }
 
   GST_OBJECT_UNLOCK (appsrc);
@@ -1858,19 +1856,19 @@
     if (!steal_ref)
       gst_buffer_list_ref (buflist);
     gst_queue_array_push_tail (priv->queue, buflist);
     priv->queued_bytes += gst_buffer_list_calculate_size (buflist);
   } else {
-  GST_DEBUG_OBJECT (appsrc, "queueing buffer %p", buffer);
-  if (!steal_ref)
-    gst_buffer_ref (buffer);
+    GST_DEBUG_OBJECT (appsrc, "queueing buffer %p", buffer);
+    if (!steal_ref)
+      gst_buffer_ref (buffer);
     gst_queue_array_push_tail (priv->queue, buffer);
-  priv->queued_bytes += gst_buffer_get_size (buffer);
+    priv->queued_bytes += gst_buffer_get_size (buffer);
   }
 
   if ((priv->wait_status & STREAM_WAITING))
-  g_cond_broadcast (&priv->cond);
+    g_cond_broadcast (&priv->cond);
 
   g_mutex_unlock (&priv->mutex);
 
   return GST_FLOW_OK;
 
@@ -1982,10 +1980,13 @@
  * Extract a buffer from the provided sample and adds it to the queue of
  * buffers that the appsrc element will push to its source pad. Any
  * previous caps that were set on appsrc will be replaced by the caps
  * associated with the sample if not equal.
  *
+ * This function does not take ownership of the
+ * sample so the sample needs to be unreffed after calling this function.
+ *
  * When the block property is TRUE, this function can block until free
  * space becomes available in the queue.
  *
  * Returns: #GST_FLOW_OK when the buffer was successfuly queued.
  * #GST_FLOW_FLUSHING when @appsrc is not PAUSED or PLAYING.
