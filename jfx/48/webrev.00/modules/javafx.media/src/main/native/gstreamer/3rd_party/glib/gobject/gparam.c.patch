diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gparam.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gparam.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gparam.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gparam.c
@@ -49,36 +49,36 @@
  */
 
 
 /* --- defines --- */
 #define PARAM_FLOATING_FLAG                     0x2
-#define G_PARAM_USER_MASK           (~0U << G_PARAM_USER_SHIFT)
-#define PSPEC_APPLIES_TO_VALUE(pspec, value)    (G_TYPE_CHECK_VALUE_TYPE ((value), G_PARAM_SPEC_VALUE_TYPE (pspec)))
+#define G_PARAM_USER_MASK     (~0U << G_PARAM_USER_SHIFT)
+#define PSPEC_APPLIES_TO_VALUE(pspec, value)  (G_TYPE_CHECK_VALUE_TYPE ((value), G_PARAM_SPEC_VALUE_TYPE (pspec)))
 
 /* --- prototypes --- */
-static void g_param_spec_class_base_init     (GParamSpecClass   *class);
-static void g_param_spec_class_base_finalize (GParamSpecClass   *class);
-static void g_param_spec_class_init      (GParamSpecClass   *class,
-                          gpointer               class_data);
-static void g_param_spec_init        (GParamSpec        *pspec,
-                          GParamSpecClass   *class);
-static void g_param_spec_finalize        (GParamSpec        *pspec);
-static void value_param_init        (GValue     *value);
-static void value_param_free_value      (GValue     *value);
-static void value_param_copy_value      (const GValue   *src_value,
-                         GValue     *dest_value);
-static void value_param_transform_value (const GValue   *src_value,
-                         GValue     *dest_value);
-static gpointer value_param_peek_pointer    (const GValue   *value);
-static gchar*   value_param_collect_value   (GValue     *value,
-                                                 guint           n_collect_values,
-                                                 GTypeCValue    *collect_values,
-                                                 guint           collect_flags);
-static gchar*   value_param_lcopy_value     (const GValue   *value,
-                         guint           n_collect_values,
-                         GTypeCValue    *collect_values,
-                         guint           collect_flags);
+static void g_param_spec_class_base_init   (GParamSpecClass *class);
+static void g_param_spec_class_base_finalize (GParamSpecClass *class);
+static void g_param_spec_class_init    (GParamSpecClass *class,
+              gpointer               class_data);
+static void g_param_spec_init    (GParamSpec    *pspec,
+              GParamSpecClass *class);
+static void g_param_spec_finalize    (GParamSpec    *pspec);
+static void value_param_init    (GValue   *value);
+static void value_param_free_value    (GValue   *value);
+static void value_param_copy_value    (const GValue *src_value,
+             GValue   *dest_value);
+static void value_param_transform_value (const GValue *src_value,
+             GValue   *dest_value);
+static gpointer value_param_peek_pointer  (const GValue *value);
+static gchar* value_param_collect_value (GValue   *value,
+             guint           n_collect_values,
+             GTypeCValue    *collect_values,
+             guint           collect_flags);
+static gchar* value_param_lcopy_value   (const GValue *value,
+             guint           n_collect_values,
+             GTypeCValue    *collect_values,
+             guint           collect_flags);
 
 typedef struct
 {
   GValue default_value;
   GQuark name_quark;
@@ -105,26 +105,26 @@
   static const GTypeValueTable param_value_table = {
     value_param_init,           /* value_init */
     value_param_free_value,     /* value_free */
     value_param_copy_value,     /* value_copy */
     value_param_peek_pointer,   /* value_peek_pointer */
-    "p",            /* collect_format */
+    "p",      /* collect_format */
     value_param_collect_value,  /* collect_value */
-    "p",            /* lcopy_format */
+    "p",      /* lcopy_format */
     value_param_lcopy_value,    /* lcopy_value */
   };
   const GTypeInfo param_spec_info = {
     sizeof (GParamSpecClass),
 
     (GBaseInitFunc) g_param_spec_class_base_init,
     (GBaseFinalizeFunc) g_param_spec_class_base_finalize,
     (GClassInitFunc) g_param_spec_class_init,
     (GClassFinalizeFunc) NULL,
-    NULL,   /* class_data */
+    NULL, /* class_data */
 
     sizeof (GParamSpec),
-    0,      /* n_preallocs */
+    0,    /* n_preallocs */
     (GInstanceInitFunc) g_param_spec_init,
 
     &param_value_table,
   };
   GType type;
@@ -150,11 +150,11 @@
 {
 }
 
 static void
 g_param_spec_class_init (GParamSpecClass *class,
-             gpointer         class_data)
+       gpointer         class_data)
 {
   class->value_type = G_TYPE_NONE;
   class->finalize = g_param_spec_finalize;
   class->value_set_default = NULL;
   class->value_validate = NULL;
@@ -163,11 +163,11 @@
   g_type_class_adjust_private_offset (class, &g_param_private_offset);
 }
 
 static void
 g_param_spec_init (GParamSpec      *pspec,
-           GParamSpecClass *class)
+       GParamSpecClass *class)
 {
   pspec->name = NULL;
   pspec->_nick = NULL;
   pspec->_blurb = NULL;
   pspec->flags = 0;
@@ -320,11 +320,11 @@
     {
       GParamSpec *redirect_target;
 
       redirect_target = g_param_spec_get_redirect_target (pspec);
       if (redirect_target && redirect_target->_nick)
-    return redirect_target->_nick;
+  return redirect_target->_nick;
     }
 
   return pspec->name;
 }
 
@@ -347,11 +347,11 @@
     {
       GParamSpec *redirect_target;
 
       redirect_target = g_param_spec_get_redirect_target (pspec);
       if (redirect_target && redirect_target->_blurb)
-    return redirect_target->_blurb;
+  return redirect_target->_blurb;
     }
 
   return NULL;
 }
 
@@ -363,14 +363,14 @@
   for (p = key; *p != 0; p++)
     {
       gchar c = *p;
 
       if (c != '-' &&
-      (c < '0' || c > '9') &&
-      (c < 'A' || c > 'Z') &&
-      (c < 'a' || c > 'z'))
-    *p = '-';
+    (c < '0' || c > '9') &&
+    (c < 'A' || c > 'Z') &&
+    (c < 'a' || c > 'z'))
+  *p = '-';
     }
 }
 
 static gboolean
 is_canonical (const gchar *key)
@@ -380,14 +380,14 @@
   for (p = key; *p != 0; p++)
     {
       gchar c = *p;
 
       if (c != '-' &&
-      (c < '0' || c > '9') &&
-      (c < 'A' || c > 'Z') &&
-      (c < 'a' || c > 'z'))
-    return FALSE;
+    (c < '0' || c > '9') &&
+    (c < 'A' || c > 'Z') &&
+    (c < 'a' || c > 'z'))
+  return FALSE;
     }
 
   return TRUE;
 }
 
@@ -419,14 +419,14 @@
  *
  * Returns: (type GObject.ParamSpec): a newly allocated #GParamSpec instance
  */
 gpointer
 g_param_spec_internal (GType        param_type,
-               const gchar *name,
-               const gchar *nick,
-               const gchar *blurb,
-               GParamFlags  flags)
+           const gchar *name,
+           const gchar *nick,
+           const gchar *blurb,
+           GParamFlags  flags)
 {
   GParamSpec *pspec;
   GParamSpecPrivate *priv;
 
   g_return_val_if_fail (G_TYPE_IS_PARAM (param_type) && param_type != G_TYPE_PARAM, NULL);
@@ -487,11 +487,11 @@
  *
  * Returns: (transfer none): the user data pointer set, or %NULL
  */
 gpointer
 g_param_spec_get_qdata (GParamSpec *pspec,
-            GQuark      quark)
+      GQuark      quark)
 {
   g_return_val_if_fail (G_IS_PARAM_SPEC (pspec), NULL);
 
   return quark ? g_datalist_id_get_data (&pspec->qdata, quark) : NULL;
 }
@@ -509,12 +509,12 @@
  * previously set user data pointer, overrides (frees) the old pointer
  * set, using %NULL as pointer essentially removes the data stored.
  */
 void
 g_param_spec_set_qdata (GParamSpec *pspec,
-            GQuark      quark,
-            gpointer    data)
+      GQuark      quark,
+      gpointer    data)
 {
   g_return_if_fail (G_IS_PARAM_SPEC (pspec));
   g_return_if_fail (quark > 0);
 
   g_datalist_id_set_data (&pspec->qdata, quark, data);
@@ -534,13 +534,13 @@
  * finalized, or the data is being overwritten by a call to
  * g_param_spec_set_qdata() with the same @quark.
  */
 void
 g_param_spec_set_qdata_full (GParamSpec    *pspec,
-                 GQuark         quark,
-                 gpointer       data,
-                 GDestroyNotify destroy)
+           GQuark         quark,
+           gpointer       data,
+           GDestroyNotify destroy)
 {
   g_return_if_fail (G_IS_PARAM_SPEC (pspec));
   g_return_if_fail (quark > 0);
 
   g_datalist_id_set_data_full (&pspec->qdata, quark, data, data ? destroy : (GDestroyNotify) NULL);
@@ -558,11 +558,11 @@
  *
  * Returns: (transfer none): the user data pointer set, or %NULL
  */
 gpointer
 g_param_spec_steal_qdata (GParamSpec *pspec,
-              GQuark      quark)
+        GQuark      quark)
 {
   g_return_val_if_fail (G_IS_PARAM_SPEC (pspec), NULL);
   g_return_val_if_fail (quark > 0, NULL);
 
   return g_datalist_id_remove_no_notify (&pspec->qdata, quark);
@@ -603,11 +603,11 @@
  *
  * Sets @value to its default value as specified in @pspec.
  */
 void
 g_param_value_set_default (GParamSpec *pspec,
-               GValue     *value)
+         GValue     *value)
 {
   g_return_if_fail (G_IS_PARAM_SPEC (pspec));
   g_return_if_fail (G_IS_VALUE (value));
   g_return_if_fail (PSPEC_APPLIES_TO_VALUE (pspec, value));
 
@@ -624,11 +624,11 @@
  *
  * Returns: whether @value contains the canonical default for this @pspec
  */
 gboolean
 g_param_value_defaults (GParamSpec *pspec,
-            GValue     *value)
+      GValue     *value)
 {
   GValue dflt_value = G_VALUE_INIT;
   gboolean defaults;
 
   g_return_val_if_fail (G_IS_PARAM_SPEC (pspec), FALSE);
@@ -657,23 +657,23 @@
  *
  * Returns: whether modifying @value was necessary to ensure validity
  */
 gboolean
 g_param_value_validate (GParamSpec *pspec,
-            GValue     *value)
+      GValue     *value)
 {
   g_return_val_if_fail (G_IS_PARAM_SPEC (pspec), FALSE);
   g_return_val_if_fail (G_IS_VALUE (value), FALSE);
   g_return_val_if_fail (PSPEC_APPLIES_TO_VALUE (pspec, value), FALSE);
 
   if (G_PARAM_SPEC_GET_CLASS (pspec)->value_validate)
     {
       GValue oval = *value;
 
       if (G_PARAM_SPEC_GET_CLASS (pspec)->value_validate (pspec, value) ||
-      memcmp (&oval.data, &value->data, sizeof (oval.data)))
-    return TRUE;
+    memcmp (&oval.data, &value->data, sizeof (oval.data)))
+  return TRUE;
     }
 
   return FALSE;
 }
 
@@ -696,13 +696,13 @@
  * Returns: %TRUE if transformation and validation were successful,
  *  %FALSE otherwise and @dest_value is left untouched.
  */
 gboolean
 g_param_value_convert (GParamSpec   *pspec,
-                       const GValue *src_value,
-                       GValue       *dest_value,
-               gboolean      strict_validation)
+           const GValue *src_value,
+           GValue       *dest_value,
+           gboolean      strict_validation)
 {
   GValue tmp_value = G_VALUE_INIT;
 
   g_return_val_if_fail (G_IS_PARAM_SPEC (pspec), FALSE);
   g_return_val_if_fail (G_IS_VALUE (src_value), FALSE);
@@ -742,12 +742,12 @@
  *
  * Returns: -1, 0 or +1, for a less than, equal to or greater than result
  */
 gint
 g_param_values_cmp (GParamSpec   *pspec,
-            const GValue *value1,
-            const GValue *value2)
+        const GValue *value1,
+        const GValue *value2)
 {
   gint cmp;
 
   /* param_values_cmp() effectively does: value1 - value2
    * so the return values are:
@@ -779,21 +779,21 @@
     g_param_spec_unref (value->data[0].v_pointer);
 }
 
 static void
 value_param_copy_value (const GValue *src_value,
-            GValue       *dest_value)
+      GValue       *dest_value)
 {
   if (src_value->data[0].v_pointer)
     dest_value->data[0].v_pointer = g_param_spec_ref (src_value->data[0].v_pointer);
   else
     dest_value->data[0].v_pointer = NULL;
 }
 
 static void
 value_param_transform_value (const GValue *src_value,
-                 GValue       *dest_value)
+           GValue       *dest_value)
 {
   if (src_value->data[0].v_pointer &&
       g_type_is_a (G_PARAM_SPEC_TYPE (dest_value->data[0].v_pointer), G_VALUE_TYPE (dest_value)))
     dest_value->data[0].v_pointer = g_param_spec_ref (src_value->data[0].v_pointer);
   else
@@ -806,43 +806,43 @@
   return value->data[0].v_pointer;
 }
 
 static gchar*
 value_param_collect_value (GValue      *value,
-               guint        n_collect_values,
-               GTypeCValue *collect_values,
-               guint        collect_flags)
+         guint        n_collect_values,
+         GTypeCValue *collect_values,
+         guint        collect_flags)
 {
   if (collect_values[0].v_pointer)
     {
       GParamSpec *param = collect_values[0].v_pointer;
 
       if (param->g_type_instance.g_class == NULL)
-    return g_strconcat ("invalid unclassed param spec pointer for value type '",
-                G_VALUE_TYPE_NAME (value),
-                "'",
-                NULL);
+  return g_strconcat ("invalid unclassed param spec pointer for value type '",
+          G_VALUE_TYPE_NAME (value),
+          "'",
+          NULL);
       else if (!g_value_type_compatible (G_PARAM_SPEC_TYPE (param), G_VALUE_TYPE (value)))
-    return g_strconcat ("invalid param spec type '",
-                G_PARAM_SPEC_TYPE_NAME (param),
-                "' for value type '",
-                G_VALUE_TYPE_NAME (value),
-                "'",
-                NULL);
+  return g_strconcat ("invalid param spec type '",
+          G_PARAM_SPEC_TYPE_NAME (param),
+          "' for value type '",
+          G_VALUE_TYPE_NAME (value),
+          "'",
+          NULL);
       value->data[0].v_pointer = g_param_spec_ref (param);
     }
   else
     value->data[0].v_pointer = NULL;
 
   return NULL;
 }
 
 static gchar*
 value_param_lcopy_value (const GValue *value,
-             guint         n_collect_values,
-             GTypeCValue  *collect_values,
-             guint         collect_flags)
+       guint         n_collect_values,
+       GTypeCValue  *collect_values,
+       guint         collect_flags)
 {
   GParamSpec **param_p = collect_values[0].v_pointer;
 
   if (!param_p)
     return g_strdup_printf ("value location for '%s' passed as NULL", G_VALUE_TYPE_NAME (value));
@@ -887,17 +887,17 @@
   return h;
 }
 
 static gboolean
 param_spec_pool_equals (gconstpointer key_spec_1,
-            gconstpointer key_spec_2)
+      gconstpointer key_spec_2)
 {
   const GParamSpec *key1 = key_spec_1;
   const GParamSpec *key2 = key_spec_2;
 
   return (key1->owner_type == key2->owner_type &&
-      strcmp (key1->name, key2->name) == 0);
+    strcmp (key1->name, key2->name) == 0);
 }
 
 /**
  * g_param_spec_pool_new:
  * @type_prefixing: Whether the pool will support type-prefixed property names.
@@ -932,25 +932,25 @@
  *
  * Inserts a #GParamSpec in the pool.
  */
 void
 g_param_spec_pool_insert (GParamSpecPool *pool,
-              GParamSpec     *pspec,
-              GType           owner_type)
+        GParamSpec     *pspec,
+        GType           owner_type)
 {
   const gchar *p;
 
   if (pool && pspec && owner_type > 0 && pspec->owner_type == 0)
     {
       for (p = pspec->name; *p; p++)
-    {
-      if (!strchr (G_CSET_A_2_Z G_CSET_a_2_z G_CSET_DIGITS "-_", *p))
-        {
-          g_warning (G_STRLOC ": pspec name \"%s\" contains invalid characters", pspec->name);
-          return;
-        }
-    }
+  {
+    if (!strchr (G_CSET_A_2_Z G_CSET_a_2_z G_CSET_DIGITS "-_", *p))
+      {
+        g_warning (G_STRLOC ": pspec name \"%s\" contains invalid characters", pspec->name);
+        return;
+      }
+  }
       g_mutex_lock (&pool->mutex);
       pspec->owner_type = owner_type;
       g_param_spec_ref (pspec);
       g_hash_table_add (pool->hash_table, pspec);
       g_mutex_unlock (&pool->mutex);
@@ -971,19 +971,19 @@
  *
  * Removes a #GParamSpec from the pool.
  */
 void
 g_param_spec_pool_remove (GParamSpecPool *pool,
-              GParamSpec     *pspec)
+        GParamSpec     *pspec)
 {
   if (pool && pspec)
     {
       g_mutex_lock (&pool->mutex);
       if (g_hash_table_remove (pool->hash_table, pspec))
-    g_param_spec_unref (pspec);
+  g_param_spec_unref (pspec);
       else
-    g_warning (G_STRLOC ": attempt to remove unknown pspec '%s' from pool", pspec->name);
+  g_warning (G_STRLOC ": attempt to remove unknown pspec '%s' from pool", pspec->name);
       g_mutex_unlock (&pool->mutex);
     }
   else
     {
       g_return_if_fail (pool != NULL);
@@ -991,25 +991,25 @@
     }
 }
 
 static inline GParamSpec*
 param_spec_ht_lookup (GHashTable  *hash_table,
-              const gchar *param_name,
-              GType        owner_type,
-              gboolean     walk_ancestors)
+          const gchar *param_name,
+          GType        owner_type,
+          gboolean     walk_ancestors)
 {
   GParamSpec key, *pspec;
 
   key.owner_type = owner_type;
   key.name = (gchar*) param_name;
   if (walk_ancestors)
     do
       {
-    pspec = g_hash_table_lookup (hash_table, &key);
-    if (pspec)
-      return pspec;
-    key.owner_type = g_type_parent (key.owner_type);
+  pspec = g_hash_table_lookup (hash_table, &key);
+  if (pspec)
+    return pspec;
+  key.owner_type = g_type_parent (key.owner_type);
       }
     while (key.owner_type);
   else
     pspec = g_hash_table_lookup (hash_table, &key);
 
@@ -1058,13 +1058,13 @@
  * Returns: (transfer none): The found #GParamSpec, or %NULL if no
  * matching #GParamSpec was found.
  */
 GParamSpec*
 g_param_spec_pool_lookup (GParamSpecPool *pool,
-              const gchar    *param_name,
-              GType           owner_type,
-              gboolean        walk_ancestors)
+        const gchar    *param_name,
+        GType           owner_type,
+        gboolean        walk_ancestors)
 {
   GParamSpec *pspec;
   gchar *delim;
 
   g_return_val_if_fail (pool != NULL, NULL);
@@ -1092,39 +1092,39 @@
 
       strncpy (buffer, param_name, delim - param_name);
       buffer[l] = 0;
       type = g_type_from_name (buffer);
       if (l >= 32)
-    g_free (buffer);
-      if (type)     /* type==0 isn't a valid type pefix */
-    {
-      /* sanity check, these cases don't make a whole lot of sense */
-      if ((!walk_ancestors && type != owner_type) || !g_type_is_a (owner_type, type))
-        {
-          g_mutex_unlock (&pool->mutex);
+  g_free (buffer);
+      if (type)   /* type==0 isn't a valid type pefix */
+  {
+    /* sanity check, these cases don't make a whole lot of sense */
+    if ((!walk_ancestors && type != owner_type) || !g_type_is_a (owner_type, type))
+      {
+        g_mutex_unlock (&pool->mutex);
 
-          return NULL;
-        }
-      owner_type = type;
-      param_name += l + 2;
-      pspec = param_spec_ht_lookup (pool->hash_table, param_name, owner_type, walk_ancestors);
-      g_mutex_unlock (&pool->mutex);
+        return NULL;
+      }
+    owner_type = type;
+    param_name += l + 2;
+    pspec = param_spec_ht_lookup (pool->hash_table, param_name, owner_type, walk_ancestors);
+    g_mutex_unlock (&pool->mutex);
 
-      return pspec;
-    }
+    return pspec;
+  }
     }
   /* malformed param_name */
 
   g_mutex_unlock (&pool->mutex);
 
   return NULL;
 }
 
 static void
 pool_list (gpointer key,
-       gpointer value,
-       gpointer user_data)
+     gpointer value,
+     gpointer user_data)
 {
   GParamSpec *pspec = value;
   gpointer *data = user_data;
   GType owner_type = (GType) data[1];
 
@@ -1144,11 +1144,11 @@
  *          #GList of all #GParamSpecs owned by @owner_type in
  *          the pool#GParamSpecs.
  */
 GList*
 g_param_spec_pool_list_owned (GParamSpecPool *pool,
-                  GType           owner_type)
+            GType           owner_type)
 {
   gpointer data[2];
 
   g_return_val_if_fail (pool != NULL, NULL);
   g_return_val_if_fail (owner_type > 0, NULL);
@@ -1162,11 +1162,11 @@
   return data[0];
 }
 
 static gint
 pspec_compare_id (gconstpointer a,
-          gconstpointer b)
+      gconstpointer b)
 {
   const GParamSpec *pspec1 = a, *pspec2 = b;
 
   if (pspec1->param_id < pspec2->param_id)
     return -1;
@@ -1177,13 +1177,13 @@
   return strcmp (pspec1->name, pspec2->name);
 }
 
 static inline GSList*
 pspec_list_remove_overridden_and_redirected (GSList     *plist,
-                         GHashTable *ht,
-                         GType       owner_type,
-                         guint      *n_p)
+               GHashTable *ht,
+               GType       owner_type,
+               guint      *n_p)
 {
   GSList *rlist = NULL;
 
   while (plist)
     {
@@ -1196,59 +1196,59 @@
        * that have are overridden by non-redirected properties.
        * The idea is to get the single paramspec for each name that
        * best corresponds to what the application sees.
        */
       if (g_param_spec_get_redirect_target (pspec))
-    remove = TRUE;
+  remove = TRUE;
       else
-    {
-      found = param_spec_ht_lookup (ht, pspec->name, owner_type, TRUE);
-      if (found != pspec)
-        {
-          GParamSpec *redirect = g_param_spec_get_redirect_target (found);
-          if (redirect != pspec)
-        remove = TRUE;
-        }
-    }
+  {
+    found = param_spec_ht_lookup (ht, pspec->name, owner_type, TRUE);
+    if (found != pspec)
+      {
+        GParamSpec *redirect = g_param_spec_get_redirect_target (found);
+        if (redirect != pspec)
+    remove = TRUE;
+      }
+  }
 
       if (remove)
-    {
-      g_slist_free_1 (plist);
-    }
+  {
+    g_slist_free_1 (plist);
+  }
       else
-    {
-      plist->next = rlist;
-      rlist = plist;
-      *n_p += 1;
-    }
+  {
+    plist->next = rlist;
+    rlist = plist;
+    *n_p += 1;
+  }
       plist = tmp;
     }
   return rlist;
 }
 
 static void
 pool_depth_list (gpointer key,
-         gpointer value,
-         gpointer user_data)
+     gpointer value,
+     gpointer user_data)
 {
   GParamSpec *pspec = value;
   gpointer *data = user_data;
   GSList **slists = data[0];
   GType owner_type = (GType) data[1];
 
   if (g_type_is_a (owner_type, pspec->owner_type))
     {
       if (G_TYPE_IS_INTERFACE (pspec->owner_type))
-    {
-      slists[0] = g_slist_prepend (slists[0], pspec);
-    }
+  {
+    slists[0] = g_slist_prepend (slists[0], pspec);
+  }
       else
-    {
-      guint d = g_type_depth (pspec->owner_type);
+  {
+    guint d = g_type_depth (pspec->owner_type);
 
-      slists[d - 1] = g_slist_prepend (slists[d - 1], pspec);
-    }
+    slists[d - 1] = g_slist_prepend (slists[d - 1], pspec);
+  }
     }
 }
 
 /* We handle interfaces specially since we don't want to
  * count interface prerequisites like normal inheritance;
@@ -1259,12 +1259,12 @@
  * also 'depth' isn't a meaningful concept for interface
  * prerequites.
  */
 static void
 pool_depth_list_for_interface (gpointer key,
-                   gpointer value,
-                   gpointer user_data)
+             gpointer value,
+             gpointer user_data)
 {
   GParamSpec *pspec = value;
   gpointer *data = user_data;
   GSList **slists = data[0];
   GType owner_type = (GType) data[1];
@@ -1286,12 +1286,12 @@
  *          allocated array containing pointers to all #GParamSpecs
  *          owned by @owner_type in the pool
  */
 GParamSpec**
 g_param_spec_pool_list (GParamSpecPool *pool,
-            GType           owner_type,
-            guint          *n_pspecs_p)
+      GType           owner_type,
+      guint          *n_pspecs_p)
 {
   GParamSpec **pspecs, **p;
   GSList **slists, *node;
   gpointer data[2];
   guint d, i;
@@ -1306,24 +1306,24 @@
   slists = g_new0 (GSList*, d);
   data[0] = slists;
   data[1] = (gpointer) owner_type;
 
   g_hash_table_foreach (pool->hash_table,
-            G_TYPE_IS_INTERFACE (owner_type) ?
-               pool_depth_list_for_interface :
-               pool_depth_list,
-            &data);
+      G_TYPE_IS_INTERFACE (owner_type) ?
+         pool_depth_list_for_interface :
+         pool_depth_list,
+      &data);
 
   for (i = 0; i < d; i++)
     slists[i] = pspec_list_remove_overridden_and_redirected (slists[i], pool->hash_table, owner_type, n_pspecs_p);
   pspecs = g_new (GParamSpec*, *n_pspecs_p + 1);
   p = pspecs;
   for (i = 0; i < d; i++)
     {
       slists[i] = g_slist_sort (slists[i], pspec_compare_id);
       for (node = slists[i]; node; node = node->next)
-    *p++ = node->data;
+  *p++ = node->data;
       g_slist_free (slists[i]);
     }
   *p++ = NULL;
   g_free (slists);
   g_mutex_unlock (&pool->mutex);
@@ -1337,46 +1337,46 @@
 {
   /* class portion */
   GType           value_type;
   void          (*finalize)             (GParamSpec   *pspec);
   void          (*value_set_default)    (GParamSpec   *pspec,
-                     GValue       *value);
+           GValue       *value);
   gboolean      (*value_validate)       (GParamSpec   *pspec,
-                     GValue       *value);
+           GValue       *value);
   gint          (*values_cmp)           (GParamSpec   *pspec,
-                     const GValue *value1,
-                     const GValue *value2);
+           const GValue *value1,
+           const GValue *value2);
 } ParamSpecClassInfo;
 
 static void
 param_spec_generic_class_init (gpointer g_class,
-                   gpointer class_data)
+             gpointer class_data)
 {
   GParamSpecClass *class = g_class;
   ParamSpecClassInfo *info = class_data;
 
   class->value_type = info->value_type;
   if (info->finalize)
-    class->finalize = info->finalize;           /* optional */
+    class->finalize = info->finalize;     /* optional */
   class->value_set_default = info->value_set_default;
   if (info->value_validate)
-    class->value_validate = info->value_validate;   /* optional */
+    class->value_validate = info->value_validate; /* optional */
   class->values_cmp = info->values_cmp;
   g_free (class_data);
 }
 
 static void
 default_value_set_default (GParamSpec *pspec,
-               GValue     *value)
+         GValue     *value)
 {
   /* value is already zero initialized */
 }
 
 static gint
 default_values_cmp (GParamSpec   *pspec,
-            const GValue *value1,
-            const GValue *value2)
+        const GValue *value1,
+        const GValue *value2)
 {
   return memcmp (&value1->data, &value2->data, sizeof (value1->data));
 }
 
 /**
@@ -1391,11 +1391,11 @@
  *
  * Returns: The new type identifier.
  */
 GType
 g_param_type_register_static (const gchar              *name,
-                  const GParamSpecTypeInfo *pspec_info)
+            const GParamSpecTypeInfo *pspec_info)
 {
   GTypeInfo info = {
     sizeof (GParamSpecClass),      /* class_size */
     NULL,                          /* base_init */
     NULL,                          /* base_destroy */
@@ -1438,11 +1438,11 @@
  *
  * Set the contents of a %G_TYPE_PARAM #GValue to @param.
  */
 void
 g_value_set_param (GValue     *value,
-           GParamSpec *param)
+       GParamSpec *param)
 {
   g_return_if_fail (G_VALUE_HOLDS_PARAM (value));
   if (param)
     g_return_if_fail (G_IS_PARAM_SPEC (param));
 
@@ -1462,29 +1462,29 @@
  *
  * Deprecated: 2.4: Use g_value_take_param() instead.
  */
 void
 g_value_set_param_take_ownership (GValue     *value,
-                  GParamSpec *param)
+          GParamSpec *param)
 {
   g_value_take_param (value, param);
 }
 
 /**
  * g_value_take_param: (skip)
  * @value: a valid #GValue of type %G_TYPE_PARAM
  * @param: (nullable): the #GParamSpec to be set
  *
  * Sets the contents of a %G_TYPE_PARAM #GValue to @param and takes
- * over the ownership of the callers reference to @param; the caller
+ * over the ownership of the caller's reference to @param; the caller
  * doesn't have to unref it any more.
  *
  * Since: 2.4
  */
 void
 g_value_take_param (GValue     *value,
-            GParamSpec *param)
+        GParamSpec *param)
 {
   g_return_if_fail (G_VALUE_HOLDS_PARAM (value));
   if (param)
     g_return_if_fail (G_IS_PARAM_SPEC (param));
 
@@ -1563,12 +1563,11 @@
 
       g_value_init (&default_value, pspec->value_type);
       g_param_value_set_default (pspec, &default_value);
 
       /* store all but the type */
-      default_value.g_type = 0;
-      priv->default_value = default_value;
+      memcpy (priv->default_value.data, default_value.data, sizeof (default_value.data));
 
       g_once_init_leave (&priv->default_value.g_type, pspec->value_type);
     }
 
   return &priv->default_value;
