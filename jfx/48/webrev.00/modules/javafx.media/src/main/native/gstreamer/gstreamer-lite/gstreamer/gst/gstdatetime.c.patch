diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstdatetime.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstdatetime.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstdatetime.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstdatetime.c
@@ -194,11 +194,11 @@
 /**
  * gst_date_time_get_year:
  * @datetime: a #GstDateTime
  *
  * Returns the year of this #GstDateTime
- * Call gst_date_time_has_year before, to avoid warnings.
+ * Call gst_date_time_has_year() before, to avoid warnings.
  *
  * Return value: The year of this #GstDateTime
  */
 gint
 gst_date_time_get_year (const GstDateTime * datetime)
@@ -211,11 +211,11 @@
 /**
  * gst_date_time_get_month:
  * @datetime: a #GstDateTime
  *
  * Returns the month of this #GstDateTime. January is 1, February is 2, etc..
- * Call gst_date_time_has_month before, to avoid warnings.
+ * Call gst_date_time_has_month() before, to avoid warnings.
  *
  * Return value: The month of this #GstDateTime
  */
 gint
 gst_date_time_get_month (const GstDateTime * datetime)
@@ -229,11 +229,11 @@
 /**
  * gst_date_time_get_day:
  * @datetime: a #GstDateTime
  *
  * Returns the day of the month of this #GstDateTime.
- * Call gst_date_time_has_day before, to avoid warnings.
+ * Call gst_date_time_has_day() before, to avoid warnings.
  *
  * Return value: The day of this #GstDateTime
  */
 gint
 gst_date_time_get_day (const GstDateTime * datetime)
@@ -248,11 +248,11 @@
  * gst_date_time_get_hour:
  * @datetime: a #GstDateTime
  *
  * Retrieves the hour of the day represented by @datetime in the gregorian
  * calendar. The return is in the range of 0 to 23.
- * Call gst_date_time_has_haur before, to avoid warnings.
+ * Call gst_date_time_has_time() before, to avoid warnings.
  *
  * Return value: the hour of the day
  */
 gint
 gst_date_time_get_hour (const GstDateTime * datetime)
@@ -267,11 +267,11 @@
  * gst_date_time_get_minute:
  * @datetime: a #GstDateTime
  *
  * Retrieves the minute of the hour represented by @datetime in the gregorian
  * calendar.
- * Call gst_date_time_has_minute before, to avoid warnings.
+ * Call gst_date_time_has_time() before, to avoid warnings.
  *
  * Return value: the minute of the hour
  */
 gint
 gst_date_time_get_minute (const GstDateTime * datetime)
@@ -286,11 +286,11 @@
  * gst_date_time_get_second:
  * @datetime: a #GstDateTime
  *
  * Retrieves the second of the minute represented by @datetime in the gregorian
  * calendar.
- * Call gst_date_time_has_second before, to avoid warnings.
+ * Call gst_date_time_has_time() before, to avoid warnings.
  *
  * Return value: the second represented by @datetime
  */
 gint
 gst_date_time_get_second (const GstDateTime * datetime)
@@ -496,11 +496,11 @@
  * @month and @day, and the time fields will be considered not set. In this
  * case @minute and @seconds should also be -1.
  *
  * Free-function: gst_date_time_unref
  *
- * Return value: (transfer full) (nullable): the newly created #GstDateTime
+ * Return value: (transfer full): the newly created #GstDateTime
  */
 GstDateTime *
 gst_date_time_new_local_time (gint year, gint month, gint day, gint hour,
     gint minute, gdouble seconds)
 {
@@ -609,11 +609,11 @@
  * @day == -1, then #GstDateTime will created for @year and @month and
  * so on.
  *
  * Free-function: gst_date_time_unref
  *
- * Return value: (transfer full) (nullable): the newly created #GstDateTime
+ * Return value: (transfer full): the newly created #GstDateTime
  */
 GstDateTime *
 gst_date_time_new (gfloat tzoffset, gint year, gint month, gint day, gint hour,
     gint minute, gdouble seconds)
 {
@@ -790,37 +790,37 @@
    * the string must be at least 4 characters long and start with 2 digits */
   if (len < 4 || !g_ascii_isdigit (string[0]) || !g_ascii_isdigit (string[1]))
     return NULL;
 
   if (g_ascii_isdigit (string[2]) && g_ascii_isdigit (string[3])) {
-  ret = sscanf (string, "%04d-%02d-%02d", &year, &month, &day);
+    ret = sscanf (string, "%04d-%02d-%02d", &year, &month, &day);
 
-  if (ret == 0)
-    return NULL;
+    if (ret == 0)
+      return NULL;
 
-  if (ret == 3 && day <= 0) {
-    ret = 2;
-    day = -1;
-  }
+    if (ret == 3 && day <= 0) {
+      ret = 2;
+      day = -1;
+    }
 
-  if (ret >= 2 && month <= 0) {
-    ret = 1;
-    month = day = -1;
-  }
+    if (ret >= 2 && month <= 0) {
+      ret = 1;
+      month = day = -1;
+    }
 
     if (ret >= 1 && (year <= 0 || year > 9999 || month > 12 || day > 31))
-    return NULL;
+      return NULL;
 
-  else if (ret >= 1 && len < 16)
-    /* YMD is 10 chars. XMD + HM will be 16 chars. if it is less,
-     * it make no sense to continue. We will stay with YMD. */
-    goto ymd;
+    else if (ret >= 1 && len < 16)
+      /* YMD is 10 chars. XMD + HM will be 16 chars. if it is less,
+       * it make no sense to continue. We will stay with YMD. */
+      goto ymd;
 
-  string += 10;
-  /* Exit if there is no expeceted value on this stage */
-  if (!(*string == 'T' || *string == '-' || *string == ' '))
-    goto ymd;
+    string += 10;
+    /* Exit if there is no expeceted value on this stage */
+    if (!(*string == 'T' || *string == '-' || *string == ' '))
+      goto ymd;
 
     string += 1;
   }
   /* if hour or minute fails, then we will use only ymd. */
   hour = g_ascii_strtoull (string, (gchar **) & string, 10);
@@ -928,10 +928,15 @@
 
 static void
 gst_date_time_free (GstDateTime * datetime)
 {
   g_date_time_unref (datetime->datetime);
+
+#ifdef USE_POISONING
+  memset (datetime, 0xff, sizeof (GstDateTime));
+#endif
+
   g_slice_free (GstDateTime, datetime);
 }
 
 /**
  * gst_date_time_ref:
