diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/giochannel.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/giochannel.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/giochannel.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/giochannel.c
@@ -37,11 +37,10 @@
 #include "giochannel.h"
 
 #include "gstrfuncs.h"
 #include "gtestutils.h"
 #include "glibintl.h"
-#include "gunicodeprivate.h"
 
 
 /**
  * SECTION:iochannels
  * @title: IO Channels
@@ -151,29 +150,29 @@
  **/
 
 #define G_IO_NICE_BUF_SIZE  1024
 
 /* This needs to be as wide as the largest character in any possible encoding */
-#define MAX_CHAR_SIZE       10
+#define MAX_CHAR_SIZE   10
 
 /* Some simplifying macros, which reduce the need to worry whether the
  * buffers have been allocated. These also make USE_BUF () an lvalue,
  * which is used in g_io_channel_read_to_end ().
  */
-#define USE_BUF(channel)    ((channel)->encoding ? (channel)->encoded_read_buf \
-                 : (channel)->read_buf)
-#define BUF_LEN(string)     ((string) ? (string)->len : 0)
-
-static GIOError     g_io_error_get_from_g_error (GIOStatus    status,
-                             GError      *err);
-static void     g_io_channel_purge      (GIOChannel  *channel);
-static GIOStatus    g_io_channel_fill_buffer    (GIOChannel  *channel,
-                             GError     **err);
-static GIOStatus    g_io_channel_read_line_backend  (GIOChannel  *channel,
-                             gsize       *length,
-                             gsize       *terminator_pos,
-                             GError     **error);
+#define USE_BUF(channel)  ((channel)->encoding ? (channel)->encoded_read_buf \
+         : (channel)->read_buf)
+#define BUF_LEN(string)   ((string) ? (string)->len : 0)
+
+static GIOError   g_io_error_get_from_g_error (GIOStatus    status,
+               GError      *err);
+static void   g_io_channel_purge    (GIOChannel  *channel);
+static GIOStatus  g_io_channel_fill_buffer  (GIOChannel  *channel,
+               GError     **err);
+static GIOStatus  g_io_channel_read_line_backend  (GIOChannel  *channel,
+               gsize       *length,
+               gsize       *terminator_pos,
+               GError     **error);
 
 /**
  * g_io_channel_init:
  * @channel: a #GIOChannel
  *
@@ -257,21 +256,21 @@
     }
 }
 
 static GIOError
 g_io_error_get_from_g_error (GIOStatus  status,
-                 GError    *err)
+           GError    *err)
 {
   switch (status)
     {
       case G_IO_STATUS_NORMAL:
       case G_IO_STATUS_EOF:
         return G_IO_ERROR_NONE;
       case G_IO_STATUS_AGAIN:
         return G_IO_ERROR_AGAIN;
       case G_IO_STATUS_ERROR:
-    g_return_val_if_fail (err != NULL, G_IO_ERROR_UNKNOWN);
+  g_return_val_if_fail (err != NULL, G_IO_ERROR_UNKNOWN);
 
         if (err->domain != G_IO_CHANNEL_ERROR)
           return G_IO_ERROR_UNKNOWN;
         switch (err->code)
           {
@@ -299,13 +298,13 @@
  *
  * Deprecated:2.2: Use g_io_channel_read_chars() instead.
  **/
 GIOError
 g_io_channel_read (GIOChannel *channel,
-           gchar      *buf,
-           gsize       count,
-           gsize      *bytes_read)
+       gchar      *buf,
+       gsize       count,
+       gsize      *bytes_read)
 {
   GError *err = NULL;
   GIOError error;
   GIOStatus status;
 
@@ -344,13 +343,13 @@
  *
  * Deprecated:2.2: Use g_io_channel_write_chars() instead.
  **/
 GIOError
 g_io_channel_write (GIOChannel  *channel,
-            const gchar *buf,
-            gsize        count,
-            gsize       *bytes_written)
+        const gchar *buf,
+        gsize        count,
+        gsize       *bytes_written)
 {
   GError *err = NULL;
   GIOError error;
   GIOStatus status;
 
@@ -383,12 +382,12 @@
  *
  * Deprecated:2.2: Use g_io_channel_seek_position() instead.
  **/
 GIOError
 g_io_channel_seek (GIOChannel *channel,
-           gint64      offset,
-           GSeekType   type)
+       gint64      offset,
+       GSeekType   type)
 {
   GError *err = NULL;
   GIOError error;
   GIOStatus status;
 
@@ -481,12 +480,12 @@
  *
  * Returns: the status of the operation.
  **/
 GIOStatus
 g_io_channel_shutdown (GIOChannel  *channel,
-               gboolean     flush,
-               GError     **err)
+           gboolean     flush,
+           GError     **err)
 {
   GIOStatus status, result;
   GError *tmperr = NULL;
 
   g_return_val_if_fail (channel != NULL, G_IO_STATUS_ERROR);
@@ -607,11 +606,11 @@
  *
  * Returns: a new #GSource
  */
 GSource *
 g_io_create_watch (GIOChannel   *channel,
-           GIOCondition  condition)
+       GIOCondition  condition)
 {
   g_return_val_if_fail (channel != NULL, NULL);
 
   return channel->funcs->io_create_watch (channel, condition);
 }
@@ -634,15 +633,15 @@
  *
  * Returns: the event source id
  */
 guint
 g_io_add_watch_full (GIOChannel    *channel,
-             gint           priority,
-             GIOCondition   condition,
-             GIOFunc        func,
-             gpointer       user_data,
-             GDestroyNotify notify)
+         gint           priority,
+         GIOCondition   condition,
+         GIOFunc        func,
+         gpointer       user_data,
+         GDestroyNotify notify)
 {
   GSource *source;
   guint id;
 
   g_return_val_if_fail (channel != NULL, 0);
@@ -697,13 +696,13 @@
  * A bitwise combination representing a condition to watch for on an
  * event source.
  **/
 guint
 g_io_add_watch (GIOChannel   *channel,
-        GIOCondition  condition,
-        GIOFunc       func,
-        gpointer      user_data)
+    GIOCondition  condition,
+    GIOFunc       func,
+    gpointer      user_data)
 {
   return g_io_add_watch_full (channel, G_PRIORITY_DEFAULT, condition, func, user_data, NULL);
 }
 
 /**
@@ -880,11 +879,11 @@
  * where in the file a line break occurs.
  **/
 void
 g_io_channel_set_line_term (GIOChannel  *channel,
                             const gchar *line_term,
-                gint         length)
+          gint         length)
 {
   g_return_if_fail (channel != NULL);
   g_return_if_fail (line_term == NULL || length != 0); /* Disallow "" */
 
   if (line_term == NULL)
@@ -909,11 +908,11 @@
  * Returns: The line termination string. This value
  *   is owned by GLib and must not be freed.
  **/
 const gchar *
 g_io_channel_get_line_term (GIOChannel *channel,
-                gint       *length)
+          gint       *length)
 {
   g_return_val_if_fail (channel != NULL, NULL);
 
   if (length)
     *length = channel->line_term_len;
@@ -963,15 +962,15 @@
                         GIOFlags     flags,
                         GError     **error)
 {
   g_return_val_if_fail (channel != NULL, G_IO_STATUS_ERROR);
   g_return_val_if_fail ((error == NULL) || (*error == NULL),
-            G_IO_STATUS_ERROR);
+      G_IO_STATUS_ERROR);
 
   return (*channel->funcs->io_set_flags) (channel,
-                      flags & G_IO_FLAG_SET_MASK,
-                      error);
+            flags & G_IO_FLAG_SET_MASK,
+            error);
 }
 
 /**
  * g_io_channel_get_flags:
  * @channel: a #GIOChannel
@@ -1022,11 +1021,11 @@
  * Setting this flag to %TRUE for a channel you have already closed
  * can cause problems when the final reference to the #GIOChannel is dropped.
  **/
 void
 g_io_channel_set_close_on_unref (GIOChannel *channel,
-                                 gboolean    do_close)
+         gboolean    do_close)
 {
   g_return_if_fail (channel != NULL);
 
   channel->close_on_unref = do_close;
 }
@@ -1085,11 +1084,11 @@
    * For sockets, both can contain data.
    */
 
   g_return_val_if_fail (channel != NULL, G_IO_STATUS_ERROR);
   g_return_val_if_fail ((error == NULL) || (*error == NULL),
-            G_IO_STATUS_ERROR);
+      G_IO_STATUS_ERROR);
   g_return_val_if_fail (channel->is_seekable, G_IO_STATUS_ERROR);
 
   switch (type)
     {
       case G_SEEK_CUR: /* The user is seeking relative to the head of the buffer */
@@ -1172,11 +1171,11 @@
  *   #G_IO_STATUS_NORMAL, #G_IO_STATUS_AGAIN, or
  *   #G_IO_STATUS_ERROR.
  **/
 GIOStatus
 g_io_channel_flush (GIOChannel  *channel,
-                    GError     **error)
+        GError     **error)
 {
   GIOStatus status;
   gsize this_time = 1, bytes_written = 0;
 
   g_return_val_if_fail (channel != NULL, G_IO_STATUS_ERROR);
@@ -1188,13 +1187,13 @@
   do
     {
       g_assert (this_time > 0);
 
       status = channel->funcs->io_write (channel,
-                     channel->write_buf->str + bytes_written,
-                     channel->write_buf->len - bytes_written,
-                     &this_time, error);
+           channel->write_buf->str + bytes_written,
+           channel->write_buf->len - bytes_written,
+           &this_time, error);
       bytes_written += this_time;
     }
   while ((bytes_written < channel->write_buf->len)
          && (status == G_IO_STATUS_NORMAL));
 
@@ -1305,24 +1304,26 @@
  * calling one of the API "read" functions.
  *
  * Return Value: %G_IO_STATUS_NORMAL if the encoding was successfully set
  */
 GIOStatus
-g_io_channel_set_encoding (GIOChannel   *channel,
+g_io_channel_set_encoding (GIOChannel *channel,
                            const gchar  *encoding,
-                           GError      **error)
+         GError      **error)
 {
   GIConv read_cd, write_cd;
+#ifndef G_DISABLE_ASSERT
   gboolean did_encode;
+#endif
 
   g_return_val_if_fail (channel != NULL, G_IO_STATUS_ERROR);
   g_return_val_if_fail ((error == NULL) || (*error == NULL), G_IO_STATUS_ERROR);
 
   /* Make sure the encoded buffers are empty */
 
   g_return_val_if_fail (!channel->do_encode || !channel->encoded_read_buf ||
-            channel->encoded_read_buf->len == 0, G_IO_STATUS_ERROR);
+      channel->encoded_read_buf->len == 0, G_IO_STATUS_ERROR);
 
   if (!channel->use_buffer)
     {
       g_warning ("Need to set the channel buffered before setting the encoding.");
       g_warning ("Assuming this is what you meant and acting accordingly.");
@@ -1334,11 +1335,13 @@
     {
       g_warning ("Partial character at end of write buffer not flushed.");
       channel->partial_write_buf[0] = '\0';
     }
 
+#ifndef G_DISABLE_ASSERT
   did_encode = channel->do_encode;
+#endif
 
   if (!encoding || strcmp (encoding, "UTF8") == 0 || strcmp (encoding, "UTF-8") == 0)
     {
       channel->do_encode = FALSE;
       read_cd = write_cd = (GIConv) -1;
@@ -1518,22 +1521,22 @@
                          channel->encoded_read_buf->len + outbytes_left);
       outbuf = channel->encoded_read_buf->str + channel->encoded_read_buf->len
                - outbytes_left;
 
       errnum = g_iconv (channel->read_cd, &inbuf, &inbytes_left,
-            &outbuf, &outbytes_left);
+      &outbuf, &outbytes_left);
       errval = errno;
 
       g_assert (inbuf + inbytes_left == channel->read_buf->str
                 + channel->read_buf->len);
       g_assert (outbuf + outbytes_left == channel->encoded_read_buf->str
                 + channel->encoded_read_buf->len);
 
       g_string_erase (channel->read_buf, 0,
-              channel->read_buf->len - inbytes_left);
+          channel->read_buf->len - inbytes_left);
       g_string_truncate (channel->encoded_read_buf,
-             channel->encoded_read_buf->len - outbytes_left);
+       channel->encoded_read_buf->len - outbytes_left);
 
       if (errnum == (gsize) -1)
         {
           switch (errval)
             {
@@ -1642,20 +1645,20 @@
  **/
 GIOStatus
 g_io_channel_read_line (GIOChannel  *channel,
                         gchar      **str_return,
                         gsize       *length,
-            gsize       *terminator_pos,
-                GError     **error)
+      gsize       *terminator_pos,
+            GError     **error)
 {
   GIOStatus status;
   gsize got_length;
 
   g_return_val_if_fail (channel != NULL, G_IO_STATUS_ERROR);
   g_return_val_if_fail (str_return != NULL, G_IO_STATUS_ERROR);
   g_return_val_if_fail ((error == NULL) || (*error == NULL),
-            G_IO_STATUS_ERROR);
+      G_IO_STATUS_ERROR);
   g_return_val_if_fail (channel->is_readable, G_IO_STATUS_ERROR);
 
   status = g_io_channel_read_line_backend (channel, &got_length, terminator_pos, error);
 
   if (length && status != G_IO_STATUS_ERROR)
@@ -1688,20 +1691,20 @@
  * Returns: the status of the operation.
  **/
 GIOStatus
 g_io_channel_read_line_string (GIOChannel  *channel,
                                GString     *buffer,
-                               gsize       *terminator_pos,
-                               GError     **error)
+             gsize       *terminator_pos,
+                               GError   **error)
 {
   gsize length;
   GIOStatus status;
 
   g_return_val_if_fail (channel != NULL, G_IO_STATUS_ERROR);
   g_return_val_if_fail (buffer != NULL, G_IO_STATUS_ERROR);
   g_return_val_if_fail ((error == NULL) || (*error == NULL),
-            G_IO_STATUS_ERROR);
+      G_IO_STATUS_ERROR);
   g_return_val_if_fail (channel->is_readable, G_IO_STATUS_ERROR);
 
   if (buffer->len > 0)
     g_string_truncate (buffer, 0); /* clear out the buffer */
 
@@ -1867,13 +1870,13 @@
           got_term_len = 0;
           break;
         }
 
       if (use_buf->len > line_term_len - 1)
-    checked_to = use_buf->len - (line_term_len - 1);
+  checked_to = use_buf->len - (line_term_len - 1);
       else
-    checked_to = 0;
+  checked_to = 0;
     }
 
 done:
 
   if (terminator_pos)
@@ -1956,13 +1959,13 @@
         *str_return = g_string_free (USE_BUF (channel), FALSE);
       else
         g_string_free (USE_BUF (channel), TRUE);
 
       if (channel->encoding)
-    channel->encoded_read_buf = NULL;
+  channel->encoded_read_buf = NULL;
       else
-    channel->read_buf = NULL;
+  channel->read_buf = NULL;
     }
 
   return G_IO_STATUS_NORMAL;
 }
 
@@ -2098,19 +2101,19 @@
  *
  * Returns: a #GIOStatus
  **/
 GIOStatus
 g_io_channel_read_unichar (GIOChannel  *channel,
-               gunichar    *thechar,
-               GError     **error)
+         gunichar    *thechar,
+         GError     **error)
 {
   GIOStatus status = G_IO_STATUS_NORMAL;
 
   g_return_val_if_fail (channel != NULL, G_IO_STATUS_ERROR);
   g_return_val_if_fail (channel->encoding != NULL, G_IO_STATUS_ERROR);
   g_return_val_if_fail ((error == NULL) || (*error == NULL),
-            G_IO_STATUS_ERROR);
+      G_IO_STATUS_ERROR);
   g_return_val_if_fail (channel->is_readable, G_IO_STATUS_ERROR);
 
   while (BUF_LEN (channel->encoded_read_buf) == 0 && status == G_IO_STATUS_NORMAL)
     status = g_io_channel_fill_buffer (channel, error);
 
@@ -2172,47 +2175,50 @@
  **/
 GIOStatus
 g_io_channel_write_chars (GIOChannel   *channel,
                           const gchar  *buf,
                           gssize        count,
-              gsize        *bytes_written,
+        gsize        *bytes_written,
                           GError      **error)
 {
+  gsize count_unsigned;
   GIOStatus status;
   gssize wrote_bytes = 0;
 
   g_return_val_if_fail (channel != NULL, G_IO_STATUS_ERROR);
   g_return_val_if_fail ((error == NULL) || (*error == NULL),
-            G_IO_STATUS_ERROR);
+      G_IO_STATUS_ERROR);
   g_return_val_if_fail (channel->is_writeable, G_IO_STATUS_ERROR);
 
   if ((count < 0) && buf)
     count = strlen (buf);
+  count_unsigned = count;
 
-  if (count == 0)
+  if (count_unsigned == 0)
     {
       if (bytes_written)
         *bytes_written = 0;
       return G_IO_STATUS_NORMAL;
     }
 
   g_return_val_if_fail (buf != NULL, G_IO_STATUS_ERROR);
-  g_return_val_if_fail (count > 0, G_IO_STATUS_ERROR);
+  g_return_val_if_fail (count_unsigned > 0, G_IO_STATUS_ERROR);
 
   /* Raw write case */
 
   if (!channel->use_buffer)
     {
       gsize tmp_bytes;
 
       g_assert (!channel->write_buf || channel->write_buf->len == 0);
       g_assert (channel->partial_write_buf[0] == '\0');
 
-      status = channel->funcs->io_write (channel, buf, count, &tmp_bytes, error);
+      status = channel->funcs->io_write (channel, buf, count_unsigned,
+                                         &tmp_bytes, error);
 
       if (bytes_written)
-    *bytes_written = tmp_bytes;
+  *bytes_written = tmp_bytes;
 
       return status;
     }
 
   /* General case */
@@ -2281,11 +2287,11 @@
        */
       g_assert (space_in_buf >= MAX_CHAR_SIZE);
 
       if (!channel->encoding)
         {
-          gssize write_this = MIN (space_in_buf, count - wrote_bytes);
+          gssize write_this = MIN (space_in_buf, count_unsigned - wrote_bytes);
 
           g_string_append_len (channel->write_buf, buf, write_this);
           buf += write_this;
           wrote_bytes += write_this;
         }
@@ -2301,19 +2307,19 @@
               g_assert (wrote_bytes == 0);
 
               from_buf = channel->partial_write_buf;
               from_buf_old_len = strlen (channel->partial_write_buf);
               g_assert (from_buf_old_len > 0);
-              from_buf_len = MIN (6, from_buf_old_len + count);
+              from_buf_len = MIN (6, from_buf_old_len + count_unsigned);
 
               memcpy (channel->partial_write_buf + from_buf_old_len, buf,
                       from_buf_len - from_buf_old_len);
             }
           else
             {
               from_buf = buf;
-              from_buf_len = count - wrote_bytes;
+              from_buf_len = count_unsigned - wrote_bytes;
               from_buf_old_len = 0;
             }
 
 reconvert:
 
@@ -2322,11 +2328,11 @@
               const gchar *badchar;
               gsize try_len = MIN (from_buf_len, space_in_buf);
 
               /* UTF-8, just validate, emulate g_iconv */
 
-              if (!_g_utf8_validate_len (from_buf, try_len, &badchar))
+              if (!g_utf8_validate_len (from_buf, try_len, &badchar))
                 {
                   gunichar try_char;
                   gsize incomplete_len = from_buf + try_len - badchar;
 
                   left_len = from_buf + from_buf_len - badchar;
@@ -2388,22 +2394,22 @@
             }
 
           if (err == (gsize) -1)
             {
               switch (errnum)
-            {
+          {
                   case EINVAL:
                     g_assert (left_len < 6);
 
                     if (from_buf_old_len == 0)
                       {
                         /* Not from partial_write_buf */
 
                         memcpy (channel->partial_write_buf, from_buf, left_len);
                         channel->partial_write_buf[left_len] = '\0';
                         if (bytes_written)
-                          *bytes_written = count;
+                          *bytes_written = count_unsigned;
                         return G_IO_STATUS_NORMAL;
                       }
 
                     /* Working in partial_write_buf */
 
@@ -2411,16 +2417,16 @@
                       {
                         /* Didn't convert anything, must still have
                          * less than a full character
                          */
 
-                        g_assert (count == from_buf_len - from_buf_old_len);
+                        g_assert (count_unsigned == from_buf_len - from_buf_old_len);
 
                         channel->partial_write_buf[from_buf_len] = '\0';
 
                         if (bytes_written)
-                          *bytes_written = count;
+                          *bytes_written = count_unsigned;
 
                         return G_IO_STATUS_NORMAL;
                       }
 
                     g_assert (from_buf_len - left_len >= from_buf_old_len);
@@ -2478,11 +2484,11 @@
             buf = from_buf;
         }
     }
 
   if (bytes_written)
-    *bytes_written = count;
+    *bytes_written = count_unsigned;
 
   return G_IO_STATUS_NORMAL;
 }
 
 /**
@@ -2497,21 +2503,21 @@
  *
  * Returns: a #GIOStatus
  **/
 GIOStatus
 g_io_channel_write_unichar (GIOChannel  *channel,
-                gunichar     thechar,
-                GError     **error)
+          gunichar     thechar,
+          GError     **error)
 {
   GIOStatus status;
   gchar static_buf[6];
   gsize char_len, wrote_len;
 
   g_return_val_if_fail (channel != NULL, G_IO_STATUS_ERROR);
   g_return_val_if_fail (channel->encoding != NULL, G_IO_STATUS_ERROR);
   g_return_val_if_fail ((error == NULL) || (*error == NULL),
-            G_IO_STATUS_ERROR);
+      G_IO_STATUS_ERROR);
   g_return_val_if_fail (channel->is_writeable, G_IO_STATUS_ERROR);
 
   char_len = g_unichar_to_utf8 (thechar, static_buf);
 
   if (channel->partial_write_buf[0] != '\0')
