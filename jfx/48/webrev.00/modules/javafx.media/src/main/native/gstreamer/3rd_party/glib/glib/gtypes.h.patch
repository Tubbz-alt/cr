diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gtypes.h b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gtypes.h
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gtypes.h
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gtypes.h
@@ -56,44 +56,84 @@
 
 typedef float   gfloat;
 typedef double  gdouble;
 
 /* Define min and max constants for the fixed size numerical types */
-#define G_MININT8   ((gint8) -0x80)
-#define G_MAXINT8   ((gint8)  0x7f)
+/**
+ * G_MININT8: (value -128)
+ *
+ * The minimum value which can be held in a #gint8.
+ *
+ * Since: 2.4
+ */
+#define G_MININT8 ((gint8) (-G_MAXINT8 - 1))
+#define G_MAXINT8 ((gint8)  0x7f)
 #define G_MAXUINT8  ((guint8) 0xff)
 
-#define G_MININT16  ((gint16) -0x8000)
+/**
+ * G_MININT16: (value -32768)
+ *
+ * The minimum value which can be held in a #gint16.
+ *
+ * Since: 2.4
+ */
+#define G_MININT16  ((gint16) (-G_MAXINT16 - 1))
 #define G_MAXINT16  ((gint16)  0x7fff)
 #define G_MAXUINT16 ((guint16) 0xffff)
 
-#define G_MININT32  ((gint32) -0x80000000)
+/**
+ * G_MININT32: (value -2147483648)
+ *
+ * The minimum value which can be held in a #gint32.
+ *
+ * Since: 2.4
+ */
+#define G_MININT32  ((gint32) (-G_MAXINT32 - 1))
 #define G_MAXINT32  ((gint32)  0x7fffffff)
 #define G_MAXUINT32 ((guint32) 0xffffffff)
 
-#define G_MININT64  ((gint64) G_GINT64_CONSTANT(-0x8000000000000000))
+/**
+ * G_MININT64: (value -9223372036854775808)
+ *
+ * The minimum value which can be held in a #gint64.
+ */
+#define G_MININT64  ((gint64) (-G_MAXINT64 - G_GINT64_CONSTANT(1)))
 #define G_MAXINT64  G_GINT64_CONSTANT(0x7fffffffffffffff)
 #define G_MAXUINT64 G_GUINT64_CONSTANT(0xffffffffffffffff)
 
 typedef void* gpointer;
 typedef const void *gconstpointer;
 
 typedef gint            (*GCompareFunc)         (gconstpointer  a,
                                                  gconstpointer  b);
 typedef gint            (*GCompareDataFunc)     (gconstpointer  a,
                                                  gconstpointer  b,
-                         gpointer       user_data);
+             gpointer       user_data);
 typedef gboolean        (*GEqualFunc)           (gconstpointer  a,
                                                  gconstpointer  b);
 typedef void            (*GDestroyNotify)       (gpointer       data);
 typedef void            (*GFunc)                (gpointer       data,
                                                  gpointer       user_data);
 typedef guint           (*GHashFunc)            (gconstpointer  key);
 typedef void            (*GHFunc)               (gpointer       key,
                                                  gpointer       value,
                                                  gpointer       user_data);
 
+/**
+ * GCopyFunc:
+ * @src: (not nullable): A pointer to the data which should be copied
+ * @data: Additional data
+ *
+ * A function of this signature is used to copy the node data
+ * when doing a deep-copy of a tree.
+ *
+ * Returns: (not nullable): A pointer to the copy
+ *
+ * Since: 2.4
+ */
+typedef gpointer  (*GCopyFunc)            (gconstpointer  src,
+                                                 gpointer       data);
 /**
  * GFreeFunc:
  * @data: a data pointer
  *
  * Declares a type of function which takes an arbitrary
@@ -113,11 +153,11 @@
  *
  * Returns: a translation of the string for the current locale.
  *  The returned string is owned by GLib and must not be freed.
  */
 typedef const gchar *   (*GTranslateFunc)       (const gchar   *str,
-                         gpointer       data);
+             gpointer       data);
 
 
 /* Define some mathematical constants that aren't available
  * symbolically in some strict ISO C implementations.
  *
@@ -141,42 +181,42 @@
  * glibconfig.h defines G_BYTE_ORDER which expands to one of
  * the below macros.
  */
 #define G_LITTLE_ENDIAN 1234
 #define G_BIG_ENDIAN    4321
-#define G_PDP_ENDIAN    3412        /* unused, need specific PDP check */
+#define G_PDP_ENDIAN    3412    /* unused, need specific PDP check */
 
 
 /* Basic bit swapping functions
  */
-#define GUINT16_SWAP_LE_BE_CONSTANT(val)    ((guint16) ( \
+#define GUINT16_SWAP_LE_BE_CONSTANT(val)  ((guint16) ( \
     (guint16) ((guint16) (val) >> 8) |  \
     (guint16) ((guint16) (val) << 8)))
 
-#define GUINT32_SWAP_LE_BE_CONSTANT(val)    ((guint32) ( \
+#define GUINT32_SWAP_LE_BE_CONSTANT(val)  ((guint32) ( \
     (((guint32) (val) & (guint32) 0x000000ffU) << 24) | \
     (((guint32) (val) & (guint32) 0x0000ff00U) <<  8) | \
     (((guint32) (val) & (guint32) 0x00ff0000U) >>  8) | \
     (((guint32) (val) & (guint32) 0xff000000U) >> 24)))
 
-#define GUINT64_SWAP_LE_BE_CONSTANT(val)    ((guint64) ( \
-      (((guint64) (val) &                       \
-    (guint64) G_GINT64_CONSTANT (0x00000000000000ffU)) << 56) | \
-      (((guint64) (val) &                       \
-    (guint64) G_GINT64_CONSTANT (0x000000000000ff00U)) << 40) | \
-      (((guint64) (val) &                       \
-    (guint64) G_GINT64_CONSTANT (0x0000000000ff0000U)) << 24) | \
-      (((guint64) (val) &                       \
-    (guint64) G_GINT64_CONSTANT (0x00000000ff000000U)) <<  8) | \
-      (((guint64) (val) &                       \
-    (guint64) G_GINT64_CONSTANT (0x000000ff00000000U)) >>  8) | \
-      (((guint64) (val) &                       \
-    (guint64) G_GINT64_CONSTANT (0x0000ff0000000000U)) >> 24) | \
-      (((guint64) (val) &                       \
-    (guint64) G_GINT64_CONSTANT (0x00ff000000000000U)) >> 40) | \
-      (((guint64) (val) &                       \
-    (guint64) G_GINT64_CONSTANT (0xff00000000000000U)) >> 56)))
+#define GUINT64_SWAP_LE_BE_CONSTANT(val)  ((guint64) ( \
+      (((guint64) (val) &           \
+  (guint64) G_GINT64_CONSTANT (0x00000000000000ffU)) << 56) | \
+      (((guint64) (val) &           \
+  (guint64) G_GINT64_CONSTANT (0x000000000000ff00U)) << 40) | \
+      (((guint64) (val) &           \
+  (guint64) G_GINT64_CONSTANT (0x0000000000ff0000U)) << 24) | \
+      (((guint64) (val) &           \
+  (guint64) G_GINT64_CONSTANT (0x00000000ff000000U)) <<  8) | \
+      (((guint64) (val) &           \
+  (guint64) G_GINT64_CONSTANT (0x000000ff00000000U)) >>  8) | \
+      (((guint64) (val) &           \
+  (guint64) G_GINT64_CONSTANT (0x0000ff0000000000U)) >> 24) | \
+      (((guint64) (val) &           \
+  (guint64) G_GINT64_CONSTANT (0x00ff000000000000U)) >> 40) | \
+      (((guint64) (val) &           \
+  (guint64) G_GINT64_CONSTANT (0xff00000000000000U)) >> 56)))
 
 /* Arch specific stuff for speed
  */
 #if defined (__GNUC__) && (__GNUC__ >= 2) && defined (__OPTIMIZE__)
 
@@ -185,130 +225,130 @@
 #    define GUINT64_SWAP_LE_BE(val) ((guint64) __builtin_bswap64 ((guint64) (val)))
 #  endif
 
 #  if defined (__i386__)
 #    define GUINT16_SWAP_LE_BE_IA32(val) \
-       (G_GNUC_EXTENSION                    \
-    ({ guint16 __v, __x = ((guint16) (val));        \
-       if (__builtin_constant_p (__x))          \
-         __v = GUINT16_SWAP_LE_BE_CONSTANT (__x);       \
-       else                         \
-         __asm__ ("rorw $8, %w0"                \
-              : "=r" (__v)              \
-              : "0" (__x)               \
-              : "cc");                  \
-        __v; }))
+       (G_GNUC_EXTENSION          \
+  ({ guint16 __v, __x = ((guint16) (val));    \
+     if (__builtin_constant_p (__x))      \
+       __v = GUINT16_SWAP_LE_BE_CONSTANT (__x);   \
+     else             \
+       __asm__ ("rorw $8, %w0"        \
+          : "=r" (__v)        \
+          : "0" (__x)       \
+          : "cc");          \
+      __v; }))
 #    if !defined (__i486__) && !defined (__i586__) \
-    && !defined (__pentium__) && !defined (__i686__) \
-    && !defined (__pentiumpro__) && !defined (__pentium4__)
+  && !defined (__pentium__) && !defined (__i686__) \
+  && !defined (__pentiumpro__) && !defined (__pentium4__)
 #       define GUINT32_SWAP_LE_BE_IA32(val) \
-      (G_GNUC_EXTENSION                 \
-       ({ guint32 __v, __x = ((guint32) (val));     \
-          if (__builtin_constant_p (__x))           \
-        __v = GUINT32_SWAP_LE_BE_CONSTANT (__x);    \
-          else                      \
-        __asm__ ("rorw $8, %w0\n\t"         \
-             "rorl $16, %0\n\t"         \
-             "rorw $8, %w0"             \
-             : "=r" (__v)               \
-             : "0" (__x)                \
-             : "cc");               \
-          __v; }))
+    (G_GNUC_EXTENSION         \
+     ({ guint32 __v, __x = ((guint32) (val));   \
+        if (__builtin_constant_p (__x))     \
+    __v = GUINT32_SWAP_LE_BE_CONSTANT (__x);  \
+        else            \
+    __asm__ ("rorw $8, %w0\n\t"     \
+       "rorl $16, %0\n\t"     \
+       "rorw $8, %w0"       \
+       : "=r" (__v)       \
+       : "0" (__x)        \
+       : "cc");       \
+        __v; }))
 #    else /* 486 and higher has bswap */
 #       define GUINT32_SWAP_LE_BE_IA32(val) \
-      (G_GNUC_EXTENSION                 \
-       ({ guint32 __v, __x = ((guint32) (val));     \
-          if (__builtin_constant_p (__x))           \
-        __v = GUINT32_SWAP_LE_BE_CONSTANT (__x);    \
-          else                      \
-        __asm__ ("bswap %0"             \
-             : "=r" (__v)               \
-             : "0" (__x));              \
-          __v; }))
+    (G_GNUC_EXTENSION         \
+     ({ guint32 __v, __x = ((guint32) (val));   \
+        if (__builtin_constant_p (__x))     \
+    __v = GUINT32_SWAP_LE_BE_CONSTANT (__x);  \
+        else            \
+    __asm__ ("bswap %0"       \
+       : "=r" (__v)       \
+       : "0" (__x));        \
+        __v; }))
 #    endif /* processor specific 32-bit stuff */
 #    define GUINT64_SWAP_LE_BE_IA32(val) \
-       (G_GNUC_EXTENSION                        \
-    ({ union { guint64 __ll;                    \
-           guint32 __l[2]; } __w, __r;              \
-       __w.__ll = ((guint64) (val));                \
-       if (__builtin_constant_p (__w.__ll))             \
-         __r.__ll = GUINT64_SWAP_LE_BE_CONSTANT (__w.__ll);     \
-       else                             \
-         {                              \
-           __r.__l[0] = GUINT32_SWAP_LE_BE (__w.__l[1]);        \
-           __r.__l[1] = GUINT32_SWAP_LE_BE (__w.__l[0]);        \
-         }                              \
-       __r.__ll; }))
+       (G_GNUC_EXTENSION            \
+  ({ union { guint64 __ll;          \
+       guint32 __l[2]; } __w, __r;        \
+     __w.__ll = ((guint64) (val));        \
+     if (__builtin_constant_p (__w.__ll))       \
+       __r.__ll = GUINT64_SWAP_LE_BE_CONSTANT (__w.__ll);   \
+     else               \
+       {                \
+         __r.__l[0] = GUINT32_SWAP_LE_BE (__w.__l[1]);    \
+         __r.__l[1] = GUINT32_SWAP_LE_BE (__w.__l[0]);    \
+       }                \
+     __r.__ll; }))
      /* Possibly just use the constant version and let gcc figure it out? */
 #    define GUINT16_SWAP_LE_BE(val) (GUINT16_SWAP_LE_BE_IA32 (val))
 #    ifndef GUINT32_SWAP_LE_BE
 #      define GUINT32_SWAP_LE_BE(val) (GUINT32_SWAP_LE_BE_IA32 (val))
 #    endif
 #    ifndef GUINT64_SWAP_LE_BE
 #      define GUINT64_SWAP_LE_BE(val) (GUINT64_SWAP_LE_BE_IA32 (val))
 #    endif
 #  elif defined (__ia64__)
 #    define GUINT16_SWAP_LE_BE_IA64(val) \
-       (G_GNUC_EXTENSION                    \
-    ({ guint16 __v, __x = ((guint16) (val));        \
-       if (__builtin_constant_p (__x))          \
-         __v = GUINT16_SWAP_LE_BE_CONSTANT (__x);       \
-       else                         \
-         __asm__ __volatile__ ("shl %0 = %1, 48 ;;"     \
-                   "mux1 %0 = %0, @rev ;;"  \
-                    : "=r" (__v)        \
-                    : "r" (__x));       \
-        __v; }))
+       (G_GNUC_EXTENSION          \
+  ({ guint16 __v, __x = ((guint16) (val));    \
+     if (__builtin_constant_p (__x))      \
+       __v = GUINT16_SWAP_LE_BE_CONSTANT (__x);   \
+     else             \
+       __asm__ __volatile__ ("shl %0 = %1, 48 ;;"   \
+           "mux1 %0 = %0, @rev ;;"  \
+            : "=r" (__v)    \
+            : "r" (__x));   \
+      __v; }))
 #    define GUINT32_SWAP_LE_BE_IA64(val) \
-       (G_GNUC_EXTENSION                    \
-     ({ guint32 __v, __x = ((guint32) (val));       \
-        if (__builtin_constant_p (__x))         \
-          __v = GUINT32_SWAP_LE_BE_CONSTANT (__x);      \
-        else                        \
-         __asm__ __volatile__ ("shl %0 = %1, 32 ;;"     \
-                   "mux1 %0 = %0, @rev ;;"  \
-                    : "=r" (__v)        \
-                    : "r" (__x));       \
-        __v; }))
+       (G_GNUC_EXTENSION          \
+   ({ guint32 __v, __x = ((guint32) (val));   \
+      if (__builtin_constant_p (__x))     \
+        __v = GUINT32_SWAP_LE_BE_CONSTANT (__x);    \
+      else            \
+       __asm__ __volatile__ ("shl %0 = %1, 32 ;;"   \
+           "mux1 %0 = %0, @rev ;;"  \
+            : "=r" (__v)    \
+            : "r" (__x));   \
+      __v; }))
 #    define GUINT64_SWAP_LE_BE_IA64(val) \
-       (G_GNUC_EXTENSION                    \
-    ({ guint64 __v, __x = ((guint64) (val));        \
-       if (__builtin_constant_p (__x))          \
-         __v = GUINT64_SWAP_LE_BE_CONSTANT (__x);       \
-       else                         \
-         __asm__ __volatile__ ("mux1 %0 = %1, @rev ;;"  \
-                   : "=r" (__v)         \
-                   : "r" (__x));        \
-       __v; }))
+       (G_GNUC_EXTENSION          \
+  ({ guint64 __v, __x = ((guint64) (val));    \
+     if (__builtin_constant_p (__x))      \
+       __v = GUINT64_SWAP_LE_BE_CONSTANT (__x);   \
+     else             \
+       __asm__ __volatile__ ("mux1 %0 = %1, @rev ;;"  \
+           : "=r" (__v)     \
+           : "r" (__x));    \
+     __v; }))
 #    define GUINT16_SWAP_LE_BE(val) (GUINT16_SWAP_LE_BE_IA64 (val))
 #    ifndef GUINT32_SWAP_LE_BE
 #      define GUINT32_SWAP_LE_BE(val) (GUINT32_SWAP_LE_BE_IA64 (val))
 #    endif
 #    ifndef GUINT64_SWAP_LE_BE
 #      define GUINT64_SWAP_LE_BE(val) (GUINT64_SWAP_LE_BE_IA64 (val))
 #    endif
 #  elif defined (__x86_64__)
 #    define GUINT32_SWAP_LE_BE_X86_64(val) \
-       (G_GNUC_EXTENSION                    \
-     ({ guint32 __v, __x = ((guint32) (val));       \
-        if (__builtin_constant_p (__x))         \
-          __v = GUINT32_SWAP_LE_BE_CONSTANT (__x);      \
-        else                        \
-         __asm__ ("bswapl %0"               \
-              : "=r" (__v)              \
-              : "0" (__x));             \
-        __v; }))
+       (G_GNUC_EXTENSION          \
+   ({ guint32 __v, __x = ((guint32) (val));   \
+      if (__builtin_constant_p (__x))     \
+        __v = GUINT32_SWAP_LE_BE_CONSTANT (__x);    \
+      else            \
+       __asm__ ("bswapl %0"       \
+          : "=r" (__v)        \
+          : "0" (__x));       \
+      __v; }))
 #    define GUINT64_SWAP_LE_BE_X86_64(val) \
-       (G_GNUC_EXTENSION                    \
-    ({ guint64 __v, __x = ((guint64) (val));        \
-       if (__builtin_constant_p (__x))          \
-         __v = GUINT64_SWAP_LE_BE_CONSTANT (__x);       \
-       else                         \
-         __asm__ ("bswapq %0"               \
-              : "=r" (__v)              \
-              : "0" (__x));             \
-       __v; }))
+       (G_GNUC_EXTENSION          \
+  ({ guint64 __v, __x = ((guint64) (val));    \
+     if (__builtin_constant_p (__x))      \
+       __v = GUINT64_SWAP_LE_BE_CONSTANT (__x);   \
+     else             \
+       __asm__ ("bswapq %0"       \
+          : "=r" (__v)        \
+          : "0" (__x));       \
+     __v; }))
      /* gcc seems to figure out optimal code for this on its own */
 #    define GUINT16_SWAP_LE_BE(val) (GUINT16_SWAP_LE_BE_CONSTANT (val))
 #    ifndef GUINT32_SWAP_LE_BE
 #      define GUINT32_SWAP_LE_BE(val) (GUINT32_SWAP_LE_BE_X86_64 (val))
 #    endif
@@ -328,44 +368,44 @@
 #  define GUINT16_SWAP_LE_BE(val) (GUINT16_SWAP_LE_BE_CONSTANT (val))
 #  define GUINT32_SWAP_LE_BE(val) (GUINT32_SWAP_LE_BE_CONSTANT (val))
 #  define GUINT64_SWAP_LE_BE(val) (GUINT64_SWAP_LE_BE_CONSTANT (val))
 #endif /* generic */
 
-#define GUINT16_SWAP_LE_PDP(val)    ((guint16) (val))
-#define GUINT16_SWAP_BE_PDP(val)    (GUINT16_SWAP_LE_BE (val))
-#define GUINT32_SWAP_LE_PDP(val)    ((guint32) ( \
+#define GUINT16_SWAP_LE_PDP(val)  ((guint16) (val))
+#define GUINT16_SWAP_BE_PDP(val)  (GUINT16_SWAP_LE_BE (val))
+#define GUINT32_SWAP_LE_PDP(val)  ((guint32) ( \
     (((guint32) (val) & (guint32) 0x0000ffffU) << 16) | \
     (((guint32) (val) & (guint32) 0xffff0000U) >> 16)))
-#define GUINT32_SWAP_BE_PDP(val)    ((guint32) ( \
+#define GUINT32_SWAP_BE_PDP(val)  ((guint32) ( \
     (((guint32) (val) & (guint32) 0x00ff00ffU) << 8) | \
     (((guint32) (val) & (guint32) 0xff00ff00U) >> 8)))
 
 /* The G*_TO_?E() macros are defined in glibconfig.h.
  * The transformation is symmetric, so the FROM just maps to the TO.
  */
 #define GINT16_FROM_LE(val) (GINT16_TO_LE (val))
-#define GUINT16_FROM_LE(val)    (GUINT16_TO_LE (val))
+#define GUINT16_FROM_LE(val)  (GUINT16_TO_LE (val))
 #define GINT16_FROM_BE(val) (GINT16_TO_BE (val))
-#define GUINT16_FROM_BE(val)    (GUINT16_TO_BE (val))
+#define GUINT16_FROM_BE(val)  (GUINT16_TO_BE (val))
 #define GINT32_FROM_LE(val) (GINT32_TO_LE (val))
-#define GUINT32_FROM_LE(val)    (GUINT32_TO_LE (val))
+#define GUINT32_FROM_LE(val)  (GUINT32_TO_LE (val))
 #define GINT32_FROM_BE(val) (GINT32_TO_BE (val))
-#define GUINT32_FROM_BE(val)    (GUINT32_TO_BE (val))
+#define GUINT32_FROM_BE(val)  (GUINT32_TO_BE (val))
 
 #define GINT64_FROM_LE(val) (GINT64_TO_LE (val))
-#define GUINT64_FROM_LE(val)    (GUINT64_TO_LE (val))
+#define GUINT64_FROM_LE(val)  (GUINT64_TO_LE (val))
 #define GINT64_FROM_BE(val) (GINT64_TO_BE (val))
-#define GUINT64_FROM_BE(val)    (GUINT64_TO_BE (val))
+#define GUINT64_FROM_BE(val)  (GUINT64_TO_BE (val))
 
 #define GLONG_FROM_LE(val)  (GLONG_TO_LE (val))
 #define GULONG_FROM_LE(val) (GULONG_TO_LE (val))
 #define GLONG_FROM_BE(val)  (GLONG_TO_BE (val))
 #define GULONG_FROM_BE(val) (GULONG_TO_BE (val))
 
-#define GINT_FROM_LE(val)   (GINT_TO_LE (val))
+#define GINT_FROM_LE(val) (GINT_TO_LE (val))
 #define GUINT_FROM_LE(val)  (GUINT_TO_LE (val))
-#define GINT_FROM_BE(val)   (GINT_TO_BE (val))
+#define GINT_FROM_BE(val) (GINT_TO_BE (val))
 #define GUINT_FROM_BE(val)  (GUINT_TO_BE (val))
 
 #define GSIZE_FROM_LE(val)  (GSIZE_TO_LE (val))
 #define GSSIZE_FROM_LE(val) (GSSIZE_TO_LE (val))
 #define GSIZE_FROM_BE(val)  (GSIZE_TO_BE (val))
@@ -409,10 +449,13 @@
     _GLIB_CHECKED_ADD_U32(dest, a, b)
 #define g_size_checked_mul(dest, a, b) \
     _GLIB_CHECKED_MUL_U32(dest, a, b)
 #endif
 
+/* FIXME: Hide this from gtkdoc scanner because it confuses its poor regexes.
+ * https://gitlab.gnome.org/GNOME/gtk-doc/issues/90 */
+#ifndef __GTK_DOC_IGNORE__
 /* The names of the following inlines are private.  Use the macro
  * definitions above.
  */
 #ifdef _GLIB_HAVE_BUILTIN_OVERFLOW_CHECKS
 static inline gboolean _GLIB_CHECKED_ADD_U32 (guint32 *dest, guint32 a, guint32 b) {
@@ -432,10 +475,11 @@
 static inline gboolean _GLIB_CHECKED_ADD_U64 (guint64 *dest, guint64 a, guint64 b) {
   *dest = a + b; return *dest >= a; }
 static inline gboolean _GLIB_CHECKED_MUL_U64 (guint64 *dest, guint64 a, guint64 b) {
   *dest = a * b; return !a || *dest / a == b; }
 #endif
+#endif /* __GTK_DOC_IGNORE__ */
 
 /* IEEE Standard 754 Single Precision Storage Format (gfloat):
  *
  *        31 30           23 22            0
  * +--------+---------------+---------------+
@@ -451,15 +495,15 @@
  * +--------+----------------+----------------+ +---------------+
  * B0--------------->B1---------->B2--->B3---->  B4->B5->B6->B7->
  */
 /* subtract from biased_exponent to form base2 exponent (normal numbers) */
 typedef union  _GDoubleIEEE754  GDoubleIEEE754;
-typedef union  _GFloatIEEE754   GFloatIEEE754;
-#define G_IEEE754_FLOAT_BIAS    (127)
-#define G_IEEE754_DOUBLE_BIAS   (1023)
+typedef union  _GFloatIEEE754 GFloatIEEE754;
+#define G_IEEE754_FLOAT_BIAS  (127)
+#define G_IEEE754_DOUBLE_BIAS (1023)
 /* multiply with base2 exponent to get base10 exponent (normal numbers) */
-#define G_LOG_2_BASE_10     (0.30102999566398119521)
+#define G_LOG_2_BASE_10   (0.30102999566398119521)
 #if G_BYTE_ORDER == G_LITTLE_ENDIAN
 union _GFloatIEEE754
 {
   gfloat v_float;
   struct {
@@ -500,17 +544,17 @@
 };
 #else /* !G_LITTLE_ENDIAN && !G_BIG_ENDIAN */
 #error unknown ENDIAN type
 #endif /* !G_LITTLE_ENDIAN && !G_BIG_ENDIAN */
 
-typedef struct _GTimeVal                GTimeVal;
+typedef struct _GTimeVal GTimeVal GLIB_DEPRECATED_TYPE_IN_2_62_FOR(GDateTime);
 
 struct _GTimeVal
 {
   glong tv_sec;
   glong tv_usec;
-};
+} GLIB_DEPRECATED_TYPE_IN_2_62_FOR(GDateTime);
 
 typedef gint            grefcount;
 typedef volatile gint   gatomicrefcount;
 
 G_END_DECLS
