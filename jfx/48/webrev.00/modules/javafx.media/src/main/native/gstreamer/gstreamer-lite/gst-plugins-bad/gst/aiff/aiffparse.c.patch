diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-bad/gst/aiff/aiffparse.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-bad/gst/aiff/aiffparse.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-bad/gst/aiff/aiffparse.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-bad/gst/aiff/aiffparse.c
@@ -641,22 +641,25 @@
     return TRUE;
   }
   return FALSE;
 }
 
-static void
+static gboolean
 gst_aiff_parse_ignore_chunk (GstAiffParse * aiff, guint32 tag, guint32 size)
 {
 #ifdef GSTREAMER_LITE
     guint64 flush;
 #else
     guint flush;
 #endif
 
   if (aiff->streaming) {
-    if (!gst_aiff_parse_peek_chunk (aiff, &tag, &size))
-      return;
+    if (!gst_aiff_parse_peek_chunk (aiff, &tag, &size)) {
+      GST_LOG_OBJECT (aiff, "Not enough data to skip tag %" GST_FOURCC_FORMAT,
+          GST_FOURCC_ARGS (tag));
+      return FALSE;
+    }
   }
   GST_WARNING_OBJECT (aiff, "Ignoring tag %" GST_FOURCC_FORMAT,
       GST_FOURCC_ARGS (tag));
 #ifdef GSTREAMER_LITE
   flush = 8 + (((guint64)size + 1) & ~1);
@@ -665,10 +668,11 @@
 #endif
   aiff->offset += flush;
   if (aiff->streaming) {
     gst_adapter_flush (aiff->adapter, flush);
   }
+  return TRUE;
 }
 
 static double
 gst_aiff_parse_read_IEEE80 (guint8 * buf)
 {
@@ -1122,15 +1126,19 @@
         }
         break;
       }
       case GST_MAKE_FOURCC ('C', 'H', 'A', 'N'):{
         GST_FIXME_OBJECT (aiff, "Handle CHAN chunk with channel layouts");
-        gst_aiff_parse_ignore_chunk (aiff, tag, size);
+        if (!gst_aiff_parse_ignore_chunk (aiff, tag, size)) {
+          return GST_FLOW_OK;
+        }
         break;
       }
       default:
-        gst_aiff_parse_ignore_chunk (aiff, tag, size);
+        if (!gst_aiff_parse_ignore_chunk (aiff, tag, size)) {
+          return GST_FLOW_OK;
+        }
     }
 
     buf = NULL;
 
     if (upstream_size && (aiff->offset >= upstream_size)) {
