diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/genums.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/genums.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/genums.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/genums.c
@@ -65,39 +65,39 @@
  * ]|
  */
 
 
 /* --- prototypes --- */
-static void g_enum_class_init       (GEnumClass *class,
-                         gpointer    class_data);
-static void g_flags_class_init      (GFlagsClass    *class,
-                         gpointer    class_data);
-static void value_flags_enum_init       (GValue     *value);
-static void value_flags_enum_copy_value (const GValue   *src_value,
-                         GValue     *dest_value);
-static gchar*   value_flags_enum_collect_value  (GValue     *value,
-                         guint           n_collect_values,
-                         GTypeCValue    *collect_values,
-                         guint           collect_flags);
-static gchar*   value_flags_enum_lcopy_value    (const GValue   *value,
-                         guint           n_collect_values,
-                         GTypeCValue    *collect_values,
-                         guint           collect_flags);
+static void g_enum_class_init   (GEnumClass *class,
+             gpointer  class_data);
+static void g_flags_class_init    (GFlagsClass  *class,
+             gpointer  class_data);
+static void value_flags_enum_init   (GValue   *value);
+static void value_flags_enum_copy_value (const GValue *src_value,
+             GValue   *dest_value);
+static gchar* value_flags_enum_collect_value  (GValue   *value,
+             guint           n_collect_values,
+             GTypeCValue    *collect_values,
+             guint           collect_flags);
+static gchar* value_flags_enum_lcopy_value  (const GValue *value,
+             guint           n_collect_values,
+             GTypeCValue    *collect_values,
+             guint           collect_flags);
 
 /* --- functions --- */
 void
 _g_enum_types_init (void)
 {
   static gboolean initialized = FALSE;
   static const GTypeValueTable flags_enum_value_table = {
     value_flags_enum_init,      /* value_init */
-    NULL,               /* value_free */
+    NULL,         /* value_free */
     value_flags_enum_copy_value,    /* value_copy */
-    NULL,               /* value_peek_pointer */
-    "i",                /* collect_format */
+    NULL,         /* value_peek_pointer */
+    "i",          /* collect_format */
     value_flags_enum_collect_value, /* collect_value */
-    "p",                /* lcopy_format */
+    "p",          /* lcopy_format */
     value_flags_enum_lcopy_value,   /* lcopy_value */
   };
   GTypeInfo info = {
     0,                          /* class_size */
     NULL,                       /* base_init */
@@ -111,27 +111,27 @@
     &flags_enum_value_table,    /* value_table */
   };
   static const GTypeFundamentalInfo finfo = {
     G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_DERIVABLE,
   };
-  GType type;
+  GType type G_GNUC_UNUSED  /* when compiling with G_DISABLE_ASSERT */;
 
   g_return_if_fail (initialized == FALSE);
   initialized = TRUE;
 
   /* G_TYPE_ENUM
    */
   info.class_size = sizeof (GEnumClass);
   type = g_type_register_fundamental (G_TYPE_ENUM, g_intern_static_string ("GEnum"), &info, &finfo,
-                      G_TYPE_FLAG_ABSTRACT | G_TYPE_FLAG_VALUE_ABSTRACT);
+              G_TYPE_FLAG_ABSTRACT | G_TYPE_FLAG_VALUE_ABSTRACT);
   g_assert (type == G_TYPE_ENUM);
 
   /* G_TYPE_FLAGS
    */
   info.class_size = sizeof (GFlagsClass);
   type = g_type_register_fundamental (G_TYPE_FLAGS, g_intern_static_string ("GFlags"), &info, &finfo,
-                      G_TYPE_FLAG_ABSTRACT | G_TYPE_FLAG_VALUE_ABSTRACT);
+              G_TYPE_FLAG_ABSTRACT | G_TYPE_FLAG_VALUE_ABSTRACT);
   g_assert (type == G_TYPE_FLAGS);
 }
 
 static void
 value_flags_enum_init (GValue *value)
@@ -139,20 +139,20 @@
   value->data[0].v_long = 0;
 }
 
 static void
 value_flags_enum_copy_value (const GValue *src_value,
-                 GValue   *dest_value)
+           GValue   *dest_value)
 {
   dest_value->data[0].v_long = src_value->data[0].v_long;
 }
 
 static gchar*
 value_flags_enum_collect_value (GValue      *value,
-                guint        n_collect_values,
-                GTypeCValue *collect_values,
-                guint        collect_flags)
+        guint        n_collect_values,
+        GTypeCValue *collect_values,
+        guint        collect_flags)
 {
   if (G_VALUE_HOLDS_ENUM (value))
     value->data[0].v_long = collect_values[0].v_int;
   else
     value->data[0].v_ulong = (guint) collect_values[0].v_int;
@@ -160,13 +160,13 @@
   return NULL;
 }
 
 static gchar*
 value_flags_enum_lcopy_value (const GValue *value,
-                  guint         n_collect_values,
-                  GTypeCValue  *collect_values,
-                  guint         collect_flags)
+            guint         n_collect_values,
+            GTypeCValue  *collect_values,
+            guint         collect_flags)
 {
   gint *int_p = collect_values[0].v_pointer;
 
   if (!int_p)
     return g_strdup_printf ("value location for '%s' passed as NULL", G_VALUE_TYPE_NAME (value));
@@ -192,11 +192,11 @@
  *
  * Returns: The new type identifier.
  */
 GType
 g_enum_register_static (const gchar  *name,
-            const GEnumValue *const_static_values)
+      const GEnumValue *const_static_values)
 {
   GTypeInfo enum_type_info = {
     sizeof (GEnumClass), /* class_size */
     NULL,                /* base_init */
     NULL,                /* base_finalize */
@@ -204,11 +204,11 @@
     NULL,                /* class_finalize */
     NULL,                /* class_data */
     0,                   /* instance_size */
     0,                   /* n_preallocs */
     NULL,                /* instance_init */
-    NULL,        /* value_table */
+    NULL,    /* value_table */
   };
   GType type;
 
   g_return_val_if_fail (name != NULL, 0);
   g_return_val_if_fail (const_static_values != NULL, 0);
@@ -234,12 +234,12 @@
  * definition than to write one yourself using g_flags_register_static().
  *
  * Returns: The new type identifier.
  */
 GType
-g_flags_register_static (const gchar       *name,
-             const GFlagsValue *const_static_values)
+g_flags_register_static (const gchar     *name,
+       const GFlagsValue *const_static_values)
 {
   GTypeInfo flags_type_info = {
     sizeof (GFlagsClass), /* class_size */
     NULL,                 /* base_init */
     NULL,                 /* base_finalize */
@@ -247,11 +247,11 @@
     NULL,                 /* class_finalize */
     NULL,                 /* class_data */
     0,                    /* instance_size */
     0,                    /* n_preallocs */
     NULL,                 /* instance_init */
-    NULL,         /* value_table */
+    NULL,     /* value_table */
   };
   GType type;
 
   g_return_val_if_fail (name != NULL, 0);
   g_return_val_if_fail (const_static_values != NULL, 0);
@@ -291,13 +291,13 @@
  *   g_enum_complete_type_info (type, info, values);
  * }
  * ]|
  */
 void
-g_enum_complete_type_info (GType         g_enum_type,
-               GTypeInfo        *info,
-               const GEnumValue *const_values)
+g_enum_complete_type_info (GType       g_enum_type,
+         GTypeInfo      *info,
+         const GEnumValue *const_values)
 {
   g_return_if_fail (G_TYPE_IS_ENUM (g_enum_type));
   g_return_if_fail (info != NULL);
   g_return_if_fail (const_values != NULL);
 
@@ -320,13 +320,13 @@
  * This function is meant to be called from the complete_type_info()
  * function of a #GTypePlugin implementation, see the example for
  * g_enum_complete_type_info() above.
  */
 void
-g_flags_complete_type_info (GType          g_flags_type,
-                GTypeInfo         *info,
-                const GFlagsValue *const_values)
+g_flags_complete_type_info (GType        g_flags_type,
+          GTypeInfo       *info,
+          const GFlagsValue *const_values)
 {
   g_return_if_fail (G_TYPE_IS_FLAGS (g_flags_type));
   g_return_if_fail (info != NULL);
   g_return_if_fail (const_values != NULL);
 
@@ -338,11 +338,11 @@
   info->class_data = const_values;
 }
 
 static void
 g_enum_class_init (GEnumClass *class,
-           gpointer    class_data)
+       gpointer    class_data)
 {
   g_return_if_fail (G_IS_ENUM_CLASS (class));
 
   class->minimum = 0;
   class->maximum = 0;
@@ -354,21 +354,21 @@
       GEnumValue *values;
 
       class->minimum = class->values->value;
       class->maximum = class->values->value;
       for (values = class->values; values->value_name; values++)
-    {
-      class->minimum = MIN (class->minimum, values->value);
-      class->maximum = MAX (class->maximum, values->value);
-      class->n_values++;
-    }
+  {
+    class->minimum = MIN (class->minimum, values->value);
+    class->maximum = MAX (class->maximum, values->value);
+    class->n_values++;
+  }
     }
 }
 
 static void
 g_flags_class_init (GFlagsClass *class,
-            gpointer     class_data)
+        gpointer   class_data)
 {
   g_return_if_fail (G_IS_FLAGS_CLASS (class));
 
   class->mask = 0;
   class->n_values = 0;
@@ -377,14 +377,14 @@
   if (class->values)
     {
       GFlagsValue *values;
 
       for (values = class->values; values->value_name; values++)
-    {
-      class->mask |= values->value;
-      class->n_values++;
-    }
+  {
+    class->mask |= values->value;
+    class->n_values++;
+  }
     }
 }
 
 /**
  * g_enum_get_value_by_name:
@@ -397,22 +397,22 @@
  *          or %NULL if the enumeration doesn't have a member
  *          with that name
  */
 GEnumValue*
 g_enum_get_value_by_name (GEnumClass  *enum_class,
-              const gchar *name)
+        const gchar *name)
 {
   g_return_val_if_fail (G_IS_ENUM_CLASS (enum_class), NULL);
   g_return_val_if_fail (name != NULL, NULL);
 
   if (enum_class->n_values)
     {
       GEnumValue *enum_value;
 
       for (enum_value = enum_class->values; enum_value->value_name; enum_value++)
-    if (strcmp (name, enum_value->value_name) == 0)
-      return enum_value;
+  if (strcmp (name, enum_value->value_name) == 0)
+    return enum_value;
     }
 
   return NULL;
 }
 
@@ -426,22 +426,22 @@
  * Returns: (transfer none): the #GFlagsValue with name @name,
  *          or %NULL if there is no flag with that name
  */
 GFlagsValue*
 g_flags_get_value_by_name (GFlagsClass *flags_class,
-               const gchar *name)
+         const gchar *name)
 {
   g_return_val_if_fail (G_IS_FLAGS_CLASS (flags_class), NULL);
   g_return_val_if_fail (name != NULL, NULL);
 
   if (flags_class->n_values)
     {
       GFlagsValue *flags_value;
 
       for (flags_value = flags_class->values; flags_value->value_name; flags_value++)
-    if (strcmp (name, flags_value->value_name) == 0)
-      return flags_value;
+  if (strcmp (name, flags_value->value_name) == 0)
+    return flags_value;
     }
 
   return NULL;
 }
 
@@ -456,22 +456,22 @@
  *          or %NULL if the enumeration doesn't have a member
  *          with that nickname
  */
 GEnumValue*
 g_enum_get_value_by_nick (GEnumClass  *enum_class,
-              const gchar *nick)
+        const gchar *nick)
 {
   g_return_val_if_fail (G_IS_ENUM_CLASS (enum_class), NULL);
   g_return_val_if_fail (nick != NULL, NULL);
 
   if (enum_class->n_values)
     {
       GEnumValue *enum_value;
 
       for (enum_value = enum_class->values; enum_value->value_name; enum_value++)
-    if (enum_value->value_nick && strcmp (nick, enum_value->value_nick) == 0)
-      return enum_value;
+  if (enum_value->value_nick && strcmp (nick, enum_value->value_nick) == 0)
+    return enum_value;
     }
 
   return NULL;
 }
 
@@ -485,22 +485,22 @@
  * Returns: (transfer none): the #GFlagsValue with nickname @nick,
  *          or %NULL if there is no flag with that nickname
  */
 GFlagsValue*
 g_flags_get_value_by_nick (GFlagsClass *flags_class,
-               const gchar *nick)
+         const gchar *nick)
 {
   g_return_val_if_fail (G_IS_FLAGS_CLASS (flags_class), NULL);
   g_return_val_if_fail (nick != NULL, NULL);
 
   if (flags_class->n_values)
     {
       GFlagsValue *flags_value;
 
       for (flags_value = flags_class->values; flags_value->value_nick; flags_value++)
-    if (flags_value->value_nick && strcmp (nick, flags_value->value_nick) == 0)
-      return flags_value;
+  if (flags_value->value_nick && strcmp (nick, flags_value->value_nick) == 0)
+    return flags_value;
     }
 
   return NULL;
 }
 
@@ -514,21 +514,21 @@
  * Returns: (transfer none): the #GEnumValue for @value, or %NULL
  *          if @value is not a member of the enumeration
  */
 GEnumValue*
 g_enum_get_value (GEnumClass *enum_class,
-          gint        value)
+      gint        value)
 {
   g_return_val_if_fail (G_IS_ENUM_CLASS (enum_class), NULL);
 
   if (enum_class->n_values)
     {
       GEnumValue *enum_value;
 
       for (enum_value = enum_class->values; enum_value->value_name; enum_value++)
-    if (enum_value->value == value)
-      return enum_value;
+  if (enum_value->value == value)
+    return enum_value;
     }
 
   return NULL;
 }
 
@@ -542,11 +542,11 @@
  * Returns: (transfer none): the first #GFlagsValue which is set in
  *          @value, or %NULL if none is set
  */
 GFlagsValue*
 g_flags_get_first_value (GFlagsClass *flags_class,
-             guint        value)
+       guint        value)
 {
   g_return_val_if_fail (G_IS_FLAGS_CLASS (flags_class), NULL);
 
   if (flags_class->n_values)
     {
@@ -703,11 +703,11 @@
  *
  * Set the contents of a %G_TYPE_ENUM #GValue to @v_enum.
  */
 void
 g_value_set_enum (GValue *value,
-          gint    v_enum)
+      gint    v_enum)
 {
   g_return_if_fail (G_VALUE_HOLDS_ENUM (value));
 
   value->data[0].v_long = v_enum;
 }
@@ -735,11 +735,11 @@
  *
  * Set the contents of a %G_TYPE_FLAGS #GValue to @v_flags.
  */
 void
 g_value_set_flags (GValue *value,
-           guint   v_flags)
+       guint   v_flags)
 {
   g_return_if_fail (G_VALUE_HOLDS_FLAGS (value));
 
   value->data[0].v_ulong = v_flags;
 }
