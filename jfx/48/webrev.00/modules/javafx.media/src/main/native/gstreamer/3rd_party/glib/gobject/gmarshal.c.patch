diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gmarshal.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gmarshal.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gmarshal.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gmarshal.c
@@ -1,803 +1,29 @@
-
-#include "config.h"
-
-#include "gobject.h"
-#include "genums.h"
-#include "gboxed.h"
-#include "gvaluetypes.h"
-
-/**
- * g_cclosure_marshal_VOID__VOID:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with no arguments.
- */
-/**
- * g_cclosure_marshal_VOID__BOOLEAN:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with a single
- * boolean argument.
- */
-/**
- * g_cclosure_marshal_VOID__CHAR:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with a single
- * character argument.
- */
-/**
- * g_cclosure_marshal_VOID__UCHAR:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with a single
- * unsigned character argument.
- */
-/**
- * g_cclosure_marshal_VOID__INT:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with a single
- * integer argument.
- */
-/**
- * g_cclosure_marshal_VOID__UINT:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with with a single
- * unsigned integer argument.
- */
-/**
- * g_cclosure_marshal_VOID__LONG:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with with a single
- * long integer argument.
- */
-/**
- * g_cclosure_marshal_VOID__ULONG:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with a single
- * unsigned long integer argument.
- */
-/**
- * g_cclosure_marshal_VOID__ENUM:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with a single
- * argument with an enumerated type.
- */
-/**
- * g_cclosure_marshal_VOID__FLAGS:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with a single
- * argument with a flags types.
- */
-/**
- * g_cclosure_marshal_VOID__FLOAT:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with one
- * single-precision floating point argument.
- */
-/**
- * g_cclosure_marshal_VOID__DOUBLE:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with one
- * double-precision floating point argument.
- */
-/**
- * g_cclosure_marshal_VOID__STRING:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with a single string
- * argument.
- */
-/**
- * g_cclosure_marshal_VOID__PARAM:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with a single
- * argument of type #GParamSpec.
- */
-/**
- * g_cclosure_marshal_VOID__BOXED:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with a single
- * argument which is any boxed pointer type.
- */
-/**
- * g_cclosure_marshal_VOID__POINTER:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with a single raw
- * pointer argument type.
- *
- * If it is possible, it is better to use one of the more specific
- * functions such as g_cclosure_marshal_VOID__OBJECT() or
- * g_cclosure_marshal_VOID__OBJECT().
- */
-/**
- * g_cclosure_marshal_VOID__OBJECT:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with a single
- * #GObject argument.
- */
-/**
- * g_cclosure_marshal_VOID__VARIANT:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with a single
- * #GVariant argument.
- */
-/**
- * g_cclosure_marshal_STRING__OBJECT_POINTER:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with handlers that
- * take a #GObject and a pointer and produce a string.  It is highly
- * unlikely that your signal handler fits this description.
- */
-/**
- * g_cclosure_marshal_VOID__UINT_POINTER:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with a unsigned int
- * and a pointer as arguments.
- */
-/**
- * g_cclosure_marshal_BOOLEAN__FLAGS:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with handlers that
- * take a flags type as an argument and return a boolean.  If you have
- * such a signal, you will probably also need to use an accumulator,
- * such as g_signal_accumulator_true_handled().
- */
-/**
- * g_cclosure_marshal_BOOL__FLAGS:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * An old alias for g_cclosure_marshal_BOOLEAN__FLAGS().
- */
-/**
- * g_cclosure_marshal_BOOLEAN__BOXED_BOXED:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * A #GClosureMarshal function for use with signals with handlers that
- * take two boxed pointers as arguments and return a boolean.  If you
- * have such a signal, you will probably also need to use an
- * accumulator, such as g_signal_accumulator_true_handled().
- */
-/**
- * g_cclosure_marshal_BOOL__BOXED_BOXED:
- * @closure: A #GClosure.
- * @return_value: A #GValue to store the return value. May be %NULL
- *   if the callback of closure doesn't return a value.
- * @n_param_values: The length of the @param_values array.
- * @param_values: An array of #GValues holding the arguments
- *   on which to invoke the callback of closure.
- * @invocation_hint: The invocation hint given as the last argument to
- *   g_closure_invoke().
- * @marshal_data: Additional data specified when registering the
- *   marshaller, see g_closure_set_marshal() and
- *   g_closure_set_meta_marshal()
- *
- * An old alias for g_cclosure_marshal_BOOLEAN__BOXED_BOXED().
- */
-/**
- * g_cclosure_marshal_VOID__VOIDv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__VOID().
- */
-
-/**
- * g_cclosure_marshal_VOID__BOOLEANv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__BOOLEAN().
- */
-/**
- * g_cclosure_marshal_VOID__CHARv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__CHAR().
- */
-/**
- * g_cclosure_marshal_VOID__UCHARv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UCHAR().
- */
-/**
- * g_cclosure_marshal_VOID__INTv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__INT().
- */
-/**
- * g_cclosure_marshal_VOID__UINTv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UINT().
- */
-/**
- * g_cclosure_marshal_VOID__LONGv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__LONG().
- */
-/**
- * g_cclosure_marshal_VOID__ULONGv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__ULONG().
- */
-/**
- * g_cclosure_marshal_VOID__ENUMv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__ENUM().
- */
-/**
- * g_cclosure_marshal_VOID__FLAGSv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__FLAGS().
- */
-/**
- * g_cclosure_marshal_VOID__FLOATv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__FLOAT().
- */
-/**
- * g_cclosure_marshal_VOID__DOUBLEv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__DOUBLE().
- */
-/**
- * g_cclosure_marshal_VOID__STRINGv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__STRING().
- */
-/**
- * g_cclosure_marshal_VOID__PARAMv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__PARAM().
- */
-/**
- * g_cclosure_marshal_VOID__BOXEDv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__BOXED().
- */
-/**
- * g_cclosure_marshal_VOID__POINTERv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__POINTER().
- */
-/**
- * g_cclosure_marshal_VOID__OBJECTv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__OBJECT().
- */
-/**
- * g_cclosure_marshal_VOID__VARIANTv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__VARIANT().
- */
-/**
- * g_cclosure_marshal_STRING__OBJECT_POINTERv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
- *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_STRING__OBJECT_POINTER().
- */
-/**
- * g_cclosure_marshal_VOID__UINT_POINTERv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
+/* GObject - GLib Type, Object, Parameter and Signal Library
  *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UINT_POINTER().
- */
-/**
- * g_cclosure_marshal_BOOLEAN__FLAGSv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
  *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_BOOLEAN__FLAGS().
- */
-/**
- * g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv:
- * @closure: the #GClosure to which the marshaller belongs
- * @return_value: (nullable): a #GValue to store the return
- *  value. May be %NULL if the callback of @closure doesn't return a
- *  value.
- * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
- * @args: va_list of arguments to be passed to the closure.
- * @marshal_data: (nullable): additional data specified when
- *  registering the marshaller, see g_closure_set_marshal() and
- *  g_closure_set_meta_marshal()
- * @n_params: the length of the @param_types array
- * @param_types: (array length=n_params): the #GType of each argument from
- *  @args.
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * The #GVaClosureMarshal equivalent to g_cclosure_marshal_BOOLEAN__BOXED_BOXED().
+ * You should have received a copy of the GNU Lesser General
+ * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
  */
 
+#include "config.h"
+
+#include "gobject.h"
+#include "genums.h"
+#include "gboxed.h"
+#include "gvaluetypes.h"
+
+
 #ifdef G_ENABLE_DEBUG
 #define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
 #define g_marshal_value_peek_char(v)     g_value_get_schar (v)
 #define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
 #define g_marshal_value_peek_int(v)      g_value_get_int (v)
@@ -841,11 +67,27 @@
 #define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
 #define g_marshal_value_peek_variant(v)  (v)->data[0].v_pointer
 #endif /* !G_ENABLE_DEBUG */
 
 
-/* VOID:VOID (./gmarshal.list:6) */
+/**
+ * g_cclosure_marshal_VOID__VOID:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with no arguments.
+ */
+/* VOID:VOID */
 void
 g_cclosure_marshal_VOID__VOID (GClosure     *closure,
                                GValue       *return_value G_GNUC_UNUSED,
                                guint         n_param_values,
                                const GValue *param_values,
@@ -873,10 +115,28 @@
   callback = (GMarshalFunc_VOID__VOID) (marshal_data ? marshal_data : cc->callback);
 
   callback (data1,
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__VOIDv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__VOID().
+ */
 void
 g_cclosure_marshal_VOID__VOIDv (GClosure     *closure,
                                 GValue       *return_value,
                                 gpointer      instance,
                                 va_list       args,
@@ -904,12 +164,28 @@
 
   callback (data1,
             data2);
 }
 
-
-/* VOID:BOOLEAN (./gmarshal.list:7) */
+/**
+ * g_cclosure_marshal_VOID__BOOLEAN:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with a single
+ * boolean argument.
+ */
+/* VOID:BOOLEAN */
 void
 g_cclosure_marshal_VOID__BOOLEAN (GClosure     *closure,
                                   GValue       *return_value G_GNUC_UNUSED,
                                   guint         n_param_values,
                                   const GValue *param_values,
@@ -939,10 +215,28 @@
 
   callback (data1,
             g_marshal_value_peek_boolean (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__BOOLEANv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__BOOLEAN().
+ */
 void
 g_cclosure_marshal_VOID__BOOLEANv (GClosure     *closure,
                                    GValue       *return_value,
                                    gpointer      instance,
                                    va_list       args,
@@ -978,12 +272,28 @@
   callback (data1,
             arg0,
             data2);
 }
 
-
-/* VOID:CHAR (./gmarshal.list:8) */
+/**
+ * g_cclosure_marshal_VOID__CHAR:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with a single
+ * character argument.
+ */
+/* VOID:CHAR */
 void
 g_cclosure_marshal_VOID__CHAR (GClosure     *closure,
                                GValue       *return_value G_GNUC_UNUSED,
                                guint         n_param_values,
                                const GValue *param_values,
@@ -1013,10 +323,28 @@
 
   callback (data1,
             g_marshal_value_peek_char (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__CHARv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__CHAR().
+ */
 void
 g_cclosure_marshal_VOID__CHARv (GClosure     *closure,
                                 GValue       *return_value,
                                 gpointer      instance,
                                 va_list       args,
@@ -1052,12 +380,28 @@
   callback (data1,
             arg0,
             data2);
 }
 
-
-/* VOID:UCHAR (./gmarshal.list:9) */
+/**
+ * g_cclosure_marshal_VOID__UCHAR:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with a single
+ * unsigned character argument.
+ */
+/* VOID:UCHAR */
 void
 g_cclosure_marshal_VOID__UCHAR (GClosure     *closure,
                                 GValue       *return_value G_GNUC_UNUSED,
                                 guint         n_param_values,
                                 const GValue *param_values,
@@ -1087,10 +431,28 @@
 
   callback (data1,
             g_marshal_value_peek_uchar (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__UCHARv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UCHAR().
+ */
 void
 g_cclosure_marshal_VOID__UCHARv (GClosure     *closure,
                                  GValue       *return_value,
                                  gpointer      instance,
                                  va_list       args,
@@ -1126,12 +488,28 @@
   callback (data1,
             arg0,
             data2);
 }
 
-
-/* VOID:INT (./gmarshal.list:10) */
+/**
+ * g_cclosure_marshal_VOID__INT:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with a single
+ * integer argument.
+ */
+/* VOID:INT */
 void
 g_cclosure_marshal_VOID__INT (GClosure     *closure,
                               GValue       *return_value G_GNUC_UNUSED,
                               guint         n_param_values,
                               const GValue *param_values,
@@ -1161,10 +539,28 @@
 
   callback (data1,
             g_marshal_value_peek_int (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__INTv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__INT().
+ */
 void
 g_cclosure_marshal_VOID__INTv (GClosure     *closure,
                                GValue       *return_value,
                                gpointer      instance,
                                va_list       args,
@@ -1200,12 +596,28 @@
   callback (data1,
             arg0,
             data2);
 }
 
-
-/* VOID:UINT (./gmarshal.list:11) */
+/**
+ * g_cclosure_marshal_VOID__UINT:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with with a single
+ * unsigned integer argument.
+ */
+/* VOID:UINT */
 void
 g_cclosure_marshal_VOID__UINT (GClosure     *closure,
                                GValue       *return_value G_GNUC_UNUSED,
                                guint         n_param_values,
                                const GValue *param_values,
@@ -1235,10 +647,28 @@
 
   callback (data1,
             g_marshal_value_peek_uint (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__UINTv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UINT().
+ */
 void
 g_cclosure_marshal_VOID__UINTv (GClosure     *closure,
                                 GValue       *return_value,
                                 gpointer      instance,
                                 va_list       args,
@@ -1274,12 +704,28 @@
   callback (data1,
             arg0,
             data2);
 }
 
-
-/* VOID:LONG (./gmarshal.list:12) */
+/**
+ * g_cclosure_marshal_VOID__LONG:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with with a single
+ * long integer argument.
+ */
+/* VOID:LONG */
 void
 g_cclosure_marshal_VOID__LONG (GClosure     *closure,
                                GValue       *return_value G_GNUC_UNUSED,
                                guint         n_param_values,
                                const GValue *param_values,
@@ -1309,10 +755,28 @@
 
   callback (data1,
             g_marshal_value_peek_long (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__LONGv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__LONG().
+ */
 void
 g_cclosure_marshal_VOID__LONGv (GClosure     *closure,
                                 GValue       *return_value,
                                 gpointer      instance,
                                 va_list       args,
@@ -1348,12 +812,28 @@
   callback (data1,
             arg0,
             data2);
 }
 
-
-/* VOID:ULONG (./gmarshal.list:13) */
+/**
+ * g_cclosure_marshal_VOID__ULONG:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with a single
+ * unsigned long integer argument.
+ */
+/* VOID:ULONG */
 void
 g_cclosure_marshal_VOID__ULONG (GClosure     *closure,
                                 GValue       *return_value G_GNUC_UNUSED,
                                 guint         n_param_values,
                                 const GValue *param_values,
@@ -1383,10 +863,28 @@
 
   callback (data1,
             g_marshal_value_peek_ulong (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__ULONGv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__ULONG().
+ */
 void
 g_cclosure_marshal_VOID__ULONGv (GClosure     *closure,
                                  GValue       *return_value,
                                  gpointer      instance,
                                  va_list       args,
@@ -1422,12 +920,28 @@
   callback (data1,
             arg0,
             data2);
 }
 
-
-/* VOID:ENUM (./gmarshal.list:14) */
+/**
+ * g_cclosure_marshal_VOID__ENUM:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with a single
+ * argument with an enumerated type.
+ */
+/* VOID:ENUM */
 void
 g_cclosure_marshal_VOID__ENUM (GClosure     *closure,
                                GValue       *return_value G_GNUC_UNUSED,
                                guint         n_param_values,
                                const GValue *param_values,
@@ -1457,10 +971,28 @@
 
   callback (data1,
             g_marshal_value_peek_enum (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__ENUMv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__ENUM().
+ */
 void
 g_cclosure_marshal_VOID__ENUMv (GClosure     *closure,
                                 GValue       *return_value,
                                 gpointer      instance,
                                 va_list       args,
@@ -1496,12 +1028,28 @@
   callback (data1,
             arg0,
             data2);
 }
 
-
-/* VOID:FLAGS (./gmarshal.list:15) */
+/**
+ * g_cclosure_marshal_VOID__FLAGS:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with a single
+ * argument with a flags types.
+ */
+/* VOID:FLAGS */
 void
 g_cclosure_marshal_VOID__FLAGS (GClosure     *closure,
                                 GValue       *return_value G_GNUC_UNUSED,
                                 guint         n_param_values,
                                 const GValue *param_values,
@@ -1531,10 +1079,28 @@
 
   callback (data1,
             g_marshal_value_peek_flags (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__FLAGSv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__FLAGS().
+ */
 void
 g_cclosure_marshal_VOID__FLAGSv (GClosure     *closure,
                                  GValue       *return_value,
                                  gpointer      instance,
                                  va_list       args,
@@ -1570,12 +1136,28 @@
   callback (data1,
             arg0,
             data2);
 }
 
-
-/* VOID:FLOAT (./gmarshal.list:16) */
+/**
+ * g_cclosure_marshal_VOID__FLOAT:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with one
+ * single-precision floating point argument.
+ */
+/* VOID:FLOAT */
 void
 g_cclosure_marshal_VOID__FLOAT (GClosure     *closure,
                                 GValue       *return_value G_GNUC_UNUSED,
                                 guint         n_param_values,
                                 const GValue *param_values,
@@ -1605,10 +1187,28 @@
 
   callback (data1,
             g_marshal_value_peek_float (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__FLOATv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__FLOAT().
+ */
 void
 g_cclosure_marshal_VOID__FLOATv (GClosure     *closure,
                                  GValue       *return_value,
                                  gpointer      instance,
                                  va_list       args,
@@ -1644,12 +1244,28 @@
   callback (data1,
             arg0,
             data2);
 }
 
-
-/* VOID:DOUBLE (./gmarshal.list:17) */
+/**
+ * g_cclosure_marshal_VOID__DOUBLE:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with one
+ * double-precision floating point argument.
+ */
+/* VOID:DOUBLE */
 void
 g_cclosure_marshal_VOID__DOUBLE (GClosure     *closure,
                                  GValue       *return_value G_GNUC_UNUSED,
                                  guint         n_param_values,
                                  const GValue *param_values,
@@ -1679,10 +1295,28 @@
 
   callback (data1,
             g_marshal_value_peek_double (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__DOUBLEv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__DOUBLE().
+ */
 void
 g_cclosure_marshal_VOID__DOUBLEv (GClosure     *closure,
                                   GValue       *return_value,
                                   gpointer      instance,
                                   va_list       args,
@@ -1718,12 +1352,28 @@
   callback (data1,
             arg0,
             data2);
 }
 
-
-/* VOID:STRING (./gmarshal.list:18) */
+/**
+ * g_cclosure_marshal_VOID__STRING:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with a single string
+ * argument.
+ */
+/* VOID:STRING */
 void
 g_cclosure_marshal_VOID__STRING (GClosure     *closure,
                                  GValue       *return_value G_GNUC_UNUSED,
                                  guint         n_param_values,
                                  const GValue *param_values,
@@ -1753,10 +1403,28 @@
 
   callback (data1,
             g_marshal_value_peek_string (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__STRINGv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__STRING().
+ */
 void
 g_cclosure_marshal_VOID__STRINGv (GClosure     *closure,
                                   GValue       *return_value,
                                   gpointer      instance,
                                   va_list       args,
@@ -1796,12 +1464,28 @@
             data2);
   if ((param_types[0] & G_SIGNAL_TYPE_STATIC_SCOPE) == 0 && arg0 != NULL)
     g_free (arg0);
 }
 
-
-/* VOID:PARAM (./gmarshal.list:19) */
+/**
+ * g_cclosure_marshal_VOID__PARAM:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with a single
+ * argument of type #GParamSpec.
+ */
+/* VOID:PARAM */
 void
 g_cclosure_marshal_VOID__PARAM (GClosure     *closure,
                                 GValue       *return_value G_GNUC_UNUSED,
                                 guint         n_param_values,
                                 const GValue *param_values,
@@ -1831,10 +1515,28 @@
 
   callback (data1,
             g_marshal_value_peek_param (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__PARAMv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__PARAM().
+ */
 void
 g_cclosure_marshal_VOID__PARAMv (GClosure     *closure,
                                  GValue       *return_value,
                                  gpointer      instance,
                                  va_list       args,
@@ -1874,12 +1576,28 @@
             data2);
   if ((param_types[0] & G_SIGNAL_TYPE_STATIC_SCOPE) == 0 && arg0 != NULL)
     g_param_spec_unref (arg0);
 }
 
-
-/* VOID:BOXED (./gmarshal.list:20) */
+/**
+ * g_cclosure_marshal_VOID__BOXED:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with a single
+ * argument which is any boxed pointer type.
+ */
+/* VOID:BOXED */
 void
 g_cclosure_marshal_VOID__BOXED (GClosure     *closure,
                                 GValue       *return_value G_GNUC_UNUSED,
                                 guint         n_param_values,
                                 const GValue *param_values,
@@ -1909,10 +1627,28 @@
 
   callback (data1,
             g_marshal_value_peek_boxed (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__BOXEDv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__BOXED().
+ */
 void
 g_cclosure_marshal_VOID__BOXEDv (GClosure     *closure,
                                  GValue       *return_value,
                                  gpointer      instance,
                                  va_list       args,
@@ -1952,12 +1688,32 @@
             data2);
   if ((param_types[0] & G_SIGNAL_TYPE_STATIC_SCOPE) == 0 && arg0 != NULL)
     g_boxed_free (param_types[0] & ~G_SIGNAL_TYPE_STATIC_SCOPE, arg0);
 }
 
-
-/* VOID:POINTER (./gmarshal.list:21) */
+/**
+ * g_cclosure_marshal_VOID__POINTER:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with a single raw
+ * pointer argument type.
+ *
+ * If it is possible, it is better to use one of the more specific
+ * functions such as g_cclosure_marshal_VOID__OBJECT() or
+ * g_cclosure_marshal_VOID__OBJECT().
+ */
+/* VOID:POINTER */
 void
 g_cclosure_marshal_VOID__POINTER (GClosure     *closure,
                                   GValue       *return_value G_GNUC_UNUSED,
                                   guint         n_param_values,
                                   const GValue *param_values,
@@ -1987,10 +1743,28 @@
 
   callback (data1,
             g_marshal_value_peek_pointer (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__POINTERv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__POINTER().
+ */
 void
 g_cclosure_marshal_VOID__POINTERv (GClosure     *closure,
                                    GValue       *return_value,
                                    gpointer      instance,
                                    va_list       args,
@@ -2026,12 +1800,28 @@
   callback (data1,
             arg0,
             data2);
 }
 
-
-/* VOID:OBJECT (./gmarshal.list:22) */
+/**
+ * g_cclosure_marshal_VOID__OBJECT:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with a single
+ * #GObject argument.
+ */
+/* VOID:OBJECT */
 void
 g_cclosure_marshal_VOID__OBJECT (GClosure     *closure,
                                  GValue       *return_value G_GNUC_UNUSED,
                                  guint         n_param_values,
                                  const GValue *param_values,
@@ -2061,10 +1851,28 @@
 
   callback (data1,
             g_marshal_value_peek_object (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__OBJECTv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__OBJECT().
+ */
 void
 g_cclosure_marshal_VOID__OBJECTv (GClosure     *closure,
                                   GValue       *return_value,
                                   gpointer      instance,
                                   va_list       args,
@@ -2104,12 +1912,28 @@
             data2);
   if (arg0 != NULL)
     g_object_unref (arg0);
 }
 
-
-/* VOID:VARIANT (./gmarshal.list:23) */
+/**
+ * g_cclosure_marshal_VOID__VARIANT:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with a single
+ * #GVariant argument.
+ */
+/* VOID:VARIANT */
 void
 g_cclosure_marshal_VOID__VARIANT (GClosure     *closure,
                                   GValue       *return_value G_GNUC_UNUSED,
                                   guint         n_param_values,
                                   const GValue *param_values,
@@ -2139,10 +1963,28 @@
 
   callback (data1,
             g_marshal_value_peek_variant (param_values + 1),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__VARIANTv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__VARIANT().
+ */
 void
 g_cclosure_marshal_VOID__VARIANTv (GClosure     *closure,
                                    GValue       *return_value,
                                    gpointer      instance,
                                    va_list       args,
@@ -2182,12 +2024,28 @@
             data2);
   if ((param_types[0] & G_SIGNAL_TYPE_STATIC_SCOPE) == 0 && arg0 != NULL)
     g_variant_unref (arg0);
 }
 
-
-/* VOID:UINT,POINTER (./gmarshal.list:26) */
+/**
+ * g_cclosure_marshal_VOID__UINT_POINTER:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with an unsigned int
+ * and a pointer as arguments.
+ */
+/* VOID:UINT,POINTER */
 void
 g_cclosure_marshal_VOID__UINT_POINTER (GClosure     *closure,
                                        GValue       *return_value G_GNUC_UNUSED,
                                        guint         n_param_values,
                                        const GValue *param_values,
@@ -2219,10 +2077,28 @@
   callback (data1,
             g_marshal_value_peek_uint (param_values + 1),
             g_marshal_value_peek_pointer (param_values + 2),
             data2);
 }
+
+/**
+ * g_cclosure_marshal_VOID__UINT_POINTERv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UINT_POINTER().
+ */
 void
 g_cclosure_marshal_VOID__UINT_POINTERv (GClosure     *closure,
                                         GValue       *return_value,
                                         gpointer      instance,
                                         va_list       args,
@@ -2262,12 +2138,30 @@
             arg0,
             arg1,
             data2);
 }
 
-
-/* BOOL:FLAGS (./gmarshal.list:27) */
+/**
+ * g_cclosure_marshal_BOOLEAN__FLAGS:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with handlers that
+ * take a flags type as an argument and return a boolean.  If you have
+ * such a signal, you will probably also need to use an accumulator,
+ * such as g_signal_accumulator_true_handled().
+ */
+/* BOOL:FLAGS */
 void
 g_cclosure_marshal_BOOLEAN__FLAGS (GClosure     *closure,
                                    GValue       *return_value G_GNUC_UNUSED,
                                    guint         n_param_values,
                                    const GValue *param_values,
@@ -2301,10 +2195,28 @@
                        g_marshal_value_peek_flags (param_values + 1),
                        data2);
 
   g_value_set_boolean (return_value, v_return);
 }
+
+/**
+ * g_cclosure_marshal_BOOLEAN__FLAGSv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_BOOLEAN__FLAGS().
+ */
 void
 g_cclosure_marshal_BOOLEAN__FLAGSv (GClosure     *closure,
                                     GValue       *return_value,
                                     gpointer      instance,
                                     va_list       args,
@@ -2345,12 +2257,29 @@
                        data2);
 
   g_value_set_boolean (return_value, v_return);
 }
 
-
-/* STRING:OBJECT,POINTER (./gmarshal.list:28) */
+/**
+ * g_cclosure_marshal_STRING__OBJECT_POINTER:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with handlers that
+ * take a #GObject and a pointer and produce a string.  It is highly
+ * unlikely that your signal handler fits this description.
+ */
+/* STRING:OBJECT,POINTER */
 void
 g_cclosure_marshal_STRING__OBJECT_POINTER (GClosure     *closure,
                                            GValue       *return_value G_GNUC_UNUSED,
                                            guint         n_param_values,
                                            const GValue *param_values,
@@ -2386,10 +2315,28 @@
                        g_marshal_value_peek_pointer (param_values + 2),
                        data2);
 
   g_value_take_string (return_value, v_return);
 }
+
+/**
+ * g_cclosure_marshal_STRING__OBJECT_POINTERv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_STRING__OBJECT_POINTER().
+ */
 void
 g_cclosure_marshal_STRING__OBJECT_POINTERv (GClosure     *closure,
                                             GValue       *return_value,
                                             gpointer      instance,
                                             va_list       args,
@@ -2438,12 +2385,30 @@
     g_object_unref (arg0);
 
   g_value_take_string (return_value, v_return);
 }
 
-
-/* BOOL:BOXED,BOXED (./gmarshal.list:29) */
+/**
+ * g_cclosure_marshal_BOOLEAN__BOXED_BOXED:
+ * @closure: A #GClosure.
+ * @return_value: A #GValue to store the return value. May be %NULL
+ *   if the callback of closure doesn't return a value.
+ * @n_param_values: The length of the @param_values array.
+ * @param_values: An array of #GValues holding the arguments
+ *   on which to invoke the callback of closure.
+ * @invocation_hint: The invocation hint given as the last argument to
+ *   g_closure_invoke().
+ * @marshal_data: Additional data specified when registering the
+ *   marshaller, see g_closure_set_marshal() and
+ *   g_closure_set_meta_marshal()
+ *
+ * A #GClosureMarshal function for use with signals with handlers that
+ * take two boxed pointers as arguments and return a boolean.  If you
+ * have such a signal, you will probably also need to use an
+ * accumulator, such as g_signal_accumulator_true_handled().
+ */
+/* BOOL:BOXED,BOXED */
 void
 g_cclosure_marshal_BOOLEAN__BOXED_BOXED (GClosure     *closure,
                                          GValue       *return_value G_GNUC_UNUSED,
                                          guint         n_param_values,
                                          const GValue *param_values,
@@ -2479,10 +2444,28 @@
                        g_marshal_value_peek_boxed (param_values + 2),
                        data2);
 
   g_value_set_boolean (return_value, v_return);
 }
+
+/**
+ * g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv:
+ * @closure: the #GClosure to which the marshaller belongs
+ * @return_value: (nullable): a #GValue to store the return
+ *  value. May be %NULL if the callback of @closure doesn't return a
+ *  value.
+ * @instance: (type GObject.TypeInstance): the instance on which the closure is invoked.
+ * @args: va_list of arguments to be passed to the closure.
+ * @marshal_data: (nullable): additional data specified when
+ *  registering the marshaller, see g_closure_set_marshal() and
+ *  g_closure_set_meta_marshal()
+ * @n_params: the length of the @param_types array
+ * @param_types: (array length=n_params): the #GType of each argument from
+ *  @args.
+ *
+ * The #GVaClosureMarshal equivalent to g_cclosure_marshal_BOOLEAN__BOXED_BOXED().
+ */
 void
 g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv (GClosure     *closure,
                                           GValue       *return_value,
                                           gpointer      instance,
                                           va_list       args,
@@ -2534,7 +2517,5 @@
   if ((param_types[1] & G_SIGNAL_TYPE_STATIC_SCOPE) == 0 && arg1 != NULL)
     g_boxed_free (param_types[1] & ~G_SIGNAL_TYPE_STATIC_SCOPE, arg1);
 
   g_value_set_boolean (return_value, v_return);
 }
-
-
