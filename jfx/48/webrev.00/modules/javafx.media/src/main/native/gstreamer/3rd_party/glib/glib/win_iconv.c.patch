diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/win_iconv.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/win_iconv.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/win_iconv.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/win_iconv.c
@@ -431,12 +431,12 @@
      */
     {37, "IBM037"}, /* IBM EBCDIC US-Canada */
     {437, "IBM437"}, /* OEM United States */
     {500, "IBM500"}, /* IBM EBCDIC International */
     {708, "ASMO-708"}, /* Arabic (ASMO 708) */
-    /* 709      Arabic (ASMO-449+, BCON V4) */
-    /* 710      Arabic - Transparent Arabic */
+    /* 709    Arabic (ASMO-449+, BCON V4) */
+    /* 710    Arabic - Transparent Arabic */
     {720, "DOS-720"}, /* Arabic (Transparent ASMO); Arabic (DOS) */
     {737, "ibm737"}, /* OEM Greek (formerly 437G); Greek (DOS) */
     {775, "ibm775"}, /* OEM Baltic; Baltic (DOS) */
     {850, "ibm850"}, /* OEM Multilingual Latin 1; Western European (DOS) */
     {852, "ibm852"}, /* OEM Latin 2; Central European (DOS) */
@@ -532,11 +532,11 @@
     {20924, "IBM00924"}, /* IBM EBCDIC Latin 1/Open System (1047 + Euro symbol) */
     {20932, "EUC-JP"}, /* Japanese (JIS 0208-1990 and 0121-1990) */
     {20936, "x-cp20936"}, /* Simplified Chinese (GB2312); Chinese Simplified (GB2312-80) */
     {20949, "x-cp20949"}, /* Korean Wansung */
     {21025, "cp1025"}, /* IBM EBCDIC Cyrillic Serbian-Bulgarian */
-    /* 21027        (deprecated) */
+    /* 21027    (deprecated) */
     {21866, "koi8-u"}, /* Ukrainian (KOI8-U); Cyrillic (KOI8-U) */
     {28591, "iso-8859-1"}, /* ISO 8859-1 Latin 1; Western European (ISO) */
     {28591, "iso8859-1"}, /* ISO 8859-1 Latin 1; Western European (ISO) */
     {28591, "iso_8859-1"},
     {28591, "iso_8859_1"},
@@ -589,22 +589,22 @@
     {50221, "csISO2022JP"}, /* ISO 2022 Japanese with halfwidth Katakana; Japanese (JIS-Allow 1 byte Kana) */
     {50222, "iso-2022-jp"}, /* ISO 2022 Japanese JIS X 0201-1989; Japanese (JIS-Allow 1 byte Kana - SO/SI) */
     {50225, "iso-2022-kr"}, /* ISO 2022 Korean */
     {50225, "iso2022-kr"}, /* ISO 2022 Korean */
     {50227, "x-cp50227"}, /* ISO 2022 Simplified Chinese; Chinese Simplified (ISO 2022) */
-    /* 50229        ISO 2022 Traditional Chinese */
-    /* 50930        EBCDIC Japanese (Katakana) Extended */
-    /* 50931        EBCDIC US-Canada and Japanese */
-    /* 50933        EBCDIC Korean Extended and Korean */
-    /* 50935        EBCDIC Simplified Chinese Extended and Simplified Chinese */
-    /* 50936        EBCDIC Simplified Chinese */
-    /* 50937        EBCDIC US-Canada and Traditional Chinese */
-    /* 50939        EBCDIC Japanese (Latin) Extended and Japanese */
+    /* 50229    ISO 2022 Traditional Chinese */
+    /* 50930    EBCDIC Japanese (Katakana) Extended */
+    /* 50931    EBCDIC US-Canada and Japanese */
+    /* 50933    EBCDIC Korean Extended and Korean */
+    /* 50935    EBCDIC Simplified Chinese Extended and Simplified Chinese */
+    /* 50936    EBCDIC Simplified Chinese */
+    /* 50937    EBCDIC US-Canada and Traditional Chinese */
+    /* 50939    EBCDIC Japanese (Latin) Extended and Japanese */
     {51932, "euc-jp"}, /* EUC Japanese */
     {51936, "EUC-CN"}, /* EUC Simplified Chinese; Chinese Simplified (EUC) */
     {51949, "euc-kr"}, /* EUC Korean */
-    /* 51950        EUC Traditional Chinese */
+    /* 51950    EUC Traditional Chinese */
     {52936, "hz-gb-2312"}, /* HZ-GB2312 Simplified Chinese; Chinese Simplified (HZ) */
     {54936, "GB18030"}, /* Windows XP and later: GB18030 Simplified Chinese (4 byte); Chinese Simplified (GB18030) */
     {57002, "x-iscii-de"}, /* ISCII Devanagari */
     {57003, "x-iscii-be"}, /* ISCII Bengali */
     {57004, "x-iscii-ta"}, /* ISCII Tamil */
@@ -995,20 +995,20 @@
         cv->mbtowc = mlang_mbtowc;
         cv->wctomb = mlang_wctomb;
         cv->mblen = eucjp_mblen;
     }
     else if (IsValidCodePage(cv->codepage)
-         && GetCPInfo(cv->codepage, &cpinfo) != 0)
+       && GetCPInfo(cv->codepage, &cpinfo) != 0)
     {
         cv->mbtowc = kernel_mbtowc;
         cv->wctomb = kernel_wctomb;
         if (cpinfo.MaxCharSize == 1)
             cv->mblen = sbcs_mblen;
         else if (cpinfo.MaxCharSize == 2)
             cv->mblen = dbcs_mblen;
         else
-        cv->mblen = mbcs_mblen;
+      cv->mblen = mbcs_mblen;
     }
     else
     {
         /* not supported */
         free(name);
@@ -1036,11 +1036,11 @@
 name_to_codepage(const char *name)
 {
     int i;
 
     if (*name == '\0' ||
-    strcmp(name, "char") == 0)
+  strcmp(name, "char") == 0)
         return GetACP();
     else if (strcmp(name, "wchar_t") == 0)
         return 1200;
     else if (_strnicmp(name, "cp", 2) == 0)
         return atoi(name + 2); /* CP123 */
@@ -1096,15 +1096,15 @@
  */
 static int
 mbtowc_flags(int codepage)
 {
     return (codepage == 50220 || codepage == 50221 ||
-        codepage == 50222 || codepage == 50225 ||
-        codepage == 50227 || codepage == 50229 ||
-        codepage == 52936 || codepage == 54936 ||
-        (codepage >= 57002 && codepage <= 57011) ||
-        codepage == 65000 || codepage == 42) ? 0 : MB_ERR_INVALID_CHARS;
+      codepage == 50222 || codepage == 50225 ||
+      codepage == 50227 || codepage == 50229 ||
+      codepage == 52936 || codepage == 54936 ||
+      (codepage >= 57002 && codepage <= 57011) ||
+      codepage == 65000 || codepage == 42) ? 0 : MB_ERR_INVALID_CHARS;
 }
 
 /*
  * Check if codepage is one those for which the lpUsedDefaultChar
  * parameter to WideCharToMultiByte() must be NULL.  The docs in
@@ -1312,24 +1312,24 @@
 mbcs_mblen(csconv_t *cv, const uchar *buf, int bufsize)
 {
     int len = 0;
 
     if (cv->codepage == 54936) {
-    if (buf[0] <= 0x7F) len = 1;
-    else if (buf[0] >= 0x81 && buf[0] <= 0xFE &&
-         bufsize >= 2 &&
-         ((buf[1] >= 0x40 && buf[1] <= 0x7E) ||
-          (buf[1] >= 0x80 && buf[1] <= 0xFE))) len = 2;
-    else if (buf[0] >= 0x81 && buf[0] <= 0xFE &&
-         bufsize >= 4 &&
-         buf[1] >= 0x30 && buf[1] <= 0x39) len = 4;
-    else
-        return seterror(EINVAL);
-    return len;
+  if (buf[0] <= 0x7F) len = 1;
+  else if (buf[0] >= 0x81 && buf[0] <= 0xFE &&
+     bufsize >= 2 &&
+     ((buf[1] >= 0x40 && buf[1] <= 0x7E) ||
+      (buf[1] >= 0x80 && buf[1] <= 0xFE))) len = 2;
+  else if (buf[0] >= 0x81 && buf[0] <= 0xFE &&
+     bufsize >= 4 &&
+     buf[1] >= 0x30 && buf[1] <= 0x39) len = 4;
+  else
+      return seterror(EINVAL);
+  return len;
     }
     else
-    return seterror(EINVAL);
+  return seterror(EINVAL);
 }
 
 static int
 utf8_mblen(csconv_t *cv UNUSED, const uchar *buf, int bufsize)
 {
