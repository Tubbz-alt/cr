diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/audio.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/audio.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/audio.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/audio.c
@@ -78,10 +78,11 @@
 GstBuffer *
 gst_audio_buffer_clip (GstBuffer * buffer, const GstSegment * segment,
     gint rate, gint bpf)
 {
   GstBuffer *ret;
+  GstAudioMeta *meta;
   GstClockTime timestamp = GST_CLOCK_TIME_NONE, duration = GST_CLOCK_TIME_NONE;
   guint64 offset = GST_BUFFER_OFFSET_NONE, offset_end = GST_BUFFER_OFFSET_NONE;
   gsize trim, size, osize;
   gboolean change_duration = TRUE, change_offset = TRUE, change_offset_end =
       TRUE;
@@ -96,12 +97,15 @@
 
   /* Get copies of the buffer metadata to change later.
    * Calculate the missing values for the calculations,
    * they won't be changed later though. */
 
+  meta = gst_buffer_get_audio_meta (buffer);
+
+  /* these variables measure samples */
   trim = 0;
-  osize = size = gst_buffer_get_size (buffer);
+  osize = size = meta ? meta->samples : (gst_buffer_get_size (buffer) / bpf);
 
   /* no data, nothing to clip */
   if (!size)
     return buffer;
 
@@ -109,11 +113,11 @@
   GST_DEBUG ("timestamp %" GST_TIME_FORMAT, GST_TIME_ARGS (timestamp));
   if (GST_BUFFER_DURATION_IS_VALID (buffer)) {
     duration = GST_BUFFER_DURATION (buffer);
   } else {
     change_duration = FALSE;
-    duration = gst_util_uint64_scale (size / bpf, GST_SECOND, rate);
+    duration = gst_util_uint64_scale (size, GST_SECOND, rate);
   }
 
   if (GST_BUFFER_OFFSET_IS_VALID (buffer)) {
     offset = GST_BUFFER_OFFSET (buffer);
   } else {
@@ -123,11 +127,11 @@
 
   if (GST_BUFFER_OFFSET_END_IS_VALID (buffer)) {
     offset_end = GST_BUFFER_OFFSET_END (buffer);
   } else {
     change_offset_end = FALSE;
-    offset_end = offset + size / bpf;
+    offset_end = offset + size;
   }
 
   if (segment->format == GST_FORMAT_TIME) {
     /* Handle clipping for GST_FORMAT_TIME */
 
@@ -147,23 +151,23 @@
           duration -= diff;
 
         diff = gst_util_uint64_scale (diff, rate, GST_SECOND);
         if (change_offset)
           offset += diff;
-        trim += diff * bpf;
-        size -= diff * bpf;
+        trim += diff;
+        size -= diff;
       }
 
       diff = stop - cstop;
       if (diff > 0) {
         /* duration is always valid if stop is valid */
         duration -= diff;
 
         diff = gst_util_uint64_scale (diff, rate, GST_SECOND);
         if (change_offset_end)
           offset_end -= diff;
-        size -= diff * bpf;
+        size -= diff;
       }
     } else {
       gst_buffer_unref (buffer);
       return NULL;
     }
@@ -186,22 +190,22 @@
         timestamp = gst_util_uint64_scale (cstart, GST_SECOND, rate);
 
         if (change_duration)
           duration -= gst_util_uint64_scale (diff, GST_SECOND, rate);
 
-        trim += diff * bpf;
-        size -= diff * bpf;
+        trim += diff;
+        size -= diff;
       }
 
       diff = stop - cstop;
       if (diff > 0) {
         offset_end = cstop;
 
         if (change_duration)
           duration -= gst_util_uint64_scale (diff, GST_SECOND, rate);
 
-        size -= diff * bpf;
+        size -= diff;
       }
     } else {
       gst_buffer_unref (buffer);
       return NULL;
     }
@@ -217,26 +221,92 @@
     if (GST_BUFFER_DURATION (ret) != duration) {
       ret = gst_buffer_make_writable (ret);
       GST_BUFFER_DURATION (ret) = duration;
     }
   } else {
-    /* Get a writable buffer and apply all changes */
+    /* cut out all the samples that are no longer relevant */
     GST_DEBUG ("trim %" G_GSIZE_FORMAT " size %" G_GSIZE_FORMAT, trim, size);
-    ret = gst_buffer_copy_region (buffer, GST_BUFFER_COPY_ALL, trim, size);
-    gst_buffer_unref (buffer);
+    ret = gst_audio_buffer_truncate (buffer, bpf, trim, size);
 
     GST_DEBUG ("timestamp %" GST_TIME_FORMAT, GST_TIME_ARGS (timestamp));
     if (ret) {
-    GST_BUFFER_TIMESTAMP (ret) = timestamp;
+      GST_BUFFER_TIMESTAMP (ret) = timestamp;
 
-    if (change_duration)
-      GST_BUFFER_DURATION (ret) = duration;
-    if (change_offset)
-      GST_BUFFER_OFFSET (ret) = offset;
-    if (change_offset_end)
-      GST_BUFFER_OFFSET_END (ret) = offset_end;
+      if (change_duration)
+        GST_BUFFER_DURATION (ret) = duration;
+      if (change_offset)
+        GST_BUFFER_OFFSET (ret) = offset;
+      if (change_offset_end)
+        GST_BUFFER_OFFSET_END (ret) = offset_end;
     } else {
-      GST_ERROR ("copy_region failed");
+      GST_ERROR ("gst_audio_buffer_truncate failed");
+    }
   }
+  return ret;
+}
+
+/**
+ * gst_audio_buffer_truncate:
+ * @buffer: (transfer full): The buffer to truncate.
+ * @bpf: size of one audio frame in bytes. This is the size of one sample *
+ * number of channels.
+ * @trim: the number of samples to remove from the beginning of the buffer
+ * @samples: the final number of samples that should exist in this buffer or -1
+ * to use all the remaining samples if you are only removing samples from the
+ * beginning.
+ *
+ * Truncate the buffer to finally have @samples number of samples, removing
+ * the necessary amount of samples from the end and @trim number of samples
+ * from the beginning.
+ *
+ * After calling this function the caller does not own a reference to
+ * @buffer anymore.
+ *
+ * Returns: (transfer full): the truncated buffer or %NULL if the arguments
+ *   were invalid
+ *
+ * Since: 1.16
+ */
+GstBuffer *
+gst_audio_buffer_truncate (GstBuffer * buffer, gint bpf, gsize trim,
+    gsize samples)
+{
+  GstAudioMeta *meta = NULL;
+  GstBuffer *ret = NULL;
+  gsize orig_samples;
+  gint i;
+
+  g_return_val_if_fail (GST_IS_BUFFER (buffer), NULL);
+
+  meta = gst_buffer_get_audio_meta (buffer);
+  orig_samples = meta ? meta->samples : gst_buffer_get_size (buffer) / bpf;
+
+  g_return_val_if_fail (trim < orig_samples, NULL);
+  g_return_val_if_fail (samples == -1 || trim + samples <= orig_samples, NULL);
+
+  if (samples == -1)
+    samples = orig_samples - trim;
+
+  /* nothing to truncate */
+  if (samples == orig_samples)
+    return buffer;
+
+  if (!meta || meta->info.layout == GST_AUDIO_LAYOUT_INTERLEAVED) {
+    /* interleaved */
+    ret = gst_buffer_copy_region (buffer, GST_BUFFER_COPY_ALL, trim * bpf,
+        samples * bpf);
+    gst_buffer_unref (buffer);
+
+    if ((meta = gst_buffer_get_audio_meta (ret)))
+      meta->samples = samples;
+  } else {
+    /* non-interleaved */
+    ret = gst_buffer_make_writable (buffer);
+    meta = gst_buffer_get_audio_meta (buffer);
+    meta->samples = samples;
+    for (i = 0; i < meta->info.channels; i++) {
+      meta->offsets[i] += trim * bpf / meta->info.channels;
+    }
   }
+
   return ret;
 }
