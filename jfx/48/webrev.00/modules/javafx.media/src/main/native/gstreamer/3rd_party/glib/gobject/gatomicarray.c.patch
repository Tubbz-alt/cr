diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gatomicarray.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gatomicarray.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gatomicarray.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gatomicarray.c
@@ -21,11 +21,11 @@
 
 #include "gatomicarray.h"
 
 /* A GAtomicArray is a growable, mutable array of data
  * generally of the form of a header of a specific size and
- * then a array of items of a fixed size.
+ * then an array of items of a fixed size.
  *
  * It is possible to do lock-less read transactions from the
  * array without any protection against other reads or writes,
  * but such read operation must be aware that the data in the
  * atomic array can change at any time during the transaction,
@@ -62,17 +62,17 @@
   gsize real_size;
 
   if (reuse)
     {
       for (free = freelist, prev = &freelist; free != NULL; prev = &free->next, free = free->next)
-    {
-      if (G_ATOMIC_ARRAY_DATA_SIZE (free) == size)
-        {
-          *prev = free->next;
-          return (gpointer)free;
-        }
-    }
+  {
+    if (G_ATOMIC_ARRAY_DATA_SIZE (free) == size)
+      {
+        *prev = free->next;
+        return (gpointer)free;
+      }
+  }
     }
 
   real_size = sizeof (gsize) + MAX (size, sizeof (FreeListNode));
   mem = g_slice_alloc (real_size);
 #ifdef GSTREAMER_LITE
@@ -118,12 +118,12 @@
  * we then re-grow we may reuse an old pointer
  * value and confuse the transaction check.
  */
 gpointer
 _g_atomic_array_copy (GAtomicArray *array,
-              gsize header_size,
-              gsize additional_element_size)
+          gsize header_size,
+          gsize additional_element_size)
 {
   guint8 *new, *old;
   gsize old_size, new_size;
 
   G_LOCK (array);
@@ -131,12 +131,12 @@
   if (old)
     {
       old_size = G_ATOMIC_ARRAY_DATA_SIZE (old);
       new_size = old_size + additional_element_size;
       /* Don't reuse if copying to same size, as this may end
-     up reusing the same pointer for the same array thus
-     confusing the transaction check */
+   up reusing the same pointer for the same array thus
+   confusing the transaction check */
       new = freelist_alloc (new_size, additional_element_size != 0);
       memcpy (new, old, old_size);
     }
   else if (additional_element_size != 0)
     {
@@ -153,11 +153,11 @@
  * freeing the old data (for reuse). The new data may
  * not be smaller than the current data.
  */
 void
 _g_atomic_array_update (GAtomicArray *array,
-            gpointer new_data)
+      gpointer new_data)
 {
   guint8 *old;
 
   G_LOCK (array);
   old = g_atomic_pointer_get (&array->data);
