diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gquark.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gquark.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gquark.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gquark.c
@@ -124,10 +124,13 @@
  * %NULL or it has no associated #GQuark.
  *
  * If you want the GQuark to be created if it doesn't already exist,
  * use g_quark_from_string() or g_quark_from_static_string().
  *
+ * This function must not be used before library constructors have finished
+ * running.
+ *
  * Returns: the #GQuark associated with the string, or 0 if @string is
  *     %NULL or there is no #GQuark associated with it
  */
 GQuark
 g_quark_try_string (const gchar *string)
@@ -136,11 +139,11 @@
 
   if (string == NULL)
     return 0;
 
   G_LOCK (quark_global);
-    quark = GPOINTER_TO_UINT (g_hash_table_lookup (quark_ht, string));
+  quark = GPOINTER_TO_UINT (g_hash_table_lookup (quark_ht, string));
   G_UNLOCK (quark_global);
 
   return quark;
 }
 
@@ -177,11 +180,11 @@
 quark_from_string (const gchar *string,
                    gboolean     duplicate)
 {
   GQuark quark = 0;
 
-    quark = GPOINTER_TO_UINT (g_hash_table_lookup (quark_ht, string));
+  quark = GPOINTER_TO_UINT (g_hash_table_lookup (quark_ht, string));
 
   if (!quark)
     {
       quark = quark_new (duplicate ? quark_strdup (string) : (gchar *)string);
       TRACE(GLIB_QUARK_NEW(string, quark));
@@ -212,10 +215,14 @@
  *
  * Gets the #GQuark identifying the given string. If the string does
  * not currently have an associated #GQuark, a new #GQuark is created,
  * using a copy of the string.
  *
+ * This function must not be used before library constructors have finished
+ * running. In particular, this means it cannot be used to initialize global
+ * variables in C++.
+ *
  * Returns: the #GQuark identifying the string, or 0 if @string is %NULL
  */
 GQuark
 g_quark_from_string (const gchar *string)
 {
@@ -237,10 +244,14 @@
  * with statically allocated strings in the main program, but not with
  * statically allocated memory in dynamically loaded modules, if you
  * expect to ever unload the module again (e.g. do not use this
  * function in GTK+ theme engines).
  *
+ * This function must not be used before library constructors have finished
+ * running. In particular, this means it cannot be used to initialize global
+ * variables in C++.
+ *
  * Returns: the #GQuark identifying the string, or 0 if @string is %NULL
  */
 GQuark
 g_quark_from_static_string (const gchar *string)
 {
@@ -258,11 +269,11 @@
 const gchar *
 g_quark_to_string (GQuark quark)
 {
   gchar* result = NULL;
   gchar **strings;
-  gint seq_id;
+  guint seq_id;
 
   seq_id = g_atomic_int_get (&quark_seq_id);
   strings = g_atomic_pointer_get (&quarks);
 
   if (quark < seq_id)
@@ -323,10 +334,14 @@
  *
  * Returns a canonical representation for @string. Interned strings
  * can be compared for equality by comparing the pointers, instead of
  * using strcmp().
  *
+ * This function must not be used before library constructors have finished
+ * running. In particular, this means it cannot be used to initialize global
+ * variables in C++.
+ *
  * Returns: a canonical representation for the string
  *
  * Since: 2.10
  */
 const gchar *
@@ -342,10 +357,14 @@
  * Returns a canonical representation for @string. Interned strings
  * can be compared for equality by comparing the pointers, instead of
  * using strcmp(). g_intern_static_string() does not copy the string,
  * therefore @string must not be freed or modified.
  *
+ * This function must not be used before library constructors have finished
+ * running. In particular, this means it cannot be used to initialize global
+ * variables in C++.
+ *
  * Returns: a canonical representation for the string
  *
  * Since: 2.10
  */
 const gchar *
