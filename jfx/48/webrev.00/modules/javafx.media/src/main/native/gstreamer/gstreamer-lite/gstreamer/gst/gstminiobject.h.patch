diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstminiobject.h b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstminiobject.h
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstminiobject.h
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstminiobject.h
@@ -124,11 +124,11 @@
  * gst_mini_object_lock() and gst_mini_object_unlock().
  * @GST_MINI_OBJECT_FLAG_LOCK_READONLY: the object is permanently locked in
  * READONLY mode. Only read locks can be performed on the object.
  * @GST_MINI_OBJECT_FLAG_MAY_BE_LEAKED: the object is expected to stay alive
  * even after gst_deinit() has been called and so should be ignored by leak
- * detection tools. (Since 1.10)
+ * detection tools. (Since: 1.10)
  * @GST_MINI_OBJECT_FLAG_LAST: first flag that can be used by subclasses.
  *
  * Flags for the mini object
  */
 typedef enum
@@ -211,13 +211,13 @@
   GstMiniObjectCopyFunction copy;
   GstMiniObjectDisposeFunction dispose;
   GstMiniObjectFreeFunction free;
 
   /* < private > */
-  /* Used to keep track of weak ref notifies and qdata */
-  guint n_qdata;
-  gpointer qdata;
+  /* Used to keep track of parents, weak ref notifies and qdata */
+  guint priv_uint;
+  gpointer priv_pointer;
 };
 
 GST_API
 void            gst_mini_object_init (GstMiniObject *mini_object,
                                       guint flags, GType type,
@@ -227,23 +227,27 @@
 
 
 /* refcounting */
 
 GST_API
-GstMiniObject * gst_mini_object_ref     (GstMiniObject *mini_object);
+GstMiniObject * gst_mini_object_ref   (GstMiniObject *mini_object);
 
 GST_API
-void            gst_mini_object_unref       (GstMiniObject *mini_object);
+void            gst_mini_object_unref   (GstMiniObject *mini_object);
+
+GST_API
+void        gst_clear_mini_object (GstMiniObject **object_ptr);
+#define     gst_clear_mini_object(object_ptr) g_clear_pointer ((object_ptr), gst_mini_object_unref)
 
 GST_API
 void            gst_mini_object_weak_ref        (GstMiniObject *object,
-                             GstMiniObjectNotify notify,
-                             gpointer data);
+                   GstMiniObjectNotify notify,
+                   gpointer data);
 GST_API
 void            gst_mini_object_weak_unref  (GstMiniObject *object,
-                             GstMiniObjectNotify notify,
-                             gpointer data);
+                   GstMiniObjectNotify notify,
+                   gpointer data);
 
 /* locking */
 
 GST_API
 gboolean        gst_mini_object_lock            (GstMiniObject *object, GstLockFlags flags);
@@ -253,16 +257,16 @@
 
 GST_API
 gboolean        gst_mini_object_is_writable     (const GstMiniObject *mini_object);
 
 GST_API
-GstMiniObject * gst_mini_object_make_writable   (GstMiniObject *mini_object) G_GNUC_WARN_UNUSED_RESULT;
+GstMiniObject * gst_mini_object_make_writable (GstMiniObject *mini_object) G_GNUC_WARN_UNUSED_RESULT;
 
 /* copy */
 
 GST_API
-GstMiniObject * gst_mini_object_copy        (const GstMiniObject *mini_object) G_GNUC_MALLOC G_GNUC_WARN_UNUSED_RESULT;
+GstMiniObject * gst_mini_object_copy    (const GstMiniObject *mini_object) G_GNUC_MALLOC G_GNUC_WARN_UNUSED_RESULT;
 
 
 GST_API
 void            gst_mini_object_set_qdata       (GstMiniObject *object, GQuark quark,
                                                  gpointer data, GDestroyNotify destroy);
@@ -270,10 +274,15 @@
 gpointer        gst_mini_object_get_qdata       (GstMiniObject *object, GQuark quark);
 
 GST_API
 gpointer        gst_mini_object_steal_qdata     (GstMiniObject *object, GQuark quark);
 
+GST_API
+void            gst_mini_object_add_parent      (GstMiniObject *object, GstMiniObject *parent);
+GST_API
+void            gst_mini_object_remove_parent   (GstMiniObject *object, GstMiniObject *parent);
+
 GST_API
 gboolean        gst_mini_object_replace         (GstMiniObject **olddata, GstMiniObject *newdata);
 
 GST_API
 gboolean        gst_mini_object_take            (GstMiniObject **olddata, GstMiniObject *newdata);
