diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstclock.h b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstclock.h
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstclock.h
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstclock.h
@@ -211,11 +211,11 @@
   (ts).tv_nsec = (glong) (((t) - (ts).tv_sec * GST_SECOND) / GST_NSECOND);        \
 } G_STMT_END
 
 /* timestamp debugging macros */
 /**
- * GST_TIME_FORMAT:
+ * GST_TIME_FORMAT: (skip):
  *
  * A string that can be used in printf-like format strings to display a
  * #GstClockTime value in h:m:s format.  Use GST_TIME_ARGS() to construct
  * the matching arguments.
  *
@@ -224,11 +224,11 @@
  * printf("%" GST_TIME_FORMAT "\n", GST_TIME_ARGS(ts));
  * ]|
  */
 #define GST_TIME_FORMAT "u:%02u:%02u.%09u"
 /**
- * GST_TIME_ARGS:
+ * GST_TIME_ARGS: (skip):
  * @t: a #GstClockTime
  *
  * Format @t for the #GST_TIME_FORMAT format string. Note: @t will be
  * evaluated more than once.
  */
@@ -240,11 +240,11 @@
         GST_CLOCK_TIME_IS_VALID (t) ? \
         (guint) ((((GstClockTime)(t)) / GST_SECOND) % 60) : 99, \
         GST_CLOCK_TIME_IS_VALID (t) ? \
         (guint) (((GstClockTime)(t)) % GST_SECOND) : 999999999
 /**
- * GST_STIME_FORMAT:
+ * GST_STIME_FORMAT: (skip):
  *
  * A string that can be used in printf-like format strings to display a signed
  * #GstClockTimeDiff or #gint64 value in h:m:s format.  Use GST_TIME_ARGS() to
  * construct the matching arguments.
  *
@@ -255,27 +255,27 @@
  *
  * Since: 1.6
  */
 #define GST_STIME_FORMAT "c%" GST_TIME_FORMAT
 /**
- * GST_STIME_ARGS:
+ * GST_STIME_ARGS: (skip):
  * @t: a #GstClockTimeDiff or #gint64
  *
  * Format @t for the #GST_STIME_FORMAT format string. Note: @t will be
  * evaluated more than once.
  *
  * Since: 1.6
  */
-#define GST_STIME_ARGS(t)                       \
-  ((t) == GST_CLOCK_STIME_NONE || (t) >= 0) ? '+' : '-',        \
-    GST_CLOCK_STIME_IS_VALID (t) ?                  \
-    (guint) (((GstClockTime)(ABS(t))) / (GST_SECOND * 60 * 60)) : 99,   \
-    GST_CLOCK_STIME_IS_VALID (t) ?                  \
+#define GST_STIME_ARGS(t)           \
+  ((t) == GST_CLOCK_STIME_NONE || (t) >= 0) ? '+' : '-',    \
+    GST_CLOCK_STIME_IS_VALID (t) ?          \
+    (guint) (((GstClockTime)(ABS(t))) / (GST_SECOND * 60 * 60)) : 99, \
+    GST_CLOCK_STIME_IS_VALID (t) ?          \
     (guint) ((((GstClockTime)(ABS(t))) / (GST_SECOND * 60)) % 60) : 99, \
-    GST_CLOCK_STIME_IS_VALID (t) ?                  \
-    (guint) ((((GstClockTime)(ABS(t))) / GST_SECOND) % 60) : 99,    \
-    GST_CLOCK_STIME_IS_VALID (t) ?                  \
+    GST_CLOCK_STIME_IS_VALID (t) ?          \
+    (guint) ((((GstClockTime)(ABS(t))) / GST_SECOND) % 60) : 99,  \
+    GST_CLOCK_STIME_IS_VALID (t) ?          \
     (guint) (((GstClockTime)(ABS(t))) % GST_SECOND) : 999999999
 
 typedef struct _GstClockEntry   GstClockEntry;
 typedef struct _GstClock        GstClock;
 typedef struct _GstClockClass   GstClockClass;
@@ -337,17 +337,22 @@
  * @entry: the entry to cast
  *
  * Cast to a clock entry
  */
 #define GST_CLOCK_ENTRY(entry)          ((GstClockEntry *)(entry))
+
+#ifndef GST_DISABLE_DEPRECATED
 /**
  * GST_CLOCK_ENTRY_CLOCK:
  * @entry: the entry to query
  *
  * Get the owner clock of the entry
+ *
+ * Deprecated: Use gst_clock_id_get_clock() instead.
  */
 #define GST_CLOCK_ENTRY_CLOCK(entry)    ((entry)->clock)
+#endif
 /**
  * GST_CLOCK_ENTRY_TYPE:
  * @entry: the entry to query
  *
  * Get the type of the clock entry
@@ -385,11 +390,17 @@
  * not be extended or allocated using a custom allocator.
  */
 struct _GstClockEntry {
   gint                  refcount;
   /*< protected >*/
+#ifndef GST_REMOVE_DEPRECATED
+#ifndef GST_DISABLE_DEPRECATED
   GstClock              *clock;
+#else
+  gpointer               _clock;
+#endif
+#endif
   GstClockEntryType      type;
   GstClockTime           time;
   GstClockTime           interval;
   GstClockReturn         status;
   GstClockCallback       func;
@@ -411,11 +422,11 @@
  * @GST_CLOCK_FLAG_CAN_DO_PERIODIC_SYNC: clock can do sync periodic timeout requests
  * @GST_CLOCK_FLAG_CAN_DO_PERIODIC_ASYNC: clock can do async periodic timeout callbacks
  * @GST_CLOCK_FLAG_CAN_SET_RESOLUTION: clock's resolution can be changed
  * @GST_CLOCK_FLAG_CAN_SET_MASTER: clock can be slaved to a master clock
  * @GST_CLOCK_FLAG_NEEDS_STARTUP_SYNC: clock needs to be synced before it can be used
- *     (Since 1.6)
+ *     (Since: 1.6)
  * @GST_CLOCK_FLAG_LAST: subclasses can add additional flags starting from this flag
  *
  * The capabilities of this clock
  */
 typedef enum {
@@ -598,10 +609,16 @@
 /* operations on IDs */
 
 GST_API
 gint                    gst_clock_id_compare_func       (gconstpointer id1, gconstpointer id2);
 
+GST_API
+GstClock *              gst_clock_id_get_clock          (GstClockID id);
+
+GST_API
+gboolean                gst_clock_id_uses_clock         (GstClockID id, GstClock * clock);
+
 GST_API
 GstClockTime            gst_clock_id_get_time           (GstClockID id);
 
 GST_API
 GstClockReturn          gst_clock_id_wait               (GstClockID id,
