diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst/volume/gstvolume.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst/volume/gstvolume.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst/volume/gstvolume.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst/volume/gstvolume.c
@@ -181,52 +181,52 @@
     return FALSE;
 
   switch (format) {
     case GST_AUDIO_FORMAT_S32:
       /* only clamp if the gain is greater than 1.0 */
-          if (self->current_vol_i32 > VOLUME_UNITY_INT32) {
-            self->process = volume_process_int32_clamp;
-          } else {
-            self->process = volume_process_int32;
-          }
-          self->process_controlled = volume_process_controlled_int32_clamp;
-          break;
+      if (self->current_vol_i32 > VOLUME_UNITY_INT32) {
+        self->process = volume_process_int32_clamp;
+      } else {
+        self->process = volume_process_int32;
+      }
+      self->process_controlled = volume_process_controlled_int32_clamp;
+      break;
     case GST_AUDIO_FORMAT_S24:
       /* only clamp if the gain is greater than 1.0 */
-          if (self->current_vol_i24 > VOLUME_UNITY_INT24) {
-            self->process = volume_process_int24_clamp;
-          } else {
-            self->process = volume_process_int24;
-          }
-          self->process_controlled = volume_process_controlled_int24_clamp;
-          break;
+      if (self->current_vol_i24 > VOLUME_UNITY_INT24) {
+        self->process = volume_process_int24_clamp;
+      } else {
+        self->process = volume_process_int24;
+      }
+      self->process_controlled = volume_process_controlled_int24_clamp;
+      break;
     case GST_AUDIO_FORMAT_S16:
       /* only clamp if the gain is greater than 1.0 */
-          if (self->current_vol_i16 > VOLUME_UNITY_INT16) {
-            self->process = volume_process_int16_clamp;
-          } else {
-            self->process = volume_process_int16;
-          }
-          self->process_controlled = volume_process_controlled_int16_clamp;
-          break;
+      if (self->current_vol_i16 > VOLUME_UNITY_INT16) {
+        self->process = volume_process_int16_clamp;
+      } else {
+        self->process = volume_process_int16;
+      }
+      self->process_controlled = volume_process_controlled_int16_clamp;
+      break;
     case GST_AUDIO_FORMAT_S8:
       /* only clamp if the gain is greater than 1.0 */
       if (self->current_vol_i8 > VOLUME_UNITY_INT8) {
-            self->process = volume_process_int8_clamp;
-          } else {
-            self->process = volume_process_int8;
-          }
-          self->process_controlled = volume_process_controlled_int8_clamp;
-          break;
+        self->process = volume_process_int8_clamp;
+      } else {
+        self->process = volume_process_int8;
+      }
+      self->process_controlled = volume_process_controlled_int8_clamp;
+      break;
     case GST_AUDIO_FORMAT_F32:
-          self->process = volume_process_float;
-          self->process_controlled = volume_process_controlled_float;
-          break;
+      self->process = volume_process_float;
+      self->process_controlled = volume_process_controlled_float;
+      break;
     case GST_AUDIO_FORMAT_F64:
-          self->process = volume_process_double;
-          self->process_controlled = volume_process_controlled_double;
-          break;
+      self->process = volume_process_double;
+      self->process_controlled = volume_process_controlled_double;
+      break;
     default:
       break;
   }
 
   return (self->process != NULL);
@@ -749,23 +749,23 @@
     if (mute_cb || (volume_cb && !self->current_mute)) {
       gint rate = GST_AUDIO_INFO_RATE (&filter->info);
       gint width = GST_AUDIO_FORMAT_INFO_WIDTH (filter->info.finfo) / 8;
       gint channels = GST_AUDIO_INFO_CHANNELS (&filter->info);
       guint nsamples = map.size / (width * channels);
-    GstClockTime interval = gst_util_uint64_scale_int (1, GST_SECOND, rate);
+      GstClockTime interval = gst_util_uint64_scale_int (1, GST_SECOND, rate);
       gboolean have_mutes = FALSE;
       gboolean have_volumes = FALSE;
 
       if (self->mutes_count < nsamples && mute_cb) {
-      self->mutes = g_realloc (self->mutes, sizeof (gboolean) * nsamples);
-      self->mutes_count = nsamples;
-    }
+        self->mutes = g_realloc (self->mutes, sizeof (gboolean) * nsamples);
+        self->mutes_count = nsamples;
+      }
 
-    if (self->volumes_count < nsamples) {
-      self->volumes = g_realloc (self->volumes, sizeof (gdouble) * nsamples);
-      self->volumes_count = nsamples;
-    }
+      if (self->volumes_count < nsamples) {
+        self->volumes = g_realloc (self->volumes, sizeof (gdouble) * nsamples);
+        self->volumes_count = nsamples;
+      }
 
       if (volume_cb && self->volumes) {
         have_volumes =
             gst_control_binding_get_value_array (volume_cb, ts, interval,
             nsamples, (gpointer) self->volumes);
@@ -780,24 +780,24 @@
             nsamples, (gpointer) self->mutes);
         gst_object_replace ((GstObject **) & mute_cb, NULL);
       }
       if (have_mutes) {
         volume_orc_prepare_volumes (self->volumes, self->mutes, nsamples);
-    } else {
-      g_free (self->mutes);
-      self->mutes = NULL;
-      self->mutes_count = 0;
-    }
+      } else {
+        g_free (self->mutes);
+        self->mutes = NULL;
+        self->mutes_count = 0;
+      }
 
       self->process_controlled (self, map.data, self->volumes, channels,
           map.size);
 
       goto done;
     } else if (volume_cb) {
       gst_object_unref (volume_cb);
     }
-    }
+  }
 
   if (self->current_volume == 0.0 || self->current_mute) {
     orc_memset (map.data, 0, map.size);
     GST_BUFFER_FLAG_SET (outbuf, GST_BUFFER_FLAG_GAP);
   } else if (self->current_volume != 1.0) {
