diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gbase64.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gbase64.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gbase64.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gbase64.c
@@ -98,16 +98,16 @@
                       gint         *save)
 {
   char *outptr;
   const guchar *inptr;
 
-  g_return_val_if_fail (in != NULL, 0);
+  g_return_val_if_fail (in != NULL || len == 0, 0);
   g_return_val_if_fail (out != NULL, 0);
   g_return_val_if_fail (state != NULL, 0);
   g_return_val_if_fail (save != NULL, 0);
 
-  if (len <= 0)
+  if (len == 0)
     return 0;
 
   inptr = in;
   outptr = out;
 
@@ -158,22 +158,26 @@
       ((char *)save)[0] = 0;
       len = 2 - (inptr - inend);
       *state = already;
     }
 
-  if (len>0)
+  g_assert (len == 0 || len == 1 || len == 2);
+
     {
       char *saveout;
 
       /* points to the slot for the next char to save */
       saveout = & (((char *)save)[1]) + ((char *)save)[0];
 
       /* len can only be 0 1 or 2 */
       switch(len)
         {
-        case 2: *saveout++ = *inptr++;
-        case 1: *saveout++ = *inptr++;
+        case 2:
+          *saveout++ = *inptr++;
+          G_GNUC_FALLTHROUGH;
+        case 1:
+          *saveout++ = *inptr++;
         }
       ((char *)save)[0] += len;
     }
 
   return outptr - out;
@@ -239,11 +243,11 @@
   return outptr - out;
 }
 
 /**
  * g_base64_encode:
- * @data: (array length=len) (element-type guint8): the binary data to encode
+ * @data: (array length=len) (element-type guint8) (nullable): the binary data to encode
  * @len: the length of @data
  *
  * Encode a sequence of binary data into its Base-64 stringified
  * representation.
  *
@@ -264,13 +268,11 @@
   g_return_val_if_fail (data != NULL || len == 0, NULL);
 
   /* We can use a smaller limit here, since we know the saved state is 0,
      +1 is needed for trailing \0, also check for unlikely integer overflow */
 #ifndef GSTREAMER_LITE
-  if (len >= ((G_MAXSIZE - 1) / 4 - 1) * 3)
-    g_error("%s: input too large for Base64 encoding (%"G_GSIZE_FORMAT" chars)",
-        G_STRLOC, len);
+  g_return_val_if_fail (len < ((G_MAXSIZE - 1) / 4 - 1) * 3, NULL);
 #else // GSTREAMER_LITE
   if (len >= ((G_MAXSIZE - 1) / 4 - 1) * 3)
   {
     g_error("%s: input too large for Base64 encoding (%"G_GSIZE_FORMAT" chars)", G_STRLOC, len);
     return NULL;
@@ -343,16 +345,16 @@
   guchar c, rank;
   guchar last[2];
   unsigned int v;
   int i;
 
-  g_return_val_if_fail (in != NULL, 0);
+  g_return_val_if_fail (in != NULL || len == 0, 0);
   g_return_val_if_fail (out != NULL, 0);
   g_return_val_if_fail (state != NULL, 0);
   g_return_val_if_fail (save != NULL, 0);
 
-  if (len <= 0)
+  if (len == 0)
     return 0;
 
   inend = (const guchar *)in+len;
   outptr = out;
 
@@ -399,11 +401,11 @@
   return outptr - out;
 }
 
 /**
  * g_base64_decode:
- * @text: zero-terminated string with base64 text to decode
+ * @text: (not nullable): zero-terminated string with base64 text to decode
  * @out_len: (out): The length of the decoded data is written here
  *
  * Decode a sequence of Base-64 encoded text into binary data.  Note
  * that the returned binary data is not necessarily zero-terminated,
  * so it should not be used as a character string.
