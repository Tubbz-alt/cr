diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstbufferlist.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstbufferlist.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstbufferlist.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstbufferlist.c
@@ -86,34 +86,47 @@
 
   len = list->n_buffers;
   copy = gst_buffer_list_new_sized (list->n_allocated);
 
   /* add and ref all buffers in the array */
-  for (i = 0; i < len; i++)
+  for (i = 0; i < len; i++) {
     copy->buffers[i] = gst_buffer_ref (list->buffers[i]);
+    gst_mini_object_add_parent (GST_MINI_OBJECT_CAST (copy->buffers[i]),
+        GST_MINI_OBJECT_CAST (copy));
+  }
 
   copy->n_buffers = len;
 
   return copy;
 }
 
 static void
 _gst_buffer_list_free (GstBufferList * list)
 {
   guint i, len;
+  gsize slice_size;
 
   GST_LOG ("free %p", list);
 
   /* unrefs all buffers too */
   len = list->n_buffers;
-  for (i = 0; i < len; i++)
+  for (i = 0; i < len; i++) {
+    gst_mini_object_remove_parent (GST_MINI_OBJECT_CAST (list->buffers[i]),
+        GST_MINI_OBJECT_CAST (list));
     gst_buffer_unref (list->buffers[i]);
+  }
 
   if (GST_BUFFER_LIST_IS_USING_DYNAMIC_ARRAY (list))
     g_free (list->buffers);
 
-  g_slice_free1 (list->slice_size, list);
+  slice_size = list->slice_size;
+
+#ifdef USE_POISONING
+  memset (list, 0xff, slice_size);
+#endif
+
+  g_slice_free1 (slice_size, list);
 }
 
 static void
 gst_buffer_list_init (GstBufferList * list, guint n_allocated, gsize slice_size)
 {
@@ -203,12 +216,15 @@
     guint length, gboolean unref_old)
 {
   guint i;
 
   if (unref_old) {
-    for (i = idx; i < idx + length; ++i)
+    for (i = idx; i < idx + length; ++i) {
+      gst_mini_object_remove_parent (GST_MINI_OBJECT_CAST (list->buffers[i]),
+          GST_MINI_OBJECT_CAST (list));
       gst_buffer_unref (list->buffers[i]);
+    }
   }
 
   if (idx + length != list->n_buffers) {
     memmove (&list->buffers[idx], &list->buffers[idx + length],
         (list->n_buffers - (idx + length)) * sizeof (void *));
@@ -236,29 +252,76 @@
 gst_buffer_list_foreach (GstBufferList * list, GstBufferListFunc func,
     gpointer user_data)
 {
   guint i, len;
   gboolean ret = TRUE;
+  gboolean list_was_writable, first_warning = TRUE;
 
   g_return_val_if_fail (GST_IS_BUFFER_LIST (list), FALSE);
   g_return_val_if_fail (func != NULL, FALSE);
 
+  list_was_writable = gst_buffer_list_is_writable (list);
+
   len = list->n_buffers;
   for (i = 0; i < len;) {
     GstBuffer *buf, *buf_ret;
+    gboolean was_writable;
 
     buf = buf_ret = list->buffers[i];
+
+    /* If the buffer is writable, we remove us as parent for now to
+     * allow the callback to destroy the buffer. If we get the buffer
+     * back, we add ourselves as parent again.
+     *
+     * Non-writable buffers just get another reference as they were not
+     * writable to begin with, and they would possibly become writable
+     * by removing ourselves as parent
+     */
+    was_writable = list_was_writable && gst_buffer_is_writable (buf);
+
+    if (was_writable)
+      gst_mini_object_remove_parent (GST_MINI_OBJECT_CAST (buf),
+          GST_MINI_OBJECT_CAST (list));
+    else
+      gst_buffer_ref (buf);
+
     ret = func (&buf_ret, i, user_data);
 
     /* Check if the function changed the buffer */
     if (buf != buf_ret) {
-      if (buf_ret == NULL) {
-        gst_buffer_list_remove_range_internal (list, i, 1, FALSE);
+      /* If the list was not writable but the callback was actually changing
+       * our buffer, then it wouldn't have been allowed to do so.
+       *
+       * Fortunately we still have a reference to the old buffer in that case
+       * and just not modify the list, unref the new buffer (if any) and warn
+       * about this */
+      if (!list_was_writable) {
+        if (first_warning) {
+          g_critical
+              ("gst_buffer_list_foreach: non-writable list %p was changed from callback",
+              list);
+          first_warning = FALSE;
+        }
+        if (buf_ret)
+          gst_buffer_unref (buf_ret);
+      } else if (buf_ret == NULL) {
+        gst_buffer_list_remove_range_internal (list, i, 1, !was_writable);
         --len;
       } else {
+        if (!was_writable)
+          gst_buffer_unref (buf);
+
         list->buffers[i] = buf_ret;
+        gst_mini_object_add_parent (GST_MINI_OBJECT_CAST (buf_ret),
+            GST_MINI_OBJECT_CAST (list));
       }
+    } else {
+      if (was_writable)
+        gst_mini_object_add_parent (GST_MINI_OBJECT_CAST (buf),
+            GST_MINI_OBJECT_CAST (list));
+      else
+        gst_buffer_unref (buf);
     }
 
     if (!ret)
       break;
 
@@ -309,18 +372,30 @@
  * Since: 1.14
  */
 GstBuffer *
 gst_buffer_list_get_writable (GstBufferList * list, guint idx)
 {
-  GstBuffer **p_buf;
+  GstBuffer *new_buf;
 
   g_return_val_if_fail (GST_IS_BUFFER_LIST (list), NULL);
   g_return_val_if_fail (gst_buffer_list_is_writable (list), NULL);
   g_return_val_if_fail (idx < list->n_buffers, NULL);
 
-  p_buf = &list->buffers[idx];
-  return (*p_buf = gst_buffer_make_writable (*p_buf));
+  /* We have to implement this manually here to correctly add/remove the
+   * parent */
+  if (gst_buffer_is_writable (list->buffers[idx]))
+    return list->buffers[idx];
+
+  gst_mini_object_remove_parent (GST_MINI_OBJECT_CAST (list->buffers[idx]),
+      GST_MINI_OBJECT_CAST (list));
+  new_buf = gst_buffer_copy (list->buffers[idx]);
+  gst_mini_object_add_parent (GST_MINI_OBJECT_CAST (new_buf),
+      GST_MINI_OBJECT_CAST (list));
+  gst_buffer_unref (list->buffers[idx]);
+  list->buffers[idx] = new_buf;
+
+  return new_buf;
 }
 
 /**
  * gst_buffer_list_add:
  * @l: a #GstBufferList
@@ -347,10 +422,12 @@
   g_return_if_fail (GST_IS_BUFFER_LIST (list));
   g_return_if_fail (buffer != NULL);
   g_return_if_fail (gst_buffer_list_is_writable (list));
 
   if (idx == -1 && list->n_buffers < list->n_allocated) {
+    gst_mini_object_add_parent (GST_MINI_OBJECT_CAST (buffer),
+        GST_MINI_OBJECT_CAST (list));
     list->buffers[list->n_buffers++] = buffer;
     return;
   }
 
   if (idx == -1 || idx > list->n_buffers)
@@ -365,11 +442,11 @@
       list->buffers = g_renew (GstBuffer *, list->buffers, want_alloc);
     } else {
       list->buffers = g_new0 (GstBuffer *, want_alloc);
       memcpy (list->buffers, &list->arr[0], list->n_buffers * sizeof (void *));
       GST_CAT_LOG (GST_CAT_PERFORMANCE, "exceeding pre-alloced array");
-}
+    }
 
     list->n_allocated = want_alloc;
   }
 
   if (idx < list->n_buffers) {
@@ -377,10 +454,12 @@
         (list->n_buffers - idx) * sizeof (void *));
   }
 
   ++list->n_buffers;
   list->buffers[idx] = buffer;
+  gst_mini_object_add_parent (GST_MINI_OBJECT_CAST (buffer),
+      GST_MINI_OBJECT_CAST (list));
 }
 
 /**
  * gst_buffer_list_remove:
  * @list: a #GstBufferList
@@ -397,11 +476,11 @@
   g_return_if_fail (idx < list->n_buffers);
   g_return_if_fail (idx + length <= list->n_buffers);
   g_return_if_fail (gst_buffer_list_is_writable (list));
 
   gst_buffer_list_remove_range_internal (list, idx, length, TRUE);
-  }
+}
 
 /**
  * gst_buffer_list_copy_deep:
  * @list: a #GstBufferList
  *
@@ -432,11 +511,11 @@
     } else {
       g_warning
           ("Failed to deep copy buffer %p while deep "
           "copying buffer list %p. Buffer list copy "
           "will be incomplete", old, list);
-}
+    }
   }
 
   return result;
 }
 
