diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gvariant.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gvariant.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gvariant.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gvariant.c
@@ -1,8 +1,8 @@
 /*
- * Copyright � 2007, 2008 Ryan Lortie
- * Copyright � 2010 Codethink Limited
+ * Copyright (C) 2007, 2008 Ryan Lortie
+ * Copyright (C) 2010 Codethink Limited
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 2.1 of the License, or (at your option) any later version.
@@ -224,11 +224,11 @@
  *
  * This means that in total, for our "a{sv}" example, 91 bytes of
  * type information would be allocated.
  *
  * The type information cache, additionally, uses a #GHashTable to
- * store and lookup the cached items and stores a pointer to this
+ * store and look up the cached items and stores a pointer to this
  * hash table in static storage.  The hash table is freed when there
  * are zero items in the type cache.
  *
  * Although these sizes may seem large it is important to remember
  * that a program will probably only have a very small number of
@@ -305,10 +305,15 @@
  * @size: the size of @data
  *
  * Constructs a new trusted #GVariant instance from the provided data.
  * This is used to implement g_variant_new_* for all the basic types.
  *
+ * Note: @data must be backed by memory that is aligned appropriately for the
+ * @type being loaded. Otherwise this function will internally create a copy of
+ * the memory (since GLib 2.60) or (in older versions) fail and exit the
+ * process.
+ *
  * Returns: a new floating #GVariant
  */
 static GVariant *
 g_variant_new_from_trusted (const GVariantType *type,
                             gconstpointer       data,
@@ -419,11 +424,11 @@
  *
  * Since: 2.24
  **/
 /**
  * g_variant_get_int16:
- * @value: a int16 #GVariant instance
+ * @value: an int16 #GVariant instance
  *
  * Returns the 16-bit signed integer value of @value.
  *
  * It is an error to call this function with a @value of any type
  * other than %G_VARIANT_TYPE_INT16.
@@ -469,11 +474,11 @@
  *
  * Since: 2.24
  **/
 /**
  * g_variant_get_int32:
- * @value: a int32 #GVariant instance
+ * @value: an int32 #GVariant instance
  *
  * Returns the 32-bit signed integer value of @value.
  *
  * It is an error to call this function with a @value of any type
  * other than %G_VARIANT_TYPE_INT32.
@@ -519,11 +524,11 @@
  *
  * Since: 2.24
  **/
 /**
  * g_variant_get_int64:
- * @value: a int64 #GVariant instance
+ * @value: an int64 #GVariant instance
  *
  * Returns the 64-bit signed integer value of @value.
  *
  * It is an error to call this function with a @value of any type
  * other than %G_VARIANT_TYPE_INT64.
@@ -935,11 +940,11 @@
 }
 
 /**
  * g_variant_lookup: (skip)
  * @dictionary: a dictionary #GVariant
- * @key: the key to lookup in the dictionary
+ * @key: the key to look up in the dictionary
  * @format_string: a GVariant format string
  * @...: the arguments to unpack the value into
  *
  * Looks up a value in a dictionary #GVariant.
  *
@@ -993,11 +998,11 @@
 }
 
 /**
  * g_variant_lookup_value:
  * @dictionary: a dictionary #GVariant
- * @key: the key to lookup in the dictionary
+ * @key: the key to look up in the dictionary
  * @expected_type: (nullable): a #GVariantType, or %NULL
  *
  * Looks up a value in a dictionary #GVariant.
  *
  * This function works with dictionaries of the type a{s*} (and equally
@@ -1006,11 +1011,11 @@
  *
  * In the event that @dictionary has the type a{sv}, the @expected_type
  * string specifies what type of value is expected to be inside of the
  * variant. If the value inside the variant has a different type then
  * %NULL is returned. In the event that @dictionary has a value type other
- * than v then @expected_type must directly match the key type and it is
+ * than v then @expected_type must directly match the value type and it is
  * used to unpack the value directly or an error occurs.
  *
  * In either case, if @key is not found in @dictionary, %NULL is returned.
  *
  * If the key is found and the value has the correct type, it is
@@ -1545,23 +1550,24 @@
 GVariant *
 g_variant_new_strv (const gchar * const *strv,
                     gssize               length)
 {
   GVariant **strings;
-  gsize i;
+  gsize i, length_unsigned;
 
   g_return_val_if_fail (length == 0 || strv != NULL, NULL);
 
   if (length < 0)
     length = g_strv_length ((gchar **) strv);
+  length_unsigned = length;
 
-  strings = g_new (GVariant *, length);
-  for (i = 0; i < length; i++)
+  strings = g_new (GVariant *, length_unsigned);
+  for (i = 0; i < length_unsigned; i++)
     strings[i] = g_variant_ref_sink (g_variant_new_string (strv[i]));
 
   return g_variant_new_from_children (G_VARIANT_TYPE_STRING_ARRAY,
-                                      strings, length, TRUE);
+                                      strings, length_unsigned, TRUE);
 }
 
 /**
  * g_variant_get_strv:
  * @value: an array of strings #GVariant
@@ -1681,23 +1687,24 @@
 GVariant *
 g_variant_new_objv (const gchar * const *strv,
                     gssize               length)
 {
   GVariant **strings;
-  gsize i;
+  gsize i, length_unsigned;
 
   g_return_val_if_fail (length == 0 || strv != NULL, NULL);
 
   if (length < 0)
     length = g_strv_length ((gchar **) strv);
+  length_unsigned = length;
 
-  strings = g_new (GVariant *, length);
-  for (i = 0; i < length; i++)
+  strings = g_new (GVariant *, length_unsigned);
+  for (i = 0; i < length_unsigned; i++)
     strings[i] = g_variant_ref_sink (g_variant_new_object_path (strv[i]));
 
   return g_variant_new_from_children (G_VARIANT_TYPE_OBJECT_PATH_ARRAY,
-                                      strings, length, TRUE);
+                                      strings, length_unsigned, TRUE);
 }
 
 /**
  * g_variant_get_objv:
  * @value: an array of object paths #GVariant
@@ -1921,23 +1928,24 @@
 GVariant *
 g_variant_new_bytestring_array (const gchar * const *strv,
                                 gssize               length)
 {
   GVariant **strings;
-  gsize i;
+  gsize i, length_unsigned;
 
   g_return_val_if_fail (length == 0 || strv != NULL, NULL);
 
   if (length < 0)
     length = g_strv_length ((gchar **) strv);
+  length_unsigned = length;
 
-  strings = g_new (GVariant *, length);
-  for (i = 0; i < length; i++)
+  strings = g_new (GVariant *, length_unsigned);
+  for (i = 0; i < length_unsigned; i++)
     strings[i] = g_variant_ref_sink (g_variant_new_bytestring (strv[i]));
 
   return g_variant_new_from_children (G_VARIANT_TYPE_BYTESTRING_ARRAY,
-                                      strings, length, TRUE);
+                                      strings, length_unsigned, TRUE);
 }
 
 /**
  * g_variant_get_bytestring_array:
  * @value: an array of array of bytes #GVariant ('aay')
@@ -2277,11 +2285,11 @@
             }
 
           else
             {
               /* fall through and handle normally... */
-        }
+            }
         }
 
       /*
        * if the first two characters are 'a{' then it's an array of
        * dictionary entries (ie: a dictionary) so we print that
@@ -3955,11 +3963,11 @@
 }
 
 /**
  * g_variant_dict_lookup:
  * @dict: a #GVariantDict
- * @key: the key to lookup in the dictionary
+ * @key: the key to look up in the dictionary
  * @format_string: a GVariant format string
  * @...: the arguments to unpack the value into
  *
  * Looks up a value in a #GVariantDict.
  *
@@ -4002,11 +4010,11 @@
 }
 
 /**
  * g_variant_dict_lookup_value:
  * @dict: a #GVariantDict
- * @key: the key to lookup in the dictionary
+ * @key: the key to look up in the dictionary
  * @expected_type: (nullable): a #GVariantType, or %NULL
  *
  * Looks up a value in a #GVariantDict.
  *
  * If @key is not found in @dictionary, %NULL is returned.
@@ -4042,11 +4050,11 @@
 }
 
 /**
  * g_variant_dict_contains:
  * @dict: a #GVariantDict
- * @key: the key to lookup in the dictionary
+ * @key: the key to look up in the dictionary
  *
  * Checks if @key exists in @dict.
  *
  * Returns: %TRUE if @key is in @dict
  *
@@ -4331,11 +4339,11 @@
       else
         {
           if (c == '@')
             c = next_char ();
 
-          /* ISO/IEC 9899:1999 (C99) �7.21.5.2:
+          /* ISO/IEC 9899:1999 (C99) 7.21.5.2:
            *    The terminating null character is considered to be
            *    part of the string.
            */
           if (c != '\0' && strchr ("bynqiuxthdsog?", c) == NULL)
             return FALSE;
@@ -4683,11 +4691,11 @@
       if (g_str_has_suffix (str, "y"))
         {
           if (str[2] != 'a') /* '^a&ay', '^ay' */
             g_free (ptr);
           else if (str[1] == 'a') /* '^aay' */
-        g_strfreev (ptr);
+            g_strfreev (ptr);
           break; /* '^&ay' */
         }
       else if (str[2] != '&') /* '^as', '^ao' */
         g_strfreev (ptr);
       else                      /* '^a&s', '^a&o' */
@@ -6007,10 +6015,15 @@
  *
  * @notify will be called with @user_data when @data is no longer
  * needed.  The exact time of this call is unspecified and might even be
  * before this function returns.
  *
+ * Note: @data must be backed by memory that is aligned appropriately for the
+ * @type being loaded. Otherwise this function will internally create a copy of
+ * the memory (since GLib 2.60) or (in older versions) fail and exit the
+ * process.
+ *
  * Returns: (transfer none): a new floating #GVariant of type @type
  *
  * Since: 2.24
  **/
 GVariant *
