diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvaluetypes.h b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvaluetypes.h
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvaluetypes.h
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvaluetypes.h
@@ -21,11 +21,11 @@
 
 #if !defined (__GLIB_GOBJECT_H_INSIDE__) && !defined (GOBJECT_COMPILATION)
 #error "Only <glib-object.h> can be included directly."
 #endif
 
-#include    <gobject/gvalue.h>
+#include  <gobject/gvalue.h>
 
 G_BEGIN_DECLS
 
 /* --- type macros --- */
 /**
@@ -34,11 +34,11 @@
  *
  * Checks whether the given #GValue can hold values of type %G_TYPE_CHAR.
  *
  * Returns: %TRUE on success.
  */
-#define G_VALUE_HOLDS_CHAR(value)    (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_CHAR))
+#define G_VALUE_HOLDS_CHAR(value)  (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_CHAR))
 /**
  * G_VALUE_HOLDS_UCHAR:
  * @value: a valid #GValue structure
  *
  * Checks whether the given #GValue can hold values of type %G_TYPE_UCHAR.
@@ -52,38 +52,38 @@
  *
  * Checks whether the given #GValue can hold values of type %G_TYPE_BOOLEAN.
  *
  * Returns: %TRUE on success.
  */
-#define G_VALUE_HOLDS_BOOLEAN(value)     (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_BOOLEAN))
+#define G_VALUE_HOLDS_BOOLEAN(value)   (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_BOOLEAN))
 /**
  * G_VALUE_HOLDS_INT:
  * @value: a valid #GValue structure
  *
  * Checks whether the given #GValue can hold values of type %G_TYPE_INT.
  *
  * Returns: %TRUE on success.
  */
-#define G_VALUE_HOLDS_INT(value)     (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_INT))
+#define G_VALUE_HOLDS_INT(value)   (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_INT))
 /**
  * G_VALUE_HOLDS_UINT:
  * @value: a valid #GValue structure
  *
  * Checks whether the given #GValue can hold values of type %G_TYPE_UINT.
  *
  * Returns: %TRUE on success.
  */
-#define G_VALUE_HOLDS_UINT(value)    (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_UINT))
+#define G_VALUE_HOLDS_UINT(value)  (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_UINT))
 /**
  * G_VALUE_HOLDS_LONG:
  * @value: a valid #GValue structure
  *
  * Checks whether the given #GValue can hold values of type %G_TYPE_LONG.
  *
  * Returns: %TRUE on success.
  */
-#define G_VALUE_HOLDS_LONG(value)    (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_LONG))
+#define G_VALUE_HOLDS_LONG(value)  (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_LONG))
 /**
  * G_VALUE_HOLDS_ULONG:
  * @value: a valid #GValue structure
  *
  * Checks whether the given #GValue can hold values of type %G_TYPE_ULONG.
@@ -142,17 +142,17 @@
  *
  * Checks whether the given #GValue can hold values of type %G_TYPE_POINTER.
  *
  * Returns: %TRUE on success.
  */
-#define G_VALUE_HOLDS_POINTER(value)     (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_POINTER))
+#define G_VALUE_HOLDS_POINTER(value)   (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_POINTER))
 /**
  * G_TYPE_GTYPE:
  *
  * The type for #GType.
  */
-#define G_TYPE_GTYPE             (g_gtype_get_type())
+#define G_TYPE_GTYPE       (g_gtype_get_type())
 /**
  * G_VALUE_HOLDS_GTYPE:
  * @value: a valid #GValue structure
  *
  * Checks whether the given #GValue can hold values of type %G_TYPE_GTYPE.
@@ -179,96 +179,96 @@
 void                  g_value_set_char          (GValue       *value,
                                                  gchar         v_char);
 GLIB_DEPRECATED_IN_2_32_FOR(g_value_get_schar)
 gchar                 g_value_get_char          (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_schar     (GValue       *value,
-                         gint8         v_char);
+void          g_value_set_schar   (GValue       *value,
+             gint8         v_char);
 GLIB_AVAILABLE_IN_ALL
-gint8             g_value_get_schar     (const GValue *value);
+gint8         g_value_get_schar   (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_uchar     (GValue       *value,
-                         guchar        v_uchar);
+void          g_value_set_uchar   (GValue       *value,
+             guchar        v_uchar);
 GLIB_AVAILABLE_IN_ALL
-guchar            g_value_get_uchar     (const GValue *value);
+guchar          g_value_get_uchar   (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_boolean   (GValue       *value,
-                         gboolean      v_boolean);
+void          g_value_set_boolean (GValue       *value,
+             gboolean      v_boolean);
 GLIB_AVAILABLE_IN_ALL
-gboolean          g_value_get_boolean   (const GValue *value);
+gboolean        g_value_get_boolean (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_int       (GValue       *value,
-                         gint          v_int);
+void          g_value_set_int   (GValue       *value,
+             gint        v_int);
 GLIB_AVAILABLE_IN_ALL
-gint              g_value_get_int       (const GValue *value);
+gint          g_value_get_int   (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_uint      (GValue       *value,
-                         guint         v_uint);
+void          g_value_set_uint    (GValue       *value,
+             guint         v_uint);
 GLIB_AVAILABLE_IN_ALL
-guint             g_value_get_uint      (const GValue *value);
+guint         g_value_get_uint    (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_long      (GValue       *value,
-                         glong         v_long);
+void          g_value_set_long    (GValue       *value,
+             glong         v_long);
 GLIB_AVAILABLE_IN_ALL
-glong             g_value_get_long      (const GValue *value);
+glong         g_value_get_long    (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_ulong     (GValue       *value,
-                         gulong        v_ulong);
+void          g_value_set_ulong   (GValue       *value,
+             gulong        v_ulong);
 GLIB_AVAILABLE_IN_ALL
-gulong            g_value_get_ulong     (const GValue *value);
+gulong          g_value_get_ulong   (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_int64     (GValue       *value,
-                         gint64        v_int64);
+void          g_value_set_int64   (GValue       *value,
+             gint64        v_int64);
 GLIB_AVAILABLE_IN_ALL
-gint64            g_value_get_int64     (const GValue *value);
+gint64          g_value_get_int64   (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_uint64    (GValue       *value,
-                         guint64      v_uint64);
+void          g_value_set_uint64  (GValue       *value,
+             guint64      v_uint64);
 GLIB_AVAILABLE_IN_ALL
-guint64           g_value_get_uint64    (const GValue *value);
+guint64         g_value_get_uint64  (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_float     (GValue       *value,
-                         gfloat        v_float);
+void          g_value_set_float   (GValue       *value,
+             gfloat        v_float);
 GLIB_AVAILABLE_IN_ALL
-gfloat            g_value_get_float     (const GValue *value);
+gfloat          g_value_get_float   (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_double    (GValue       *value,
-                         gdouble       v_double);
+void          g_value_set_double  (GValue       *value,
+             gdouble       v_double);
 GLIB_AVAILABLE_IN_ALL
-gdouble           g_value_get_double    (const GValue *value);
+gdouble         g_value_get_double  (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_string    (GValue       *value,
-                         const gchar  *v_string);
+void          g_value_set_string  (GValue       *value,
+             const gchar  *v_string);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_static_string (GValue       *value,
-                         const gchar  *v_string);
+void          g_value_set_static_string (GValue       *value,
+             const gchar  *v_string);
 GLIB_AVAILABLE_IN_ALL
-const gchar *         g_value_get_string    (const GValue *value);
+const gchar *         g_value_get_string  (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-gchar*            g_value_dup_string    (const GValue *value);
+gchar*          g_value_dup_string  (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_pointer   (GValue       *value,
-                         gpointer      v_pointer);
+void          g_value_set_pointer (GValue       *value,
+             gpointer      v_pointer);
 GLIB_AVAILABLE_IN_ALL
-gpointer          g_value_get_pointer   (const GValue *value);
+gpointer        g_value_get_pointer (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-GType             g_gtype_get_type      (void);
+GType         g_gtype_get_type    (void);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_gtype         (GValue       *value,
-                         GType         v_gtype);
+void          g_value_set_gtype         (GValue       *value,
+             GType         v_gtype);
 GLIB_AVAILABLE_IN_ALL
-GType                 g_value_get_gtype         (const GValue *value);
+GType               g_value_get_gtype         (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_set_variant   (GValue       *value,
-                         GVariant     *variant);
+void          g_value_set_variant (GValue       *value,
+             GVariant     *variant);
 GLIB_AVAILABLE_IN_ALL
-void              g_value_take_variant  (GValue       *value,
-                         GVariant     *variant);
+void          g_value_take_variant  (GValue       *value,
+             GVariant     *variant);
 GLIB_AVAILABLE_IN_ALL
-GVariant*         g_value_get_variant   (const GValue *value);
+GVariant*       g_value_get_variant (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-GVariant*         g_value_dup_variant   (const GValue *value);
+GVariant*       g_value_dup_variant (const GValue *value);
 
 
 /* Convenience for registering new pointer types */
 GLIB_AVAILABLE_IN_ALL
 GType                 g_pointer_type_register_static (const gchar *name);
@@ -277,12 +277,12 @@
 GLIB_AVAILABLE_IN_ALL
 gchar*                g_strdup_value_contents   (const GValue *value);
 
 
 GLIB_AVAILABLE_IN_ALL
-void g_value_take_string                (GValue        *value,
-                         gchar         *v_string);
+void g_value_take_string            (GValue      *value,
+             gchar       *v_string);
 GLIB_DEPRECATED_FOR(g_value_take_string)
 void g_value_set_string_take_ownership          (GValue            *value,
                                                  gchar             *v_string);
 
 
