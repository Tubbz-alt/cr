diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudioringbuffer.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudioringbuffer.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudioringbuffer.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudioringbuffer.c
@@ -31,10 +31,13 @@
  * manner. The base class is sufficiently flexible to be used as an
  * abstraction for DMA based ringbuffers as well as a pure software
  * implementations.
  *
  */
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
 
 #include <string.h>
 
 #include <gst/audio/audio.h>
 #include "gstaudioringbuffer.h"
@@ -293,12 +296,12 @@
       goto parse_error;
 
     gst_structure_get_int (structure, "channels", &info.channels);
     if (!g_strcmp0 (gst_structure_get_string (structure, "stream-format"),
             "adts"))
-    spec->type = (i == 2) ? GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG2_AAC :
-        GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG4_AAC;
+      spec->type = (i == 2) ? GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG2_AAC :
+          GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG4_AAC;
     else
       spec->type = (i == 2) ?
           GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG2_AAC_RAW :
           GST_AUDIO_RING_BUFFER_FORMAT_TYPE_MPEG4_AAC_RAW;
     info.bpf = 1;
@@ -424,11 +427,11 @@
   buf->cb_data_notify = notify;
   GST_OBJECT_UNLOCK (buf);
 
   if (old_notify) {
     old_notify (old_data);
-}
+  }
 }
 
 
 /**
  * gst_audio_ring_buffer_open_device:
@@ -1416,95 +1419,95 @@
     d_ += bpf;                                  \
     s_ += bpf;                                  \
   }                                             \
 } G_STMT_END
 
-#define FWD_SAMPLES(s,se,d,de,F)            \
-G_STMT_START {                  \
-  /* no rate conversion */          \
-  guint towrite = MIN (se + bpf - s, de - d);   \
-  /* simple copy */             \
-  if (!skip)                    \
-    F (d, s, towrite);                  \
-  in_samples -= towrite / bpf;          \
-  out_samples -= towrite / bpf;         \
-  s += towrite;                 \
-  GST_DEBUG ("copy %u bytes", towrite);     \
+#define FWD_SAMPLES(s,se,d,de,F)          \
+G_STMT_START {          \
+  /* no rate conversion */      \
+  guint towrite = MIN (se + bpf - s, de - d); \
+  /* simple copy */       \
+  if (!skip)          \
+    F (d, s, towrite);              \
+  in_samples -= towrite / bpf;      \
+  out_samples -= towrite / bpf;     \
+  s += towrite;         \
+  GST_DEBUG ("copy %u bytes", towrite);   \
 } G_STMT_END
 
 /* in_samples >= out_samples, rate > 1.0 */
-#define FWD_UP_SAMPLES(s,se,d,de,F)         \
-G_STMT_START {                  \
-  guint8 *sb = s, *db = d;          \
-  while (s <= se && d < de) {           \
-    if (!skip)                  \
-      F (d, s, bpf);                        \
-    s += bpf;                   \
-    *accum += outr;             \
-    if ((*accum << 1) >= inr) {         \
-      *accum -= inr;                \
-      d += bpf;                 \
-    }                       \
-  }                     \
-  in_samples -= (s - sb)/bpf;           \
-  out_samples -= (d - db)/bpf;          \
+#define FWD_UP_SAMPLES(s,se,d,de,F)     \
+G_STMT_START {          \
+  guint8 *sb = s, *db = d;      \
+  while (s <= se && d < de) {     \
+    if (!skip)          \
+      F (d, s, bpf);                    \
+    s += bpf;         \
+    *accum += outr;       \
+    if ((*accum << 1) >= inr) {     \
+      *accum -= inr;        \
+      d += bpf;         \
+    }           \
+  }           \
+  in_samples -= (s - sb)/bpf;     \
+  out_samples -= (d - db)/bpf;      \
   GST_DEBUG ("fwd_up end %d/%d",*accum,*toprocess); \
 } G_STMT_END
 
 /* out_samples > in_samples, for rates smaller than 1.0 */
-#define FWD_DOWN_SAMPLES(s,se,d,de,F)       \
-G_STMT_START {                  \
-  guint8 *sb = s, *db = d;          \
-  while (s <= se && d < de) {           \
-    if (!skip)                  \
-      F (d, s, bpf);                        \
-    d += bpf;                   \
-    *accum += inr;              \
-    if ((*accum << 1) >= outr) {        \
-      *accum -= outr;               \
-      s += bpf;                 \
-    }                       \
-  }                     \
-  in_samples -= (s - sb)/bpf;           \
-  out_samples -= (d - db)/bpf;          \
-  GST_DEBUG ("fwd_down end %d/%d",*accum,*toprocess);   \
+#define FWD_DOWN_SAMPLES(s,se,d,de,F)     \
+G_STMT_START {          \
+  guint8 *sb = s, *db = d;      \
+  while (s <= se && d < de) {     \
+    if (!skip)          \
+      F (d, s, bpf);                    \
+    d += bpf;         \
+    *accum += inr;        \
+    if ((*accum << 1) >= outr) {    \
+      *accum -= outr;       \
+      s += bpf;         \
+    }           \
+  }           \
+  in_samples -= (s - sb)/bpf;     \
+  out_samples -= (d - db)/bpf;      \
+  GST_DEBUG ("fwd_down end %d/%d",*accum,*toprocess); \
 } G_STMT_END
 
-#define REV_UP_SAMPLES(s,se,d,de,F)         \
-G_STMT_START {                  \
-  guint8 *sb = se, *db = d;         \
-  while (s <= se && d < de) {           \
-    if (!skip)                  \
-      F (d, se, bpf);                       \
-    se -= bpf;                  \
-    *accum += outr;             \
-    while (d < de && (*accum << 1) >= inr) {    \
-      *accum -= inr;                \
-      d += bpf;                 \
-    }                       \
-  }                     \
-  in_samples -= (sb - se)/bpf;          \
-  out_samples -= (d - db)/bpf;          \
+#define REV_UP_SAMPLES(s,se,d,de,F)     \
+G_STMT_START {          \
+  guint8 *sb = se, *db = d;     \
+  while (s <= se && d < de) {     \
+    if (!skip)          \
+      F (d, se, bpf);                     \
+    se -= bpf;          \
+    *accum += outr;       \
+    while (d < de && (*accum << 1) >= inr) {  \
+      *accum -= inr;        \
+      d += bpf;         \
+    }           \
+  }           \
+  in_samples -= (sb - se)/bpf;      \
+  out_samples -= (d - db)/bpf;      \
   GST_DEBUG ("rev_up end %d/%d",*accum,*toprocess); \
 } G_STMT_END
 
-#define REV_DOWN_SAMPLES(s,se,d,de,F)       \
-G_STMT_START {                  \
-  guint8 *sb = se, *db = d;         \
-  while (s <= se && d < de) {           \
-    if (!skip)                  \
-      F (d, se, bpf);                   \
-    d += bpf;                   \
-    *accum += inr;              \
+#define REV_DOWN_SAMPLES(s,se,d,de,F)     \
+G_STMT_START {          \
+  guint8 *sb = se, *db = d;     \
+  while (s <= se && d < de) {     \
+    if (!skip)          \
+      F (d, se, bpf);             \
+    d += bpf;         \
+    *accum += inr;        \
     while (s <= se && (*accum << 1) >= outr) {  \
-      *accum -= outr;               \
-      se -= bpf;                \
-    }                       \
-  }                     \
-  in_samples -= (sb - se)/bpf;          \
-  out_samples -= (d - db)/bpf;          \
-  GST_DEBUG ("rev_down end %d/%d",*accum,*toprocess);   \
+      *accum -= outr;       \
+      se -= bpf;        \
+    }           \
+  }           \
+  in_samples -= (sb - se)/bpf;      \
+  out_samples -= (d - db)/bpf;      \
+  GST_DEBUG ("rev_down end %d/%d",*accum,*toprocess); \
 } G_STMT_END
 
 static guint
 default_commit (GstAudioRingBuffer * buf, guint64 * sample,
     guint8 * data, gint in_samples, gint out_samples, gint * accum)
@@ -1821,11 +1824,11 @@
       gint *reorder_map = buf->channel_reorder_map;
 
       /* Reorder from device order to GStreamer order */
       for (i = 0; i < sampleslen; i++) {
         for (j = 0; j < channels; j++) {
-          memcpy (data + reorder_map[j] * bps, ptr + j * bps, bps);
+          memcpy (data + i * bpf + reorder_map[j] * bps, ptr + j * bps, bps);
         }
         ptr += bpf;
       }
     } else {
       memcpy (data, dest + (readseg * segsize) + (sampleoff * bpf),
