diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/pbutils/gstaudiovisualizer.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/pbutils/gstaudiovisualizer.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/pbutils/gstaudiovisualizer.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/pbutils/gstaudiovisualizer.c
@@ -20,10 +20,11 @@
  * Boston, MA 02110-1301, USA.
  */
 /**
  * SECTION:gstaudiovisualizer
  * @title: GstAudioVisualizer
+ * @short_description: Base class for visualizers.
  *
  * A baseclass for scopes (visualizers). It takes care of re-fitting the
  * audio-rate to video-rate and handles renegotiation (downstream video size
  * changes).
  *
@@ -57,10 +58,11 @@
   PROP_SHADER,
   PROP_SHADE_AMOUNT
 };
 
 static GstBaseTransformClass *parent_class = NULL;
+static gint private_offset = 0;
 
 static void gst_audio_visualizer_class_init (GstAudioVisualizerClass * klass);
 static void gst_audio_visualizer_init (GstAudioVisualizer * scope,
     GstAudioVisualizerClass * g_class);
 static void gst_audio_visualizer_set_property (GObject * object,
@@ -93,13 +95,10 @@
     GstCaps * outcaps);
 
 static gboolean
 default_decide_allocation (GstAudioVisualizer * scope, GstQuery * query);
 
-#define GST_AUDIO_VISUALIZER_GET_PRIVATE(obj)  \
-    (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GST_TYPE_AUDIO_VISUALIZER, GstAudioVisualizerPrivate))
-
 struct _GstAudioVisualizerPrivate
 {
   gboolean negotiated;
 
   GstBufferPool *pool;
@@ -517,22 +516,33 @@
     GType _type;
 
     /* TODO: rename when exporting it as a library */
     _type = g_type_register_static (GST_TYPE_ELEMENT,
         "GstAudioVisualizer", &audio_visualizer_info, G_TYPE_FLAG_ABSTRACT);
+
+    private_offset =
+        g_type_add_instance_private (_type, sizeof (GstAudioVisualizerPrivate));
+
     g_once_init_leave (&audio_visualizer_type, _type);
   }
   return (GType) audio_visualizer_type;
 }
 
+static inline GstAudioVisualizerPrivate *
+gst_audio_visualizer_get_instance_private (GstAudioVisualizer * self)
+{
+  return (G_STRUCT_MEMBER_P (self, private_offset));
+}
+
 static void
 gst_audio_visualizer_class_init (GstAudioVisualizerClass * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
   GstElementClass *element_class = (GstElementClass *) klass;
 
-  g_type_class_add_private (klass, sizeof (GstAudioVisualizerPrivate));
+  if (private_offset != 0)
+    g_type_class_adjust_private_offset (klass, &private_offset);
 
   parent_class = g_type_class_peek_parent (klass);
 
   GST_DEBUG_CATEGORY_INIT (audio_visualizer_debug,
       "baseaudiovisualizer-libvisual", 0,
@@ -563,11 +573,11 @@
 gst_audio_visualizer_init (GstAudioVisualizer * scope,
     GstAudioVisualizerClass * g_class)
 {
   GstPadTemplate *pad_template;
 
-  scope->priv = GST_AUDIO_VISUALIZER_GET_PRIVATE (scope);
+  scope->priv = gst_audio_visualizer_get_instance_private (scope);
 
   /* create the sink and src pads */
   pad_template =
       gst_element_class_get_pad_template (GST_ELEMENT_CLASS (g_class), "sink");
   g_return_if_fail (pad_template != NULL);
