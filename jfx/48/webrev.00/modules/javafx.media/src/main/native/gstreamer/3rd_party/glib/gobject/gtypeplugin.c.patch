diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gtypeplugin.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gtypeplugin.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gtypeplugin.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gtypeplugin.c
@@ -83,13 +83,13 @@
   static GType type_plugin_type = 0;
 
   if (!type_plugin_type)
     {
       const GTypeInfo type_plugin_info = {
-    sizeof (GTypePluginClass),
-    NULL,           /* base_init */
-    NULL,           /* base_finalize */
+  sizeof (GTypePluginClass),
+  NULL,           /* base_init */
+  NULL,           /* base_finalize */
       };
 
       type_plugin_type = g_type_register_static (G_TYPE_INTERFACE, g_intern_static_string ("GTypePlugin"), &type_plugin_info, 0);
     }
 
@@ -145,25 +145,25 @@
  * There should be no need to use this function outside of the GObject
  * type system itself.
  */
 void
 g_type_plugin_complete_type_info (GTypePlugin     *plugin,
-                  GType            g_type,
-                  GTypeInfo       *info,
-                  GTypeValueTable *value_table)
+          GType            g_type,
+          GTypeInfo       *info,
+          GTypeValueTable *value_table)
 {
   GTypePluginClass *iface;
 
   g_return_if_fail (G_IS_TYPE_PLUGIN (plugin));
   g_return_if_fail (info != NULL);
   g_return_if_fail (value_table != NULL);
 
   iface = G_TYPE_PLUGIN_GET_CLASS (plugin);
   iface->complete_type_info (plugin,
-                 g_type,
-                 info,
-                 value_table);
+           g_type,
+           info,
+           value_table);
 }
 
 /**
  * g_type_plugin_complete_interface_info:
  * @plugin: the #GTypePlugin
@@ -176,20 +176,20 @@
  * #GTypePluginClass of @plugin. There should be no need to use this
  * function outside of the GObject type system itself.
  */
 void
 g_type_plugin_complete_interface_info (GTypePlugin    *plugin,
-                       GType           instance_type,
-                       GType           interface_type,
-                       GInterfaceInfo *info)
+               GType           instance_type,
+               GType           interface_type,
+               GInterfaceInfo *info)
 {
   GTypePluginClass *iface;
 
   g_return_if_fail (G_IS_TYPE_PLUGIN (plugin));
   g_return_if_fail (info != NULL);
 
   iface = G_TYPE_PLUGIN_GET_CLASS (plugin);
   iface->complete_interface_info (plugin,
-                  instance_type,
-                  interface_type,
-                  info);
+          instance_type,
+          interface_type,
+          info);
 }
