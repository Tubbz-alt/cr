diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvalue.h b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvalue.h
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvalue.h
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvalue.h
@@ -21,11 +21,11 @@
 
 #if !defined (__GLIB_GOBJECT_H_INSIDE__) && !defined (GOBJECT_COMPILATION)
 #error "Only <glib-object.h> can be included directly."
 #endif
 
-#include    <gobject/gtype.h>
+#include  <gobject/gtype.h>
 
 G_BEGIN_DECLS
 
 /* --- type macros --- */
 /**
@@ -36,38 +36,38 @@
  * That is, this macro checks whether this type provides an implementation
  * of the #GTypeValueTable functions required for a type to create a #GValue of.
  *
  * Returns: Whether @type is suitable as a #GValue type.
  */
-#define G_TYPE_IS_VALUE(type)       (g_type_check_is_value_type (type))
+#define G_TYPE_IS_VALUE(type)   (g_type_check_is_value_type (type))
 /**
  * G_IS_VALUE:
  * @value: A #GValue structure.
  *
  * Checks if @value is a valid and initialized #GValue structure.
  *
  * Returns: %TRUE on success.
  */
-#define G_IS_VALUE(value)       (G_TYPE_CHECK_VALUE (value))
+#define G_IS_VALUE(value)   (G_TYPE_CHECK_VALUE (value))
 /**
  * G_VALUE_TYPE:
  * @value: A #GValue structure.
  *
  * Get the type identifier of @value.
  *
  * Returns: the #GType.
  */
-#define G_VALUE_TYPE(value)     (((GValue*) (value))->g_type)
+#define G_VALUE_TYPE(value)   (((GValue*) (value))->g_type)
 /**
  * G_VALUE_TYPE_NAME:
  * @value: A #GValue structure.
  *
  * Gets the type name of @value.
  *
  * Returns: the type name.
  */
-#define G_VALUE_TYPE_NAME(value)    (g_type_name (G_VALUE_TYPE (value)))
+#define G_VALUE_TYPE_NAME(value)  (g_type_name (G_VALUE_TYPE (value)))
 /**
  * G_VALUE_HOLDS:
  * @value: A #GValue structure.
  * @type: A #GType value.
  *
@@ -75,11 +75,11 @@
  * This macro will also check for @value != %NULL and issue a
  * warning if the check fails.
  *
  * Returns: %TRUE if @value holds the @type.
  */
-#define G_VALUE_HOLDS(value,type)   (G_TYPE_CHECK_VALUE_TYPE ((value), (type)))
+#define G_VALUE_HOLDS(value,type) (G_TYPE_CHECK_VALUE_TYPE ((value), (type)))
 
 
 /* --- typedefs & structures --- */
 /**
  * GValueTransform:
@@ -90,11 +90,11 @@
  * g_value_register_transform_func().
  *
  * @dest_value will be initialized to the correct destination type.
  */
 typedef void (*GValueTransform) (const GValue *src_value,
-                 GValue       *dest_value);
+         GValue       *dest_value);
 /**
  * GValue:
  *
  * An opaque structure used to hold different types of values.
  * The data within the structure has protected scope: it is accessible only
@@ -106,67 +106,67 @@
  * only be accessed through the G_VALUE_TYPE() macro.
  */
 struct _GValue
 {
   /*< private >*/
-  GType     g_type;
+  GType   g_type;
 
   /* public for GTypeValueTable methods */
   union {
-    gint    v_int;
-    guint   v_uint;
-    glong   v_long;
+    gint  v_int;
+    guint v_uint;
+    glong v_long;
     gulong  v_ulong;
     gint64      v_int64;
     guint64     v_uint64;
     gfloat  v_float;
     gdouble v_double;
-    gpointer    v_pointer;
+    gpointer  v_pointer;
   } data[2];
 };
 
 
 /* --- prototypes --- */
 GLIB_AVAILABLE_IN_ALL
-GValue*         g_value_init        (GValue       *value,
-                     GType         g_type);
+GValue*         g_value_init      (GValue       *value,
+           GType         g_type);
 GLIB_AVAILABLE_IN_ALL
-void            g_value_copy        (const GValue *src_value,
-                     GValue       *dest_value);
+void            g_value_copy      (const GValue *src_value,
+           GValue       *dest_value);
 GLIB_AVAILABLE_IN_ALL
-GValue*         g_value_reset       (GValue       *value);
+GValue*         g_value_reset     (GValue       *value);
 GLIB_AVAILABLE_IN_ALL
-void            g_value_unset       (GValue       *value);
+void            g_value_unset     (GValue       *value);
 GLIB_AVAILABLE_IN_ALL
-void        g_value_set_instance    (GValue       *value,
-                     gpointer      instance);
+void    g_value_set_instance  (GValue       *value,
+           gpointer      instance);
 GLIB_AVAILABLE_IN_2_42
 void            g_value_init_from_instance   (GValue       *value,
                                               gpointer      instance);
 
 
 /* --- private --- */
 GLIB_AVAILABLE_IN_ALL
-gboolean    g_value_fits_pointer    (const GValue *value);
+gboolean  g_value_fits_pointer  (const GValue *value);
 GLIB_AVAILABLE_IN_ALL
-gpointer    g_value_peek_pointer    (const GValue *value);
+gpointer  g_value_peek_pointer  (const GValue *value);
 
 
 /* --- implementation details --- */
 GLIB_AVAILABLE_IN_ALL
-gboolean g_value_type_compatible    (GType       src_type,
-                     GType       dest_type);
+gboolean g_value_type_compatible  (GType     src_type,
+           GType     dest_type);
 GLIB_AVAILABLE_IN_ALL
 gboolean g_value_type_transformable (GType           src_type,
-                     GType           dest_type);
+           GType           dest_type);
 GLIB_AVAILABLE_IN_ALL
-gboolean g_value_transform      (const GValue   *src_value,
-                     GValue         *dest_value);
+gboolean g_value_transform    (const GValue   *src_value,
+           GValue         *dest_value);
 GLIB_AVAILABLE_IN_ALL
-void    g_value_register_transform_func (GType       src_type,
-                     GType       dest_type,
-                     GValueTransform transform_func);
+void  g_value_register_transform_func (GType     src_type,
+           GType     dest_type,
+           GValueTransform transform_func);
 
 /**
  * G_VALUE_NOCOPY_CONTENTS:
  *
  * If passed to G_VALUE_COLLECT(), allocated data won't be copied
