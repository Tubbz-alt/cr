diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/libs/gst/base/gstdataqueue.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/libs/gst/base/gstdataqueue.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/libs/gst/base/gstdataqueue.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/libs/gst/base/gstdataqueue.c
@@ -26,10 +26,13 @@
  *
  * #GstDataQueue is an object that handles threadsafe queueing of objects. It
  * also provides size-related functionality. This object should be used for
  * any #GstElement that wishes to provide some sort of queueing functionality.
  */
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
 
 #include <gst/gst.h>
 #include "string.h"
 #include "gstdataqueue.h"
 #include "gstqueuearray.h"
@@ -127,19 +130,18 @@
   GST_DEBUG_CATEGORY_INIT (data_queue_dataflow, "data_queue_dataflow", 0, \
       "dataflow inside the data queue object"); \
 }
 
 #define parent_class gst_data_queue_parent_class
-G_DEFINE_TYPE_WITH_CODE (GstDataQueue, gst_data_queue, G_TYPE_OBJECT, _do_init);
+G_DEFINE_TYPE_WITH_CODE (GstDataQueue, gst_data_queue, G_TYPE_OBJECT,
+    G_ADD_PRIVATE (GstDataQueue) _do_init);
 
 static void
 gst_data_queue_class_init (GstDataQueueClass * klass)
 {
   GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
 
-  g_type_class_add_private (klass, sizeof (GstDataQueuePrivate));
-
   gobject_class->set_property = gst_data_queue_set_property;
   gobject_class->get_property = gst_data_queue_get_property;
 
   /* signals */
   /**
@@ -189,13 +191,11 @@
 }
 
 static void
 gst_data_queue_init (GstDataQueue * queue)
 {
-  queue->priv =
-      G_TYPE_INSTANCE_GET_PRIVATE (queue, GST_TYPE_DATA_QUEUE,
-      GstDataQueuePrivate);
+  queue->priv = gst_data_queue_get_instance_private (queue);
 
   queue->priv->cur_level.visible = 0;   /* no content */
   queue->priv->cur_level.bytes = 0;     /* no content */
   queue->priv->cur_level.time = 0;      /* no content */
 
@@ -560,11 +560,11 @@
 }
 
 /**
  * gst_data_queue_pop: (skip)
  * @queue: a #GstDataQueue.
- * @item: pointer to store the returned #GstDataQueueItem.
+ * @item: (out): pointer to store the returned #GstDataQueueItem.
  *
  * Retrieves the first @item available on the @queue. If the queue is currently
  * empty, the call will block until at least one item is available, OR the
  * @queue is set to the flushing state.
  * MT safe.
@@ -630,11 +630,11 @@
 }
 
 /**
  * gst_data_queue_peek: (skip)
  * @queue: a #GstDataQueue.
- * @item: pointer to store the returned #GstDataQueueItem.
+ * @item: (out): pointer to store the returned #GstDataQueueItem.
  *
  * Retrieves the first @item available on the @queue without removing it.
  * If the queue is currently empty, the call will block until at least
  * one item is available, OR the @queue is set to the flushing state.
  * MT safe.
@@ -757,11 +757,11 @@
 }
 
 /**
  * gst_data_queue_get_level: (skip)
  * @queue: The #GstDataQueue
- * @level: the location to store the result
+ * @level: (out): the location to store the result
  *
  * Get the current level of the queue.
  *
  * Since: 1.2
  */
