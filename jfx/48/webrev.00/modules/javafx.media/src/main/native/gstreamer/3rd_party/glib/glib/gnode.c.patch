diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gnode.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gnode.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gnode.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gnode.c
@@ -178,29 +178,29 @@
  *
  * Since: 2.4
  **/
 GNode*
 g_node_copy_deep (GNode     *node,
-          GCopyFunc  copy_func,
-          gpointer   data)
+      GCopyFunc  copy_func,
+      gpointer   data)
 {
   GNode *new_node = NULL;
 
   if (copy_func == NULL)
-    return g_node_copy (node);
+  return g_node_copy (node);
 
   if (node)
     {
       GNode *child, *new_child;
 
       new_node = g_node_new (copy_func (node->data, data));
 
       for (child = g_node_last_child (node); child; child = child->prev)
-    {
-      new_child = g_node_copy_deep (child, copy_func, data);
-      g_node_prepend (new_node, new_child);
-    }
+  {
+    new_child = g_node_copy_deep (child, copy_func, data);
+    g_node_prepend (new_node, new_child);
+  }
     }
 
   return new_node;
 }
 
@@ -223,11 +223,11 @@
       GNode *child;
 
       new_node = g_node_new (node->data);
 
       for (child = g_node_last_child (node); child; child = child->prev)
-    g_node_prepend (new_node, g_node_copy (child));
+  g_node_prepend (new_node, g_node_copy (child));
     }
 
   return new_node;
 }
 
@@ -242,21 +242,21 @@
  *
  * Returns: the inserted #GNode
  */
 GNode*
 g_node_insert (GNode *parent,
-           gint   position,
-           GNode *node)
+         gint   position,
+         GNode *node)
 {
   g_return_val_if_fail (parent != NULL, node);
   g_return_val_if_fail (node != NULL, node);
   g_return_val_if_fail (G_NODE_IS_ROOT (node), node);
 
   if (position > 0)
     return g_node_insert_before (parent,
-                 g_node_nth_child (parent, position),
-                 node);
+         g_node_nth_child (parent, position),
+         node);
   else if (position == 0)
     return g_node_prepend (parent, node);
   else /* if (position < 0) */
     return g_node_append (parent, node);
 }
@@ -272,12 +272,12 @@
  *
  * Returns: the inserted #GNode
  */
 GNode*
 g_node_insert_before (GNode *parent,
-              GNode *sibling,
-              GNode *node)
+          GNode *sibling,
+          GNode *node)
 {
   g_return_val_if_fail (parent != NULL, node);
   g_return_val_if_fail (node != NULL, node);
   g_return_val_if_fail (G_NODE_IS_ROOT (node), node);
   if (sibling)
@@ -286,35 +286,35 @@
   node->parent = parent;
 
   if (sibling)
     {
       if (sibling->prev)
-    {
-      node->prev = sibling->prev;
-      node->prev->next = node;
-      node->next = sibling;
-      sibling->prev = node;
-    }
+  {
+    node->prev = sibling->prev;
+    node->prev->next = node;
+    node->next = sibling;
+    sibling->prev = node;
+  }
       else
-    {
-      node->parent->children = node;
-      node->next = sibling;
-      sibling->prev = node;
-    }
+  {
+    node->parent->children = node;
+    node->next = sibling;
+    sibling->prev = node;
+  }
     }
   else
     {
       if (parent->children)
-    {
-      sibling = parent->children;
-      while (sibling->next)
-        sibling = sibling->next;
-      node->prev = sibling;
-      sibling->next = node;
-    }
+  {
+    sibling = parent->children;
+    while (sibling->next)
+      sibling = sibling->next;
+    node->prev = sibling;
+    sibling->next = node;
+  }
       else
-    node->parent->children = node;
+  node->parent->children = node;
     }
 
   return node;
 }
 
@@ -329,12 +329,12 @@
  *
  * Returns: the inserted #GNode
  */
 GNode*
 g_node_insert_after (GNode *parent,
-             GNode *sibling,
-             GNode *node)
+         GNode *sibling,
+         GNode *node)
 {
   g_return_val_if_fail (parent != NULL, node);
   g_return_val_if_fail (node != NULL, node);
   g_return_val_if_fail (G_NODE_IS_ROOT (node), node);
   if (sibling)
@@ -343,24 +343,24 @@
   node->parent = parent;
 
   if (sibling)
     {
       if (sibling->next)
-    {
-      sibling->next->prev = node;
-    }
+  {
+    sibling->next->prev = node;
+  }
       node->next = sibling->next;
       node->prev = sibling;
       sibling->next = node;
     }
   else
     {
       if (parent->children)
-    {
-      node->next = parent->children;
-      parent->children->prev = node;
-    }
+  {
+    node->next = parent->children;
+    parent->children->prev = node;
+  }
       parent->children = node;
     }
 
   return node;
 }
@@ -374,11 +374,11 @@
  *
  * Returns: the inserted #GNode
  */
 GNode*
 g_node_prepend (GNode *parent,
-        GNode *node)
+    GNode *node)
 {
   g_return_val_if_fail (parent != NULL, node);
 
   return g_node_insert_before (parent, parent->children, node);
 }
@@ -413,19 +413,19 @@
  *
  * Returns: %TRUE if @node is an ancestor of @descendant
  */
 gboolean
 g_node_is_ancestor (GNode *node,
-            GNode *descendant)
+        GNode *descendant)
 {
   g_return_val_if_fail (node != NULL, FALSE);
   g_return_val_if_fail (descendant != NULL, FALSE);
 
   while (descendant)
     {
       if (descendant->parent == node)
-    return TRUE;
+  return TRUE;
 
       descendant = descendant->parent;
     }
 
   return FALSE;
@@ -509,162 +509,162 @@
     {
       guint tmp_height;
 
       tmp_height = g_node_max_height (child);
       if (tmp_height > max_height)
-    max_height = tmp_height;
+  max_height = tmp_height;
       child = child->next;
     }
 
   return max_height + 1;
 }
 
 static gboolean
-g_node_traverse_pre_order (GNode        *node,
-                           GTraverseFlags    flags,
-                           GNodeTraverseFunc func,
-               gpointer      data)
+g_node_traverse_pre_order (GNode      *node,
+         GTraverseFlags    flags,
+         GNodeTraverseFunc func,
+         gpointer      data)
 {
   if (node->children)
     {
       GNode *child;
 
       if ((flags & G_TRAVERSE_NON_LEAFS) &&
-      func (node, data))
-    return TRUE;
+    func (node, data))
+  return TRUE;
 
       child = node->children;
       while (child)
-    {
-      GNode *current;
-
-      current = child;
-      child = current->next;
-      if (g_node_traverse_pre_order (current, flags, func, data))
-        return TRUE;
-    }
+  {
+    GNode *current;
+
+    current = child;
+    child = current->next;
+    if (g_node_traverse_pre_order (current, flags, func, data))
+      return TRUE;
+  }
     }
   else if ((flags & G_TRAVERSE_LEAFS) &&
-       func (node, data))
+     func (node, data))
     return TRUE;
 
   return FALSE;
 }
 
 static gboolean
-g_node_depth_traverse_pre_order (GNode        *node,
-                 GTraverseFlags    flags,
-                 guint         depth,
-                                 GNodeTraverseFunc func,
-                 gpointer      data)
+g_node_depth_traverse_pre_order (GNode      *node,
+         GTraverseFlags    flags,
+         guint       depth,
+         GNodeTraverseFunc func,
+         gpointer    data)
 {
   if (node->children)
     {
       GNode *child;
 
       if ((flags & G_TRAVERSE_NON_LEAFS) &&
-      func (node, data))
-    return TRUE;
+    func (node, data))
+  return TRUE;
 
       depth--;
       if (!depth)
-    return FALSE;
+  return FALSE;
 
       child = node->children;
       while (child)
-    {
-      GNode *current;
-
-      current = child;
-      child = current->next;
-      if (g_node_depth_traverse_pre_order (current, flags, depth, func, data))
-        return TRUE;
-    }
+  {
+    GNode *current;
+
+    current = child;
+    child = current->next;
+    if (g_node_depth_traverse_pre_order (current, flags, depth, func, data))
+      return TRUE;
+  }
     }
   else if ((flags & G_TRAVERSE_LEAFS) &&
-       func (node, data))
+     func (node, data))
     return TRUE;
 
   return FALSE;
 }
 
 static gboolean
-g_node_traverse_post_order (GNode        *node,
-                            GTraverseFlags    flags,
-                            GNodeTraverseFunc func,
-                gpointer          data)
+g_node_traverse_post_order (GNode      *node,
+          GTraverseFlags    flags,
+          GNodeTraverseFunc func,
+          gpointer        data)
 {
   if (node->children)
     {
       GNode *child;
 
       child = node->children;
       while (child)
-    {
-      GNode *current;
+  {
+    GNode *current;
 
-      current = child;
-      child = current->next;
-      if (g_node_traverse_post_order (current, flags, func, data))
-        return TRUE;
-    }
+    current = child;
+    child = current->next;
+    if (g_node_traverse_post_order (current, flags, func, data))
+      return TRUE;
+  }
 
       if ((flags & G_TRAVERSE_NON_LEAFS) &&
-      func (node, data))
-    return TRUE;
+    func (node, data))
+  return TRUE;
 
     }
   else if ((flags & G_TRAVERSE_LEAFS) &&
-       func (node, data))
+     func (node, data))
     return TRUE;
 
   return FALSE;
 }
 
 static gboolean
-g_node_depth_traverse_post_order (GNode        *node,
-                                  GTraverseFlags    flags,
-                  guint         depth,
-                                  GNodeTraverseFunc func,
-                  gpointer      data)
+g_node_depth_traverse_post_order (GNode      *node,
+          GTraverseFlags    flags,
+          guint       depth,
+          GNodeTraverseFunc func,
+          gpointer      data)
 {
   if (node->children)
     {
       depth--;
       if (depth)
-    {
-      GNode *child;
+  {
+    GNode *child;
 
-      child = node->children;
-      while (child)
-        {
-          GNode *current;
-
-          current = child;
-          child = current->next;
-          if (g_node_depth_traverse_post_order (current, flags, depth, func, data))
-        return TRUE;
-        }
-    }
+    child = node->children;
+    while (child)
+      {
+        GNode *current;
 
-      if ((flags & G_TRAVERSE_NON_LEAFS) &&
-      func (node, data))
+        current = child;
+        child = current->next;
+        if (g_node_depth_traverse_post_order (current, flags, depth, func, data))
     return TRUE;
+      }
+  }
+
+      if ((flags & G_TRAVERSE_NON_LEAFS) &&
+    func (node, data))
+  return TRUE;
 
     }
   else if ((flags & G_TRAVERSE_LEAFS) &&
-       func (node, data))
+     func (node, data))
     return TRUE;
 
   return FALSE;
 }
 
 static gboolean
-g_node_traverse_in_order (GNode        *node,
-                          GTraverseFlags    flags,
-                          GNodeTraverseFunc func,
-              gpointer      data)
+g_node_traverse_in_order (GNode      *node,
+        GTraverseFlags    flags,
+        GNodeTraverseFunc func,
+        gpointer      data)
 {
   if (node->children)
     {
       GNode *child;
       GNode *current;
@@ -672,130 +672,130 @@
       child = node->children;
       current = child;
       child = current->next;
 
       if (g_node_traverse_in_order (current, flags, func, data))
-    return TRUE;
+  return TRUE;
 
       if ((flags & G_TRAVERSE_NON_LEAFS) &&
-      func (node, data))
-    return TRUE;
+    func (node, data))
+  return TRUE;
 
       while (child)
-    {
-      current = child;
-      child = current->next;
-      if (g_node_traverse_in_order (current, flags, func, data))
-        return TRUE;
-    }
+  {
+    current = child;
+    child = current->next;
+    if (g_node_traverse_in_order (current, flags, func, data))
+      return TRUE;
+  }
     }
   else if ((flags & G_TRAVERSE_LEAFS) &&
-       func (node, data))
+     func (node, data))
     return TRUE;
 
   return FALSE;
 }
 
 static gboolean
-g_node_depth_traverse_in_order (GNode        *node,
-                GTraverseFlags    flags,
-                guint         depth,
-                                GNodeTraverseFunc func,
-                gpointer      data)
+g_node_depth_traverse_in_order (GNode    *node,
+        GTraverseFlags    flags,
+        guint     depth,
+        GNodeTraverseFunc func,
+        gpointer    data)
 {
   if (node->children)
     {
       depth--;
       if (depth)
-    {
-      GNode *child;
-      GNode *current;
-
-      child = node->children;
-      current = child;
-      child = current->next;
-
-      if (g_node_depth_traverse_in_order (current, flags, depth, func, data))
-        return TRUE;
-
-      if ((flags & G_TRAVERSE_NON_LEAFS) &&
-          func (node, data))
-        return TRUE;
-
-      while (child)
-        {
-          current = child;
-          child = current->next;
-          if (g_node_depth_traverse_in_order (current, flags, depth, func, data))
-        return TRUE;
-        }
-    }
-      else if ((flags & G_TRAVERSE_NON_LEAFS) &&
-           func (node, data))
+  {
+    GNode *child;
+    GNode *current;
+
+    child = node->children;
+    current = child;
+    child = current->next;
+
+    if (g_node_depth_traverse_in_order (current, flags, depth, func, data))
+      return TRUE;
+
+    if ((flags & G_TRAVERSE_NON_LEAFS) &&
+        func (node, data))
+      return TRUE;
+
+    while (child)
+      {
+        current = child;
+        child = current->next;
+        if (g_node_depth_traverse_in_order (current, flags, depth, func, data))
     return TRUE;
+      }
+  }
+      else if ((flags & G_TRAVERSE_NON_LEAFS) &&
+         func (node, data))
+  return TRUE;
     }
   else if ((flags & G_TRAVERSE_LEAFS) &&
-       func (node, data))
+     func (node, data))
     return TRUE;
 
   return FALSE;
 }
 
 static gboolean
-g_node_traverse_level (GNode         *node,
-               GTraverseFlags     flags,
-               guint          level,
-                       GNodeTraverseFunc  func,
-               gpointer           data,
-                       gboolean          *more_levels)
+g_node_traverse_level (GNode     *node,
+           GTraverseFlags   flags,
+           guint      level,
+           GNodeTraverseFunc  func,
+           gpointer           data,
+           gboolean          *more_levels)
 {
   if (level == 0)
     {
       if (node->children)
-    {
-      *more_levels = TRUE;
-      return (flags & G_TRAVERSE_NON_LEAFS) && func (node, data);
-    }
+  {
+    *more_levels = TRUE;
+    return (flags & G_TRAVERSE_NON_LEAFS) && func (node, data);
+  }
       else
-    {
-      return (flags & G_TRAVERSE_LEAFS) && func (node, data);
-    }
+  {
+    return (flags & G_TRAVERSE_LEAFS) && func (node, data);
+  }
     }
   else
     {
       node = node->children;
 
       while (node)
-    {
-      if (g_node_traverse_level (node, flags, level - 1, func, data, more_levels))
-        return TRUE;
+  {
+    if (g_node_traverse_level (node, flags, level - 1, func, data, more_levels))
+      return TRUE;
 
-      node = node->next;
-    }
+    node = node->next;
+  }
     }
 
   return FALSE;
 }
 
 static gboolean
 g_node_depth_traverse_level (GNode             *node,
-                 GTraverseFlags flags,
-                 gint       depth,
-                             GNodeTraverseFunc  func,
-                 gpointer           data)
+           GTraverseFlags flags,
+           gint   depth,
+           GNodeTraverseFunc  func,
+           gpointer         data)
 {
   guint level;
   gboolean more_levels;
 
   level = 0;
   while (depth < 0 || level != (guint) depth)
     {
       more_levels = FALSE;
       if (g_node_traverse_level (node, flags, level, func, data, &more_levels))
-    return TRUE;
+  return TRUE;
       if (!more_levels)
-    break;
+  break;
       level++;
     }
   return FALSE;
 }
 
@@ -874,16 +874,16 @@
  * %TRUE, then the traversal is stopped.
  *
  * Returns: %TRUE to stop the traversal.
  **/
 void
-g_node_traverse (GNode        *root,
-         GTraverseType     order,
-         GTraverseFlags    flags,
-         gint          depth,
-                 GNodeTraverseFunc func,
-         gpointer      data)
+g_node_traverse (GNode      *root,
+     GTraverseType     order,
+     GTraverseFlags    flags,
+     gint      depth,
+     GNodeTraverseFunc func,
+     gpointer    data)
 {
   g_return_if_fail (root != NULL);
   g_return_if_fail (func != NULL);
   g_return_if_fail (order <= G_LEVEL_ORDER);
   g_return_if_fail (flags <= G_TRAVERSE_MASK);
@@ -891,35 +891,35 @@
 
   switch (order)
     {
     case G_PRE_ORDER:
       if (depth < 0)
-    g_node_traverse_pre_order (root, flags, func, data);
+  g_node_traverse_pre_order (root, flags, func, data);
       else
-    g_node_depth_traverse_pre_order (root, flags, depth, func, data);
+  g_node_depth_traverse_pre_order (root, flags, depth, func, data);
       break;
     case G_POST_ORDER:
       if (depth < 0)
-    g_node_traverse_post_order (root, flags, func, data);
+  g_node_traverse_post_order (root, flags, func, data);
       else
-    g_node_depth_traverse_post_order (root, flags, depth, func, data);
+  g_node_depth_traverse_post_order (root, flags, depth, func, data);
       break;
     case G_IN_ORDER:
       if (depth < 0)
-    g_node_traverse_in_order (root, flags, func, data);
+  g_node_traverse_in_order (root, flags, func, data);
       else
-    g_node_depth_traverse_in_order (root, flags, depth, func, data);
+  g_node_depth_traverse_in_order (root, flags, depth, func, data);
       break;
     case G_LEVEL_ORDER:
       g_node_depth_traverse_level (root, flags, depth, func, data);
       break;
     }
 }
 
 static gboolean
 g_node_find_func (GNode    *node,
-          gpointer  data)
+      gpointer  data)
 {
   gpointer *d = data;
 
   if (*d != node->data)
     return FALSE;
@@ -942,13 +942,13 @@
  *
  * Returns: the found #GNode, or %NULL if the data is not found
  */
 GNode*
 g_node_find (GNode      *root,
-             GTraverseType   order,
-             GTraverseFlags  flags,
-             gpointer        data)
+       GTraverseType   order,
+       GTraverseFlags  flags,
+       gpointer        data)
 {
   gpointer d[2];
 
   g_return_val_if_fail (root != NULL, NULL);
   g_return_val_if_fail (order <= G_LEVEL_ORDER, NULL);
@@ -961,27 +961,27 @@
 
   return d[1];
 }
 
 static void
-g_node_count_func (GNode     *node,
-                   GTraverseFlags flags,
-           guint     *n)
+g_node_count_func (GNode   *node,
+       GTraverseFlags flags,
+       guint   *n)
 {
   if (node->children)
     {
       GNode *child;
 
       if (flags & G_TRAVERSE_NON_LEAFS)
-    (*n)++;
+  (*n)++;
 
       child = node->children;
       while (child)
-    {
-      g_node_count_func (child, flags, n);
-      child = child->next;
-    }
+  {
+    g_node_count_func (child, flags, n);
+    child = child->next;
+  }
     }
   else if (flags & G_TRAVERSE_LEAFS)
     (*n)++;
 }
 
@@ -994,12 +994,12 @@
  * Gets the number of nodes in a tree.
  *
  * Returns: the number of nodes in the tree
  */
 guint
-g_node_n_nodes (GNode          *root,
-                GTraverseFlags  flags)
+g_node_n_nodes (GNode        *root,
+    GTraverseFlags  flags)
 {
   guint n = 0;
 
   g_return_val_if_fail (root != NULL, 0);
   g_return_val_if_fail (flags <= G_TRAVERSE_MASK, 0);
@@ -1041,11 +1041,11 @@
  *
  * Returns: the child of @node at index @n
  */
 GNode*
 g_node_nth_child (GNode *node,
-          guint  n)
+      guint  n)
 {
   g_return_val_if_fail (node != NULL, NULL);
 
   node = node->children;
   if (node)
@@ -1090,33 +1090,33 @@
  * Finds the first child of a #GNode with the given data.
  *
  * Returns: the found child #GNode, or %NULL if the data is not found
  */
 GNode*
-g_node_find_child (GNode      *node,
-                   GTraverseFlags  flags,
-           gpointer    data)
+g_node_find_child (GNode    *node,
+       GTraverseFlags  flags,
+       gpointer    data)
 {
   g_return_val_if_fail (node != NULL, NULL);
   g_return_val_if_fail (flags <= G_TRAVERSE_MASK, NULL);
 
   node = node->children;
   while (node)
     {
       if (node->data == data)
-    {
-      if (G_NODE_IS_LEAF (node))
-        {
-          if (flags & G_TRAVERSE_LEAFS)
-        return node;
-        }
-      else
-        {
-          if (flags & G_TRAVERSE_NON_LEAFS)
-        return node;
-        }
-    }
+  {
+    if (G_NODE_IS_LEAF (node))
+      {
+        if (flags & G_TRAVERSE_LEAFS)
+    return node;
+      }
+    else
+      {
+        if (flags & G_TRAVERSE_NON_LEAFS)
+    return node;
+      }
+  }
       node = node->next;
     }
 
   return NULL;
 }
@@ -1132,11 +1132,11 @@
  *
  * Returns: the position of @child with respect to its siblings
  */
 gint
 g_node_child_position (GNode *node,
-               GNode *child)
+           GNode *child)
 {
   guint n = 0;
 
   g_return_val_if_fail (node != NULL, -1);
   g_return_val_if_fail (child != NULL, -1);
@@ -1144,11 +1144,11 @@
 
   node = node->children;
   while (node)
     {
       if (node == child)
-    return n;
+  return n;
       n++;
       node = node->next;
     }
 
   return -1;
@@ -1165,21 +1165,21 @@
  * Returns: the index of the child of @node which contains
  *     @data, or -1 if the data is not found
  */
 gint
 g_node_child_index (GNode    *node,
-            gpointer  data)
+        gpointer  data)
 {
   guint n = 0;
 
   g_return_val_if_fail (node != NULL, -1);
 
   node = node->children;
   while (node)
     {
       if (node->data == data)
-    return n;
+  return n;
       n++;
       node = node->next;
     }
 
   return -1;
@@ -1248,14 +1248,14 @@
  * Specifies the type of function passed to g_node_children_foreach().
  * The function is called with each child node, together with the user
  * data passed to g_node_children_foreach().
  **/
 void
-g_node_children_foreach (GNode        *node,
-             GTraverseFlags    flags,
-                         GNodeForeachFunc  func,
-             gpointer      data)
+g_node_children_foreach (GNode      *node,
+       GTraverseFlags    flags,
+       GNodeForeachFunc  func,
+       gpointer    data)
 {
   g_return_if_fail (node != NULL);
   g_return_if_fail (flags <= G_TRAVERSE_MASK);
   g_return_if_fail (func != NULL);
 
@@ -1265,16 +1265,16 @@
       GNode *current;
 
       current = node;
       node = current->next;
       if (G_NODE_IS_LEAF (current))
-    {
-      if (flags & G_TRAVERSE_LEAFS)
-        func (current, data);
-    }
+  {
+    if (flags & G_TRAVERSE_LEAFS)
+      func (current, data);
+  }
       else
-    {
-      if (flags & G_TRAVERSE_NON_LEAFS)
-        func (current, data);
-    }
+  {
+    if (flags & G_TRAVERSE_NON_LEAFS)
+      func (current, data);
+  }
     }
 }
