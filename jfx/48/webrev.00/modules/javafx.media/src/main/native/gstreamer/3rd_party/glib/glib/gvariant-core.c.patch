diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gvariant-core.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gvariant-core.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gvariant-core.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gvariant-core.c
@@ -1,8 +1,8 @@
 /*
- * Copyright � 2007, 2008 Ryan Lortie
- * Copyright � 2010 Codethink Limited
+ * Copyright (C) 2007, 2008 Ryan Lortie
+ * Copyright (C) 2010 Codethink Limited
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 2.1 of the License, or (at your option) any later version.
@@ -26,10 +26,11 @@
 #include <glib/gbitlock.h>
 #include <glib/gatomic.h>
 #include <glib/gbytes.h>
 #include <glib/gslice.h>
 #include <glib/gmem.h>
+#include <glib/grefcount.h>
 #include <string.h>
 
 
 /*
  * This file includes the structure definition for GVariant and a small
@@ -72,11 +73,11 @@
       gsize n_children;
     } tree;
   } contents;
 
   gint state;
-  gint ref_count;
+  gatomicrefcount ref_count;
   gsize depth;
 };
 
 /* struct GVariant:
  *
@@ -333,11 +334,11 @@
 static void
 g_variant_ensure_size (GVariant *value)
 {
   g_assert (value->state & STATE_LOCKED);
 
-  if (value->size == (gssize) -1)
+  if (value->size == (gsize) -1)
     {
       gpointer *children;
       gsize n_children;
 
       children = (gpointer *) value->contents.tree.children;
@@ -491,11 +492,11 @@
   value->type_info = g_variant_type_info_get (type);
   value->state = (serialised ? STATE_SERIALISED : 0) |
                  (trusted ? STATE_TRUSTED : 0) |
                  STATE_FLOATING;
   value->size = (gssize) -1;
-  value->ref_count = 1;
+  g_atomic_ref_count_init (&value->ref_count);
   value->depth = 0;
 
   return value;
 }
 
@@ -509,10 +510,14 @@
  * inner interface for creation of new serialised values that gets
  * called from various functions in gvariant.c.
  *
  * A reference is taken on @bytes.
  *
+ * The data in @bytes must be aligned appropriately for the @type being loaded.
+ * Otherwise this function will internally create a copy of the memory (since
+ * GLib 2.60) or (in older versions) fail and exit the process.
+ *
  * Returns: (transfer none): a new #GVariant with a floating reference
  *
  * Since: 2.36
  */
 GVariant *
@@ -521,23 +526,64 @@
                           gboolean            trusted)
 {
   GVariant *value;
   guint alignment;
   gsize size;
+  GBytes *owned_bytes = NULL;
+  GVariantSerialised serialised;
 
   value = g_variant_alloc (type, TRUE, trusted);
 #ifdef GSTREAMER_LITE
   if (value == NULL) {
     return NULL;
   }
 #endif // GSTREAMER_LITE
 
-  value->contents.serialised.bytes = g_bytes_ref (bytes);
-
   g_variant_type_info_query (value->type_info,
                              &alignment, &size);
 
+  /* Ensure the alignment is correct. This is a huge performance hit if it's
+   * not correct, but that's better than aborting if a caller provides data
+   * with the wrong alignment (which is likely to happen very occasionally, and
+   * only cause an abort on some architectures - so is unlikely to be caught
+   * in testing). Callers can always actively ensure they use the correct
+   * alignment to avoid the performance hit. */
+  serialised.type_info = value->type_info;
+  serialised.data = (guchar *) g_bytes_get_data (bytes, &serialised.size);
+  serialised.depth = 0;
+
+  if (!g_variant_serialised_check (serialised))
+    {
+#ifdef HAVE_POSIX_MEMALIGN
+      gpointer aligned_data = NULL;
+      gsize aligned_size = g_bytes_get_size (bytes);
+
+      /* posix_memalign() requires the alignment to be a multiple of
+       * sizeof(void*), and a power of 2. See g_variant_type_info_query() for
+       * details on the alignment format. */
+      if (posix_memalign (&aligned_data, MAX (sizeof (void *), alignment + 1),
+                          aligned_size) != 0)
+        g_error ("posix_memalign failed");
+
+      memcpy (aligned_data, g_bytes_get_data (bytes, NULL), aligned_size);
+
+      bytes = owned_bytes = g_bytes_new_with_free_func (aligned_data,
+                                                        aligned_size,
+                                                        free, aligned_data);
+      aligned_data = NULL;
+#else
+      /* NOTE: there may be platforms that lack posix_memalign() and also
+       * have malloc() that returns non-8-aligned.  if so, we need to try
+       * harder here.
+       */
+      bytes = owned_bytes = g_bytes_new (g_bytes_get_data (bytes, NULL),
+                                         g_bytes_get_size (bytes));
+#endif
+    }
+
+  value->contents.serialised.bytes = g_bytes_ref (bytes);
+
   if (size && g_bytes_get_size (bytes) != size)
     {
       /* Creating a fixed-sized GVariant with a bytes of the wrong
        * size.
        *
@@ -551,10 +597,12 @@
   else
     {
       value->contents.serialised.data = g_bytes_get_data (bytes, &value->size);
     }
 
+  g_clear_pointer (&owned_bytes, g_bytes_unref);
+
   return value;
 }
 
 /* -- internal -- */
 
@@ -645,13 +693,12 @@
  **/
 void
 g_variant_unref (GVariant *value)
 {
   g_return_if_fail (value != NULL);
-  g_return_if_fail (value->ref_count > 0);
 
-  if (g_atomic_int_dec_and_test (&value->ref_count))
+  if (g_atomic_ref_count_dec (&value->ref_count))
     {
       if G_UNLIKELY (value->state & STATE_LOCKED)
         g_critical ("attempting to free a locked GVariant instance.  "
                     "This should never happen.");
 
@@ -681,13 +728,12 @@
  **/
 GVariant *
 g_variant_ref (GVariant *value)
 {
   g_return_val_if_fail (value != NULL, NULL);
-  g_return_val_if_fail (value->ref_count > 0, NULL);
 
-  g_atomic_int_inc (&value->ref_count);
+  g_atomic_ref_count_inc (&value->ref_count);
 
   return value;
 }
 
 /**
@@ -723,11 +769,11 @@
  **/
 GVariant *
 g_variant_ref_sink (GVariant *value)
 {
   g_return_val_if_fail (value != NULL, NULL);
-  g_return_val_if_fail (value->ref_count > 0, NULL);
+  g_return_val_if_fail (!g_atomic_ref_count_compare (&value->ref_count, 0), NULL);
 
   g_variant_lock (value);
 
   if (~value->state & STATE_FLOATING)
     g_variant_ref (value);
@@ -780,11 +826,11 @@
  **/
 GVariant *
 g_variant_take_ref (GVariant *value)
 {
   g_return_val_if_fail (value != NULL, NULL);
-  g_return_val_if_fail (value->ref_count > 0, NULL);
+  g_return_val_if_fail (!g_atomic_ref_count_compare (&value->ref_count, 0), NULL);
 
   g_atomic_int_and (&value->state, ~STATE_FLOATING);
 
   return value;
 }
@@ -916,10 +962,16 @@
 
   bytes_data = g_bytes_get_data (value->contents.serialised.bytes, &bytes_size);
   data = value->contents.serialised.data;
   size = value->size;
 
+  if (data == NULL)
+    {
+      g_assert (size == 0);
+      data = bytes_data;
+    }
+
   if (data == bytes_data && size == bytes_size)
     return g_bytes_ref (value->contents.serialised.bytes);
   else
     return g_bytes_new_from_bytes (value->contents.serialised.bytes,
                                    data - bytes_data, size);
@@ -1067,11 +1119,11 @@
 #endif // GSTREAMER_LITE
     child->type_info = s_child.type_info;
     child->state = (value->state & STATE_TRUSTED) |
                    STATE_SERIALISED;
     child->size = s_child.size;
-    child->ref_count = 1;
+    g_atomic_ref_count_init (&child->ref_count);
     child->depth = value->depth + 1;
     child->contents.serialised.bytes =
       g_bytes_ref (value->contents.serialised.bytes);
     child->contents.serialised.data = s_child.data;
 
