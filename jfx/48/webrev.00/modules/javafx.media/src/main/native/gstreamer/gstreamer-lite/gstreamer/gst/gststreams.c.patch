diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gststreams.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gststreams.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gststreams.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gststreams.c
@@ -53,13 +53,10 @@
 #include "gststreams.h"
 
 GST_DEBUG_CATEGORY_STATIC (streams_debug);
 #define GST_CAT_DEFAULT streams_debug
 
-#define GST_STREAM_GET_PRIVATE(obj)  \
-   (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GST_TYPE_STREAM, GstStreamPrivate))
-
 struct _GstStreamPrivate
 {
   GstStreamFlags flags;
   GstStreamType type;
   GstTagList *tags;
@@ -94,29 +91,28 @@
 static void gst_stream_set_property (GObject * object, guint prop_id,
     const GValue * value, GParamSpec * pspec);
 static void gst_stream_get_property (GObject * object, guint prop_id,
     GValue * value, GParamSpec * pspec);
 
-#define _do_init                \
+#define _do_init        \
 { \
   GST_DEBUG_CATEGORY_INIT (streams_debug, "streams", GST_DEBUG_BOLD, \
       "debugging info for the stream and stream collection objects"); \
   \
 }
 
 #define gst_stream_parent_class parent_class
-G_DEFINE_TYPE_WITH_CODE (GstStream, gst_stream, GST_TYPE_OBJECT, _do_init);
+G_DEFINE_TYPE_WITH_CODE (GstStream, gst_stream, GST_TYPE_OBJECT,
+    G_ADD_PRIVATE (GstStream) _do_init);
 
 static void
 gst_stream_class_init (GstStreamClass * klass)
 {
   GObjectClass *gobject_class;
 
   gobject_class = (GObjectClass *) klass;
 
-  g_type_class_add_private (klass, sizeof (GstStreamPrivate));
-
   gobject_class->set_property = gst_stream_set_property;
   gobject_class->get_property = gst_stream_get_property;
 
   /**
    * GstStream:stream-id:
@@ -182,11 +178,11 @@
 }
 
 static void
 gst_stream_init (GstStream * stream)
 {
-  stream->priv = GST_STREAM_GET_PRIVATE (stream);
+  stream->priv = gst_stream_get_instance_private (stream);
   stream->priv->type = GST_STREAM_TYPE_UNKNOWN;
 }
 
 static void
 gst_stream_finalize (GObject * object)
@@ -232,16 +228,18 @@
 }
 
 static void
 gst_stream_set_stream_id (GstStream * stream, const gchar * stream_id)
 {
+  g_return_if_fail (GST_IS_STREAM (stream));
+
   GST_OBJECT_LOCK (stream);
   g_assert (stream->stream_id == NULL);
   if (stream_id)
     stream->stream_id = g_strdup (stream_id);
   else {
-    /* Create a randoom stream_id if NULL */
+    /* Create a random stream_id if NULL */
     GST_FIXME_OBJECT (stream, "Creating random stream-id, consider "
         "implementing a deterministic way of creating a stream-id");
     stream->stream_id =
         g_strdup_printf ("%08x%08x%08x%08x", g_random_int (), g_random_int (),
         g_random_int (), g_random_int ());
@@ -262,10 +260,12 @@
  * Since: 1.10
  */
 const gchar *
 gst_stream_get_stream_id (GstStream * stream)
 {
+  g_return_val_if_fail (GST_IS_STREAM (stream), NULL);
+
   return stream->stream_id;
 }
 
 /**
  * gst_stream_set_stream_flags:
@@ -277,10 +277,12 @@
  * Since: 1.10
  */
 void
 gst_stream_set_stream_flags (GstStream * stream, GstStreamFlags flags)
 {
+  g_return_if_fail (GST_IS_STREAM (stream));
+
   GST_OBJECT_LOCK (stream);
   stream->priv->flags = flags;
   GST_OBJECT_UNLOCK (stream);
 
   g_object_notify_by_pspec (G_OBJECT (stream),
@@ -300,10 +302,12 @@
 GstStreamFlags
 gst_stream_get_stream_flags (GstStream * stream)
 {
   GstStreamFlags res;
 
+  g_return_val_if_fail (GST_IS_STREAM (stream), GST_STREAM_FLAG_NONE);
+
   GST_OBJECT_LOCK (stream);
   res = stream->priv->flags;
   GST_OBJECT_UNLOCK (stream);
 
   return res;
@@ -319,10 +323,12 @@
  * Since: 1.10
  */
 void
 gst_stream_set_stream_type (GstStream * stream, GstStreamType stream_type)
 {
+  g_return_if_fail (GST_IS_STREAM (stream));
+
   GST_OBJECT_LOCK (stream);
   stream->priv->type = stream_type;
   GST_OBJECT_UNLOCK (stream);
 
   g_object_notify_by_pspec (G_OBJECT (stream),
@@ -342,10 +348,12 @@
 GstStreamType
 gst_stream_get_stream_type (GstStream * stream)
 {
   GstStreamType res;
 
+  g_return_val_if_fail (GST_IS_STREAM (stream), GST_STREAM_TYPE_UNKNOWN);
+
   GST_OBJECT_LOCK (stream);
   res = stream->priv->type;
   GST_OBJECT_UNLOCK (stream);
 
   return res;
@@ -363,10 +371,12 @@
 void
 gst_stream_set_tags (GstStream * stream, GstTagList * tags)
 {
   gboolean notify = FALSE;
 
+  g_return_if_fail (GST_IS_STREAM (stream));
+
   GST_OBJECT_LOCK (stream);
   if (stream->priv->tags == NULL || tags == NULL
       || !gst_tag_list_is_equal (stream->priv->tags, tags)) {
     gst_mini_object_replace ((GstMiniObject **) & stream->priv->tags,
         (GstMiniObject *) tags);
@@ -391,10 +401,12 @@
 GstTagList *
 gst_stream_get_tags (GstStream * stream)
 {
   GstTagList *res = NULL;
 
+  g_return_val_if_fail (GST_IS_STREAM (stream), NULL);
+
   GST_OBJECT_LOCK (stream);
   if (stream->priv->tags)
     res = gst_tag_list_ref (stream->priv->tags);
   GST_OBJECT_UNLOCK (stream);
 
@@ -413,10 +425,12 @@
 void
 gst_stream_set_caps (GstStream * stream, GstCaps * caps)
 {
   gboolean notify = FALSE;
 
+  g_return_if_fail (GST_IS_STREAM (stream));
+
   GST_OBJECT_LOCK (stream);
   if (stream->priv->caps == NULL || (caps
           && !gst_caps_is_equal (stream->priv->caps, caps))) {
     gst_caps_replace (&stream->priv->caps, caps);
     notify = TRUE;
@@ -441,10 +455,12 @@
 GstCaps *
 gst_stream_get_caps (GstStream * stream)
 {
   GstCaps *res = NULL;
 
+  g_return_val_if_fail (GST_IS_STREAM (stream), NULL);
+
   GST_OBJECT_LOCK (stream);
   if (stream->priv->caps)
     res = gst_caps_ref (stream->priv->caps);
   GST_OBJECT_UNLOCK (stream);
 
