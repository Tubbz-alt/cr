diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstpadtemplate.h b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstpadtemplate.h
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstpadtemplate.h
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstpadtemplate.h
@@ -38,17 +38,17 @@
 #include <gst/gsttask.h>
 
 G_BEGIN_DECLS
 
 #ifndef GSTREAMER_LITE
-#define GST_TYPE_STATIC_PAD_TEMPLATE    (gst_static_pad_template_get_type ())
+#define GST_TYPE_STATIC_PAD_TEMPLATE  (gst_static_pad_template_get_type ())
 #endif // GSTREAMER_LITE
 
-#define GST_TYPE_PAD_TEMPLATE       (gst_pad_template_get_type ())
-#define GST_PAD_TEMPLATE(obj)       (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PAD_TEMPLATE,GstPadTemplate))
-#define GST_PAD_TEMPLATE_CLASS(klass)   (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PAD_TEMPLATE,GstPadTemplateClass))
-#define GST_IS_PAD_TEMPLATE(obj)    (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PAD_TEMPLATE))
+#define GST_TYPE_PAD_TEMPLATE   (gst_pad_template_get_type ())
+#define GST_PAD_TEMPLATE(obj)   (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PAD_TEMPLATE,GstPadTemplate))
+#define GST_PAD_TEMPLATE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PAD_TEMPLATE,GstPadTemplateClass))
+#define GST_IS_PAD_TEMPLATE(obj)  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PAD_TEMPLATE))
 #define GST_IS_PAD_TEMPLATE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_PAD_TEMPLATE))
 
 /**
  * GstPadPresence:
  * @GST_PAD_ALWAYS: the pad is always available
@@ -68,45 +68,45 @@
  * GST_PAD_TEMPLATE_NAME_TEMPLATE:
  * @templ: the template to query
  *
  * Get the nametemplate of the padtemplate.
  */
-#define GST_PAD_TEMPLATE_NAME_TEMPLATE(templ)   (((GstPadTemplate *)(templ))->name_template)
+#define GST_PAD_TEMPLATE_NAME_TEMPLATE(templ) (((GstPadTemplate *)(templ))->name_template)
 
 /**
  * GST_PAD_TEMPLATE_DIRECTION:
  * @templ: the template to query
  *
  * Get the #GstPadDirection of the padtemplate.
  */
-#define GST_PAD_TEMPLATE_DIRECTION(templ)   (((GstPadTemplate *)(templ))->direction)
+#define GST_PAD_TEMPLATE_DIRECTION(templ) (((GstPadTemplate *)(templ))->direction)
 
 /**
  * GST_PAD_TEMPLATE_PRESENCE:
  * @templ: the template to query
  *
  * Get the #GstPadPresence of the padtemplate.
  */
-#define GST_PAD_TEMPLATE_PRESENCE(templ)    (((GstPadTemplate *)(templ))->presence)
+#define GST_PAD_TEMPLATE_PRESENCE(templ)  (((GstPadTemplate *)(templ))->presence)
 
 /**
  * GST_PAD_TEMPLATE_CAPS:
  * @templ: the template to query
  *
  * Get a handle to the padtemplate #GstCaps
  */
-#define GST_PAD_TEMPLATE_CAPS(templ)        (((GstPadTemplate *)(templ))->caps)
+#define GST_PAD_TEMPLATE_CAPS(templ)    (((GstPadTemplate *)(templ))->caps)
 
 /**
  * GST_PAD_TEMPLATE_GTYPE:
  * @templ: the template to query
  *
  * Get the #GType of the padtemplate
  *
  * Since: 1.14
  */
-#define GST_PAD_TEMPLATE_GTYPE(templ)       (((GstPadTemplate *)(templ))->ABI.abi.gtype)
+#define GST_PAD_TEMPLATE_GTYPE(templ)   (((GstPadTemplate *)(templ))->ABI.abi.gtype)
 
 /**
  * GstPadTemplateFlags:
  * @GST_PAD_TEMPLATE_FLAG_LAST: first flag that can be used by subclasses.
  *
@@ -121,11 +121,11 @@
  * GST_PAD_TEMPLATE_IS_FIXED:
  * @templ: the template to query
  *
  * Check if the properties of the padtemplate are fixed
  */
-#define GST_PAD_TEMPLATE_IS_FIXED(templ)    (GST_OBJECT_FLAG_IS_SET(templ, GST_PAD_TEMPLATE_FIXED))
+#define GST_PAD_TEMPLATE_IS_FIXED(templ)  (GST_OBJECT_FLAG_IS_SET(templ, GST_PAD_TEMPLATE_FIXED))
 
 /**
  * GstPadTemplate:
  *
  * The padtemplate object.
@@ -134,26 +134,26 @@
   GstObject    object;
 
   gchar           *name_template;
   GstPadDirection  direction;
   GstPadPresence   presence;
-  GstCaps     *caps;
+  GstCaps   *caps;
 
   /*< private >*/
   union {
-  gpointer _gst_reserved[GST_PADDING];
+    gpointer _gst_reserved[GST_PADDING];
     struct {
       GType gtype;
     } abi;
   } ABI;
 };
 
 struct _GstPadTemplateClass {
   GstObjectClass   parent_class;
 
   /* signal callbacks */
-  void (*pad_created)   (GstPadTemplate *templ, GstPad *pad);
+  void (*pad_created) (GstPadTemplate *templ, GstPad *pad);
 
   /*< private >*/
   gpointer _gst_reserved[GST_PADDING];
 };
 
@@ -178,12 +178,18 @@
  * @padname: the name template of the pad
  * @dir: the GstPadDirection of the pad
  * @pres: the GstPadPresence of the pad
  * @caps: the GstStaticCaps of the pad
  *
- * Convenience macro to fill the values of a GstStaticPadTemplate
+ * Convenience macro to fill the values of a #GstStaticPadTemplate
  * structure.
+ * Example:
+ * |[<!-- language="C" -->
+ * static GstStaticPadTemplate my_src_template = \
+ *   GST_STATIC_PAD_TEMPLATE("src", GST_PAD_SRC, GST_PAD_ALWAYS,
+ *                           GST_STATIC_CAPS_ANY);
+ * ]|
  */
 #define GST_STATIC_PAD_TEMPLATE(padname, dir, pres, caps) \
 { \
   /* name_template */    padname, \
   /* direction */        dir, \
@@ -192,37 +198,37 @@
 }
 
 /* templates and factories */
 
 GST_API
-GType           gst_pad_template_get_type       (void);
+GType     gst_pad_template_get_type   (void);
 #ifndef GSTREAMER_LITE
 GST_API
-GType           gst_static_pad_template_get_type    (void);
+GType     gst_static_pad_template_get_type  (void);
 #endif // GSTREAMER_LITE
 
 GST_API
-GstPadTemplate*     gst_pad_template_new            (const gchar *name_template,
+GstPadTemplate*   gst_pad_template_new      (const gchar *name_template,
                                  GstPadDirection direction, GstPadPresence presence,
                                  GstCaps *caps) G_GNUC_MALLOC;
 GST_API
-GstPadTemplate*     gst_pad_template_new_with_gtype     (const gchar *name_template,
+GstPadTemplate*   gst_pad_template_new_with_gtype   (const gchar *name_template,
                                  GstPadDirection direction, GstPadPresence presence,
                                  GstCaps *caps, GType pad_type) G_GNUC_MALLOC;
 GST_API
-GstPadTemplate *    gst_static_pad_template_get             (GstStaticPadTemplate *pad_template);
+GstPadTemplate *  gst_static_pad_template_get             (GstStaticPadTemplate *pad_template);
 
 GST_API
 GstPadTemplate * gst_pad_template_new_from_static_pad_template_with_gtype (
     GstStaticPadTemplate * pad_template,
     GType pad_type);
 
 GST_API
-GstCaps*        gst_static_pad_template_get_caps    (GstStaticPadTemplate *templ);
+GstCaps*    gst_static_pad_template_get_caps  (GstStaticPadTemplate *templ);
 
 GST_API
-GstCaps*        gst_pad_template_get_caps       (GstPadTemplate *templ);
+GstCaps*    gst_pad_template_get_caps   (GstPadTemplate *templ);
 
 GST_API
 void                    gst_pad_template_pad_created            (GstPadTemplate * templ, GstPad * pad);
 
 #ifdef G_DEFINE_AUTOPTR_CLEANUP_FUNC
