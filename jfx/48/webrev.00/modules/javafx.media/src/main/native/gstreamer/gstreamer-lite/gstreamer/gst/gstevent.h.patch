diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstevent.h b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstevent.h
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstevent.h
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstevent.h
@@ -77,29 +77,29 @@
  * @GST_EVENT_UNKNOWN: unknown event.
  * @GST_EVENT_FLUSH_START: Start a flush operation. This event clears all data
  *                 from the pipeline and unblock all streaming threads.
  * @GST_EVENT_FLUSH_STOP: Stop a flush operation. This event resets the
  *                 running-time of the pipeline.
- * @GST_EVENT_SELECT_STREAMS: A request to select one or more streams (Since 1.10)
+ * @GST_EVENT_SELECT_STREAMS: A request to select one or more streams (Since: 1.10)
  * @GST_EVENT_STREAM_START: Event to mark the start of a new stream. Sent before any
  *                 other serialized event and only sent at the start of a new stream,
  *                 not after flushing seeks.
  * @GST_EVENT_CAPS: #GstCaps event. Notify the pad of a new media type.
  * @GST_EVENT_SEGMENT: A new media segment follows in the dataflow. The
  *                 segment events contains information for clipping buffers and
  *                 converting buffer timestamps to running-time and
  *                 stream-time.
- * @GST_EVENT_STREAM_COLLECTION: A new #GstStreamCollection is available (Since 1.10)
+ * @GST_EVENT_STREAM_COLLECTION: A new #GstStreamCollection is available (Since: 1.10)
  * @GST_EVENT_TAG: A new set of metadata tags has been found in the stream.
  * @GST_EVENT_BUFFERSIZE: Notification of buffering requirements. Currently not
  *                 used yet.
  * @GST_EVENT_SINK_MESSAGE: An event that sinks turn into a message. Used to
  *                          send messages that should be emitted in sync with
  *                          rendering.
  * @GST_EVENT_STREAM_GROUP_DONE: Indicates that there is no more data for
  *                 the stream group ID in the message. Sent before EOS
- *                 in some instances and should be handled mostly the same. (Since 1.10)
+ *                 in some instances and should be handled mostly the same. (Since: 1.10)
  * @GST_EVENT_EOS: End-Of-Stream. No more data is to be expected to follow
  *                 without either a STREAM_START event, or a FLUSH_STOP and a SEGMENT
  *                 event.
  * @GST_EVENT_SEGMENT_DONE: Marks the end of a segment playback.
  * @GST_EVENT_GAP: Marks a gap in the datastream.
@@ -254,10 +254,11 @@
  * @event: the event to query
  *
  * Get the #GstClockTime timestamp of the event. This is the time when the event
  * was created.
  */
+/* FIXME 2.0: Remove the GstEvent::timestamp field */
 #define GST_EVENT_TIMESTAMP(event)      (GST_EVENT_CAST(event)->timestamp)
 
 /**
  * GST_EVENT_SEQNUM:
  * @event: the event to query
@@ -408,10 +409,11 @@
 struct _GstEvent {
   GstMiniObject mini_object;
 
   /*< public >*/ /* with COW */
   GstEventType  type;
+  /* FIXME 2.0: Remove the GstEvent::timestamp field */
   guint64       timestamp;
   guint32       seqnum;
 };
 
 GST_API
@@ -450,10 +452,29 @@
 gst_event_unref (GstEvent * event)
 {
   gst_mini_object_unref (GST_MINI_OBJECT_CAST (event));
 }
 
+/**
+ * gst_clear_event: (skip)
+ * @event_ptr: a pointer to a #GstEvent reference
+ *
+ * Clears a reference to a #GstEvent.
+ *
+ * @event_ptr must not be %NULL.
+ *
+ * If the reference is %NULL then this function does nothing. Otherwise, the
+ * reference count of the event is decreased and the pointer is set to %NULL.
+ *
+ * Since: 1.16
+ */
+static inline void
+gst_clear_event (GstEvent ** event_ptr)
+{
+  gst_clear_mini_object ((GstMiniObject **) event_ptr);
+}
+
 /* copy event */
 /**
  * gst_event_copy:
  * @event: The event to copy
  *
@@ -508,14 +529,14 @@
 
 GST_API
 void            gst_event_parse_stream_start    (GstEvent *event, const gchar **stream_id);
 
 GST_API
-void            gst_event_set_stream        (GstEvent *event, GstStream *stream);
+void            gst_event_set_stream    (GstEvent *event, GstStream *stream);
 
 GST_API
-void            gst_event_parse_stream      (GstEvent *event, GstStream **stream);
+void            gst_event_parse_stream    (GstEvent *event, GstStream **stream);
 
 GST_API
 void            gst_event_set_stream_flags      (GstEvent *event, GstStreamFlags flags);
 
 GST_API
@@ -657,10 +678,16 @@
 void            gst_event_parse_seek            (GstEvent *event, gdouble *rate, GstFormat *format,
                                                  GstSeekFlags *flags,
                                                  GstSeekType *start_type, gint64 *start,
                                                  GstSeekType *stop_type, gint64 *stop);
 
+GST_API
+void            gst_event_set_seek_trickmode_interval (GstEvent *event, GstClockTime interval);
+
+GST_API
+void            gst_event_parse_seek_trickmode_interval (GstEvent *event, GstClockTime *interval);
+
 /* navigation event */
 
 GST_API
 GstEvent*       gst_event_new_navigation        (GstStructure *structure) G_GNUC_MALLOC;
 
