diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/genums.h b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/genums.h
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/genums.h
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/genums.h
@@ -32,11 +32,11 @@
  *
  * Checks whether @type "is a" %G_TYPE_ENUM.
  *
  * Returns: %TRUE if @type "is a" %G_TYPE_ENUM.
  */
-#define G_TYPE_IS_ENUM(type)           (G_TYPE_FUNDAMENTAL (type) == G_TYPE_ENUM)
+#define G_TYPE_IS_ENUM(type)         (G_TYPE_FUNDAMENTAL (type) == G_TYPE_ENUM)
 /**
  * G_ENUM_CLASS:
  * @class: a valid #GEnumClass
  *
  * Casts a derived #GEnumClass structure into a #GEnumClass structure.
@@ -76,18 +76,18 @@
  *
  * Checks whether @type "is a" %G_TYPE_FLAGS.
  *
  * Returns: %TRUE if @type "is a" %G_TYPE_FLAGS.
  */
-#define G_TYPE_IS_FLAGS(type)          (G_TYPE_FUNDAMENTAL (type) == G_TYPE_FLAGS)
+#define G_TYPE_IS_FLAGS(type)        (G_TYPE_FUNDAMENTAL (type) == G_TYPE_FLAGS)
 /**
  * G_FLAGS_CLASS:
  * @class: a valid #GFlagsClass
  *
  * Casts a derived #GFlagsClass structure into a #GFlagsClass structure.
  */
-#define G_FLAGS_CLASS(class)           (G_TYPE_CHECK_CLASS_CAST ((class), G_TYPE_FLAGS, GFlagsClass))
+#define G_FLAGS_CLASS(class)         (G_TYPE_CHECK_CLASS_CAST ((class), G_TYPE_FLAGS, GFlagsClass))
 /**
  * G_IS_FLAGS_CLASS:
  * @class: a #GFlagsClass
  *
  * Checks whether @class "is a" valid #GFlagsClass structure of type %G_TYPE_FLAGS
@@ -214,66 +214,66 @@
 };
 
 
 /* --- prototypes --- */
 GLIB_AVAILABLE_IN_ALL
-GEnumValue* g_enum_get_value        (GEnumClass *enum_class,
-                         gint        value);
+GEnumValue* g_enum_get_value    (GEnumClass *enum_class,
+             gint    value);
 GLIB_AVAILABLE_IN_ALL
-GEnumValue* g_enum_get_value_by_name    (GEnumClass *enum_class,
-                         const gchar    *name);
+GEnumValue* g_enum_get_value_by_name  (GEnumClass *enum_class,
+             const gchar  *name);
 GLIB_AVAILABLE_IN_ALL
-GEnumValue* g_enum_get_value_by_nick    (GEnumClass *enum_class,
-                         const gchar    *nick);
+GEnumValue* g_enum_get_value_by_nick  (GEnumClass *enum_class,
+             const gchar  *nick);
 GLIB_AVAILABLE_IN_ALL
-GFlagsValue*    g_flags_get_first_value     (GFlagsClass    *flags_class,
-                         guint       value);
+GFlagsValue*  g_flags_get_first_value   (GFlagsClass  *flags_class,
+             guint     value);
 GLIB_AVAILABLE_IN_ALL
-GFlagsValue*    g_flags_get_value_by_name   (GFlagsClass    *flags_class,
-                         const gchar    *name);
+GFlagsValue*  g_flags_get_value_by_name (GFlagsClass  *flags_class,
+             const gchar  *name);
 GLIB_AVAILABLE_IN_ALL
-GFlagsValue*    g_flags_get_value_by_nick   (GFlagsClass    *flags_class,
-                         const gchar    *nick);
+GFlagsValue*  g_flags_get_value_by_nick (GFlagsClass  *flags_class,
+             const gchar  *nick);
 GLIB_AVAILABLE_IN_2_54
 gchar          *g_enum_to_string                (GType           g_enum_type,
                                                  gint            value);
 GLIB_AVAILABLE_IN_2_54
 gchar          *g_flags_to_string               (GType           flags_type,
                                                  guint           value);
 GLIB_AVAILABLE_IN_ALL
-void            g_value_set_enum            (GValue         *value,
-                         gint            v_enum);
+void            g_value_set_enum          (GValue         *value,
+             gint            v_enum);
 GLIB_AVAILABLE_IN_ALL
-gint            g_value_get_enum            (const GValue   *value);
+gint            g_value_get_enum          (const GValue   *value);
 GLIB_AVAILABLE_IN_ALL
-void            g_value_set_flags           (GValue         *value,
-                         guint           v_flags);
+void            g_value_set_flags         (GValue         *value,
+             guint           v_flags);
 GLIB_AVAILABLE_IN_ALL
-guint           g_value_get_flags           (const GValue   *value);
+guint           g_value_get_flags         (const GValue   *value);
 
 
 
 /* --- registration functions --- */
 /* const_static_values is a NULL terminated array of enum/flags
  * values that is taken over!
  */
 GLIB_AVAILABLE_IN_ALL
-GType   g_enum_register_static     (const gchar       *name,
-                    const GEnumValue  *const_static_values);
+GType g_enum_register_static     (const gchar       *name,
+            const GEnumValue  *const_static_values);
 GLIB_AVAILABLE_IN_ALL
-GType   g_flags_register_static    (const gchar       *name,
-                    const GFlagsValue *const_static_values);
+GType g_flags_register_static    (const gchar       *name,
+            const GFlagsValue *const_static_values);
 /* functions to complete the type information
  * for enums/flags implemented by plugins
  */
 GLIB_AVAILABLE_IN_ALL
-void    g_enum_complete_type_info  (GType          g_enum_type,
-                    GTypeInfo         *info,
-                    const GEnumValue  *const_values);
+void  g_enum_complete_type_info  (GType        g_enum_type,
+            GTypeInfo       *info,
+            const GEnumValue  *const_values);
 GLIB_AVAILABLE_IN_ALL
-void    g_flags_complete_type_info (GType          g_flags_type,
-                    GTypeInfo         *info,
-                    const GFlagsValue *const_values);
+void  g_flags_complete_type_info (GType        g_flags_type,
+            GTypeInfo       *info,
+            const GFlagsValue *const_values);
 
 G_END_DECLS
 
 #endif /* __G_ENUMS_H__ */
