diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/pbutils/codec-utils.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/pbutils/codec-utils.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/pbutils/codec-utils.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/pbutils/codec-utils.c
@@ -36,10 +36,11 @@
 #include "config.h"
 #endif
 
 #include "pbutils.h"
 #include <gst/base/base.h>
+#include <gst/base/gstbitreader.h>
 #include <gst/tag/tag.h>
 
 #include <string.h>
 
 #define GST_SIMPLE_CAPS_HAS_NAME(caps,name) \
@@ -105,10 +106,87 @@
 
   GST_WARNING ("Invalid sample rate %u", rate);
   return -1;
 }
 
+static gboolean
+gst_codec_utils_aac_get_audio_object_type (GstBitReader * br,
+    guint8 * audio_object_type)
+{
+  guint8 aot;
+
+  if (!gst_bit_reader_get_bits_uint8 (br, &aot, 5))
+    return FALSE;
+
+  if (aot == 31) {
+    if (!gst_bit_reader_get_bits_uint8 (br, &aot, 6))
+      return FALSE;
+    aot += 32;
+  }
+
+  *audio_object_type = aot;
+
+  return TRUE;
+}
+
+static gboolean
+gst_codec_utils_aac_get_audio_sample_rate (GstBitReader * br,
+    guint * sample_rate)
+{
+  guint8 sampling_freq_index;
+  guint32 sampling_rate;
+
+  if (!gst_bit_reader_get_bits_uint8 (br, &sampling_freq_index, 4))
+    return FALSE;
+
+  if (sampling_freq_index == 0xf) {
+    if (!gst_bit_reader_get_bits_uint32 (br, &sampling_rate, 24))
+      return FALSE;
+  } else {
+    sampling_rate =
+        gst_codec_utils_aac_get_sample_rate_from_index (sampling_freq_index);
+    if (!sampling_rate)
+      return FALSE;
+  }
+
+  *sample_rate = sampling_rate;
+
+  return TRUE;
+}
+
+static gboolean
+gst_codec_utils_aac_get_audio_object_type_full (GstBitReader * br,
+    guint8 * audio_object_type, guint8 * channel_config, guint * sample_rate)
+{
+  guint8 aot, channels;
+  guint rate;
+
+  if (!gst_codec_utils_aac_get_audio_object_type (br, &aot))
+    return FALSE;
+
+  if (!gst_codec_utils_aac_get_audio_sample_rate (br, &rate))
+    return FALSE;
+
+  if (!gst_bit_reader_get_bits_uint8 (br, &channels, 4))
+    return FALSE;
+
+  /* 5 indicates SBR extension (i.e. HE-AAC) */
+  /* 29 indicates PS extension */
+  if (aot == 5 || aot == 29) {
+    if (!gst_codec_utils_aac_get_audio_sample_rate (br, &rate))
+      return FALSE;
+    if (!gst_codec_utils_aac_get_audio_object_type (br, &aot))
+      return FALSE;
+  }
+
+  *audio_object_type = aot;
+  *sample_rate = rate;
+  *channel_config = channels;
+
+  return TRUE;
+}
+
 /**
  * gst_codec_utils_aac_get_sample_rate:
  * @audio_config: (array length=len): a pointer to the AudioSpecificConfig
  *                as specified in the Elementary Stream Descriptor (esds)
  *                in ISO/IEC 14496-1.
@@ -117,22 +195,26 @@
  * Translates the sample rate index found in AAC headers to the actual sample
  * rate.
  *
  * Returns: The sample rate if sr_idx is valid, 0 otherwise.
  *
- * Since 1.10
+ * Since: 1.10
  */
 guint
 gst_codec_utils_aac_get_sample_rate (const guint8 * audio_config, guint len)
 {
-  guint rate_index;
+  guint sample_rate = 0;
+  guint8 audio_object_type = 0, channel_config = 0;
+  GstBitReader br = GST_BIT_READER_INIT (audio_config, len);
 
   if (len < 2)
     return 0;
 
-  rate_index = ((audio_config[0] & 0x7) << 1) | ((audio_config[1] & 0x80) >> 7);
-  return gst_codec_utils_aac_get_sample_rate_from_index (rate_index);
+  gst_codec_utils_aac_get_audio_object_type_full (&br, &audio_object_type,
+      &channel_config, &sample_rate);
+
+  return sample_rate;
 }
 
 /**
  * gst_codec_utils_aac_get_channels:
  * @audio_config: (array length=len): a pointer to the AudioSpecificConfig
@@ -142,11 +224,11 @@
  *
  * Returns the channels of the given AAC stream.
  *
  * Returns: The channels or 0 if the channel could not be determined.
  *
- * Since 1.10
+ * Since: 1.10
  */
 guint
 gst_codec_utils_aac_get_channels (const guint8 * audio_config, guint len)
 {
   guint channels;
@@ -169,44 +251,53 @@
  *                as specified in the Elementary Stream Descriptor (esds)
  *                in ISO/IEC 14496-1.
  * @len: Length of @audio_config in bytes
  *
  * Returns the profile of the given AAC stream as a string. The profile is
- * determined using the AudioObjectType field which is in the first 5 bits of
- * @audio_config.
- *
- * > HE-AAC support has not yet been implemented.
+ * normally determined using the AudioObjectType field which is in the first
+ * 5 bits of @audio_config
  *
  * Returns: The profile as a const string and %NULL if the profile could not be
  * determined.
  */
 const gchar *
 gst_codec_utils_aac_get_profile (const guint8 * audio_config, guint len)
 {
-  guint profile;
+  const gchar *profile = NULL;
+  guint sample_rate;
+  guint8 audio_object_type, channel_config;
+  GstBitReader br = GST_BIT_READER_INIT (audio_config, len);
 
   if (len < 1)
     return NULL;
 
   GST_MEMDUMP ("audio config", audio_config, len);
 
-  profile = audio_config[0] >> 3;
-  switch (profile) {
+  if (!gst_codec_utils_aac_get_audio_object_type_full (&br, &audio_object_type,
+          &channel_config, &sample_rate)) {
+    return NULL;
+  }
+
+  switch (audio_object_type) {
     case 1:
-      return "main";
+      profile = "main";
+      break;
     case 2:
-      return "lc";
+      profile = "lc";
+      break;
     case 3:
-      return "ssr";
+      profile = "ssr";
+      break;
     case 4:
-      return "ltp";
+      profile = "ltp";
+      break;
     default:
+      GST_DEBUG ("Invalid profile idx: %u", audio_object_type);
       break;
   }
 
-  GST_DEBUG ("Invalid profile idx: %u", profile);
-  return NULL;
+  return profile;
 }
 
 /**
  * gst_codec_utils_aac_get_level:
  * @audio_config: (array length=len): a pointer to the AudioSpecificConfig
@@ -219,25 +310,25 @@
  * Main, LTP, SSR and others, the Main profile is used.
  *
  * The @audio_config parameter follows the following format, starting from the
  * most significant bit of the first byte:
  *
- *   * Bit 0:4 contains the AudioObjectType
+ *   * Bit 0:4 contains the AudioObjectType (if this is 0x5, then the
+ *     real AudioObjectType is carried after the rate and channel data)
  *   * Bit 5:8 contains the sample frequency index (if this is 0xf, then the
  *     next 24 bits define the actual sample frequency, and subsequent
  *     fields are appropriately shifted).
  *   * Bit 9:12 contains the channel configuration
  *
- * > HE-AAC support has not yet been implemented.
- *
  * Returns: The level as a const string and %NULL if the level could not be
  * determined.
  */
 const gchar *
 gst_codec_utils_aac_get_level (const guint8 * audio_config, guint len)
 {
-  int profile, sr_idx, channel_config, rate;
+  guint8 audio_object_type = 0xFF, channel_config = 0xFF;
+  guint rate;
   /* Number of single channel elements, channel pair elements, low frequency
    * elements, independently switched coupling channel elements, and
    * dependently switched coupling channel elements.
    *
    * Note: The 2 CCE types are ignored for now as they require us to actually
@@ -245,28 +336,25 @@
    */
   int num_sce = 0, num_cpe = 0, num_lfe = 0, num_cce_indep = 0, num_cce_dep = 0;
   int num_channels;
   /* Processor and RAM Complexity Units (calculated and "reference" for single
    * channel) */
-  int pcu, rcu, pcu_ref, rcu_ref;
+  int pcu = -1, rcu = -1, pcu_ref, rcu_ref;
   int ret = -1;
+  GstBitReader br = GST_BIT_READER_INIT (audio_config, len);
 
   g_return_val_if_fail (audio_config != NULL, NULL);
 
   if (len < 2)
     return NULL;
 
   GST_MEMDUMP ("audio config", audio_config, len);
 
-  profile = audio_config[0] >> 3;
-  /* FIXME: add support for sr_idx = 0xf */
-  sr_idx = ((audio_config[0] & 0x7) << 1) | ((audio_config[1] & 0x80) >> 7);
-  rate = gst_codec_utils_aac_get_sample_rate_from_index (sr_idx);
-  channel_config = (audio_config[1] & 0x7f) >> 3;
-
-  if (rate == 0)
+  if (!gst_codec_utils_aac_get_audio_object_type_full (&br, &audio_object_type,
+          &channel_config, &rate)) {
     return NULL;
+  }
 
   switch (channel_config) {
     case 0:
       /* Channel config is defined in the AudioObjectType's SpecificConfig,
        * which requires some amount of digging through the headers. I only see
@@ -320,11 +408,11 @@
     default:
       GST_WARNING ("Unknown channel config in header: %d", channel_config);
       return NULL;
   }
 
-  switch (profile) {
+  switch (audio_object_type) {
     case 0:                    /* NULL */
       GST_WARNING ("profile 0 is not a valid profile");
       return NULL;
     case 2:                    /* LC */
       pcu_ref = 3;
@@ -360,11 +448,11 @@
   else
     rcu += (rcu_ref + (rcu_ref - 1) * ((2 * num_cpe) - 1));
 
   num_channels = num_sce + (2 * num_cpe) + num_lfe;
 
-  if (profile == 2) {
+  if (audio_object_type == 2) {
     /* AAC LC => return the level as per the 'AAC Profile' */
     if (num_channels <= 2 && rate <= 24000 && pcu <= 3 && rcu <= 5)
       ret = 1;
     else if (num_channels <= 2 && rate <= 48000 && pcu <= 6 && rcu <= 5)
       ret = 2;
@@ -389,12 +477,12 @@
       ret = 4;
   }
 
   if (ret == -1) {
     GST_WARNING ("couldn't determine level: profile=%u, rate=%u, "
-        "channel_config=%u, pcu=%d,rcu=%d", profile, rate, channel_config, pcu,
-        rcu);
+        "channel_config=%u, pcu=%d,rcu=%d", audio_object_type, rate,
+        channel_config, pcu, rcu);
     return NULL;
   } else {
     return digit_to_string (ret);
   }
 }
@@ -734,11 +822,11 @@
  * * Bit 44:87 - general_reserved_zero_44bits
  * * Bit 88:95 - general_level_idc
  *
  * Returns: The profile as a const string, or %NULL if there is an error.
  *
- * Since 1.4
+ * Since: 1.4
  */
 const gchar *
 gst_codec_utils_h265_get_profile (const guint8 * profile_tier_level, guint len)
 {
   const gchar *profile = NULL;
@@ -775,11 +863,11 @@
  * profile_tier_level structure into a string. The profile_tier_level
  * is expected to have the same format as for gst_codec_utils_h264_get_profile().
  *
  * Returns: The tier as a const string, or %NULL if there is an error.
  *
- * Since 1.4
+ * Since: 1.4
  */
 const gchar *
 gst_codec_utils_h265_get_tier (const guint8 * profile_tier_level, guint len)
 {
   const gchar *tier = NULL;
@@ -812,11 +900,11 @@
  * profile_tier_level structure into a string. The profiel_tier_level is
  * expected to have the same format as for gst_codec_utils_h264_get_profile().
  *
  * Returns: The level as a const string, or %NULL if there is an error.
  *
- * Since 1.4
+ * Since: 1.4
  */
 const gchar *
 gst_codec_utils_h265_get_level (const guint8 * profile_tier_level, guint len)
 {
   g_return_val_if_fail (profile_tier_level != NULL, NULL);
@@ -865,11 +953,11 @@
  *
  * Transform a level string from the caps into the level_idc
  *
  * Returns: the level_idc or 0 if the level is unknown
  *
- * Since 1.4
+ * Since: 1.4
  */
 guint8
 gst_codec_utils_h265_get_level_idc (const gchar * level)
 {
   g_return_val_if_fail (level != NULL, 0);
@@ -917,11 +1005,11 @@
  * gst_codec_utils_h265_get_tier() and gst_codec_utils_h265_get_profile()
  * for more details on the parameters.
  *
  * Returns: %TRUE if the level, tier, profile could be set, %FALSE otherwise.
  *
- * Since 1.4
+ * Since: 1.4
  */
 gboolean
 gst_codec_utils_h265_caps_set_level_tier_and_profile (GstCaps * caps,
     const guint8 * profile_tier_level, guint len)
 {
@@ -1566,10 +1654,11 @@
     hdl &= gst_byte_writer_put_data (&bw, channel_mapping, channels);
   }
 
   if (!hdl) {
     GST_WARNING ("Error creating header");
+    gst_byte_writer_reset (&bw);
     return NULL;
   }
 
   buffer = gst_byte_writer_reset_and_get_buffer (&bw);
   GST_BUFFER_OFFSET (buffer) = 0;
