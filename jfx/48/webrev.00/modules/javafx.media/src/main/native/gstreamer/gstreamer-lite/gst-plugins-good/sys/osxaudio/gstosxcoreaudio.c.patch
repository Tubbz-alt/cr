diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-good/sys/osxaudio/gstosxcoreaudio.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-good/sys/osxaudio/gstosxcoreaudio.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-good/sys/osxaudio/gstosxcoreaudio.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-good/sys/osxaudio/gstosxcoreaudio.c
@@ -341,38 +341,38 @@
   g_assert (layout != NULL);
 
   if (layout->mChannelLayoutTag ==
       kAudioChannelLayoutTag_UseChannelDescriptions) {
 
-  switch (layout->mNumberChannelDescriptions) {
-    case 0:
-      if (pos)
-        pos[0] = GST_AUDIO_CHANNEL_POSITION_NONE;
-      *channels = 0;
-      *channel_mask = 0;
-      return TRUE;
-    case 1:
-      if (pos)
-        pos[0] = GST_AUDIO_CHANNEL_POSITION_MONO;
-      *channels = 1;
-      *channel_mask = 0;
-      return TRUE;
-    case 2:
-      if (pos) {
-        pos[0] = GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT;
-        pos[1] = GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT;
-      }
-      *channels = 2;
-      *channel_mask =
-          GST_AUDIO_CHANNEL_POSITION_MASK (FRONT_LEFT) |
-          GST_AUDIO_CHANNEL_POSITION_MASK (FRONT_RIGHT);
-      return TRUE;
-    default:
-      _core_audio_parse_channel_descriptions (layout, channels, channel_mask,
-          pos);
-      return TRUE;
-  }
+    switch (layout->mNumberChannelDescriptions) {
+      case 0:
+        if (pos)
+          pos[0] = GST_AUDIO_CHANNEL_POSITION_NONE;
+        *channels = 0;
+        *channel_mask = 0;
+        return TRUE;
+      case 1:
+        if (pos)
+          pos[0] = GST_AUDIO_CHANNEL_POSITION_MONO;
+        *channels = 1;
+        *channel_mask = 0;
+        return TRUE;
+      case 2:
+        if (pos) {
+          pos[0] = GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT;
+          pos[1] = GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT;
+        }
+        *channels = 2;
+        *channel_mask =
+            GST_AUDIO_CHANNEL_POSITION_MASK (FRONT_LEFT) |
+            GST_AUDIO_CHANNEL_POSITION_MASK (FRONT_RIGHT);
+        return TRUE;
+      default:
+        _core_audio_parse_channel_descriptions (layout, channels, channel_mask,
+            pos);
+        return TRUE;
+    }
   } else if (layout->mChannelLayoutTag == kAudioChannelLayoutTag_Mono) {
     if (pos)
       pos[0] = GST_AUDIO_CHANNEL_POSITION_MONO;
     *channels = 1;
     *channel_mask = 0;
@@ -381,11 +381,11 @@
       layout->mChannelLayoutTag == kAudioChannelLayoutTag_StereoHeadphones ||
       layout->mChannelLayoutTag == kAudioChannelLayoutTag_Binaural) {
     if (pos) {
       pos[0] = GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT;
       pos[1] = GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT;
-}
+    }
     *channels = 2;
     *channel_mask =
         GST_AUDIO_CHANNEL_POSITION_MASK (FRONT_LEFT) |
         GST_AUDIO_CHANNEL_POSITION_MASK (FRONT_RIGHT);
     return TRUE;
@@ -502,11 +502,11 @@
   }
 
   bps = asbd->mBitsPerChannel;
   endianness = asbd->mFormatFlags & kAudioFormatFlagIsBigEndian ?
       G_BIG_ENDIAN : G_LITTLE_ENDIAN;
-  sign = asbd->mFormatID & kAudioFormatFlagIsSignedInteger ? TRUE : FALSE;
+  sign = asbd->mFormatFlags & kAudioFormatFlagIsSignedInteger ? TRUE : FALSE;
   interleaved = asbd->mFormatFlags & kAudioFormatFlagIsNonInterleaved ?
       TRUE : FALSE;
 
   if (asbd->mFormatFlags & kAudioFormatFlagIsFloat) {
     if (bps == 32) {
