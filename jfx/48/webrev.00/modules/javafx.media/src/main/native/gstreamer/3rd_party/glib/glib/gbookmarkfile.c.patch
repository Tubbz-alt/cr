diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gbookmarkfile.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gbookmarkfile.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gbookmarkfile.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gbookmarkfile.c
@@ -93,66 +93,66 @@
  *
  * The #GBookmarkFile parser was added in GLib 2.12.
  */
 
 /* XBEL 1.0 standard entities */
-#define XBEL_VERSION        "1.0"
-#define XBEL_DTD_NICK       "xbel"
-#define XBEL_DTD_SYSTEM     "+//IDN python.org//DTD XML Bookmark " \
-                "Exchange Language 1.0//EN//XML"
-
-#define XBEL_DTD_URI        "http://www.python.org/topics/xml/dtds/xbel-1.0.dtd"
-
-#define XBEL_ROOT_ELEMENT   "xbel"
-#define XBEL_FOLDER_ELEMENT "folder"    /* unused */
-#define XBEL_BOOKMARK_ELEMENT   "bookmark"
-#define XBEL_ALIAS_ELEMENT  "alias"     /* unused */
-#define XBEL_SEPARATOR_ELEMENT  "separator"     /* unused */
+#define XBEL_VERSION    "1.0"
+#define XBEL_DTD_NICK   "xbel"
+#define XBEL_DTD_SYSTEM   "+//IDN python.org//DTD XML Bookmark " \
+        "Exchange Language 1.0//EN//XML"
+
+#define XBEL_DTD_URI    "http://www.python.org/topics/xml/dtds/xbel-1.0.dtd"
+
+#define XBEL_ROOT_ELEMENT "xbel"
+#define XBEL_FOLDER_ELEMENT "folder"  /* unused */
+#define XBEL_BOOKMARK_ELEMENT "bookmark"
+#define XBEL_ALIAS_ELEMENT  "alias"   /* unused */
+#define XBEL_SEPARATOR_ELEMENT  "separator"   /* unused */
 #define XBEL_TITLE_ELEMENT  "title"
-#define XBEL_DESC_ELEMENT   "desc"
-#define XBEL_INFO_ELEMENT   "info"
-#define XBEL_METADATA_ELEMENT   "metadata"
+#define XBEL_DESC_ELEMENT "desc"
+#define XBEL_INFO_ELEMENT "info"
+#define XBEL_METADATA_ELEMENT "metadata"
 
 #define XBEL_VERSION_ATTRIBUTE  "version"
-#define XBEL_FOLDED_ATTRIBUTE   "folded"    /* unused */
-#define XBEL_OWNER_ATTRIBUTE    "owner"
-#define XBEL_ADDED_ATTRIBUTE    "added"
+#define XBEL_FOLDED_ATTRIBUTE "folded"  /* unused */
+#define XBEL_OWNER_ATTRIBUTE  "owner"
+#define XBEL_ADDED_ATTRIBUTE  "added"
 #define XBEL_VISITED_ATTRIBUTE  "visited"
 #define XBEL_MODIFIED_ATTRIBUTE "modified"
-#define XBEL_ID_ATTRIBUTE   "id"
+#define XBEL_ID_ATTRIBUTE "id"
 #define XBEL_HREF_ATTRIBUTE "href"
-#define XBEL_REF_ATTRIBUTE  "ref"       /* unused */
+#define XBEL_REF_ATTRIBUTE  "ref"     /* unused */
 
-#define XBEL_YES_VALUE      "yes"
-#define XBEL_NO_VALUE       "no"
+#define XBEL_YES_VALUE    "yes"
+#define XBEL_NO_VALUE   "no"
 
 /* Desktop bookmark spec entities */
-#define BOOKMARK_METADATA_OWNER     "http://freedesktop.org"
-
-#define BOOKMARK_NAMESPACE_NAME     "bookmark"
-#define BOOKMARK_NAMESPACE_URI      "http://www.freedesktop.org/standards/desktop-bookmarks"
-
-#define BOOKMARK_GROUPS_ELEMENT     "groups"
-#define BOOKMARK_GROUP_ELEMENT      "group"
-#define BOOKMARK_APPLICATIONS_ELEMENT   "applications"
-#define BOOKMARK_APPLICATION_ELEMENT    "application"
-#define BOOKMARK_ICON_ELEMENT       "icon"
-#define BOOKMARK_PRIVATE_ELEMENT    "private"
-
-#define BOOKMARK_NAME_ATTRIBUTE     "name"
-#define BOOKMARK_EXEC_ATTRIBUTE     "exec"
-#define BOOKMARK_COUNT_ATTRIBUTE    "count"
-#define BOOKMARK_TIMESTAMP_ATTRIBUTE    "timestamp"     /* deprecated by "modified" */
+#define BOOKMARK_METADATA_OWNER   "http://freedesktop.org"
+
+#define BOOKMARK_NAMESPACE_NAME   "bookmark"
+#define BOOKMARK_NAMESPACE_URI    "http://www.freedesktop.org/standards/desktop-bookmarks"
+
+#define BOOKMARK_GROUPS_ELEMENT   "groups"
+#define BOOKMARK_GROUP_ELEMENT    "group"
+#define BOOKMARK_APPLICATIONS_ELEMENT "applications"
+#define BOOKMARK_APPLICATION_ELEMENT  "application"
+#define BOOKMARK_ICON_ELEMENT     "icon"
+#define BOOKMARK_PRIVATE_ELEMENT  "private"
+
+#define BOOKMARK_NAME_ATTRIBUTE   "name"
+#define BOOKMARK_EXEC_ATTRIBUTE   "exec"
+#define BOOKMARK_COUNT_ATTRIBUTE  "count"
+#define BOOKMARK_TIMESTAMP_ATTRIBUTE  "timestamp"     /* deprecated by "modified" */
 #define BOOKMARK_MODIFIED_ATTRIBUTE     "modified"
-#define BOOKMARK_HREF_ATTRIBUTE     "href"
-#define BOOKMARK_TYPE_ATTRIBUTE     "type"
+#define BOOKMARK_HREF_ATTRIBUTE   "href"
+#define BOOKMARK_TYPE_ATTRIBUTE   "type"
 
 /* Shared MIME Info entities */
-#define MIME_NAMESPACE_NAME         "mime"
-#define MIME_NAMESPACE_URI      "http://www.freedesktop.org/standards/shared-mime-info"
-#define MIME_TYPE_ELEMENT       "mime-type"
-#define MIME_TYPE_ATTRIBUTE         "type"
+#define MIME_NAMESPACE_NAME     "mime"
+#define MIME_NAMESPACE_URI    "http://www.freedesktop.org/standards/shared-mime-info"
+#define MIME_TYPE_ELEMENT     "mime-type"
+#define MIME_TYPE_ATTRIBUTE     "type"
 
 
 typedef struct _BookmarkAppInfo  BookmarkAppInfo;
 typedef struct _BookmarkMetadata BookmarkMetadata;
 typedef struct _BookmarkItem     BookmarkItem;
@@ -201,11 +201,11 @@
 {
   gchar *title;
   gchar *description;
 
   /* we store our items in a list and keep a copy inside
-   * an hash table for faster lookup performances
+   * a hash table for faster lookup performances
    */
   GList *items;
   GHashTable *items_by_uri;
 };
 
@@ -231,24 +231,26 @@
 } ParserState;
 
 static void          g_bookmark_file_init        (GBookmarkFile  *bookmark);
 static void          g_bookmark_file_clear       (GBookmarkFile  *bookmark);
 static gboolean      g_bookmark_file_parse       (GBookmarkFile  *bookmark,
-                          const gchar    *buffer,
-                          gsize           length,
-                          GError        **error);
+              const gchar    *buffer,
+              gsize           length,
+              GError        **error);
 static gchar *       g_bookmark_file_dump        (GBookmarkFile  *bookmark,
-                          gsize          *length,
-                          GError        **error);
+              gsize          *length,
+              GError        **error);
 static BookmarkItem *g_bookmark_file_lookup_item (GBookmarkFile  *bookmark,
-                          const gchar    *uri);
+              const gchar    *uri);
 static void          g_bookmark_file_add_item    (GBookmarkFile  *bookmark,
-                          BookmarkItem   *item,
-                          GError        **error);
+              BookmarkItem   *item,
+              GError        **error);
 
-static time_t  timestamp_from_iso8601 (const gchar *iso_date);
-static gchar * timestamp_to_iso8601   (time_t       timestamp);
+static gboolean  timestamp_from_iso8601 (const gchar  *iso_date,
+                                         time_t       *out_timestamp,
+                                         GError      **error);
+static gchar    *timestamp_to_iso8601   (time_t        timestamp);
 
 /********************************
  * BookmarkAppInfo              *
  *                              *
  * Application metadata storage *
@@ -385,120 +387,120 @@
 
   retval = g_string_sized_new (1024);
 
   /* metadata container */
   g_string_append (retval,
-           "      "
-           "<" XBEL_METADATA_ELEMENT
-           " " XBEL_OWNER_ATTRIBUTE "=\"" BOOKMARK_METADATA_OWNER
-           "\">\n");
+       "      "
+       "<" XBEL_METADATA_ELEMENT
+       " " XBEL_OWNER_ATTRIBUTE "=\"" BOOKMARK_METADATA_OWNER
+       "\">\n");
 
   /* mime type */
   if (metadata->mime_type) {
     buffer = g_strconcat ("        "
-              "<" MIME_NAMESPACE_NAME ":" MIME_TYPE_ELEMENT " "
-              MIME_TYPE_ATTRIBUTE "=\"", metadata->mime_type, "\"/>\n",
-              NULL);
+        "<" MIME_NAMESPACE_NAME ":" MIME_TYPE_ELEMENT " "
+        MIME_TYPE_ATTRIBUTE "=\"", metadata->mime_type, "\"/>\n",
+        NULL);
     g_string_append (retval, buffer);
     g_free (buffer);
   }
 
   if (metadata->groups)
     {
       GList *l;
 
       /* open groups container */
       g_string_append (retval,
-               "        "
-               "<" BOOKMARK_NAMESPACE_NAME
-               ":" BOOKMARK_GROUPS_ELEMENT ">\n");
+           "        "
+           "<" BOOKMARK_NAMESPACE_NAME
+           ":" BOOKMARK_GROUPS_ELEMENT ">\n");
 
       for (l = g_list_last (metadata->groups); l != NULL; l = l->prev)
         {
           gchar *group_name;
 
-      group_name = g_markup_escape_text ((gchar *) l->data, -1);
-      buffer = g_strconcat ("          "
-                "<" BOOKMARK_NAMESPACE_NAME
-                ":" BOOKMARK_GROUP_ELEMENT ">",
-                group_name,
-                "</" BOOKMARK_NAMESPACE_NAME
-                ":"  BOOKMARK_GROUP_ELEMENT ">\n", NULL);
-      g_string_append (retval, buffer);
+    group_name = g_markup_escape_text ((gchar *) l->data, -1);
+    buffer = g_strconcat ("          "
+        "<" BOOKMARK_NAMESPACE_NAME
+        ":" BOOKMARK_GROUP_ELEMENT ">",
+        group_name,
+        "</" BOOKMARK_NAMESPACE_NAME
+        ":"  BOOKMARK_GROUP_ELEMENT ">\n", NULL);
+    g_string_append (retval, buffer);
 
-      g_free (buffer);
-      g_free (group_name);
+    g_free (buffer);
+    g_free (group_name);
         }
 
       /* close groups container */
       g_string_append (retval,
-               "        "
-               "</" BOOKMARK_NAMESPACE_NAME
-               ":" BOOKMARK_GROUPS_ELEMENT ">\n");
+           "        "
+           "</" BOOKMARK_NAMESPACE_NAME
+           ":" BOOKMARK_GROUPS_ELEMENT ">\n");
     }
 
   if (metadata->applications)
     {
       GList *l;
 
       /* open applications container */
       g_string_append (retval,
-               "        "
-               "<" BOOKMARK_NAMESPACE_NAME
-               ":" BOOKMARK_APPLICATIONS_ELEMENT ">\n");
+           "        "
+           "<" BOOKMARK_NAMESPACE_NAME
+           ":" BOOKMARK_APPLICATIONS_ELEMENT ">\n");
 
       for (l = g_list_last (metadata->applications); l != NULL; l = l->prev)
         {
           BookmarkAppInfo *app_info = (BookmarkAppInfo *) l->data;
           gchar *app_data;
 
-      g_warn_if_fail (app_info != NULL);
+    g_warn_if_fail (app_info != NULL);
 
           app_data = bookmark_app_info_dump (app_info);
 
-      if (app_data)
+    if (app_data)
             {
               retval = g_string_append (retval, app_data);
 
-          g_free (app_data);
-        }
+        g_free (app_data);
+      }
         }
 
       /* close applications container */
       g_string_append (retval,
-               "        "
-               "</" BOOKMARK_NAMESPACE_NAME
-               ":" BOOKMARK_APPLICATIONS_ELEMENT ">\n");
+           "        "
+           "</" BOOKMARK_NAMESPACE_NAME
+           ":" BOOKMARK_APPLICATIONS_ELEMENT ">\n");
     }
 
   /* icon */
   if (metadata->icon_href)
     {
       if (!metadata->icon_mime)
         metadata->icon_mime = g_strdup ("application/octet-stream");
 
       buffer = g_strconcat ("       "
-                "<" BOOKMARK_NAMESPACE_NAME
-                ":" BOOKMARK_ICON_ELEMENT
-                " " BOOKMARK_HREF_ATTRIBUTE "=\"", metadata->icon_href,
-                "\" " BOOKMARK_TYPE_ATTRIBUTE "=\"", metadata->icon_mime, "\"/>\n", NULL);
+          "<" BOOKMARK_NAMESPACE_NAME
+          ":" BOOKMARK_ICON_ELEMENT
+          " " BOOKMARK_HREF_ATTRIBUTE "=\"", metadata->icon_href,
+          "\" " BOOKMARK_TYPE_ATTRIBUTE "=\"", metadata->icon_mime, "\"/>\n", NULL);
       g_string_append (retval, buffer);
 
       g_free (buffer);
     }
 
   /* private hint */
   if (metadata->is_private)
     g_string_append (retval,
-             "        "
-             "<" BOOKMARK_NAMESPACE_NAME
-             ":" BOOKMARK_PRIVATE_ELEMENT "/>\n");
+         "        "
+         "<" BOOKMARK_NAMESPACE_NAME
+         ":" BOOKMARK_PRIVATE_ELEMENT "/>\n");
 
   /* close metadata container */
   g_string_append (retval,
-           "      "
-           "</" XBEL_METADATA_ELEMENT ">\n");
+       "      "
+       "</" XBEL_METADATA_ELEMENT ">\n");
 
   return g_string_free (retval, FALSE);
 }
 
 /******************************************************
@@ -633,27 +635,27 @@
         {
           buffer = g_strconcat ("    "
                                 "<" XBEL_INFO_ELEMENT ">\n",
                                 metadata,
                                 "    "
-                "</" XBEL_INFO_ELEMENT ">\n",
+        "</" XBEL_INFO_ELEMENT ">\n",
                                 NULL);
           retval = g_string_append (retval, buffer);
 
           g_free (buffer);
-      g_free (metadata);
-    }
+    g_free (metadata);
+  }
     }
 
   g_string_append (retval, "  </" XBEL_BOOKMARK_ELEMENT ">\n");
 
   return g_string_free (retval, FALSE);
 }
 
 static BookmarkAppInfo *
 bookmark_item_lookup_app_info (BookmarkItem *item,
-                   const gchar  *app_name)
+             const gchar  *app_name)
 {
   g_warn_if_fail (item != NULL && app_name != NULL);
 
   if (!item->metadata)
     return NULL;
@@ -712,12 +714,12 @@
 
   retval = g_new (ParseData, 1);
 
   retval->state = STATE_STARTED;
   retval->namespaces = g_hash_table_new_full (g_str_hash, g_str_equal,
-                          (GDestroyNotify) g_free,
-                          (GDestroyNotify) g_free);
+                  (GDestroyNotify) g_free,
+                  (GDestroyNotify) g_free);
   retval->bookmark_file = NULL;
   retval->current_item = NULL;
 
   return retval;
 }
@@ -728,18 +730,18 @@
   g_hash_table_destroy (parse_data->namespaces);
 
   g_free (parse_data);
 }
 
-#define IS_ATTRIBUTE(s,a)   ((0 == strcmp ((s), (a))))
+#define IS_ATTRIBUTE(s,a) ((0 == strcmp ((s), (a))))
 
 static void
 parse_bookmark_element (GMarkupParseContext  *context,
-            ParseData            *parse_data,
-            const gchar         **attribute_names,
-            const gchar         **attribute_values,
-            GError              **error)
+      ParseData            *parse_data,
+      const gchar         **attribute_names,
+      const gchar         **attribute_values,
+      GError              **error)
 {
   const gchar *uri, *added, *modified, *visited;
   const gchar *attr;
   gint i;
   BookmarkItem *item;
@@ -764,50 +766,50 @@
           /* bookmark is defined by the XBEL spec, so we need
            * to error out if the element has different or
            * missing attributes
            */
           g_set_error (error, G_MARKUP_ERROR,
-                       G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE,
-                       _("Unexpected attribute '%s' for element '%s'"),
-                       attr,
-                       XBEL_BOOKMARK_ELEMENT);
+           G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE,
+                   _("Unexpected attribute '%s' for element '%s'"),
+                   attr,
+                   XBEL_BOOKMARK_ELEMENT);
           return;
         }
     }
 
   if (!uri)
     {
       g_set_error (error, G_MARKUP_ERROR,
-                   G_MARKUP_ERROR_INVALID_CONTENT,
-                   _("Attribute '%s' of element '%s' not found"),
-                   XBEL_HREF_ATTRIBUTE,
-                   XBEL_BOOKMARK_ELEMENT);
+             G_MARKUP_ERROR_INVALID_CONTENT,
+             _("Attribute '%s' of element '%s' not found"),
+             XBEL_HREF_ATTRIBUTE,
+             XBEL_BOOKMARK_ELEMENT);
       return;
     }
 
   g_warn_if_fail (parse_data->current_item == NULL);
 
-item = bookmark_item_new (uri);
+  item = bookmark_item_new (uri);
 #ifdef GSTREAMER_LITE
   if (item == NULL) {
     return;
   }
 #endif // GSTREAMER_LITE
 
-  if (added)
-    item->added = timestamp_from_iso8601 (added);
+  if (added != NULL && !timestamp_from_iso8601 (added, &item->added, error))
+    return;
 
-  if (modified)
-    item->modified = timestamp_from_iso8601 (modified);
+  if (modified != NULL && !timestamp_from_iso8601 (modified, &item->modified, error))
+    return;
 
-  if (visited)
-    item->visited = timestamp_from_iso8601 (visited);
+  if (visited != NULL && !timestamp_from_iso8601 (visited, &item->visited, error))
+    return;
 
   add_error = NULL;
   g_bookmark_file_add_item (parse_data->bookmark_file,
-                item,
-                &add_error);
+            item,
+            &add_error);
   if (add_error)
     {
       bookmark_item_free (item);
 
       g_propagate_error (error, add_error);
@@ -818,14 +820,14 @@
   parse_data->current_item = item;
 }
 
 static void
 parse_application_element (GMarkupParseContext  *context,
-               ParseData            *parse_data,
-               const gchar         **attribute_names,
-               const gchar         **attribute_values,
-               GError              **error)
+         ParseData            *parse_data,
+         const gchar         **attribute_names,
+         const gchar         **attribute_values,
+         GError              **error)
 {
   const gchar *name, *exec, *count, *stamp, *modified;
   const gchar *attr;
   gint i;
   BookmarkItem *item;
@@ -851,24 +853,24 @@
 
   /* the "name" and "exec" attributes are mandatory */
   if (!name)
     {
       g_set_error (error, G_MARKUP_ERROR,
-                   G_MARKUP_ERROR_INVALID_CONTENT,
-                   _("Attribute '%s' of element '%s' not found"),
-                   BOOKMARK_NAME_ATTRIBUTE,
-                   BOOKMARK_APPLICATION_ELEMENT);
+             G_MARKUP_ERROR_INVALID_CONTENT,
+             _("Attribute '%s' of element '%s' not found"),
+             BOOKMARK_NAME_ATTRIBUTE,
+             BOOKMARK_APPLICATION_ELEMENT);
       return;
     }
 
   if (!exec)
     {
       g_set_error (error, G_MARKUP_ERROR,
-                   G_MARKUP_ERROR_INVALID_CONTENT,
-                   _("Attribute '%s' of element '%s' not found"),
-                   BOOKMARK_EXEC_ATTRIBUTE,
-                   BOOKMARK_APPLICATION_ELEMENT);
+             G_MARKUP_ERROR_INVALID_CONTENT,
+             _("Attribute '%s' of element '%s' not found"),
+             BOOKMARK_EXEC_ATTRIBUTE,
+             BOOKMARK_APPLICATION_ELEMENT);
       return;
     }
 
   g_warn_if_fail (parse_data->current_item != NULL);
   item = parse_data->current_item;
@@ -885,11 +887,11 @@
           return;
       }
 #endif // GSTREAMER_LITE
 
       if (!item->metadata)
-        item->metadata = bookmark_metadata_new ();
+  item->metadata = bookmark_metadata_new ();
 
       item->metadata->applications = g_list_prepend (item->metadata->applications, ai);
       g_hash_table_replace (item->metadata->apps_by_name, ai->name, ai);
     }
 
@@ -899,12 +901,15 @@
   if (count)
     ai->count = atoi (count);
   else
     ai->count = 1;
 
-  if (modified)
-    ai->stamp = timestamp_from_iso8601 (modified);
+  if (modified != NULL)
+    {
+      if (!timestamp_from_iso8601 (modified, &ai->stamp, error))
+        return;
+    }
   else
     {
       /* the timestamp attribute has been deprecated but we still parse
        * it for backward compatibility
        */
@@ -915,14 +920,14 @@
     }
 }
 
 static void
 parse_mime_type_element (GMarkupParseContext  *context,
-             ParseData            *parse_data,
-             const gchar         **attribute_names,
-             const gchar         **attribute_values,
-             GError              **error)
+       ParseData            *parse_data,
+       const gchar         **attribute_names,
+       const gchar         **attribute_values,
+       GError              **error)
 {
   const gchar *type;
   const gchar *attr;
   gint i;
   BookmarkItem *item;
@@ -950,14 +955,14 @@
   item->metadata->mime_type = g_strdup (type);
 }
 
 static void
 parse_icon_element (GMarkupParseContext  *context,
-            ParseData            *parse_data,
-            const gchar         **attribute_names,
-            const gchar         **attribute_values,
-            GError              **error)
+        ParseData            *parse_data,
+        const gchar         **attribute_names,
+        const gchar         **attribute_values,
+        GError              **error)
 {
   const gchar *href;
   const gchar *type;
   const gchar *attr;
   gint i;
@@ -978,14 +983,14 @@
 
   /* the "href" attribute is mandatory */
   if (!href)
     {
       g_set_error (error, G_MARKUP_ERROR,
-                   G_MARKUP_ERROR_INVALID_CONTENT,
-                   _("Attribute '%s' of element '%s' not found"),
-                   BOOKMARK_HREF_ATTRIBUTE,
-                   BOOKMARK_ICON_ELEMENT);
+             G_MARKUP_ERROR_INVALID_CONTENT,
+             _("Attribute '%s' of element '%s' not found"),
+             BOOKMARK_HREF_ATTRIBUTE,
+             BOOKMARK_ICON_ELEMENT);
       return;
     }
 
   if (!type)
     type = "application/octet-stream";
@@ -1016,11 +1021,11 @@
  * namespace table inside GMarkup and ask it to resolve the namespaces for us.
  */
 static void
 map_namespace_to_name (ParseData    *parse_data,
                        const gchar **attribute_names,
-               const gchar **attribute_values)
+           const gchar **attribute_values)
 {
   const gchar *attr;
   gint i;
 
   g_warn_if_fail (parse_data != NULL);
@@ -1111,11 +1116,11 @@
   g_free (ns_name);
 
   return retval;
 }
 
-#define IS_ELEMENT(p,s,e)   (is_element_full ((p), (s), NULL, (e), '\0'))
+#define IS_ELEMENT(p,s,e) (is_element_full ((p), (s), NULL, (e), '\0'))
 #define IS_ELEMENT_NS(p,s,n,e)  (is_element_full ((p), (s), (n), (e), '|'))
 
 static const gchar *
 parser_state_to_element_name (ParserState state)
 {
@@ -1184,16 +1189,16 @@
             {
               if ((IS_ATTRIBUTE (attr, XBEL_VERSION_ATTRIBUTE)) &&
                   (0 == strcmp (attribute_values[i], XBEL_VERSION)))
                 parse_data->state = STATE_ROOT;
             }
-    }
+  }
       else
         g_set_error (error, G_MARKUP_ERROR,
-                     G_MARKUP_ERROR_INVALID_CONTENT,
-                     _("Unexpected tag '%s', tag '%s' expected"),
-                     element_name, XBEL_ROOT_ELEMENT);
+         G_MARKUP_ERROR_INVALID_CONTENT,
+                 _("Unexpected tag '%s', tag '%s' expected"),
+                 element_name, XBEL_ROOT_ELEMENT);
       break;
     case STATE_ROOT:
       if (IS_ELEMENT (parse_data, element_name, XBEL_TITLE_ELEMENT))
         parse_data->state = STATE_TITLE;
       else if (IS_ELEMENT (parse_data, element_name, XBEL_DESC_ELEMENT))
@@ -1203,37 +1208,37 @@
           GError *inner_error = NULL;
 
           parse_data->state = STATE_BOOKMARK;
 
           parse_bookmark_element (context,
-                      parse_data,
-                      attribute_names,
-                      attribute_values,
-                      &inner_error);
+                  parse_data,
+                  attribute_names,
+                  attribute_values,
+                  &inner_error);
           if (inner_error)
             g_propagate_error (error, inner_error);
         }
       else
         g_set_error (error, G_MARKUP_ERROR,
-                     G_MARKUP_ERROR_INVALID_CONTENT,
-                     _("Unexpected tag '%s' inside '%s'"),
-                     element_name,
-                     XBEL_ROOT_ELEMENT);
+               G_MARKUP_ERROR_INVALID_CONTENT,
+               _("Unexpected tag '%s' inside '%s'"),
+               element_name,
+               XBEL_ROOT_ELEMENT);
       break;
     case STATE_BOOKMARK:
       if (IS_ELEMENT (parse_data, element_name, XBEL_TITLE_ELEMENT))
         parse_data->state = STATE_TITLE;
       else if (IS_ELEMENT (parse_data, element_name, XBEL_DESC_ELEMENT))
         parse_data->state = STATE_DESC;
       else if (IS_ELEMENT (parse_data, element_name, XBEL_INFO_ELEMENT))
         parse_data->state = STATE_INFO;
       else
         g_set_error (error, G_MARKUP_ERROR,
-                     G_MARKUP_ERROR_INVALID_CONTENT,
-                     _("Unexpected tag '%s' inside '%s'"),
-                     element_name,
-                     XBEL_BOOKMARK_ELEMENT);
+               G_MARKUP_ERROR_INVALID_CONTENT,
+                 _("Unexpected tag '%s' inside '%s'"),
+                 element_name,
+                 XBEL_BOOKMARK_ELEMENT);
       break;
     case STATE_INFO:
       if (IS_ELEMENT (parse_data, element_name, XBEL_METADATA_ELEMENT))
         {
           const gchar *attr;
@@ -1252,14 +1257,14 @@
                 }
             }
         }
       else
         g_set_error (error, G_MARKUP_ERROR,
-                     G_MARKUP_ERROR_INVALID_CONTENT,
-                     _("Unexpected tag '%s', tag '%s' expected"),
-                     element_name,
-                     XBEL_METADATA_ELEMENT);
+               G_MARKUP_ERROR_INVALID_CONTENT,
+               _("Unexpected tag '%s', tag '%s' expected"),
+               element_name,
+               XBEL_METADATA_ELEMENT);
       break;
     case STATE_METADATA:
       if (IS_ELEMENT_NS (parse_data, element_name, BOOKMARK_NAMESPACE_URI, BOOKMARK_APPLICATIONS_ELEMENT))
         parse_data->state = STATE_APPLICATIONS;
       else if (IS_ELEMENT_NS (parse_data, element_name, BOOKMARK_NAMESPACE_URI, BOOKMARK_GROUPS_ELEMENT))
@@ -1268,72 +1273,72 @@
         parse_data->current_item->metadata->is_private = TRUE;
       else if (IS_ELEMENT_NS (parse_data, element_name, BOOKMARK_NAMESPACE_URI, BOOKMARK_ICON_ELEMENT))
         {
           GError *inner_error = NULL;
 
-      parse_data->state = STATE_ICON;
+    parse_data->state = STATE_ICON;
 
           parse_icon_element (context,
-                      parse_data,
-                      attribute_names,
-                      attribute_values,
-                      &inner_error);
+                    parse_data,
+                    attribute_names,
+                    attribute_values,
+                    &inner_error);
           if (inner_error)
             g_propagate_error (error, inner_error);
         }
       else if (IS_ELEMENT_NS (parse_data, element_name, MIME_NAMESPACE_URI, MIME_TYPE_ELEMENT))
         {
           GError *inner_error = NULL;
 
           parse_data->state = STATE_MIME;
 
           parse_mime_type_element (context,
-                       parse_data,
-                       attribute_names,
-                       attribute_values,
-                       &inner_error);
+                   parse_data,
+                   attribute_names,
+                   attribute_values,
+                   &inner_error);
           if (inner_error)
             g_propagate_error (error, inner_error);
         }
       else
         g_set_error (error, G_MARKUP_ERROR,
-                     G_MARKUP_ERROR_UNKNOWN_ELEMENT,
-                     _("Unexpected tag '%s' inside '%s'"),
-                    element_name,
-                    XBEL_METADATA_ELEMENT);
+               G_MARKUP_ERROR_UNKNOWN_ELEMENT,
+               _("Unexpected tag '%s' inside '%s'"),
+               element_name,
+               XBEL_METADATA_ELEMENT);
       break;
     case STATE_APPLICATIONS:
       if (IS_ELEMENT_NS (parse_data, element_name, BOOKMARK_NAMESPACE_URI, BOOKMARK_APPLICATION_ELEMENT))
         {
           GError *inner_error = NULL;
 
           parse_data->state = STATE_APPLICATION;
 
           parse_application_element (context,
-                         parse_data,
-                         attribute_names,
-                         attribute_values,
-                         &inner_error);
+                     parse_data,
+                     attribute_names,
+                     attribute_values,
+                     &inner_error);
           if (inner_error)
             g_propagate_error (error, inner_error);
         }
       else
         g_set_error (error, G_MARKUP_ERROR,
-                     G_MARKUP_ERROR_INVALID_CONTENT,
-                     _("Unexpected tag '%s', tag '%s' expected"),
-                     element_name,
-                     BOOKMARK_APPLICATION_ELEMENT);
+               G_MARKUP_ERROR_INVALID_CONTENT,
+               _("Unexpected tag '%s', tag '%s' expected"),
+               element_name,
+               BOOKMARK_APPLICATION_ELEMENT);
       break;
     case STATE_GROUPS:
       if (IS_ELEMENT_NS (parse_data, element_name, BOOKMARK_NAMESPACE_URI, BOOKMARK_GROUP_ELEMENT))
         parse_data->state = STATE_GROUP;
       else
         g_set_error (error, G_MARKUP_ERROR,
-                     G_MARKUP_ERROR_INVALID_CONTENT,
-                     _("Unexpected tag '%s', tag '%s' expected"),
-                     element_name,
-                     BOOKMARK_GROUP_ELEMENT);
+               G_MARKUP_ERROR_INVALID_CONTENT,
+               _("Unexpected tag '%s', tag '%s' expected"),
+               element_name,
+               BOOKMARK_GROUP_ELEMENT);
       break;
 
     case STATE_TITLE:
     case STATE_DESC:
     case STATE_APPLICATION:
@@ -1475,13 +1480,13 @@
   NULL
 };
 
 static gboolean
 g_bookmark_file_parse (GBookmarkFile  *bookmark,
-             const gchar  *buffer,
-             gsize         length,
-             GError       **error)
+       const gchar  *buffer,
+       gsize         length,
+       GError       **error)
 {
   GMarkupParseContext *context;
   ParseData *parse_data;
   GError *parse_error, *end_error;
   gboolean retval;
@@ -1499,18 +1504,18 @@
 
   parse_data = parse_data_new ();
   parse_data->bookmark_file = bookmark;
 
   context = g_markup_parse_context_new (&markup_parser,
-                    0,
-                    parse_data,
-                    (GDestroyNotify) parse_data_free);
+            0,
+            parse_data,
+            (GDestroyNotify) parse_data_free);
 
   retval = g_markup_parse_context_parse (context,
-                     buffer,
-                     length,
-                     &parse_error);
+             buffer,
+             length,
+             &parse_error);
   if (!retval)
     g_propagate_error (error, parse_error);
   else
    {
      retval = g_markup_parse_context_end_parse (context, &end_error);
@@ -1523,41 +1528,41 @@
   return retval;
 }
 
 static gchar *
 g_bookmark_file_dump (GBookmarkFile  *bookmark,
-              gsize          *length,
-              GError        **error)
+          gsize          *length,
+          GError        **error)
 {
   GString *retval;
   gchar *buffer;
   GList *l;
 
   retval = g_string_sized_new (4096);
 
   g_string_append (retval,
-           "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
+       "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
 #if 0
-           /* XXX - do we really need the doctype? */
-           "<!DOCTYPE " XBEL_DTD_NICK "\n"
-           "  PUBLIC \"" XBEL_DTD_SYSTEM "\"\n"
-           "         \"" XBEL_DTD_URI "\">\n"
+       /* XXX - do we really need the doctype? */
+       "<!DOCTYPE " XBEL_DTD_NICK "\n"
+       "  PUBLIC \"" XBEL_DTD_SYSTEM "\"\n"
+       "         \"" XBEL_DTD_URI "\">\n"
 #endif
-           "<" XBEL_ROOT_ELEMENT " " XBEL_VERSION_ATTRIBUTE "=\"" XBEL_VERSION "\"\n"
-           "      xmlns:" BOOKMARK_NAMESPACE_NAME "=\"" BOOKMARK_NAMESPACE_URI "\"\n"
-           "      xmlns:" MIME_NAMESPACE_NAME     "=\"" MIME_NAMESPACE_URI "\"\n>");
+       "<" XBEL_ROOT_ELEMENT " " XBEL_VERSION_ATTRIBUTE "=\"" XBEL_VERSION "\"\n"
+       "      xmlns:" BOOKMARK_NAMESPACE_NAME "=\"" BOOKMARK_NAMESPACE_URI "\"\n"
+       "      xmlns:" MIME_NAMESPACE_NAME     "=\"" MIME_NAMESPACE_URI "\"\n>");
 
   if (bookmark->title)
     {
       gchar *escaped_title;
 
       escaped_title = g_markup_escape_text (bookmark->title, -1);
 
       buffer = g_strconcat ("  "
-                "<" XBEL_TITLE_ELEMENT ">",
-                escaped_title,
-                "</" XBEL_TITLE_ELEMENT ">\n", NULL);
+          "<" XBEL_TITLE_ELEMENT ">",
+          escaped_title,
+          "</" XBEL_TITLE_ELEMENT ">\n", NULL);
 
       g_string_append (retval, buffer);
 
       g_free (buffer);
       g_free (escaped_title);
@@ -1568,13 +1573,13 @@
       gchar *escaped_desc;
 
       escaped_desc = g_markup_escape_text (bookmark->description, -1);
 
       buffer = g_strconcat ("  "
-                "<" XBEL_DESC_ELEMENT ">",
-                escaped_desc,
-                "</" XBEL_DESC_ELEMENT ">\n", NULL);
+          "<" XBEL_DESC_ELEMENT ">",
+          escaped_desc,
+          "</" XBEL_DESC_ELEMENT ">\n", NULL);
       g_string_append (retval, buffer);
 
       g_free (buffer);
       g_free (escaped_desc);
     }
@@ -1618,32 +1623,36 @@
  * should free the returned string.
  */
 static gchar *
 timestamp_to_iso8601 (time_t timestamp)
 {
-  GTimeVal stamp;
+  GDateTime *dt = g_date_time_new_from_unix_utc (timestamp);
+  gchar *iso8601_string = g_date_time_format_iso8601 (dt);
+  g_date_time_unref (dt);
 
-  if (timestamp == (time_t) -1)
-    g_get_current_time (&stamp);
-  else
-    {
-      stamp.tv_sec = timestamp;
-      stamp.tv_usec = 0;
-    }
-
-  return g_time_val_to_iso8601 (&stamp);
+  return g_steal_pointer (&iso8601_string);
 }
 
-static time_t
-timestamp_from_iso8601 (const gchar *iso_date)
+static gboolean
+timestamp_from_iso8601 (const gchar  *iso_date,
+                        time_t       *out_timestamp,
+                        GError      **error)
 {
-  GTimeVal stamp;
+  gint64 time_val;
+  GDateTime *dt = g_date_time_new_from_iso8601 (iso_date, NULL);
+  if (dt == NULL)
+    {
+      g_set_error (error, G_BOOKMARK_FILE_ERROR, G_BOOKMARK_FILE_ERROR_READ,
+                   _("Invalid date/time '%s' in bookmark file"), iso_date);
+      return FALSE;
+    }
 
-  if (!g_time_val_from_iso8601 (iso_date, &stamp))
-    return (time_t) -1;
+  time_val = g_date_time_to_unix (dt);
+  g_date_time_unref (dt);
 
-  return (time_t) stamp.tv_sec;
+  *out_timestamp = time_val;
+  return TRUE;
 }
 
 G_DEFINE_QUARK (g-bookmark-file-error-quark, g_bookmark_file_error)
 
 /********************
@@ -1710,13 +1719,13 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_load_from_data (GBookmarkFile  *bookmark,
-                const gchar    *data,
-                gsize           length,
-                GError        **error)
+        const gchar    *data,
+        gsize           length,
+        GError        **error)
 {
   GError *parse_error;
   gboolean retval;
 
   g_return_val_if_fail (bookmark != NULL, FALSE);
@@ -1754,12 +1763,12 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_load_from_file (GBookmarkFile  *bookmark,
-                const gchar    *filename,
-                GError        **error)
+        const gchar    *filename,
+        GError        **error)
 {
   gboolean ret = FALSE;
   gchar *buffer = NULL;
   gsize len;
 
@@ -1866,13 +1875,13 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_load_from_data_dirs (GBookmarkFile  *bookmark,
-                     const gchar    *file,
-                     gchar         **full_path,
-                     GError        **error)
+             const gchar    *file,
+             gchar         **full_path,
+             GError        **error)
 {
   GError *file_error = NULL;
   gchar **all_data_dirs, **data_dirs;
   const gchar *user_data_dir;
   const gchar * const * system_data_dirs;
@@ -1904,20 +1913,20 @@
       output_path = find_file_in_data_dirs (file, &data_dirs, &file_error);
 
       if (file_error)
         {
           g_propagate_error (error, file_error);
-      break;
+    break;
         }
 
       found_file = g_bookmark_file_load_from_file (bookmark,
-                               output_path,
-                               &file_error);
+                     output_path,
+                     &file_error);
       if (file_error)
         {
-      g_propagate_error (error, file_error);
-      break;
+    g_propagate_error (error, file_error);
+    break;
         }
     }
 
   if (found_file && full_path)
     *full_path = output_path;
@@ -1943,12 +1952,12 @@
  *
  * Since: 2.12
  */
 gchar *
 g_bookmark_file_to_data (GBookmarkFile  *bookmark,
-             gsize          *length,
-             GError        **error)
+       gsize          *length,
+       GError        **error)
 {
   GError *write_error = NULL;
   gchar *retval;
 
   g_return_val_if_fail (bookmark != NULL, NULL);
@@ -1977,12 +1986,12 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_to_file (GBookmarkFile  *bookmark,
-             const gchar    *filename,
-             GError        **error)
+       const gchar    *filename,
+       GError        **error)
 {
   gchar *data;
   GError *data_error, *write_error;
   gsize len;
   gboolean retval;
@@ -2015,22 +2024,22 @@
   return retval;
 }
 
 static BookmarkItem *
 g_bookmark_file_lookup_item (GBookmarkFile *bookmark,
-                 const gchar   *uri)
+           const gchar   *uri)
 {
   g_warn_if_fail (bookmark != NULL && uri != NULL);
 
   return g_hash_table_lookup (bookmark->items_by_uri, uri);
 }
 
 /* this function adds a new item to the list */
 static void
 g_bookmark_file_add_item (GBookmarkFile  *bookmark,
-              BookmarkItem   *item,
-              GError        **error)
+        BookmarkItem   *item,
+        GError        **error)
 {
   g_warn_if_fail (bookmark != NULL);
   g_warn_if_fail (item != NULL);
 
 #ifdef GSTREAMER_LITE
@@ -2043,21 +2052,21 @@
    * screwing up something big time.
    */
   if (G_UNLIKELY (g_bookmark_file_has_item (bookmark, item->uri)))
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_INVALID_URI,
-                   _("A bookmark for URI '%s' already exists"),
-                   item->uri);
+       G_BOOKMARK_FILE_ERROR_INVALID_URI,
+       _("A bookmark for URI '%s' already exists"),
+       item->uri);
       return;
     }
 
   bookmark->items = g_list_prepend (bookmark->items, item);
 
   g_hash_table_replace (bookmark->items_by_uri,
-            item->uri,
-            item);
+      item->uri,
+      item);
 
   if (item->added == (time_t) -1)
     item->added = time (NULL);
 
   if (item->modified == (time_t) -1)
@@ -2076,12 +2085,12 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_remove_item (GBookmarkFile  *bookmark,
-                 const gchar    *uri,
-                 GError        **error)
+           const gchar    *uri,
+           GError        **error)
 {
   BookmarkItem *item;
 
   g_return_val_if_fail (bookmark != NULL, FALSE);
   g_return_val_if_fail (uri != NULL, FALSE);
@@ -2089,13 +2098,13 @@
   item = g_bookmark_file_lookup_item (bookmark, uri);
 
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return FALSE;
     }
 
   bookmark->items = g_list_remove (bookmark->items, item);
   g_hash_table_remove (bookmark->items_by_uri, item->uri);
@@ -2116,11 +2125,11 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_has_item (GBookmarkFile *bookmark,
-              const gchar   *uri)
+        const gchar   *uri)
 {
   g_return_val_if_fail (bookmark != NULL, FALSE);
   g_return_val_if_fail (uri != NULL, FALSE);
 
   return (NULL != g_hash_table_lookup (bookmark->items_by_uri, uri));
@@ -2140,11 +2149,11 @@
  *
  * Since: 2.12
  */
 gchar **
 g_bookmark_file_get_uris (GBookmarkFile *bookmark,
-              gsize         *length)
+        gsize         *length)
 {
   GList *l;
   gchar **uris;
   gsize i, n_items;
 
@@ -2185,12 +2194,12 @@
  *
  * Since: 2.12
  */
 void
 g_bookmark_file_set_title (GBookmarkFile *bookmark,
-               const gchar   *uri,
-               const gchar   *title)
+         const gchar   *uri,
+         const gchar   *title)
 {
   g_return_if_fail (bookmark != NULL);
 
   if (!uri)
     {
@@ -2233,12 +2242,12 @@
  *
  * Since: 2.12
  */
 gchar *
 g_bookmark_file_get_title (GBookmarkFile  *bookmark,
-               const gchar    *uri,
-               GError        **error)
+         const gchar    *uri,
+         GError        **error)
 {
   BookmarkItem *item;
 
   g_return_val_if_fail (bookmark != NULL, NULL);
 
@@ -2247,13 +2256,13 @@
 
   item = g_bookmark_file_lookup_item (bookmark, uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return NULL;
     }
 
   return g_strdup (item->title);
 }
@@ -2272,12 +2281,12 @@
  *
  * Since: 2.12
  */
 void
 g_bookmark_file_set_description (GBookmarkFile *bookmark,
-                 const gchar   *uri,
-                 const gchar   *description)
+         const gchar   *uri,
+         const gchar   *description)
 {
   g_return_if_fail (bookmark != NULL);
 
   if (!uri)
     {
@@ -2318,12 +2327,12 @@
  *
  * Since: 2.12
  */
 gchar *
 g_bookmark_file_get_description (GBookmarkFile  *bookmark,
-                 const gchar    *uri,
-                 GError        **error)
+         const gchar    *uri,
+         GError        **error)
 {
   BookmarkItem *item;
 
   g_return_val_if_fail (bookmark != NULL, NULL);
 
@@ -2332,13 +2341,13 @@
 
   item = g_bookmark_file_lookup_item (bookmark, uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return NULL;
     }
 
   return g_strdup (item->description);
 }
@@ -2355,12 +2364,12 @@
  *
  * Since: 2.12
  */
 void
 g_bookmark_file_set_mime_type (GBookmarkFile *bookmark,
-                   const gchar   *uri,
-                   const gchar   *mime_type)
+             const gchar   *uri,
+             const gchar   *mime_type)
 {
   BookmarkItem *item;
 
   g_return_if_fail (bookmark != NULL);
   g_return_if_fail (uri != NULL);
@@ -2400,34 +2409,34 @@
  *
  * Since: 2.12
  */
 gchar *
 g_bookmark_file_get_mime_type (GBookmarkFile  *bookmark,
-                   const gchar    *uri,
-                   GError        **error)
+             const gchar    *uri,
+             GError        **error)
 {
   BookmarkItem *item;
 
   g_return_val_if_fail (bookmark != NULL, NULL);
   g_return_val_if_fail (uri != NULL, NULL);
 
   item = g_bookmark_file_lookup_item (bookmark, uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return NULL;
     }
 
   if (!item->metadata)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_INVALID_VALUE,
-                   _("No MIME type defined in the bookmark for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_INVALID_VALUE,
+       _("No MIME type defined in the bookmark for URI '%s'"),
+       uri);
       return NULL;
     }
 
   return g_strdup (item->metadata->mime_type);
 }
@@ -2444,12 +2453,12 @@
  *
  * Since: 2.12
  */
 void
 g_bookmark_file_set_is_private (GBookmarkFile *bookmark,
-                const gchar   *uri,
-                gboolean       is_private)
+        const gchar   *uri,
+        gboolean       is_private)
 {
   BookmarkItem *item;
 
   g_return_if_fail (bookmark != NULL);
   g_return_if_fail (uri != NULL);
@@ -2485,34 +2494,34 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_get_is_private (GBookmarkFile  *bookmark,
-                const gchar    *uri,
-                GError        **error)
+        const gchar    *uri,
+        GError        **error)
 {
   BookmarkItem *item;
 
   g_return_val_if_fail (bookmark != NULL, FALSE);
   g_return_val_if_fail (uri != NULL, FALSE);
 
   item = g_bookmark_file_lookup_item (bookmark, uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return FALSE;
     }
 
   if (!item->metadata)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_INVALID_VALUE,
-                   _("No private flag has been defined in bookmark for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_INVALID_VALUE,
+       _("No private flag has been defined in bookmark for URI '%s'"),
+        uri);
       return FALSE;
     }
 
   return item->metadata->is_private;
 }
@@ -2529,12 +2538,12 @@
  *
  * Since: 2.12
  */
 void
 g_bookmark_file_set_added (GBookmarkFile *bookmark,
-               const gchar   *uri,
-               time_t         added)
+         const gchar   *uri,
+         time_t         added)
 {
   BookmarkItem *item;
 
   g_return_if_fail (bookmark != NULL);
   g_return_if_fail (uri != NULL);
@@ -2568,25 +2577,25 @@
  *
  * Since: 2.12
  */
 time_t
 g_bookmark_file_get_added (GBookmarkFile  *bookmark,
-               const gchar    *uri,
-               GError        **error)
+         const gchar    *uri,
+         GError        **error)
 {
   BookmarkItem *item;
 
   g_return_val_if_fail (bookmark != NULL, (time_t) -1);
   g_return_val_if_fail (uri != NULL, (time_t) -1);
 
   item = g_bookmark_file_lookup_item (bookmark, uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return (time_t) -1;
     }
 
   return item->added;
 }
@@ -2608,12 +2617,12 @@
  *
  * Since: 2.12
  */
 void
 g_bookmark_file_set_modified (GBookmarkFile *bookmark,
-                  const gchar   *uri,
-                  time_t         modified)
+            const gchar   *uri,
+            time_t         modified)
 {
   BookmarkItem *item;
 
   g_return_if_fail (bookmark != NULL);
   g_return_if_fail (uri != NULL);
@@ -2646,25 +2655,25 @@
  *
  * Since: 2.12
  */
 time_t
 g_bookmark_file_get_modified (GBookmarkFile  *bookmark,
-                  const gchar    *uri,
-                  GError        **error)
+            const gchar    *uri,
+            GError        **error)
 {
   BookmarkItem *item;
 
   g_return_val_if_fail (bookmark != NULL, (time_t) -1);
   g_return_val_if_fail (uri != NULL, (time_t) -1);
 
   item = g_bookmark_file_lookup_item (bookmark, uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return (time_t) -1;
     }
 
   return item->modified;
 }
@@ -2687,12 +2696,12 @@
  *
  * Since: 2.12
  */
 void
 g_bookmark_file_set_visited (GBookmarkFile *bookmark,
-                 const gchar   *uri,
-                 time_t         visited)
+           const gchar   *uri,
+           time_t         visited)
 {
   BookmarkItem *item;
 
   g_return_if_fail (bookmark != NULL);
   g_return_if_fail (uri != NULL);
@@ -2725,25 +2734,25 @@
  *
  * Since: 2.12
  */
 time_t
 g_bookmark_file_get_visited (GBookmarkFile  *bookmark,
-                 const gchar    *uri,
-                 GError        **error)
+           const gchar    *uri,
+           GError        **error)
 {
   BookmarkItem *item;
 
   g_return_val_if_fail (bookmark != NULL, (time_t) -1);
   g_return_val_if_fail (uri != NULL, (time_t) -1);
 
   item = g_bookmark_file_lookup_item (bookmark, uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return (time_t) -1;
     }
 
   return item->visited;
 }
@@ -2765,13 +2774,13 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_has_group (GBookmarkFile  *bookmark,
-               const gchar    *uri,
-               const gchar    *group,
-               GError        **error)
+         const gchar    *uri,
+         const gchar    *group,
+         GError        **error)
 {
   BookmarkItem *item;
   GList *l;
 
   g_return_val_if_fail (bookmark != NULL, FALSE);
@@ -2779,13 +2788,13 @@
 
   item = g_bookmark_file_lookup_item (bookmark, uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return FALSE;
     }
 
   if (!item->metadata)
     return FALSE;
@@ -2813,12 +2822,12 @@
  *
  * Since: 2.12
  */
 void
 g_bookmark_file_add_group (GBookmarkFile *bookmark,
-               const gchar   *uri,
-               const gchar   *group)
+         const gchar   *uri,
+         const gchar   *group)
 {
   BookmarkItem *item;
 
   g_return_if_fail (bookmark != NULL);
   g_return_if_fail (uri != NULL);
@@ -2862,13 +2871,13 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_remove_group (GBookmarkFile  *bookmark,
-                  const gchar    *uri,
-                  const gchar    *group,
-                  GError        **error)
+            const gchar    *uri,
+            const gchar    *group,
+            GError        **error)
 {
   BookmarkItem *item;
   GList *l;
 
   g_return_val_if_fail (bookmark != NULL, FALSE);
@@ -2876,13 +2885,13 @@
 
   item = g_bookmark_file_lookup_item (bookmark, uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return FALSE;
     }
 
   if (!item->metadata)
     {
@@ -2897,11 +2906,11 @@
     {
       if (strcmp (l->data, group) == 0)
         {
           item->metadata->groups = g_list_remove_link (item->metadata->groups, l);
           g_free (l->data);
-      g_list_free_1 (l);
+    g_list_free_1 (l);
 
           item->modified = time (NULL);
 
           return TRUE;
         }
@@ -2925,13 +2934,13 @@
  *
  * Since: 2.12
  */
 void
 g_bookmark_file_set_groups (GBookmarkFile  *bookmark,
-                const gchar    *uri,
-                const gchar   **groups,
-                gsize           length)
+          const gchar    *uri,
+          const gchar   **groups,
+          gsize           length)
 {
   BookmarkItem *item;
   gsize i;
 
   g_return_if_fail (bookmark != NULL);
@@ -2953,11 +2962,11 @@
 
   if (groups)
     {
       for (i = 0; i < length && groups[i] != NULL; i++)
         item->metadata->groups = g_list_append (item->metadata->groups,
-                            g_strdup (groups[i]));
+                  g_strdup (groups[i]));
     }
 
   item->modified = time (NULL);
 }
 
@@ -2981,13 +2990,13 @@
  *
  * Since: 2.12
  */
 gchar **
 g_bookmark_file_get_groups (GBookmarkFile  *bookmark,
-                const gchar    *uri,
-                gsize          *length,
-                GError        **error)
+          const gchar    *uri,
+          gsize          *length,
+          GError        **error)
 {
   BookmarkItem *item;
   GList *l;
   gsize len, i;
   gchar **retval;
@@ -2997,20 +3006,20 @@
 
   item = g_bookmark_file_lookup_item (bookmark, uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return NULL;
     }
 
   if (!item->metadata)
     {
       if (length)
-    *length = 0;
+  *length = 0;
 
       return NULL;
     }
 
   len = g_list_length (item->metadata->groups);
@@ -3066,13 +3075,13 @@
  *
  * Since: 2.12
  */
 void
 g_bookmark_file_add_application (GBookmarkFile *bookmark,
-                 const gchar   *uri,
-                 const gchar   *name,
-                 const gchar   *exec)
+         const gchar   *uri,
+         const gchar   *name,
+         const gchar   *exec)
 {
   BookmarkItem *item;
   gchar *app_name, *app_exec;
 
   g_return_if_fail (bookmark != NULL);
@@ -3126,28 +3135,28 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_remove_application (GBookmarkFile  *bookmark,
-                    const gchar    *uri,
-                    const gchar    *name,
-                    GError        **error)
+            const gchar    *uri,
+            const gchar    *name,
+            GError        **error)
 {
   GError *set_error;
   gboolean retval;
 
   g_return_val_if_fail (bookmark != NULL, FALSE);
   g_return_val_if_fail (uri != NULL, FALSE);
   g_return_val_if_fail (name != NULL, FALSE);
 
   set_error = NULL;
   retval = g_bookmark_file_set_app_info (bookmark, uri,
-                     name,
-                     "",
-                     0,
-                     (time_t) -1,
-                     &set_error);
+             name,
+             "",
+             0,
+             (time_t) -1,
+             &set_error);
   if (set_error)
     {
       g_propagate_error (error, set_error);
 
       return FALSE;
@@ -3173,13 +3182,13 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_has_application (GBookmarkFile  *bookmark,
-                 const gchar    *uri,
-                 const gchar    *name,
-                 GError        **error)
+         const gchar    *uri,
+         const gchar    *name,
+         GError        **error)
 {
   BookmarkItem *item;
 
   g_return_val_if_fail (bookmark != NULL, FALSE);
   g_return_val_if_fail (uri != NULL, FALSE);
@@ -3187,13 +3196,13 @@
 
   item = g_bookmark_file_lookup_item (bookmark, uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return FALSE;
     }
 
   return (NULL != bookmark_item_lookup_app_info (item, name));
 }
@@ -3242,16 +3251,16 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_set_app_info (GBookmarkFile  *bookmark,
-                  const gchar    *uri,
-                  const gchar    *name,
-                  const gchar    *exec,
-                  gint            count,
-                  time_t          stamp,
-                  GError        **error)
+            const gchar    *uri,
+            const gchar    *name,
+            const gchar    *exec,
+            gint            count,
+            time_t          stamp,
+            GError        **error)
 {
   BookmarkItem *item;
   BookmarkAppInfo *ai;
 
   g_return_val_if_fail (bookmark != NULL, FALSE);
@@ -3263,20 +3272,20 @@
   if (!item)
     {
       if (count == 0)
         {
           g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                       _("No bookmark found for URI '%s'"),
-                       uri);
-      return FALSE;
-    }
+           G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+           _("No bookmark found for URI '%s'"),
+           uri);
+    return FALSE;
+  }
       else
         {
           item = bookmark_item_new (uri);
-      g_bookmark_file_add_item (bookmark, item, NULL);
-    }
+    g_bookmark_file_add_item (bookmark, item, NULL);
+  }
     }
 
   if (!item->metadata)
     item->metadata = bookmark_metadata_new ();
 
@@ -3284,14 +3293,14 @@
   if (!ai)
     {
       if (count == 0)
         {
           g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                       G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED,
-                       _("No application with name '%s' registered a bookmark for '%s'"),
-                       name,
-                       uri);
+           G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED,
+           _("No application with name '%s' registered a bookmark for '%s'"),
+           name,
+           uri);
           return FALSE;
         }
       else
         {
           ai = bookmark_app_info_new (name);
@@ -3338,11 +3347,11 @@
 }
 
 /* expands the application's command line */
 static gchar *
 expand_exec_line (const gchar *exec_fmt,
-          const gchar *uri)
+      const gchar *uri)
 {
   GString *exec;
   gchar ch;
 
   exec = g_string_sized_new (512);
@@ -3356,23 +3365,23 @@
 
      ch = *exec_fmt++;
      switch (ch)
        {
        case '\0':
-     goto out;
+   goto out;
        case 'U':
        case 'u':
          g_string_append (exec, uri);
          break;
        case 'F':
        case 'f':
          {
-       gchar *file = g_filename_from_uri (uri, NULL, NULL);
+     gchar *file = g_filename_from_uri (uri, NULL, NULL);
            if (file)
              {
-           g_string_append (exec, file);
-           g_free (file);
+         g_string_append (exec, file);
+         g_free (file);
              }
            else
              {
                g_string_free (exec, TRUE);
                return NULL;
@@ -3418,16 +3427,16 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_get_app_info (GBookmarkFile  *bookmark,
-                  const gchar    *uri,
-                  const gchar    *name,
-                  gchar         **exec,
-                  guint          *count,
-                  time_t         *stamp,
-                  GError        **error)
+            const gchar    *uri,
+            const gchar    *name,
+            gchar         **exec,
+            guint          *count,
+            time_t         *stamp,
+            GError        **error)
 {
   BookmarkItem *item;
   BookmarkAppInfo *ai;
 
   g_return_val_if_fail (bookmark != NULL, FALSE);
@@ -3436,24 +3445,24 @@
 
   item = g_bookmark_file_lookup_item (bookmark, uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return FALSE;
     }
 
   ai = bookmark_item_lookup_app_info (item, name);
   if (!ai)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED,
-                   _("No application with name '%s' registered a bookmark for '%s'"),
-                   name,
-                   uri);
+       G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED,
+       _("No application with name '%s' registered a bookmark for '%s'"),
+       name,
+       uri);
       return FALSE;
     }
 
   if (exec)
     {
@@ -3469,13 +3478,13 @@
 
       *exec = expand_exec_line (command_line, uri);
       if (!*exec)
         {
           g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                       G_BOOKMARK_FILE_ERROR_INVALID_URI,
-                       _("Failed to expand exec line '%s' with URI '%s'"),
-                       ai->exec, uri);
+           G_BOOKMARK_FILE_ERROR_INVALID_URI,
+           _("Failed to expand exec line '%s' with URI '%s'"),
+         ai->exec, uri);
           g_free (command_line);
 
           return FALSE;
         }
       else
@@ -3509,13 +3518,13 @@
  *
  * Since: 2.12
  */
 gchar **
 g_bookmark_file_get_applications (GBookmarkFile  *bookmark,
-                  const gchar    *uri,
-                  gsize          *length,
-                  GError        **error)
+          const gchar    *uri,
+          gsize          *length,
+          GError        **error)
 {
   BookmarkItem *item;
   GList *l;
   gchar **apps;
   gsize i, n_apps;
@@ -3525,20 +3534,20 @@
 
   item = g_bookmark_file_lookup_item (bookmark, uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return NULL;
     }
 
   if (!item->metadata)
     {
       if (length)
-    *length = 0;
+  *length = 0;
 
       return NULL;
     }
 
   n_apps = g_list_length (item->metadata->applications);
@@ -3601,26 +3610,26 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_move_item (GBookmarkFile  *bookmark,
-               const gchar    *old_uri,
-               const gchar    *new_uri,
-               GError        **error)
+         const gchar    *old_uri,
+         const gchar    *new_uri,
+         GError        **error)
 {
   BookmarkItem *item;
 
   g_return_val_if_fail (bookmark != NULL, FALSE);
   g_return_val_if_fail (old_uri != NULL, FALSE);
 
   item = g_bookmark_file_lookup_item (bookmark, old_uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   old_uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       old_uri);
       return FALSE;
     }
 
   if (new_uri && new_uri[0] != '\0')
     {
@@ -3667,13 +3676,13 @@
  *
  * Since: 2.12
  */
 void
 g_bookmark_file_set_icon (GBookmarkFile *bookmark,
-              const gchar   *uri,
-              const gchar   *href,
-              const gchar   *mime_type)
+        const gchar   *uri,
+        const gchar   *href,
+        const gchar   *mime_type)
 {
   BookmarkItem *item;
 
   g_return_if_fail (bookmark != NULL);
   g_return_if_fail (uri != NULL);
@@ -3719,27 +3728,27 @@
  *
  * Since: 2.12
  */
 gboolean
 g_bookmark_file_get_icon (GBookmarkFile  *bookmark,
-              const gchar    *uri,
-              gchar         **href,
-              gchar         **mime_type,
-              GError        **error)
+        const gchar    *uri,
+        gchar         **href,
+        gchar         **mime_type,
+        GError        **error)
 {
   BookmarkItem *item;
 
   g_return_val_if_fail (bookmark != NULL, FALSE);
   g_return_val_if_fail (uri != NULL, FALSE);
 
   item = g_bookmark_file_lookup_item (bookmark, uri);
   if (!item)
     {
       g_set_error (error, G_BOOKMARK_FILE_ERROR,
-                   G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
-                   _("No bookmark found for URI '%s'"),
-                   uri);
+       G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
+       _("No bookmark found for URI '%s'"),
+       uri);
       return FALSE;
     }
 
   if ((!item->metadata) || (!item->metadata->icon_href))
     return FALSE;
