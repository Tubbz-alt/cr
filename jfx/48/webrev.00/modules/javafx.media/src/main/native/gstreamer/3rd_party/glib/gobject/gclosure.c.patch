diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gclosure.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gclosure.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gclosure.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gclosure.c
@@ -84,39 +84,39 @@
  *
  * - g_closure_invalidate() and invalidation notifiers allow callbacks to be
  *   automatically removed when the objects they point to go away.
  */
 
-#define CLOSURE_MAX_REF_COUNT       ((1 << 15) - 1)
-#define CLOSURE_MAX_N_GUARDS        ((1 << 1) - 1)
-#define CLOSURE_MAX_N_FNOTIFIERS    ((1 << 2) - 1)
-#define CLOSURE_MAX_N_INOTIFIERS    ((1 << 8) - 1)
-#define CLOSURE_N_MFUNCS(cl)        (((cl)->n_guards << 1L))
+#define CLOSURE_MAX_REF_COUNT   ((1 << 15) - 1)
+#define CLOSURE_MAX_N_GUARDS    ((1 << 1) - 1)
+#define CLOSURE_MAX_N_FNOTIFIERS  ((1 << 2) - 1)
+#define CLOSURE_MAX_N_INOTIFIERS  ((1 << 8) - 1)
+#define CLOSURE_N_MFUNCS(cl)    (((cl)->n_guards << 1L))
 /* same as G_CLOSURE_N_NOTIFIERS() (keep in sync) */
-#define CLOSURE_N_NOTIFIERS(cl)     (CLOSURE_N_MFUNCS (cl) + \
+#define CLOSURE_N_NOTIFIERS(cl)   (CLOSURE_N_MFUNCS (cl) + \
                                          (cl)->n_fnotifiers + \
                                          (cl)->n_inotifiers)
 
 typedef union {
   GClosure closure;
   volatile gint vint;
 } ClosureInt;
 
 #define CHANGE_FIELD(_closure, _field, _OP, _value, _must_set, _SET_OLD, _SET_NEW)      \
 G_STMT_START {                                                                          \
-  ClosureInt *cunion = (ClosureInt*) _closure;                                      \
-  gint new_int, old_int, success;                                                   \
-  do                                                                            \
-    {                                                                           \
-      ClosureInt tmp;                                                           \
-      tmp.vint = old_int = cunion->vint;                                        \
+  ClosureInt *cunion = (ClosureInt*) _closure;                                    \
+  gint new_int, old_int, success;                                                 \
+  do                                                                        \
+    {                                                                       \
+      ClosureInt tmp;                                                       \
+      tmp.vint = old_int = cunion->vint;                                    \
       _SET_OLD tmp.closure._field;                                                      \
-      tmp.closure._field _OP _value;                                            \
+      tmp.closure._field _OP _value;                                          \
       _SET_NEW tmp.closure._field;                                                      \
-      new_int = tmp.vint;                                                       \
+      new_int = tmp.vint;                                                   \
       success = g_atomic_int_compare_and_exchange (&cunion->vint, old_int, new_int);    \
-    }                                                                           \
+    }                                                                       \
   while (!success && _must_set);                                                        \
 } G_STMT_END
 
 #define SWAP(_closure, _field, _value, _oldv)   CHANGE_FIELD (_closure, _field, =, _value, TRUE, *(_oldv) =,     (void) )
 #define SET(_closure, _field, _value)           CHANGE_FIELD (_closure, _field, =, _value, TRUE,     (void),     (void) )
@@ -188,11 +188,11 @@
  *
  * Returns: (transfer none): a floating reference to a new #GClosure
  */
 GClosure*
 g_closure_new_simple (guint           sizeof_closure,
-              gpointer        data)
+          gpointer        data)
 {
   GClosure *closure;
   gint private_size;
   gchar *allocated;
 
@@ -234,11 +234,11 @@
   return closure;
 }
 
 static inline void
 closure_invoke_notifiers (GClosure *closure,
-              guint     notify_type)
+        guint     notify_type)
 {
   /* notifier layout:
    *     n_guards    n_guards     n_fnotif.  n_inotifiers
    * ->[[pre_guards][post_guards][fnotifiers][inotifiers]]
    *
@@ -259,62 +259,62 @@
     {
       GClosureNotifyData *ndata;
       guint i, offs;
     case FNOTIFY:
       while (closure->n_fnotifiers)
-    {
+  {
           guint n;
-      DEC_ASSIGN (closure, n_fnotifiers, &n);
+    DEC_ASSIGN (closure, n_fnotifiers, &n);
 
-      ndata = closure->notifiers + CLOSURE_N_MFUNCS (closure) + n;
-      closure->marshal = (GClosureMarshal) ndata->notify;
-      closure->data = ndata->data;
-      ndata->notify (ndata->data, closure);
-    }
+    ndata = closure->notifiers + CLOSURE_N_MFUNCS (closure) + n;
+    closure->marshal = (GClosureMarshal) ndata->notify;
+    closure->data = ndata->data;
+    ndata->notify (ndata->data, closure);
+  }
       closure->marshal = NULL;
       closure->data = NULL;
       break;
     case INOTIFY:
       SET (closure, in_inotify, TRUE);
       while (closure->n_inotifiers)
-    {
+  {
           guint n;
           DEC_ASSIGN (closure, n_inotifiers, &n);
 
-      ndata = closure->notifiers + CLOSURE_N_MFUNCS (closure) + closure->n_fnotifiers + n;
-      closure->marshal = (GClosureMarshal) ndata->notify;
-      closure->data = ndata->data;
-      ndata->notify (ndata->data, closure);
-    }
+    ndata = closure->notifiers + CLOSURE_N_MFUNCS (closure) + closure->n_fnotifiers + n;
+    closure->marshal = (GClosureMarshal) ndata->notify;
+    closure->data = ndata->data;
+    ndata->notify (ndata->data, closure);
+  }
       closure->marshal = NULL;
       closure->data = NULL;
       SET (closure, in_inotify, FALSE);
       break;
     case PRE_NOTIFY:
       i = closure->n_guards;
       offs = 0;
       while (i--)
-    {
-      ndata = closure->notifiers + offs + i;
-      ndata->notify (ndata->data, closure);
-    }
+  {
+    ndata = closure->notifiers + offs + i;
+    ndata->notify (ndata->data, closure);
+  }
       break;
     case POST_NOTIFY:
       i = closure->n_guards;
       offs = i;
       while (i--)
-    {
-      ndata = closure->notifiers + offs + i;
-      ndata->notify (ndata->data, closure);
-    }
+  {
+    ndata = closure->notifiers + offs + i;
+    ndata->notify (ndata->data, closure);
+  }
       break;
     }
 }
 
 static void
 g_closure_set_meta_va_marshal (GClosure       *closure,
-                   GVaClosureMarshal va_meta_marshal)
+             GVaClosureMarshal va_meta_marshal)
 {
   GRealClosure *real_closure;
 
   g_return_if_fail (closure != NULL);
   g_return_if_fail (va_meta_marshal != NULL);
@@ -350,12 +350,12 @@
  * the right callback and passes it to the marshaller as the
  * @marshal_data argument.
  */
 void
 g_closure_set_meta_marshal (GClosure       *closure,
-                gpointer        marshal_data,
-                GClosureMarshal meta_marshal)
+          gpointer        marshal_data,
+          GClosureMarshal meta_marshal)
 {
   GRealClosure *real_closure;
 
   g_return_if_fail (closure != NULL);
   g_return_if_fail (meta_marshal != NULL);
@@ -385,14 +385,14 @@
  * the extra arguments for the duration of the callback. See
  * g_object_watch_closure() for an example of marshal guards.
  */
 void
 g_closure_add_marshal_guards (GClosure      *closure,
-                  gpointer       pre_marshal_data,
-                  GClosureNotify pre_marshal_notify,
-                  gpointer       post_marshal_data,
-                  GClosureNotify post_marshal_notify)
+            gpointer       pre_marshal_data,
+            GClosureNotify pre_marshal_notify,
+            gpointer       post_marshal_data,
+            GClosureNotify post_marshal_notify)
 {
   guint i;
 
   g_return_if_fail (closure != NULL);
   g_return_if_fail (pre_marshal_notify != NULL);
@@ -402,27 +402,27 @@
   g_return_if_fail (closure->n_guards < CLOSURE_MAX_N_GUARDS);
 
   closure->notifiers = g_renew (GClosureNotifyData, closure->notifiers, CLOSURE_N_NOTIFIERS (closure) + 2);
   if (closure->n_inotifiers)
     closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
-            closure->n_fnotifiers +
-            closure->n_inotifiers + 1)] = closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
-                                      closure->n_fnotifiers + 0)];
+      closure->n_fnotifiers +
+      closure->n_inotifiers + 1)] = closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
+                    closure->n_fnotifiers + 0)];
   if (closure->n_inotifiers > 1)
     closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
-            closure->n_fnotifiers +
-            closure->n_inotifiers)] = closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
-                                      closure->n_fnotifiers + 1)];
+      closure->n_fnotifiers +
+      closure->n_inotifiers)] = closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
+                      closure->n_fnotifiers + 1)];
   if (closure->n_fnotifiers)
     closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
-            closure->n_fnotifiers + 1)] = closure->notifiers[CLOSURE_N_MFUNCS (closure) + 0];
+      closure->n_fnotifiers + 1)] = closure->notifiers[CLOSURE_N_MFUNCS (closure) + 0];
   if (closure->n_fnotifiers > 1)
     closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
-            closure->n_fnotifiers)] = closure->notifiers[CLOSURE_N_MFUNCS (closure) + 1];
+      closure->n_fnotifiers)] = closure->notifiers[CLOSURE_N_MFUNCS (closure) + 1];
   if (closure->n_guards)
     closure->notifiers[(closure->n_guards +
-            closure->n_guards + 1)] = closure->notifiers[closure->n_guards];
+      closure->n_guards + 1)] = closure->notifiers[closure->n_guards];
   i = closure->n_guards;
   closure->notifiers[i].data = pre_marshal_data;
   closure->notifiers[i].notify = pre_marshal_notify;
   closure->notifiers[i + 1].data = post_marshal_data;
   closure->notifiers[i + 1].notify = post_marshal_notify;
@@ -442,25 +442,25 @@
  * both invalidated and finalized, then the invalidate notifiers will
  * be run before the finalize notifiers.
  */
 void
 g_closure_add_finalize_notifier (GClosure      *closure,
-                 gpointer       notify_data,
-                 GClosureNotify notify_func)
+         gpointer       notify_data,
+         GClosureNotify notify_func)
 {
   guint i;
 
   g_return_if_fail (closure != NULL);
   g_return_if_fail (notify_func != NULL);
   g_return_if_fail (closure->n_fnotifiers < CLOSURE_MAX_N_FNOTIFIERS);
 
   closure->notifiers = g_renew (GClosureNotifyData, closure->notifiers, CLOSURE_N_NOTIFIERS (closure) + 1);
   if (closure->n_inotifiers)
     closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
-            closure->n_fnotifiers +
-            closure->n_inotifiers)] = closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
-                                      closure->n_fnotifiers + 0)];
+      closure->n_fnotifiers +
+      closure->n_inotifiers)] = closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
+                      closure->n_fnotifiers + 0)];
   i = CLOSURE_N_MFUNCS (closure) + closure->n_fnotifiers;
   closure->notifiers[i].data = notify_data;
   closure->notifiers[i].notify = notify_func;
   INC (closure, n_fnotifiers);
 }
@@ -476,12 +476,12 @@
  * notifiers are invoked before finalization notifiers, in an
  * unspecified order.
  */
 void
 g_closure_add_invalidate_notifier (GClosure      *closure,
-                   gpointer       notify_data,
-                   GClosureNotify notify_func)
+           gpointer       notify_data,
+           GClosureNotify notify_func)
 {
   guint i;
 
   g_return_if_fail (closure != NULL);
   g_return_if_fail (notify_func != NULL);
@@ -495,48 +495,48 @@
   INC (closure, n_inotifiers);
 }
 
 static inline gboolean
 closure_try_remove_inotify (GClosure       *closure,
-                gpointer       notify_data,
-                GClosureNotify notify_func)
+          gpointer       notify_data,
+          GClosureNotify notify_func)
 {
   GClosureNotifyData *ndata, *nlast;
 
   nlast = closure->notifiers + CLOSURE_N_NOTIFIERS (closure) - 1;
   for (ndata = nlast + 1 - closure->n_inotifiers; ndata <= nlast; ndata++)
     if (ndata->notify == notify_func && ndata->data == notify_data)
       {
-    DEC (closure, n_inotifiers);
-    if (ndata < nlast)
-      *ndata = *nlast;
+  DEC (closure, n_inotifiers);
+  if (ndata < nlast)
+    *ndata = *nlast;
 
-    return TRUE;
+  return TRUE;
       }
   return FALSE;
 }
 
 static inline gboolean
 closure_try_remove_fnotify (GClosure       *closure,
-                gpointer       notify_data,
-                GClosureNotify notify_func)
+          gpointer       notify_data,
+          GClosureNotify notify_func)
 {
   GClosureNotifyData *ndata, *nlast;
 
   nlast = closure->notifiers + CLOSURE_N_NOTIFIERS (closure) - closure->n_inotifiers - 1;
   for (ndata = nlast + 1 - closure->n_fnotifiers; ndata <= nlast; ndata++)
     if (ndata->notify == notify_func && ndata->data == notify_data)
       {
-    DEC (closure, n_fnotifiers);
-    if (ndata < nlast)
-      *ndata = *nlast;
-    if (closure->n_inotifiers)
-      closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
-                  closure->n_fnotifiers)] = closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
-                                        closure->n_fnotifiers +
-                                        closure->n_inotifiers)];
-    return TRUE;
+  DEC (closure, n_fnotifiers);
+  if (ndata < nlast)
+    *ndata = *nlast;
+  if (closure->n_inotifiers)
+    closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
+            closure->n_fnotifiers)] = closure->notifiers[(CLOSURE_N_MFUNCS (closure) +
+                      closure->n_fnotifiers +
+                      closure->n_inotifiers)];
+  return TRUE;
       }
   return FALSE;
 }
 
 /**
@@ -562,11 +562,11 @@
   return closure;
 }
 
 /**
  * g_closure_invalidate:
- * @closure: GClosure to invalidate
+ * @closure: #GClosure to invalidate
  *
  * Sets a flag on the closure to indicate that its calling
  * environment has become invalid, and thus causes any future
  * invocations of g_closure_invoke() on this @closure to be
  * ignored. Also, invalidation notifiers installed on the closure will
@@ -741,23 +741,23 @@
  *
  * Notice that notifiers are automatically removed after they are run.
  */
 void
 g_closure_remove_invalidate_notifier (GClosure      *closure,
-                      gpointer       notify_data,
-                      GClosureNotify notify_func)
+              gpointer       notify_data,
+              GClosureNotify notify_func)
 {
   g_return_if_fail (closure != NULL);
   g_return_if_fail (notify_func != NULL);
 
   if (closure->is_invalid && closure->in_inotify && /* account removal of notify_func() while it's called */
       ((gpointer) closure->marshal) == ((gpointer) notify_func) &&
       closure->data == notify_data)
     closure->marshal = NULL;
   else if (!closure_try_remove_inotify (closure, notify_data, notify_func))
     g_warning (G_STRLOC ": unable to remove uninstalled invalidation notifier: %p (%p)",
-           notify_func, notify_data);
+         notify_func, notify_data);
 }
 
 /**
  * g_closure_remove_finalize_notifier: (skip)
  * @closure: a #GClosure
@@ -769,12 +769,12 @@
  *
  * Notice that notifiers are automatically removed after they are run.
  */
 void
 g_closure_remove_finalize_notifier (GClosure      *closure,
-                    gpointer       notify_data,
-                    GClosureNotify notify_func)
+            gpointer       notify_data,
+            GClosureNotify notify_func)
 {
   g_return_if_fail (closure != NULL);
   g_return_if_fail (notify_func != NULL);
 
   if (closure->is_invalid && !closure->in_inotify && /* account removal of notify_func() while it's called */
@@ -800,14 +800,14 @@
  *
  * Invokes the closure, i.e. executes the callback represented by the @closure.
  */
 void
 g_closure_invoke (GClosure       *closure,
-          GValue /*out*/ *return_value,
-          guint           n_param_values,
-          const GValue   *param_values,
-          gpointer        invocation_hint)
+      GValue /*out*/ *return_value,
+      guint           n_param_values,
+      const GValue   *param_values,
+      gpointer        invocation_hint)
 {
   GRealClosure *real_closure;
 
   g_return_if_fail (closure != NULL);
 
@@ -822,28 +822,28 @@
 
       g_return_if_fail (closure->marshal || real_closure->meta_marshal);
 
       SET (closure, in_marshal, TRUE);
       if (real_closure->meta_marshal)
-    {
-      marshal_data = real_closure->meta_marshal_data;
-      marshal = real_closure->meta_marshal;
-    }
+  {
+    marshal_data = real_closure->meta_marshal_data;
+    marshal = real_closure->meta_marshal;
+  }
       else
-    {
-      marshal_data = NULL;
-      marshal = closure->marshal;
-    }
+  {
+    marshal_data = NULL;
+    marshal = closure->marshal;
+  }
       if (!in_marshal)
-    closure_invoke_notifiers (closure, PRE_NOTIFY);
+  closure_invoke_notifiers (closure, PRE_NOTIFY);
       marshal (closure,
-           return_value,
-           n_param_values, param_values,
-           invocation_hint,
-           marshal_data);
+         return_value,
+         n_param_values, param_values,
+         invocation_hint,
+         marshal_data);
       if (!in_marshal)
-    closure_invoke_notifiers (closure, POST_NOTIFY);
+  closure_invoke_notifiers (closure, POST_NOTIFY);
       SET (closure, in_marshal, in_marshal);
     }
   g_closure_unref (closure);
 }
 
@@ -862,15 +862,15 @@
      real_closure->va_meta_marshal != NULL);
 }
 
 void
 _g_closure_invoke_va (GClosure       *closure,
-              GValue /*out*/ *return_value,
-              gpointer        instance,
-              va_list         args,
-              int             n_params,
-              GType          *param_types)
+          GValue /*out*/ *return_value,
+          gpointer        instance,
+          va_list         args,
+          int             n_params,
+          GType          *param_types)
 {
   GRealClosure *real_closure;
 
   g_return_if_fail (closure != NULL);
 
@@ -885,28 +885,28 @@
 
       g_return_if_fail (closure->marshal || real_closure->meta_marshal);
 
       SET (closure, in_marshal, TRUE);
       if (real_closure->va_meta_marshal)
-    {
-      marshal_data = real_closure->meta_marshal_data;
-      marshal = real_closure->va_meta_marshal;
-    }
+  {
+    marshal_data = real_closure->meta_marshal_data;
+    marshal = real_closure->va_meta_marshal;
+  }
       else
-    {
-      marshal_data = NULL;
-      marshal = real_closure->va_marshal;
-    }
+  {
+    marshal_data = NULL;
+    marshal = real_closure->va_marshal;
+  }
       if (!in_marshal)
-    closure_invoke_notifiers (closure, PRE_NOTIFY);
+  closure_invoke_notifiers (closure, PRE_NOTIFY);
       marshal (closure,
-           return_value,
-           instance, args,
-           marshal_data,
-           n_params, param_types);
+         return_value,
+         instance, args,
+         marshal_data,
+         n_params, param_types);
       if (!in_marshal)
-    closure_invoke_notifiers (closure, POST_NOTIFY);
+  closure_invoke_notifiers (closure, POST_NOTIFY);
       SET (closure, in_marshal, in_marshal);
     }
   g_closure_unref (closure);
 }
 
@@ -923,36 +923,36 @@
  * functions), what it provides is a callback function to use instead of
  * @closure->callback.
  */
 void
 g_closure_set_marshal (GClosure       *closure,
-               GClosureMarshal marshal)
+           GClosureMarshal marshal)
 {
   g_return_if_fail (closure != NULL);
   g_return_if_fail (marshal != NULL);
 
   if (closure->marshal && closure->marshal != marshal)
     g_warning ("attempt to override closure->marshal (%p) with new marshal (%p)",
-           closure->marshal, marshal);
+         closure->marshal, marshal);
   else
     closure->marshal = marshal;
 }
 
 void
 _g_closure_set_va_marshal (GClosure       *closure,
-               GVaClosureMarshal marshal)
+         GVaClosureMarshal marshal)
 {
   GRealClosure *real_closure;
 
   g_return_if_fail (closure != NULL);
   g_return_if_fail (marshal != NULL);
 
   real_closure = G_REAL_CLOSURE (closure);
 
   if (real_closure->va_marshal && real_closure->va_marshal != marshal)
     g_warning ("attempt to override closure->va_marshal (%p) with new marshal (%p)",
-           real_closure->va_marshal, marshal);
+         real_closure->va_marshal, marshal);
   else
     real_closure->va_marshal = marshal;
 }
 
 /**
@@ -962,16 +962,18 @@
  * @destroy_data: destroy notify to be called when @user_data is no longer used
  *
  * Creates a new closure which invokes @callback_func with @user_data as
  * the last parameter.
  *
+ * @destroy_data will be called as a finalize notifier on the #GClosure.
+ *
  * Returns: (transfer none): a floating reference to a new #GCClosure
  */
 GClosure*
 g_cclosure_new (GCallback      callback_func,
-        gpointer       user_data,
-        GClosureNotify destroy_data)
+    gpointer       user_data,
+    GClosureNotify destroy_data)
 {
   GClosure *closure;
 
   g_return_val_if_fail (callback_func != NULL, NULL);
 
@@ -994,16 +996,18 @@
  * @destroy_data: destroy notify to be called when @user_data is no longer used
  *
  * Creates a new closure which invokes @callback_func with @user_data as
  * the first parameter.
  *
+ * @destroy_data will be called as a finalize notifier on the #GClosure.
+ *
  * Returns: (transfer none): a floating reference to a new #GCClosure
  */
 GClosure*
 g_cclosure_new_swap (GCallback      callback_func,
-             gpointer       user_data,
-             GClosureNotify destroy_data)
+         gpointer       user_data,
+         GClosureNotify destroy_data)
 {
   GClosure *closure;
 
   g_return_val_if_fail (callback_func != NULL, NULL);
 
@@ -1020,39 +1024,39 @@
   return closure;
 }
 
 static void
 g_type_class_meta_marshal (GClosure       *closure,
-               GValue /*out*/ *return_value,
-               guint           n_param_values,
-               const GValue   *param_values,
-               gpointer        invocation_hint,
-               gpointer        marshal_data)
+         GValue /*out*/ *return_value,
+         guint           n_param_values,
+         const GValue   *param_values,
+         gpointer        invocation_hint,
+         gpointer        marshal_data)
 {
   GTypeClass *class;
   gpointer callback;
   /* GType itype = (GType) closure->data; */
   guint offset = GPOINTER_TO_UINT (marshal_data);
 
   class = G_TYPE_INSTANCE_GET_CLASS (g_value_peek_pointer (param_values + 0), itype, GTypeClass);
   callback = G_STRUCT_MEMBER (gpointer, class, offset);
   if (callback)
     closure->marshal (closure,
-              return_value,
-              n_param_values, param_values,
-              invocation_hint,
-              callback);
+          return_value,
+          n_param_values, param_values,
+          invocation_hint,
+          callback);
 }
 
 static void
 g_type_class_meta_marshalv (GClosure *closure,
-                GValue   *return_value,
-                gpointer  instance,
-                va_list   args,
-                gpointer  marshal_data,
-                int       n_params,
-                GType    *param_types)
+          GValue   *return_value,
+          gpointer  instance,
+          va_list   args,
+          gpointer  marshal_data,
+          int       n_params,
+          GType    *param_types)
 {
   GRealClosure *real_closure;
   GTypeClass *class;
   gpointer callback;
   /* GType itype = (GType) closure->data; */
@@ -1062,43 +1066,43 @@
 
   class = G_TYPE_INSTANCE_GET_CLASS (instance, itype, GTypeClass);
   callback = G_STRUCT_MEMBER (gpointer, class, offset);
   if (callback)
     real_closure->va_marshal (closure,
-                  return_value,
-                  instance, args,
-                  callback,
-                  n_params,
-                  param_types);
+            return_value,
+            instance, args,
+            callback,
+            n_params,
+            param_types);
 }
 
 static void
 g_type_iface_meta_marshal (GClosure       *closure,
-               GValue /*out*/ *return_value,
-               guint           n_param_values,
-               const GValue   *param_values,
-               gpointer        invocation_hint,
-               gpointer        marshal_data)
+         GValue /*out*/ *return_value,
+         guint           n_param_values,
+         const GValue   *param_values,
+         gpointer        invocation_hint,
+         gpointer        marshal_data)
 {
   GTypeClass *class;
   gpointer callback;
   GType itype = (GType) closure->data;
   guint offset = GPOINTER_TO_UINT (marshal_data);
 
   class = G_TYPE_INSTANCE_GET_INTERFACE (g_value_peek_pointer (param_values + 0), itype, GTypeClass);
   callback = G_STRUCT_MEMBER (gpointer, class, offset);
   if (callback)
     closure->marshal (closure,
-              return_value,
-              n_param_values, param_values,
-              invocation_hint,
-              callback);
+          return_value,
+          n_param_values, param_values,
+          invocation_hint,
+          callback);
 }
 
 gboolean
 _g_closure_is_void (GClosure *closure,
-            gpointer instance)
+        gpointer instance)
 {
   GRealClosure *real_closure;
   GTypeClass *class;
   gpointer callback;
   GType itype;
@@ -1130,16 +1134,16 @@
   return FALSE;
 }
 
 static void
 g_type_iface_meta_marshalv (GClosure *closure,
-                GValue   *return_value,
-                gpointer  instance,
-                va_list   args,
-                gpointer  marshal_data,
-                int       n_params,
-                GType    *param_types)
+          GValue   *return_value,
+          gpointer  instance,
+          va_list   args,
+          gpointer  marshal_data,
+          int       n_params,
+          GType    *param_types)
 {
   GRealClosure *real_closure;
   GTypeClass *class;
   gpointer callback;
   GType itype = (GType) closure->data;
@@ -1149,15 +1153,15 @@
 
   class = G_TYPE_INSTANCE_GET_INTERFACE (instance, itype, GTypeClass);
   callback = G_STRUCT_MEMBER (gpointer, class, offset);
   if (callback)
     real_closure->va_marshal (closure,
-                  return_value,
-                  instance, args,
-                  callback,
-                  n_params,
-                  param_types);
+            return_value,
+            instance, args,
+            callback,
+            n_params,
+            param_types);
 }
 
 /**
  * g_signal_type_cclosure_new:
  * @itype: the #GType identifier of an interface or classed type
@@ -1170,11 +1174,11 @@
  *
  * Returns: (transfer none): a floating reference to a new #GCClosure
  */
 GClosure*
 g_signal_type_cclosure_new (GType    itype,
-                guint    struct_offset)
+          guint    struct_offset)
 {
   GClosure *closure;
 
   g_return_val_if_fail (G_TYPE_IS_CLASSED (itype) || G_TYPE_IS_INTERFACE (itype), NULL);
   g_return_val_if_fail (struct_offset >= sizeof (GTypeClass), NULL);
@@ -1368,12 +1372,12 @@
   guint64 _guint64;
 } va_arg_storage;
 
 static ffi_type *
 va_to_ffi_type (GType gtype,
-        va_list *va,
-        va_arg_storage *storage)
+    va_list *va,
+    va_arg_storage *storage)
 {
   ffi_type *rettype = NULL;
   GType type = g_type_fundamental (gtype);
   g_assert (type != G_TYPE_INVALID);
 
@@ -1556,16 +1560,16 @@
  *
  * Since: 2.30
  */
 void
 g_cclosure_marshal_generic_va (GClosure *closure,
-                   GValue   *return_value,
-                   gpointer  instance,
-                   va_list   args_list,
-                   gpointer  marshal_data,
-                   int       n_params,
-                   GType    *param_types)
+             GValue   *return_value,
+             gpointer  instance,
+             va_list   args_list,
+             gpointer  marshal_data,
+             int       n_params,
+             GType    *param_types)
 {
   ffi_type *rtype;
   void *rvalue;
   int n_args;
   ffi_type **atypes;
@@ -1617,27 +1621,27 @@
     {
       GType type = param_types[i]  & ~G_SIGNAL_TYPE_STATIC_SCOPE;
       GType fundamental = G_TYPE_FUNDAMENTAL (type);
 
       atypes[i+1] = va_to_ffi_type (type,
-                    &args_copy,
-                    &storage[i]);
+            &args_copy,
+            &storage[i]);
       args[i+1] = &storage[i];
 
       if ((param_types[i]  & G_SIGNAL_TYPE_STATIC_SCOPE) == 0)
-    {
-      if (fundamental == G_TYPE_STRING && storage[i]._gpointer != NULL)
-        storage[i]._gpointer = g_strdup (storage[i]._gpointer);
-      else if (fundamental == G_TYPE_PARAM && storage[i]._gpointer != NULL)
-        storage[i]._gpointer = g_param_spec_ref (storage[i]._gpointer);
-      else if (fundamental == G_TYPE_BOXED && storage[i]._gpointer != NULL)
-        storage[i]._gpointer = g_boxed_copy (type, storage[i]._gpointer);
-      else if (fundamental == G_TYPE_VARIANT && storage[i]._gpointer != NULL)
-        storage[i]._gpointer = g_variant_ref_sink (storage[i]._gpointer);
-    }
+  {
+    if (fundamental == G_TYPE_STRING && storage[i]._gpointer != NULL)
+      storage[i]._gpointer = g_strdup (storage[i]._gpointer);
+    else if (fundamental == G_TYPE_PARAM && storage[i]._gpointer != NULL)
+      storage[i]._gpointer = g_param_spec_ref (storage[i]._gpointer);
+    else if (fundamental == G_TYPE_BOXED && storage[i]._gpointer != NULL)
+      storage[i]._gpointer = g_boxed_copy (type, storage[i]._gpointer);
+    else if (fundamental == G_TYPE_VARIANT && storage[i]._gpointer != NULL)
+      storage[i]._gpointer = g_variant_ref_sink (storage[i]._gpointer);
+  }
       if (fundamental == G_TYPE_OBJECT && storage[i]._gpointer != NULL)
-    storage[i]._gpointer = g_object_ref (storage[i]._gpointer);
+  storage[i]._gpointer = g_object_ref (storage[i]._gpointer);
     }
 
   va_end (args_copy);
 
   if (ffi_prep_cif (&cif, FFI_DEFAULT_ABI, n_args, rtype, atypes) != FFI_OK)
@@ -1650,22 +1654,22 @@
     {
       GType type = param_types[i]  & ~G_SIGNAL_TYPE_STATIC_SCOPE;
       GType fundamental = G_TYPE_FUNDAMENTAL (type);
 
       if ((param_types[i]  & G_SIGNAL_TYPE_STATIC_SCOPE) == 0)
-    {
-      if (fundamental == G_TYPE_STRING && storage[i]._gpointer != NULL)
-        g_free (storage[i]._gpointer);
-      else if (fundamental == G_TYPE_PARAM && storage[i]._gpointer != NULL)
-        g_param_spec_unref (storage[i]._gpointer);
-      else if (fundamental == G_TYPE_BOXED && storage[i]._gpointer != NULL)
-        g_boxed_free (type, storage[i]._gpointer);
-      else if (fundamental == G_TYPE_VARIANT && storage[i]._gpointer != NULL)
-        g_variant_unref (storage[i]._gpointer);
-    }
+  {
+    if (fundamental == G_TYPE_STRING && storage[i]._gpointer != NULL)
+      g_free (storage[i]._gpointer);
+    else if (fundamental == G_TYPE_PARAM && storage[i]._gpointer != NULL)
+      g_param_spec_unref (storage[i]._gpointer);
+    else if (fundamental == G_TYPE_BOXED && storage[i]._gpointer != NULL)
+      g_boxed_free (type, storage[i]._gpointer);
+    else if (fundamental == G_TYPE_VARIANT && storage[i]._gpointer != NULL)
+      g_variant_unref (storage[i]._gpointer);
+  }
       if (fundamental == G_TYPE_OBJECT && storage[i]._gpointer != NULL)
-    g_object_unref (storage[i]._gpointer);
+  g_object_unref (storage[i]._gpointer);
     }
 
   if (return_value && G_VALUE_TYPE (return_value))
     value_from_ffi_type (return_value, rvalue);
 }
