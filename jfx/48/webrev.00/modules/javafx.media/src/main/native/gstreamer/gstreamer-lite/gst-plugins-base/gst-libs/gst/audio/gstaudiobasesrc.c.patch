diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudiobasesrc.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudiobasesrc.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudiobasesrc.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/audio/gstaudiobasesrc.c
@@ -43,13 +43,10 @@
 #include "gst/gst-i18n-plugin.h"
 
 GST_DEBUG_CATEGORY_STATIC (gst_audio_base_src_debug);
 #define GST_CAT_DEFAULT gst_audio_base_src_debug
 
-#define GST_AUDIO_BASE_SRC_GET_PRIVATE(obj)  \
-   (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GST_TYPE_AUDIO_BASE_SRC, GstAudioBaseSrcPrivate))
-
 struct _GstAudioBaseSrcPrivate
 {
   /* the clock slaving algorithm in use */
   GstAudioBaseSrcSlaveMethod slave_method;
 };
@@ -95,10 +92,11 @@
 #endif /* ENABLE_NLS */
 }
 
 #define gst_audio_base_src_parent_class parent_class
 G_DEFINE_TYPE_WITH_CODE (GstAudioBaseSrc, gst_audio_base_src, GST_TYPE_PUSH_SRC,
+    G_ADD_PRIVATE (GstAudioBaseSrc)
     _do_init (g_define_type_id));
 
 static void gst_audio_base_src_set_property (GObject * object, guint prop_id,
     const GValue * value, GParamSpec * pspec);
 static void gst_audio_base_src_get_property (GObject * object, guint prop_id,
@@ -134,12 +132,10 @@
 
   gobject_class = (GObjectClass *) klass;
   gstelement_class = (GstElementClass *) klass;
   gstbasesrc_class = (GstBaseSrcClass *) klass;
 
-  g_type_class_add_private (klass, sizeof (GstAudioBaseSrcPrivate));
-
   gobject_class->set_property = gst_audio_base_src_set_property;
   gobject_class->get_property = gst_audio_base_src_get_property;
   gobject_class->dispose = gst_audio_base_src_dispose;
 
   /* FIXME: 2.0, handle BUFFER_TIME and LATENCY in nanoseconds */
@@ -215,11 +211,11 @@
 }
 
 static void
 gst_audio_base_src_init (GstAudioBaseSrc * audiobasesrc)
 {
-  audiobasesrc->priv = GST_AUDIO_BASE_SRC_GET_PRIVATE (audiobasesrc);
+  audiobasesrc->priv = gst_audio_base_src_get_instance_private (audiobasesrc);
 
   audiobasesrc->buffer_time = DEFAULT_BUFFER_TIME;
   audiobasesrc->latency_time = DEFAULT_LATENCY_TIME;
   if (DEFAULT_PROVIDE_CLOCK)
     GST_OBJECT_FLAG_SET (audiobasesrc, GST_ELEMENT_FLAG_PROVIDE_CLOCK);
@@ -1213,11 +1209,11 @@
 gst_audio_base_src_post_message (GstElement * element, GstMessage * message)
 {
   GstAudioBaseSrc *src = GST_AUDIO_BASE_SRC (element);
   gboolean ret;
 
-  if (GST_MESSAGE_TYPE (message) == GST_MESSAGE_ERROR) {
+  if (GST_MESSAGE_TYPE (message) == GST_MESSAGE_ERROR && src->ringbuffer) {
     GstAudioRingBuffer *ringbuffer;
 
     GST_INFO_OBJECT (element, "subclass posted error");
 
     ringbuffer = gst_object_ref (src->ringbuffer);
