diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gdate.h b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gdate.h
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gdate.h
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gdate.h
@@ -43,11 +43,11 @@
  * (http://www.perl.com/CPAN/authors/id/STBEY/) and Jon Trowbridge's
  * date routines (written for in-house software).  Written by Havoc
  * Pennington <hp@pobox.com>
  */
 
-typedef gint32  GTime;
+typedef gint32  GTime GLIB_DEPRECATED_TYPE_IN_2_62_FOR(GDateTime);
 typedef guint16 GDateYear;
 typedef guint8  GDateDay;   /* day of the month */
 typedef struct _GDate GDate;
 
 /* enum used to specify order of appearance in parsed date strings */
@@ -192,19 +192,19 @@
 GLIB_AVAILABLE_IN_ALL
 void         g_date_set_parse             (GDate       *date,
                                            const gchar *str);
 GLIB_AVAILABLE_IN_ALL
 void         g_date_set_time_t            (GDate       *date,
-                       time_t       timet);
-GLIB_AVAILABLE_IN_ALL
+             time_t       timet);
+G_GNUC_BEGIN_IGNORE_DEPRECATIONS
+GLIB_DEPRECATED_IN_2_62_FOR(g_date_set_time_t)
 void         g_date_set_time_val          (GDate       *date,
-                       GTimeVal    *timeval);
-#ifndef G_DISABLE_DEPRECATED
+             GTimeVal    *timeval);
 GLIB_DEPRECATED_FOR(g_date_set_time_t)
 void         g_date_set_time              (GDate       *date,
                                            GTime        time_);
-#endif
+G_GNUC_END_IGNORE_DEPRECATIONS
 GLIB_AVAILABLE_IN_ALL
 void         g_date_set_month             (GDate       *date,
                                            GDateMonth   month);
 GLIB_AVAILABLE_IN_ALL
 void         g_date_set_day               (GDate       *date,
@@ -260,11 +260,11 @@
 
 /* Returns the number of days between the two dates.  If date2 comes
    before date1, a negative value is return. */
 GLIB_AVAILABLE_IN_ALL
 gint         g_date_days_between          (const GDate *date1,
-                       const GDate *date2);
+             const GDate *date2);
 
 /* qsort-friendly (with a cast...) */
 GLIB_AVAILABLE_IN_ALL
 gint         g_date_compare               (const GDate *lhs,
                                            const GDate *rhs);
@@ -272,12 +272,12 @@
 void         g_date_to_struct_tm          (const GDate *date,
                                            struct tm   *tm);
 
 GLIB_AVAILABLE_IN_ALL
 void         g_date_clamp                 (GDate *date,
-                       const GDate *min_date,
-                       const GDate *max_date);
+             const GDate *min_date,
+             const GDate *max_date);
 
 /* Swap date1 and date2's values if date1 > date2. */
 GLIB_AVAILABLE_IN_ALL
 void         g_date_order                 (GDate *date1, GDate *date2);
 
@@ -288,24 +288,20 @@
 gsize        g_date_strftime              (gchar       *s,
                                            gsize        slen,
                                            const gchar *format,
                                            const GDate *date);
 
-#ifndef G_DISABLE_DEPRECATED
-
-#define g_date_weekday          g_date_get_weekday
-#define g_date_month            g_date_get_month
-#define g_date_year             g_date_get_year
-#define g_date_day          g_date_get_day
-#define g_date_julian           g_date_get_julian
-#define g_date_day_of_year      g_date_get_day_of_year
-#define g_date_monday_week_of_year  g_date_get_monday_week_of_year
-#define g_date_sunday_week_of_year  g_date_get_sunday_week_of_year
-#define g_date_days_in_month        g_date_get_days_in_month
-#define g_date_monday_weeks_in_year     g_date_get_monday_weeks_in_year
-#define g_date_sunday_weeks_in_year g_date_get_sunday_weeks_in_year
-
-#endif /* G_DISABLE_DEPRECATED */
+#define g_date_weekday      g_date_get_weekday GLIB_DEPRECATED_MACRO_IN_2_26_FOR(g_date_get_weekday)
+#define g_date_month      g_date_get_month GLIB_DEPRECATED_MACRO_IN_2_26_FOR(g_date_get_month)
+#define g_date_year       g_date_get_year GLIB_DEPRECATED_MACRO_IN_2_26_FOR(g_date_get_year)
+#define g_date_day      g_date_get_day GLIB_DEPRECATED_MACRO_IN_2_26_FOR(g_date_get_day)
+#define g_date_julian       g_date_get_julian GLIB_DEPRECATED_MACRO_IN_2_26_FOR(g_date_get_julian)
+#define g_date_day_of_year    g_date_get_day_of_year GLIB_DEPRECATED_MACRO_IN_2_26_FOR(g_date_get_day_of_year)
+#define g_date_monday_week_of_year  g_date_get_monday_week_of_year GLIB_DEPRECATED_MACRO_IN_2_26_FOR(g_date_get_monday_week_of_year)
+#define g_date_sunday_week_of_year  g_date_get_sunday_week_of_year GLIB_DEPRECATED_MACRO_IN_2_26_FOR(g_date_get_sunday_week_of_year)
+#define g_date_days_in_month    g_date_get_days_in_month GLIB_DEPRECATED_MACRO_IN_2_26_FOR(g_date_get_days_in_month)
+#define g_date_monday_weeks_in_year   g_date_get_monday_weeks_in_year GLIB_DEPRECATED_MACRO_IN_2_26_FOR(g_date_get_monday_weeks_in_year)
+#define g_date_sunday_weeks_in_year g_date_get_sunday_weeks_in_year GLIB_DEPRECATED_MACRO_IN_2_26_FOR(g_date_get_sunday_weeks_in_year)
 
 G_END_DECLS
 
 #endif /* __G_DATE_H__ */
