diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gregex.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gregex.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gregex.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gregex.c
@@ -1464,11 +1464,11 @@
 
   if (compile_options_out != 0)
     *compile_options_out = compile_options;
 
   return re;
-        }
+}
 
 /**
  * g_regex_get_pattern:
  * @regex: a #GRegex structure
  *
@@ -2052,11 +2052,11 @@
  * g_regex_new() and then use g_regex_split().
  *
  * As a special case, the result of splitting the empty string ""
  * is an empty vector, not a vector containing a single string.
  * The reason for this special case is that being able to represent
- * a empty vector is typically more useful than consistent handling
+ * an empty vector is typically more useful than consistent handling
  * of empty elements. If you do need to represent empty elements,
  * you'll need to check for the empty string before calling this
  * function.
  *
  * A pattern that can match empty strings splits @string into
@@ -2099,11 +2099,11 @@
  * anywhere in the string, then the whole string is returned as the first
  * token.
  *
  * As a special case, the result of splitting the empty string "" is an
  * empty vector, not a vector containing a single string. The reason for
- * this special case is that being able to represent a empty vector is
+ * this special case is that being able to represent an empty vector is
  * typically more useful than consistent handling of empty elements. If
  * you do need to represent empty elements, you'll need to check for the
  * empty string before calling this function.
  *
  * A pattern that can match empty strings splits @string into separate
@@ -2142,11 +2142,11 @@
  * anywhere in the string, then the whole string is returned as the first
  * token.
  *
  * As a special case, the result of splitting the empty string "" is an
  * empty vector, not a vector containing a single string. The reason for
- * this special case is that being able to represent a empty vector is
+ * this special case is that being able to represent an empty vector is
  * typically more useful than consistent handling of empty elements. If
  * you do need to represent empty elements, you'll need to check for the
  * empty string before calling this function.
  *
  * A pattern that can match empty strings splits @string into separate
@@ -2535,10 +2535,11 @@
       if (g_ascii_digit_value (*g_utf8_next_char (p)) >= 0)
         {
           base = 8;
           p = g_utf8_next_char (p);
         }
+      G_GNUC_FALLTHROUGH;
     case '1':
     case '2':
     case '3':
     case '4':
     case '5':
@@ -2592,11 +2593,11 @@
  error:
   /* G_GSSIZE_FORMAT doesn't work with gettext, so we use %lu */
   tmp_error = g_error_new (G_REGEX_ERROR,
                            G_REGEX_ERROR_REPLACE,
                            _("Error while parsing replacement "
-                             "text \"%s\" at char %lu: %s"),
+                             "text '%s' at char %lu: %s"),
                            replacement,
                            (gulong)(p - replacement),
                            error_detail);
   g_propagate_error (error, tmp_error);
 
