diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/plugins/elements/gsttypefindelement.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/plugins/elements/gsttypefindelement.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/plugins/elements/gsttypefindelement.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/plugins/elements/gsttypefindelement.c
@@ -215,17 +215,15 @@
 gst_type_find_element_emit_have_type (GstTypeFindElement * typefind,
     guint probability, GstCaps * caps)
 {
   GstEvent *event;
 
-  /* Update caps field immediatly so that caps queries and properties can be
+  /* Update caps field immediately so that caps queries and properties can be
    * honored in all "have-type" signal handlers.
    */
   GST_OBJECT_LOCK (typefind);
-  if (typefind->caps)
-    gst_caps_unref (typefind->caps);
-  typefind->caps = gst_caps_ref (caps);
+  gst_caps_replace (&typefind->caps, caps);
   GST_OBJECT_UNLOCK (typefind);
 
   /* Only store the caps event at this point. We give signal handlers
    * the chance to look at the caps before they are sent downstream.
    * They are only forwarded downstream later in the default signal
@@ -338,19 +336,12 @@
 static void
 gst_type_find_element_dispose (GObject * object)
 {
   GstTypeFindElement *typefind = GST_TYPE_FIND_ELEMENT (object);
 
-  if (typefind->adapter) {
-    g_object_unref (typefind->adapter);
-    typefind->adapter = NULL;
-  }
-
-  if (typefind->force_caps) {
-    gst_caps_unref (typefind->force_caps);
-    typefind->force_caps = NULL;
-  }
+  gst_clear_object (&typefind->adapter);
+  gst_clear_caps (&typefind->force_caps);
 
   G_OBJECT_CLASS (parent_class)->dispose (object);
 }
 
 static void
@@ -365,13 +356,11 @@
     case PROP_MINIMUM:
       typefind->min_probability = g_value_get_uint (value);
       break;
     case PROP_FORCE_CAPS:
       GST_OBJECT_LOCK (typefind);
-      if (typefind->force_caps)
-        gst_caps_unref (typefind->force_caps);
-      typefind->force_caps = g_value_dup_boxed (value);
+      gst_caps_take (&typefind->force_caps, g_value_dup_boxed (value));
       GST_OBJECT_UNLOCK (typefind);
       break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -555,10 +544,15 @@
     GstEvent * event)
 {
   GstTypeFindElement *typefind = GST_TYPE_FIND_ELEMENT (parent);
   gboolean result;
 
+  /* Always forward RECONFIGURE events upstream */
+  if (GST_EVENT_TYPE (event) == GST_EVENT_RECONFIGURE) {
+    return gst_pad_push_event (typefind->sink, event);
+  }
+
   if (typefind->mode != MODE_NORMAL) {
     /* need to do more? */
     GST_LOG_OBJECT (typefind, "Still typefinding. Not passing event upstream");
     gst_event_unref (event);
     return FALSE;
@@ -839,23 +833,23 @@
   return result;
 
   /* ERRORS */
 peer_query_failed:
   {
-    GST_WARNING_OBJECT (typefind, "failed to query peer uri");
+    GST_INFO_OBJECT (typefind, "failed to query peer uri");
     gst_query_unref (query);
     return NULL;
   }
 no_uri:
   {
-    GST_WARNING_OBJECT (typefind, "could not parse the peer uri");
+    GST_INFO_OBJECT (typefind, "could not parse the peer uri");
     gst_query_unref (query);
     return NULL;
   }
 no_extension:
   {
-    GST_WARNING_OBJECT (typefind, "could not find uri extension in %s", uri);
+    GST_INFO_OBJECT (typefind, "could not find uri extension in %s", uri);
     gst_query_unref (query);
     g_free (uri);
     return NULL;
   }
 }
@@ -928,10 +922,11 @@
   GstTypeFindProbability probability;
   GstCaps *caps = NULL;
   gsize avail;
   const guint8 *data;
   gboolean have_min, have_max;
+  gchar *ext;
 
   GST_OBJECT_LOCK (typefind);
   if (typefind->force_caps) {
     caps = gst_caps_ref (typefind->force_caps);
     probability = GST_TYPE_FIND_MAXIMUM;
@@ -949,15 +944,17 @@
     }
 
     if (!have_min)
       goto not_enough_data;
 
+    ext = gst_type_find_get_extension (typefind, typefind->sink);
     /* map all available data */
     data = gst_adapter_map (typefind->adapter, avail);
-    caps = gst_type_find_helper_for_data (GST_OBJECT (typefind),
-        data, avail, &probability);
+    caps = gst_type_find_helper_for_data_with_extension (GST_OBJECT (typefind),
+        data, avail, ext, &probability);
     gst_adapter_unmap (typefind->adapter);
+    g_free (ext);
 
     if (caps == NULL && have_max)
       goto no_type_found;
     else if (caps == NULL)
       goto wait_for_data;
@@ -967,11 +964,11 @@
       goto low_probability;
   }
 
   GST_OBJECT_UNLOCK (typefind);
 
-  /* probability is good enough too, so let's make it known ... emiting this
+  /* probability is good enough too, so let's make it known ... emitting this
    * signal calls our object handler which sets the caps. */
   /* Set to MODE_NORMAL before emitting have-type, in case it triggers a seek */
   typefind->mode = MODE_NORMAL;
   gst_type_find_element_emit_have_type (typefind, probability, caps);
 
@@ -989,14 +986,14 @@
       GST_ELEMENT_ERROR (typefind, STREAM, TYPE_NOT_FOUND,
           (_("Stream doesn't contain enough data.")),
           ("Can't typefind stream"));
       return GST_FLOW_ERROR;
     } else {
-    GST_DEBUG_OBJECT (typefind, "not enough data for typefinding yet "
-        "(%" G_GSIZE_FORMAT " bytes)", avail);
-    return GST_FLOW_OK;
-  }
+      GST_DEBUG_OBJECT (typefind, "not enough data for typefinding yet "
+          "(%" G_GSIZE_FORMAT " bytes)", avail);
+      return GST_FLOW_OK;
+    }
   }
 no_type_found:
   {
     GST_OBJECT_UNLOCK (typefind);
     GST_ELEMENT_ERROR (typefind, STREAM, TYPE_NOT_FOUND, (NULL), (NULL));
@@ -1011,15 +1008,15 @@
       GST_ELEMENT_ERROR (typefind, STREAM, TYPE_NOT_FOUND,
           (_("Stream doesn't contain enough data.")),
           ("Can't typefind stream"));
       return GST_FLOW_ERROR;
     } else {
-    GST_DEBUG_OBJECT (typefind,
-        "no caps found with %" G_GSIZE_FORMAT " bytes of data, "
-        "waiting for more data", avail);
-    return GST_FLOW_OK;
-  }
+      GST_DEBUG_OBJECT (typefind,
+          "no caps found with %" G_GSIZE_FORMAT " bytes of data, "
+          "waiting for more data", avail);
+      return GST_FLOW_OK;
+    }
   }
 low_probability:
   {
     GST_DEBUG_OBJECT (typefind, "found caps %" GST_PTR_FORMAT ", but "
         "probability is %u which is lower than the required minimum of %u",
@@ -1164,11 +1161,11 @@
       gst_caps_replace (&found_caps, NULL);
       ret = GST_FLOW_ERROR;
       goto pause;
     }
 
-    GST_DEBUG ("Emiting found caps %" GST_PTR_FORMAT, found_caps);
+    GST_DEBUG ("Emitting found caps %" GST_PTR_FORMAT, found_caps);
     /* Set to MODE_NORMAL before emitting have-type, in case it triggers a seek */
     typefind->mode = MODE_NORMAL;
     gst_type_find_element_emit_have_type (typefind, probability, found_caps);
     gst_caps_unref (found_caps);
   } else if (typefind->mode == MODE_NORMAL) {
