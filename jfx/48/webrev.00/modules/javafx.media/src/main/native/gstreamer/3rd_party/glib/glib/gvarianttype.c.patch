diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gvarianttype.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gvarianttype.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gvarianttype.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gvarianttype.c
@@ -1,8 +1,8 @@
 /*
- * Copyright � 2007, 2008 Ryan Lortie
- * Copyright � 2009, 2010 Codethink Limited
+ * Copyright (C) 2007, 2008 Ryan Lortie
+ * Copyright (C) 2009, 2010 Codethink Limited
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 2.1 of the License, or (at your option) any later version.
@@ -198,11 +198,11 @@
 #endif
 }
 
 static gboolean
 variant_type_string_scan_internal (const gchar  *string,
-                            const gchar  *limit,
+                                   const gchar  *limit,
                                    const gchar **endptr,
                                    gsize        *depth,
                                    gsize         depth_limit)
 {
   gsize max_depth = 0, child_depth;
@@ -219,11 +219,11 @@
         {
           if (depth_limit == 0 ||
               !variant_type_string_scan_internal (string, limit, &string,
                                                   &child_depth,
                                                   depth_limit - 1))
-          return FALSE;
+            return FALSE;
 
           max_depth = MAX (max_depth, child_depth + 1);
         }
 
       string++;
@@ -310,11 +310,11 @@
  * of a tuple is 1 plus the depth of its deepest child type.
  *
  * If @type_string is not a valid #GVariant type string, 0 will be returned.
  *
  * Returns: depth of @type_string, or 0 on error
- * Since: 2.60 (backported to 2.58)
+ * Since: 2.60
  */
 gsize
 g_variant_type_string_get_depth_ (const gchar *type_string)
 {
   const gchar *endptr;
@@ -1086,16 +1086,20 @@
  * Since 2.24
  **/
 const GVariantType *
 g_variant_type_value (const GVariantType *type)
 {
+#ifndef G_DISABLE_ASSERT
   const gchar *type_string;
+#endif
 
   g_return_val_if_fail (g_variant_type_check (type), NULL);
 
+#ifndef G_DISABLE_ASSERT
   type_string = g_variant_type_peek_string (type);
   g_assert (type_string[0] == '{');
+#endif
 
   return g_variant_type_next (g_variant_type_key (type));
 }
 
 /**
