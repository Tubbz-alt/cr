diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gbacktrace.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gbacktrace.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gbacktrace.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gbacktrace.c
@@ -123,10 +123,14 @@
  * a stack trace. The prompt is then shown again.
  *
  * If "[P]roceed" is selected, the function returns.
  *
  * This function may cause different actions on non-UNIX platforms.
+ *
+ * On Windows consider using the `G_DEBUGGER` environment
+ * variable (see [Running GLib Applications](glib-running.html)) and
+ * calling g_on_error_stack_trace() instead.
  */
 void
 g_on_error_query (const gchar *prg_name)
 {
 #ifndef G_OS_WIN32
@@ -186,13 +190,20 @@
     goto retry;
 #else
   if (!prg_name)
     prg_name = g_get_prgname ();
 
+  /* MessageBox is allowed on UWP apps only when building against
+   * the debug CRT, which will set -D_DEBUG */
+#if defined(_DEBUG) || !defined(G_WINAPI_ONLY_APP)
   MessageBox (NULL, "g_on_error_query called, program terminating",
               (prg_name && *prg_name) ? prg_name : NULL,
               MB_OK|MB_ICONERROR);
+#else
+  printf ("g_on_error_query called, program '%s' terminating\n",
+      (prg_name && *prg_name) ? prg_name : "(null)");
+#endif
   _exit(0);
 #endif
 }
 
 /**
@@ -205,10 +216,16 @@
  * option is selected. You can get the current process's program name
  * with g_get_prgname(), assuming that you have called gtk_init() or
  * gdk_init().
  *
  * This function may cause different actions on non-UNIX platforms.
+ *
+ * When running on Windows, this function is *not* called by
+ * g_on_error_query(). If called directly, it will raise an
+ * exception, which will crash the program. If the `G_DEBUGGER` environment
+ * variable is set, a debugger will be invoked to attach and
+ * handle that exception (see [Running GLib Applications](glib-running.html)).
  */
 void
 g_on_error_stack_trace (const gchar *prg_name)
 {
 #if defined(G_OS_UNIX)
@@ -290,20 +307,25 @@
   pid = fork ();
   if (pid == 0)
     {
       /* Save stderr for printing failure below */
       int old_err = dup (2);
-      fcntl (old_err, F_SETFD, fcntl (old_err, F_GETFD) | FD_CLOEXEC);
+      if (old_err != -1)
+        fcntl (old_err, F_SETFD, fcntl (old_err, F_GETFD) | FD_CLOEXEC);
 
       close (0); dup (in_fd[0]);   /* set the stdin to the in pipe */
       close (1); dup (out_fd[1]);  /* set the stdout to the out pipe */
       close (2); dup (out_fd[1]);  /* set the stderr to the out pipe */
 
       execvp (args[0], (char **) args);      /* exec gdb */
 
       /* Print failure to original stderr */
-      close (2); dup (old_err);
+      if (old_err != -1)
+        {
+          close (2);
+          dup (old_err);
+        }
       perror ("exec gdb failed");
       _exit (0);
     }
   else if (pid == (pid_t) -1)
     {
