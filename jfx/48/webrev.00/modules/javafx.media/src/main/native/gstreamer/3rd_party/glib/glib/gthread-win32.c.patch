diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gthread-win32.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gthread-win32.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gthread-win32.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gthread-win32.c
@@ -263,11 +263,11 @@
   start_time = g_get_monotonic_time ();
   do
     {
       span = end_time - start_time;
 
-  if G_UNLIKELY (span < 0)
+      if G_UNLIKELY (span < 0)
         span_millis = 0;
       else if G_UNLIKELY (span > G_GINT64_CONSTANT (1000) * (DWORD) INFINITE)
         span_millis = INFINITE;
       else
         /* Round up so we don't time out too early */
@@ -282,11 +282,11 @@
         break;
 
       /* In case we didn't wait long enough after a timeout, wait again for the
        * remaining time */
       start_time = g_get_monotonic_time ();
-}
+    }
   while (start_time < end_time);
 
   return signalled;
 }
 
@@ -378,15 +378,15 @@
   TlsSetValue (impl, value);
 }
 
 /* {{{1 GThread */
 
-#define win32_check_for_error(what) G_STMT_START{           \
-  if (!(what))                              \
-    g_error ("file %s: line %d (%s): error %s during %s",       \
-         __FILE__, __LINE__, G_STRFUNC,             \
-         g_win32_error_message (GetLastError ()), #what);       \
+#define win32_check_for_error(what) G_STMT_START{     \
+  if (!(what))                \
+    g_error ("file %s: line %d (%s): error %s during %s",   \
+       __FILE__, __LINE__, G_STRFUNC,       \
+       g_win32_error_message (GetLastError ()), #what);   \
   }G_STMT_END
 
 #define G_MUTEX_SIZE (sizeof (gpointer))
 
 typedef BOOL (__stdcall *GTryEnterCriticalSectionFunc) (CRITICAL_SECTION *);
@@ -427,19 +427,30 @@
 
   return 0;
 }
 
 GRealThread *
-g_system_thread_new (GThreadFunc   func,
+g_system_thread_new (GThreadFunc   proxy,
                      gulong        stack_size,
+                     const char   *name,
+                     GThreadFunc   func,
+                     gpointer      data,
                      GError      **error)
 {
   GThreadWin32 *thread;
+  GRealThread *base_thread;
   guint ignore;
 
   thread = g_slice_new0 (GThreadWin32);
-  thread->proxy = func;
+  thread->proxy = proxy;
+  base_thread = (GRealThread*)thread;
+  base_thread->ref_count = 2;
+  base_thread->ours = TRUE;
+  base_thread->thread.joinable = TRUE;
+  base_thread->thread.func = func;
+  base_thread->thread.data = data;
+  base_thread->name = g_strdup (name);
 
   thread->handle = (HANDLE) _beginthreadex (NULL, stack_size, g_thread_win32_proxy, thread, 0, &ignore);
 
   if (thread->handle == NULL)
     {
@@ -484,14 +495,14 @@
 }
 #endif
 
 typedef struct _THREADNAME_INFO
 {
-  DWORD  dwType;    /* must be 0x1000 */
-  LPCSTR szName;    /* pointer to name (in user addr space) */
-  DWORD  dwThreadID;    /* thread ID (-1=caller thread) */
-  DWORD  dwFlags;   /* reserved for future use, must be zero */
+  DWORD  dwType;  /* must be 0x1000 */
+  LPCSTR szName;  /* pointer to name (in user addr space) */
+  DWORD  dwThreadID;  /* thread ID (-1=caller thread) */
+  DWORD  dwFlags; /* reserved for future use, must be zero */
 } THREADNAME_INFO;
 
 static void
 SetThreadName (DWORD  dwThreadID,
                LPCSTR szThreadName)
