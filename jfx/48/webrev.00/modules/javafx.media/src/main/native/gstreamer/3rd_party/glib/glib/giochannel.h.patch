diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/giochannel.h b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/giochannel.h
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/giochannel.h
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/giochannel.h
@@ -83,14 +83,14 @@
 
 typedef enum
 {
   G_IO_FLAG_APPEND = 1 << 0,
   G_IO_FLAG_NONBLOCK = 1 << 1,
-  G_IO_FLAG_IS_READABLE = 1 << 2,   /* Read only flag */
-  G_IO_FLAG_IS_WRITABLE = 1 << 3,   /* Read only flag */
+  G_IO_FLAG_IS_READABLE = 1 << 2, /* Read only flag */
+  G_IO_FLAG_IS_WRITABLE = 1 << 3, /* Read only flag */
   G_IO_FLAG_IS_WRITEABLE = 1 << 3,      /* Misspelling in 2.29.10 and earlier */
-  G_IO_FLAG_IS_SEEKABLE = 1 << 4,   /* Read only flag */
+  G_IO_FLAG_IS_SEEKABLE = 1 << 4, /* Read only flag */
   G_IO_FLAG_MASK = (1 << 5) - 1,
   G_IO_FLAG_GET_MASK = G_IO_FLAG_MASK,
   G_IO_FLAG_SET_MASK = G_IO_FLAG_APPEND | G_IO_FLAG_NONBLOCK
 } GIOFlags;
 
@@ -101,18 +101,18 @@
   GIOFuncs *funcs;
 
   gchar *encoding;
   GIConv read_cd;
   GIConv write_cd;
-  gchar *line_term;     /* String which indicates the end of a line of text */
-  guint line_term_len;      /* So we can have null in the line term */
+  gchar *line_term;   /* String which indicates the end of a line of text */
+  guint line_term_len;    /* So we can have null in the line term */
 
   gsize buf_size;
-  GString *read_buf;        /* Raw data from the channel */
+  GString *read_buf;    /* Raw data from the channel */
   GString *encoded_read_buf;    /* Channel data converted to UTF-8 */
-  GString *write_buf;       /* Data ready to be written to the file */
-  gchar partial_write_buf[6];   /* UTF-8 partial characters, null terminated */
+  GString *write_buf;   /* Data ready to be written to the file */
+  gchar partial_write_buf[6]; /* UTF-8 partial characters, null terminated */
 
   /* Group the flags together, immediately after partial_write_buf, to save memory */
 
   guint use_buffer     : 1; /* The encoding uses the buffers */
   guint do_encode      : 1; /* The encoding uses the GIConv coverters */
@@ -124,36 +124,36 @@
   gpointer reserved1;
   gpointer reserved2;
 };
 
 typedef gboolean (*GIOFunc) (GIOChannel   *source,
-                 GIOCondition  condition,
-                 gpointer      data);
+           GIOCondition  condition,
+           gpointer      data);
 struct _GIOFuncs
 {
   GIOStatus (*io_read)           (GIOChannel   *channel,
-                      gchar        *buf,
-                  gsize         count,
-                  gsize        *bytes_read,
-                  GError      **err);
+                gchar        *buf,
+          gsize         count,
+          gsize        *bytes_read,
+          GError      **err);
   GIOStatus (*io_write)          (GIOChannel   *channel,
-                  const gchar  *buf,
-                  gsize         count,
-                  gsize        *bytes_written,
-                  GError      **err);
+          const gchar  *buf,
+          gsize         count,
+          gsize        *bytes_written,
+          GError      **err);
   GIOStatus (*io_seek)           (GIOChannel   *channel,
-                  gint64        offset,
-                  GSeekType     type,
-                  GError      **err);
+          gint64        offset,
+          GSeekType     type,
+          GError      **err);
   GIOStatus  (*io_close)         (GIOChannel   *channel,
-                  GError      **err);
+          GError      **err);
   GSource*   (*io_create_watch)  (GIOChannel   *channel,
-                  GIOCondition  condition);
+          GIOCondition  condition);
   void       (*io_free)          (GIOChannel   *channel);
   GIOStatus  (*io_set_flags)     (GIOChannel   *channel,
                                   GIOFlags      flags,
-                  GError      **err);
+          GError      **err);
   GIOFlags   (*io_get_flags)     (GIOChannel   *channel);
 };
 
 GLIB_AVAILABLE_IN_ALL
 void        g_io_channel_init   (GIOChannel    *channel);
@@ -182,117 +182,117 @@
 GLIB_DEPRECATED_FOR(g_io_channel_shutdown)
 void      g_io_channel_close    (GIOChannel    *channel);
 
 GLIB_AVAILABLE_IN_ALL
 GIOStatus g_io_channel_shutdown (GIOChannel      *channel,
-                 gboolean         flush,
-                 GError         **err);
+         gboolean         flush,
+         GError         **err);
 GLIB_AVAILABLE_IN_ALL
 guint     g_io_add_watch_full   (GIOChannel      *channel,
-                 gint             priority,
-                 GIOCondition     condition,
-                 GIOFunc          func,
-                 gpointer         user_data,
-                 GDestroyNotify   notify);
+         gint             priority,
+         GIOCondition     condition,
+         GIOFunc          func,
+         gpointer         user_data,
+         GDestroyNotify   notify);
 GLIB_AVAILABLE_IN_ALL
 GSource * g_io_create_watch     (GIOChannel      *channel,
-                 GIOCondition     condition);
+         GIOCondition     condition);
 GLIB_AVAILABLE_IN_ALL
 guint     g_io_add_watch        (GIOChannel      *channel,
-                 GIOCondition     condition,
-                 GIOFunc          func,
-                 gpointer         user_data);
+         GIOCondition     condition,
+         GIOFunc          func,
+         gpointer         user_data);
 
 /* character encoding conversion involved functions.
  */
 
 GLIB_AVAILABLE_IN_ALL
 void                  g_io_channel_set_buffer_size      (GIOChannel   *channel,
-                             gsize         size);
+               gsize         size);
 GLIB_AVAILABLE_IN_ALL
 gsize                 g_io_channel_get_buffer_size      (GIOChannel   *channel);
 GLIB_AVAILABLE_IN_ALL
 GIOCondition          g_io_channel_get_buffer_condition (GIOChannel   *channel);
 GLIB_AVAILABLE_IN_ALL
 GIOStatus             g_io_channel_set_flags            (GIOChannel   *channel,
-                             GIOFlags      flags,
-                             GError      **error);
+               GIOFlags      flags,
+               GError      **error);
 GLIB_AVAILABLE_IN_ALL
 GIOFlags              g_io_channel_get_flags            (GIOChannel   *channel);
 GLIB_AVAILABLE_IN_ALL
 void                  g_io_channel_set_line_term        (GIOChannel   *channel,
-                             const gchar  *line_term,
-                             gint          length);
+               const gchar  *line_term,
+               gint          length);
 GLIB_AVAILABLE_IN_ALL
 const gchar *         g_io_channel_get_line_term        (GIOChannel   *channel,
-                             gint         *length);
+               gint         *length);
 GLIB_AVAILABLE_IN_ALL
-void              g_io_channel_set_buffered     (GIOChannel   *channel,
-                             gboolean      buffered);
+void          g_io_channel_set_buffered   (GIOChannel   *channel,
+               gboolean      buffered);
 GLIB_AVAILABLE_IN_ALL
-gboolean          g_io_channel_get_buffered     (GIOChannel   *channel);
+gboolean        g_io_channel_get_buffered   (GIOChannel   *channel);
 GLIB_AVAILABLE_IN_ALL
 GIOStatus             g_io_channel_set_encoding         (GIOChannel   *channel,
-                             const gchar  *encoding,
-                             GError      **error);
+               const gchar  *encoding,
+               GError      **error);
 GLIB_AVAILABLE_IN_ALL
 const gchar *         g_io_channel_get_encoding         (GIOChannel   *channel);
 GLIB_AVAILABLE_IN_ALL
-void                  g_io_channel_set_close_on_unref   (GIOChannel   *channel,
-                             gboolean      do_close);
+void                  g_io_channel_set_close_on_unref (GIOChannel   *channel,
+               gboolean      do_close);
 GLIB_AVAILABLE_IN_ALL
-gboolean              g_io_channel_get_close_on_unref   (GIOChannel   *channel);
+gboolean              g_io_channel_get_close_on_unref (GIOChannel   *channel);
 
 
 GLIB_AVAILABLE_IN_ALL
 GIOStatus   g_io_channel_flush            (GIOChannel   *channel,
-                       GError      **error);
+             GError      **error);
 GLIB_AVAILABLE_IN_ALL
 GIOStatus   g_io_channel_read_line        (GIOChannel   *channel,
-                       gchar       **str_return,
-                       gsize        *length,
-                       gsize        *terminator_pos,
-                       GError      **error);
+             gchar       **str_return,
+             gsize        *length,
+             gsize        *terminator_pos,
+             GError      **error);
 GLIB_AVAILABLE_IN_ALL
 GIOStatus   g_io_channel_read_line_string (GIOChannel   *channel,
-                       GString      *buffer,
-                       gsize        *terminator_pos,
-                       GError      **error);
+             GString      *buffer,
+             gsize        *terminator_pos,
+             GError      **error);
 GLIB_AVAILABLE_IN_ALL
 GIOStatus   g_io_channel_read_to_end      (GIOChannel   *channel,
-                       gchar       **str_return,
-                       gsize        *length,
-                       GError      **error);
+             gchar       **str_return,
+             gsize        *length,
+             GError      **error);
 GLIB_AVAILABLE_IN_ALL
 GIOStatus   g_io_channel_read_chars       (GIOChannel   *channel,
-                       gchar        *buf,
-                       gsize         count,
-                       gsize        *bytes_read,
-                       GError      **error);
+             gchar        *buf,
+             gsize         count,
+             gsize        *bytes_read,
+             GError      **error);
 GLIB_AVAILABLE_IN_ALL
 GIOStatus   g_io_channel_read_unichar     (GIOChannel   *channel,
-                       gunichar     *thechar,
-                       GError      **error);
+             gunichar     *thechar,
+             GError      **error);
 GLIB_AVAILABLE_IN_ALL
 GIOStatus   g_io_channel_write_chars      (GIOChannel   *channel,
-                       const gchar  *buf,
-                       gssize        count,
-                       gsize        *bytes_written,
-                       GError      **error);
+             const gchar  *buf,
+             gssize        count,
+             gsize        *bytes_written,
+             GError      **error);
 GLIB_AVAILABLE_IN_ALL
 GIOStatus   g_io_channel_write_unichar    (GIOChannel   *channel,
-                       gunichar      thechar,
-                       GError      **error);
+             gunichar      thechar,
+             GError      **error);
 GLIB_AVAILABLE_IN_ALL
 GIOStatus   g_io_channel_seek_position    (GIOChannel   *channel,
-                       gint64        offset,
-                       GSeekType     type,
-                       GError      **error);
+             gint64        offset,
+             GSeekType     type,
+             GError      **error);
 GLIB_AVAILABLE_IN_ALL
 GIOChannel* g_io_channel_new_file         (const gchar  *filename,
-                       const gchar  *mode,
-                       GError      **error);
+             const gchar  *mode,
+             GError      **error);
 
 /* Error handling */
 
 GLIB_AVAILABLE_IN_ALL
 GQuark          g_io_channel_error_quark      (void);
@@ -340,20 +340,20 @@
  * from the underlying file descriptor. For SOCKETs, it is possible to call
  * recv().
  */
 GLIB_AVAILABLE_IN_ALL
 void        g_io_channel_win32_make_pollfd (GIOChannel   *channel,
-                        GIOCondition  condition,
-                        GPollFD      *fd);
+              GIOCondition  condition,
+              GPollFD      *fd);
 
-/* This can be used to wait a until at least one of the channels is readable.
+/* This can be used to wait until at least one of the channels is readable.
  * On Unix you would do a select() on the file descriptors of the channels.
  */
 GLIB_AVAILABLE_IN_ALL
 gint        g_io_channel_win32_poll   (GPollFD    *fds,
-                       gint        n_fds,
-                       gint        timeout_);
+               gint        n_fds,
+               gint        timeout_);
 
 /* Create an IO channel for Windows messages for window handle hwnd. */
 #if GLIB_SIZEOF_VOID_P == 8
 /* We use gsize here so that it is still an integer type and not a
  * pointer, like the guint in the traditional prototype. We can't use
