diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gerror.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gerror.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gerror.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/gerror.c
@@ -112,10 +112,17 @@
  * %NULL. To display an error to the user, simply display the @message,
  * perhaps along with additional context known only to the calling
  * function (the file being opened, or whatever - though in the
  * g_file_get_contents() case, the @message already contains a filename).
  *
+ * Note, however, that many error messages are too technical to display to the
+ * user in an application, so prefer to use g_error_matches() to categorize errors
+ * from called functions, and build an appropriate error message for the context
+ * within your application. Error messages from a #GError are more appropriate
+ * to be printed in system logs or on the command line. They are typically
+ * translated.
+ *
  * When implementing a function that can report errors, the basic
  * tool is g_set_error(). Typically, if a fatal error occurs you
  * want to g_set_error(), then return immediately. g_set_error()
  * does nothing if the error location passed to it is %NULL.
  * Here's an example:
@@ -124,10 +131,12 @@
  * foo_open_file (GError **error)
  * {
  *   gint fd;
  *   int saved_errno;
  *
+ *   g_return_val_if_fail (error == NULL || *error == NULL, -1);
+ *
  *   fd = open ("file.txt", O_RDONLY);
  *   saved_errno = errno;
  *
  *   if (fd < 0)
  *     {
@@ -652,11 +661,11 @@
  * to keep using the same GError*, you need to set it to %NULL
  * after calling this function on it.
  */
 void
 g_propagate_error (GError **dest,
-           GError  *src)
+       GError  *src)
 {
   g_return_if_fail (src != NULL);
 
   if (dest == NULL)
     {
