diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/ghook.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/ghook.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/ghook.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/glib/ghook.c
@@ -176,11 +176,11 @@
  */
 
 /* --- functions --- */
 static void
 default_finalize_hook (GHookList *hook_list,
-               GHook     *hook)
+           GHook     *hook)
 {
   GDestroyNotify destroy = hook->destroy;
 
   if (destroy)
     {
@@ -198,11 +198,11 @@
  * Initializes a #GHookList.
  * This must be called before the #GHookList is used.
  */
 void
 g_hook_list_init (GHookList *hook_list,
-          guint      hook_size)
+      guint      hook_size)
 {
   g_return_if_fail (hook_list != NULL);
   g_return_if_fail (hook_size >= sizeof (GHook));
 
   hook_list->seq_id = 1;
@@ -232,25 +232,25 @@
 
       hook_list->is_setup = FALSE;
 
       hook = hook_list->hooks;
       if (!hook)
-    {
-      /* destroy hook_list->hook_memchunk */
-    }
+  {
+    /* destroy hook_list->hook_memchunk */
+  }
       else
-    do
-      {
-        GHook *tmp;
+  do
+    {
+      GHook *tmp;
 
-        g_hook_ref (hook_list, hook);
-        g_hook_destroy_link (hook_list, hook);
-        tmp = hook->next;
-        g_hook_unref (hook_list, hook);
-        hook = tmp;
-      }
-    while (hook);
+      g_hook_ref (hook_list, hook);
+      g_hook_destroy_link (hook_list, hook);
+      tmp = hook->next;
+      g_hook_unref (hook_list, hook);
+      hook = tmp;
+    }
+  while (hook);
     }
 }
 
 /**
  * g_hook_alloc:
@@ -288,11 +288,11 @@
  * Calls the #GHookList @finalize_hook function if it exists,
  * and frees the memory allocated for the #GHook.
  */
 void
 g_hook_free (GHookList *hook_list,
-         GHook     *hook)
+       GHook     *hook)
 {
   g_return_if_fail (hook_list != NULL);
   g_return_if_fail (hook_list->is_setup);
   g_return_if_fail (hook != NULL);
   g_return_if_fail (G_HOOK_IS_UNLINKED (hook));
@@ -311,11 +311,11 @@
  * Removes one #GHook from a #GHookList, marking it
  * inactive and calling g_hook_unref() on it.
  */
 void
 g_hook_destroy_link (GHookList *hook_list,
-             GHook     *hook)
+         GHook     *hook)
 {
   g_return_if_fail (hook_list != NULL);
   g_return_if_fail (hook != NULL);
 
   hook->flags &= ~G_HOOK_FLAG_ACTIVE;
@@ -335,11 +335,11 @@
  *
  * Returns: %TRUE if the #GHook was found in the #GHookList and destroyed
  */
 gboolean
 g_hook_destroy (GHookList   *hook_list,
-        gulong       hook_id)
+    gulong       hook_id)
 {
   GHook *hook;
 
   g_return_val_if_fail (hook_list != NULL, FALSE);
   g_return_val_if_fail (hook_id > 0, FALSE);
@@ -363,11 +363,11 @@
  * If the reference count falls to 0, the #GHook is removed
  * from the #GHookList and g_hook_free() is called to free it.
  */
 void
 g_hook_unref (GHookList *hook_list,
-          GHook *hook)
+        GHook *hook)
 {
   g_return_if_fail (hook_list != NULL);
   g_return_if_fail (hook != NULL);
   g_return_if_fail (hook->ref_count > 0);
 
@@ -376,33 +376,33 @@
     {
       g_return_if_fail (hook->hook_id == 0);
       g_return_if_fail (!G_HOOK_IN_CALL (hook));
 
       if (hook->prev)
-    hook->prev->next = hook->next;
+  hook->prev->next = hook->next;
       else
-    hook_list->hooks = hook->next;
+  hook_list->hooks = hook->next;
       if (hook->next)
-    {
-      hook->next->prev = hook->prev;
-      hook->next = NULL;
-    }
+  {
+    hook->next->prev = hook->prev;
+    hook->next = NULL;
+  }
       hook->prev = NULL;
 
       if (!hook_list->is_setup)
-    {
-      hook_list->is_setup = TRUE;
-      g_hook_free (hook_list, hook);
-      hook_list->is_setup = FALSE;
+  {
+    hook_list->is_setup = TRUE;
+    g_hook_free (hook_list, hook);
+    hook_list->is_setup = FALSE;
 
-      if (!hook_list->hooks)
-        {
-          /* destroy hook_list->hook_memchunk */
-        }
-    }
+    if (!hook_list->hooks)
+      {
+        /* destroy hook_list->hook_memchunk */
+      }
+  }
       else
-    g_hook_free (hook_list, hook);
+  g_hook_free (hook_list, hook);
     }
 }
 
 /**
  * g_hook_ref:
@@ -413,11 +413,11 @@
  *
  * Returns: the @hook that was passed in (since 2.6)
  */
 GHook *
 g_hook_ref (GHookList *hook_list,
-        GHook     *hook)
+      GHook     *hook)
 {
   g_return_val_if_fail (hook_list != NULL, NULL);
   g_return_val_if_fail (hook != NULL, NULL);
   g_return_val_if_fail (hook->ref_count > 0, NULL);
 
@@ -441,11 +441,11 @@
  *
  * Prepends a #GHook on the start of a #GHookList.
  */
 void
 g_hook_prepend (GHookList *hook_list,
-        GHook     *hook)
+    GHook   *hook)
 {
   g_return_if_fail (hook_list != NULL);
 
   g_hook_insert_before (hook_list, hook_list->hooks, hook);
 }
@@ -458,12 +458,12 @@
  *
  * Inserts a #GHook into a #GHookList, before a given #GHook.
  */
 void
 g_hook_insert_before (GHookList *hook_list,
-              GHook *sibling,
-              GHook *hook)
+          GHook *sibling,
+          GHook *hook)
 {
   g_return_if_fail (hook_list != NULL);
   g_return_if_fail (hook_list->is_setup);
   g_return_if_fail (hook != NULL);
   g_return_if_fail (G_HOOK_IS_UNLINKED (hook));
@@ -473,35 +473,35 @@
   hook->ref_count = 1; /* counterpart to g_hook_destroy_link */
 
   if (sibling)
     {
       if (sibling->prev)
-    {
-      hook->prev = sibling->prev;
-      hook->prev->next = hook;
-      hook->next = sibling;
-      sibling->prev = hook;
-    }
+  {
+    hook->prev = sibling->prev;
+    hook->prev->next = hook;
+    hook->next = sibling;
+    sibling->prev = hook;
+  }
       else
-    {
-      hook_list->hooks = hook;
-      hook->next = sibling;
-      sibling->prev = hook;
-    }
+  {
+    hook_list->hooks = hook;
+    hook->next = sibling;
+    sibling->prev = hook;
+  }
     }
   else
     {
       if (hook_list->hooks)
-    {
-      sibling = hook_list->hooks;
-      while (sibling->next)
-        sibling = sibling->next;
-      hook->prev = sibling;
-      sibling->next = hook;
-    }
+  {
+    sibling = hook_list->hooks;
+    while (sibling->next)
+      sibling = sibling->next;
+    hook->prev = sibling;
+    sibling->next = hook;
+  }
       else
-    hook_list->hooks = hook;
+  hook_list->hooks = hook;
     }
 }
 
 /**
  * g_hook_list_invoke:
@@ -512,11 +512,11 @@
  *
  * Calls all of the #GHook functions in a #GHookList.
  */
 void
 g_hook_list_invoke (GHookList *hook_list,
-            gboolean   may_recurse)
+        gboolean   may_recurse)
 {
   GHook *hook;
 
   g_return_if_fail (hook_list != NULL);
   g_return_if_fail (hook_list->is_setup);
@@ -531,11 +531,11 @@
 
       was_in_call = G_HOOK_IN_CALL (hook);
       hook->flags |= G_HOOK_FLAG_IN_CALL;
       func (hook->data);
       if (!was_in_call)
-    hook->flags &= ~G_HOOK_FLAG_IN_CALL;
+  hook->flags &= ~G_HOOK_FLAG_IN_CALL;
 
       hook = g_hook_next_valid (hook_list, hook, may_recurse);
     }
 }
 
@@ -549,11 +549,11 @@
  * Calls all of the #GHook functions in a #GHookList.
  * Any function which returns %FALSE is removed from the #GHookList.
  */
 void
 g_hook_list_invoke_check (GHookList *hook_list,
-              gboolean   may_recurse)
+        gboolean   may_recurse)
 {
   GHook *hook;
 
   g_return_if_fail (hook_list != NULL);
   g_return_if_fail (hook_list->is_setup);
@@ -569,13 +569,13 @@
 
       was_in_call = G_HOOK_IN_CALL (hook);
       hook->flags |= G_HOOK_FLAG_IN_CALL;
       need_destroy = !func (hook->data);
       if (!was_in_call)
-    hook->flags &= ~G_HOOK_FLAG_IN_CALL;
+  hook->flags &= ~G_HOOK_FLAG_IN_CALL;
       if (need_destroy)
-    g_hook_destroy_link (hook_list, hook);
+  g_hook_destroy_link (hook_list, hook);
 
       hook = g_hook_next_valid (hook_list, hook, may_recurse);
     }
 }
 
@@ -600,14 +600,14 @@
  *
  * Calls a function on each valid #GHook and destroys it if the
  * function returns %FALSE.
  */
 void
-g_hook_list_marshal_check (GHookList           *hook_list,
-               gboolean     may_recurse,
-                           GHookCheckMarshaller marshaller,
-               gpointer     data)
+g_hook_list_marshal_check (GHookList         *hook_list,
+         gboolean   may_recurse,
+         GHookCheckMarshaller marshaller,
+         gpointer   data)
 {
   GHook *hook;
 
   g_return_if_fail (hook_list != NULL);
   g_return_if_fail (hook_list->is_setup);
@@ -621,13 +621,13 @@
 
       was_in_call = G_HOOK_IN_CALL (hook);
       hook->flags |= G_HOOK_FLAG_IN_CALL;
       need_destroy = !marshaller (hook, data);
       if (!was_in_call)
-    hook->flags &= ~G_HOOK_FLAG_IN_CALL;
+  hook->flags &= ~G_HOOK_FLAG_IN_CALL;
       if (need_destroy)
-    g_hook_destroy_link (hook_list, hook);
+  g_hook_destroy_link (hook_list, hook);
 
       hook = g_hook_next_valid (hook_list, hook, may_recurse);
     }
 }
 
@@ -649,14 +649,14 @@
  * @marshal_data: data to pass to @marshaller
  *
  * Calls a function on each valid #GHook.
  */
 void
-g_hook_list_marshal (GHookList           *hook_list,
-             gboolean             may_recurse,
-             GHookMarshaller          marshaller,
-             gpointer             data)
+g_hook_list_marshal (GHookList         *hook_list,
+         gboolean         may_recurse,
+         GHookMarshaller        marshaller,
+         gpointer         data)
 {
   GHook *hook;
 
   g_return_if_fail (hook_list != NULL);
   g_return_if_fail (hook_list->is_setup);
@@ -669,11 +669,11 @@
 
       was_in_call = G_HOOK_IN_CALL (hook);
       hook->flags |= G_HOOK_FLAG_IN_CALL;
       marshaller (hook, data);
       if (!was_in_call)
-    hook->flags &= ~G_HOOK_FLAG_IN_CALL;
+  hook->flags &= ~G_HOOK_FLAG_IN_CALL;
 
       hook = g_hook_next_valid (hook_list, hook, may_recurse);
     }
 }
 
@@ -691,27 +691,27 @@
  *
  * Returns: the first valid #GHook, or %NULL if none are valid
  */
 GHook*
 g_hook_first_valid (GHookList *hook_list,
-            gboolean   may_be_in_call)
+        gboolean   may_be_in_call)
 {
   g_return_val_if_fail (hook_list != NULL, NULL);
 
   if (hook_list->is_setup)
     {
       GHook *hook;
 
       hook = hook_list->hooks;
       if (hook)
-    {
-      g_hook_ref (hook_list, hook);
-      if (G_HOOK_IS_VALID (hook) && (may_be_in_call || !G_HOOK_IN_CALL (hook)))
-        return hook;
-      else
-        return g_hook_next_valid (hook_list, hook, may_be_in_call);
-    }
+  {
+    g_hook_ref (hook_list, hook);
+    if (G_HOOK_IS_VALID (hook) && (may_be_in_call || !G_HOOK_IN_CALL (hook)))
+      return hook;
+    else
+      return g_hook_next_valid (hook_list, hook, may_be_in_call);
+  }
     }
 
   return NULL;
 }
 
@@ -730,12 +730,12 @@
  *
  * Returns: the next valid #GHook, or %NULL if none are valid
  */
 GHook*
 g_hook_next_valid (GHookList *hook_list,
-           GHook     *hook,
-           gboolean   may_be_in_call)
+       GHook     *hook,
+       gboolean   may_be_in_call)
 {
   GHook *ohook = hook;
 
   g_return_val_if_fail (hook_list != NULL, NULL);
 
@@ -744,16 +744,16 @@
 
   hook = hook->next;
   while (hook)
     {
       if (G_HOOK_IS_VALID (hook) && (may_be_in_call || !G_HOOK_IN_CALL (hook)))
-    {
-      g_hook_ref (hook_list, hook);
-      g_hook_unref (hook_list, ohook);
+  {
+    g_hook_ref (hook_list, hook);
+    g_hook_unref (hook_list, ohook);
 
-      return hook;
-    }
+    return hook;
+  }
       hook = hook->next;
     }
   g_hook_unref (hook_list, ohook);
 
   return NULL;
@@ -768,22 +768,22 @@
  *
  * Returns: the #GHook with the given id, or %NULL if it is not found
  */
 GHook*
 g_hook_get (GHookList *hook_list,
-        gulong     hook_id)
+      gulong     hook_id)
 {
   GHook *hook;
 
   g_return_val_if_fail (hook_list != NULL, NULL);
   g_return_val_if_fail (hook_id > 0, NULL);
 
   hook = hook_list->hooks;
   while (hook)
     {
       if (hook->hook_id == hook_id)
-    return hook;
+  return hook;
       hook = hook->next;
     }
 
   return NULL;
 }
@@ -812,13 +812,13 @@
  *
  * Returns: the found #GHook or %NULL if no matching #GHook is found
  */
 GHook*
 g_hook_find (GHookList    *hook_list,
-         gboolean      need_valids,
-             GHookFindFunc func,
-         gpointer      data)
+       gboolean    need_valids,
+       GHookFindFunc func,
+       gpointer    data)
 {
   GHook *hook;
 
   g_return_val_if_fail (hook_list != NULL, NULL);
   g_return_val_if_fail (func != NULL, NULL);
@@ -828,23 +828,23 @@
     {
       GHook *tmp;
 
       /* test only non-destroyed hooks */
       if (!hook->hook_id)
-    {
-      hook = hook->next;
-      continue;
-    }
+  {
+    hook = hook->next;
+    continue;
+  }
 
       g_hook_ref (hook_list, hook);
 
       if (func (hook, data) && hook->hook_id && (!need_valids || G_HOOK_ACTIVE (hook)))
-    {
-      g_hook_unref (hook_list, hook);
+  {
+    g_hook_unref (hook_list, hook);
 
-      return hook;
-    }
+    return hook;
+  }
 
       tmp = hook->next;
       g_hook_unref (hook_list, hook);
       hook = tmp;
     }
@@ -864,25 +864,25 @@
  * Returns: the #GHook with the given @data or %NULL if no matching
  *     #GHook is found
  */
 GHook*
 g_hook_find_data (GHookList *hook_list,
-          gboolean   need_valids,
-          gpointer   data)
+      gboolean   need_valids,
+      gpointer   data)
 {
   GHook *hook;
 
   g_return_val_if_fail (hook_list != NULL, NULL);
 
   hook = hook_list->hooks;
   while (hook)
     {
       /* test only non-destroyed hooks */
       if (hook->data == data &&
-      hook->hook_id &&
-      (!need_valids || G_HOOK_ACTIVE (hook)))
-    return hook;
+    hook->hook_id &&
+    (!need_valids || G_HOOK_ACTIVE (hook)))
+  return hook;
 
       hook = hook->next;
     }
 
   return NULL;
@@ -900,12 +900,12 @@
  * Returns: the #GHook with the given @func or %NULL if no matching
  *     #GHook is found
  */
 GHook*
 g_hook_find_func (GHookList *hook_list,
-          gboolean   need_valids,
-          gpointer   func)
+      gboolean   need_valids,
+      gpointer   func)
 {
   GHook *hook;
 
   g_return_val_if_fail (hook_list != NULL, NULL);
   g_return_val_if_fail (func != NULL, NULL);
@@ -913,13 +913,13 @@
   hook = hook_list->hooks;
   while (hook)
     {
       /* test only non-destroyed hooks */
       if (hook->func == func &&
-      hook->hook_id &&
-      (!need_valids || G_HOOK_ACTIVE (hook)))
-    return hook;
+    hook->hook_id &&
+    (!need_valids || G_HOOK_ACTIVE (hook)))
+  return hook;
 
       hook = hook->next;
     }
 
   return NULL;
@@ -938,13 +938,13 @@
  * Returns: the #GHook with the given @func and @data or %NULL if
  *     no matching #GHook is found
  */
 GHook*
 g_hook_find_func_data (GHookList *hook_list,
-               gboolean   need_valids,
-               gpointer   func,
-               gpointer   data)
+           gboolean   need_valids,
+           gpointer   func,
+           gpointer   data)
 {
   GHook *hook;
 
   g_return_val_if_fail (hook_list != NULL, NULL);
   g_return_val_if_fail (func != NULL, NULL);
@@ -952,14 +952,14 @@
   hook = hook_list->hooks;
   while (hook)
     {
       /* test only non-destroyed hooks */
       if (hook->data == data &&
-      hook->func == func &&
-      hook->hook_id &&
-      (!need_valids || G_HOOK_ACTIVE (hook)))
-    return hook;
+    hook->func == func &&
+    hook->hook_id &&
+    (!need_valids || G_HOOK_ACTIVE (hook)))
+  return hook;
 
       hook = hook->next;
     }
 
   return NULL;
@@ -984,12 +984,12 @@
  *
  * Inserts a #GHook into a #GHookList, sorted by the given function.
  */
 void
 g_hook_insert_sorted (GHookList       *hook_list,
-              GHook       *hook,
-                      GHookCompareFunc func)
+          GHook       *hook,
+          GHookCompareFunc func)
 {
   GHook *sibling;
 
   g_return_if_fail (hook_list != NULL);
   g_return_if_fail (hook_list->is_setup);
@@ -1007,19 +1007,19 @@
     {
       GHook *tmp;
 
       g_hook_ref (hook_list, sibling);
       if (func (hook, sibling) <= 0 && sibling->hook_id)
-    {
-      g_hook_unref (hook_list, sibling);
-      break;
-    }
+  {
+    g_hook_unref (hook_list, sibling);
+    break;
+  }
 
       /* next non-destroyed hook */
       tmp = sibling->next;
       while (tmp && !tmp->hook_id)
-    tmp = tmp->next;
+  tmp = tmp->next;
 
       g_hook_unref (hook_list, sibling);
       sibling = tmp;
 
  }
@@ -1037,11 +1037,11 @@
  *
  * Returns: a value <= 0 if the id of @sibling is >= the id of @new_hook
  */
 gint
 g_hook_compare_ids (GHook *new_hook,
-            GHook *sibling)
+        GHook *sibling)
 {
   if (new_hook->hook_id < sibling->hook_id)
     return -1;
   else if (new_hook->hook_id > sibling->hook_id)
     return 1;
