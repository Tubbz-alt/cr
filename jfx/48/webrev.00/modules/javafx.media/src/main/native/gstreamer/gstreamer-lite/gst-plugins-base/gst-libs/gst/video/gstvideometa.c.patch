diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/gstvideometa.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/gstvideometa.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/gstvideometa.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/video/gstvideometa.c
@@ -14,15 +14,25 @@
  * You should have received a copy of the GNU Library General Public
  * License along with this library; if not, write to the
  * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
  * Boston, MA 02110-1301, USA.
  */
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
 
 #include "gstvideometa.h"
 
 #include <string.h>
 
+/**
+ * SECTION:gstvideometa
+ * @title: GstMeta for video
+ * @short_description: Video related GstMeta
+ *
+ */
+
 #ifndef GST_DISABLE_GST_DEBUG
 #define GST_CAT_DEFAULT ensure_debug_category()
 static GstDebugCategory *
 ensure_debug_category (void)
 {
@@ -225,16 +235,16 @@
   return TRUE;
 
   /* ERRORS */
 no_memory:
   {
-    GST_DEBUG ("plane %u, no memory at offset %" G_GSIZE_FORMAT, plane, offset);
+    GST_ERROR ("plane %u, no memory at offset %" G_GSIZE_FORMAT, plane, offset);
     return FALSE;
   }
 cannot_map:
   {
-    GST_DEBUG ("cannot map memory range %u-%u", idx, length);
+    GST_ERROR ("cannot map memory range %u-%u", idx, length);
     return FALSE;
   }
 }
 
 static gboolean
@@ -286,12 +296,12 @@
  * @flags: #GstVideoFrameFlags
  * @format: a #GstVideoFormat
  * @width: the width
  * @height: the height
  * @n_planes: number of planes
- * @offset: offset of each plane
- * @stride: stride of each plane
+ * @offset: (array fixed-size=4): offset of each plane
+ * @stride: (array fixed-size=4): stride of each plane
  *
  * Attaches GstVideoMeta metadata to @buffer with the given parameters.
  *
  * Returns: (transfer none): the #GstVideoMeta on @buffer.
  */
@@ -883,10 +893,11 @@
 }
 
 /**
  * gst_video_region_of_interest_meta_get_param:
  * @meta: a #GstVideoRegionOfInterestMeta
+ * @name: a name.
  *
  * Retrieve the parameter for @meta having @name as structure name,
  * or %NULL if there is none.
  *
  * Returns: (transfer none) (nullable): a #GstStructure
@@ -997,18 +1008,21 @@
  * @tc: a #GstVideoTimeCode
  *
  * Attaches #GstVideoTimeCodeMeta metadata to @buffer with the given
  * parameters.
  *
- * Returns: (transfer none): the #GstVideoTimeCodeMeta on @buffer.
+ * Returns: (transfer none) (nullable): the #GstVideoTimeCodeMeta on @buffer, or
+ * (since 1.16) %NULL if the timecode was invalid.
  *
  * Since: 1.10
  */
 GstVideoTimeCodeMeta *
 gst_buffer_add_video_time_code_meta (GstBuffer * buffer, GstVideoTimeCode * tc)
 {
-  g_return_val_if_fail (gst_video_time_code_is_valid (tc), NULL);
+  if (!gst_video_time_code_is_valid (tc))
+    return NULL;
+
   return gst_buffer_add_video_time_code_meta_full (buffer, tc->config.fps_n,
       tc->config.fps_d, tc->config.latest_daily_jam, tc->config.flags,
       tc->hours, tc->minutes, tc->seconds, tc->frames, tc->field_count);
 }
 
@@ -1026,11 +1040,12 @@
  * @field_count: fields since the daily jam
  *
  * Attaches #GstVideoTimeCodeMeta metadata to @buffer with the given
  * parameters.
  *
- * Returns: (transfer none): the #GstVideoTimeCodeMeta on @buffer.
+ * Returns: (transfer none): the #GstVideoTimeCodeMeta on @buffer, or
+ * (since 1.16) %NULL if the timecode was invalid.
  *
  * Since: 1.10
  */
 GstVideoTimeCodeMeta *
 gst_buffer_add_video_time_code_meta_full (GstBuffer * buffer, guint fps_n,
@@ -1046,9 +1061,12 @@
   g_return_val_if_fail (meta != NULL, NULL);
 
   gst_video_time_code_init (&meta->tc, fps_n, fps_d, latest_daily_jam, flags,
       hours, minutes, seconds, frames, field_count);
 
-  g_return_val_if_fail (gst_video_time_code_is_valid (&meta->tc), NULL);
+  if (!gst_video_time_code_is_valid (&meta->tc)) {
+    gst_buffer_remove_meta (buffer, (GstMeta *) meta);
+    return NULL;
+  }
 
   return meta;
 }
