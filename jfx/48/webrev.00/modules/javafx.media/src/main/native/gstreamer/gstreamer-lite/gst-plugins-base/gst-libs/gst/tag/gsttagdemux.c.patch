diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/tag/gsttagdemux.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/tag/gsttagdemux.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/tag/gsttagdemux.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gst-plugins-base/gst-libs/gst/tag/gsttagdemux.c
@@ -165,10 +165,11 @@
 static void gst_tag_demux_base_init (gpointer g_class);
 static void gst_tag_demux_class_init (gpointer g_class, gpointer d);
 static void gst_tag_demux_init (GstTagDemux * obj, GstTagDemuxClass * klass);
 
 static gpointer parent_class;   /* NULL */
+static gint private_offset = 0;
 
 /* Cannot use boilerplate macros here because we want the abstract flag */
 GType
 gst_tag_demux_get_type (void)
 {
@@ -187,15 +188,24 @@
       (GInstanceInitFunc) gst_tag_demux_init
     };
 
     object_type = g_type_register_static (GST_TYPE_ELEMENT,
         "GstTagDemux", &object_info, G_TYPE_FLAG_ABSTRACT);
+
+    private_offset =
+        g_type_add_instance_private (object_type, sizeof (GstTagDemuxPrivate));
   }
 
   return object_type;
 }
 
+static inline GstTagDemuxPrivate *
+gst_tag_demux_get_instance_private (GstTagDemux * self)
+{
+  return (G_STRUCT_MEMBER_P (self, private_offset));
+}
+
 static void
 gst_tag_demux_base_init (gpointer klass)
 {
   GstElementClass *element_class = GST_ELEMENT_CLASS (klass);
 
@@ -216,11 +226,12 @@
 
   gobject_class->dispose = gst_tag_demux_dispose;
 
   element_class->change_state = GST_DEBUG_FUNCPTR (gst_tag_demux_change_state);
 
-  g_type_class_add_private (klass, sizeof (GstTagDemuxPrivate));
+  if (private_offset != 0)
+    g_type_class_adjust_private_offset (klass, &private_offset);
 
   /* subclasses must set at least one of these */
   tagdemux_class->min_start_size = 0;
   tagdemux_class->min_end_size = 0;
 }
@@ -265,12 +276,11 @@
 gst_tag_demux_init (GstTagDemux * demux, GstTagDemuxClass * gclass)
 {
   GstElementClass *element_klass = GST_ELEMENT_CLASS (gclass);
   GstPadTemplate *tmpl;
 
-  demux->priv = g_type_instance_get_private ((GTypeInstance *) demux,
-      GST_TYPE_TAG_DEMUX);
+  demux->priv = gst_tag_demux_get_instance_private (demux);
 
   /* sink pad */
   tmpl = gst_element_class_get_pad_template (element_klass, "sink");
   if (tmpl) {
     demux->priv->sinkpad = gst_pad_new_from_template (tmpl, "sink");
@@ -330,12 +340,12 @@
   if (old_caps == NULL || !gst_caps_is_equal (new_caps, old_caps)) {
     GstEvent *event;
 
     gst_caps_replace (&tagdemux->priv->src_caps, new_caps);
 
-      GST_DEBUG_OBJECT (tagdemux, "Changing src pad caps to %" GST_PTR_FORMAT,
-          tagdemux->priv->src_caps);
+    GST_DEBUG_OBJECT (tagdemux, "Changing src pad caps to %" GST_PTR_FORMAT,
+        tagdemux->priv->src_caps);
 
     event =
         gst_pad_get_sticky_event (tagdemux->priv->sinkpad,
         GST_EVENT_STREAM_START, 0);
     if (!event) {
@@ -661,11 +671,11 @@
 
       GST_DEBUG_OBJECT (demux, "Found type %" GST_PTR_FORMAT " with a "
           "probability of %u", caps, probability);
 
       gst_tag_demux_set_src_caps (demux, caps);
-        gst_caps_unref (caps);
+      gst_caps_unref (caps);
 
       /* Move onto streaming and fall-through to push out existing
        * data */
       demux->priv->state = GST_TAG_DEMUX_STREAMING;
       /* fall-through */
@@ -733,12 +743,12 @@
 
         /* push final buffer with eos indication to force typefinding */
         gst_tag_demux_chain_buffer (demux, gst_buffer_new (), TRUE);
 
         if (!gst_pad_has_current_caps (demux->priv->srcpad)) {
-        GST_ELEMENT_ERROR (demux, STREAM, TYPE_NOT_FOUND, (NULL), (NULL));
-      }
+          GST_ELEMENT_ERROR (demux, STREAM, TYPE_NOT_FOUND, (NULL), (NULL));
+        }
       }
       ret = gst_pad_event_default (pad, parent, event);
       break;
     case GST_EVENT_SEGMENT:
     {
@@ -919,67 +929,67 @@
 
 static gboolean
 gst_tag_demux_seek_push (GstTagDemux * tagdemux, GstEvent * event)
 {
   gboolean res = FALSE;
-      gdouble rate;
-      GstFormat format;
+  gdouble rate;
+  GstFormat format;
   GstSeekType start_type, stop_type;
-      GstSeekFlags flags;
+  GstSeekFlags flags;
   gint64 start, stop;
 
-      gst_event_parse_seek (event, &rate, &format, &flags,
+  gst_event_parse_seek (event, &rate, &format, &flags,
       &start_type, &start, &stop_type, &stop);
 
-      if (format == GST_FORMAT_BYTES &&
-          tagdemux->priv->state == GST_TAG_DEMUX_STREAMING &&
-          gst_pad_is_linked (tagdemux->priv->sinkpad)) {
-        GstEvent *upstream;
+  if (format == GST_FORMAT_BYTES &&
+      tagdemux->priv->state == GST_TAG_DEMUX_STREAMING &&
+      gst_pad_is_linked (tagdemux->priv->sinkpad)) {
+    GstEvent *upstream;
 
     switch (start_type) {
-          case GST_SEEK_TYPE_SET:
+      case GST_SEEK_TYPE_SET:
         if (start == -1)
           start = 0;
         start += tagdemux->priv->strip_start;
-            break;
-          case GST_SEEK_TYPE_END:
-            /* Adjust the seek to be relative to the start of any end tag
-             * (note: 10 bytes before end is represented by stop=-10) */
+        break;
+      case GST_SEEK_TYPE_END:
+        /* Adjust the seek to be relative to the start of any end tag
+         * (note: 10 bytes before end is represented by stop=-10) */
         if (start > 0)
           start = 0;
         start -= tagdemux->priv->strip_end;
-            break;
-          case GST_SEEK_TYPE_NONE:
-          default:
-            break;
-        }
-        switch (stop_type) {
-          case GST_SEEK_TYPE_SET:
-            if (stop != -1) {
-              /* -1 means the end of the file, pass it upstream intact */
-              stop += tagdemux->priv->strip_start;
-            }
-            break;
-          case GST_SEEK_TYPE_END:
-            /* Adjust the seek to be relative to the start of any end tag
-             * (note: 10 bytes before end is represented by stop=-10) */
-            if (stop > 0)
-              stop = 0;
-            stop -= tagdemux->priv->strip_end;
-            break;
-          case GST_SEEK_TYPE_NONE:
-          default:
-            break;
+        break;
+      case GST_SEEK_TYPE_NONE:
+      default:
+        break;
+    }
+    switch (stop_type) {
+      case GST_SEEK_TYPE_SET:
+        if (stop != -1) {
+          /* -1 means the end of the file, pass it upstream intact */
+          stop += tagdemux->priv->strip_start;
         }
-        upstream = gst_event_new_seek (rate, format, flags,
+        break;
+      case GST_SEEK_TYPE_END:
+        /* Adjust the seek to be relative to the start of any end tag
+         * (note: 10 bytes before end is represented by stop=-10) */
+        if (stop > 0)
+          stop = 0;
+        stop -= tagdemux->priv->strip_end;
+        break;
+      case GST_SEEK_TYPE_NONE:
+      default:
+        break;
+    }
+    upstream = gst_event_new_seek (rate, format, flags,
         start_type, start, stop_type, stop);
-        res = gst_pad_push_event (tagdemux->priv->sinkpad, upstream);
+    res = gst_pad_push_event (tagdemux->priv->sinkpad, upstream);
   } else if (format == GST_FORMAT_TIME &&
       tagdemux->priv->state == GST_TAG_DEMUX_STREAMING &&
       gst_pad_is_linked (tagdemux->priv->sinkpad)) {
     res = gst_pad_push_event (tagdemux->priv->sinkpad, gst_event_ref (event));
-      }
+  }
 
   return res;
 }
 
 static gboolean
@@ -1383,11 +1393,11 @@
    * the chain function if we end up in push mode */
   demux->priv->state = GST_TAG_DEMUX_STREAMING;
 
   /* 6 Set the srcpad caps now that we know them */
   gst_tag_demux_set_src_caps (demux, caps);
-      gst_caps_unref (caps);
+  gst_caps_unref (caps);
 
 skip_typefinding:
 
   /* set it again, in case we skipped typefinding */
   demux->priv->state = GST_TAG_DEMUX_STREAMING;
@@ -1453,11 +1463,11 @@
 
       if (demux->priv->need_newseg) {
         demux->priv->need_newseg = FALSE;
         /* FIXME: check segment, should be 0-N for downstream */
         gst_tag_demux_send_new_segment (demux);
-  }
+      }
 
       /* Send our own pending tag event */
       if (demux->priv->send_tag_event) {
         gst_tag_demux_send_tag_event (demux);
         demux->priv->send_tag_event = FALSE;
@@ -1476,11 +1486,11 @@
       GST_BUFFER_OFFSET_END (outbuf) =
           demux->priv->offset - demux->priv->strip_start;
 
       ret = gst_pad_push (demux->priv->srcpad, outbuf);
       break;
-  }
+    }
     default:
       ret = GST_FLOW_ERROR;
       break;
   }
   if (ret != GST_FLOW_OK)
@@ -1514,11 +1524,11 @@
                 GST_FORMAT_BYTES, stop));
         gst_pad_push_event (demux->priv->srcpad,
             gst_event_new_segment_done (GST_FORMAT_BYTES, stop));
       } else {
         push_eos = TRUE;
-  }
+      }
     } else if (ret == GST_FLOW_NOT_LINKED || ret < GST_FLOW_EOS) {
       /* for fatal errors we post an error message */
       GST_ELEMENT_FLOW_ERROR (demux, ret);
       push_eos = TRUE;
     }
@@ -1826,11 +1836,10 @@
 #ifdef GSTREAMER_LITE
   if (event == NULL)
     return;
 #endif // GSTREAMER_LITE
 
-    GST_EVENT_TIMESTAMP (event) = 0;
     GST_DEBUG_OBJECT (demux, "Sending tag event on src pad");
     gst_pad_push_event (demux->priv->srcpad, event);
   }
 }
 
