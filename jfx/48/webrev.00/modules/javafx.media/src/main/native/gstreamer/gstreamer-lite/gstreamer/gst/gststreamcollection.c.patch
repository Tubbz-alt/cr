diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gststreamcollection.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gststreamcollection.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gststreamcollection.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gststreamcollection.c
@@ -39,18 +39,15 @@
 #include "gststreamcollection.h"
 
 GST_DEBUG_CATEGORY_STATIC (stream_collection_debug);
 #define GST_CAT_DEFAULT stream_collection_debug
 
-#define GST_STREAM_COLLECTION_GET_PRIVATE(obj)  \
-   (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GST_TYPE_STREAM_COLLECTION, GstStreamCollectionPrivate))
-
 struct _GstStreamCollectionPrivate
 {
   /* Maybe switch this to a GArray if performance is
    * ever an issue? */
-  GQueue *streams;
+  GQueue streams;
 };
 
 /* stream signals and properties */
 enum
 {
@@ -66,41 +63,38 @@
 };
 
 static guint gst_stream_collection_signals[LAST_SIGNAL] = { 0 };
 
 static void gst_stream_collection_dispose (GObject * object);
-static void gst_stream_collection_finalize (GObject * object);
 
 static void gst_stream_collection_set_property (GObject * object, guint prop_id,
     const GValue * value, GParamSpec * pspec);
 static void gst_stream_collection_get_property (GObject * object, guint prop_id,
     GValue * value, GParamSpec * pspec);
 
 static void
 proxy_stream_notify_cb (GstStream * stream, GParamSpec * pspec,
     GstStreamCollection * collection);
 
-#define _do_init                \
+#define _do_init        \
 { \
   GST_DEBUG_CATEGORY_INIT (stream_collection_debug, "streamcollection", GST_DEBUG_BOLD, \
       "debugging info for the stream collection objects"); \
   \
 }
 
 #define gst_stream_collection_parent_class parent_class
 G_DEFINE_TYPE_WITH_CODE (GstStreamCollection, gst_stream_collection,
-    GST_TYPE_OBJECT, _do_init);
+    GST_TYPE_OBJECT, G_ADD_PRIVATE (GstStreamCollection) _do_init);
 
 static void
 gst_stream_collection_class_init (GstStreamCollectionClass * klass)
 {
   GObjectClass *gobject_class;
 
   gobject_class = (GObjectClass *) klass;
 
-  g_type_class_add_private (klass, sizeof (GstStreamCollectionPrivate));
-
   gobject_class->set_property = gst_stream_collection_set_property;
   gobject_class->get_property = gst_stream_collection_get_property;
 
   /**
    * GstStream:upstream-id:
@@ -128,18 +122,17 @@
       G_SIGNAL_NO_HOOKS, G_STRUCT_OFFSET (GstStreamCollectionClass,
           stream_notify), NULL, NULL, g_cclosure_marshal_generic, G_TYPE_NONE,
       2, GST_TYPE_STREAM, G_TYPE_PARAM);
 
   gobject_class->dispose = gst_stream_collection_dispose;
-  gobject_class->finalize = gst_stream_collection_finalize;
 }
 
 static void
 gst_stream_collection_init (GstStreamCollection * collection)
 {
-  collection->priv = GST_STREAM_COLLECTION_GET_PRIVATE (collection);
-  collection->priv->streams = g_queue_new ();
+  collection->priv = gst_stream_collection_get_instance_private (collection);
+  g_queue_init (&collection->priv->streams);
 }
 
 static void
 release_gst_stream (GstStream * stream, GstStreamCollection * collection)
 {
@@ -156,30 +149,17 @@
   if (collection->upstream_id) {
     g_free (collection->upstream_id);
     collection->upstream_id = NULL;
   }
 
-  if (collection->priv->streams) {
-    g_queue_foreach (collection->priv->streams,
-        (GFunc) release_gst_stream, collection);
-    g_queue_clear (collection->priv->streams);
-  }
+  g_queue_foreach (&collection->priv->streams,
+      (GFunc) release_gst_stream, collection);
+  g_queue_clear (&collection->priv->streams);
 
   G_OBJECT_CLASS (parent_class)->dispose (object);
 }
 
-static void
-gst_stream_collection_finalize (GObject * object)
-{
-  GstStreamCollection *collection = GST_STREAM_COLLECTION_CAST (object);
-
-  if (collection->priv->streams)
-    g_queue_free (collection->priv->streams);
-
-  G_OBJECT_CLASS (parent_class)->finalize (object);
-}
-
 /**
  * gst_stream_collection_new:
  * @upstream_id: (allow-none): The stream id of the parent stream
  *
  * Create a new #GstStreamCollection.
@@ -301,15 +281,14 @@
 gst_stream_collection_add_stream (GstStreamCollection * collection,
     GstStream * stream)
 {
   g_return_val_if_fail (GST_IS_STREAM_COLLECTION (collection), FALSE);
   g_return_val_if_fail (GST_IS_STREAM (stream), FALSE);
-  g_return_val_if_fail (collection->priv->streams, FALSE);
 
   GST_DEBUG_OBJECT (collection, "Adding stream %" GST_PTR_FORMAT, stream);
 
-  g_queue_push_tail (collection->priv->streams, stream);
+  g_queue_push_tail (&collection->priv->streams, stream);
   g_signal_connect (stream, "notify", (GCallback) proxy_stream_notify_cb,
       collection);
 
   return TRUE;
 }
@@ -326,13 +305,12 @@
  */
 guint
 gst_stream_collection_get_size (GstStreamCollection * collection)
 {
   g_return_val_if_fail (GST_IS_STREAM_COLLECTION (collection), 0);
-  g_return_val_if_fail (collection->priv->streams, 0);
 
-  return g_queue_get_length (collection->priv->streams);
+  return g_queue_get_length (&collection->priv->streams);
 }
 
 /**
  * gst_stream_collection_get_stream:
  * @collection: a #GstStreamCollection
@@ -348,9 +326,8 @@
  */
 GstStream *
 gst_stream_collection_get_stream (GstStreamCollection * collection, guint index)
 {
   g_return_val_if_fail (GST_IS_STREAM_COLLECTION (collection), NULL);
-  g_return_val_if_fail (collection->priv->streams, NULL);
 
-  return g_queue_peek_nth (collection->priv->streams, index);
+  return g_queue_peek_nth (&collection->priv->streams, index);
 }
