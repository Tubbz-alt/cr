diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gsourceclosure.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gsourceclosure.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gsourceclosure.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gsourceclosure.c
@@ -35,17 +35,17 @@
   static volatile GType etype = 0;
 
   if (g_once_init_enter (&etype))
     {
       static const GFlagsValue values[] = {
-    { G_IO_IN,   "G_IO_IN",   "in" },
-    { G_IO_OUT,  "G_IO_OUT",  "out" },
-    { G_IO_PRI,  "G_IO_PRI",  "pri" },
-    { G_IO_ERR,  "G_IO_ERR",  "err" },
-    { G_IO_HUP,  "G_IO_HUP",  "hup" },
-    { G_IO_NVAL, "G_IO_NVAL", "nval" },
-    { 0, NULL, NULL }
+  { G_IO_IN,   "G_IO_IN",   "in" },
+  { G_IO_OUT,  "G_IO_OUT",  "out" },
+  { G_IO_PRI,  "G_IO_PRI",  "pri" },
+  { G_IO_ERR,  "G_IO_ERR",  "err" },
+  { G_IO_HUP,  "G_IO_HUP",  "hup" },
+  { G_IO_NVAL, "G_IO_NVAL", "nval" },
+  { 0, NULL, NULL }
       };
       GType type_id = g_flags_register_static ("GIOCondition", values);
       g_once_init_leave (&etype, type_id);
     }
   return etype;
@@ -54,15 +54,15 @@
 /* We need to hand-write this marshaler, since it doesn't have an
  * instance object.
  */
 static void
 source_closure_marshal_BOOLEAN__VOID (GClosure     *closure,
-                      GValue       *return_value,
-                      guint         n_param_values,
-                      const GValue *param_values,
-                      gpointer      invocation_hint,
-                      gpointer      marshal_data)
+              GValue       *return_value,
+              guint         n_param_values,
+              const GValue *param_values,
+              gpointer      invocation_hint,
+              gpointer      marshal_data)
 {
   GSourceFunc callback;
   GCClosure *cc = (GCClosure*) closure;
   gboolean v_return;
 
@@ -76,12 +76,12 @@
   g_value_set_boolean (return_value, v_return);
 }
 
 static gboolean
 io_watch_closure_callback (GIOChannel   *channel,
-               GIOCondition  condition,
-               gpointer      data)
+         GIOCondition  condition,
+         gpointer      data)
 {
   GClosure *closure = data;
 
   GValue params[2] = { G_VALUE_INIT, G_VALUE_INIT };
   GValue result_value = G_VALUE_INIT;
@@ -187,13 +187,13 @@
   return result;
 }
 
 static void
 closure_callback_get (gpointer     cb_data,
-              GSource     *source,
-              GSourceFunc *func,
-              gpointer    *data)
+          GSource     *source,
+          GSourceFunc *func,
+          gpointer    *data)
 {
   GSourceFunc closure_callback = source->source_funcs->closure_callback;
 
   if (!closure_callback)
     {
@@ -241,11 +241,11 @@
  * and @closure_marshal fields of the #GSourceFuncs structure must have been
  * filled in with pointers to appropriate functions.
  */
 void
 g_source_set_closure (GSource  *source,
-              GClosure *closure)
+          GClosure *closure)
 {
   g_return_if_fail (source != NULL);
   g_return_if_fail (closure != NULL);
 
   if (!source->source_funcs->closure_callback &&
@@ -270,29 +270,29 @@
 
   if (G_CLOSURE_NEEDS_MARSHAL (closure))
     {
       GClosureMarshal marshal = (GClosureMarshal)source->source_funcs->closure_marshal;
       if (marshal)
-    g_closure_set_marshal (closure, marshal);
+  g_closure_set_marshal (closure, marshal);
       else if (source->source_funcs == &g_idle_funcs ||
 #ifdef G_OS_UNIX
                source->source_funcs == &g_unix_signal_funcs ||
 #endif
                source->source_funcs == &g_timeout_funcs)
-    g_closure_set_marshal (closure, source_closure_marshal_BOOLEAN__VOID);
+  g_closure_set_marshal (closure, source_closure_marshal_BOOLEAN__VOID);
       else
         g_closure_set_marshal (closure, g_cclosure_marshal_generic);
     }
 }
 
 static void
 dummy_closure_marshal (GClosure     *closure,
-               GValue       *return_value,
-               guint         n_param_values,
-               const GValue *param_values,
-               gpointer      invocation_hint,
-               gpointer      marshal_data)
+           GValue       *return_value,
+           guint         n_param_values,
+           const GValue *param_values,
+           gpointer      invocation_hint,
+           gpointer      marshal_data)
 {
   if (G_VALUE_HOLDS_BOOLEAN (return_value))
     g_value_set_boolean (return_value, TRUE);
 }
 
