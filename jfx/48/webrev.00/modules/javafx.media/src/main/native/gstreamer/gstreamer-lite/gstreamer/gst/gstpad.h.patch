diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstpad.h b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstpad.h
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstpad.h
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstpad.h
@@ -78,28 +78,28 @@
 G_BEGIN_DECLS
 
 /*
  * Pad base class
  */
-#define GST_TYPE_PAD            (gst_pad_get_type ())
-#define GST_IS_PAD(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PAD))
-#define GST_IS_PAD_CLASS(klass)     (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_PAD))
-#define GST_PAD(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PAD, GstPad))
-#define GST_PAD_CLASS(klass)        (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PAD, GstPadClass))
-#define GST_PAD_CAST(obj)       ((GstPad*)(obj))
+#define GST_TYPE_PAD      (gst_pad_get_type ())
+#define GST_IS_PAD(obj)     (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PAD))
+#define GST_IS_PAD_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_PAD))
+#define GST_PAD(obj)      (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PAD, GstPad))
+#define GST_PAD_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PAD, GstPadClass))
+#define GST_PAD_CAST(obj)   ((GstPad*)(obj))
 
 
 
 /**
  * GstPadLinkReturn:
- * @GST_PAD_LINK_OK     : link succeeded
+ * @GST_PAD_LINK_OK   : link succeeded
  * @GST_PAD_LINK_WRONG_HIERARCHY: pads have no common grandparent
  * @GST_PAD_LINK_WAS_LINKED : pad was already linked
  * @GST_PAD_LINK_WRONG_DIRECTION: pads have wrong direction
- * @GST_PAD_LINK_NOFORMAT   : pads do not have common format
- * @GST_PAD_LINK_NOSCHED    : pads cannot cooperate in scheduling
- * @GST_PAD_LINK_REFUSED    : refused for some reason
+ * @GST_PAD_LINK_NOFORMAT : pads do not have common format
+ * @GST_PAD_LINK_NOSCHED  : pads cannot cooperate in scheduling
+ * @GST_PAD_LINK_REFUSED  : refused for some reason
  *
  * Result values from gst_pad_link and friends.
  */
 typedef enum {
   GST_PAD_LINK_OK               =  0,
@@ -129,32 +129,32 @@
  */
 #define GST_PAD_LINK_SUCCESSFUL(ret) ((ret) >= GST_PAD_LINK_OK)
 
 /**
  * GstFlowReturn:
- * @GST_FLOW_OK:         Data passing was ok.
- * @GST_FLOW_NOT_LINKED:     Pad is not linked.
+ * @GST_FLOW_OK:     Data passing was ok.
+ * @GST_FLOW_NOT_LINKED:   Pad is not linked.
  * @GST_FLOW_FLUSHING:           Pad is flushing.
  * @GST_FLOW_EOS:                Pad is EOS.
- * @GST_FLOW_NOT_NEGOTIATED:     Pad is not negotiated.
- * @GST_FLOW_ERROR:      Some (fatal) error occurred. Element generating
+ * @GST_FLOW_NOT_NEGOTIATED:   Pad is not negotiated.
+ * @GST_FLOW_ERROR:    Some (fatal) error occurred. Element generating
  *                               this error should post an error message with more
  *                               details.
  * @GST_FLOW_NOT_SUPPORTED:  This operation is not supported.
- * @GST_FLOW_CUSTOM_SUCCESS:     Elements can use values starting from
+ * @GST_FLOW_CUSTOM_SUCCESS:   Elements can use values starting from
  *                               this (and higher) to define custom success
  *                               codes.
  * @GST_FLOW_CUSTOM_SUCCESS_1:   Pre-defined custom success code (define your
  *                               custom success code to this to avoid compiler
  *                               warnings).
  * @GST_FLOW_CUSTOM_SUCCESS_2:   Pre-defined custom success code.
  * @GST_FLOW_CUSTOM_ERROR:   Elements can use values starting from
  *                               this (and lower) to define custom error codes.
- * @GST_FLOW_CUSTOM_ERROR_1:     Pre-defined custom error code (define your
+ * @GST_FLOW_CUSTOM_ERROR_1:   Pre-defined custom error code (define your
  *                               custom error code to this to avoid compiler
  *                               warnings).
- * @GST_FLOW_CUSTOM_ERROR_2:     Pre-defined custom error code.
+ * @GST_FLOW_CUSTOM_ERROR_2:   Pre-defined custom error code.
  *
  * The result of passing data to a pad.
  *
  * Note that the custom return values should not be exposed outside of the
  * element scope.
@@ -164,18 +164,18 @@
   GST_FLOW_CUSTOM_SUCCESS_2 = 102,
   GST_FLOW_CUSTOM_SUCCESS_1 = 101,
   GST_FLOW_CUSTOM_SUCCESS = 100,
 
   /* core predefined */
-  GST_FLOW_OK         =  0,
+  GST_FLOW_OK     =  0,
   /* expected failures */
   GST_FLOW_NOT_LINKED     = -1,
   GST_FLOW_FLUSHING       = -2,
   /* error cases */
   GST_FLOW_EOS            = -3,
   GST_FLOW_NOT_NEGOTIATED = -4,
-  GST_FLOW_ERROR      = -5,
+  GST_FLOW_ERROR    = -5,
   GST_FLOW_NOT_SUPPORTED  = -6,
 
   /* custom error starts here */
   GST_FLOW_CUSTOM_ERROR   = -100,
   GST_FLOW_CUSTOM_ERROR_1 = -101,
@@ -242,11 +242,11 @@
  * activate function that puts the pad in push mode but elements can
  * override this function to activate the pad in pull mode if they wish.
  *
  * Returns: %TRUE if the pad could be activated.
  */
-typedef gboolean        (*GstPadActivateFunction)   (GstPad *pad, GstObject *parent);
+typedef gboolean    (*GstPadActivateFunction) (GstPad *pad, GstObject *parent);
 /**
  * GstPadActivateModeFunction:
  * @pad: a #GstPad
  * @parent: the parent of @pad
  * @mode: the requested activation mode of @pad
@@ -254,11 +254,11 @@
  *
  * The prototype of the push and pull activate functions.
  *
  * Returns: %TRUE if the pad could be activated or deactivated.
  */
-typedef gboolean        (*GstPadActivateModeFunction)   (GstPad *pad, GstObject *parent,
+typedef gboolean    (*GstPadActivateModeFunction) (GstPad *pad, GstObject *parent,
                                                                  GstPadMode mode, gboolean active);
 
 
 /* data passing */
 /**
@@ -279,11 +279,11 @@
  * When a chain function detects an error in the data stream, it must post an
  * error on the bus and return an appropriate #GstFlowReturn value.
  *
  * Returns: #GST_FLOW_OK for success
  */
-typedef GstFlowReturn       (*GstPadChainFunction)      (GstPad *pad, GstObject *parent,
+typedef GstFlowReturn   (*GstPadChainFunction)    (GstPad *pad, GstObject *parent,
                                                                  GstBuffer *buffer);
 
 /**
  * GstPadChainListFunction:
  * @pad: the sink #GstPad that performed the chain.
@@ -302,11 +302,11 @@
  * When a chainlist function detects an error in the data stream, it must
  * post an error on the bus and return an appropriate #GstFlowReturn value.
  *
  * Returns: #GST_FLOW_OK for success
  */
-typedef GstFlowReturn       (*GstPadChainListFunction)  (GstPad *pad, GstObject *parent,
+typedef GstFlowReturn   (*GstPadChainListFunction)  (GstPad *pad, GstObject *parent,
                                                                  GstBufferList *list);
 
 /**
  * GstPadGetRangeFunction:
  * @pad: the src #GstPad to perform the getrange on.
@@ -352,11 +352,11 @@
  * of @offset.
  *
  * Returns: #GST_FLOW_OK for success and a valid buffer in @buffer. Any other
  * return value leaves @buffer undefined.
  */
-typedef GstFlowReturn       (*GstPadGetRangeFunction)   (GstPad *pad, GstObject *parent,
+typedef GstFlowReturn   (*GstPadGetRangeFunction) (GstPad *pad, GstObject *parent,
                                                                  guint64 offset, guint length,
                                                                  GstBuffer **buffer);
 
 /**
  * GstPadEventFunction:
@@ -368,11 +368,11 @@
  *
  * Function signature to handle an event for the pad.
  *
  * Returns: %TRUE if the pad could handle the event.
  */
-typedef gboolean        (*GstPadEventFunction)      (GstPad *pad, GstObject *parent,
+typedef gboolean    (*GstPadEventFunction)    (GstPad *pad, GstObject *parent,
                                                                  GstEvent *event);
 
 /**
  * GstPadEventFullFunction:
  * @pad: the #GstPad to handle the event.
@@ -390,11 +390,11 @@
  * Returns: %GST_FLOW_OK if the event was handled properly, or any other
  * #GstFlowReturn dependent on downstream state.
  *
  * Since: 1.8
  */
-typedef GstFlowReturn       (*GstPadEventFullFunction)  (GstPad *pad, GstObject *parent,
+typedef GstFlowReturn   (*GstPadEventFullFunction)  (GstPad *pad, GstObject *parent,
                                                                  GstEvent *event);
 
 
 /* internal links */
 /**
@@ -424,11 +424,11 @@
  *
  * The signature of the query function.
  *
  * Returns: %TRUE if the query could be performed.
  */
-typedef gboolean        (*GstPadQueryFunction)      (GstPad *pad, GstObject *parent,
+typedef gboolean    (*GstPadQueryFunction)    (GstPad *pad, GstObject *parent,
                                                                  GstQuery *query);
 
 
 /* linking */
 /**
@@ -441,21 +441,24 @@
  *
  * Function signature to handle a new link on the pad.
  *
  * Returns: the result of the link with the specified peer.
  */
-typedef GstPadLinkReturn    (*GstPadLinkFunction)       (GstPad *pad, GstObject *parent, GstPad *peer);
+typedef GstPadLinkReturn  (*GstPadLinkFunction)   (GstPad *pad, GstObject *parent, GstPad *peer);
 /**
  * GstPadUnlinkFunction:
  * @pad: the #GstPad that is linked.
  * @parent: (allow-none): the parent of @pad. If the #GST_PAD_FLAG_NEED_PARENT
  *          flag is set, @parent is guaranteed to be not-%NULL and remain valid
  *          during the execution of this function.
  *
  * Function signature to handle a unlinking the pad prom its peer.
+ *
+ * The pad's lock is already held when the unlink function is called, so most
+ * pad functions cannot be called from within the callback.
  */
-typedef void            (*GstPadUnlinkFunction)     (GstPad *pad, GstObject *parent);
+typedef void      (*GstPadUnlinkFunction)   (GstPad *pad, GstObject *parent);
 
 
 /* misc */
 /**
  * GstPadForwardFunction:
@@ -465,11 +468,11 @@
  * A forward function is called for all internally linked pads, see
  * gst_pad_forward().
  *
  * Returns: %TRUE if the dispatching procedure has to be stopped.
  */
-typedef gboolean        (*GstPadForwardFunction)    (GstPad *pad, gpointer user_data);
+typedef gboolean    (*GstPadForwardFunction)  (GstPad *pad, gpointer user_data);
 
 /**
  * GstPadProbeType:
  * @GST_PAD_PROBE_TYPE_INVALID: invalid probe type
  * @GST_PAD_PROBE_TYPE_IDLE: probe idle pads and block while the callback is called
@@ -590,11 +593,11 @@
   guint64 offset;
   guint size;
 
   /*< private >*/
   union {
-  gpointer _gst_reserved[GST_PADDING];
+    gpointer _gst_reserved[GST_PADDING];
     struct {
       GstFlowReturn flow_ret;
     } abi;
   } ABI;
 };
@@ -690,11 +693,11 @@
  *                      of checking for a subset. This is interesting for
  *                      parsers that can accept incompletely specified caps.
  * @GST_PAD_FLAG_ACCEPT_TEMPLATE: the default accept-caps handler will use
  *                      the template pad caps instead of query caps to
  *                      compare with the accept caps. Use this in combination
- *                      with %GST_PAD_FLAG_ACCEPT_INTERSECT. (Since 1.6)
+ *                      with %GST_PAD_FLAG_ACCEPT_INTERSECT. (Since: 1.6)
  * @GST_PAD_FLAG_LAST: offset to define more flags
  *
  * Pad state flags
  */
 typedef enum {
@@ -734,64 +737,64 @@
 
   GstPadDirection                direction;
 
   /*< private >*/
   /* streaming rec_lock */
-  GRecMutex              stream_rec_lock;
-  GstTask           *task;
+  GRecMutex            stream_rec_lock;
+  GstTask     *task;
 
   /* block cond, mutex is from the object */
-  GCond              block_cond;
+  GCond        block_cond;
   GHookList                      probes;
 
-  GstPadMode                 mode;
-  GstPadActivateFunction     activatefunc;
+  GstPadMode             mode;
+  GstPadActivateFunction   activatefunc;
   gpointer                       activatedata;
   GDestroyNotify                 activatenotify;
-  GstPadActivateModeFunction     activatemodefunc;
+  GstPadActivateModeFunction   activatemodefunc;
   gpointer                       activatemodedata;
   GDestroyNotify                 activatemodenotify;
 
   /* pad link */
-  GstPad            *peer;
-  GstPadLinkFunction         linkfunc;
+  GstPad      *peer;
+  GstPadLinkFunction     linkfunc;
   gpointer                       linkdata;
   GDestroyNotify                 linknotify;
-  GstPadUnlinkFunction       unlinkfunc;
+  GstPadUnlinkFunction     unlinkfunc;
   gpointer                       unlinkdata;
   GDestroyNotify                 unlinknotify;
 
   /* data transport functions */
-  GstPadChainFunction        chainfunc;
+  GstPadChainFunction    chainfunc;
   gpointer                       chaindata;
   GDestroyNotify                 chainnotify;
   GstPadChainListFunction        chainlistfunc;
   gpointer                       chainlistdata;
   GDestroyNotify                 chainlistnotify;
-  GstPadGetRangeFunction     getrangefunc;
+  GstPadGetRangeFunction   getrangefunc;
   gpointer                       getrangedata;
   GDestroyNotify                 getrangenotify;
-  GstPadEventFunction        eventfunc;
+  GstPadEventFunction    eventfunc;
   gpointer                       eventdata;
   GDestroyNotify                 eventnotify;
 
   /* pad offset */
   gint64                         offset;
 
   /* generic query method */
-  GstPadQueryFunction        queryfunc;
+  GstPadQueryFunction    queryfunc;
   gpointer                       querydata;
   GDestroyNotify                 querynotify;
 
   /* internal links */
   GstPadIterIntLinkFunction      iterintlinkfunc;
   gpointer                       iterintlinkdata;
   GDestroyNotify                 iterintlinknotify;
 
   /* counts number of probes attached. */
-  gint               num_probes;
-  gint               num_blocked;
+  gint         num_probes;
+  gint         num_blocked;
 
   GstPadPrivate                 *priv;
 
   union {
     gpointer _gst_reserved[GST_PADDING];
@@ -801,15 +804,15 @@
     } abi;
   } ABI;
 };
 
 struct _GstPadClass {
-  GstObjectClass    parent_class;
+  GstObjectClass  parent_class;
 
   /* signal callbacks */
-  void      (*linked)       (GstPad *pad, GstPad *peer);
-  void      (*unlinked)     (GstPad *pad, GstPad *peer);
+  void    (*linked)   (GstPad *pad, GstPad *peer);
+  void    (*unlinked)   (GstPad *pad, GstPad *peer);
 
   /*< private >*/
   gpointer _gst_reserved[GST_PADDING];
 };
 
@@ -822,19 +825,19 @@
  * @pad: a #GstPad
  *
  * Get name of the given pad.
  * No locking is performed in this function, use gst_pad_get_name() instead.
  */
-#define GST_PAD_NAME(pad)       (GST_OBJECT_NAME(pad))
+#define GST_PAD_NAME(pad)   (GST_OBJECT_NAME(pad))
 /**
  * GST_PAD_PARENT:
  * @pad: a #GstPad
  *
  * Get the @pad parent.
  * No locking is performed in this function, use gst_pad_get_parent() instead.
  */
-#define GST_PAD_PARENT(pad)     (GST_ELEMENT_CAST(GST_OBJECT_PARENT(pad)))
+#define GST_PAD_PARENT(pad)   (GST_ELEMENT_CAST(GST_OBJECT_PARENT(pad)))
 /**
  * GST_PAD_ELEMENT_PRIVATE:
  * @pad: a #GstPad
  *
  * Get the private data of @pad, which is usually some pad- or stream-specific
@@ -847,58 +850,58 @@
  * @pad: a #GstPad
  *
  * Get the @pad #GstPadTemplate. It describes the possible media types
  * a @pad or an element factory can handle.
  */
-#define GST_PAD_PAD_TEMPLATE(pad)   (GST_PAD_CAST(pad)->padtemplate)
+#define GST_PAD_PAD_TEMPLATE(pad) (GST_PAD_CAST(pad)->padtemplate)
 /**
  * GST_PAD_DIRECTION:
  * @pad: a #GstPad
  *
  * Get the #GstPadDirection of the given @pad. Accessor macro, use
  * gst_pad_get_direction() instead.
  */
-#define GST_PAD_DIRECTION(pad)      (GST_PAD_CAST(pad)->direction)
+#define GST_PAD_DIRECTION(pad)    (GST_PAD_CAST(pad)->direction)
 /**
  * GST_PAD_TASK:
  * @pad: a #GstPad
  *
  * Get the #GstTask of @pad. Accessor macro used by GStreamer. Use the
  * gst_pad_start_task(), gst_pad_stop_task() and gst_pad_pause_task()
  * functions instead.
  */
-#define GST_PAD_TASK(pad)       (GST_PAD_CAST(pad)->task)
+#define GST_PAD_TASK(pad)   (GST_PAD_CAST(pad)->task)
 /**
  * GST_PAD_MODE:
  * @pad: a #GstPad
  *
  * Get the #GstPadMode of pad, which will be GST_PAD_MODE_NONE if the pad
  * has not been activated yet, and otherwise either GST_PAD_MODE_PUSH or
  * GST_PAD_MODE_PULL depending on which mode the pad was activated in.
  */
-#define GST_PAD_MODE(pad)           (GST_PAD_CAST(pad)->mode)
+#define GST_PAD_MODE(pad)         (GST_PAD_CAST(pad)->mode)
 /**
  * GST_PAD_ACTIVATEFUNC:
  * @pad: a #GstPad
  *
  * Get the #GstPadActivateFunction from @pad.
  */
-#define GST_PAD_ACTIVATEFUNC(pad)   (GST_PAD_CAST(pad)->activatefunc)
+#define GST_PAD_ACTIVATEFUNC(pad) (GST_PAD_CAST(pad)->activatefunc)
 /**
  * GST_PAD_ACTIVATEMODEFUNC:
  * @pad: a #GstPad
  *
  * Get the #GstPadActivateModeFunction from the given @pad.
  */
-#define GST_PAD_ACTIVATEMODEFUNC(pad)   (GST_PAD_CAST(pad)->activatemodefunc)
+#define GST_PAD_ACTIVATEMODEFUNC(pad) (GST_PAD_CAST(pad)->activatemodefunc)
 /**
  * GST_PAD_CHAINFUNC:
  * @pad: a #GstPad
  *
  * Get the #GstPadChainFunction from the given @pad.
  */
-#define GST_PAD_CHAINFUNC(pad)      (GST_PAD_CAST(pad)->chainfunc)
+#define GST_PAD_CHAINFUNC(pad)    (GST_PAD_CAST(pad)->chainfunc)
 /**
  * GST_PAD_CHAINLISTFUNC:
  * @pad: a #GstPad
  *
  * Get the #GstPadChainListFunction from the given @pad.
@@ -908,22 +911,22 @@
  * GST_PAD_GETRANGEFUNC:
  * @pad: a #GstPad
  *
  * Get the #GstPadGetRangeFunction from the given @pad.
  */
-#define GST_PAD_GETRANGEFUNC(pad)   (GST_PAD_CAST(pad)->getrangefunc)
+#define GST_PAD_GETRANGEFUNC(pad) (GST_PAD_CAST(pad)->getrangefunc)
 /**
  * GST_PAD_EVENTFUNC:
  * @pad: a #GstPad
  *
  * Get the #GstPadEventFunction from the given @pad, which
  * is the function that handles events on the pad. You can
  * use this to set your own event handling function on a pad
  * after you create it.  If your element derives from a base
  * class, use the base class's virtual functions instead.
  */
-#define GST_PAD_EVENTFUNC(pad)      (GST_PAD_CAST(pad)->eventfunc)
+#define GST_PAD_EVENTFUNC(pad)    (GST_PAD_CAST(pad)->eventfunc)
 /**
  * GST_PAD_EVENTFULLFUNC:
  * @pad: a #GstPad
  *
  * Get the #GstPadEventFullFunction from the given @pad, which
@@ -943,11 +946,11 @@
  * that handles queries on the pad. You can  use this to set your
  * own query handling function on a pad after you create it. If your
  * element derives from a base class, use the base class's virtual
  * functions instead.
  */
-#define GST_PAD_QUERYFUNC(pad)      (GST_PAD_CAST(pad)->queryfunc)
+#define GST_PAD_QUERYFUNC(pad)    (GST_PAD_CAST(pad)->queryfunc)
 /**
  * GST_PAD_ITERINTLINKFUNC:
  * @pad: a #GstPad
  *
  * Get the #GstPadIterIntLinkFunction from the given @pad.
@@ -958,47 +961,47 @@
  * @pad: a #GstPad
  *
  * Return the pad's peer member. This member is a pointer to the linked @pad.
  * No locking is performed in this function, use gst_pad_get_peer() instead.
  */
-#define GST_PAD_PEER(pad)       (GST_PAD_CAST(pad)->peer)
+#define GST_PAD_PEER(pad)   (GST_PAD_CAST(pad)->peer)
 /**
  * GST_PAD_LINKFUNC:
  * @pad: a #GstPad
  *
  * Get the #GstPadLinkFunction for the given @pad.
  */
-#define GST_PAD_LINKFUNC(pad)       (GST_PAD_CAST(pad)->linkfunc)
+#define GST_PAD_LINKFUNC(pad)   (GST_PAD_CAST(pad)->linkfunc)
 /**
  * GST_PAD_UNLINKFUNC:
  * @pad: a #GstPad
  *
  * Get the #GstPadUnlinkFunction from the given @pad.
  */
-#define GST_PAD_UNLINKFUNC(pad)     (GST_PAD_CAST(pad)->unlinkfunc)
+#define GST_PAD_UNLINKFUNC(pad)   (GST_PAD_CAST(pad)->unlinkfunc)
 /**
  * GST_PAD_IS_SRC:
  * @pad: a #GstPad
  *
  * Returns: %TRUE if the pad is a source pad (i.e. produces data).
  */
-#define GST_PAD_IS_SRC(pad)     (GST_PAD_DIRECTION(pad) == GST_PAD_SRC)
+#define GST_PAD_IS_SRC(pad)   (GST_PAD_DIRECTION(pad) == GST_PAD_SRC)
 /**
  * GST_PAD_IS_SINK:
  * @pad: a #GstPad
  *
  * Returns: %TRUE if the pad is a sink pad (i.e. consumes data).
  */
-#define GST_PAD_IS_SINK(pad)        (GST_PAD_DIRECTION(pad) == GST_PAD_SINK)
+#define GST_PAD_IS_SINK(pad)    (GST_PAD_DIRECTION(pad) == GST_PAD_SINK)
 /**
  * GST_PAD_IS_LINKED:
  * @pad: a #GstPad
  *
  * Returns: %TRUE if the pad is linked to another pad. Use gst_pad_is_linked()
  * instead.
  */
-#define GST_PAD_IS_LINKED(pad)      (GST_PAD_PEER(pad) != NULL)
+#define GST_PAD_IS_LINKED(pad)    (GST_PAD_PEER(pad) != NULL)
 /**
  * GST_PAD_IS_ACTIVE:
  * @pad: a #GstPad
  *
  * Returns: %TRUE if the pad has been activated.
@@ -1008,26 +1011,26 @@
  * GST_PAD_IS_BLOCKED:
  * @pad: a #GstPad
  *
  * Check if the dataflow on a @pad is blocked. Use gst_pad_is_blocked() instead.
  */
-#define GST_PAD_IS_BLOCKED(pad)     (GST_OBJECT_FLAG_IS_SET (pad, GST_PAD_FLAG_BLOCKED))
+#define GST_PAD_IS_BLOCKED(pad)   (GST_OBJECT_FLAG_IS_SET (pad, GST_PAD_FLAG_BLOCKED))
 /**
  * GST_PAD_IS_BLOCKING:
  * @pad: a #GstPad
  *
  * Check if the @pad is currently blocking on a buffer or event. Use
  * gst_pad_is_blocking() instead.
  */
-#define GST_PAD_IS_BLOCKING(pad)    (GST_OBJECT_FLAG_IS_SET (pad, GST_PAD_FLAG_BLOCKING))
+#define GST_PAD_IS_BLOCKING(pad)  (GST_OBJECT_FLAG_IS_SET (pad, GST_PAD_FLAG_BLOCKING))
 /**
  * GST_PAD_IS_FLUSHING:
  * @pad: a #GstPad
  *
  * Check if the given @pad is flushing.
  */
-#define GST_PAD_IS_FLUSHING(pad)    (GST_OBJECT_FLAG_IS_SET (pad, GST_PAD_FLAG_FLUSHING))
+#define GST_PAD_IS_FLUSHING(pad)  (GST_OBJECT_FLAG_IS_SET (pad, GST_PAD_FLAG_FLUSHING))
 /**
  * GST_PAD_SET_FLUSHING:
  * @pad: a #GstPad
  *
  * Set the given @pad to flushing state, which means it will not accept any
@@ -1035,11 +1038,11 @@
  * are pushed on it. This usually happens when the pad is shut down or when
  * a flushing seek happens. This is used inside GStreamer when flush start/stop
  * events pass through pads, or when an element state is changed and pads are
  * activated or deactivated.
  */
-#define GST_PAD_SET_FLUSHING(pad)   (GST_OBJECT_FLAG_SET (pad, GST_PAD_FLAG_FLUSHING))
+#define GST_PAD_SET_FLUSHING(pad) (GST_OBJECT_FLAG_SET (pad, GST_PAD_FLAG_FLUSHING))
 /**
  * GST_PAD_UNSET_FLUSHING:
  * @pad: a #GstPad
  *
  * Unset the flushing flag.
@@ -1272,22 +1275,22 @@
 #define GST_PAD_BLOCK_WAIT(pad)         (g_cond_wait(GST_PAD_BLOCK_GET_COND (pad), GST_OBJECT_GET_LOCK (pad)))
 #define GST_PAD_BLOCK_SIGNAL(pad)       (g_cond_signal(GST_PAD_BLOCK_GET_COND (pad)))
 #define GST_PAD_BLOCK_BROADCAST(pad)    (g_cond_broadcast(GST_PAD_BLOCK_GET_COND (pad)))
 
 GST_API
-GType           gst_pad_get_type            (void);
+GType     gst_pad_get_type      (void);
 
 /* creating pads */
 
 GST_API
-GstPad*         gst_pad_new             (const gchar *name, GstPadDirection direction);
+GstPad*     gst_pad_new       (const gchar *name, GstPadDirection direction);
 
 GST_API
-GstPad*         gst_pad_new_from_template       (GstPadTemplate *templ, const gchar *name);
+GstPad*     gst_pad_new_from_template   (GstPadTemplate *templ, const gchar *name);
 
 GST_API
-GstPad*         gst_pad_new_from_static_template    (GstStaticPadTemplate *templ, const gchar *name);
+GstPad*     gst_pad_new_from_static_template  (GstStaticPadTemplate *templ, const gchar *name);
 
 
 /**
  * gst_pad_get_name:
  * @pad: the pad to get the name from
@@ -1310,53 +1313,53 @@
  * Returns: (nullable): the parent
  */
 #define gst_pad_get_parent(pad) gst_object_get_parent (GST_OBJECT_CAST (pad))
 
 GST_API
-GstPadDirection     gst_pad_get_direction           (GstPad *pad);
+GstPadDirection   gst_pad_get_direction     (GstPad *pad);
 
 GST_API
-gboolean        gst_pad_set_active          (GstPad *pad, gboolean active);
+gboolean    gst_pad_set_active      (GstPad *pad, gboolean active);
 
 GST_API
-gboolean        gst_pad_is_active           (GstPad *pad);
+gboolean    gst_pad_is_active     (GstPad *pad);
 
 GST_API
-gboolean        gst_pad_activate_mode           (GstPad *pad, GstPadMode mode,
+gboolean    gst_pad_activate_mode     (GstPad *pad, GstPadMode mode,
                                                                  gboolean active);
 GST_API
 gulong                  gst_pad_add_probe                       (GstPad *pad,
-                                 GstPadProbeType mask,
-                                 GstPadProbeCallback callback,
+                 GstPadProbeType mask,
+                 GstPadProbeCallback callback,
                                                                  gpointer user_data,
                                                                  GDestroyNotify destroy_data);
 GST_API
 void                    gst_pad_remove_probe                    (GstPad *pad, gulong id);
 
 GST_API
-gboolean        gst_pad_is_blocked          (GstPad *pad);
+gboolean    gst_pad_is_blocked      (GstPad *pad);
 
 GST_API
-gboolean        gst_pad_is_blocking         (GstPad *pad);
+gboolean    gst_pad_is_blocking     (GstPad *pad);
 
 GST_API
 void                    gst_pad_mark_reconfigure                (GstPad *pad);
 
 GST_API
-gboolean        gst_pad_needs_reconfigure               (GstPad *pad);
+gboolean    gst_pad_needs_reconfigure               (GstPad *pad);
 
 GST_API
-gboolean        gst_pad_check_reconfigure               (GstPad *pad);
+gboolean    gst_pad_check_reconfigure               (GstPad *pad);
 
 GST_API
-void            gst_pad_set_element_private     (GstPad *pad, gpointer priv);
+void      gst_pad_set_element_private   (GstPad *pad, gpointer priv);
 
 GST_API
-gpointer        gst_pad_get_element_private     (GstPad *pad);
+gpointer    gst_pad_get_element_private   (GstPad *pad);
 
 GST_API
-GstPadTemplate*     gst_pad_get_pad_template        (GstPad *pad);
+GstPadTemplate*   gst_pad_get_pad_template    (GstPad *pad);
 
 GST_API
 GstFlowReturn           gst_pad_store_sticky_event              (GstPad *pad, GstEvent *event);
 
 GST_API
@@ -1367,43 +1370,43 @@
 void                    gst_pad_sticky_events_foreach           (GstPad *pad, GstPadStickyEventsForeachFunction foreach_func, gpointer user_data);
 
 /* data passing setup functions */
 
 GST_API
-void            gst_pad_set_activate_function_full  (GstPad *pad,
+void      gst_pad_set_activate_function_full  (GstPad *pad,
                                                                  GstPadActivateFunction activate,
                                                                  gpointer user_data,
                                                                  GDestroyNotify notify);
 GST_API
-void            gst_pad_set_activatemode_function_full  (GstPad *pad,
+void      gst_pad_set_activatemode_function_full  (GstPad *pad,
                                                                  GstPadActivateModeFunction activatemode,
                                                                  gpointer user_data,
                                                                  GDestroyNotify notify);
 /* data passing functions */
 
 GST_API
-void            gst_pad_set_chain_function_full     (GstPad *pad,
+void      gst_pad_set_chain_function_full   (GstPad *pad,
                                                                  GstPadChainFunction chain,
                                                                  gpointer user_data,
                                                                  GDestroyNotify notify);
 GST_API
-void            gst_pad_set_chain_list_function_full    (GstPad *pad,
+void      gst_pad_set_chain_list_function_full  (GstPad *pad,
                                                                  GstPadChainListFunction chainlist,
                                                                  gpointer user_data,
                                                                  GDestroyNotify notify);
 GST_API
-void            gst_pad_set_getrange_function_full  (GstPad *pad,
+void      gst_pad_set_getrange_function_full  (GstPad *pad,
                                                                  GstPadGetRangeFunction get,
                                                                  gpointer user_data,
                                                                  GDestroyNotify notify);
 GST_API
-void            gst_pad_set_event_function_full     (GstPad *pad,
+void      gst_pad_set_event_function_full   (GstPad *pad,
                                                                  GstPadEventFunction event,
                                                                  gpointer user_data,
                                                                  GDestroyNotify notify);
 GST_API
-void            gst_pad_set_event_full_function_full    (GstPad *pad,
+void      gst_pad_set_event_full_function_full  (GstPad *pad,
                                                                  GstPadEventFullFunction event,
                                                                  gpointer user_data,
                                                                  GDestroyNotify notify);
 
 #define gst_pad_set_activate_function(p,f)      gst_pad_set_activate_function_full((p),(f),NULL,NULL)
@@ -1415,16 +1418,16 @@
 #define gst_pad_set_event_full_function(p,f)    gst_pad_set_event_full_function_full((p),(f),NULL,NULL)
 
 /* pad links */
 
 GST_API
-void            gst_pad_set_link_function_full      (GstPad *pad,
+void      gst_pad_set_link_function_full    (GstPad *pad,
                                                                  GstPadLinkFunction link,
                                                                  gpointer user_data,
                                                                  GDestroyNotify notify);
 GST_API
-void            gst_pad_set_unlink_function_full        (GstPad *pad,
+void      gst_pad_set_unlink_function_full        (GstPad *pad,
                                                                  GstPadUnlinkFunction unlink,
                                                                  gpointer user_data,
                                                                  GDestroyNotify notify);
 
 #define gst_pad_set_link_function(p,f)          gst_pad_set_link_function_full((p),(f),NULL,NULL)
@@ -1432,39 +1435,39 @@
 
 GST_API
 gboolean                gst_pad_can_link                        (GstPad *srcpad, GstPad *sinkpad);
 
 GST_API
-GstPadLinkReturn        gst_pad_link                (GstPad *srcpad, GstPad *sinkpad);
+GstPadLinkReturn        gst_pad_link        (GstPad *srcpad, GstPad *sinkpad);
 
 GST_API
-GstPadLinkReturn        gst_pad_link_full           (GstPad *srcpad, GstPad *sinkpad, GstPadLinkCheck flags);
+GstPadLinkReturn        gst_pad_link_full     (GstPad *srcpad, GstPad *sinkpad, GstPadLinkCheck flags);
 
 GST_API
-gboolean        gst_pad_unlink              (GstPad *srcpad, GstPad *sinkpad);
+gboolean    gst_pad_unlink        (GstPad *srcpad, GstPad *sinkpad);
 
 GST_API
-gboolean        gst_pad_is_linked           (GstPad *pad);
+gboolean    gst_pad_is_linked     (GstPad *pad);
 
 GST_API
-GstPad*         gst_pad_get_peer            (GstPad *pad);
+GstPad*     gst_pad_get_peer      (GstPad *pad);
 
 GST_API
-GstCaps*                gst_pad_get_pad_template_caps       (GstPad *pad);
+GstCaps*                gst_pad_get_pad_template_caps   (GstPad *pad);
 
 /* capsnego function for linked/unlinked pads */
 
 GST_API
-GstCaps *       gst_pad_get_current_caps                (GstPad * pad);
+GstCaps *   gst_pad_get_current_caps                (GstPad * pad);
 
 GST_API
-gboolean        gst_pad_has_current_caps                (GstPad * pad);
+gboolean    gst_pad_has_current_caps                (GstPad * pad);
 
 /* capsnego for linked pads */
 
 GST_API
-GstCaps *       gst_pad_get_allowed_caps        (GstPad * pad);
+GstCaps *   gst_pad_get_allowed_caps    (GstPad * pad);
 
 /* pad offsets */
 
 GST_API
 gint64                  gst_pad_get_offset                      (GstPad *pad);
@@ -1473,54 +1476,54 @@
 void                    gst_pad_set_offset                      (GstPad *pad, gint64 offset);
 
 /* data passing functions to peer */
 
 GST_API
-GstFlowReturn       gst_pad_push                (GstPad *pad, GstBuffer *buffer);
+GstFlowReturn   gst_pad_push        (GstPad *pad, GstBuffer *buffer);
 
 GST_API
-GstFlowReturn       gst_pad_push_list           (GstPad *pad, GstBufferList *list);
+GstFlowReturn   gst_pad_push_list     (GstPad *pad, GstBufferList *list);
 
 GST_API
-GstFlowReturn       gst_pad_pull_range          (GstPad *pad, guint64 offset, guint size,
-                                 GstBuffer **buffer);
+GstFlowReturn   gst_pad_pull_range      (GstPad *pad, guint64 offset, guint size,
+                 GstBuffer **buffer);
 GST_API
-gboolean        gst_pad_push_event          (GstPad *pad, GstEvent *event);
+gboolean    gst_pad_push_event      (GstPad *pad, GstEvent *event);
 
 GST_API
-gboolean        gst_pad_event_default           (GstPad *pad, GstObject *parent,
+gboolean    gst_pad_event_default     (GstPad *pad, GstObject *parent,
                                                                  GstEvent *event);
 GST_API
 GstFlowReturn           gst_pad_get_last_flow_return            (GstPad *pad);
 
 /* data passing functions on pad */
 
 GST_API
-GstFlowReturn       gst_pad_chain               (GstPad *pad, GstBuffer *buffer);
+GstFlowReturn   gst_pad_chain       (GstPad *pad, GstBuffer *buffer);
 
 GST_API
-GstFlowReturn       gst_pad_chain_list                      (GstPad *pad, GstBufferList *list);
+GstFlowReturn   gst_pad_chain_list                      (GstPad *pad, GstBufferList *list);
 
 GST_API
-GstFlowReturn       gst_pad_get_range           (GstPad *pad, guint64 offset, guint size,
-                                 GstBuffer **buffer);
+GstFlowReturn   gst_pad_get_range     (GstPad *pad, guint64 offset, guint size,
+                 GstBuffer **buffer);
 GST_API
-gboolean        gst_pad_send_event          (GstPad *pad, GstEvent *event);
+gboolean    gst_pad_send_event      (GstPad *pad, GstEvent *event);
 
 /* pad tasks */
 
 GST_API
-gboolean        gst_pad_start_task          (GstPad *pad, GstTaskFunction func,
-                                 gpointer user_data, GDestroyNotify notify);
+gboolean    gst_pad_start_task      (GstPad *pad, GstTaskFunction func,
+                 gpointer user_data, GDestroyNotify notify);
 GST_API
-gboolean        gst_pad_pause_task          (GstPad *pad);
+gboolean    gst_pad_pause_task      (GstPad *pad);
 
 GST_API
-gboolean        gst_pad_stop_task           (GstPad *pad);
+gboolean    gst_pad_stop_task     (GstPad *pad);
 
 GST_API
-GstTaskState    gst_pad_get_task_state      (GstPad *pad);
+GstTaskState  gst_pad_get_task_state    (GstPad *pad);
 
 /* internal links */
 
 GST_API
 void                    gst_pad_set_iterate_internal_links_function_full (GstPad * pad,
@@ -1537,30 +1540,30 @@
 #define gst_pad_set_iterate_internal_links_function(p,f) gst_pad_set_iterate_internal_links_function_full((p),(f),NULL,NULL)
 
 /* generic query function */
 
 GST_API
-gboolean        gst_pad_query               (GstPad *pad, GstQuery *query);
+gboolean    gst_pad_query       (GstPad *pad, GstQuery *query);
 
 GST_API
-gboolean        gst_pad_peer_query          (GstPad *pad, GstQuery *query);
+gboolean    gst_pad_peer_query      (GstPad *pad, GstQuery *query);
 
 GST_API
-void            gst_pad_set_query_function_full     (GstPad *pad, GstPadQueryFunction query,
+void      gst_pad_set_query_function_full   (GstPad *pad, GstPadQueryFunction query,
                                                                  gpointer user_data,
                                                                  GDestroyNotify notify);
 GST_API
-gboolean        gst_pad_query_default           (GstPad *pad, GstObject *parent,
+gboolean    gst_pad_query_default     (GstPad *pad, GstObject *parent,
                                                                  GstQuery *query);
 
 #define gst_pad_set_query_function(p,f)   gst_pad_set_query_function_full((p),(f),NULL,NULL)
 
 /* misc helper functions */
 
 GST_API
-gboolean        gst_pad_forward                         (GstPad *pad, GstPadForwardFunction forward,
-                                 gpointer user_data);
+gboolean    gst_pad_forward                         (GstPad *pad, GstPadForwardFunction forward,
+                 gpointer user_data);
 
 #ifdef G_DEFINE_AUTOPTR_CLEANUP_FUNC
 G_DEFINE_AUTOPTR_CLEANUP_FUNC(GstPad, gst_object_unref)
 #endif
 
