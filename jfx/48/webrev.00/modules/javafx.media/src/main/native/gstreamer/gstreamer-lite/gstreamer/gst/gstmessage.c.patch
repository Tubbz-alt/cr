diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstmessage.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstmessage.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstmessage.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gstmessage.c
@@ -105,10 +105,11 @@
   {GST_MESSAGE_STREAM_START, "stream-start", 0},
   {GST_MESSAGE_NEED_CONTEXT, "need-context", 0},
   {GST_MESSAGE_HAVE_CONTEXT, "have-context", 0},
   {GST_MESSAGE_DEVICE_ADDED, "device-added", 0},
   {GST_MESSAGE_DEVICE_REMOVED, "device-removed", 0},
+  {GST_MESSAGE_DEVICE_CHANGED, "device-changed", 0},
   {GST_MESSAGE_PROPERTY_NOTIFY, "property-notify", 0},
   {GST_MESSAGE_STREAM_COLLECTION, "stream-collection", 0},
   {GST_MESSAGE_STREAMS_SELECTED, "streams-selected", 0},
   {GST_MESSAGE_REDIRECT, "redirect", 0},
   {0, NULL, 0}
@@ -215,10 +216,13 @@
   structure = GST_MESSAGE_STRUCTURE (message);
   if (structure) {
     gst_structure_set_parent_refcount (structure, NULL);
     gst_structure_free (structure);
   }
+#ifdef USE_POISONING
+  memset (message, 0xff, sizeof (GstMessageImpl));
+#endif
 
   g_slice_free1 (sizeof (GstMessageImpl), message);
 }
 
 static void
@@ -365,10 +369,11 @@
  */
 void
 gst_message_set_seqnum (GstMessage * message, guint32 seqnum)
 {
   g_return_if_fail (GST_IS_MESSAGE (message));
+  g_return_if_fail (seqnum != GST_SEQNUM_INVALID);
 
   GST_MESSAGE_SEQNUM (message) = seqnum;
 }
 
 /**
@@ -396,11 +401,11 @@
 /**
  * gst_message_new_error_with_details:
  * @src: (transfer none) (allow-none): The object originating the message.
  * @error: (transfer none): The GError for this message.
  * @debug: A debugging string.
- * @details: (transfer full): (allow-none): A GstStructure with details
+ * @details: (transfer full) (allow-none): A GstStructure with details
  *
  * Create a new error message. The message will copy @error and
  * @debug. This message is posted by element when a fatal event
  * occurred. The pipeline will probably (partially) stop. The application
  * receiving this message should stop the pipeline.
@@ -490,11 +495,11 @@
 /**
  * gst_message_new_warning_with_details:
  * @src: (transfer none) (allow-none): The object originating the message.
  * @error: (transfer none): The GError for this message.
  * @debug: A debugging string.
- * @details: (transfer full): (allow-none): A GstStructure with details
+ * @details: (transfer full) (allow-none): A GstStructure with details
  *
  * Create a new warning message. The message will make copies of @error and
  * @debug.
  *
  * Returns: (transfer full) (nullable): the new warning message.
@@ -580,11 +585,11 @@
 /**
  * gst_message_new_info_with_details:
  * @src: (transfer none) (allow-none): The object originating the message.
  * @error: (transfer none): The GError for this message.
  * @debug: A debugging string.
- * @details: (transfer full): (allow-none): A GstStructure with details
+ * @details: (transfer full) (allow-none): A GstStructure with details
  *
  * Create a new info message. The message will make copies of @error and
  * @debug.
  *
  * Returns: (transfer full) (nullable): the new warning message.
@@ -2684,10 +2689,73 @@
 
   if (device)
     gst_structure_id_get (GST_MESSAGE_STRUCTURE (message),
         GST_QUARK (DEVICE), GST_TYPE_DEVICE, device, NULL);
 }
+
+/**
+ * gst_message_new_device_changed:
+ * @src: The #GstObject that created the message
+ * @device: (transfer none): The newly created device representing @replaced_device
+ *         with its new configuration.
+ *
+ * Creates a new device-changed message. The device-changed message is produced
+ * by #GstDeviceProvider or a #GstDeviceMonitor. They announce that a device
+ * properties has changed and @device represent the new modified version of @changed_device.
+ *
+ * Returns: a newly allocated #GstMessage
+ *
+ * Since: 1.16
+ */
+GstMessage *
+gst_message_new_device_changed (GstObject * src, GstDevice * device,
+    GstDevice * changed_device)
+{
+  GstMessage *message;
+  GstStructure *structure;
+
+  g_return_val_if_fail (device != NULL, NULL);
+  g_return_val_if_fail (GST_IS_DEVICE (device), NULL);
+
+  structure = gst_structure_new_id (GST_QUARK (MESSAGE_DEVICE_CHANGED),
+      GST_QUARK (DEVICE), GST_TYPE_DEVICE, device,
+      GST_QUARK (DEVICE_CHANGED), GST_TYPE_DEVICE, changed_device, NULL);
+  message = gst_message_new_custom (GST_MESSAGE_DEVICE_CHANGED, src, structure);
+
+  return message;
+}
+
+/**
+ * gst_message_parse_device_changed:
+ * @message: a #GstMessage of type %GST_MESSAGE_DEVICE_CHANGED
+ * @device: (out) (allow-none) (transfer full): A location where to store a
+ *  pointer to the updated version of the #GstDevice, or %NULL
+ * @changed_device: (out) (allow-none) (transfer full): A location where to store a
+ *  pointer to the old version of the #GstDevice, or %NULL
+ *
+ * Parses a device-changed message. The device-changed message is produced by
+ * #GstDeviceProvider or a #GstDeviceMonitor. It announces the
+ * disappearance of monitored devices. * It announce that a device properties has
+ * changed and @device represents the new modified version of @changed_device.
+ *
+ * Since: 1.16
+ */
+void
+gst_message_parse_device_changed (GstMessage * message, GstDevice ** device,
+    GstDevice ** changed_device)
+{
+  g_return_if_fail (GST_IS_MESSAGE (message));
+  g_return_if_fail (GST_MESSAGE_TYPE (message) == GST_MESSAGE_DEVICE_CHANGED);
+
+  if (device)
+    gst_structure_id_get (GST_MESSAGE_STRUCTURE (message),
+        GST_QUARK (DEVICE), GST_TYPE_DEVICE, device, NULL);
+
+  if (changed_device)
+    gst_structure_id_get (GST_MESSAGE_STRUCTURE (message),
+        GST_QUARK (DEVICE_CHANGED), GST_TYPE_DEVICE, changed_device, NULL);
+}
 #endif // GSTREAMER_LITE
 
 /**
  * gst_message_new_property_notify:
  * @src: The #GstObject whose property changed (may or may not be a #GstElement)
