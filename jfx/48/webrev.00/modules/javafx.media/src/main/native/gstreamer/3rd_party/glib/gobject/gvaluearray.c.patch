diff a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvaluearray.c b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvaluearray.c
--- a/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvaluearray.c
+++ b/modules/javafx.media/src/main/native/gstreamer/3rd_party/glib/gobject/gvaluearray.c
@@ -53,10 +53,13 @@
  *
  * |[<!-- language="C" -->
  *   GArray *array = g_array_sized_new (FALSE, TRUE, sizeof (GValue), 10);
  *   g_array_set_clear_func (array, (GDestroyNotify) g_value_unset);
  * ]|
+ *
+ * Deprecated: 2.32: Use #GArray instead, if possible for the given use case,
+ *    as described above.
  */
 
 #define GROUP_N_VALUES  (8) /* power of 2 !! */
 
 
@@ -72,22 +75,22 @@
  *
  * Deprecated: 2.32: Use g_array_index() instead.
  */
 GValue*
 g_value_array_get_nth (GValueArray *value_array,
-               guint        index)
+           guint        index)
 {
   g_return_val_if_fail (value_array != NULL, NULL);
   g_return_val_if_fail (index < value_array->n_values, NULL);
 
   return value_array->values + index;
 }
 
 static inline void
 value_array_grow (GValueArray *value_array,
-          guint        n_values,
-          gboolean     zero_init)
+      guint        n_values,
+      gboolean     zero_init)
 {
   g_return_if_fail (n_values >= value_array->n_values);
 
   value_array->n_values = n_values;
   if (value_array->n_values > value_array->n_prealloced)
@@ -95,13 +98,13 @@
       guint i = value_array->n_prealloced;
 
       value_array->n_prealloced = (value_array->n_values + GROUP_N_VALUES - 1) & ~(GROUP_N_VALUES - 1);
       value_array->values = g_renew (GValue, value_array->values, value_array->n_prealloced);
       if (!zero_init)
-    i = value_array->n_values;
+  i = value_array->n_values;
       memset (value_array->values + i, 0,
-          (value_array->n_prealloced - i) * sizeof (value_array->values[0]));
+        (value_array->n_prealloced - i) * sizeof (value_array->values[0]));
     }
 }
 
 /**
  * g_value_array_new:
@@ -152,11 +155,11 @@
   for (i = 0; i < value_array->n_values; i++)
     {
       GValue *value = value_array->values + i;
 
       if (G_VALUE_TYPE (value) != 0) /* we allow unset values in the array */
-    g_value_unset (value);
+  g_value_unset (value);
     }
   g_free (value_array->values);
   g_slice_free (GValueArray, value_array);
 }
 
@@ -190,14 +193,14 @@
   new_array->n_prealloced = 0;
   value_array_grow (new_array, value_array->n_values, TRUE);
   for (i = 0; i < new_array->n_values; i++)
     if (G_VALUE_TYPE (value_array->values + i) != 0)
       {
-    GValue *value = new_array->values + i;
+  GValue *value = new_array->values + i;
 
-    g_value_init (value, G_VALUE_TYPE (value_array->values + i));
-    g_value_copy (value_array->values + i, value);
+  g_value_init (value, G_VALUE_TYPE (value_array->values + i));
+  g_value_copy (value_array->values + i, value);
       }
   return new_array;
 }
 
 /**
@@ -213,11 +216,11 @@
  *
  * Deprecated: 2.32: Use #GArray and g_array_prepend_val() instead.
  */
 GValueArray*
 g_value_array_prepend (GValueArray  *value_array,
-               const GValue *value)
+           const GValue *value)
 {
   g_return_val_if_fail (value_array != NULL, NULL);
 
   G_GNUC_BEGIN_IGNORE_DEPRECATIONS
   return g_value_array_insert (value_array, 0, value);
@@ -236,11 +239,11 @@
  *
  * Deprecated: 2.32: Use #GArray and g_array_append_val() instead.
  */
 GValueArray*
 g_value_array_append (GValueArray  *value_array,
-              const GValue *value)
+          const GValue *value)
 {
   g_return_val_if_fail (value_array != NULL, NULL);
 
   G_GNUC_BEGIN_IGNORE_DEPRECATIONS
   return g_value_array_insert (value_array, value_array->n_values, value);
@@ -260,12 +263,12 @@
  *
  * Deprecated: 2.32: Use #GArray and g_array_insert_val() instead.
  */
 GValueArray*
 g_value_array_insert (GValueArray  *value_array,
-              guint         index,
-              const GValue *value)
+          guint         index,
+          const GValue *value)
 {
   guint i;
 
   g_return_val_if_fail (value_array != NULL, NULL);
   g_return_val_if_fail (index <= value_array->n_values, value_array);
@@ -296,11 +299,11 @@
  *
  * Deprecated: 2.32: Use #GArray and g_array_remove_index() instead.
  */
 GValueArray*
 g_value_array_remove (GValueArray *value_array,
-              guint        index)
+          guint        index)
 {
   g_return_val_if_fail (value_array != NULL, NULL);
   g_return_val_if_fail (index < value_array->n_values, value_array);
 
   if (G_VALUE_TYPE (value_array->values + index) != 0)
@@ -330,19 +333,19 @@
  *
  * Deprecated: 2.32: Use #GArray and g_array_sort().
  */
 GValueArray*
 g_value_array_sort (GValueArray *value_array,
-            GCompareFunc compare_func)
+        GCompareFunc compare_func)
 {
   g_return_val_if_fail (compare_func != NULL, NULL);
 
   if (value_array->n_values)
     qsort (value_array->values,
-       value_array->n_values,
-       sizeof (value_array->values[0]),
-       compare_func);
+     value_array->n_values,
+     sizeof (value_array->values[0]),
+     compare_func);
   return value_array;
 }
 
 /**
  * g_value_array_sort_with_data: (rename-to g_value_array_sort)
@@ -360,18 +363,18 @@
  *
  * Deprecated: 2.32: Use #GArray and g_array_sort_with_data().
  */
 GValueArray*
 g_value_array_sort_with_data (GValueArray     *value_array,
-                  GCompareDataFunc compare_func,
-                  gpointer         user_data)
+            GCompareDataFunc compare_func,
+            gpointer         user_data)
 {
   g_return_val_if_fail (value_array != NULL, NULL);
   g_return_val_if_fail (compare_func != NULL, NULL);
 
   if (value_array->n_values)
     g_qsort_with_data (value_array->values,
-               value_array->n_values,
-               sizeof (value_array->values[0]),
-               compare_func, user_data);
+           value_array->n_values,
+           sizeof (value_array->values[0]),
+           compare_func, user_data);
   return value_array;
 }
