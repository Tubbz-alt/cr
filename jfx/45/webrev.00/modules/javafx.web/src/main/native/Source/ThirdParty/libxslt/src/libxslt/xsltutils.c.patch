diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/xsltutils.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/xsltutils.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/xsltutils.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/xsltutils.c
@@ -1576,11 +1576,19 @@
             break;
         }
         xmlOutputBufferWriteString(buf, "?>\n");
     }
     if (result->children != NULL) {
-        xmlNodePtr child = result->children;
+            xmlNodePtr children = result->children;
+        xmlNodePtr child = children;
+
+            /*
+             * Hack to avoid quadratic behavior when scanning
+             * result->children in xmlGetIntSubset called by
+             * xmlNodeDumpOutput.
+             */
+            result->children = NULL;
 
         while (child != NULL) {
         xmlNodeDumpOutput(buf, result, child, 0, (indent == 1),
                       (const char *) encoding);
         if (indent && ((child->type == XML_DTD_NODE) ||
@@ -1589,10 +1597,12 @@
             xmlOutputBufferWriteString(buf, "\n");
         child = child->next;
         }
         if (indent)
             xmlOutputBufferWriteString(buf, "\n");
+
+            result->children = children;
     }
     xmlOutputBufferFlush(buf);
     }
     return(buf->written - base);
 }
@@ -1786,10 +1796,12 @@
 #endif
     (void)xmlOutputBufferClose(buf);
     return 0;
 }
 
+#ifdef WITH_PROFILER
+
 /************************************************************************
  *                                  *
  *      Generating profiling information            *
  *                                  *
  ************************************************************************/
@@ -2263,10 +2275,12 @@
     xmlFree(templates);
 
     return ret;
 }
 
+#endif /* WITH_PROFILER */
+
 /************************************************************************
  *                                  *
  *      Hooks for libxml2 XPath                 *
  *                                  *
  ************************************************************************/
@@ -2286,29 +2300,11 @@
 xsltXPathCompileFlags(xsltStylesheetPtr style, const xmlChar *str, int flags) {
     xmlXPathContextPtr xpathCtxt;
     xmlXPathCompExprPtr ret;
 
     if (style != NULL) {
-#ifdef XSLT_REFACTORED_XPATHCOMP
-    if (XSLT_CCTXT(style)) {
-        /*
-        * Proposed by Jerome Pesenti
-        * --------------------------
-        * For better efficiency we'll reuse the compilation
-        * context's XPath context. For the common stylesheet using
-        * XPath expressions this will reduce compilation time to
-        * about 50%.
-        *
-        * See http://mail.gnome.org/archives/xslt/2006-April/msg00037.html
-        */
-        xpathCtxt = XSLT_CCTXT(style)->xpathCtxt;
-        xpathCtxt->doc = style->doc;
-    } else
-        xpathCtxt = xmlXPathNewContext(style->doc);
-#else
-    xpathCtxt = xmlXPathNewContext(style->doc);
-#endif
+        xpathCtxt = style->principal->xpathCtxt;
     if (xpathCtxt == NULL)
         return NULL;
     xpathCtxt->dict = style->dict;
     } else {
     xpathCtxt = xmlXPathNewContext(NULL);
@@ -2320,17 +2316,13 @@
     /*
     * Compile the expression.
     */
     ret = xmlXPathCtxtCompile(xpathCtxt, str);
 
-#ifdef XSLT_REFACTORED_XPATHCOMP
-    if ((style == NULL) || (! XSLT_CCTXT(style))) {
+    if (style == NULL) {
     xmlXPathFreeContext(xpathCtxt);
     }
-#else
-    xmlXPathFreeContext(xpathCtxt);
-#endif
     /*
      * TODO: there is a lot of optimizations which should be possible
      *       like variable slot precomputations, function precomputations, etc.
      */
 
@@ -2356,10 +2348,27 @@
  *                                  *
  *      Hooks for the debugger                  *
  *                                  *
  ************************************************************************/
 
+int xslDebugStatus;
+
+/**
+ * xsltGetDebuggerStatus:
+ *
+ * Get xslDebugStatus.
+ *
+ * Returns the value of xslDebugStatus.
+ */
+int
+xsltGetDebuggerStatus(void)
+{
+    return(xslDebugStatus);
+}
+
+#ifdef WITH_DEBUGGER
+
 /*
  * There is currently only 3 debugging callback defined
  * Debugger callbacks are disabled by default
  */
 #define XSLT_CALLBACK_NUMBER 3
@@ -2376,12 +2385,10 @@
     NULL, /* handler */
     NULL, /* add */
     NULL  /* drop */
 };
 
-int xslDebugStatus;
-
 /**
  * xsltSetDebuggerStatus:
  * @value : the value to be set
  *
  * This function sets the value of xslDebugStatus.
@@ -2390,23 +2397,10 @@
 xsltSetDebuggerStatus(int value)
 {
     xslDebugStatus = value;
 }
 
-/**
- * xsltGetDebuggerStatus:
- *
- * Get xslDebugStatus.
- *
- * Returns the value of xslDebugStatus.
- */
-int
-xsltGetDebuggerStatus(void)
-{
-    return(xslDebugStatus);
-}
-
 /**
  * xsltSetDebuggerCallbacks:
  * @no : number of callbacks
  * @block : the block of callbacks
  *
@@ -2477,5 +2471,7 @@
 {
     if (xsltDebuggerCurrentCallbacks.drop != NULL)
     xsltDebuggerCurrentCallbacks.drop();
 }
 
+#endif /* WITH_DEBUGGER */
+
