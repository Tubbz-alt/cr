diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/attrvt.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/attrvt.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/attrvt.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/attrvt.c
@@ -46,11 +46,16 @@
     xmlNsPtr *nsList;
     int nsNr;
     /*
      * the content is an alternate of string and xmlXPathCompExprPtr
      */
-    void *segments[MAX_AVT_SEG];
+#if __STDC_VERSION__ >= 199901L
+    /* Using a C99 flexible array member avoids false positives under UBSan */
+    void *segments[];
+#else
+    void *segments[1];
+#endif
 };
 
 /**
  * xsltNewAttrVT:
  * @style:  a XSLT process context
@@ -60,19 +65,20 @@
  * Returns the structure or NULL in case of error
  */
 static xsltAttrVTPtr
 xsltNewAttrVT(xsltStylesheetPtr style) {
     xsltAttrVTPtr cur;
+    size_t size = sizeof(xsltAttrVT) + MAX_AVT_SEG * sizeof(void*);
 
-    cur = (xsltAttrVTPtr) xmlMalloc(sizeof(xsltAttrVT));
+    cur = (xsltAttrVTPtr) xmlMalloc(size);
     if (cur == NULL) {
     xsltTransformError(NULL, style, NULL,
         "xsltNewAttrVTPtr : malloc failed\n");
     if (style != NULL) style->errors++;
     return(NULL);
     }
-    memset(cur, 0, sizeof(xsltAttrVT));
+    memset(cur, 0, size);
 
     cur->nb_seg = 0;
     cur->max_seg = MAX_AVT_SEG;
     cur->strstart = 0;
     cur->next = style->attVTs;
@@ -144,15 +150,18 @@
  * Returns the avt pointer, which may have been changed by a re-alloc
  */
 static xsltAttrVTPtr
 xsltSetAttrVTsegment(xsltAttrVTPtr avt, void *val) {
     if (avt->nb_seg >= avt->max_seg) {
-    avt = (xsltAttrVTPtr) xmlRealloc(avt, sizeof(xsltAttrVT) +
-            avt->max_seg * sizeof(void *));
-    if (avt == NULL) {
+        size_t size = sizeof(xsltAttrVT) +
+                      (avt->max_seg + MAX_AVT_SEG) * sizeof(void *);
+    xsltAttrVTPtr tmp = (xsltAttrVTPtr) xmlRealloc(avt, size);
+    if (tmp == NULL) {
+            xsltFreeAttrVT(avt);
         return NULL;
     }
+        avt = tmp;
     memset(&avt->segments[avt->nb_seg], 0, MAX_AVT_SEG*sizeof(void *));
     avt->max_seg += MAX_AVT_SEG;
     }
     avt->segments[avt->nb_seg++] = val;
     return avt;
@@ -162,11 +171,11 @@
  * xsltCompileAttr:
  * @style:  a XSLT process context
  * @attr: the attribute coming from the stylesheet.
  *
  * Precompile an attribute in a stylesheet, basically it checks if it is
- * an attrubute value template, and if yes establish some structures needed
+ * an attribute value template, and if yes, establish some structures needed
  * to process it at transformation time.
  */
 void
 xsltCompileAttr(xsltStylesheetPtr style, xmlAttrPtr attr) {
     const xmlChar *str;
