diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/variables.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/variables.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/variables.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/variables.c
@@ -203,11 +203,12 @@
  * Returns 0 in case of success and -1 in case of API or internal errors.
  *
  * This function is unsupported in newer releases of libxslt.
  */
 int
-xsltExtensionInstructionResultFinalize(xsltTransformContextPtr ctxt)
+xsltExtensionInstructionResultFinalize(
+        xsltTransformContextPtr ctxt ATTRIBUTE_UNUSED)
 {
     xmlGenericError(xmlGenericErrorContext,
             "xsltExtensionInstructionResultFinalize is unsupported "
             "in this release of libxslt.\n");
     return(-1);
@@ -228,12 +229,13 @@
  *
  * It isn't necessary to call this function in newer releases of
  * libxslt.
  */
 int
-xsltExtensionInstructionResultRegister(xsltTransformContextPtr ctxt,
-                       xmlXPathObjectPtr obj)
+xsltExtensionInstructionResultRegister(
+        xsltTransformContextPtr ctxt ATTRIBUTE_UNUSED,
+    xmlXPathObjectPtr obj ATTRIBUTE_UNUSED)
 {
     return(0);
 }
 
 /**
@@ -856,11 +858,11 @@
     xsltStackElemPtr oldVar = ctxt->contextVariable;
 
     if ((comp != NULL) && (comp->comp != NULL)) {
         xpExpr = comp->comp;
     } else {
-        xpExpr = xmlXPathCompile(variable->select);
+        xpExpr = xmlXPathCtxtCompile(ctxt->xpathCtxt, variable->select);
     }
     if (xpExpr == NULL)
         return(NULL);
     /*
     * Save context states.
@@ -1097,11 +1099,11 @@
     xmlXPathContextPtr xpctxt = ctxt->xpathCtxt;
 
     if ((comp != NULL) && (comp->comp != NULL)) {
         xpExpr = comp->comp;
     } else {
-        xpExpr = xmlXPathCompile(elem->select);
+        xpExpr = xmlXPathCtxtCompile(ctxt->xpathCtxt, elem->select);
     }
     if (xpExpr == NULL)
         goto error;
 
 
@@ -1548,11 +1550,11 @@
      * Do the evaluation if @eval is non-zero.
      */
 
     result = NULL;
     if (eval != 0) {
-        xpExpr = xmlXPathCompile(value);
+        xpExpr = xmlXPathCtxtCompile(ctxt->xpathCtxt, value);
     if (xpExpr != NULL) {
         xmlDocPtr oldXPDoc;
         xmlNodePtr oldXPContextNode;
         int oldXPProximityPosition, oldXPContextSize, oldXPNsNr;
         xmlNsPtr *oldXPNamespaces;
@@ -1965,11 +1967,11 @@
  * xsltParseStylesheetCallerParam:
  * @ctxt:  the XSLT transformation context
  * @inst:  the xsl:with-param instruction element
  *
  * Processes an xsl:with-param instruction at transformation time.
- * The value is compute, but not recorded.
+ * The value is computed, but not recorded.
  * NOTE that this is also called with an *xsl:param* element
  * from exsltFuncFunctionFunction().
  *
  * Returns the new xsltStackElemPtr or NULL
  */
