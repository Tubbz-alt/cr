diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/transform.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/transform.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/transform.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/transform.c
@@ -230,10 +230,12 @@
         ctxt->vars = ctxt->varsTab[ctxt->varsNr - 1];
     else
         ctxt->vars = NULL;
 }
 
+#ifdef WITH_PROFILER
+
 /**
  * profPush:
  * @ctxt: the transformation context
  * @value:  the profiling value to push on the stack
  *
@@ -338,10 +340,12 @@
         templ->templCountTab[templ->templNr] = 1;
         templ->templNr++;
     }
 }
 
+#endif /* WITH_PROFILER */
+
 /**
  * xsltPreCompEval:
  * @ctxt: transform context
  * @node: context node
  * @comp: precompiled expression
@@ -1088,10 +1092,12 @@
         copy->content = cur->content;
     else {
         if ((copy->content = xmlStrdup(cur->content)) == NULL)
         return NULL;
     }
+
+    ctxt->lasttext = NULL;
     } else {
         /*
      * normal processing. keep counters to extend the text node
      * in xsltAddTextString if needed.
      */
@@ -2203,10 +2209,11 @@
 
     ctxt->currentTemplateRule = oldCurTempRule;
     }
 }
 
+#ifdef WITH_DEBUGGER
 static xmlNodePtr
 xsltDebuggerStartSequenceConstructor(xsltTransformContextPtr ctxt,
                      xmlNodePtr contextNode,
                      xmlNodePtr list,
                      xsltTemplatePtr templ,
@@ -2238,10 +2245,11 @@
             debugedNode = ctxt->inst;
         }
     }
     return(debugedNode);
 }
+#endif /* WITH_DEBUGGER */
 
 /**
  * xsltLocalVariablePush:
  * @ctxt: the transformation context
  * @variable: variable to be pushed to the variable stack
@@ -2409,10 +2417,21 @@
     /*
     * Process the sequence constructor.
     */
     cur = list;
     while (cur != NULL) {
+        if (ctxt->opLimit != 0) {
+            if (ctxt->opCount >= ctxt->opLimit) {
+        xsltTransformError(ctxt, NULL, cur,
+            "xsltApplySequenceConstructor: "
+                    "Operation limit exceeded\n");
+            ctxt->state = XSLT_STATE_STOPPED;
+                goto error;
+            }
+            ctxt->opCount += 1;
+        }
+
         ctxt->inst = cur;
 
 #ifdef WITH_DEBUGGER
         switch (ctxt->debugStatus) {
             case XSLT_DEBUG_RUN_RESTART:
@@ -2865,10 +2884,11 @@
                     cur->name));
 #endif
                 /*
                  * Search if there are fallbacks
                  */
+                ctxt->insert = insert;
                 child = cur->children;
                 while (child != NULL) {
                     if ((IS_XSLT_ELEM(child)) &&
                         (IS_XSLT_NAME(child, "fallback")))
             {
@@ -2876,10 +2896,11 @@
                         xsltApplySequenceConstructor(ctxt, contextNode,
                 child->children, NULL);
                     }
                     child = child->next;
                 }
+                ctxt->insert = oldInsert;
 
                 if (!found) {
                     xsltTransformError(ctxt, NULL, cur,
             "xsltApplySequenceConstructor: failed to find extension %s\n",
             cur->name);
@@ -3084,14 +3105,16 @@
               xmlNodePtr list,
               xsltTemplatePtr templ,
               xsltStackElemPtr withParams)
 {
     int oldVarsBase = 0;
-    long start = 0;
     xmlNodePtr cur;
     xsltStackElemPtr tmpParam = NULL;
     xmlDocPtr oldUserFragmentTop;
+#ifdef WITH_PROFILER
+    long start = 0;
+#endif
 
 #ifdef XSLT_REFACTORED
     xsltStyleItemParamPtr iparam;
 #else
     xsltStylePreCompPtr iparam;
@@ -3142,16 +3165,20 @@
     */
     oldVarsBase = ctxt->varsBase;
     ctxt->varsBase = ctxt->varsNr;
 
     ctxt->node = contextNode;
+
+#ifdef WITH_PROFILER
     if (ctxt->profile) {
     templ->nbCalls++;
     start = xsltTimestamp();
     profPush(ctxt, 0);
     profCallgraphAdd(templ, ctxt->templ);
     }
+#endif
+
     /*
     * Push the xsl:template declaration onto the stack.
     */
     templPush(ctxt, templ);
 
@@ -3255,10 +3282,12 @@
 
     /*
     * Pop the xsl:template declaration from the stack.
     */
     templPop(ctxt);
+
+#ifdef WITH_PROFILER
     if (ctxt->profile) {
     long spent, child, total, end;
 
     end = xsltTimestamp();
     child = profPop(ctxt);
@@ -3275,10 +3304,11 @@
 
     templ->time += spent;
     if (ctxt->profNr > 0)
         ctxt->profTab[ctxt->profNr - 1] += total;
     }
+#endif
 
 #ifdef WITH_DEBUGGER
     if ((ctxt->debugStatus != XSLT_DEBUG_NONE) && (addCallResult)) {
         xslDropCall();
     }
@@ -3432,11 +3462,11 @@
          * Trying to handle bug #59212
          * The value of the "select" attribute is an
          * XPath expression.
          * (see http://xml.apache.org/xalan-j/extensionslib.html#redirect)
          */
-        cmp = xmlXPathCompile(URL);
+        cmp = xmlXPathCtxtCompile(ctxt->xpathCtxt, URL);
                 val = xsltEvalXPathString(ctxt, cmp);
         xmlXPathFreeCompExpr(cmp);
         xmlFree(URL);
         URL = val;
         }
@@ -4996,11 +5026,11 @@
                 (xmlStrEqual(val, (xmlChar *) "strip"))) {
                 delNode = cur;
                 break;
             }
             }
-            /* no break on purpose */
+            /* Intentional fall-through */
         case XML_ELEMENT_NODE:
         case XML_DOCUMENT_NODE:
         case XML_HTML_DOCUMENT_NODE:
         case XML_CDATA_SECTION_NODE:
         case XML_PI_NODE:
@@ -5896,12 +5926,20 @@
         return (NULL);
 
     ctxt->initialContextDoc = doc;
     ctxt->initialContextNode = (xmlNodePtr) doc;
 
-    if (profile != NULL)
+    if (profile != NULL) {
+#ifdef WITH_PROFILER
         ctxt->profile = 1;
+#else
+        xsltTransformError(ctxt, NULL, (xmlNodePtr) doc,
+                "xsltApplyStylesheetInternal: "
+                "libxslt compiled without profiler\n");
+        goto error;
+#endif
+    }
 
     if (output != NULL)
         ctxt->outputFile = output;
     else
         ctxt->outputFile = NULL;
@@ -6010,20 +6048,26 @@
     res->charset = XML_CHAR_ENCODING_UTF8;
     if (encoding != NULL)
         res->encoding = xmlStrdup(encoding);
     variables = style->variables;
 
+    ctxt->node = (xmlNodePtr) doc;
+    ctxt->output = res;
+
+    ctxt->xpathCtxt->contextSize = 1;
+    ctxt->xpathCtxt->proximityPosition = 1;
+    ctxt->xpathCtxt->node = NULL; /* TODO: Set the context node here? */
+
     /*
      * Start the evaluation, evaluate the params, the stylesheets globals
      * and start by processing the top node.
      */
     if (xsltNeedElemSpaceHandling(ctxt))
     xsltApplyStripSpaces(ctxt, xmlDocGetRootElement(doc));
     /*
     * Evaluate global params and user-provided params.
     */
-    ctxt->node = (xmlNodePtr) doc;
     if (ctxt->globalVars == NULL)
     ctxt->globalVars = xmlHashCreate(20);
     if (params != NULL) {
         xsltEvalUserParams(ctxt, params);
     }
@@ -6034,18 +6078,13 @@
     xsltEvalGlobalVariables(ctxt);
 
     /* Clean up any unused RVTs. */
     xsltReleaseLocalRVTs(ctxt, NULL);
 
-    ctxt->node = (xmlNodePtr) doc;
-    ctxt->output = res;
     ctxt->insert = (xmlNodePtr) res;
     ctxt->varsBase = ctxt->varsNr - 1;
 
-    ctxt->xpathCtxt->contextSize = 1;
-    ctxt->xpathCtxt->proximityPosition = 1;
-    ctxt->xpathCtxt->node = NULL; /* TODO: Set the context node here? */
     /*
     * Start processing the source tree -----------------------------------
     */
     xsltProcessOneNode(ctxt, ctxt->node, NULL);
     /*
@@ -6171,13 +6210,16 @@
         }
         }
         }
     }
     xmlXPathFreeNodeSet(ctxt->nodeList);
+
+#ifdef WITH_PROFILER
     if (profile != NULL) {
         xsltSaveProfiling(ctxt, profile);
     }
+#endif
 
     /*
      * Be pedantic.
      */
     if ((ctxt != NULL) && (ctxt->state != XSLT_STATE_OK)) {
