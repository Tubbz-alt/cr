diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/pattern.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/pattern.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/pattern.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/pattern.c
@@ -111,11 +111,10 @@
     int nbStep;
     int maxStep;
     xmlNsPtr *nsList;       /* the namespaces in scope */
     int nsNr;           /* the number of namespaces in scope */
     xsltStepOpPtr steps;        /* ops for computation */
-    int novar;                  /* doesn't contain variables */
 };
 
 typedef struct _xsltParserContext xsltParserContext;
 typedef xsltParserContext *xsltParserContextPtr;
 struct _xsltParserContext {
@@ -340,24 +339,18 @@
         xsltAllocateExtra(ctxt->style);
     comp->steps[comp->nbStep].lenExtra =
         xsltAllocateExtra(ctxt->style);
     }
     if (op == XSLT_OP_PREDICATE) {
-    xmlXPathContextPtr xctxt;
+        int flags = 0;
 
-    if (ctxt->style != NULL)
-        xctxt = xmlXPathNewContext(ctxt->style->doc);
-    else
-        xctxt = xmlXPathNewContext(NULL);
 #ifdef XML_XPATH_NOVAR
     if (novar != 0)
-        xctxt->flags = XML_XPATH_NOVAR;
+        flags = XML_XPATH_NOVAR;
 #endif
-    if (ctxt->style != NULL)
-        xctxt->dict = ctxt->style->dict;
-    comp->steps[comp->nbStep].comp = xmlXPathCtxtCompile(xctxt, value);
-    xmlXPathFreeContext(xctxt);
+    comp->steps[comp->nbStep].comp = xsltXPathCompileFlags(ctxt->style,
+                value, flags);
     if (comp->steps[comp->nbStep].comp == NULL) {
         xsltTransformError(NULL, ctxt->style, ctxt->elem,
             "Failed to compile predicate\n");
         if (ctxt->style != NULL)
         ctxt->style->errors++;
@@ -593,12 +586,11 @@
         xmlXPathFreeObject(newlist);
         return(-1);
     }
     ix = 0;
 
-    if ((parent == NULL) || (node->doc == NULL) || isRVT ||
-            (comp->novar == 0))
+    if ((parent == NULL) || (node->doc == NULL) || isRVT)
         nocache = 1;
 
     if (nocache == 0) {
         if (list != NULL)
         xmlXPathFreeObject(list);
@@ -1249,10 +1241,38 @@
     comp = comp->next;
     }
     return(0);
 }
 
+/**
+ * xsltCompMatchClearCache:
+ * @ctxt:  a XSLT process context
+ * @comp: the precompiled pattern list
+ *
+ * Clear pattern match cache.
+ */
+void
+xsltCompMatchClearCache(xsltTransformContextPtr ctxt, xsltCompMatchPtr comp) {
+    xsltStepOpPtr sel;
+    xmlXPathObjectPtr list;
+
+    if ((ctxt == NULL) || (comp == NULL))
+        return;
+
+    sel = &comp->steps[0];
+    list = (xmlXPathObjectPtr) XSLT_RUNTIME_EXTRA_LST(ctxt, sel->lenExtra);
+
+    if (list != NULL) {
+        xmlXPathFreeObject(list);
+
+        XSLT_RUNTIME_EXTRA_LST(ctxt, sel->lenExtra) = NULL;
+        XSLT_RUNTIME_EXTRA(ctxt, sel->previousExtra, ptr) = NULL;
+        XSLT_RUNTIME_EXTRA(ctxt, sel->indexExtra, ival) = 0;
+        XSLT_RUNTIME_EXTRA_FREE(ctxt, sel->lenExtra) = NULL;
+    }
+}
+
 /************************************************************************
  *                                  *
  *          Dedicated parser for templates          *
  *                                  *
  ************************************************************************/
@@ -1793,13 +1813,11 @@
         xsltCompileStepPattern(ctxt, NULL, novar);
     } else if (CUR == '/') {
         PUSH(XSLT_OP_PARENT, NULL, NULL, novar);
         NEXT;
         SKIP_BLANKS;
-        if ((CUR != 0) && (CUR != '|')) {
-        xsltCompileRelativePathPattern(ctxt, NULL, novar);
-        }
+        xsltCompileStepPattern(ctxt, NULL, novar);
     } else {
         ctxt->error = 1;
     }
     if (ctxt->error)
         goto error;
@@ -1860,10 +1878,12 @@
     SKIP_BLANKS;
     if ((CUR == '(') && !xmlXPathIsNodeType(name)) {
         xsltCompileIdKeyPattern(ctxt, name, 1, novar, 0);
         xmlFree(name);
         name = NULL;
+            if (ctxt->error)
+                return;
         if ((CUR == '/') && (NXT(1) == '/')) {
         PUSH(XSLT_OP_ANCESTOR, NULL, NULL, novar);
         NEXT;
         NEXT;
         SKIP_BLANKS;
@@ -1970,11 +1990,10 @@
     if (element->nsList != NULL) {
         while (element->nsList[j] != NULL)
         j++;
     }
     element->nsNr = j;
-        element->novar = novar;
 
 
 #ifdef WITH_XSLT_DEBUG_PATTERN
     xsltGenericDebug(xsltGenericDebugContext,
              "xsltCompilePattern : parsing '%s'\n",
@@ -2135,12 +2154,19 @@
         }
 
         xmlHashAddEntry2(style->namedTemplates, cur->name, cur->nameURI, cur);
     }
 
-    if (cur->match == NULL)
+    if (cur->match == NULL) {
+            if (cur->name == NULL) {
+                xsltTransformError(NULL, style, cur->elem,
+                    "xsl:template: need to specify match or name attribute\n");
+                style->errors++;
+                return(-1);
+            }
     return(0);
+    }
 
     priority = cur->priority;
     pat = xsltCompilePatternInternal(cur->match, style->doc, cur->elem,
             style, NULL, 1);
     if (pat == NULL)
@@ -2362,10 +2388,11 @@
          */
         switch (node->type) {
         case XML_ELEMENT_NODE:
             if (node->name[0] == ' ')
             break;
+                    /* Intentional fall-through */
         case XML_ATTRIBUTE_NODE:
         case XML_PI_NODE:
             name = node->name;
             break;
         case XML_DOCUMENT_NODE:
@@ -2399,11 +2426,11 @@
                          name, ctxt->mode, ctxt->modeURI);
     } else
         list = NULL;
     while (list != NULL) {
         if (xsltTestCompMatch(ctxt, list, node,
-                      ctxt->mode, ctxt->modeURI)) {
+                      ctxt->mode, ctxt->modeURI) == 1) {
         ret = list->template;
         priority = list->priority;
         break;
         }
         list = list->next;
@@ -2468,11 +2495,11 @@
         break;
     }
     while ((list != NULL) &&
            ((ret == NULL)  || (list->priority > priority))) {
         if (xsltTestCompMatch(ctxt, list, node,
-                      ctxt->mode, ctxt->modeURI)) {
+                      ctxt->mode, ctxt->modeURI) == 1) {
         ret = list->template;
         priority = list->priority;
         break;
         }
         list = list->next;
@@ -2485,11 +2512,11 @@
         (node->type == XML_TEXT_NODE)) {
         list = curstyle->elemMatch;
         while ((list != NULL) &&
            ((ret == NULL)  || (list->priority > priority))) {
         if (xsltTestCompMatch(ctxt, list, node,
-                      ctxt->mode, ctxt->modeURI)) {
+                      ctxt->mode, ctxt->modeURI) == 1) {
             ret = list->template;
             priority = list->priority;
             break;
         }
         list = list->next;
@@ -2498,11 +2525,11 @@
            (node->type == XML_COMMENT_NODE)) {
         list = curstyle->elemMatch;
         while ((list != NULL) &&
            ((ret == NULL)  || (list->priority > priority))) {
         if (xsltTestCompMatch(ctxt, list, node,
-                      ctxt->mode, ctxt->modeURI)) {
+                      ctxt->mode, ctxt->modeURI) == 1) {
             ret = list->template;
             priority = list->priority;
             break;
         }
         list = list->next;
@@ -2513,11 +2540,11 @@
     if (keyed) {
         list = curstyle->keyMatch;
         while ((list != NULL) &&
            ((ret == NULL)  || (list->priority > priority))) {
         if (xsltTestCompMatch(ctxt, list, node,
-                      ctxt->mode, ctxt->modeURI)) {
+                      ctxt->mode, ctxt->modeURI) == 1) {
             ret = list->template;
             priority = list->priority;
             break;
         }
         list = list->next;
