diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/templates.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/templates.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/templates.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxslt/src/libxslt/templates.c
@@ -330,11 +330,11 @@
             while (nsList[i] != NULL)
                 i++;
             nsNr = i;
             }
         }
-        comp = xmlXPathCompile(expr);
+        comp = xmlXPathCtxtCompile(ctxt->xpathCtxt, expr);
                 val = xsltEvalXPathStringNs(ctxt, comp, nsNr, nsList);
         xmlXPathFreeCompExpr(comp);
         xmlFree(expr);
         if (val != NULL) {
             ret = xmlStrcat(ret, val);
@@ -643,33 +643,53 @@
  */
 xmlAttrPtr
 xsltAttrListTemplateProcess(xsltTransformContextPtr ctxt,
                         xmlNodePtr target, xmlAttrPtr attrs)
 {
-    xmlAttrPtr attr, copy, last;
+    xmlAttrPtr attr, copy, last = NULL;
     xmlNodePtr oldInsert, text;
     xmlNsPtr origNs = NULL, copyNs = NULL;
     const xmlChar *value;
     xmlChar *valueAVT;
+    int hasAttr = 0;
 
     if ((ctxt == NULL) || (target == NULL) || (attrs == NULL) ||
         (target->type != XML_ELEMENT_NODE))
     return(NULL);
 
     oldInsert = ctxt->insert;
     ctxt->insert = target;
 
     /*
-    * Instantiate LRE-attributes.
+    * Apply attribute-sets.
     */
-    if (target->properties) {
-    last = target->properties;
-    while (last->next != NULL)
-        last = last->next;
-    } else {
-    last = NULL;
+    attr = attrs;
+    do {
+#ifdef XSLT_REFACTORED
+    if ((attr->psvi == xsltXSLTAttrMarker) &&
+        xmlStrEqual(attr->name, (const xmlChar *)"use-attribute-sets"))
+    {
+        xsltApplyAttributeSet(ctxt, ctxt->node, (xmlNodePtr) attr, NULL);
+    }
+#else
+    if ((attr->ns != NULL) &&
+        xmlStrEqual(attr->name, (const xmlChar *)"use-attribute-sets") &&
+        xmlStrEqual(attr->ns->href, XSLT_NAMESPACE))
+    {
+        xsltApplyAttributeSet(ctxt, ctxt->node, (xmlNodePtr) attr, NULL);
+    }
+#endif
+    attr = attr->next;
+    } while (attr != NULL);
+
+    if (target->properties != NULL) {
+        hasAttr = 1;
     }
+
+    /*
+    * Instantiate LRE-attributes.
+    */
     attr = attrs;
     do {
     /*
     * Skip XSLT attributes.
     */
@@ -701,39 +721,11 @@
         value = xmlDictLookup(ctxt->dict, BAD_CAST "", 0);
     } else
         value = xmlDictLookup(ctxt->dict, BAD_CAST "", 0);
 
     /*
-    * Create a new attribute.
-    */
-    copy = xmlNewDocProp(target->doc, attr->name, NULL);
-    if (copy == NULL) {
-        if (attr->ns) {
-        xsltTransformError(ctxt, NULL, attr->parent,
-            "Internal error: Failed to create attribute '{%s}%s'.\n",
-            attr->ns->href, attr->name);
-        } else {
-        xsltTransformError(ctxt, NULL, attr->parent,
-            "Internal error: Failed to create attribute '%s'.\n",
-            attr->name);
-        }
-        goto error;
-    }
-    /*
-    * Attach it to the target element.
-    */
-    copy->parent = target;
-    if (last == NULL) {
-        target->properties = copy;
-        last = copy;
-    } else {
-        last->next = copy;
-        copy->prev = last;
-        last = copy;
-    }
-    /*
-    * Set the namespace. Avoid lookups of same namespaces.
+    * Get the namespace. Avoid lookups of same namespaces.
     */
     if (attr->ns != origNs) {
         origNs = attr->ns;
         if (attr->ns != NULL) {
 #ifdef XSLT_REFACTORED
@@ -746,11 +738,51 @@
         if (copyNs == NULL)
             goto error;
         } else
         copyNs = NULL;
     }
-    copy->ns = copyNs;
+    /*
+    * Create a new attribute.
+    */
+        if (hasAttr) {
+        copy = xmlSetNsProp(target, copyNs, attr->name, NULL);
+        } else {
+            /*
+            * Avoid checking for duplicate attributes if there aren't
+            * any attribute sets.
+            */
+        copy = xmlNewDocProp(target->doc, attr->name, NULL);
+
+        if (copy != NULL) {
+                copy->ns = copyNs;
+
+                /*
+                * Attach it to the target element.
+                */
+                copy->parent = target;
+                if (last == NULL) {
+                    target->properties = copy;
+                    last = copy;
+                } else {
+                    last->next = copy;
+                    copy->prev = last;
+                    last = copy;
+                }
+            }
+        }
+    if (copy == NULL) {
+        if (attr->ns) {
+        xsltTransformError(ctxt, NULL, attr->parent,
+            "Internal error: Failed to create attribute '{%s}%s'.\n",
+            attr->ns->href, attr->name);
+        } else {
+        xsltTransformError(ctxt, NULL, attr->parent,
+            "Internal error: Failed to create attribute '%s'.\n",
+            attr->name);
+        }
+        goto error;
+    }
 
     /*
     * Set the value.
     */
     text = xmlNewText(NULL);
@@ -801,34 +833,10 @@
 
 next_attribute:
     attr = attr->next;
     } while (attr != NULL);
 
-    /*
-    * Apply attribute-sets.
-    * The creation of such attributes will not overwrite any existing
-    * attribute.
-    */
-    attr = attrs;
-    do {
-#ifdef XSLT_REFACTORED
-    if ((attr->psvi == xsltXSLTAttrMarker) &&
-        xmlStrEqual(attr->name, (const xmlChar *)"use-attribute-sets"))
-    {
-        xsltApplyAttributeSet(ctxt, ctxt->node, (xmlNodePtr) attr, NULL);
-    }
-#else
-    if ((attr->ns != NULL) &&
-        xmlStrEqual(attr->name, (const xmlChar *)"use-attribute-sets") &&
-        xmlStrEqual(attr->ns->href, XSLT_NAMESPACE))
-    {
-        xsltApplyAttributeSet(ctxt, ctxt->node, (xmlNodePtr) attr, NULL);
-    }
-#endif
-    attr = attr->next;
-    } while (attr != NULL);
-
     ctxt->insert = oldInsert;
     return(target->properties);
 
 error:
     ctxt->insert = oldInsert;
