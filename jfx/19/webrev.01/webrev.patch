diff a/buildSrc/mac.gradle b/buildSrc/mac.gradle
--- a/buildSrc/mac.gradle
+++ b/buildSrc/mac.gradle
@@ -167,11 +167,11 @@
 
 MAC.prism = [:]
 MAC.prism.javahInclude = ["com/sun/prism/impl/**/*", "com/sun/prism/PresentableState*"]
 MAC.prism.nativeSource = file("${project("graphics").projectDir}/src/main/native-prism")
 MAC.prism.compiler = compiler
-MAC.prism.ccFlags = ["-O3", "-DINLINE=inline", "-c", ccBaseFlags].flatten()
+MAC.prism.ccFlags = ["-O3", "-DINLINE=inline", "-c", IS_STATIC_BUILD? "-DSTATIC_BUILD" : "", ccBaseFlags].flatten()
 MAC.prism.linker = linker
 MAC.prism.linkFlags = linkFlagsAlt
 MAC.prism.lib = "prism_common"
 
 MAC.prismSW = [:]
diff a/modules/javafx.graphics/src/main/native-prism-sw/JNIUtil.c b/modules/javafx.graphics/src/main/native-prism-sw/JNIUtil.c
--- a/modules/javafx.graphics/src/main/native-prism-sw/JNIUtil.c
+++ b/modules/javafx.graphics/src/main/native-prism-sw/JNIUtil.c
@@ -22,10 +22,26 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 #include <JNIUtil.h>
+#ifdef STATIC_BUILD
+JNIEXPORT jint JNICALL
+JNI_OnLoad_prism_sw(JavaVM *vm, void * reserved) {
+#ifdef JNI_VERSION_1_8
+    //min. returned JNI_VERSION required by JDK8 for builtin libraries
+    JNIEnv *env;
+    if ((*vm)->GetEnv(vm, (void **)&env, JNI_VERSION_1_8) != JNI_OK) {
+        return JNI_VERSION_1_4;
+    }
+    return JNI_VERSION_1_8;
+#else
+    return JNI_VERSION_1_4;
+#endif
+}
+#endif // STATIC_BUILD
+
 
 jboolean
 initializeFieldIds(jfieldID* dest, JNIEnv* env, jclass classHandle,
                    const FieldDesc* fields) {
     jboolean retVal = JNI_TRUE;
