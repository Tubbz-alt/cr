diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/iio/ImageStorage.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/iio/ImageStorage.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/iio/ImageStorage.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/iio/ImageStorage.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -255,29 +255,32 @@
      */
     public static ImageFrame[] loadAll(InputStream input, ImageLoadListener listener,
             double width, double height, boolean preserveAspectRatio,
             float pixelScale, boolean smooth) throws ImageStorageException {
         ImageLoader loader = null;
+        ImageFrame[] images = null;
+
         try {
             if (isIOS) {
                 // no extension/signature recognition done here,
                 // we always want the iOS native loader
                 loader = IosImageLoaderFactory.getInstance().createImageLoader(input);
             } else {
                 loader = getLoaderBySignature(input, listener);
             }
+            if (loader != null) {
+                images = loadAll(loader, width, height, preserveAspectRatio, pixelScale, smooth);
+            } else {
+                throw new ImageStorageException("No loader for image data");
+            }
         } catch (IOException e) {
             throw new ImageStorageException(e.getMessage(), e);
+        } finally {
+            if (loader != null) {
+                loader.dispose();
+            }
         }
-
-        ImageFrame[] images = null;
-        if (loader != null) {
-            images = loadAll(loader, width, height, preserveAspectRatio, pixelScale, smooth);
-        } else {
-            throw new ImageStorageException("No loader for image data");
-        }
-
         return images;
     }
 
     /**
      * Load all images present in the specified input. For more details refer to
@@ -324,10 +327,13 @@
                 images = loadAll(loader, width, height, preserveAspectRatio, imgPixelScale, smooth);
             } else {
                 throw new ImageStorageException("No loader for image data");
             }
         } finally {
+            if (loader != null) {
+                loader.dispose();
+            }
             try {
                 if (theStream != null) {
                     theStream.close();
                 }
             } catch (IOException e) {
