diff a/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java b/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
@@ -1279,26 +1279,25 @@
     }
 
     // Shared method for Scene.snapshot and Node.snapshot. It is static because
     // we might be doing a Node snapshot with a null scene
     static WritableImage doSnapshot(Scene scene,
-                                    double x, double y, double w, double h,
-                                    Node root, BaseTransform transform, boolean depthBuffer,
-                                    Paint fill, Camera camera, WritableImage wimg) {
-
-        int xMin = (int) Math.floor(x);
-        int yMin = (int) Math.floor(y);
-        int xMax = (int) Math.ceil(x + w);
-        int yMax = (int) Math.ceil(y + h);
+            double x, double y, double w, double h,
+            Node root, BaseTransform transform, boolean depthBuffer,
+            Paint fill, Camera camera, WritableImage wimg) {
+
+        int xMin = (int)Math.floor(x);
+        int yMin = (int)Math.floor(y);
+        int xMax = (int)Math.ceil(x + w);
+        int yMax = (int)Math.ceil(y + h);
         int width = Math.max(xMax - xMin, 1);
         int height = Math.max(yMax - yMin, 1);
         if (wimg == null) {
             wimg = new WritableImage(width, height);
-        }
-        else {
-            width = (int) wimg.getWidth();
-            height = (int) wimg.getHeight();
+        } else {
+            width = (int)wimg.getWidth();
+            height = (int)wimg.getHeight();
         }
 
         int maxTextureSize = PrismSettings.maxTextureSize;
         if (height > maxTextureSize || width > maxTextureSize) {
             // The requested size for the screenshot is to big to fit a single texture,
@@ -1313,12 +1312,11 @@
                     int tileHeight = Math.min(maxTextureSize, height - yOffset);
                     WritableImage tile = doSnapshotTile(scene, xMin + xOffset, yMin + yOffset, tileWidth, tileHeight, root, transform, depthBuffer, fill, camera, null);
                     wimg.getPixelWriter().setPixels(xOffset, yOffset, tileWidth, tileHeight, tile.getPixelReader(), 0, 0);
                 }
             }
-        }
-        else {
+        } else {
             // The requested size for the screenshot fits max texture size,
             // so we can directly return the one generated tile and avoid the extra pixel copy.
             wimg = doSnapshotTile(scene, xMin, yMin, width, height, root, transform, depthBuffer, fill, camera, wimg);
         }
 
@@ -1334,13 +1332,13 @@
 
     /**
      * Capture a single snapshot tile
      */
     private static WritableImage doSnapshotTile(Scene scene,
-                                                int x, int y, int w, int h,
-                                                Node root, BaseTransform transform, boolean depthBuffer,
-                                                Paint fill, Camera camera, WritableImage tileImg) {
+                    int x, int y, int w, int h,
+                    Node root, BaseTransform transform, boolean depthBuffer,
+                    Paint fill, Camera camera, WritableImage tileImg) {
         Toolkit tk = Toolkit.getToolkit();
         Toolkit.ImageRenderingContext context = new Toolkit.ImageRenderingContext();
         if (tileImg == null) {
             tileImg = new WritableImage(w, h);
         }
