diff a/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java b/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
@@ -1298,19 +1298,19 @@
             height = (int)wimg.getHeight();
         }
 
         int maxTextureSize = PrismSettings.maxTextureSize;
         if (height > maxTextureSize || width > maxTextureSize) {
-            // The requested size for the screenshot is to big to fit a single texture,
+            // The requested size for the screenshot is too big to fit a single texture,
             // so we need to take several snapshot tiles and merge them into single image (fixes JDK-8088198)
-            int verticalTileNb = (int) Math.ceil(height / (double) maxTextureSize);
-            int horizontalTileNb = (int) Math.ceil(width / (double) maxTextureSize);
-            for (int i = 0; i < horizontalTileNb; i++) {
-                for (int j = 0; j < verticalTileNb; j++) {
-                    int xOffset = i * maxTextureSize;
+            int numVerticalTiles = (int) Math.ceil(height / (double) maxTextureSize);
+            int numHorizontalTiles = (int) Math.ceil(width / (double) maxTextureSize);
+            for (int i = 0; i < numHorizontalTiles; i++) {
+                int xOffset = i * maxTextureSize;
+                int tileWidth = Math.min(maxTextureSize, width - xOffset);
+                for (int j = 0; j < numVerticalTiles; j++) {
                     int yOffset = j * maxTextureSize;
-                    int tileWidth = Math.min(maxTextureSize, width - xOffset);
                     int tileHeight = Math.min(maxTextureSize, height - yOffset);
                     WritableImage tile = doSnapshotTile(scene, xMin + xOffset, yMin + yOffset, tileWidth, tileHeight, root, transform, depthBuffer, fill, camera, null);
                     wimg.getPixelWriter().setPixels(xOffset, yOffset, tileWidth, tileHeight, tile.getPixelReader(), 0, 0);
                 }
             }
diff a/tests/system/src/test/java/test/javafx/scene/Snapshot2Test.java b/tests/system/src/test/java/test/javafx/scene/Snapshot2Test.java
--- a/tests/system/src/test/java/test/javafx/scene/Snapshot2Test.java
+++ b/tests/system/src/test/java/test/javafx/scene/Snapshot2Test.java
@@ -39,11 +39,10 @@
 import javafx.util.Callback;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;
 import test.util.Util;
@@ -371,30 +370,26 @@
     @Test
     public void testSnapshotScaleNodeDefer() {
         doTestSnapshotScaleNodeDefer(3, 3);
     }
 
-    // TODO: Re-enable this test when RT-22073 is fixed
-    @Ignore @Test
+    @Test
     public void testSnapshotBigXScaleNodeImm() {
         doTestSnapshotScaleNodeImm(100, 1);
     }
 
-    // TODO: Re-enable this test when RT-22073 is fixed
-    @Ignore @Test
+    @Test
     public void testSnapshotBigXScaleNodeDefer() {
         doTestSnapshotScaleNodeDefer(100, 1);
     }
 
-    // TODO: Re-enable this test when RT-22073 is fixed
-    @Ignore @Test
+    @Test
     public void testSnapshotBigYScaleNodeImm() {
         doTestSnapshotScaleNodeImm(1, 200);
     }
 
-    // TODO: Re-enable this test when RT-22073 is fixed
-    @Ignore @Test
+    @Test
     public void testSnapshotBigYScaleNodeDefer() {
         doTestSnapshotScaleNodeDefer(1, 200);
     }
 
     // Test node snapshot with a 90 degree rotate transform
diff a/tests/system/src/test/java/test/javafx/scene/Snapshot3Test.java b/tests/system/src/test/java/test/javafx/scene/Snapshot3Test.java
--- a/tests/system/src/test/java/test/javafx/scene/Snapshot3Test.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package test.javafx.scene;
-
-
-import javafx.scene.SnapshotParameters;
-import javafx.scene.image.Image;
-import javafx.scene.shape.Rectangle;
-import javafx.scene.transform.Scale;
-import org.junit.*;
-import test.util.Util;
-
-import static org.junit.Assert.*;
-
-/**
- * Tests for tiled snapshots (i.e. capturing snapshots larger than maxTextureSize. See JDK-8088198)
- */
-public class Snapshot3Test extends SnapshotCommon {
-
-    public static int VALUE_LARGER_THAN_TEXTURE_SIZE = 40000;
-
-    @BeforeClass
-    public static void setupOnce() {
-        doSetupOnce();
-    }
-
-    @AfterClass
-    public static void teardownOnce() {
-        doTeardownOnce();
-    }
-
-    @Before
-    public void setupEach() {
-        assertNotNull(myApp);
-        assertNotNull(myApp.primaryStage);
-        assertTrue(myApp.primaryStage.isShowing());
-    }
-
-    @After
-    public void teardownEach() {
-    }
-
-    Rectangle rect = new Rectangle(1, 1);
-
-    @Test
-    public void testTiledWidthSnapshot() {
-        Util.runAndWait(() -> {
-            SnapshotParameters params = new SnapshotParameters();
-            params.setTransform(new Scale(VALUE_LARGER_THAN_TEXTURE_SIZE, 1));
-            Image image = rect.snapshot(params, null);
-            assertEquals(VALUE_LARGER_THAN_TEXTURE_SIZE, (int) image.getWidth());
-        });
-    }
-
-    @Test
-    public void testTiledHeightSnapshot() {
-        Util.runAndWait(() -> {
-            SnapshotParameters params = new SnapshotParameters();
-            params.setTransform(new Scale(1, VALUE_LARGER_THAN_TEXTURE_SIZE));
-            Image image = rect.snapshot(params, null);
-            assertEquals(VALUE_LARGER_THAN_TEXTURE_SIZE, (int) image.getHeight());
-        });
-    }
-
-}
-
-
