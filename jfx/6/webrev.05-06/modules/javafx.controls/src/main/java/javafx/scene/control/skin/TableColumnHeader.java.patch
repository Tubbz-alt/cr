diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java
@@ -35,11 +35,15 @@
 import javafx.beans.property.ReadOnlyObjectWrapper;
 import javafx.beans.value.WritableValue;
 import javafx.collections.ListChangeListener;
 import javafx.collections.ObservableList;
 import javafx.collections.WeakListChangeListener;
-import javafx.css.*;
+import javafx.css.CssMetaData;
+import javafx.css.PseudoClass;
+import javafx.css.Styleable;
+import javafx.css.StyleableDoubleProperty;
+import javafx.css.StyleableProperty;
 import javafx.css.converter.SizeConverter;
 import javafx.event.EventHandler;
 import javafx.geometry.HPos;
 import javafx.geometry.Insets;
 import javafx.geometry.Pos;
@@ -600,11 +604,11 @@
      * @implSpec The resulting column width for this implementation is the maximum of the preferred width of the header
      * cell and the preferred width of the first {@code maxRow} cells.
      * <p>
      * Subclasses can either use this method or override it (without the need to call {@code super()}) to provide their
      * custom implementation (such as ones that exclude the header, exclude {@code null} content, compute the minimum
-     * width etc.).
+     * width, etc.).
      *
      * @param maxRows the number of rows considered when resizing. If -1 is given, all rows are considered.
      * @since 14
      */
     protected void resizeColumnToFitContent(int maxRows) {
