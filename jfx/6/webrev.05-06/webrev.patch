diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java
@@ -35,11 +35,15 @@
 import javafx.beans.property.ReadOnlyObjectWrapper;
 import javafx.beans.value.WritableValue;
 import javafx.collections.ListChangeListener;
 import javafx.collections.ObservableList;
 import javafx.collections.WeakListChangeListener;
-import javafx.css.*;
+import javafx.css.CssMetaData;
+import javafx.css.PseudoClass;
+import javafx.css.Styleable;
+import javafx.css.StyleableDoubleProperty;
+import javafx.css.StyleableProperty;
 import javafx.css.converter.SizeConverter;
 import javafx.event.EventHandler;
 import javafx.geometry.HPos;
 import javafx.geometry.Insets;
 import javafx.geometry.Pos;
@@ -600,11 +604,11 @@
      * @implSpec The resulting column width for this implementation is the maximum of the preferred width of the header
      * cell and the preferred width of the first {@code maxRow} cells.
      * <p>
      * Subclasses can either use this method or override it (without the need to call {@code super()}) to provide their
      * custom implementation (such as ones that exclude the header, exclude {@code null} content, compute the minimum
-     * width etc.).
+     * width, etc.).
      *
      * @param maxRows the number of rows considered when resizing. If -1 is given, all rows are considered.
      * @since 14
      */
     protected void resizeColumnToFitContent(int maxRows) {
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/TableColumnHeaderTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/TableColumnHeaderTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/TableColumnHeaderTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/TableColumnHeaderTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -26,17 +26,14 @@
 package test.javafx.scene.control.skin;
 
 import com.sun.javafx.tk.Toolkit;
 import javafx.collections.FXCollections;
 import javafx.collections.ObservableList;
-import javafx.scene.Scene;
 import javafx.scene.control.TableColumn;
 import javafx.scene.control.TableView;
 import javafx.scene.control.cell.PropertyValueFactory;
 import javafx.scene.control.skin.TableColumnHeader;
-import javafx.scene.text.Font;
-import javafx.stage.Stage;
 import org.junit.Before;
 import org.junit.After;
 import org.junit.Test;
 import test.com.sun.javafx.scene.control.infrastructure.StageLoader;
 import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;
@@ -49,18 +46,22 @@
 public class TableColumnHeaderTest {
 
     private TableColumnHeader firstColumnHeader;
     private TableView<Person> tableView;
     private StageLoader sl;
-
+    private static String NAME0 = "Humphrey McPhee";
+    private static String NAME1 = "Justice Caldwell";
+    private static String NAME2 = "Orrin Davies";
+    private static String NAME3 = "Emma Wilson";
+    
     @Before
-    public void before(){
+    public void before() {
         ObservableList<Person> model = FXCollections.observableArrayList(
-                new Person("Humphrey McPhee", 76),
-                new Person("Justice Caldwell", 30),
-                new Person("Orrin Davies", 30),
-                new Person("Emma Wilson", 8)
+                new Person(NAME0, 76),
+                new Person(NAME1, 30),
+                new Person(NAME2, 30),
+                new Person(NAME3, 8)
         );
         TableColumn<Person, String> column = new TableColumn<>("Col ");
         column.setCellValueFactory(new PropertyValueFactory<Person, String>("firstName"));
 
         tableView = new TableView<>(model);
@@ -75,11 +76,11 @@
         column.setStyle("-fx-font: System;");
         firstColumnHeader = VirtualFlowTestUtils.getTableColumnHeader(tableView, column);
     }
 
     @After
-    public void after(){
+    public void after() {
         sl.dispose();
     }
 
     /**
      * @test
@@ -114,11 +115,11 @@
         TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);
         assertTrue("Column width must be greater",
                 width < column.getWidth());
 
         //Back to initial value
-        tableView.getItems().get(0).setFirstName("Humphrey McPhee");
+        tableView.getItems().get(0).setFirstName(NAME0);
 
         TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);
         assertEquals("Width must be equal to initial value",
                 width, column.getWidth(), 0.001);
     }
@@ -144,14 +145,14 @@
         TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);
         assertTrue("Column width must be smaller",
                 width > column.getWidth());
 
         //Back to initial value
-        tableView.getItems().get(0).setFirstName("Humphrey McPhee");
-        tableView.getItems().get(1).setFirstName("Justice Caldwell");
-        tableView.getItems().get(2).setFirstName("Orrin Davies");
-        tableView.getItems().get(3).setFirstName("Emma Wilson");
+        tableView.getItems().get(0).setFirstName(NAME0);
+        tableView.getItems().get(1).setFirstName(NAME1);
+        tableView.getItems().get(2).setFirstName(NAME2);
+        tableView.getItems().get(3).setFirstName(NAME3);
 
         TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);
         assertEquals("Width must be equal to initial value",
                 width, column.getWidth(), 0.001);
     }
@@ -199,11 +200,11 @@
         assertEquals("Width must be the same",
                 width, column.getWidth(), 0.001);
 
 
         //Back to initial value
-        tableView.getItems().get(3).setFirstName("Emma Wilson");
+        tableView.getItems().get(3).setFirstName(NAME3);
 
 
         TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, 3);
         assertEquals("Width must be equal to initial value",
                 width, column.getWidth(), 0.001);
