diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/NestedTableColumnHeader.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/NestedTableColumnHeader.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/NestedTableColumnHeader.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/NestedTableColumnHeader.java
@@ -163,11 +163,15 @@
         me.consume();
 
         if (me.getClickCount() == 2 && me.isPrimaryButtonDown()) {
             // the user wants to resize the column such that its
             // width is equal to the widest element in the column
-            header.resizeColumnToFitContent(column, -1);
+            TableHeaderRow tableHeader = header.getTableHeaderRow();
+            TableColumnHeader columnHeader = tableHeader.getColumnHeaderFor(column);
+            if(columnHeader != null){
+                columnHeader.resizeColumnToFitContent(-1);
+            }
         } else {
             // rather than refer to the rect variable, we just grab
             // it from the source to prevent a small memory leak.
             Rectangle innerRect = (Rectangle) me.getSource();
             double startX = header.getTableHeaderRow().sceneToLocal(innerRect.localToScene(innerRect.getBoundsInLocal())).getMinX() + 2;
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java
@@ -531,11 +531,11 @@
         final int n = 30;
         if (! autoSizeComplete) {
             if (getTableColumn() == null || getTableColumn().getWidth() != DEFAULT_COLUMN_WIDTH || getScene() == null) {
                 return;
             }
-            doColumnAutoSize(getTableColumn(), n);
+            doColumnAutoSize(n);
             autoSizeComplete = true;
         }
     }
 
     void dispose() {
@@ -583,29 +583,31 @@
             // put together the grid
             updateSortGrid();
         }
     }
 
-    private void doColumnAutoSize(TableColumnBase<?,?> column, int cellsToMeasure) {
-        double prefWidth = column.getPrefWidth();
+    private void doColumnAutoSize(int cellsToMeasure) {
+        double prefWidth = getTableColumn().getPrefWidth();
 
         // if the prefWidth has been set, we do _not_ autosize columns
         if (prefWidth == DEFAULT_COLUMN_WIDTH) {
-            resizeColumnToFitContent(column, cellsToMeasure);
+            resizeColumnToFitContent(cellsToMeasure);
         }
     }
 
     /**
-     * Resizes the given column based on the preferred width of all items contained in it. This can be potentially very
-     * expensive if the number of rows is large. Subclass can either call this method or override it (no need to call
-     * {@code super()}) to provide their custom algorithm.
+     * Resizes this {@code TableColumnHeader}'s column based on content of header and content of cells. This
+     * implementation measures the preferred width of the header, the preferred width of the first {@code maxRow} cells
+     * and sizes the column to the maximum width of all measured values. Subclass can either call this method or
+     * override it (no need to call {@code super()}) to provide their custom implementation (exclude headers, exclude
+     * null content, use min).
      *
-     * @param tc      the column to resize
      * @param maxRows the number of rows considered when resizing. If -1 is given, all rows are considered.
-     * @since 12
+     * @since 14
      */
-    protected void resizeColumnToFitContent(TableColumnBase<?, ?> tc, int maxRows) {
+    protected void resizeColumnToFitContent(int maxRows) {
+        TableColumnBase<?, ?> tc = getTableColumn();
         if (!tc.isResizable()) return;
 
         Object control = this.getTableSkin().getSkinnable();
         if (control instanceof TableView) {
             resizeColumnToFitContent((TableView)control, (TableColumn)tc, this.getTableSkin(), maxRows);
@@ -670,11 +672,14 @@
                 maxWidth = tc.getMaxWidth();
             }
 
             int size = tc.getColumns().size();
             if (size > 0) {
-                resizeColumnToFitContent(tc.getColumns().get(size - 1), maxRows);
+                TableColumnHeader columnHeader = getTableHeaderRow().getColumnHeaderFor(tc.getColumns().get(size - 1));
+                if (columnHeader != null) {
+                    columnHeader.resizeColumnToFitContent(maxRows);
+                }
                 return;
             }
 
             TableSkinUtils.resizeColumn(tableSkin, tc, Math.round(maxWidth - tc.getWidth()));
         } else {
@@ -749,11 +754,14 @@
                 maxWidth = tc.getMaxWidth();
             }
 
             int size = tc.getColumns().size();
             if (size > 0) {
-                resizeColumnToFitContent(tc.getColumns().get(size - 1), maxRows);
+                TableColumnHeader columnHeader = getTableHeaderRow().getColumnHeaderFor(tc.getColumns().get(size - 1));
+                if (columnHeader != null) {
+                    columnHeader.resizeColumnToFitContent(maxRows);
+                }
                 return;
             }
 
             TableSkinUtils.resizeColumn(tableSkin, tc, Math.round(maxWidth - tc.getWidth()));
         } else {
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/TableColumnHeaderTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/TableColumnHeaderTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/TableColumnHeaderTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/TableColumnHeaderTest.java
@@ -138,9 +138,9 @@
         public MyTableColumnHeader(final TableColumnBase tc) {
             super(tc);
         }
 
         public void resizeCol() {
-            resizeColumnToFitContent(getTableColumn(), -1);
+            resizeColumnToFitContent(-1);
         }
     }
 }
