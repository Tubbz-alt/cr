diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/NestedTableColumnHeader.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/NestedTableColumnHeader.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/NestedTableColumnHeader.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/NestedTableColumnHeader.java
@@ -23,32 +23,32 @@
  * questions.
  */
 
 package javafx.scene.control.skin;
 
-import com.sun.javafx.scene.control.skin.Utils;
-import javafx.beans.property.ObjectProperty;
-import javafx.collections.WeakListChangeListener;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.WeakHashMap;
-import java.util.concurrent.atomic.AtomicBoolean;
-
 import javafx.collections.FXCollections;
 import javafx.collections.ListChangeListener;
 import javafx.collections.ObservableList;
+import javafx.collections.WeakListChangeListener;
 import javafx.event.EventHandler;
 import javafx.geometry.NodeOrientation;
 import javafx.scene.Cursor;
 import javafx.scene.Node;
-import javafx.scene.control.*;
+import javafx.scene.control.ResizeFeaturesBase;
+import javafx.scene.control.TableColumnBase;
+import javafx.scene.control.TableView;
+import javafx.scene.control.TreeTableView;
 import javafx.scene.input.MouseEvent;
 import javafx.scene.paint.Color;
 import javafx.scene.shape.Rectangle;
 import javafx.util.Callback;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.WeakHashMap;
+
 /**
  * <p>This class is used to construct the header of a TableView. We take the approach
  * that every TableView header is nested - even if it isn't. This allows for us
  * to use the same code for building a single row of TableColumns as we would
  * with a heavily nested sequences of TableColumns. Because of this, the
@@ -163,11 +163,15 @@
         me.consume();
 
         if (me.getClickCount() == 2 && me.isPrimaryButtonDown()) {
             // the user wants to resize the column such that its
             // width is equal to the widest element in the column
-            TableSkinUtils.resizeColumnToFitContent(header.getTableSkin(), column, -1);
+            TableHeaderRow tableHeader = header.getTableHeaderRow();
+            TableColumnHeader columnHeader = tableHeader.getColumnHeaderFor(column);
+            if (columnHeader != null) {
+                columnHeader.resizeColumnToFitContent(-1);
+            }
         } else {
             // rather than refer to the rect variable, we just grab
             // it from the source to prevent a small memory leak.
             Rectangle innerRect = (Rectangle) me.getSource();
             double startX = header.getTableHeaderRow().sceneToLocal(innerRect.localToScene(innerRect.getBoundsInLocal())).getMinX() + 2;
