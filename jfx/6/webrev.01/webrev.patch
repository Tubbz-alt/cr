diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/NestedTableColumnHeader.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/NestedTableColumnHeader.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/NestedTableColumnHeader.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/NestedTableColumnHeader.java
@@ -23,32 +23,32 @@
  * questions.
  */
 
 package javafx.scene.control.skin;
 
-import com.sun.javafx.scene.control.skin.Utils;
-import javafx.beans.property.ObjectProperty;
-import javafx.collections.WeakListChangeListener;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.WeakHashMap;
-import java.util.concurrent.atomic.AtomicBoolean;
-
 import javafx.collections.FXCollections;
 import javafx.collections.ListChangeListener;
 import javafx.collections.ObservableList;
+import javafx.collections.WeakListChangeListener;
 import javafx.event.EventHandler;
 import javafx.geometry.NodeOrientation;
 import javafx.scene.Cursor;
 import javafx.scene.Node;
-import javafx.scene.control.*;
+import javafx.scene.control.ResizeFeaturesBase;
+import javafx.scene.control.TableColumnBase;
+import javafx.scene.control.TableView;
+import javafx.scene.control.TreeTableView;
 import javafx.scene.input.MouseEvent;
 import javafx.scene.paint.Color;
 import javafx.scene.shape.Rectangle;
 import javafx.util.Callback;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.WeakHashMap;
+
 /**
  * <p>This class is used to construct the header of a TableView. We take the approach
  * that every TableView header is nested - even if it isn't. This allows for us
  * to use the same code for building a single row of TableColumns as we would
  * with a heavily nested sequences of TableColumns. Because of this, the
@@ -163,11 +163,15 @@
         me.consume();
 
         if (me.getClickCount() == 2 && me.isPrimaryButtonDown()) {
             // the user wants to resize the column such that its
             // width is equal to the widest element in the column
-            TableSkinUtils.resizeColumnToFitContent(header.getTableSkin(), column, -1);
+            TableHeaderRow tableHeader = header.getTableHeaderRow();
+            TableColumnHeader columnHeader = tableHeader.getColumnHeaderFor(column);
+            if(columnHeader != null){
+                columnHeader.resizeColumnToFitContent(-1);
+            }
         } else {
             // rather than refer to the rect variable, we just grab
             // it from the source to prevent a small memory leak.
             Rectangle innerRect = (Rectangle) me.getSource();
             double startX = header.getTableHeaderRow().sceneToLocal(innerRect.localToScene(innerRect.getBoundsInLocal())).getMinX() + 2;
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableColumnHeader.java
@@ -26,48 +26,52 @@
 package javafx.scene.control.skin;
 
 import com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler;
 import com.sun.javafx.scene.control.Properties;
 import com.sun.javafx.scene.control.TableColumnBaseHelper;
+import com.sun.javafx.scene.control.TreeTableViewBackingList;
+import com.sun.javafx.scene.control.skin.Utils;
 import javafx.beans.property.DoubleProperty;
 import javafx.beans.property.ReadOnlyObjectProperty;
 import javafx.beans.property.ReadOnlyObjectWrapper;
 import javafx.beans.value.WritableValue;
 import javafx.collections.ListChangeListener;
 import javafx.collections.ObservableList;
 import javafx.collections.WeakListChangeListener;
-import javafx.css.CssMetaData;
-import javafx.css.PseudoClass;
-import javafx.css.Styleable;
-import javafx.css.StyleableDoubleProperty;
-import javafx.css.StyleableProperty;
+import javafx.css.*;
+import javafx.css.converter.SizeConverter;
 import javafx.event.EventHandler;
 import javafx.geometry.HPos;
 import javafx.geometry.Insets;
 import javafx.geometry.Pos;
 import javafx.geometry.VPos;
 import javafx.scene.AccessibleAttribute;
 import javafx.scene.AccessibleRole;
 import javafx.scene.Node;
 import javafx.scene.control.ContextMenu;
 import javafx.scene.control.Label;
+import javafx.scene.control.TableCell;
 import javafx.scene.control.TableColumn;
 import javafx.scene.control.TableColumnBase;
+import javafx.scene.control.TableView;
+import javafx.scene.control.TreeTableCell;
+import javafx.scene.control.TreeTableColumn;
+import javafx.scene.control.TreeTableRow;
+import javafx.scene.control.TreeTableView;
 import javafx.scene.input.ContextMenuEvent;
 import javafx.scene.input.MouseEvent;
 import javafx.scene.layout.GridPane;
 import javafx.scene.layout.HBox;
 import javafx.scene.layout.Priority;
 import javafx.scene.layout.Region;
+import javafx.util.Callback;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
-import javafx.css.converter.SizeConverter;
-
 import static com.sun.javafx.scene.control.TableColumnSortTypeWrapper.getSortTypeName;
 import static com.sun.javafx.scene.control.TableColumnSortTypeWrapper.getSortTypeProperty;
 import static com.sun.javafx.scene.control.TableColumnSortTypeWrapper.isAscending;
 import static com.sun.javafx.scene.control.TableColumnSortTypeWrapper.isDescending;
 import static com.sun.javafx.scene.control.TableColumnSortTypeWrapper.setSortType;
@@ -527,11 +531,11 @@
         final int n = 30;
         if (! autoSizeComplete) {
             if (getTableColumn() == null || getTableColumn().getWidth() != DEFAULT_COLUMN_WIDTH || getScene() == null) {
                 return;
             }
-            doColumnAutoSize(getTableColumn(), n);
+            doColumnAutoSize(n);
             autoSizeComplete = true;
         }
     }
 
     void dispose() {
@@ -579,17 +583,191 @@
             // put together the grid
             updateSortGrid();
         }
     }
 
-    private void doColumnAutoSize(TableColumnBase<?,?> column, int cellsToMeasure) {
-        double prefWidth = column.getPrefWidth();
+    private void doColumnAutoSize(int cellsToMeasure) {
+        double prefWidth = getTableColumn().getPrefWidth();
 
         // if the prefWidth has been set, we do _not_ autosize columns
         if (prefWidth == DEFAULT_COLUMN_WIDTH) {
-            TableSkinUtils.resizeColumnToFitContent(getTableSkin(), column, cellsToMeasure);
-//            getTableViewSkin().resizeColumnToFitContent(column, cellsToMeasure);
+            resizeColumnToFitContent(cellsToMeasure);
+        }
+    }
+
+    /**
+     * Resizes this {@code TableColumnHeader}'s column based on content of header and content of cells. This
+     * implementation measures the preferred width of the header, the preferred width of the first {@code maxRow} cells
+     * and sizes the column to the maximum width of all measured values. Subclass can either call this method or
+     * override it (no need to call {@code super()}) to provide their custom implementation (exclude headers, exclude
+     * null content, use min).
+     *
+     * @param maxRows the number of rows considered when resizing. If -1 is given, all rows are considered.
+     * @since 14
+     */
+    protected void resizeColumnToFitContent(int maxRows) {
+        TableColumnBase<?, ?> tc = getTableColumn();
+        if (!tc.isResizable()) return;
+
+        Object control = this.getTableSkin().getSkinnable();
+        if (control instanceof TableView) {
+            resizeColumnToFitContent((TableView)control, (TableColumn)tc, this.getTableSkin(), maxRows);
+        } else if (control instanceof TreeTableView) {
+            resizeColumnToFitContent((TreeTableView)control, (TreeTableColumn)tc, this.getTableSkin(), maxRows);
+        }
+    }
+
+    private <T,S> void resizeColumnToFitContent(TableView<T> tv, TableColumn<T, S> tc, TableViewSkinBase tableSkin, int maxRows) {
+        List<?> items = tv.getItems();
+        if (items == null || items.isEmpty()) return;
+
+        Callback/*<TableColumn<T, ?>, TableCell<T,?>>*/ cellFactory = tc.getCellFactory();
+        if (cellFactory == null) return;
+
+        TableCell<T,?> cell = (TableCell<T, ?>) cellFactory.call(tc);
+        if (cell == null) return;
+
+        // set this property to tell the TableCell we want to know its actual
+        // preferred width, not the width of the associated TableColumnBase
+        cell.getProperties().put(Properties.DEFER_TO_PARENT_PREF_WIDTH, Boolean.TRUE);
+
+        // determine cell padding
+        double padding = 10;
+        Node n = cell.getSkin() == null ? null : cell.getSkin().getNode();
+        if (n instanceof Region) {
+            Region r = (Region) n;
+            padding = r.snappedLeftInset() + r.snappedRightInset();
+        }
+
+        int rows = maxRows == -1 ? items.size() : Math.min(items.size(), maxRows);
+        double maxWidth = 0;
+        for (int row = 0; row < rows; row++) {
+            cell.updateTableColumn(tc);
+            cell.updateTableView(tv);
+            cell.updateIndex(row);
+
+            if ((cell.getText() != null && !cell.getText().isEmpty()) || cell.getGraphic() != null) {
+                tableSkin.getChildren().add(cell);
+                cell.applyCss();
+                maxWidth = Math.max(maxWidth, cell.prefWidth(-1));
+                tableSkin.getChildren().remove(cell);
+            }
+        }
+
+        // dispose of the cell to prevent it retaining listeners (see RT-31015)
+        cell.updateIndex(-1);
+
+        // RT-36855 - take into account the column header text / graphic widths.
+        // Magic 10 is to allow for sort arrow to appear without text truncation.
+        TableColumnHeader header = tableSkin.getTableHeaderRow().getColumnHeaderFor(tc);
+        double headerTextWidth = Utils.computeTextWidth(header.label.getFont(), tc.getText(), -1);
+        Node graphic = header.label.getGraphic();
+        double headerGraphicWidth = graphic == null ? 0 : graphic.prefWidth(-1) + header.label.getGraphicTextGap();
+        double headerWidth = headerTextWidth + headerGraphicWidth + 10 + header.snappedLeftInset() + header.snappedRightInset();
+        maxWidth = Math.max(maxWidth, headerWidth);
+
+        // RT-23486
+        maxWidth += padding;
+        if (tv.getColumnResizePolicy() == TableView.CONSTRAINED_RESIZE_POLICY && tv.getWidth() > 0) {
+            if (maxWidth > tc.getMaxWidth()) {
+                maxWidth = tc.getMaxWidth();
+            }
+
+            int size = tc.getColumns().size();
+            if (size > 0) {
+                TableColumnHeader columnHeader = getTableHeaderRow().getColumnHeaderFor(tc.getColumns().get(size - 1));
+                if (columnHeader != null) {
+                    columnHeader.resizeColumnToFitContent(maxRows);
+                }
+                return;
+            }
+
+            TableSkinUtils.resizeColumn(tableSkin, tc, Math.round(maxWidth - tc.getWidth()));
+        } else {
+            TableColumnBaseHelper.setWidth(tc, maxWidth);
+        }
+    }
+
+    private <T,S> void resizeColumnToFitContent(TreeTableView<T> ttv, TreeTableColumn<T, S> tc, TableViewSkinBase tableSkin, int maxRows) {
+        List<?> items = new TreeTableViewBackingList(ttv);
+        if (items == null || items.isEmpty()) return;
+
+        Callback cellFactory = tc.getCellFactory();
+        if (cellFactory == null) return;
+
+        TreeTableCell<T,S> cell = (TreeTableCell) cellFactory.call(tc);
+        if (cell == null) return;
+
+        // set this property to tell the TableCell we want to know its actual
+        // preferred width, not the width of the associated TableColumnBase
+        cell.getProperties().put(Properties.DEFER_TO_PARENT_PREF_WIDTH, Boolean.TRUE);
+
+        // determine cell padding
+        double padding = 10;
+        Node n = cell.getSkin() == null ? null : cell.getSkin().getNode();
+        if (n instanceof Region) {
+            Region r = (Region) n;
+            padding = r.snappedLeftInset() + r.snappedRightInset();
+        }
+
+        TreeTableRow<T> treeTableRow = new TreeTableRow<>();
+        treeTableRow.updateTreeTableView(ttv);
+
+        int rows = maxRows == -1 ? items.size() : Math.min(items.size(), maxRows);
+        double maxWidth = 0;
+        for (int row = 0; row < rows; row++) {
+            treeTableRow.updateIndex(row);
+            treeTableRow.updateTreeItem(ttv.getTreeItem(row));
+
+            cell.updateTreeTableColumn(tc);
+            cell.updateTreeTableView(ttv);
+            cell.updateTreeTableRow(treeTableRow);
+            cell.updateIndex(row);
+
+            if ((cell.getText() != null && !cell.getText().isEmpty()) || cell.getGraphic() != null) {
+                tableSkin.getChildren().add(cell);
+                cell.applyCss();
+
+                double w = cell.prefWidth(-1);
+
+                maxWidth = Math.max(maxWidth, w);
+                tableSkin.getChildren().remove(cell);
+            }
+        }
+
+        // dispose of the cell to prevent it retaining listeners (see RT-31015)
+        cell.updateIndex(-1);
+
+        // RT-36855 - take into account the column header text / graphic widths.
+        // Magic 10 is to allow for sort arrow to appear without text truncation.
+        TableColumnHeader header = tableSkin.getTableHeaderRow().getColumnHeaderFor(tc);
+        double headerTextWidth = Utils.computeTextWidth(header.label.getFont(), tc.getText(), -1);
+        Node graphic = header.label.getGraphic();
+        double headerGraphicWidth = graphic == null ? 0 : graphic.prefWidth(-1) + header.label.getGraphicTextGap();
+        double headerWidth = headerTextWidth + headerGraphicWidth + 10 + header.snappedLeftInset() + header.snappedRightInset();
+        maxWidth = Math.max(maxWidth, headerWidth);
+
+        // RT-23486
+        maxWidth += padding;
+        if (ttv.getColumnResizePolicy() == TreeTableView.CONSTRAINED_RESIZE_POLICY && ttv.getWidth() > 0) {
+
+            if (maxWidth > tc.getMaxWidth()) {
+                maxWidth = tc.getMaxWidth();
+            }
+
+            int size = tc.getColumns().size();
+            if (size > 0) {
+                TableColumnHeader columnHeader = getTableHeaderRow().getColumnHeaderFor(tc.getColumns().get(size - 1));
+                if (columnHeader != null) {
+                    columnHeader.resizeColumnToFitContent(maxRows);
+                }
+                return;
+            }
+
+            TableSkinUtils.resizeColumn(tableSkin, tc, Math.round(maxWidth - tc.getWidth()));
+        } else {
+            TableColumnBaseHelper.setWidth(tc, maxWidth);
         }
     }
 
     private void updateSortPosition() {
         this.sortPos = ! getTableColumn().isSortable() ? -1 : getSortPosition();
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableSkinUtils.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableSkinUtils.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableSkinUtils.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TableSkinUtils.java
@@ -69,183 +69,10 @@
             return ((TreeTableView)control).resizeColumn((TreeTableColumn)tc, delta);
         }
         return false;
     }
 
-    /*
-     * FIXME: Naive implementation ahead
-     * Attempts to resize column based on the pref width of all items contained
-     * in this column. This can be potentially very expensive if the number of
-     * rows is large.
-     */
-    /** {@inheritDoc} */
-    public static void resizeColumnToFitContent(TableViewSkinBase<?,?,?,?,?> tableSkin, TableColumnBase<?,?> tc, int maxRows) {
-        if (!tc.isResizable()) return;
-
-        Object control = tableSkin.getSkinnable();
-        if (control instanceof TableView) {
-            resizeColumnToFitContent((TableView)control, (TableColumn)tc, tableSkin, maxRows);
-        } else if (control instanceof TreeTableView) {
-            resizeColumnToFitContent((TreeTableView)control, (TreeTableColumn)tc, tableSkin, maxRows);
-        }
-    }
-
-    private static <T,S> void resizeColumnToFitContent(TableView<T> tv, TableColumn<T, S> tc, TableViewSkinBase tableSkin, int maxRows) {
-        List<?> items = tv.getItems();
-        if (items == null || items.isEmpty()) return;
-
-        Callback/*<TableColumn<T, ?>, TableCell<T,?>>*/ cellFactory = tc.getCellFactory();
-        if (cellFactory == null) return;
-
-        TableCell<T,?> cell = (TableCell<T, ?>) cellFactory.call(tc);
-        if (cell == null) return;
-
-        // set this property to tell the TableCell we want to know its actual
-        // preferred width, not the width of the associated TableColumnBase
-        cell.getProperties().put(Properties.DEFER_TO_PARENT_PREF_WIDTH, Boolean.TRUE);
-
-        // determine cell padding
-        double padding = 10;
-        Node n = cell.getSkin() == null ? null : cell.getSkin().getNode();
-        if (n instanceof Region) {
-            Region r = (Region) n;
-            padding = r.snappedLeftInset() + r.snappedRightInset();
-        }
-
-        int rows = maxRows == -1 ? items.size() : Math.min(items.size(), maxRows);
-        double maxWidth = 0;
-        for (int row = 0; row < rows; row++) {
-            cell.updateTableColumn(tc);
-            cell.updateTableView(tv);
-            cell.updateIndex(row);
-
-            if ((cell.getText() != null && !cell.getText().isEmpty()) || cell.getGraphic() != null) {
-                tableSkin.getChildren().add(cell);
-                cell.applyCss();
-                maxWidth = Math.max(maxWidth, cell.prefWidth(-1));
-                tableSkin.getChildren().remove(cell);
-            }
-        }
-
-        // dispose of the cell to prevent it retaining listeners (see RT-31015)
-        cell.updateIndex(-1);
-
-        // RT-36855 - take into account the column header text / graphic widths.
-        // Magic 10 is to allow for sort arrow to appear without text truncation.
-        TableColumnHeader header = tableSkin.getTableHeaderRow().getColumnHeaderFor(tc);
-        double headerTextWidth = Utils.computeTextWidth(header.label.getFont(), tc.getText(), -1);
-        Node graphic = header.label.getGraphic();
-        double headerGraphicWidth = graphic == null ? 0 : graphic.prefWidth(-1) + header.label.getGraphicTextGap();
-        double headerWidth = headerTextWidth + headerGraphicWidth + 10 + header.snappedLeftInset() + header.snappedRightInset();
-        maxWidth = Math.max(maxWidth, headerWidth);
-
-        // RT-23486
-        maxWidth += padding;
-        if (tv.getColumnResizePolicy() == TableView.CONSTRAINED_RESIZE_POLICY && tv.getWidth() > 0) {
-
-            if (maxWidth > tc.getMaxWidth()) {
-                maxWidth = tc.getMaxWidth();
-            }
-
-            int size = tc.getColumns().size();
-            if (size > 0) {
-                resizeColumnToFitContent(tableSkin, tc.getColumns().get(size - 1), maxRows);
-                return;
-            }
-
-            resizeColumn(tableSkin, tc, Math.round(maxWidth - tc.getWidth()));
-        } else {
-            TableColumnBaseHelper.setWidth(tc, maxWidth);
-        }
-    }
-
-
-    /*
-     * FIXME: Naive implementation ahead
-     * Attempts to resize column based on the pref width of all items contained
-     * in this column. This can be potentially very expensive if the number of
-     * rows is large.
-     */
-    private static <T,S> void resizeColumnToFitContent(TreeTableView<T> ttv, TreeTableColumn<T,S> tc, TableViewSkinBase tableSkin, int maxRows) {
-        List<?> items = new TreeTableViewBackingList(ttv);
-        if (items == null || items.isEmpty()) return;
-
-        Callback cellFactory = tc.getCellFactory();
-        if (cellFactory == null) return;
-
-        TreeTableCell<T,S> cell = (TreeTableCell) cellFactory.call(tc);
-        if (cell == null) return;
-
-        // set this property to tell the TableCell we want to know its actual
-        // preferred width, not the width of the associated TableColumnBase
-        cell.getProperties().put(Properties.DEFER_TO_PARENT_PREF_WIDTH, Boolean.TRUE);
-
-        // determine cell padding
-        double padding = 10;
-        Node n = cell.getSkin() == null ? null : cell.getSkin().getNode();
-        if (n instanceof Region) {
-            Region r = (Region) n;
-            padding = r.snappedLeftInset() + r.snappedRightInset();
-        }
-
-        TreeTableRow<T> treeTableRow = new TreeTableRow<>();
-        treeTableRow.updateTreeTableView(ttv);
-
-        int rows = maxRows == -1 ? items.size() : Math.min(items.size(), maxRows);
-        double maxWidth = 0;
-        for (int row = 0; row < rows; row++) {
-            treeTableRow.updateIndex(row);
-            treeTableRow.updateTreeItem(ttv.getTreeItem(row));
-
-            cell.updateTreeTableColumn(tc);
-            cell.updateTreeTableView(ttv);
-            cell.updateTreeTableRow(treeTableRow);
-            cell.updateIndex(row);
-
-            if ((cell.getText() != null && !cell.getText().isEmpty()) || cell.getGraphic() != null) {
-                tableSkin.getChildren().add(cell);
-                cell.applyCss();
-
-                double w = cell.prefWidth(-1);
-
-                maxWidth = Math.max(maxWidth, w);
-                tableSkin.getChildren().remove(cell);
-            }
-        }
-
-        // dispose of the cell to prevent it retaining listeners (see RT-31015)
-        cell.updateIndex(-1);
-
-        // RT-36855 - take into account the column header text / graphic widths.
-        // Magic 10 is to allow for sort arrow to appear without text truncation.
-        TableColumnHeader header = tableSkin.getTableHeaderRow().getColumnHeaderFor(tc);
-        double headerTextWidth = Utils.computeTextWidth(header.label.getFont(), tc.getText(), -1);
-        Node graphic = header.label.getGraphic();
-        double headerGraphicWidth = graphic == null ? 0 : graphic.prefWidth(-1) + header.label.getGraphicTextGap();
-        double headerWidth = headerTextWidth + headerGraphicWidth + 10 + header.snappedLeftInset() + header.snappedRightInset();
-        maxWidth = Math.max(maxWidth, headerWidth);
-
-        // RT-23486
-        maxWidth += padding;
-        if (ttv.getColumnResizePolicy() == TreeTableView.CONSTRAINED_RESIZE_POLICY && ttv.getWidth() > 0) {
-
-            if (maxWidth > tc.getMaxWidth()) {
-                maxWidth = tc.getMaxWidth();
-            }
-
-            int size = tc.getColumns().size();
-            if (size > 0) {
-                resizeColumnToFitContent(tableSkin, tc.getColumns().get(size - 1), maxRows);
-                return;
-            }
-
-            resizeColumn(tableSkin, tc, Math.round(maxWidth - tc.getWidth()));
-        } else {
-            TableColumnBaseHelper.setWidth(tc, maxWidth);
-        }
-    }
-
     public static ObjectProperty<Callback<ResizeFeaturesBase,Boolean>> columnResizePolicyProperty(TableViewSkinBase<?,?,?,?,?> tableSkin) {
         Object control = tableSkin.getSkinnable();
         if (control instanceof TableView) {
             return ((TableView)control).columnResizePolicyProperty();
         } else if (control instanceof TreeTableView) {
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/TableColumnHeaderTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/TableColumnHeaderTest.java
--- /dev/null
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/TableColumnHeaderTest.java
@@ -0,0 +1,146 @@
+/*
+ * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.javafx.scene.control.skin;
+
+import com.sun.javafx.tk.Toolkit;
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import javafx.event.EventType;
+import javafx.scene.Scene;
+import javafx.scene.control.Skin;
+import javafx.scene.control.TableColumn;
+import javafx.scene.control.TableColumnBase;
+import javafx.scene.control.TablePosition;
+import javafx.scene.control.TableView;
+import javafx.scene.control.cell.PropertyValueFactory;
+import javafx.scene.control.skin.NestedTableColumnHeader;
+import javafx.scene.control.skin.TableColumnHeader;
+import javafx.scene.control.skin.TableHeaderRow;
+import javafx.scene.control.skin.TableViewSkin;
+import javafx.stage.Stage;
+import org.junit.Before;
+import org.junit.Test;
+import test.com.sun.javafx.scene.control.test.Person;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+public class TableColumnHeaderTest {
+
+    private MyTableColumnHeader tableColumnHeader;
+
+    @Before
+    public void beforeTest() {
+        tableColumnHeader = null;
+    }
+
+    @Test
+    public void test_resizeColumnToFitContent() {
+        ObservableList<Person> model = FXCollections.observableArrayList(
+                new Person("Humphrey McPhee", 76),
+                new Person("Justice Caldwell", 30),
+                new Person("Orrin Davies", 30),
+                new Person("Emma Wilson", 8)
+        );
+        TableColumn<Person, String> column = new TableColumn<>("Col ");
+        column.setCellValueFactory(new PropertyValueFactory<Person, String>("firstName"));
+        TableView<Person> tableView = new TableView<>(model) {
+            @Override
+            protected Skin<?> createDefaultSkin() {
+                return new TableViewSkin(this) {
+                    @Override
+                    protected TableHeaderRow createTableHeaderRow() {
+                        return new TableHeaderRow(this) {
+                            @Override
+                            protected NestedTableColumnHeader createRootHeader() {
+                                return new NestedTableColumnHeader(null) {
+                                    @Override
+                                    protected TableColumnHeader createTableColumnHeader(TableColumnBase col) {
+                                        tableColumnHeader = new MyTableColumnHeader(column);
+                                        return col == null || col.getColumns().isEmpty() || col == getTableColumn() ?
+                                                tableColumnHeader :
+                                                new NestedTableColumnHeader(col);
+
+                                    }
+                                };
+                            }
+                        };
+                    }
+                };
+            }
+        };
+
+        tableView.getColumns().add(column);
+
+        Toolkit tk = Toolkit.getToolkit();
+
+        Scene scene = new Scene(tableView);
+        Stage stage = new Stage();
+        stage.setScene(scene);
+        stage.setWidth(500);
+        stage.setHeight(400);
+        stage.centerOnScreen();
+        stage.show();
+
+        tk.firePulse();
+
+        double width = column.getWidth();
+        tableColumnHeader.resizeCol();
+        assertEquals("Width must be the same",
+                width, column.getWidth(), 0.001);
+
+        EventType<TableColumn.CellEditEvent<Person, String>> eventType = TableColumn.editCommitEvent();
+        column.getOnEditCommit().handle(new TableColumn.CellEditEvent<Person, String>(
+                tableView, new TablePosition<Person, String>(tableView, 0, column), (EventType) eventType, "This is a big text inside that column"));
+        tableColumnHeader.resizeCol();
+        assertTrue("Column width must be greater",
+                width < column.getWidth());
+
+        column.getOnEditCommit().handle(new TableColumn.CellEditEvent<Person, String>(
+                tableView, new TablePosition<Person, String>(tableView, 0, column), (EventType) eventType, "small"));
+        column.getOnEditCommit().handle(new TableColumn.CellEditEvent<Person, String>(
+                tableView, new TablePosition<Person, String>(tableView, 1, column), (EventType) eventType, "small"));
+        column.getOnEditCommit().handle(new TableColumn.CellEditEvent<Person, String>(
+                tableView, new TablePosition<Person, String>(tableView, 2, column), (EventType) eventType, "small"));
+        column.getOnEditCommit().handle(new TableColumn.CellEditEvent<Person, String>(
+                tableView, new TablePosition<Person, String>(tableView, 3, column), (EventType) eventType, "small"));
+
+        tableColumnHeader.resizeCol();
+        assertTrue("Column width must be smaller",
+                width > column.getWidth());
+    }
+
+    private class MyTableColumnHeader extends TableColumnHeader {
+
+        public MyTableColumnHeader(final TableColumnBase tc) {
+            super(tc);
+        }
+
+        public void resizeCol() {
+            resizeColumnToFitContent(-1);
+        }
+    }
+}
