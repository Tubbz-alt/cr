diff a/modules/javafx.controls/src/main/java/javafx/scene/control/ButtonBar.java b/modules/javafx.controls/src/main/java/javafx/scene/control/ButtonBar.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/ButtonBar.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/ButtonBar.java
@@ -50,32 +50,32 @@
  * method, placed inside a ButtonBar (via the {@link #getButtons()} list), and will
  * then be positioned relative to all other nodes in the button list based on their
  * annotations, as well as the overarching
  * {@link #buttonOrderProperty() button order} specified for the ButtonBar.
  *
- * <h3>Uniform button sizing</h3>
+ * <h2>Uniform button sizing</h2>
  * <p>By default all buttons are uniformly sized in a ButtonBar, meaning that all
  * buttons take the width of the widest button. It is possible to opt-out of this
  * on a per-button basis, but calling the {@link #setButtonUniformSize(Node, boolean)} method with
  * a boolean value of false.
  *
  * <p>If a button is excluded from uniform sizing, it is both excluded from
  * being resized away from its preferred size, and also excluded from the
  * measuring process, so its size will not influence the maximum size calculated
  * for all buttons in the ButtonBar.
  *
- * <h3>Screenshots</h3>
+ * <h2>Screenshots</h2>
  * <p>Because a ButtonBar comes with built-in support for Windows, Mac OS
  * and Linux, there are three screenshots shown below, with the same buttons
  * laid out on each of the three operating systems.
  *
  * <p>
  * <strong>Windows:</strong><p><img src="doc-files/buttonBar-windows.png" alt=""></p>
  * <strong>Mac OS:</strong><p><img src="doc-files/buttonBar-mac.png" alt=""></p>
  * <strong>Linux:</strong><p><img src="doc-files/buttonBar-linux.png" alt=""></p>
  *
- * <h3>Code Samples</h3>
+ * <h2>Code Samples</h2>
  * <p>Instantiating and using the ButtonBar is simple, simply do the following:
  *
  * <pre>
  * {@code
  * // Create the ButtonBar instance
