diff a/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java b/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java
@@ -185,22 +185,22 @@
  *         textProperty().bind(itemProperty());
  *     }
  * }
  * </pre>
  *
- * <h3>Key Design Goals</h3>
+ * <h2>Key Design Goals</h2>
  * <ul>
  *   <li>Both time and memory efficient for large data sets</li>
  *   <li>Easy to build and use libraries for custom cells</li>
  *   <li>Easy to customize cell visuals</li>
  *   <li>Easy to customize display formatting (12.34 as $12.34 or 1234% etc)</li>
  *   <li>Easy to extend for custom visuals</li>
  *   <li>Easy to have "panels" of data for the visuals</li>
  *   <li>Easy to animate the cell size or other properties</li>
  * </ul>
  *
- * <h3>Key Use Cases</h3>
+ * <h2>Key Use Cases</h2>
  * Following are a number of key use cases used to drive the Cell API design,
  * along with code examples showing how those use cases are satisfied by this
  * API. This is by no means to be considered the definitive list of capabilities
  * or features supported, but rather, to provide some guidance as to how to use
  * the Cell API. The examples below are focused on the ListView, but the same
@@ -260,11 +260,11 @@
  *
  * .list-cell .negative {
  *   -fx-text-fill: red;
  * }</pre>
  *
- * <h3>Editing</h3>
+ * <h2>Editing</h2>
  * <p>Most virtualized controls that use the Cell architecture (e.g. {@link ListView},
  * {@link TreeView}, {@link TableView} and {@link TreeTableView}) all support
  * the notion of editing values directly via the cell. You can learn more about
  * the control-specific details by going to the 'editing' section in the class
  * documentation for the controls linked above. The remainder of this section
