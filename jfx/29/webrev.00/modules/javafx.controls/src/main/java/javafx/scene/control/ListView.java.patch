diff a/modules/javafx.controls/src/main/java/javafx/scene/control/ListView.java b/modules/javafx.controls/src/main/java/javafx/scene/control/ListView.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/ListView.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/ListView.java
@@ -86,11 +86,11 @@
  * as the supporting classes (mentioned below), type-safe. In addition, making
  * use of the generic type supports substantially simplified development of applications
  * making use of ListView, as all modern IDEs are able to auto-complete far
  * more successfully with the additional type information.
  *
- * <h3>Populating a ListView</h3>
+ * <h2>Populating a ListView</h2>
  * <p>A simple example of how to create and populate a ListView of names (Strings)
  * is shown here:
  *
  * <pre> {@code ObservableList<String> names = FXCollections.observableArrayList(
  *          "Julia", "Ian", "Sue", "Matthew", "Hannah", "Stephan", "Denise");
@@ -120,11 +120,11 @@
  *
  * The issue with the approach shown above is that the content list is being
  * copied into the items list - meaning that subsequent changes to the content
  * list are not observed, and will not be reflected visually within the ListView.
  *
- * <h3>ListView Selection / Focus APIs</h3>
+ * <h2>ListView Selection / Focus APIs</h2>
  * <p>To track selection and focus, it is necessary to become familiar with the
  * {@link SelectionModel} and {@link FocusModel} classes. A ListView has at most
  * one instance of each of these classes, available from
  * {@link #selectionModelProperty() selectionModel} and
  * {@link #focusModelProperty() focusModel} properties respectively.
@@ -140,18 +140,18 @@
  * multiple selection in a default ListView instance, it is therefore necessary
  * to do the following:
  *
  * <pre> {@code listView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);}</pre>
  *
- * <h3>Customizing ListView Visuals</h3>
+ * <h2>Customizing ListView Visuals</h2>
  * <p>The visuals of the ListView can be entirely customized by replacing the
  * default {@link #cellFactoryProperty() cell factory}. A cell factory is used to
  * generate {@link ListCell} instances, which are used to represent an item in the
  * ListView. See the {@link Cell} class documentation for a more complete
  * description of how to write custom Cells.
  *
- * <h3>Editing</h3>
+ * <h2>Editing</h2>
  * <p>This control supports inline editing of values, and this section attempts to
  * give an overview of the available APIs and how you should use them.</p>
  *
  * <p>Firstly, cell editing most commonly requires a different user interface
  * than when a cell is not being edited. This is the responsibility of the
