diff a/modules/javafx.graphics/src/main/java/javafx/scene/layout/AnchorPane.java b/modules/javafx.graphics/src/main/java/javafx/scene/layout/AnchorPane.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/layout/AnchorPane.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/layout/AnchorPane.java
@@ -40,11 +40,11 @@
  * unmanaged children are ignored for all layout calculations.</p>
  * <p>
  * AnchorPanes may be styled with backgrounds and borders using CSS.  See
  * {@link javafx.scene.layout.Region Region} superclass for details.</p>
  *
- * <h3>Anchor Constraints</h3>
+ * <h2>Anchor Constraints</h2>
  * <p>
  * The application sets anchor constraints on each child to configure the anchors
  * on one or more sides.  If a child is anchored on opposite sides (and is resizable), the
  * anchor pane will resize it to maintain both offsets, otherwise the anchor pane
  * will resize it to its preferred size.  If in the former case (anchored on opposite
@@ -73,11 +73,11 @@
  *     <b>AnchorPane.setTopAnchor(button, 10.0);
  *     AnchorPane.setRightAnchor(button, 10.0);</b>
  *     anchorPane.getChildren().addAll(list, button);
  * </code></pre>
  *
- * <h3>Resizable Range</h3>
+ * <h2>Resizable Range</h2>
  * <p>
  * An anchor pane's parent will resize the anchor pane within the anchor pane's resizable range
  * during layout.   By default the anchor pane computes this range based on its content
  * as outlined in the table below.
  * </p>
