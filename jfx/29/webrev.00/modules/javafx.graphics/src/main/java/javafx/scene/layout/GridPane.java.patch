diff a/modules/javafx.graphics/src/main/java/javafx/scene/layout/GridPane.java b/modules/javafx.graphics/src/main/java/javafx/scene/layout/GridPane.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/layout/GridPane.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/layout/GridPane.java
@@ -79,11 +79,11 @@
  * (0th node in back, last node in front).
  * <p>
  * GridPane may be styled with backgrounds and borders using CSS.  See
  * {@link javafx.scene.layout.Region Region} superclass for details.</p>
  *
- * <h3>Grid Constraints</h3>
+ * <h2>Grid Constraints</h2>
  * <p>
  * A child's placement within the grid is defined by it's layout constraints:
  * </p>
  *
  * <table border="1">
@@ -130,11 +130,11 @@
  *     <b>gridpane.add(new Button(), 1, 0);</b> // column=1 row=0
  *     <b>gridpane.add(new Label(), 2, 0);</b>  // column=2 row=0
  * </code></pre>
  *
  *
- * <h3>Row/Column Sizing</h3>
+ * <h2>Row/Column Sizing</h2>
  *
  * By default, rows and columns will be sized to fit their content;
  * a column will be wide enough to accommodate the widest child, a
  * row tall enough to fit the tallest child. However, if an application needs
  * to explicitly control the size of rows or columns, it may do so by adding
@@ -160,11 +160,11 @@
  * <p>
  * Note: Nodes spanning multiple rows/columns will be also size to the preferred sizes.
  * The affected rows/columns are resized by the following priority: grow priorities, last row.
  * This is with respect to row/column constraints.
  *
- * <h3>Percentage Sizing</h3>
+ * <h2>Percentage Sizing</h2>
  *
  * Alternatively, RowConstraints and ColumnConstraints allow the size to be specified
  * as a percentage of gridpane's available space:
  * <pre><code>
  *     GridPane gridpane = new GridPane();
@@ -179,19 +179,19 @@
  * <p>
  * Note that if the sum of the widthPercent (or heightPercent) values total greater than 100, the values will
  * be treated as weights.  e.g.  if 3 columns are each given a widthPercent of 50,
  * then each will be allocated 1/3 of the gridpane's available width (50/(50+50+50)).
  *
- * <h3>Mixing Size Types</h3>
+ * <h2>Mixing Size Types</h2>
  *
  * An application may freely mix the size-types of rows/columns (computed from content, fixed,
  * or percentage).  The percentage rows/columns will always be allocated space first
  * based on their percentage of the gridpane's available space (size minus insets and gaps).
  * The remaining space will be allocated to rows/columns given their minimum, preferred,
  * and maximum sizes and grow priorities.
  *
- * <h3>Resizable Range</h3>
+ * <h2>Resizable Range</h2>
  * <p>
  * A gridpane's parent will resize the gridpane within the gridpane's resizable range
  * during layout.   By default the gridpane computes this range based on its content
  * and row/column constraints as outlined in the table below.
  * </p>
@@ -225,11 +225,11 @@
  * <p>
  * GridPane does not clip its content by default, so it is possible that children's
  * bounds may extend outside its own bounds if a child's min size prevents it from
  * being fit within it space.</p>
  *
- * <h3>Optional Layout Constraints</h3>
+ * <h2>Optional Layout Constraints</h2>
  *
  * <p>
  * An application may set additional constraints on children to customize how the
  * child is sized and positioned within the layout area established by it's row/column
  * indices/spans:
