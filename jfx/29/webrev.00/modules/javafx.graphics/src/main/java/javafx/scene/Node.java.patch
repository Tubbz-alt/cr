diff a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
@@ -223,21 +223,21 @@
  * <p>
  * An application should not extend the Node class directly. Doing so may lead to
  * an UnsupportedOperationException being thrown.
  * </p>
  *
- * <h3>String ID</h3>
+ * <h2>String ID</h2>
  * <p>
  * Each node in the scene graph can be given a unique {@link #idProperty id}. This id is
  * much like the "id" attribute of an HTML tag in that it is up to the designer
  * and developer to ensure that the {@code id} is unique within the scene graph.
  * A convenience function called {@link #lookup(String)} can be used to find
  * a node with a unique id within the scene graph, or within a subtree of the
  * scene graph. The id can also be used identify nodes for applying styles; see
  * the CSS section below.
  *
- * <h3>Coordinate System</h3>
+ * <h2>Coordinate System</h2>
  * <p>
  * The {@code Node} class defines a traditional computer graphics "local"
  * coordinate system in which the {@code x} axis increases to the right and the
  * {@code y} axis increases downwards.  The concrete node classes for shapes
  * provide variables for defining the geometry and location of the shape
@@ -266,11 +266,11 @@
  * the transformed coordinates, not the local coordinates of the nodes.
  * The {@link javafx.scene.shape.Shape Shape} class describes some additional
  * important context-specific information about coordinate mapping and how
  * it can affect rendering.
  *
- * <h3>Transformations</h3>
+ * <h2>Transformations</h2>
  * <p>
  * Any {@code Node} can have transformations applied to it. These include
  * translation, rotation, scaling, or shearing.
  * <p>
  * A <b>translation</b> transformation is one which shifts the origin of the
@@ -323,11 +323,11 @@
  * <p>
  * Multiple transformations may be applied to a node by specifying an ordered
  * chain of transforms.  The order in which the transforms are applied is
  * defined by the ObservableList specified in the {@link #getTransforms transforms} variable.
  *
- * <h3>Bounding Rectangles</h3>
+ * <h2>Bounding Rectangles</h2>
  * <p>
  * Since every {@code Node} has transformations, every Node's geometric
  * bounding rectangle can be described differently depending on whether
  * transformations are accounted for or not.
  * <p>
@@ -379,11 +379,11 @@
  * {@code boundsInParent} and {@code boundsInLocal} are the same. </p>
  * <p> <img src="doc-files/bounds.png" alt="The rectangles are enclosed by their
  * respective bounds"> </p>
  *
  *
- * <h3>CSS</h3>
+ * <h2>CSS</h2>
  * <p>
  * The {@code Node} class contains {@code id}, {@code styleClass}, and
  * {@code style} variables that are used in styling this node from
  * CSS. The {@code id} and {@code styleClass} variables are used in
  * CSS style sheets to identify nodes to which styles should be
