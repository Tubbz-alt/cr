diff a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/ClipEnvelope.java b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/ClipEnvelope.java
--- a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/ClipEnvelope.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/ClipEnvelope.java
@@ -108,10 +108,14 @@
         }
     }
 
     protected abstract double calculateCurrentRate();
 
+    protected void setInternalCurrentRate(double currentRate) {
+        this.currentRate = currentRate;
+    }
+
     protected void setCurrentRate(double currentRate) {
         this.currentRate = currentRate;
         AnimationAccessor.getDefault().setCurrentRate(animation, currentRate);
     }
 
diff a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/FiniteClipEnvelope.java b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/FiniteClipEnvelope.java
--- a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/FiniteClipEnvelope.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/FiniteClipEnvelope.java
@@ -80,13 +80,11 @@
     public void setRate(double rate) {
         final boolean toggled = rate * this.rate < 0;
         final long newTicks = toggled? totalTicks - ticks : ticks;
         final Status status = animation.getStatus();
         if (status != Status.STOPPED) {
-            if (status == Status.RUNNING) {
-                setCurrentRate((Math.abs(currentRate - this.rate) < EPSILON) ? rate : -rate);
-            }
+            setInternalCurrentRate((Math.abs(currentRate - this.rate) < EPSILON) ? rate : -rate);
             deltaTicks = newTicks - Math.round((ticks - deltaTicks) * Math.abs(rate / this.rate));
             abortCurrentPulse();
         }
         ticks = newTicks;
         this.rate = rate;
diff a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/InfiniteClipEnvelope.java b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/InfiniteClipEnvelope.java
--- a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/InfiniteClipEnvelope.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/InfiniteClipEnvelope.java
@@ -68,13 +68,11 @@
 
     @Override
     public void setRate(double rate) {
         final Status status = animation.getStatus();
         if (status != Status.STOPPED) {
-            if (status == Status.RUNNING) {
-                setCurrentRate((Math.abs(currentRate - this.rate) < EPSILON) ? rate : -rate);
-            }
+            setInternalCurrentRate((Math.abs(currentRate - this.rate) < EPSILON) ? rate : -rate);
             deltaTicks = ticks - Math.round((ticks - deltaTicks) * Math.abs(rate / this.rate));
             if (rate * this.rate < 0) {
                 final long delta = 2 * cycleTicks - pos;
                 deltaTicks += delta;
                 ticks += delta;
diff a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelope.java b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelope.java
--- a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelope.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelope.java
@@ -35,13 +35,11 @@
 
     @Override
     public void setRate(double rate) {
         final Status status = animation.getStatus();
         if (status != Status.STOPPED) {
-            if (status == Status.RUNNING) {
-                setCurrentRate((Math.abs(currentRate - this.rate) < EPSILON) ? rate : -rate);
-            }
+            setInternalCurrentRate((Math.abs(currentRate - this.rate) < EPSILON) ? rate : -rate);
             deltaTicks = ticks - Math.round((ticks - deltaTicks) * rate / this.rate);
             abortCurrentPulse();
         }
         this.rate = rate;
     }
diff a/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationSetRateTest.java b/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationSetRateTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationSetRateTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationSetRateTest.java
@@ -369,6 +369,19 @@
         animation.setRate(0.5);
         assertAnimation(0.5, 0.0, Status.PAUSED, false);
         animation.play();
         assertAnimation(0.5, -0.5, Status.RUNNING, true);
     }
+
+    @Test
+    public void testFlipRateAndPlayForPausedNonEmbeddedAnimation() {
+        animation.setRate(0.2);
+        animation.doTimePulse(100);
+        animation.pause();
+        double timeBefore = animation.getCurrentTime().toMillis();
+        animation.setRate(-0.2);
+        animation.doTimePulse(100);
+        animation.pause();
+        double timeAfter = animation.getCurrentTime().toMillis();
+        assertTrue("Playing backwards should reduce the current ticks", timeAfter < timeBefore);
+    }
 }
