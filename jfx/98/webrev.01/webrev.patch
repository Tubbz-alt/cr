diff a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/ClipEnvelope.java b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/ClipEnvelope.java
--- a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/ClipEnvelope.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/ClipEnvelope.java
@@ -108,10 +108,14 @@
         }
     }
 
     protected abstract double calculateCurrentRate();
 
+    protected void setInternalCurrentRate(double currentRate) {
+        this.currentRate = currentRate;
+    }
+
     protected void setCurrentRate(double currentRate) {
         this.currentRate = currentRate;
         AnimationAccessor.getDefault().setCurrentRate(animation, currentRate);
     }
 
diff a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/FiniteClipEnvelope.java b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/FiniteClipEnvelope.java
--- a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/FiniteClipEnvelope.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/FiniteClipEnvelope.java
@@ -80,13 +80,11 @@
     public void setRate(double rate) {
         final boolean toggled = rate * this.rate < 0;
         final long newTicks = toggled? totalTicks - ticks : ticks;
         final Status status = animation.getStatus();
         if (status != Status.STOPPED) {
-            if (status == Status.RUNNING) {
-                setCurrentRate((Math.abs(currentRate - this.rate) < EPSILON) ? rate : -rate);
-            }
+            setInternalCurrentRate((Math.abs(currentRate - this.rate) < EPSILON) ? rate : -rate);
             deltaTicks = newTicks - Math.round((ticks - deltaTicks) * Math.abs(rate / this.rate));
             abortCurrentPulse();
         }
         ticks = newTicks;
         this.rate = rate;
diff a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/InfiniteClipEnvelope.java b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/InfiniteClipEnvelope.java
--- a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/InfiniteClipEnvelope.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/InfiniteClipEnvelope.java
@@ -68,13 +68,11 @@
 
     @Override
     public void setRate(double rate) {
         final Status status = animation.getStatus();
         if (status != Status.STOPPED) {
-            if (status == Status.RUNNING) {
-                setCurrentRate((Math.abs(currentRate - this.rate) < EPSILON) ? rate : -rate);
-            }
+            setInternalCurrentRate((Math.abs(currentRate - this.rate) < EPSILON) ? rate : -rate);
             deltaTicks = ticks - Math.round((ticks - deltaTicks) * Math.abs(rate / this.rate));
             if (rate * this.rate < 0) {
                 final long delta = 2 * cycleTicks - pos;
                 deltaTicks += delta;
                 ticks += delta;
diff a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelope.java b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelope.java
--- a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelope.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelope.java
@@ -35,13 +35,11 @@
 
     @Override
     public void setRate(double rate) {
         final Status status = animation.getStatus();
         if (status != Status.STOPPED) {
-            if (status == Status.RUNNING) {
-                setCurrentRate((Math.abs(currentRate - this.rate) < EPSILON) ? rate : -rate);
-            }
+            setInternalCurrentRate((Math.abs(currentRate - this.rate) < EPSILON) ? rate : -rate);
             deltaTicks = ticks - Math.round((ticks - deltaTicks) * rate / this.rate);
             abortCurrentPulse();
         }
         this.rate = rate;
     }
diff a/modules/javafx.graphics/src/shims/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelopeShim.java b/modules/javafx.graphics/src/shims/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelopeShim.java
--- a/modules/javafx.graphics/src/shims/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelopeShim.java
+++ b/modules/javafx.graphics/src/shims/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelopeShim.java
@@ -30,6 +30,9 @@
 
     public SingleLoopClipEnvelopeShim(Animation animation) {
         super(animation);
     }
 
+    public long getTicks() {
+        return ticks;
+    }
 }
diff a/modules/javafx.graphics/src/shims/java/javafx/animation/AnimationShim.java b/modules/javafx.graphics/src/shims/java/javafx/animation/AnimationShim.java
--- a/modules/javafx.graphics/src/shims/java/javafx/animation/AnimationShim.java
+++ b/modules/javafx.graphics/src/shims/java/javafx/animation/AnimationShim.java
@@ -46,10 +46,14 @@
 
     public ClipEnvelope get_clipEnvelope() {
         return clipEnvelope;
     }
 
+    public void setClipEnvelope(ClipEnvelope clipEnvelope) {
+        this.clipEnvelope= clipEnvelope;
+    }
+
     @Override
     public void doPause() {
         super.doPause();
     }
 
diff a/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationSetRateTest.java b/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationSetRateTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationSetRateTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationSetRateTest.java
@@ -30,10 +30,12 @@
 import javafx.util.Duration;
 import test.com.sun.scenario.animation.shared.ClipEnvelopeMock;
 import org.junit.Before;
 import org.junit.Test;
 
+import com.sun.scenario.animation.shared.SingleLoopClipEnvelopeShim;
+
 import static org.junit.Assert.*;
 
 public class AnimationSetRateTest {
 
     private static final double EPSILON = 1e-12;
@@ -369,6 +371,24 @@
         animation.setRate(0.5);
         assertAnimation(0.5, 0.0, Status.PAUSED, false);
         animation.play();
         assertAnimation(0.5, -0.5, Status.RUNNING, true);
     }
+
+    @Test
+    public void testFlipRateAndPlayForPausedNonEmbeddedAnimation() {
+        var clip = new SingleLoopClipEnvelopeShim(animation);
+        animation.setClipEnvelope(clip);
+        animation.setRate(0.2);
+        animation.play();
+        clip.timePulse(10);
+        animation.pause();
+        long timeBefore = clip.getTicks();
+        animation.setRate(-0.2);
+        animation.play();
+        clip.timePulse(5);
+        animation.pause();
+        long timeAfter = clip.getTicks();
+        assertEquals("A pulse to 10 at rate 0.2 with deltaTicks = 0 should reach 10 * 0.2 = 2", 2, timeBefore);
+        assertEquals("A pulse to 5 at rate -0.2 with deltaTicks = 4 should reach 4 + 5 * (-0.2) = 3", 3, timeAfter);
+    }
 }
