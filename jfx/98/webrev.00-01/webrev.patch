diff a/modules/javafx.graphics/src/shims/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelopeShim.java b/modules/javafx.graphics/src/shims/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelopeShim.java
--- a/modules/javafx.graphics/src/shims/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelopeShim.java
+++ b/modules/javafx.graphics/src/shims/java/com/sun/scenario/animation/shared/SingleLoopClipEnvelopeShim.java
@@ -30,6 +30,9 @@
 
     public SingleLoopClipEnvelopeShim(Animation animation) {
         super(animation);
     }
 
+    public long getTicks() {
+        return ticks;
+    }
 }
diff a/modules/javafx.graphics/src/shims/java/javafx/animation/AnimationShim.java b/modules/javafx.graphics/src/shims/java/javafx/animation/AnimationShim.java
--- a/modules/javafx.graphics/src/shims/java/javafx/animation/AnimationShim.java
+++ b/modules/javafx.graphics/src/shims/java/javafx/animation/AnimationShim.java
@@ -46,10 +46,14 @@
 
     public ClipEnvelope get_clipEnvelope() {
         return clipEnvelope;
     }
 
+    public void setClipEnvelope(ClipEnvelope clipEnvelope) {
+        this.clipEnvelope= clipEnvelope;
+    }
+
     @Override
     public void doPause() {
         super.doPause();
     }
 
diff a/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationSetRateTest.java b/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationSetRateTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationSetRateTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationSetRateTest.java
@@ -30,10 +30,12 @@
 import javafx.util.Duration;
 import test.com.sun.scenario.animation.shared.ClipEnvelopeMock;
 import org.junit.Before;
 import org.junit.Test;
 
+import com.sun.scenario.animation.shared.SingleLoopClipEnvelopeShim;
+
 import static org.junit.Assert.*;
 
 public class AnimationSetRateTest {
 
     private static final double EPSILON = 1e-12;
@@ -372,16 +374,21 @@
         assertAnimation(0.5, -0.5, Status.RUNNING, true);
     }
 
     @Test
     public void testFlipRateAndPlayForPausedNonEmbeddedAnimation() {
+        var clip = new SingleLoopClipEnvelopeShim(animation);
+        animation.setClipEnvelope(clip);
         animation.setRate(0.2);
-        animation.doTimePulse(100);
+        animation.play();
+        clip.timePulse(10);
         animation.pause();
-        double timeBefore = animation.getCurrentTime().toMillis();
+        long timeBefore = clip.getTicks();
         animation.setRate(-0.2);
-        animation.doTimePulse(100);
+        animation.play();
+        clip.timePulse(5);
         animation.pause();
-        double timeAfter = animation.getCurrentTime().toMillis();
-        assertTrue("Playing backwards should reduce the current ticks", timeAfter < timeBefore);
+        long timeAfter = clip.getTicks();
+        assertEquals("A pulse to 10 at rate 0.2 with deltaTicks = 0 should reach 10 * 0.2 = 2", 2, timeBefore);
+        assertEquals("A pulse to 5 at rate -0.2 with deltaTicks = 4 should reach 4 + 5 * (-0.2) = 3", 3, timeAfter);
     }
 }
