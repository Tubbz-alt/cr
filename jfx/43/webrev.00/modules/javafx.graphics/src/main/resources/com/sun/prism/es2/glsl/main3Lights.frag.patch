diff a/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main3Lights.frag b/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main3Lights.frag
--- a/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main3Lights.frag
+++ b/modules/javafx.graphics/src/main/resources/com/sun/prism/es2/glsl/main3Lights.frag
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -53,46 +53,62 @@
 vec4 apply_selfIllum();
 
 struct Light {
     vec4 pos;
     vec3 color;
+    vec3 attn;
+    float range;
 };
 
 uniform vec3 ambientColor;
 uniform Light lights[3];
 
 varying vec3 eyePos;
 varying vec4 lightTangentSpacePositions[3];
 
 void main()
 {
-    gl_FragColor = vec4(0.0,0.0,0.0,1.0);
     vec4 diffuse = apply_diffuse();
 
     if (diffuse.a == 0.0) discard;
 
     vec3 n = apply_normal();
+    vec3 refl = reflect(normalize(eyePos), n);
 
     vec3 d = vec3(0.0);
     vec3 s = vec3(0.0);
 
-    vec3 refl = reflect(normalize(eyePos), n);
     vec4 specular = apply_specular();
     float power = specular.a;
 
-    vec3 l = normalize(lightTangentSpacePositions[0].xyz);
-    d = clamp(dot(n,l), 0.0, 1.0)*(lights[0].color).rgb;
-    s = pow(clamp(dot(-refl, l), 0.0, 1.0), power) * lights[0].color.rgb;
-
-    l = normalize(lightTangentSpacePositions[1].xyz);
-    d += clamp(dot(n,l), 0.0, 1.0)*(lights[1].color).rgb;
-    s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * lights[1].color.rgb;
-
-    l = normalize(lightTangentSpacePositions[2].xyz);
-    d += clamp(dot(n,l), 0.0, 1.0)*(lights[2].color).rgb;
-    s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * lights[2].color.rgb;
-
-    vec3 rez = (ambientColor+d) * diffuse.xyz + s*specular.rgb;
+    float maxRange = lights[0].range;
+    float dist = length(lightTangentSpacePositions[0].xyz);
+    if (dist <= range) {
+        vec3 l = normalize(lightTangentSpacePositions[0].xyz);
+        float att = 1.0 / (lights[0].attn.x + lights[0].attn.y * dist + lights[0].attn.z * dist * dist);
+        d += clamp(dot(n,l), 0.0, 1.0) * (lights[0].color).rgb * att;
+        s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * lights[0].color.rgb * att;
+    }
+
+    float range = lights[1].range;
+    float dist = length(lightTangentSpacePositions[1].xyz);
+    if (dist <= range) {
+        vec3 l = normalize(lightTangentSpacePositions[1].xyz);
+        float att = 1.0 / (lights[1].attn.x + lights[1].attn.y * dist + lights[1].attn.z * dist * dist);
+        d += clamp(dot(n,l), 0.0, 1.0) * (lights[1].color).rgb * att;
+        s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * lights[1].color.rgb * att;
+    }
+
+    float range = lights[2].range;
+    float dist = length(lightTangentSpacePositions[2].xyz);
+    if (dist <= range) {
+        vec3 l = normalize(lightTangentSpacePositions[2].xyz);
+        float att = 1.0 / (lights[2].attn.x + lights[2].attn.y * dist + lights[2].attn.z * dist * dist);
+        d += clamp(dot(n,l), 0.0, 1.0) * (lights[2].color).rgb * att;
+        s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * lights[2].color.rgb * att;
+    }
+
+    vec3 rez = (ambientColor + d) * diffuse.xyz + s * specular.rgb;
     rez += apply_selfIllum().xyz;
 
     gl_FragColor = vec4(clamp(rez, 0.0, 1.0) , diffuse.a);
 }
