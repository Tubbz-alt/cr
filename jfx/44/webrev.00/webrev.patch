diff a/modules/javafx.graphics/src/test/java/test/com/sun/javafx/sg/prism/RenderRootTest.java b/modules/javafx.graphics/src/test/java/test/com/sun/javafx/sg/prism/RenderRootTest.java
--- a/modules/javafx.graphics/src/test/java/test/com/sun/javafx/sg/prism/RenderRootTest.java
+++ b/modules/javafx.graphics/src/test/java/test/com/sun/javafx/sg/prism/RenderRootTest.java
@@ -323,18 +323,20 @@
         root.clearDirtyTree();
         NodePath rootPath = getRenderRoot(root, 0, 0, 5, 5);
         assertRenderRoot(root, rootPath);
     }
 
-    @Ignore("What is the right thing here? It seems that an empty dirty region should result in no rendering?")
+    // What is the right thing here? It seems that an empty dirty region should result in no rendering?
+    @Ignore("JDK-8234077")
     @Test
     public void emptyDirtyRegion() {
         NodePath rootPath = getRenderRoot(root, 0, 0, -1, -1);
         assertRenderRoot(root, rootPath);
     }
 
-    @Ignore("Currently fails because isEmpty doesn't take into account width == 0, height == 0")
+    // Currently fails because isEmpty doesn't take into account width == 0, height == 0")
+    @Ignore("JDK-8234077")
     @Test
     public void zeroSizeDirtyRegionWithinOpaqueRegion() {
         NodePath rootPath = getRenderRoot(root, 20, 20, 0, 0);
         assertRenderRoot(root, rootPath);
     }
diff a/modules/javafx.graphics/src/test/java/test/com/sun/javafx/text/TextLayoutTest.java b/modules/javafx.graphics/src/test/java/test/com/sun/javafx/text/TextLayoutTest.java
--- a/modules/javafx.graphics/src/test/java/test/com/sun/javafx/text/TextLayoutTest.java
+++ b/modules/javafx.graphics/src/test/java/test/com/sun/javafx/text/TextLayoutTest.java
@@ -94,11 +94,11 @@
             assertEquals("run " +i, complex[i], runs[i].isComplex());
         }
     }
 
     @SuppressWarnings("deprecation")
-    @Ignore("RT-31357")
+    @Ignore("JDK-8087615")
     @Test public void buildRuns() {
 
         PrismTextLayout layout = new PrismTextLayout();
         PGFont font = (PGFont) FontHelper.getNativeFont(Font.font("Monaco", 12));
         PGFont font2 = (PGFont) FontHelper.getNativeFont(Font.font("Tahoma", 12));
diff a/modules/javafx.graphics/src/test/java/test/javafx/concurrent/ServiceWithSecurityManagerTest.java b/modules/javafx.graphics/src/test/java/test/javafx/concurrent/ServiceWithSecurityManagerTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/concurrent/ServiceWithSecurityManagerTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/concurrent/ServiceWithSecurityManagerTest.java
@@ -41,11 +41,11 @@
  * It is ad-hoc, a more rigorous analysis on what the permissions should be
  * would be great, and then we could add the ability to do security manager
  * related tests on lots of different unit tests.
  */
 @RunWith(ServiceWithSecurityManagerTest.ServiceTestRunner.class)
-@Ignore("This class doesn't appear to run correctly, often s.evaluate isn't called. Likely bogus test at present.")
+@Ignore("JDK-8234175") // This class doesn't appear to run correctly, often s.evaluate isn't called. Likely bogus test at present.
 public class ServiceWithSecurityManagerTest extends ServiceLifecycleTest {
 
     public static final class ServiceTestRunner extends BlockJUnit4ClassRunner {
         private ThreadGroup mainThreadGroup;
 
diff a/modules/javafx.graphics/src/test/java/test/javafx/css/CssMetaDataTest.java b/modules/javafx.graphics/src/test/java/test/javafx/css/CssMetaDataTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/css/CssMetaDataTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/css/CssMetaDataTest.java
@@ -78,10 +78,11 @@
 import javafx.css.Styleable;
 import javafx.css.StyleableProperty;
 import javafx.css.Stylesheet;
 import javafx.css.StylesheetShim;
 import org.junit.Test;
+import org.junit.Ignore;
 
 import static org.junit.Assert.*;
 
 enum TestEnum {
     LEFT,
@@ -258,11 +259,12 @@
                 0,
                 ord++
         );
     }
 
-    @Test @org.junit.Ignore
+    @Ignore("JDK-8234142")
+    @Test
     public void testGetMatchingStyles() {
 
 
         final Stylesheet stylesheet = StylesheetShim.getStylesheet();
         stylesheet.setOrigin(StyleOrigin.USER_AGENT);
@@ -363,11 +365,12 @@
             if (!actuals.remove(style)) fail();
         }
         assertTrue(actuals.isEmpty());
     }
 
-    @Test @org.junit.Ignore
+    @Ignore("JDK-8234142")
+    @Test
     public void testGetMatchingStylesWithInlineStyleOnParent() {
 
 
         final Stylesheet stylesheet = StylesheetShim.getStylesheet();
         stylesheet.setOrigin(StyleOrigin.USER_AGENT);
@@ -486,11 +489,12 @@
             if (!actuals.remove(style)) fail();
         }
         assertTrue(actuals.isEmpty());
     }
 
-    @Test @org.junit.Ignore
+    @Ignore("JDK-8234142")
+    @Test
     public void testGetMatchingStylesWithInlineStyleOnLeaf() {
 
 
         final Stylesheet stylesheet = StylesheetShim.getStylesheet();
         stylesheet.setOrigin(StyleOrigin.USER_AGENT);
@@ -609,11 +613,12 @@
             if (!actuals.remove(style)) fail();
         }
         assertTrue(actuals.isEmpty());
     }
 
-    @Test @org.junit.Ignore
+    @Ignore("JDK-8234142")
+    @Test
     public void testGetMatchingStylesWithInlineStyleOnRootAndLeaf() {
 
 
         final Stylesheet stylesheet = StylesheetShim.getStylesheet();
         stylesheet.setOrigin(StyleOrigin.USER_AGENT);
@@ -736,11 +741,12 @@
             if (!actuals.remove(style)) fail(style.toString());
         }
         assertTrue(actuals.isEmpty());
     }
 
-    @Test @org.junit.Ignore
+    @Ignore("JDK-8234142")
+    @Test
     public void testGetMatchingStylesShouldNotReturnAncestorPropertyIfNotInherited() {
 
 
         final Stylesheet stylesheet = StylesheetShim.getStylesheet();
         stylesheet.setOrigin(StyleOrigin.USER_AGENT);
@@ -844,12 +850,12 @@
             if (!actuals.remove(style)) fail();
         }
         assertTrue(actuals.isEmpty());
     }
 
-
-    @Test @org.junit.Ignore
+    @Ignore("JDK-8234142")
+    @Test
     public void testGetMatchingStylesShouldNotReturnInlineAncestorPropertyIfNotInherited() {
 
         final Stylesheet stylesheet = StylesheetShim.getStylesheet();
         stylesheet.setOrigin(StyleOrigin.USER_AGENT);
         StyleManager.getInstance().setDefaultUserAgentStylesheet(stylesheet);
@@ -950,11 +956,12 @@
             actuals.remove(style);
         }
         assertTrue(actuals.toString(), actuals.isEmpty());
     }
 
-    @Test @org.junit.Ignore
+    @Ignore("JDK-8234142")
+    @Test
     public void testGetMatchingStylesReturnsInheritedProperty() {
 
 
         final Stylesheet stylesheet = StylesheetShim.getStylesheet();
         stylesheet.setOrigin(StyleOrigin.USER_AGENT);
@@ -1031,11 +1038,12 @@
             if (!actuals.remove(style)) fail();
         }
         assertTrue(actuals.isEmpty());
     }
 
-    @Test @org.junit.Ignore
+    @Ignore("JDK-8234142")
+    @Test
     public void testGetMatchingStylesReturnsSubProperty() {
 
         final Stylesheet stylesheet = StylesheetShim.getStylesheet();
         stylesheet.setOrigin(StyleOrigin.USER_AGENT);
         StyleManager.getInstance().setDefaultUserAgentStylesheet(stylesheet);
@@ -1219,11 +1227,12 @@
                 recursiveCheck(subFile, pathLength);
             }
         }
     }
 
-    @Test @org.junit.Ignore("tested CssMetaData#set method, which is deprecated")
+    @Ignore("JDK-8234143") // Tested CssMetaData#set method, which is deprecated.
+    @Test
     public void testRT_21185() {
 
         Color c1 = new Color(.1,.2,.3,1.0);
         Color c2 = new Color(.1,.2,.3,1.0);
 
@@ -1258,12 +1267,12 @@
         fill.applyStyle(origin, null);
         assertNull(rect.getFill());
 
     }
 
-
-    @Test  @org.junit.Ignore
+    @Ignore("JDK-8234142")
+    @Test
     public void testRT_24606() {
 
         final Stylesheet stylesheet = new CssParser().parse(
                 ".root { -fx-base: red; }" +
                         ".group { -fx-color: -fx-base; }" +
diff a/modules/javafx.graphics/src/test/java/test/javafx/css/Node_cssStateTransition_Test.java b/modules/javafx.graphics/src/test/java/test/javafx/css/Node_cssStateTransition_Test.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/css/Node_cssStateTransition_Test.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/css/Node_cssStateTransition_Test.java
@@ -40,11 +40,10 @@
 import javafx.scene.paint.Paint;
 import javafx.scene.shape.Rectangle;
 import static org.junit.Assert.*;
 
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class Node_cssStateTransition_Test {
 
     public Node_cssStateTransition_Test() {
diff a/modules/javafx.graphics/src/test/java/test/javafx/css/RuleTest.java b/modules/javafx.graphics/src/test/java/test/javafx/css/RuleTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/css/RuleTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/css/RuleTest.java
@@ -152,42 +152,46 @@
         stylesheet.getRules().remove(instance);
         StyleOrigin result = instance.getOrigin();
         assertNull(result);
     }
 
-    @Ignore @Test
+    @Ignore("JDK-8234154")
+    @Test
     public void testApplies() {
         System.out.println("applies");
         Node node = null;
         Rule instance = null;
         long expResult = 0l;
         long result = RuleShim.applies(instance, node, null);
         assertEquals(expResult, result);
         fail("The test case is a prototype.");
     }
 
-    @Ignore @Test
+    @Ignore("JDK-8234154")
+    @Test
     public void testToString() {
         System.out.println("toString");
         Rule instance = null;
         String expResult = "";
         String result = instance.toString();
         assertEquals(expResult, result);
         fail("The test case is a prototype.");
     }
 
-    @Ignore @Test
+    @Ignore("JDK-8234154")
+    @Test
     public void testWriteBinary() throws Exception {
         System.out.println("writeBinary");
         DataOutputStream os = null;
         StringStore stringStore = null;
         Rule instance = null;
         RuleShim.writeBinary(instance, os, stringStore);
         fail("The test case is a prototype.");
     }
 
-    @Ignore @Test
+    @Ignore("JDK-8234154")
+    @Test
     public void testReadBinary() throws Exception {
         System.out.println("readBinary");
         DataInputStream is = null;
         String[] strings = null;
         Rule expResult = null;
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/Node_effectiveOrientation_Css_Test.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/Node_effectiveOrientation_Css_Test.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/Node_effectiveOrientation_Css_Test.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/Node_effectiveOrientation_Css_Test.java
@@ -42,11 +42,11 @@
 import org.junit.Before;
 
 /**
  * Test :dir functional pseudo-class
  */
-@Ignore
+@Ignore("JDK-8234152")
 public class Node_effectiveOrientation_Css_Test {
 
     private Group root;
     private Scene scene;
     private Stage stage;
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/input/TouchEventTest.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/input/TouchEventTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/input/TouchEventTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/input/TouchEventTest.java
@@ -1548,11 +1548,11 @@
 
         return scene;
     }
 
     @Test
-    @Ignore("This is a benchmark, not any functional test. Run it individually if you wish.")
+    @Ignore("JDK-8234084") // This is a benchmark, not any functional test.
     public void saneOrderingBenchmark() {
         long[] ids = new long[] { 2, 3, 4, 5, 6 };
         boolean[] active = new boolean[] { false, false, false, false, false };
         int count = 0;
         int tick = 5;
@@ -1636,11 +1636,11 @@
         System.out.println("*************************************************");
         System.out.println("");
     }
 
     @Test
-    @Ignore("This is a benchmark, not any functional test. Run it individually if you wish.")
+    @Ignore("JDK-8234084") // This is a benchmark, not any functional test.
     public void crazyOrderingBenchmark() {
         long[] ids = new long[] { 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000 };
         boolean[] active = new boolean[] { false, false, false, false, false,
                 false, false, false, false, false };
         int count = 0;
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/BackgroundSizeTest.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/BackgroundSizeTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/BackgroundSizeTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/BackgroundSizeTest.java
@@ -72,23 +72,23 @@
     @Test(expected = IllegalArgumentException.class)
     public void negativeWidthThrowsException2() {
         new BackgroundSize(-2, 1, true, true, false, false);
     }
 
-    @Ignore("Not handling positive infinity")
+    @Ignore("JDK-8234090")
     @Test(expected = IllegalArgumentException.class)
     public void positiveInfinityWidthThrowsException() {
         new BackgroundSize(Double.POSITIVE_INFINITY, 1, true, true, false, false);
     }
 
-    @Ignore("Not handling negative infinity")
+    @Ignore("JDK-8234090")
     @Test(expected = IllegalArgumentException.class)
     public void negativeInfinityWidthThrowsException() {
         new BackgroundSize(Double.NEGATIVE_INFINITY, 1, true, true, false, false);
     }
 
-    @Ignore("Not handling NaN")
+    @Ignore("JDK-8234090")
     @Test(expected = IllegalArgumentException.class)
     public void nanWidthThrowsException() {
         new BackgroundSize(Double.NaN, 1, true, true, false, false);
     }
 
@@ -110,23 +110,23 @@
     @Test(expected = IllegalArgumentException.class)
     public void negativeHeightThrowsException2() {
         new BackgroundSize(1, -2, true, true, false, false);
     }
 
-    @Ignore("Not handling positive infinity")
+    @Ignore("JDK-8234090")
     @Test(expected = IllegalArgumentException.class)
     public void positiveInfinityHeightThrowsException() {
         new BackgroundSize(1, Double.POSITIVE_INFINITY, true, true, false, false);
     }
 
-    @Ignore("Not handling negative infinity")
+    @Ignore("JDK-8234090")
     @Test(expected = IllegalArgumentException.class)
     public void negativeInfinityHeightThrowsException() {
         new BackgroundSize(1, Double.NEGATIVE_INFINITY, true, true, false, false);
     }
 
-    @Ignore("Not handling NaN")
+    @Ignore("JDK-8234090")
     @Test(expected = IllegalArgumentException.class)
     public void nanHeightThrowsException() {
         new BackgroundSize(1, Double.NaN, true, true, false, false);
     }
 
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/BorderPaneTest.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/BorderPaneTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/BorderPaneTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/BorderPaneTest.java
@@ -30,11 +30,10 @@
 import static org.junit.Assert.*;
 import javafx.geometry.Orientation;
 import javafx.scene.ParentShim;
 import javafx.scene.layout.BorderPane;
 import org.junit.Before;
-import org.junit.Ignore;
 
 import org.junit.Test;
 
 
 public class BorderPaneTest {
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/RegionCSSTest.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/RegionCSSTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/RegionCSSTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/RegionCSSTest.java
@@ -958,11 +958,11 @@
                 new BackgroundPosition(Side.RIGHT, .1, true, Side.BOTTOM, .1, true),
                 new BackgroundSize(AUTO, AUTO, true, true, false, false));
         assertEquals(expected, image);
     }
 
-    @Ignore("We do not presently implement -fx-background-clip")
+    @Ignore("JDK-8091576") // -fx-background-clip is not implemented.
     @Test public void backgroundClip_defaultValue() {
         region.setStyle(
                 "-fx-background-image: url('test/javafx/scene/layout/red.png');");
         processCSS();
 
@@ -979,11 +979,11 @@
 //                true, true,
 //                false, false);
 //        assertEquals(expected, image);
     }
 
-    @Ignore("We do not presently implement -fx-background-clip")
+    @Ignore("JDK-8091576") // -fx-background-clip is not implemented.
     @Test public void backgroundClip_BorderBox() {
         region.setStyle(
                 "-fx-background-image: url('test/javafx/scene/layout/red.png');" +
                 "-fx-background-clip: border-box");
         processCSS();
@@ -1000,11 +1000,11 @@
 //                true, true,
 //                false, false);
 //        assertEquals(expected, image);
     }
 
-    @Ignore("We do not presently implement -fx-background-clip")
+    @Ignore("JDK-8091576") // -fx-background-clip is not implemented.
     @Test public void backgroundClip_PaddingBox() {
         region.setStyle(
                 "-fx-background-image: url('test/javafx/scene/layout/red.png');" +
                 "-fx-background-clip: padding-box");
         processCSS();
@@ -1021,11 +1021,11 @@
 //                true, true,
 //                false, false);
 //        assertEquals(expected, image);
     }
 
-    @Ignore("We do not presently implement -fx-background-clip")
+    @Ignore("JDK-8091576") // -fx-background-clip is not implemented.
     @Test public void backgroundClip_ContentBox() {
         region.setStyle(
                 "-fx-background-image: url('test/javafx/scene/layout/red.png');" +
                 "-fx-background-clip: content-box");
         processCSS();
@@ -1042,11 +1042,11 @@
 //                true, true,
 //                false, false);
 //        assertEquals(expected, image);
     }
 
-    @Ignore("We do not presently implement -fx-background-origin")
+    @Ignore("JDK-8091576") // -fx-background-origin is not implemented.
     @Test public void backgroundOrigin_defaultValue() {
         region.setStyle(
                 "-fx-background-image: url('test/javafx/scene/layout/red.png');");
         processCSS();
 
@@ -1063,11 +1063,11 @@
 //                true, true,
 //                false, false);
 //        assertEquals(expected, image);
     }
 
-    @Ignore("We do not presently implement -fx-background-origin")
+    @Ignore("JDK-8091576") // -fx-background-origin is not implemented.
     @Test public void backgroundOrigin_BorderBox() {
         region.setStyle(
                 "-fx-background-image: url('test/javafx/scene/layout/red.png');" +
                 "-fx-background-origin: border-box");
         processCSS();
@@ -1085,11 +1085,11 @@
 //                true, true,
 //                false, false);
 //        assertEquals(expected, image);
     }
 
-    @Ignore("We do not presently implement -fx-background-origin")
+    @Ignore("JDK-8091576") // -fx-background-origin is not implemented.
     @Test public void backgroundOrigin_PaddingBox() {
         region.setStyle(
                 "-fx-background-image: url('test/javafx/scene/layout/red.png');" +
                 "-fx-background-origin: padding-box");
         processCSS();
@@ -1106,11 +1106,11 @@
 //                true, true,
 //                false, false);
 //        assertEquals(expected, image);
     }
 
-    @Ignore("We do not presently implement -fx-background-origin")
+    @Ignore("JDK-8091576") // -fx-background-origin is not implemented.
     @Test public void backgroundOrigin_ContentBox() {
         region.setStyle(
                 "-fx-background-image: url('test/javafx/scene/layout/red.png');" +
                 "-fx-background-origin: content-box");
         processCSS();
@@ -1414,11 +1414,11 @@
         assertEquals(new Insets(0), region.getPadding());
         assertNull(region.getBackground());
         assertNull(region.getBorder());
     }
 
-    @Ignore("-fx-border-style-top is not supported")
+    @Ignore("JDK-8091576") // -fx-border-style-top is not implemented.
     @Test public void borderStyle_top() {
         region.setStyle("-fx-border-style-top: solid;");
         processCSS();
 
         assertEquals(0, region.getBackground().getFills().size(), 0);
@@ -1432,11 +1432,11 @@
                 BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID,
                 null, null, Insets.EMPTY);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-style-right is not supported")
+    @Ignore("JDK-8091576") // -fx-border-style-right is not implemented.
     @Test public void borderStyle_right() {
         region.setStyle("-fx-border-style-right: solid;");
         processCSS();
 
         assertEquals(0, region.getBackground().getFills().size(), 0);
@@ -1450,11 +1450,11 @@
                 BorderStrokeStyle.NONE, BorderStrokeStyle.SOLID, BorderStrokeStyle.NONE, BorderStrokeStyle.SOLID,
                 null, null, Insets.EMPTY);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-style-bottom is not supported")
+    @Ignore("JDK-8091576") // -fx-border-style-bottom is not implemented.
     @Test public void borderStyle_bottom() {
         region.setStyle("-fx-border-style-bottom: solid;");
         processCSS();
 
         assertEquals(0, region.getBackground().getFills().size(), 0);
@@ -1468,11 +1468,11 @@
                 BorderStrokeStyle.NONE, BorderStrokeStyle.NONE, BorderStrokeStyle.SOLID, BorderStrokeStyle.NONE,
                 null, null, Insets.EMPTY);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-style-left is not supported")
+    @Ignore("JDK-8091576") // -fx-border-style-left is not implemented.
     @Test public void borderStyle_left() {
         region.setStyle("-fx-border-style-left: solid;");
         processCSS();
 
         assertEquals(0, region.getBackground().getFills().size(), 0);
@@ -1486,11 +1486,11 @@
                 BorderStrokeStyle.NONE, BorderStrokeStyle.NONE, BorderStrokeStyle.NONE, BorderStrokeStyle.SOLID,
                 null, null, Insets.EMPTY);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-style-top and -fx-border-style-right are not supported")
+    @Ignore("JDK-8091576")
     @Test public void borderStyle_top_right() {
         region.setStyle(
                 "-fx-border-style-top: solid;" +
                 "-fx-border-style-right: dashed;");
         processCSS();
@@ -1506,11 +1506,11 @@
                 BorderStrokeStyle.SOLID, BorderStrokeStyle.DASHED, BorderStrokeStyle.SOLID, BorderStrokeStyle.DASHED,
                 null, null, Insets.EMPTY);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-style-top and -fx-border-style-bottom are not supported")
+    @Ignore("JDK-8091576")
     @Test public void borderStyle_bottom_top() {
         region.setStyle(
                 "-fx-border-style-top: solid;" +
                 "-fx-border-style-bottom: dashed;");
         processCSS();
@@ -1526,11 +1526,11 @@
                 BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.DASHED, BorderStrokeStyle.SOLID,
                 null, null, Insets.EMPTY);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-style-bottom and -fx-border-style-left are not supported")
+    @Ignore("JDK-8091576")
     @Test public void borderStyle_left_bottom() {
         region.setStyle(
                 "-fx-border-style-bottom: solid;" +
                 "-fx-border-style-left: dashed;");
         processCSS();
@@ -1610,11 +1610,11 @@
                 Color.BLACK, BorderStrokeStyle.SOLID,
                 null, null);
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("double not supported yet")
+    @Ignore("JDK-8091576") // double value not implemented.
     @Test public void borderStyle_double() {
         region.setStyle("-fx-border-color: black; -fx-border-style: double;");
         processCSS();
 
         assertEquals(0, region.getBackground().getFills().size(), 0);
@@ -1627,11 +1627,11 @@
 //                Color.BLACK, BorderStrokeStyle.DOUBLE,
 //                null, null);
 //        assertEquals(expected, stroke);
     }
 
-    @Ignore ("groove not supported yet")
+    @Ignore("JDK-8091576") // groove value not implemented.
     @Test public void borderStyle_groove() {
         region.setStyle("-fx-border-color: black; -fx-border-style: groove;");
         processCSS();
 
         assertEquals(0, region.getBackground().getFills().size(), 0);
@@ -1644,11 +1644,11 @@
 //                Color.BLACK, BorderStrokeStyle.GROOVE,
 //                null, null);
 //        assertEquals(expected, stroke);
     }
 
-    @Ignore ("ridge not supported yet")
+    @Ignore("JDK-8091576") // ridge value not implemented.
     @Test public void borderStyle_ridge() {
         region.setStyle("-fx-border-color: black; -fx-border-style: ridge;");
         processCSS();
 
         assertEquals(0, region.getBackground().getFills().size(), 0);
@@ -1661,11 +1661,11 @@
 //                Color.BLACK, BorderStrokeStyle.RIDGE,
 //                null, null);
 //        assertEquals(expected, stroke);
     }
 
-    @Ignore ("inset not supported yet")
+    @Ignore("JDK-8091576") // inset value not implemented.
     @Test public void borderStyle_inset() {
         region.setStyle("-fx-border-color: black; -fx-border-style: inset;");
         processCSS();
 
         assertEquals(0, region.getBackground().getFills().size(), 0);
@@ -1678,11 +1678,11 @@
 //                Color.BLACK, BorderStrokeStyle.INSET,
 //                null, null);
 //        assertEquals(expected, stroke);
     }
 
-    @Ignore ("outset not supported yet")
+    @Ignore("JDK-8091576") // outset value not implemented.
     @Test public void borderStyle_outset() {
         region.setStyle("-fx-border-color: black; -fx-border-style: outset;");
         processCSS();
 
         assertEquals(0, region.getBackground().getFills().size(), 0);
@@ -1727,11 +1727,11 @@
                 BorderStrokeStyle.SOLID, BorderStrokeStyle.DOTTED, BorderStrokeStyle.DASHED, BorderStrokeStyle.DOTTED,
                 null, null, Insets.EMPTY);
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("ridge not supported yet")
+    @Ignore("JDK-8091576") // ridge value not implemented.
     @Test public void borderStyle_solid_dotted_dashed_ridge() {
         region.setStyle("-fx-border-color: black; -fx-border-style: solid dotted dashed ridge;");
         processCSS();
 
         assertEquals(0, region.getBackground().getFills().size(), 0);
@@ -1745,11 +1745,11 @@
 //                BorderStrokeStyle.SOLID, BorderStrokeStyle.DOTTED, BorderStrokeStyle.DASHED, BorderStrokeStyle.RIDGE,
 //                null, null, Insets.EMPTY);
 //        assertEquals(expected, stroke);
     }
 
-    @Ignore ("-fx-border-width-top is not supported")
+    @Ignore("JDK-8091576") // -fx-border-width-top is not implemented.
     @Test public void borderStrokeWidth_top() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-width-top: 10px;");
         processCSS();
@@ -1762,11 +1762,11 @@
         BorderStroke stroke = region.getBorder().getStrokes().get(0);
         BorderStroke expected = new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, null, new BorderWidths(10, 0, 0, 0));
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("-fx-border-width-right is not supported")
+    @Ignore("JDK-8091576") // -fx-border-width-right is not implemented.
     @Test public void borderStrokeWidth_right() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-width-right: 10px;");
         processCSS();
@@ -1779,11 +1779,11 @@
         BorderStroke stroke = region.getBorder().getStrokes().get(0);
         BorderStroke expected = new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, null, new BorderWidths(0, 10, 0, 0));
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("-fx-border-width-bottom is not supported")
+    @Ignore("JDK-8091576") // -fx-border-width-bottom is not implemented.
     @Test public void borderStrokeWidth_bottom() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-width-bottom: 10px;");
         processCSS();
@@ -1796,11 +1796,11 @@
         BorderStroke stroke = region.getBorder().getStrokes().get(0);
         BorderStroke expected = new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, null, new BorderWidths(0, 0, 10, 0));
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("-fx-border-width-left is not supported")
+    @Ignore("JDK-8091576") // -fx-border-width-left is not implemented.
     @Test public void borderStrokeWidth_left() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-width-left: 10px;");
         processCSS();
@@ -1813,11 +1813,11 @@
         BorderStroke stroke = region.getBorder().getStrokes().get(0);
         BorderStroke expected = new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, null, new BorderWidths(0, 0, 0, 10));
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("-fx-border-width-top and -fx-border-width-right are not supported")
+    @Ignore("JDK-8091576")
     @Test public void borderStrokeWidth_top_right() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-width-top: 10px;" +
                 "-fx-border-width-right: 20px;");
@@ -1831,11 +1831,11 @@
         BorderStroke stroke = region.getBorder().getStrokes().get(0);
         BorderStroke expected = new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, null, new BorderWidths(10, 20, 0, 0));
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("-fx-border-width-top and -fx-border-width-bottom are not supported")
+    @Ignore("JDK-8091576")
     @Test public void borderStrokeWidth_top_bottom() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-width-top: 10px;" +
                 "-fx-border-width-bottom: 20px;");
@@ -1849,11 +1849,11 @@
         BorderStroke stroke = region.getBorder().getStrokes().get(0);
         BorderStroke expected = new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, null, new BorderWidths(10, 0, 20, 0));
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("-fx-border-width-left and -fx-border-width-bottom are not supported")
+    @Ignore("JDK-8091576")
     @Test public void borderStrokeWidth_left_bottom() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-width-left: 10px;" +
                 "-fx-border-width-bottom: 20px;");
@@ -1912,11 +1912,11 @@
         BorderStroke stroke = region.getBorder().getStrokes().get(0);
         BorderStroke expected = new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, null, new BorderWidths(1, 2, 3, 4));
         assertEquals(expected, stroke);
     }
 
-    @Ignore("thin keyword is not supported")
+    @Ignore("JDK-8091576") // thin value is not implemented.
     @Test public void borderStrokeWidth_thin() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-width: thin;");
         processCSS();
@@ -1929,11 +1929,11 @@
         BorderStroke stroke = region.getBorder().getStrokes().get(0);
         BorderStroke expected = new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, null, new BorderWidths(1, 1, 1, 1));
         assertEquals(expected, stroke);
     }
 
-    @Ignore("thick keyword is not supported")
+    @Ignore("JDK-8091576") // thick value is not implemented.
     @Test public void borderStrokeWidth_thick() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-width: thick;");
         processCSS();
@@ -1946,11 +1946,11 @@
         BorderStroke stroke = region.getBorder().getStrokes().get(0);
         BorderStroke expected = new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, null, new BorderWidths(5, 5, 5, 5));
         assertEquals(expected, stroke);
     }
 
-    @Ignore("medium keyword is not supported")
+    @Ignore("JDK-8091576") // medium value is not implemented.
     @Test public void borderStrokeWidth_medium() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-width: medium;");
         processCSS();
@@ -1963,11 +1963,11 @@
         BorderStroke stroke = region.getBorder().getStrokes().get(0);
         BorderStroke expected = new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, null, new BorderWidths(3, 3, 3, 3));
         assertEquals(expected, stroke);
     }
 
-    @Ignore("thin, medium, and thick keywords are not supported")
+    @Ignore("JDK-8091576")
     @Test public void borderStrokeWidth_thin_medium_thick() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-width: thin medium thick;");
         processCSS();
@@ -1985,11 +1985,11 @@
     // TODO example 20
     // TODO example 21
 
     // TODO!! The initial width of a border is MEDIUM, NOT 0!
 
-    @Ignore("-fx-border-top-left-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-top-left-radius not implemented.
     @Test public void borderStrokeRadius_topLeft1() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-top-left-radius: 5px;");
         processCSS();
@@ -2003,11 +2003,11 @@
         BorderStroke expected = new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID,
                 new CornerRadii(5, 0, 0, 0, false), BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-top-left-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-top-left-radius not implemented.
     @Test public void borderStrokeRadius_topLeft2() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-top-left-radius: 5px, 10px;");
         processCSS();
@@ -2030,11 +2030,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-top-left-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-top-left-radius not implemented.
     @Test public void borderStrokeRadius_topLeft3() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-top-left-radius: 5%;");
         processCSS();
@@ -2057,11 +2057,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-top-left-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-top-left-radius not implemented.
     @Test public void borderStrokeRadius_topLeft4() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-top-left-radius: 5%, 10%;");
         processCSS();
@@ -2084,11 +2084,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-top-left-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-top-left-radius not implemented.
     @Test public void borderStrokeRadius_topLeft5() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-top-left-radius: 5% 10px;");
         processCSS();
@@ -2111,11 +2111,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-top-left-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-top-left-radius not implemented.
     @Test public void borderStrokeRadius_topLeft6() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-top-left-radius: 5px, 10%;");
         processCSS();
@@ -2138,11 +2138,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-top-right-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-top-right-radius not implemented.
     @Test public void borderStrokeRadius_topRight1() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-top-right-radius: 5px;");
         processCSS();
@@ -2156,11 +2156,11 @@
         BorderStroke expected = new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID,
                 new CornerRadii(0, 5, 0, 0, false), BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-top-right-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-top-right-radius not implemented.
     @Test public void borderStrokeRadius_topRight2() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-top-right-radius: 5px, 10px;");
         processCSS();
@@ -2183,11 +2183,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-top-right-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-top-right-radius not implemented.
     @Test public void borderStrokeRadius_topRight3() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-top-right-radius: 5%;");
         processCSS();
@@ -2210,11 +2210,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-top-right-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-top-right-radius not implemented.
     @Test public void borderStrokeRadius_topRight4() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-top-right-radius: 5%, 10%;");
         processCSS();
@@ -2237,11 +2237,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-top-right-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-top-right-radius not implemented.
     @Test public void borderStrokeRadius_topRight5() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-top-right-radius: 5% 10px;");
         processCSS();
@@ -2264,11 +2264,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-top-right-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-top-right-radius not implemented.
     @Test public void borderStrokeRadius_topRight6() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-top-right-radius: 5px, 10%;");
         processCSS();
@@ -2291,11 +2291,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-bottom-right-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-bottom-right-radius not implemented.
     @Test public void borderStrokeRadius_bottomRight1() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-bottom-right-radius: 5px;");
         processCSS();
@@ -2309,11 +2309,11 @@
         BorderStroke expected = new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID,
                 new CornerRadii(0, 0, 5, 0, false), BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-bottom-right-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-bottom-right-radius not implemented.
     @Test public void borderStrokeRadius_bottomRight2() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-bottom-right-radius: 5px, 10px;");
         processCSS();
@@ -2336,11 +2336,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-bottom-right-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-bottom-right-radius not implemented.
     @Test public void borderStrokeRadius_bottomRight3() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-bottom-right-radius: 5%;");
         processCSS();
@@ -2363,11 +2363,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-bottom-right-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-bottom-right-radius not implemented.
     @Test public void borderStrokeRadius_bottomRight4() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-bottom-right-radius: 5%, 10%;");
         processCSS();
@@ -2390,11 +2390,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-bottom-right-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-bottom-right-radius not implemented.
     @Test public void borderStrokeRadius_bottomRight5() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-bottom-right-radius: 5% 10px;");
         processCSS();
@@ -2417,11 +2417,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-bottom-right-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-bottom-right-radius not implemented.
     @Test public void borderStrokeRadius_bottomRight6() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-bottom-right-radius: 5px, 10%;");
         processCSS();
@@ -2444,11 +2444,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-bottom-left-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-bottom-left-radius not implemented.
     @Test public void borderStrokeRadius_bottomLeft1() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-bottom-left-radius: 5px;");
         processCSS();
@@ -2462,11 +2462,11 @@
         BorderStroke expected = new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID,
                 new CornerRadii(0, 0, 0, 5, false), BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-bottom-left-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-bottom-left-radius not implemented.
     @Test public void borderStrokeRadius_bottomLeft2() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-bottom-left-radius: 5px, 10px;");
         processCSS();
@@ -2489,11 +2489,11 @@
                         false, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-bottom-left-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-bottom-left-radius not implemented.
     @Test public void borderStrokeRadius_bottomLeft3() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-bottom-left-radius: 5%;");
         processCSS();
@@ -2516,11 +2516,11 @@
                         true, true), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-bottom-left-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-bottom-left-radius not implemented.
     @Test public void borderStrokeRadius_bottomLeft4() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-bottom-left-radius: 5%, 10%;");
         processCSS();
@@ -2543,11 +2543,11 @@
                         true, true), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-bottom-left-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-bottom-left-radius not implemented.
     @Test public void borderStrokeRadius_bottomLeft5() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-bottom-left-radius: 5% 10px;");
         processCSS();
@@ -2570,11 +2570,11 @@
                         true, false), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-bottom-left-radius not supported")
+    @Ignore("JDK-8091576") // -fx-border-bottom-left-radius not implemented.
     @Test public void borderStrokeRadius_bottomLeft6() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-bottom-left-radius: 5px, 10%;");
         processCSS();
@@ -2597,11 +2597,11 @@
                         false, true), // bottom left as percent
                 BorderStroke.DEFAULT_WIDTHS);
         assertEquals(expected, stroke);
     }
 
-    @Ignore("-fx-border-top-left-radius and -fx-border-top-right-radius are not supported")
+    @Ignore("JDK-8091576")
     @Test public void borderStrokeRadius_topLeft_topRight() {
         region.setStyle(
                 "-fx-border-color: black;" +
                 "-fx-border-top-left-radius: 5px 10%;" +
                 "-fx-border-top-right-radius: 20px 30%;");
@@ -2869,11 +2869,11 @@
                 BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID,
                 null, null, Insets.EMPTY);
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("-fx-border-top-color is not supported by the CSS parser")
+    @Ignore("JDK-8091576")
     @Test public void borderStroke_top_IsSpecifiedOnly() {
         region.setStyle(
                 "-fx-border-style: solid;" +
                 "-fx-border-top-color: purple;");
         processCSS();
@@ -2889,11 +2889,11 @@
                 BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID,
                 null, null, Insets.EMPTY);
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("-fx-border-right-color is not supported by the CSS parser")
+    @Ignore("JDK-8091576")
     @Test public void borderStroke_right_IsSpecifiedOnly() {
         region.setStyle(
                 "-fx-border-style: solid;" +
                 "-fx-border-right-color: purple;");
         processCSS();
@@ -2909,11 +2909,11 @@
                 BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID,
                 null, null, Insets.EMPTY);
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("-fx-border-bottom-color is not supported by the CSS parser")
+    @Ignore("JDK-8091576") // -fx-border-bottom-color is not implemented.
     @Test public void borderStroke_bottom_IsSpecifiedOnly() {
         region.setStyle(
                 "-fx-border-style: solid;" +
                 "-fx-border-bottom-color: purple;");
         processCSS();
@@ -2929,11 +2929,11 @@
                 BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID,
                 null, null, Insets.EMPTY);
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("-fx-border-left-color is not supported by the CSS parser")
+    @Ignore("JDK-8091576") // -fx-border-left-color is not implemented.
     @Test public void borderStroke_left_IsSpecifiedOnly() {
         region.setStyle(
                 "-fx-border-style: solid;" +
                 "-fx-border-left-color: purple;");
         processCSS();
@@ -2949,11 +2949,11 @@
                 BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID,
                 null, null, Insets.EMPTY);
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("-fx-border-top-color and -fx-border-right-color is not supported by the CSS parser")
+    @Ignore("JDK-8091576")
     @Test public void borderStroke_top_right_IsSpecifiedOnly() {
         region.setStyle(
                 "-fx-border-style: solid;" +
                 "-fx-border-top-color: red;" +
                 "-fx-border-right-color: green;");
@@ -2970,11 +2970,11 @@
                 BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID,
                 null, null, Insets.EMPTY);
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("-fx-border-left-color and -fx-border-right-color is not supported by the CSS parser")
+    @Ignore("JDK-8091576")
     @Test public void borderStroke_right_left_IsSpecifiedOnly() {
         region.setStyle(
                 "-fx-border-style: solid;" +
                 "-fx-border-right-color: red;" +
                 "-fx-border-left-color: green;");
@@ -2991,11 +2991,11 @@
                 BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID,
                 null, null, Insets.EMPTY);
         assertEquals(expected, stroke);
     }
 
-    @Ignore ("-fx-border-top-color and -fx-border-bottom-color is not supported by the CSS parser")
+    @Ignore("JDK-8091576")
     @Test public void borderStroke_bottom_top_IsSpecifiedOnly() {
         region.setStyle(
                 "-fx-border-style: solid;" +
                 "-fx-border-bottom-color: red;" +
                 "-fx-border-top-color: green;");
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/ResizabilityTest.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/ResizabilityTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/ResizabilityTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/ResizabilityTest.java
@@ -38,11 +38,10 @@
 import javafx.scene.layout.Region;
 import javafx.scene.shape.Rectangle;
 import javafx.scene.text.Text;
 
 import org.junit.Test;
-import org.junit.Ignore;
 /**
  * Tests resizability apis of Node and key subclasses.
  *
  */
 public class ResizabilityTest {
diff a/modules/javafx.graphics/src/test/java/test/javafx/stage/PopupTest.java b/modules/javafx.graphics/src/test/java/test/javafx/stage/PopupTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/stage/PopupTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/stage/PopupTest.java
@@ -449,12 +449,11 @@
 
         // test whether runnable ran
         assertTrue(done);
     }
 
-
-    @Ignore ("Not sure how this ever worked, or what the point is")
+    @Ignore("JDK-8234161")
     @Test
     public void testPeerListener() {
         Popup p = new Popup();
         p.setAutoHide(true);
         p.show(stage);
diff a/modules/javafx.graphics/src/test/java/test/javafx/stage/Popup_parentWindow_Test.java b/modules/javafx.graphics/src/test/java/test/javafx/stage/Popup_parentWindow_Test.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/stage/Popup_parentWindow_Test.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/stage/Popup_parentWindow_Test.java
@@ -39,11 +39,11 @@
 import test.com.sun.javafx.test.objects.TestGroup;
 import test.com.sun.javafx.test.objects.TestNode;
 import test.com.sun.javafx.test.objects.TestScene;
 import test.com.sun.javafx.test.objects.TestStage;
 
-@Ignore ("This test is basically invalidated with the new design and needs to be rewritten")
+@Ignore("JDK-8234153") // test needs to be rewritten.
 @RunWith(Parameterized.class)
 public final class Popup_parentWindow_Test extends PropertiesTestBase {
 
     @Parameters
     public static Collection<Object> data() {
