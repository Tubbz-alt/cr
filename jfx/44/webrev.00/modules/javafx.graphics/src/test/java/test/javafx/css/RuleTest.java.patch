diff a/modules/javafx.graphics/src/test/java/test/javafx/css/RuleTest.java b/modules/javafx.graphics/src/test/java/test/javafx/css/RuleTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/css/RuleTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/css/RuleTest.java
@@ -152,42 +152,46 @@
         stylesheet.getRules().remove(instance);
         StyleOrigin result = instance.getOrigin();
         assertNull(result);
     }
 
-    @Ignore @Test
+    @Ignore("JDK-8234154")
+    @Test
     public void testApplies() {
         System.out.println("applies");
         Node node = null;
         Rule instance = null;
         long expResult = 0l;
         long result = RuleShim.applies(instance, node, null);
         assertEquals(expResult, result);
         fail("The test case is a prototype.");
     }
 
-    @Ignore @Test
+    @Ignore("JDK-8234154")
+    @Test
     public void testToString() {
         System.out.println("toString");
         Rule instance = null;
         String expResult = "";
         String result = instance.toString();
         assertEquals(expResult, result);
         fail("The test case is a prototype.");
     }
 
-    @Ignore @Test
+    @Ignore("JDK-8234154")
+    @Test
     public void testWriteBinary() throws Exception {
         System.out.println("writeBinary");
         DataOutputStream os = null;
         StringStore stringStore = null;
         Rule instance = null;
         RuleShim.writeBinary(instance, os, stringStore);
         fail("The test case is a prototype.");
     }
 
-    @Ignore @Test
+    @Ignore("JDK-8234154")
+    @Test
     public void testReadBinary() throws Exception {
         System.out.println("readBinary");
         DataInputStream is = null;
         String[] strings = null;
         Rule expResult = null;
