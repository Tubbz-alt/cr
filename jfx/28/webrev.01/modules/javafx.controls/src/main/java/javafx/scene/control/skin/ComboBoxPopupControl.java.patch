diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxPopupControl.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxPopupControl.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxPopupControl.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxPopupControl.java
@@ -547,11 +547,11 @@
             }
         }
     }
 
     private void handleKeyEvent(KeyEvent ke, boolean doConsume) {
-        // When the user hits the enter or F4 keys, we respond before
+        // When the user hits the enter key, we respond before
         // ever giving the event to the TextField.
         if (ke.getCode() == KeyCode.ENTER) {
             if (ke.isConsumed() || ke.getEventType() != KeyEvent.KEY_RELEASED) {
                 return;
             }
@@ -560,16 +560,10 @@
             if (doConsume && comboBoxBase.getOnAction() != null) {
                 ke.consume();
             } else if (textField != null) {
                 textField.fireEvent(ke);
             }
-        } else if (ke.getCode() == KeyCode.F4) {
-            if (ke.getEventType() == KeyEvent.KEY_RELEASED) {
-                if (comboBoxBase.isShowing()) comboBoxBase.hide();
-                else comboBoxBase.show();
-            }
-            ke.consume(); // we always do a consume here (otherwise unit tests fail)
         } else if (ke.getCode() == KeyCode.F10 || ke.getCode() == KeyCode.ESCAPE) {
             // RT-23275: The TextField fires F10 and ESCAPE key events
             // up to the parent, which are then fired back at the
             // TextField, and this ends up in an infinite loop until
             // the stack overflows. So, here we consume these two
