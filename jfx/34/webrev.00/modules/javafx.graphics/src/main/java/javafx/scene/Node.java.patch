diff a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
@@ -1049,17 +1049,19 @@
         public void fireSuperValueChangedEvent() {
             super.fireValueChangedEvent();
         }
     }
 
-    private void invalidatedScenes(Scene oldScene, SubScene oldSubScene) {
+    // reapplyCSS should be true for root elements when they are added, and is false for children
+    // of the root element. This prevents CSS being reapplied recursively, as noted in JDK-8151756.
+    private void invalidatedScenes(Scene oldScene, SubScene oldSubScene, boolean reapplyCSS) {
         Scene newScene = sceneProperty().get();
         boolean sceneChanged = oldScene != newScene;
         SubScene newSubScene = subScene;
 
         if (getClip() != null) {
-            getClip().setScenes(newScene, newSubScene);
+            getClip().setScenes(newScene, newSubScene, reapplyCSS);
         }
         if (sceneChanged) {
             updateCanReceiveFocus();
             if (isFocusTraversable()) {
                 if (newScene != null) {
@@ -1089,11 +1091,13 @@
             }
 
         }
         updateTreeShowing();
 
-        if (sceneChanged) reapplyCSS();
+        if (sceneChanged && reapplyCSS) {
+            reapplyCSS();
+        }
 
         if (sceneChanged && !isDirtyEmpty()) {
             //Note: no need to remove from scene's dirty list
             //Scene's is checking if the node's scene is correct
             /* TODO: looks like an existing bug when a node is moved from one
@@ -1148,20 +1152,20 @@
              */
             accessible = null;
         }
     }
 
-    final void setScenes(Scene newScene, SubScene newSubScene) {
+    final void setScenes(Scene newScene, SubScene newSubScene, boolean reapplyCSS) {
         Scene oldScene = sceneProperty().get();
         if (newScene != oldScene || newSubScene != subScene) {
             scene.set(newScene);
             SubScene oldSubScene = subScene;
             subScene = newSubScene;
-            invalidatedScenes(oldScene, oldSubScene);
+            invalidatedScenes(oldScene, oldSubScene, reapplyCSS);
             if (this instanceof SubScene) { // TODO: find better solution
                 SubScene thisSubScene = (SubScene)this;
-                thisSubScene.getRoot().setScenes(newScene, thisSubScene);
+                thisSubScene.getRoot().setScenes(newScene, thisSubScene, reapplyCSS);
             }
         }
     }
 
     final SubScene getSubScene() {
@@ -1178,12 +1182,14 @@
 
     /**
      * Exists for Parent and LightBase
      */
     void scenesChanged(final Scene newScene, final SubScene newSubScene,
-                       final Scene oldScene, final SubScene oldSubScene) { }
-
+                       final Scene oldScene, final SubScene oldSubScene) {
+        // On scenes change, reapply CSS for this Node
+        reapplyCSS();
+    }
 
     /**
      * The id of this {@code Node}. This simple string identifier is useful for
      * finding a specific Node within the scene graph. While the id of a Node
      * should be unique within the scene graph, this uniqueness is not enforced.
@@ -6974,17 +6980,17 @@
                                                    + clip + ").");
                             }
                         } else {
                             if (oldClip != null) {
                                 oldClip.clipParent = null;
-                                oldClip.setScenes(null, null);
+                                oldClip.setScenes(null, null, /* reapplyCSS */ false);
                                 oldClip.updateTreeVisible(false);
                             }
 
                             if (newClip != null) {
                                 newClip.clipParent = Node.this;
-                                newClip.setScenes(getScene(), getSubScene());
+                                newClip.setScenes(getScene(), getSubScene(), /* reapplyCSS */ false);
                                 newClip.updateTreeVisible(true);
                             }
 
                             NodeHelper.markDirty(Node.this, DirtyBits.NODE_CLIP);
 
