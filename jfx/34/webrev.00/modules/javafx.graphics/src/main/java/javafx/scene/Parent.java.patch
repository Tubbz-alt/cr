diff a/modules/javafx.graphics/src/main/java/javafx/scene/Parent.java b/modules/javafx.graphics/src/main/java/javafx/scene/Parent.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Parent.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Parent.java
@@ -366,11 +366,11 @@
                         }
                         if (node.isManaged() || (node instanceof Parent && ((Parent) node).layoutFlag != LayoutFlags.CLEAN)) {
                             relayout = true;
                         }
                         node.setParent(Parent.this);
-                        node.setScenes(getScene(), getSubScene());
+                        node.setScenes(getScene(), getSubScene(), /* reapplyCSS */ true);
                         // assert !node.boundsChanged;
                         if (node.isVisible()) {
                             geomChanged = true;
                             childIncluded(node);
                         }
@@ -599,11 +599,11 @@
                         geomChanged = true;
                         childExcluded(old);
                     }
                     if (old.getParent() == Parent.this) {
                         old.setParent(null);
-                        old.setScenes(null, null);
+                        old.setScenes(null, null, /* reapplyCSS */ false);
                     }
                     // Do not add node with null scene to the removed list.
                     // It will not be processed in the list and its memory
                     // will not be freed.
                     if (scene != null && !removedChildrenOptimizationDisabled) {
@@ -754,10 +754,11 @@
     }
 
     @Override
     void scenesChanged(final Scene newScene, final SubScene newSubScene,
                        final Scene oldScene, final SubScene oldSubScene) {
+        super.scenesChanged(newScene, newSubScene, oldScene, oldSubScene);
 
         if (oldScene != null && newScene == null) {
             // RT-34863 - clean up CSS cache when Parent is removed from scene-graph
             StyleManager.getInstance().forget(this);
 
@@ -766,11 +767,11 @@
                 removed.clear();
             }
         }
 
         for (int i=0; i<children.size(); i++) {
-            children.get(i).setScenes(newScene, newSubScene);
+            children.get(i).setScenes(newScene, newSubScene, /* reapplyCSS */ false);
         }
 
         final boolean awaitingLayout = layoutFlag != LayoutFlags.CLEAN;
 
         sceneRoot = (newSubScene != null && newSubScene.getRoot() == this) ||
@@ -785,10 +786,11 @@
                 if (newSubScene != null) {
                     newSubScene.setDirtyLayout(this);
                 }
             }
         }
+
     }
 
     @Override
     void setDerivedDepthTest(boolean value) {
         super.setDerivedDepthTest(value);
