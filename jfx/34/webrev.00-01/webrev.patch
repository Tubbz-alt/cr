diff a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
@@ -1049,19 +1049,17 @@
         public void fireSuperValueChangedEvent() {
             super.fireValueChangedEvent();
         }
     }
 
-    // reapplyCSS should be true for root elements when they are added, and is false for children
-    // of the root element. This prevents CSS being reapplied recursively, as noted in JDK-8151756.
-    private void invalidatedScenes(Scene oldScene, SubScene oldSubScene, boolean reapplyCSS) {
+    private void invalidatedScenes(Scene oldScene, SubScene oldSubScene) {
         Scene newScene = sceneProperty().get();
         boolean sceneChanged = oldScene != newScene;
         SubScene newSubScene = subScene;
 
         if (getClip() != null) {
-            getClip().setScenes(newScene, newSubScene, reapplyCSS);
+            getClip().setScenes(newScene, newSubScene);
         }
         if (sceneChanged) {
             updateCanReceiveFocus();
             if (isFocusTraversable()) {
                 if (newScene != null) {
@@ -1091,13 +1089,11 @@
             }
 
         }
         updateTreeShowing();
 
-        if (sceneChanged && reapplyCSS) {
-            reapplyCSS();
-        }
+        if (sceneChanged) reapplyCSS();
 
         if (sceneChanged && !isDirtyEmpty()) {
             //Note: no need to remove from scene's dirty list
             //Scene's is checking if the node's scene is correct
             /* TODO: looks like an existing bug when a node is moved from one
@@ -1152,20 +1148,20 @@
              */
             accessible = null;
         }
     }
 
-    final void setScenes(Scene newScene, SubScene newSubScene, boolean reapplyCSS) {
+    final void setScenes(Scene newScene, SubScene newSubScene) {
         Scene oldScene = sceneProperty().get();
         if (newScene != oldScene || newSubScene != subScene) {
             scene.set(newScene);
             SubScene oldSubScene = subScene;
             subScene = newSubScene;
-            invalidatedScenes(oldScene, oldSubScene, reapplyCSS);
+            invalidatedScenes(oldScene, oldSubScene);
             if (this instanceof SubScene) { // TODO: find better solution
                 SubScene thisSubScene = (SubScene)this;
-                thisSubScene.getRoot().setScenes(newScene, thisSubScene, reapplyCSS);
+                thisSubScene.getRoot().setScenes(newScene, thisSubScene);
             }
         }
     }
 
     final SubScene getSubScene() {
@@ -1182,14 +1178,12 @@
 
     /**
      * Exists for Parent and LightBase
      */
     void scenesChanged(final Scene newScene, final SubScene newSubScene,
-                       final Scene oldScene, final SubScene oldSubScene) {
-        // On scenes change, reapply CSS for this Node
-        reapplyCSS();
-    }
+                       final Scene oldScene, final SubScene oldSubScene) { }
+
 
     /**
      * The id of this {@code Node}. This simple string identifier is useful for
      * finding a specific Node within the scene graph. While the id of a Node
      * should be unique within the scene graph, this uniqueness is not enforced.
@@ -6980,17 +6974,17 @@
                                                    + clip + ").");
                             }
                         } else {
                             if (oldClip != null) {
                                 oldClip.clipParent = null;
-                                oldClip.setScenes(null, null, /* reapplyCSS */ false);
+                                oldClip.setScenes(null, null);
                                 oldClip.updateTreeVisible(false);
                             }
 
                             if (newClip != null) {
                                 newClip.clipParent = Node.this;
-                                newClip.setScenes(getScene(), getSubScene(), /* reapplyCSS */ false);
+                                newClip.setScenes(getScene(), getSubScene());
                                 newClip.updateTreeVisible(true);
                             }
 
                             NodeHelper.markDirty(Node.this, DirtyBits.NODE_CLIP);
 
@@ -9419,10 +9413,17 @@
 
         if (getScene() == null) return;
 
         if (cssFlag == CssFlags.REAPPLY) return;
 
+        if (cssFlag == CssFlags.DIRTY_BRANCH) {
+            // JDK-8193445 - don't reapply CSS from here
+            // Defer CSS application to this Node by marking cssFlag as REAPPLY
+            cssFlag = CssFlags.REAPPLY;
+            return;
+        }
+
         // RT-36838 - don't reapply CSS in the middle of an update
         if (cssFlag == CssFlags.UPDATE) {
             cssFlag = CssFlags.REAPPLY;
             notifyParentsOfInvalidatedCSS();
             return;
diff a/modules/javafx.graphics/src/main/java/javafx/scene/Parent.java b/modules/javafx.graphics/src/main/java/javafx/scene/Parent.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Parent.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Parent.java
@@ -366,11 +366,11 @@
                         }
                         if (node.isManaged() || (node instanceof Parent && ((Parent) node).layoutFlag != LayoutFlags.CLEAN)) {
                             relayout = true;
                         }
                         node.setParent(Parent.this);
-                        node.setScenes(getScene(), getSubScene(), /* reapplyCSS */ true);
+                        node.setScenes(getScene(), getSubScene());
                         // assert !node.boundsChanged;
                         if (node.isVisible()) {
                             geomChanged = true;
                             childIncluded(node);
                         }
@@ -599,11 +599,11 @@
                         geomChanged = true;
                         childExcluded(old);
                     }
                     if (old.getParent() == Parent.this) {
                         old.setParent(null);
-                        old.setScenes(null, null, /* reapplyCSS */ false);
+                        old.setScenes(null, null);
                     }
                     // Do not add node with null scene to the removed list.
                     // It will not be processed in the list and its memory
                     // will not be freed.
                     if (scene != null && !removedChildrenOptimizationDisabled) {
@@ -754,11 +754,10 @@
     }
 
     @Override
     void scenesChanged(final Scene newScene, final SubScene newSubScene,
                        final Scene oldScene, final SubScene oldSubScene) {
-        super.scenesChanged(newScene, newSubScene, oldScene, oldSubScene);
 
         if (oldScene != null && newScene == null) {
             // RT-34863 - clean up CSS cache when Parent is removed from scene-graph
             StyleManager.getInstance().forget(this);
 
@@ -767,11 +766,11 @@
                 removed.clear();
             }
         }
 
         for (int i=0; i<children.size(); i++) {
-            children.get(i).setScenes(newScene, newSubScene, /* reapplyCSS */ false);
+            children.get(i).setScenes(newScene, newSubScene);
         }
 
         final boolean awaitingLayout = layoutFlag != LayoutFlags.CLEAN;
 
         sceneRoot = (newSubScene != null && newSubScene.getRoot() == this) ||
@@ -786,11 +785,10 @@
                 if (newSubScene != null) {
                     newSubScene.setDirtyLayout(this);
                 }
             }
         }
-
     }
 
     @Override
     void setDerivedDepthTest(boolean value) {
         super.setDerivedDepthTest(value);
diff a/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java b/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
@@ -1216,15 +1216,15 @@
                         throw new IllegalArgumentException(_value +
                                 "is already set as root of another scene");
                     }
 
                     if (oldRoot != null) {
-                        oldRoot.setScenes(null, null, /* reapplyCSS */ false);
+                        oldRoot.setScenes(null, null);
                     }
                     oldRoot = _value;
                     _value.getStyleClass().add(0, "root");
-                    _value.setScenes(Scene.this, null, /* reapplyCSS */ true);
+                    _value.setScenes(Scene.this, null);
                     markDirty(DirtyBits.ROOT_DIRTY);
                     _value.resize(getWidth(), getHeight()); // maybe no-op if root is not resizable
                     _value.requestLayout();
                 }
 
diff a/modules/javafx.graphics/src/main/java/javafx/scene/SubScene.java b/modules/javafx.graphics/src/main/java/javafx/scene/SubScene.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/SubScene.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/SubScene.java
@@ -311,15 +311,15 @@
                     _value.setDisabled(isDisabled());
                     _value.setTreeShowing(isTreeShowing());
 
                     if (oldRoot != null) {
                         StyleManager.getInstance().forget(SubScene.this);
-                        oldRoot.setScenes(null, null, /* reapplyCSS */ false);
+                        oldRoot.setScenes(null, null);
                     }
                     oldRoot = _value;
                     _value.getStyleClass().add(0, "root");
-                    _value.setScenes(getScene(), SubScene.this, /* reapplyCSS */ true);
+                    _value.setScenes(getScene(), SubScene.this);
                     markDirty(SubSceneDirtyBits.ROOT_SG_DIRTY);
                     _value.resize(getWidth(), getHeight()); // maybe no-op if root is not resizable
                     _value.requestLayout();
                 }
 
diff a/tests/system/src/test/java/test/javafx/scene/QuadraticCssTimeTest.java b/tests/system/src/test/java/test/javafx/scene/QuadraticCssTimeTest.java
--- /dev/null
+++ b/tests/system/src/test/java/test/javafx/scene/QuadraticCssTimeTest.java
@@ -0,0 +1,125 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.javafx.scene;
+
+import javafx.application.Application;
+import javafx.application.Platform;
+import javafx.geometry.Insets;
+import javafx.scene.Scene;
+import javafx.scene.layout.HBox;
+import javafx.scene.layout.BorderPane;
+import javafx.scene.text.Text;
+import javafx.stage.Stage;
+import javafx.stage.WindowEvent;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import test.util.Util;
+import junit.framework.Assert;
+import org.junit.Test;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import static org.junit.Assert.assertTrue;
+
+/**
+ * This test is based on the test case reported in JDK-8209830
+ *
+ * Redundant CSS Re-application was avoided in JDK-8193445.
+ * It results in faster application of CSS on Controls (Nodes). In turn,
+ * resulting in improved Node creation/addition time to a Scene.
+ *
+ * The goal of this test is *NOT* to measure absolute performance, but to show
+ * creating and adding 500 Nodes to a scene does not take more than a
+ * particular threshold of time.
+ *
+ * The selected thresold is larger than actual observed time.
+ * It is not a benchmark value. It is good enough to catch the regression
+ * in performance, if any.
+ */
+
+public class QuadraticCssTimeTest {
+
+    private static CountDownLatch startupLatch;
+    private static Stage stage;
+    private static BorderPane rootPane;
+
+    public static class TestApp extends Application {
+
+        @Override
+        public void start(Stage primaryStage) throws Exception {
+            stage = primaryStage;
+            rootPane = new BorderPane();
+            stage.setScene(new Scene(rootPane));
+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> {
+                Platform.runLater(() -> startupLatch.countDown());
+            });
+            stage.show();
+        }
+    }
+
+    @BeforeClass
+    public static void initFX() throws Exception {
+        startupLatch = new CountDownLatch(1);
+        new Thread(() -> Application.launch(QuadraticCssTimeTest.TestApp.class, (String[]) null)).start();
+
+        assertTrue("Timeout waiting for FX runtime to start", startupLatch.await(15, TimeUnit.SECONDS));
+    }
+
+    @Test
+    public void testTimeForAdding500NodesToScene() throws Exception {
+
+        Util.runAndWait(() -> {
+            // Compute time for adding 500 Nodes
+            long startTime = System.currentTimeMillis();
+
+            HBox hbox = new HBox();
+            for (int i = 0; i < 500; i++) {
+                hbox = new HBox(new Text("y"), hbox);
+                final HBox h = hbox;
+                h.setPadding(new Insets(1));
+            }
+            rootPane.setCenter(hbox);
+
+            long endTime = System.currentTimeMillis();
+
+            System.out.println("Time to create and add 500 nodes to a Scene = " +
+                               (endTime - startTime) + " mSec");
+
+            // NOTE : 800 mSec is not a benchmark value
+            // It is good enough to catch the regression in performance, if any
+            assertTrue("Time to add 500 Nodes is more than 800 mSec", (endTime - startTime) < 800);
+        });
+    }
+
+    @AfterClass
+    public static void teardownOnce() {
+        Platform.runLater(() -> {
+            stage.hide();
+            Platform.exit();
+        });
+    }
+}
diff a/tests/system/src/test/java/test/robot/javafx/scene/CSSPerf_JDK8193445Test.java b/tests/system/src/test/java/test/robot/javafx/scene/CSSPerf_JDK8193445Test.java
--- a/tests/system/src/test/java/test/robot/javafx/scene/CSSPerf_JDK8193445Test.java
+++ /dev/null
@@ -1,96 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-
-package test.robot.javafx.scene;
-
-import javafx.geometry.Insets;
-import javafx.scene.Scene;
-import javafx.scene.layout.HBox;
-import javafx.scene.layout.BorderPane;
-import javafx.scene.text.Text;
-import javafx.stage.Stage;
-
-import org.junit.Test;
-import test.robot.testharness.VisualTestBase;
-import static org.junit.Assert.assertTrue;
-
-/**
- * This test is based on the test case reported in JDK-8209830
- *
- * Redundant CSS Re-application was avoided in JDK-8193445.
- * It results in faster application of CSS on Controls (Nodes). In turn,
- * resulting in improved Node creation/addition time to a Scene.
- *
- * The goal of this test is *NOT* to measure absolute performance, but to show
- * creating and adding 300 Nodes to a scene does not take more than a
- * particular threshold of time.
- *
- * The selected thresold is larger than actual observed time.
- * It is not a benchmark value. It is good enough to catch the regression
- * in performance, if any.
- */
-
-public class CSSPerf_JDK8193445Test extends VisualTestBase {
-
-    private Stage testStage;
-    private Scene testScene;
-    private BorderPane pane = new BorderPane();
-    private long mSec = 0;
-
-    @Test(timeout = 15000)
-    public void testTimeForAdding300NodesToScene() {
-        runAndWait(() -> {
-            testStage = getStage();
-            testScene = new Scene(pane);
-            testStage.setScene(testScene);
-            testStage.show();
-        });
-
-        waitFirstFrame();
-
-        // Measure time to create and add 300 Nodes to Scene
-        runAndWait(() -> {
-            long startTime = System.currentTimeMillis();
-
-            HBox hbox = new HBox();
-            for (int i = 0; i < 300; i++) {
-                hbox = new HBox(new Text("y"), hbox);
-                final HBox h = hbox;
-                h.setPadding(new Insets(1));
-            }
-            pane.setCenter(hbox);
-
-            long endTime = System.currentTimeMillis();
-
-            mSec = endTime - startTime;
-        });
-
-        System.out.println("Time to create and add 300 nodes to a Scene = " + mSec + " mSec");
-
-        // NOTE : 400 mSec is not a benchmark value
-        // It is good enough to catch the regression in performance, if any
-        assertTrue("Time to add 300 Nodes is more than 400 mSec", mSec < 400);
-    }
-}
