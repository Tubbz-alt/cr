diff a/modules/javafx.graphics/src/test/java/test/com/sun/javafx/iio/ImageLoaderScalingTest.java b/modules/javafx.graphics/src/test/java/test/com/sun/javafx/iio/ImageLoaderScalingTest.java
--- a/modules/javafx.graphics/src/test/java/test/com/sun/javafx/iio/ImageLoaderScalingTest.java
+++ b/modules/javafx.graphics/src/test/java/test/com/sun/javafx/iio/ImageLoaderScalingTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -31,11 +31,10 @@
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import static org.junit.Assert.*;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class ImageLoaderScalingTest {
     // if true, the test will write original and scaled PNG files to the current directory
     private static final boolean writeFiles = false;
@@ -152,16 +151,10 @@
     @Test
     public void testAllTheScalesBMP() throws Exception {
         testAllTheScales("bmp");
     }
 
-    @Ignore // libjpeg can scale the image itself and results are unpredictable
-    @Test
-    public void testAllTheScalesJPG() throws Exception {
-        testAllTheScales("jpg");
-    }
-
     @Test
     public void testAllTheScalesGIF() throws Exception {
         testAllTheScales("gif");
     }
 
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/input/PasteboardTest.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/input/PasteboardTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/input/PasteboardTest.java
+++ /dev/null
@@ -1,124 +0,0 @@
-/*
- * Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-
-package test.javafx.scene.input;
-
-import org.junit.Ignore;
-import org.junit.Test;
-
-
-@Ignore("Pasteboard removed, need to move these tests elsewhere")
-public class PasteboardTest  {
-
-    @Test
-    public void testDefaultPasteboard() {
-//        Pasteboard pb = new Pasteboard();
-//        assertNull(pb.getContentType());
-//        assertNull(pb.getContent());
-//        assertNull(pb.getContent(null));
-//        assertNull(pb.getContent(DataFormat.DATA));
-//        assertNull(pb.getContent());
-//
-//        assertFalse(pb.hasAnyContent());
-//        assertFalse(pb.hasContent(DataFormat.DATA));
-//        assertFalse(pb.hasImage());
-//        assertFalse(pb.hasImages());
-//        assertFalse(pb.hasFile());
-//        assertFalse(pb.hasString());
-    }
-
-    @Test
-    public void testPasteboardString() {
-//        Pasteboard pb = new Pasteboard();
-//        assertFalse(pb.hasAnyContent());
-//        assertFalse(pb.hasContent(DataFormat.TEXT));
-//        assertFalse(pb.hasString());
-//
-//        // put in new string to pasteboard
-//        pb.placeString("text");
-//        assertTrue(pb.hasAnyContent());
-//        assertTrue(pb.hasContent(DataFormat.TEXT));
-//        assertTrue(pb.hasString());
-//        assertEquals("text", pb.getString());
-//
-//        // replace it with a different string
-//        pb.placeString("newText");
-//        assertTrue(pb.hasAnyContent());
-//        assertTrue(pb.hasContent(DataFormat.TEXT));
-//        assertTrue(pb.hasString());
-//        assertEquals("newText", pb.getString());
-//
-//        // A String is DataFormat.TEXT, it may or may not be plain text, so
-//        // after placing a string, this should be false.
-//        assertFalse(pb.hasContent(DataFormat.PLAIN_TEXT));
-//
-//        pb.clear();
-//
-//        assertFalse(pb.hasAnyContent());
-//        assertFalse(pb.hasContent(DataFormat.TEXT));
-//        assertFalse(pb.hasString());
-    }
-
-    /*
-     * This test depends on StubToolkit.loadImage working, which at this point
-     * it doesn't.
-     */
-
-//    public function testPasteboardImage() {
-//        var pb = Pasteboard { };
-//        assertFalse(pb.hasAnyContent());
-//        assertFalse(pb.hasContent(DataFormat.TEXT));
-//        assertFalse(pb.hasContent(DataFormat.IMAGE));
-//        assertFalse(pb.hasString());
-//        assertFalse(pb.hasImage());
-//
-//        // create an image - even if the URL isn't valid
-//        var image = Image {
-//            url: "{__DIR__}JavaFX.png"
-//        }
-//
-//        assertNotNull(image);
-//
-//        pb.placeImage(image);
-//        assertTrue(pb.hasAnyContent());
-//        assertTrue(pb.hasContent(DataFormat.IMAGE));
-//        assertEquals(image, pb.getImage());
-//
-//        assertFalse(pb.hasImages());
-//
-//        // as much as we'd like to know that it is a PNG image, we can't be
-//        // certain - all we know is that the image is a DataFormat.IMAGE
-//        assertFalse(pb.hasContent(DataFormat.IMAGE_PNG));
-//        assertFalse(pb.hasString());
-//
-//        pb.clear();
-//        assertFalse(pb.hasAnyContent());
-//        assertFalse(pb.hasContent(DataFormat.TEXT));
-//        assertFalse(pb.hasContent(DataFormat.IMAGE));
-//        assertFalse(pb.hasString());
-//        assertFalse(pb.hasImage());
-//    }
-}
-
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/input/TouchEventTest.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/input/TouchEventTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/input/TouchEventTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/input/TouchEventTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -1530,31 +1530,10 @@
         ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(
                 TouchPoint.State.PRESSED, 1, 110, 110, 110, 110);
         ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();
     }
 
-    // Reenable once indirect events are used
-    @Ignore("For now we've decided to ingore indirect events completely.")
-    @Test(expected=RuntimeException.class)
-    public void shouldThrowREOnLostIndirectRelease() {
-        Scene scene = createScene();
-        Rectangle rect =
-                (Rectangle) scene.getRoot().getChildrenUnmodifiable().get(0);
-
-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(
-                System.currentTimeMillis(), 1, false, false, false, false, false);
-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(
-                TouchPoint.State.PRESSED, 1368, 110, 110, 110, 110);
-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();
-
-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(
-                System.currentTimeMillis(), 1, false, false, false, false, false);
-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(
-                TouchPoint.State.PRESSED, 1, 110, 110, 110, 110);
-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();
-    }
-
     private Scene createScene() {
         final Group root = new Group();
 
         final Scene scene = new Scene(root, 400, 400);
 
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/BackgroundSizeTest.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/BackgroundSizeTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/BackgroundSizeTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/layout/BackgroundSizeTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -72,16 +72,10 @@
     @Test(expected = IllegalArgumentException.class)
     public void negativeWidthThrowsException2() {
         new BackgroundSize(-2, 1, true, true, false, false);
     }
 
-    @Ignore("Surprised that MIN_VALUE is not < 0")
-    @Test(expected = IllegalArgumentException.class)
-    public void negativeWidthThrowsException3() {
-        new BackgroundSize(Double.MIN_VALUE, 1, true, true, false, false);
-    }
-
     @Ignore("Not handling positive infinity")
     @Test(expected = IllegalArgumentException.class)
     public void positiveInfinityWidthThrowsException() {
         new BackgroundSize(Double.POSITIVE_INFINITY, 1, true, true, false, false);
     }
@@ -116,16 +110,10 @@
     @Test(expected = IllegalArgumentException.class)
     public void negativeHeightThrowsException2() {
         new BackgroundSize(1, -2, true, true, false, false);
     }
 
-    @Ignore("Surprised that MIN_VALUE is not < 0")
-    @Test(expected = IllegalArgumentException.class)
-    public void negativeHeightThrowsException3() {
-        new BackgroundSize(1, Double.MIN_VALUE, true, true, false, false);
-    }
-
     @Ignore("Not handling positive infinity")
     @Test(expected = IllegalArgumentException.class)
     public void positiveInfinityHeightThrowsException() {
         new BackgroundSize(1, Double.POSITIVE_INFINITY, true, true, false, false);
     }
