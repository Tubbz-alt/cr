diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
@@ -67,22 +67,22 @@
     ((WindowContextBase*)user_data)->process_expose(&event->expose);
     return TRUE;
 }
 #endif
 
-static gboolean ctx_damage_callback(GtkWidget *widget, GdkEvent* event, gpointer user_data) {
-    GdkEventExpose* e = &event->expose;
-
-#ifdef GLASS_GTK3
-    gtk_widget_queue_draw_region(widget, e->region);
-#else
-    GdkWindow* gdk_win = gtk_widget_get_root_window(widget);
-    gdk_window_invalidate_rect(gdk_win, &e->area, FALSE);
-    gdk_window_process_updates(gdk_win, FALSE);
-#endif
-    return TRUE;
-}
+//static gboolean ctx_damage_callback(GtkWidget *widget, GdkEvent* event, gpointer user_data) {
+//    GdkEventExpose* e = &event->expose;
+//
+//#ifdef GLASS_GTK3
+//    gtk_widget_queue_draw_region(widget, e->region);
+//#else
+//    GdkWindow* gdk_win = gtk_widget_get_root_window(widget);
+//    gdk_window_invalidate_rect(gdk_win, &e->area, FALSE);
+//    gdk_window_process_updates(gdk_win, FALSE);
+//#endif
+//    return TRUE;
+//}
 
 static gboolean ctx_property_notify_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
     ((WindowContextBase*)user_data)->process_property_notify(&event->property);
     return TRUE;
 }
@@ -139,11 +139,11 @@
     ((WindowContextBase*)user_data)->process_screen_changed();
 }
 
 static void connect_signals(GtkWidget* gtk_widget, WindowContextBase* ctx) {
     g_signal_connect(gtk_widget, "configure-event", G_CALLBACK(ctx_configure_callback), ctx);
-    g_signal_connect(gtk_widget, "damage-event", G_CALLBACK(ctx_damage_callback), ctx);
+//    g_signal_connect(gtk_widget, "damage-event", G_CALLBACK(ctx_damage_callback), ctx);
 #ifdef GLASS_GTK3
     g_signal_connect(gtk_widget, "draw", G_CALLBACK(ctx_draw_callback), ctx);
 #else
     g_signal_connect(gtk_widget, "expose-event", G_CALLBACK(ctx_expose_callback), ctx);
 #endif
@@ -160,11 +160,10 @@
     g_signal_connect(gtk_widget, "leave-notify-event", G_CALLBACK(ctx_enter_or_leave_callback), ctx);
     g_signal_connect(gtk_widget, "key-press-event", G_CALLBACK(ctx_key_press_or_release_callback), ctx);
     g_signal_connect(gtk_widget, "key-release-event", G_CALLBACK(ctx_key_press_or_release_callback), ctx);
     g_signal_connect(gtk_widget, "map-event", G_CALLBACK(ctx_map_callback), ctx);
     g_signal_connect(gtk_widget, "screen-changed", G_CALLBACK(ctx_screen_changed_callback), ctx);
-
 }
 
 GdkWindow* WindowContextBase::get_gdk_window() {
     return gdk_window;
 }
@@ -195,28 +194,32 @@
     if (glass_state == com_sun_glass_events_WindowEvent_RESTORE) {
         if (is_maximized) {
             glass_state = com_sun_glass_events_WindowEvent_MAXIMIZE;
         }
 
-        int w, h;
-        glass_gdk_window_get_size(gdk_window, &w, &h);
-        if (jview) {
-            mainEnv->CallVoidMethod(jview,
-                    jViewNotifyRepaint,
-                    0, 0, w, h);
-            CHECK_JNI_EXCEPTION(mainEnv);
-        }
+        notify_repaint();
     }
 
     if (jwindow) {
        mainEnv->CallVoidMethod(jwindow,
                jGtkWindowNotifyStateChanged,
                glass_state);
        CHECK_JNI_EXCEPTION(mainEnv);
     }
 }
 
+void WindowContextBase::notify_repaint() {
+    int w, h;
+    glass_gdk_window_get_size(gdk_window, &w, &h);
+    if (jview) {
+        mainEnv->CallVoidMethod(jview,
+                jViewNotifyRepaint,
+                0, 0, w, h);
+        CHECK_JNI_EXCEPTION(mainEnv);
+    }
+}
+
 void WindowContextBase::process_state(GdkEventWindowState* event) {
     if (event->changed_mask &
             (GDK_WINDOW_STATE_ICONIFIED | GDK_WINDOW_STATE_MAXIMIZED)) {
 
         if (event->changed_mask & GDK_WINDOW_STATE_ICONIFIED) {
@@ -342,35 +345,26 @@
 }
 
 #ifdef GLASS_GTK3
 void WindowContextBase::process_draw(cairo_t* cr) {
     if (jview) {
-        if (!paint_buffer(cr)) {
-            GdkRectangle r;
-            if (gdk_cairo_get_clip_rectangle (cr, &r)) {
-                mainEnv->CallVoidMethod(jview, jViewNotifyRepaint,r.x, r.y, r.width, r.height);
-                CHECK_JNI_EXCEPTION(mainEnv)
-            }
+        GdkRectangle r;
+        if (gdk_cairo_get_clip_rectangle (cr, &r)) {
+            mainEnv->CallVoidMethod(jview, jViewNotifyRepaint,r.x, r.y, r.width, r.height);
+            CHECK_JNI_EXCEPTION(mainEnv)
         }
     }
 }
 #else
 void WindowContextBase::process_expose(GdkEventExpose* event) {
    if (jview) {
-        if (!buffer.pending) {
-            mainEnv->CallVoidMethod(jview, jViewNotifyRepaint, event->area.x, event->area.y,
-                                     event->area.width, event->area.height);
-            CHECK_JNI_EXCEPTION(mainEnv)
-        } else {
-            cairo_t* context = gdk_cairo_create(gdk_window);
-            paint_buffer(context);
-            cairo_destroy(context);
-        }
+        mainEnv->CallVoidMethod(jview, jViewNotifyRepaint, event->area.x, event->area.y,
+                                 event->area.width, event->area.height);
+        CHECK_JNI_EXCEPTION(mainEnv)
     }
 }
 #endif
-
 static inline jint gtk_button_number_to_mouse_button(guint button) {
     switch (button) {
         case 1:
             return com_sun_glass_events_MouseEvent_BUTTON_LEFT;
         case 2:
@@ -610,44 +604,52 @@
         }
     }
 }
 
 void WindowContextBase::paint(void* data, jint width, jint height) {
-    buffer.data = data;
-    buffer.width = width;
-    buffer.height = height;
-    buffer.pending = TRUE;
-
-    if (is_visible()) {
-        gtk_widget_queue_draw(gtk_widget);
-    }
-}
-
-bool WindowContextBase::paint_buffer(cairo_t* context) {
-    if (!buffer.pending) {
-        return FALSE;
-    }
-
+#if GTK_CHECK_VERSION(3, 0, 0)
+    cairo_region_t *region = gdk_window_get_clip_region(gdk_window);
+#if GTK_CHECK_VERSION(3, 22, 0)
+    GdkDrawingContext *dcontext = gdk_window_begin_draw_frame(gdk_window, region);
+    cairo_t *context = gdk_drawing_context_get_cairo_context(dcontext);
+#else
+    gdk_window_begin_paint_region(gdk_window, region);
+    cairo_t* context = gdk_cairo_create(gdk_window);
+#endif
+#else
+    cairo_t* context = gdk_cairo_create(gdk_window);
+#endif
     cairo_surface_t* cairo_surface;
     cairo_surface = cairo_image_surface_create_for_data(
-            (unsigned char*) buffer.data,
+            (unsigned char*)data,
             CAIRO_FORMAT_ARGB32,
-           buffer.width, buffer.height, buffer.width * 4);
+            width, height, width * 4);
 
-    applyShapeMask(buffer.data, buffer.width, buffer.height);
+    applyShapeMask(data, width, height);
 #ifdef GLASS_GTK3
-    if (buffer.bg_color.is_set) {
-        cairo_set_source_rgb(context, buffer.bg_color.red, buffer.bg_color.green, buffer.bg_color.blue);
+    if (bg_color.is_set) {
+        cairo_set_source_rgb(context, bg_color.red, bg_color.green, bg_color.blue);
     }
 #endif
     cairo_set_source_surface(context, cairo_surface, 0, 0);
     cairo_set_operator(context, CAIRO_OPERATOR_SOURCE);
     cairo_paint(context);
-    cairo_surface_destroy(cairo_surface);
-    buffer.pending = FALSE;
 
-    return TRUE;
+#if GTK_CHECK_VERSION(3, 0, 0)
+#if GTK_CHECK_VERSION(3, 22, 0)
+    gdk_window_end_draw_frame(gdk_window, dcontext);
+    cairo_region_destroy(region);
+#else
+    gdk_window_end_paint(gdk_window);
+    cairo_region_destroy(region);
+    cairo_destroy(context);
+#endif
+#else
+    cairo_destroy(context);
+#endif
+
+    cairo_surface_destroy(cairo_surface);
 }
 
 void WindowContextBase::add_child(WindowContextTop* child) {
     children.insert(child);
     gtk_window_set_transient_for(child->get_gtk_window(), this->get_gtk_window());
@@ -756,15 +758,15 @@
 void WindowContextBase::set_cursor(GdkCursor* cursor) {
     gdk_window_set_cursor(gdk_window, cursor);
 }
 
 void WindowContextBase::set_background(float r, float g, float b) {
-    buffer.bg_color.red = r;
-    buffer.bg_color.green = g;
-    buffer.bg_color.blue = b;
-    buffer.bg_color.is_set = TRUE;
-    gtk_widget_queue_draw(gtk_widget);
+    bg_color.red = r;
+    bg_color.green = g;
+    bg_color.blue = b;
+    bg_color.is_set = TRUE;
+    notify_repaint();
 }
 
 WindowContextBase::~WindowContextBase() {
     if (xim.ic) {
         XDestroyIC(xim.ic);
