diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -31,10 +31,11 @@
 #include <jni.h>
 #include <set>
 #include <vector>
 
 #include "glass_view.h"
+#include "glass_general.h"
 
 enum WindowFrameType {
     TITLED,
     UNTITLED,
     TRANSPARENT
@@ -50,68 +51,98 @@
     REQUEST_NONE,
     REQUEST_RESIZABLE,
     REQUEST_NOT_RESIZABLE
 };
 
-struct WindowFrameExtents {
-    int top;
-    int left;
-    int bottom;
-    int right;
-};
-
 static const guint MOUSE_BUTTONS_MASK = (guint) (GDK_BUTTON1_MASK | GDK_BUTTON2_MASK | GDK_BUTTON3_MASK);
 
-enum BoundsType {
-    BOUNDSTYPE_CONTENT,
-    BOUNDSTYPE_WINDOW
+struct BgColor {
+    BgColor(): red(0), green(0), blue(0), is_set(FALSE) {}
+    float red;
+    float green;
+    float blue;
+    bool is_set;
+};
+
+struct CanvasBuffer {
+    CanvasBuffer() : data(NULL), width(0), height(0), pending(false) {}
+    void* data;
+    int width;
+    int height;
+    bool pending; // if a draw from gtk_queue
+    BgColor bg_color; // background color
 };
 
 struct WindowGeometry {
-    WindowGeometry(): final_width(), final_height(),
-    refx(), refy(), gravity_x(), gravity_y(), current_width(), current_height(), extents() {}
-    // estimate of the final width the window will get after all pending
-    // configure requests are processed by the window manager
-    struct {
-        int value;
-        BoundsType type;
-    } final_width;
-
-    struct {
-        int value;
-        BoundsType type;
-    } final_height;
-
-    float refx;
-    float refy;
+    WindowGeometry(): current_x(0),
+                      current_y(0),
+                      current_w(0),
+                      current_h(0),
+                      current_cw(0),
+                      current_ch(0),
+                      adjust_w(0),
+                      adjust_h(0),
+                      view_x(0),
+                      view_y(0),
+                      frame_extents_received(false),
+                      gravity_x(1.00),
+                      gravity_y(1.00),
+                      enabled_on_map(true),
+                      enabled(true),
+                      resizable(true),
+                      resizable_on_map(true),
+                      minw(-1),
+                      minh(-1),
+                      maxw(-1),
+                      maxh(-1){}
+
+    int current_x; // current position X
+    int current_y; // current position Y
+    int current_w; // current window width
+    int current_h; // current window height
+    int current_cw; // current content (view) width
+    int current_ch; // current content (view) height
+
+    // Used to ajust window sizes because gtk doest not account frame extents as part
+    // of the window size and JavaFx does.
+    int adjust_w;
+    int adjust_h;
+
+    // The position of the view relative to the window
+    int view_x;
+    int view_y;
+
+    // If WM supports _NET_REQUEST_FRAME_EXTENTS and it was received
+    bool frame_extents_received;
+
+    // Currently not used
     float gravity_x;
     float gravity_y;
 
-    // the last width which was configured or obtained from configure
-    // notification
-    int current_width;
-
-    // the last height which was configured or obtained from configure
-    // notification
-    int current_height;
+    bool enabled_on_map;
+    bool enabled;
+    bool resizable;
+    bool resizable_on_map; // resizable property will be final when window is mapped
 
-    WindowFrameExtents extents;
+    int minw;
+    int minh;
 
+    int maxw;
+    int maxh;
 };
 
-class WindowContextChild;
 class WindowContextTop;
 
 class WindowContext {
 public:
     virtual bool isEnabled() = 0;
     virtual bool hasIME() = 0;
     virtual bool filterIME(GdkEvent *) = 0;
     virtual void enableOrResetIME() = 0;
     virtual void disableIME() = 0;
     virtual void paint(void* data, jint width, jint height) = 0;
-    virtual WindowFrameExtents get_frame_extents() = 0;
+    virtual WindowGeometry get_geometry() = 0;
 
     virtual void enter_fullscreen() = 0;
     virtual void exit_fullscreen() = 0;
     virtual void show_or_hide_children(bool) = 0;
     virtual void set_visible(bool) = 0;
@@ -119,13 +150,11 @@
     virtual void set_bounds(int, int, bool, bool, int, int, int, int) = 0;
     virtual void set_resizable(bool) = 0;
     virtual void request_focus() = 0;
     virtual void set_focusable(bool)= 0;
     virtual bool grab_focus() = 0;
-    virtual bool grab_mouse_drag_focus() = 0;
     virtual void ungrab_focus() = 0;
-    virtual void ungrab_mouse_drag_focus() = 0;
     virtual void set_title(const char*) = 0;
     virtual void set_alpha(double) = 0;
     virtual void set_enabled(bool) = 0;
     virtual void set_minimum_size(int, int) = 0;
     virtual void set_maximum_size(int, int) = 0;
@@ -143,38 +172,43 @@
     virtual void process_configure(GdkEventConfigure*) = 0;
     virtual void process_map() = 0;
     virtual void process_focus(GdkEventFocus*) = 0;
     virtual void process_destroy() = 0;
     virtual void process_delete() = 0;
+#ifdef GLASS_GTK3
+    virtual void process_draw(cairo_t*) = 0;
+#else
     virtual void process_expose(GdkEventExpose*) = 0;
+#endif
     virtual void process_mouse_button(GdkEventButton*) = 0;
     virtual void process_mouse_motion(GdkEventMotion*) = 0;
     virtual void process_mouse_scroll(GdkEventScroll*) = 0;
     virtual void process_mouse_cross(GdkEventCrossing*) = 0;
     virtual void process_key(GdkEventKey*) = 0;
     virtual void process_state(GdkEventWindowState*) = 0;
-
+    virtual void process_screen_changed() { }
     virtual void notify_state(jint) = 0;
     virtual void notify_on_top(bool) {}
 
     virtual void add_child(WindowContextTop* child) = 0;
     virtual void remove_child(WindowContextTop* child) = 0;
     virtual bool set_view(jobject) = 0;
 
     virtual GdkWindow *get_gdk_window() = 0;
     virtual GtkWindow *get_gtk_window() = 0;
+    virtual GtkWidget *get_gtk_widget() = 0;
     virtual jobject get_jview() = 0;
     virtual jobject get_jwindow() = 0;
 
     virtual int getEmbeddedX() = 0;
     virtual int getEmbeddedY() = 0;
 
-
     virtual void increment_events_counter() = 0;
     virtual void decrement_events_counter() = 0;
     virtual size_t get_events_count() = 0;
     virtual bool is_dead() = 0;
+
     virtual ~WindowContext() {}
 };
 
 class WindowContextBase: public WindowContext {
 
@@ -190,65 +224,51 @@
     std::set<WindowContextTop*> children;
     jobject jwindow;
     jobject jview;
     GtkWidget* gtk_widget;
     GdkWindow* gdk_window;
+    GtkWindowGroup* win_group; // this is used for window grabs
     GdkWMFunction gdk_windowManagerFunctions;
+    CanvasBuffer buffer; // the content to draw
 
     bool is_iconified;
     bool is_maximized;
     bool is_mouse_entered;
 
-    /*
-     * sm_grab_window points to WindowContext holding a mouse grab.
-     * It is mostly used for popup windows.
-     */
-    static WindowContext* sm_grab_window;
-
-    /*
-     * sm_mouse_drag_window points to a WindowContext from which a mouse drag started.
-     * This WindowContext holding a mouse grab during this drag. After releasing
-     * all mouse buttons sm_mouse_drag_window becomes NULL and sm_grab_window's
-     * mouse grab should be restored if present.
-     *
-     * This is done in order to mimic Windows behavior:
-     * All mouse events should be delivered to a window from which mouse drag
-     * started, until all mouse buttons released. No mouse ENTER/EXIT events
-     * should be reported during this drag.
-     */
-    static WindowContext* sm_mouse_drag_window;
 public:
     bool isEnabled();
     bool hasIME();
     bool filterIME(GdkEvent *);
     void enableOrResetIME();
     void disableIME();
     void paint(void*, jint, jint);
     GdkWindow *get_gdk_window();
+    GtkWidget *get_gtk_widget();
     jobject get_jwindow();
     jobject get_jview();
 
     void add_child(WindowContextTop*);
     void remove_child(WindowContextTop*);
     void show_or_hide_children(bool);
-    void reparent_children(WindowContext* parent);
     void set_visible(bool);
     bool is_visible();
     bool set_view(jobject);
     bool grab_focus();
-    bool grab_mouse_drag_focus();
     void ungrab_focus();
-    void ungrab_mouse_drag_focus();
     void set_cursor(GdkCursor*);
     void set_level(int) {}
     void set_background(float, float, float);
 
     void process_map() {}
     void process_focus(GdkEventFocus*);
     void process_destroy();
     void process_delete();
+#ifdef GLASS_GTK3
+    void process_draw(cairo_t*);
+#else
     void process_expose(GdkEventExpose*);
+#endif
     void process_mouse_button(GdkEventButton*);
     void process_mouse_motion(GdkEventMotion*);
     void process_mouse_scroll(GdkEventScroll*);
     void process_mouse_cross(GdkEventCrossing*);
     void process_key(GdkEventKey*);
@@ -267,146 +287,34 @@
     ~WindowContextBase();
 protected:
     virtual void applyShapeMask(void*, uint width, uint height) = 0;
 private:
     bool im_filter_keypress(GdkEventKey*);
+    bool paint_buffer(cairo_t*);
 };
 
-class WindowContextPlug: public WindowContextBase {
-    WindowContext* parent;
-public:
-    bool set_view(jobject);
-    void set_bounds(int, int, bool, bool, int, int, int, int);
-    //WindowFrameExtents get_frame_extents() { return WindowFrameExtents{0, 0, 0, 0}; };
-    WindowFrameExtents get_frame_extents() { WindowFrameExtents ext = {0, 0, 0, 0}; return ext;}
-
-    void enter_fullscreen() {}
-    void exit_fullscreen() {}
-    void set_resizable(bool) {}
-    void request_focus() {}
-    void set_focusable(bool) {}
-    void set_title(const char*) {}
-    void set_alpha(double) {}
-    void set_enabled(bool) {}
-    void set_minimum_size(int, int) {}
-    void set_maximum_size(int, int) {}
-    void set_minimized(bool) {}
-    void set_maximized(bool) {}
-    void set_icon(GdkPixbuf*) {}
-    void restack(bool) {}
-    void set_modal(bool, WindowContext*) {}
-    void set_gravity(float, float) {}
-    void process_property_notify(GdkEventProperty*) {}
-    void process_configure(GdkEventConfigure*);
-    void process_gtk_configure(GdkEventConfigure*);
-
-    void applyShapeMask(void*, uint width, uint height) {
-        (void)width;
-        (void)height;
-    }
-    GtkWindow *get_gtk_window(); // TODO, get window from parent
-
-    WindowContextPlug(jobject, void*);
-    GtkWidget* gtk_container;
-    std::vector<WindowContextChild *> embedded_children;
-private:
-    //HACK: remove once set_bounds is implemented correctly
-    void window_configure(XWindowChanges *, unsigned int);
-    WindowContextPlug(WindowContextPlug&);
-    WindowContextPlug& operator= (const WindowContextPlug&);
-};
-
-class WindowContextChild: public WindowContextBase {
-    WindowContextPlug* parent;
-    WindowContextTop* full_screen_window;
-    GlassView* view; // not null while in Full Screen
-public:
-    void process_mouse_button(GdkEventButton*);
-    bool set_view(jobject);
-    void set_bounds(int, int, bool, bool, int, int, int, int);
-    //WindowFrameExtents get_frame_extents() { return WindowFrameExtents{0, 0, 0, 0}; };
-    WindowFrameExtents get_frame_extents() { WindowFrameExtents ext = {0, 0, 0, 0}; return ext;}
-
-    void enter_fullscreen();
-    void exit_fullscreen();
-    void set_resizable(bool) {}
-    void request_focus() {}
-    void set_focusable(bool) {}
-    void set_title(const char*) {}
-    void set_alpha(double) {}
-    void set_enabled(bool) {}
-    void set_minimum_size(int, int) {}
-    void set_maximum_size(int, int) {}
-    void set_minimized(bool) {}
-    void set_maximized(bool) {}
-    void set_icon(GdkPixbuf*) {}
-    void restack(bool);
-    void set_modal(bool, WindowContext*) {}
-    void set_gravity(float, float) {}
-    void process_property_notify(GdkEventProperty*) {}
-    void process_configure(GdkEventConfigure*);
-    void process_destroy();
-    void set_visible(bool visible);
-
-    int getEmbeddedX();
-    int getEmbeddedY();
-
-    void applyShapeMask(void*, uint width, uint height) {
-        (void)width;
-        (void)height;
-    }
-    GtkWindow *get_gtk_window(); // TODO, get window from parent
-
-    WindowContextChild(jobject, void*, GtkWidget *parent_widget, WindowContextPlug *parent_context);
-private:
-    WindowContextChild(WindowContextChild&);
-    WindowContextChild& operator= (const WindowContextChild&);
-};
 
 class WindowContextTop: public WindowContextBase {
     jlong screen;
     WindowFrameType frame_type;
     WindowType window_type;
     struct WindowContext *owner;
     WindowGeometry geometry;
-    struct _Resizable{// we can't use set/get gtk_window_resizable function
-        _Resizable(): request(REQUEST_NONE), value(true), prev(false),
-                minw(-1), minh(-1), maxw(-1), maxh(-1){}
-        request_type request; //request for future setResizable
-        bool value; //actual value of resizable for a window
-        bool prev; //former resizable value (used in setEnabled for parents of modal window)
-        int minw, minh, maxw, maxh; //minimum and maximum window width/height;
-    } resizable;
-
-    bool frame_extents_initialized;
     bool map_received;
-    bool location_assigned;
-    bool size_assigned;
     bool on_top;
+    bool is_fullscreen;
 
-    struct _Size {
-        int width, height;
-        int client_width, client_height;
-    } requested_bounds;
-
-    bool is_null_extents() { return is_null_extents(geometry.extents); }
-
-    bool is_null_extents(WindowFrameExtents ex) {
-        return !ex.top && !ex.left && !ex.bottom && !ex.right;
-    }
-
-    static WindowFrameExtents normal_extents;
-    static WindowFrameExtents utility_extents;
 public:
     WindowContextTop(jobject, WindowContext*, long, WindowFrameType, WindowType, GdkWMFunction);
     void process_map();
     void process_property_notify(GdkEventProperty*);
     void process_configure(GdkEventConfigure*);
     void process_destroy();
     void process_net_wm_property();
+    void process_screen_changed();
 
-    WindowFrameExtents get_frame_extents();
+    WindowGeometry get_geometry();
 
     void set_minimized(bool);
     void set_maximized(bool);
     void set_bounds(int, int, bool, bool, int, int, int, int);
     void set_resizable(bool);
@@ -433,23 +341,19 @@
     GtkWindow *get_gtk_window();
     void detach_from_java();
 protected:
     void applyShapeMask(void*, uint width, uint height);
 private:
+    void calculate_adjustments();
+    void apply_geometry();
     bool get_frame_extents_property(int *, int *, int *, int *);
     void request_frame_extents();
     void activate_window();
-    bool update_frame_extents();
-    void set_cached_extents(WindowFrameExtents ex);
-    WindowFrameExtents get_cached_extents();
-    void window_configure(XWindowChanges *, unsigned int);
-    void update_window_constraints();
-    void set_window_resizable(bool);
+    void size_position_notify();
     void update_ontop_tree(bool);
     bool on_top_inherited();
     bool effective_on_top();
-    void ensure_window_size();
     WindowContextTop(WindowContextTop&);
     WindowContextTop& operator= (const WindowContextTop&);
 };
 
 void destroy_and_delete_ctx(WindowContext* ctx);
