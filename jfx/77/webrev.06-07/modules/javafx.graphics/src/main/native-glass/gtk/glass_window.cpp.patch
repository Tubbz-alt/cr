diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
@@ -748,10 +748,11 @@
             frame_type(_frame_type),
             window_type(type),
             owner(_owner),
             geometry(),
             map_received(false),
+            visible_received(false),
             on_top(false),
             is_fullscreen(false)
 {
     jwindow = mainEnv->NewGlobalRef(_jwindow);
 
@@ -822,26 +823,57 @@
 // This function calculate the deltas between window and window + decoration (titleblar, borders).
 // Only useful if the window manager does not support the frame extents extension - in this case
 // it uses GDK calculation, that is primary based on _NET_FRAME_EXTENTS but will try harder
 // if that's not available.
 void WindowContextTop::calculate_adjustments() {
-    if (frame_type == TITLED && !geometry.frame_extents_received) {
-        GdkRectangle er;
-        gdk_window_get_frame_extents(gdk_window, &er);
+    if (frame_type != TITLED || geometry.frame_extents_received) {
+        return;
+    }
 
-        int w, h;
-        gtk_window_get_size(GTK_WINDOW(gtk_widget), &w, &h);
+    gint x, y;
+    gdk_window_get_origin(gdk_window, &x, &y);
 
-        int px, py;
-        gdk_window_get_origin(gdk_window, &px, &py);
+    gint rx, ry;
+    gdk_window_get_root_origin(gdk_window, &rx, &ry);
 
-        geometry.adjust_w = (er.width - w > 0) ? er.width - w : 0;
-        geometry.adjust_h = (er.height - h > 0) ? er.height - h : 0;
-        geometry.view_x = (px - er.x > 0) ? px - er.x : 0;
-        geometry.view_y = (py - er.y > 0) ? py - er.y : 0;
+    if (rx != x || ry != y) {
+        // probably..
+        geometry.adjust_w = (rx - x) * 2;
+        // guess that bottom size is the same as left and right
+        geometry.adjust_h = (ry - y) + (rx - x);
 
-        apply_geometry();
+        // those will be correct
+        geometry.view_x = (rx - x);
+        geometry.view_y = (ry - y);
+
+        save_cached_extents();
+    } else {
+        CachedExtents c = (window_type == NORMAL) ? normal_extents : utility_extents;
+        geometry.adjust_w = c.adjust_w;
+        geometry.adjust_h = c.adjust_h;
+        geometry.view_x = c.view_x;
+        geometry.view_y = c.view_y;
+    }
+
+    apply_geometry();
+}
+
+void WindowContextTop::save_cached_extents() {
+    if (frame_type != TITLED) {
+        return;
+    }
+
+    if (window_type == NORMAL) {
+        normal_extents.adjust_w = geometry.adjust_w;
+        normal_extents.adjust_h = geometry.adjust_h;
+        normal_extents.view_x = geometry.view_x;
+        normal_extents.view_y = geometry.view_y;
+    } else {
+        utility_extents.adjust_w = geometry.adjust_w;
+        utility_extents.adjust_h = geometry.adjust_h;
+        utility_extents.view_x = geometry.view_x;
+        utility_extents.view_y = geometry.view_y;
     }
 }
 
 void WindowContextTop::apply_geometry() {
     if (!map_received) {
@@ -1012,10 +1044,12 @@
                     geometry.adjust_w = left + right;
                     geometry.adjust_h = top + bottom;
                     geometry.view_x = left;
                     geometry.view_y = top;
 
+                    save_cached_extents();
+
                     // set bounds again to set to correct window size that must
                     // be the total width and height accounting extents
                     set_bounds(0, 0,
                                false, false,
                                geometry.current_w, geometry.current_h,
@@ -1025,14 +1059,14 @@
         }
     }
 }
 
 void WindowContextTop::process_configure() {
-    gint x, y, w, h, gtk_w, gtk_h;
-
     calculate_adjustments();
 
+    gint x, y, w, h, gtk_w, gtk_h;
+
     gtk_window_get_position(GTK_WINDOW(gtk_widget), &x, &y);
     gtk_window_get_size(GTK_WINDOW(gtk_widget), &gtk_w, &gtk_h);
     w = gtk_w + geometry.adjust_w;
     h = gtk_h + geometry.adjust_h;
 
@@ -1072,10 +1106,15 @@
     }
 }
 
 void WindowContextTop::set_visible(bool visible) {
     WindowContextBase::set_visible(visible);
+
+    if (visible) {
+        visible_received = TRUE;
+    }
+
     //JDK-8220272 - fire event first because GDK_FOCUS_CHANGE is not always in order
     if (visible && jwindow && isEnabled()) {
         mainEnv->CallVoidMethod(jwindow, jWindowNotifyFocus, com_sun_glass_events_WindowEvent_FOCUS_GAINED);
         CHECK_JNI_EXCEPTION(mainEnv);
     }
@@ -1098,11 +1137,11 @@
         geometry.current_cw = newW;
         geometry.current_ch = newH;
         geometry.current_w = newW + geometry.adjust_w;
         geometry.current_h = newH + geometry.adjust_h;
 
-        if (map_received) {
+        if (visible_received) {
             // update constraints if not resized by the user interface so it will
             // let gtk_window_resize succeed, because it's bound to geometry constraints
             apply_geometry();
             gtk_window_resize(GTK_WINDOW(gtk_widget), newW, newH);
         } else {
