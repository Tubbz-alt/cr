diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
@@ -166,10 +166,12 @@
 ////////////////////////////// WindowContext /////////////////////////////////
 
 static GdkAtom atom_net_wm_state = gdk_atom_intern_static_string("_NET_WM_STATE");
 static GdkAtom atom_net_wm_frame_extents = gdk_atom_intern_static_string("_NET_FRAME_EXTENTS");
 
+WindowContext * WindowContext::sm_mouse_drag_window = NULL;
+
 WindowContext::WindowContext(jobject _jwindow, WindowContext *_owner, long _screen,
                                    WindowFrameType _frame_type, WindowType type, GdkWMFunction wmf) :
         screen(_screen),
         frame_type(_frame_type),
         window_type(type),
@@ -328,13 +330,16 @@
     map_received = true;
     apply_geometry();
 }
 
 void WindowContext::process_focus(GdkEventFocus *event) {
+    if (!event->in && WindowContext::sm_mouse_drag_window == this) {
+        ungrab_mouse_drag_focus();
+    }
+
     if (!event->in) {
         ungrab_focus();
-        pointer_device_ungrab();
     }
 
     if (xim.enabled && xim.ic) {
         if (event->in) {
             XSetICFocus(xim.ic);
@@ -413,12 +418,15 @@
 void WindowContext::process_destroy() {
     if (owner) {
         owner->remove_child(this);
     }
 
+    if (WindowContext::sm_mouse_drag_window == this) {
+        ungrab_mouse_drag_focus();
+    }
+
     ungrab_focus();
-    pointer_device_ungrab();
 
     std::set<WindowContext *>::iterator it;
     for (it = children.begin(); it != children.end(); ++it) {
         // FIX JDK-8226537: this method calls set_owner(NULL) which prevents
         // WindowContext::process_destroy() to call remove_child() (because children
@@ -501,21 +509,21 @@
     // Upper layers expects from us Windows behavior:
     // all mouse events should be delivered to window where drag begins
     // and no exit/enter event should be reported during this drag.
     // We can grab mouse pointer for these needs.
     if (press) {
-        pointer_device_grab();
+        grab_mouse_drag_focus();
     } else {
         if ((event->state & MOUSE_BUTTONS_MASK)
             && !(state & MOUSE_BUTTONS_MASK)) { // all buttons released
-            pointer_device_ungrab();
+            ungrab_mouse_drag_focus();
         } else if (event->button == 8 || event->button == 9) {
             // GDK X backend interprets button press events for buttons 4-7 as
             // scroll events so GDK_BUTTON4_MASK and GDK_BUTTON5_MASK will never
             // be set on the event->state from GDK. Thus we cannot check if all
             // buttons have been released in the usual way (as above).
-            pointer_device_ungrab();
+            ungrab_mouse_drag_focus();
         }
     }
 
     jint button = gtk_button_number_to_mouse_button(event->button);
 
@@ -1410,16 +1418,16 @@
 #endif
 
     return device;
 }
 
-void WindowContext::pointer_device_grab() {
+void WindowContext::grab_mouse_drag_focus() {
     if (is_grab_disabled()) {
         return;
     }
 
-    pointer_device_ungrab();
+    ungrab_mouse_drag_focus();
 
     pointer_device = get_pointer_device();
 #ifdef GLASS_GTK3
 #if GTK_CHECK_VERSION(3, 20, 0)
     gdk_seat_grab(gdk_device_get_seat(pointer_device),
@@ -1429,13 +1437,15 @@
                     NULL, GDK_CURRENT_TIME);
 #endif
 #else
     gdk_pointer_grab(gdk_window, TRUE, GDK_ALL_EVENTS_MASK, NULL, NULL, GDK_CURRENT_TIME);
 #endif
+
+    WindowContext::sm_mouse_drag_window = this;
 }
 
-void WindowContext::pointer_device_ungrab() {
+void WindowContext::ungrab_mouse_drag_focus() {
     if (!pointer_device) {
         return;
     }
 
 #ifdef GLASS_GTK3
@@ -1446,10 +1456,12 @@
 #endif
 #else
     gdk_pointer_ungrab(GDK_CURRENT_TIME);
 #endif
     pointer_device = NULL;
+
+    WindowContext::sm_mouse_drag_window = NULL;
 }
 
 WindowContext::~WindowContext() {
     if (xim.ic) {
         XDestroyIC(xim.ic);
