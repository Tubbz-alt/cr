diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
@@ -217,13 +217,10 @@
         glass_gtk_window_configure_from_visual(gtk_widget, visual);
     }
 
     gtk_widget_set_events(gtk_widget, GDK_ALL_EVENTS_MASK);
     gtk_widget_set_app_paintable(gtk_widget, TRUE);
-    if (frame_type != TITLED) {
-        gtk_window_set_decorated(GTK_WINDOW(gtk_widget), FALSE);
-    }
 
     glass_gtk_configure_transparency_and_realize(gtk_widget, frame_type == TRANSPARENT);
     gtk_window_set_title(GTK_WINDOW(gtk_widget), "");
 
     gdk_window = gtk_widget_get_window(gtk_widget);
@@ -235,10 +232,14 @@
     gdk_windowManagerFunctions = wmf;
     if (wmf) {
         gdk_window_set_functions(gdk_window, wmf);
     }
 
+    if (frame_type != TITLED) {
+        gtk_window_set_decorated(GTK_WINDOW(gtk_widget), FALSE);
+    }
+
     connect_signals(gtk_widget, this);
 }
 
 void WindowContext::paint(void *data, jint width, jint height) {
 #if GTK_CHECK_VERSION(3, 0, 0)
@@ -252,13 +253,16 @@
 #endif
 #else
     cairo_t *context = gdk_cairo_create(gdk_window);
 #endif
 
-    cairo_set_source_rgba(context, bg_color.red, bg_color.green, bg_color.blue, (frame_type == TRANSPARENT) ? 0 : 1);
-    cairo_set_operator(context, CAIRO_OPERATOR_SOURCE);
-    cairo_paint(context);
+    if (bg_color.is_set) {
+        cairo_set_source_rgba(context, bg_color.red, bg_color.green, bg_color.blue,
+                                (frame_type == TRANSPARENT) ? 0 : 1);
+        cairo_set_operator(context, CAIRO_OPERATOR_SOURCE);
+        cairo_paint(context);
+    }
 
     cairo_surface_t *cairo_surface;
     cairo_surface = cairo_image_surface_create_for_data(
             (unsigned char *) data,
             CAIRO_FORMAT_ARGB32,
@@ -885,10 +889,11 @@
 
 void WindowContext::set_background(float r, float g, float b) {
     bg_color.red = r;
     bg_color.green = g;
     bg_color.blue = b;
+    bg_color.is_set = true;
     notify_repaint();
 }
 
 void WindowContext::set_minimized(bool minimize) {
     is_iconified = minimize;
@@ -912,10 +917,14 @@
 }
 
 void WindowContext::set_maximized(bool maximize) {
     is_maximized = maximize;
     if (maximize) {
+        // enable the functionality
+        GdkWMFunction wmf = (GdkWMFunction)(gdk_windowManagerFunctions | GDK_FUNC_MAXIMIZE);
+        gdk_window_set_functions(gdk_window, wmf);
+
         gtk_window_maximize(GTK_WINDOW(gtk_widget));
     } else {
         gtk_window_unmaximize(GTK_WINDOW(gtk_widget));
     }
 }
diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
@@ -54,15 +54,16 @@
 };
 
 static const guint MOUSE_BUTTONS_MASK = (guint)(GDK_BUTTON1_MASK | GDK_BUTTON2_MASK | GDK_BUTTON3_MASK);
 
 struct BgColor {
-    BgColor() : red(0), green(0), blue(0) {}
+    BgColor() : red(0), green(0), blue(0), is_set(FALSE) {}
 
     float red;
     float green;
     float blue;
+    bool is_set;
 };
 
 struct CachedExtents {
     int adjust_w;
     int adjust_h;
