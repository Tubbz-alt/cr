diff a/modules/javafx.graphics/src/main/native-glass/gtk/GlassWindow.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/GlassWindow.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/GlassWindow.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/GlassWindow.cpp
@@ -399,12 +399,10 @@
     (void)env;
     (void)obj;
 
     WindowContext* ctx = JLONG_TO_WINDOW_CTX(ptr);
     if (w == 0 || h == 0) return JNI_FALSE;
-    if (w == -1) w = G_MAXSHORT;
-    if (h == -1) h = G_MAXSHORT;
 
     ctx->set_maximum_size(w, h);
     return JNI_TRUE;
 }
 
diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
@@ -842,30 +842,58 @@
         apply_geometry();
     }
 }
 
 void WindowContextTop::apply_geometry() {
+    if (!map_received) {
+        return;
+    }
+
     GdkGeometry gdk_geometry;
     gdk_geometry.win_gravity = GDK_GRAVITY_NORTH_WEST;
 
     if ((!geometry.resizable || !geometry.enabled) && !(is_maximized || is_fullscreen)) {
-        gdk_geometry.min_width = geometry.current_w - geometry.adjust_w;
-        gdk_geometry.min_height = geometry.current_h - geometry.adjust_h;
-        gdk_geometry.max_width = geometry.current_w - geometry.adjust_w;
-        gdk_geometry.max_height = geometry.current_h - geometry.adjust_h;
+        // no resizeable
+        int w = (geometry.current_w - geometry.adjust_w) > 0
+                    ? geometry.current_w - geometry.adjust_w
+                    : geometry.current_cw;
+
+        int h = (geometry.current_h - geometry.adjust_h) > 0
+                    ? geometry.current_h - geometry.adjust_h
+                    : geometry.current_ch;
+
+        gdk_geometry.min_width = gdk_geometry.max_width = w;
+        gdk_geometry.min_height = gdk_geometry.max_height = h;
     } else {
-        gdk_geometry.min_width = (geometry.minw > 0) ? geometry.minw - geometry.adjust_w : 1;
-        gdk_geometry.min_height = (geometry.minh > 0) ? geometry.minh - geometry.adjust_h : 1;
-        gdk_geometry.max_width = (geometry.maxw > 0) ? geometry.maxw  - geometry.adjust_w : G_MAXINT;
-        gdk_geometry.max_height = (geometry.maxh > 0) ? geometry.maxh - geometry.adjust_h : G_MAXINT;
+        gdk_geometry.min_width = (geometry.minw - geometry.adjust_w) > 0
+                                    ? geometry.minw - geometry.adjust_w : 1;
+        gdk_geometry.min_height = (geometry.minh -  geometry.adjust_h) > 0
+                                    ? geometry.minh - geometry.adjust_h : 1;
+
+        gdk_geometry.max_width = (geometry.maxw - geometry.adjust_w > 0)
+                                    ? geometry.maxw - geometry.adjust_w : G_MAXINT;
+        gdk_geometry.max_height = (geometry.maxh - geometry.adjust_h> 0)
+                                    ? geometry.maxh - geometry.adjust_h : G_MAXINT;
     }
 
-    gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), gtk_widget, &gdk_geometry,
+    gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &gdk_geometry,
         (GdkWindowHints) (GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE | GDK_HINT_WIN_GRAVITY));
 }
 
 void WindowContextTop::size_position_notify(bool size_changed, bool pos_changed) {
+    if (jview) {
+        if (size_changed) {
+            mainEnv->CallVoidMethod(jview, jViewNotifyResize, geometry.current_cw, geometry.current_ch);
+            CHECK_JNI_EXCEPTION(mainEnv);
+        }
+
+        if (pos_changed) {
+            mainEnv->CallVoidMethod(jview, jViewNotifyView, com_sun_glass_events_ViewEvent_MOVE);
+            CHECK_JNI_EXCEPTION(mainEnv)
+        }
+    }
+
     if (jwindow) {
             if (size_changed || is_maximized) {
             mainEnv->CallVoidMethod(jwindow, jWindowNotifyResize,
                     (is_maximized)
                         ? com_sun_glass_events_WindowEvent_MAXIMIZE
@@ -877,22 +905,10 @@
         if (pos_changed) {
             mainEnv->CallVoidMethod(jwindow, jWindowNotifyMove, geometry.current_x, geometry.current_y);
             CHECK_JNI_EXCEPTION(mainEnv)
         }
     }
-
-    if (jview) {
-        if (size_changed) {
-            mainEnv->CallVoidMethod(jview, jViewNotifyResize, geometry.current_cw, geometry.current_ch);
-            CHECK_JNI_EXCEPTION(mainEnv);
-        }
-
-        if (pos_changed) {
-            mainEnv->CallVoidMethod(jview, jViewNotifyView, com_sun_glass_events_ViewEvent_MOVE);
-            CHECK_JNI_EXCEPTION(mainEnv)
-        }
-    }
 }
 
 void WindowContextTop::activate_window() {
     Display *display = GDK_DISPLAY_XDISPLAY (gdk_window_get_display (gdk_window));
     Atom navAtom = XInternAtom(display, "_NET_ACTIVE_WINDOW", True);
@@ -1082,15 +1098,18 @@
         geometry.current_cw = newW;
         geometry.current_ch = newH;
         geometry.current_w = newW + geometry.adjust_w;
         geometry.current_h = newH + geometry.adjust_h;
 
-        // update constraints if not resized by the user interface so it will
-        // let gtk_window_resize succeed, because it's bound to geometry constraints
-        apply_geometry();
-
-        gtk_window_resize(GTK_WINDOW(gtk_widget), newW, newH);
+        if (map_received) {
+            // update constraints if not resized by the user interface so it will
+            // let gtk_window_resize succeed, because it's bound to geometry constraints
+            apply_geometry();
+            gtk_window_resize(GTK_WINDOW(gtk_widget), newW, newH);
+        } else {
+            gtk_window_set_default_size(GTK_WINDOW(gtk_widget), newW, newH);
+        }
     }
 
     if (xSet || ySet) {
         int newX = (xSet) ? x : geometry.current_x;
         int newY = (ySet) ? y : geometry.current_y;
@@ -1106,10 +1125,11 @@
     size_position_notify(size_changed, pos_changed);
 }
 
 void WindowContextTop::process_map() {
     map_received = true;
+    apply_geometry();
 }
 
 void WindowContextTop::applyShapeMask(void* data, uint width, uint height) {
     if (frame_type != TRANSPARENT) {
         return;
@@ -1195,13 +1215,11 @@
     }
 
     geometry.minw = w;
     geometry.minh = h;
 
-    if (map_received) {
-        apply_geometry();
-    }
+    apply_geometry();
 }
 
 void WindowContextTop::set_maximum_size(int w, int h) {
     gboolean changed = geometry.maxw != w || geometry.maxh != h;
 
@@ -1210,13 +1228,11 @@
     }
 
     geometry.maxw = w;
     geometry.maxh = h;
 
-    if (map_received) {
-        apply_geometry();
-    }
+    apply_geometry();
 }
 
 void WindowContextTop::set_icon(GdkPixbuf* pixbuf) {
     gtk_window_set_icon(GTK_WINDOW(gtk_widget), pixbuf);
 }
