diff a/modules/javafx.graphics/src/main/native-glass/gtk/GlassWindow.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/GlassWindow.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/GlassWindow.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/GlassWindow.cpp
@@ -82,11 +82,11 @@
 {
     (void)env;
 
     WindowContext* parent = JLONG_TO_WINDOW_CTX(owner);
 
-    WindowContext* ctx = new WindowContextTop(obj,
+    WindowContext* ctx = new WindowContext(obj,
             parent,
             screen,
             glass_mask_to_window_frame_type(mask),
             glass_mask_to_window_type(mask),
             glass_mask_to_wm_function(mask)
@@ -585,14 +585,10 @@
 JNIEXPORT jint JNICALL Java_com_sun_glass_ui_gtk_GtkWindow__1getEmbeddedX
   (JNIEnv *env, jobject obj, jlong ptr) {
     (void)env;
     (void)obj;
 
-    if (ptr) {
-        WindowContext* ctx = JLONG_TO_WINDOW_CTX(ptr);
-        return (jint) ctx->getEmbeddedX();
-    }
     return 0;
 }
 
 /*
  * Class:     com_sun_glass_ui_gtk_GtkWindow
@@ -602,13 +598,9 @@
 JNIEXPORT jint JNICALL Java_com_sun_glass_ui_gtk_GtkWindow__1getEmbeddedY
   (JNIEnv *env, jobject obj, jlong ptr) {
     (void)env;
     (void)obj;
 
-    if (ptr) {
-        WindowContext* ctx = JLONG_TO_WINDOW_CTX(ptr);
-        return (jint) ctx->getEmbeddedY();
-    }
     return 0;
 }
 
 } // extern "C"
diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_dnd.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_dnd.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_dnd.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_dnd.cpp
@@ -36,41 +36,39 @@
 #include <gtk/gtk.h>
 #include <gdk/gdkx.h>
 #include <gdk/gdkkeysyms.h>
 
 /************************* COMMON *********************************************/
-static jint translate_gdk_action_to_glass(GdkDragAction action)
-{
+static jint translate_gdk_action_to_glass(GdkDragAction action) {
     jint result = 0;
-    result |= (action & GDK_ACTION_COPY)? com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_COPY : 0;
-    result |= (action & GDK_ACTION_MOVE)? com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_MOVE : 0;
-    result |= (action & GDK_ACTION_LINK)? com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_REFERENCE : 0;
+    result |= (action & GDK_ACTION_COPY) ? com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_COPY : 0;
+    result |= (action & GDK_ACTION_MOVE) ? com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_MOVE : 0;
+    result |= (action & GDK_ACTION_LINK) ? com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_REFERENCE : 0;
     return result;
 }
 
-static GdkDragAction translate_glass_action_to_gdk(jint action)
-{
+static GdkDragAction translate_glass_action_to_gdk(jint action) {
     int result = 0;
     result |= (action & com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_COPY) ? GDK_ACTION_COPY : 0;
     result |= (action & com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_MOVE) ? GDK_ACTION_MOVE : 0;
     result |= (action & com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_REFERENCE) ? GDK_ACTION_LINK : 0;
     return static_cast<GdkDragAction>(result);
 }
 
-static void clear_global_ref(gpointer data)
-{
-    mainEnv->DeleteGlobalRef((jobject)data);
+static void clear_global_ref(gpointer data) {
+    mainEnv->DeleteGlobalRef((jobject) data);
 }
 
 static void dnd_set_performed_action(jint performed_action);
+
 static jint dnd_get_performed_action();
 
 enum {
-  TARGET_TEXT,
-  TARGET_IMAGE,
-  TARGET_URI,
-  TARGET_RAW
+    TARGET_TEXT,
+    TARGET_IMAGE,
+    TARGET_URI,
+    TARGET_RAW
 };
 
 /************************* TARGET *********************************************/
 
 static struct {
@@ -93,18 +91,18 @@
     }
 
     memset(&target_ctx, 0, sizeof(target_ctx));
 }
 
-static gboolean dnd_drag_motion_callback(GtkWidget      *widget,
+static gboolean dnd_drag_motion_callback(GtkWidget *widget,
                                          GdkDragContext *context,
-                                         gint            x,
-                                         gint            y,
-                                         guint           time,
-                                         gpointer        user_data) {
+                                         gint x,
+                                         gint y,
+                                         guint time,
+                                         gpointer user_data) {
 
-    WindowContext* ctx = (WindowContext*)user_data;
+    WindowContext *ctx = (WindowContext *) user_data;
 
     if (target_ctx.ctx == NULL || (target_ctx.ctx != context && !target_ctx.just_entered)) {
         reset_target_ctx();
         is_dnd_owner = is_in_drag();
         target_ctx.ctx = context;
@@ -116,13 +114,14 @@
 
     jmethodID method = target_ctx.just_entered ? jViewNotifyDragEnter : jViewNotifyDragOver;
 
     GdkDragAction suggested = gdk_drag_context_get_suggested_action(context);
     GdkDragAction result = translate_glass_action_to_gdk(mainEnv->CallIntMethod(ctx->get_jview(), method,
-            (jint)x, (jint)y,
-            (jint)x_abs, (jint)y_abs,
-            translate_gdk_action_to_glass(suggested)));
+                                                                                (jint) x, (jint) y,
+                                                                                (jint) x_abs, (jint) y_abs,
+                                                                                translate_gdk_action_to_glass(
+                                                                                        suggested)));
     CHECK_JNI_EXCEPTION_RET(mainEnv, FALSE)
 
     if (target_ctx.just_entered) {
         target_ctx.just_entered = FALSE;
     }
@@ -130,16 +129,16 @@
     gdk_drag_status(context, result, GDK_CURRENT_TIME);
 
     return (gboolean) result;
 }
 
-static gboolean dnd_drag_drop_callback(GtkWidget      *widget,
-                                      GdkDragContext *context,
-                                      gint            x,
-                                      gint            y,
-                                      guint           time,
-                                      gpointer        user_data) {
+static gboolean dnd_drag_drop_callback(GtkWidget *widget,
+                                       GdkDragContext *context,
+                                       gint x,
+                                       gint y,
+                                       guint time,
+                                       gpointer user_data) {
     if (target_ctx.ctx == NULL || target_ctx.just_entered) {
         return FALSE; // Do not process drop events if no enter event and subsequent motion event were received
     }
 
     GdkAtom target = gtk_drag_dest_find_target(widget, context, NULL);
@@ -152,20 +151,19 @@
     gtk_drag_get_data(widget, context, target, GDK_CURRENT_TIME);
 
     return TRUE;
 }
 
-static void dnd_on_drag_data_received_callback(GtkWidget        *widget,
-                                               GdkDragContext   *context,
-                                               gint              x,
-                                               gint              y,
+static void dnd_on_drag_data_received_callback(GtkWidget *widget,
+                                               GdkDragContext *context,
+                                               gint x,
+                                               gint y,
                                                GtkSelectionData *data,
-                                               guint             info,
-                                               guint             time,
-                                               gpointer          user_data)
-{
-    WindowContext* ctx = (WindowContext*)user_data;
+                                               guint info,
+                                               guint time,
+                                               gpointer user_data) {
+    WindowContext *ctx = (WindowContext *) user_data;
 
     if (gtk_selection_data_get_length(data) == 0) {
         gtk_drag_finish(context, FALSE, FALSE, GDK_CURRENT_TIME);
         reset_target_ctx();
         return;
@@ -176,30 +174,30 @@
     GdkDragAction selected = gdk_drag_context_get_selected_action(context);
     target_ctx.data = data;
 
     // Delay the notify for when we have the data
     mainEnv->CallIntMethod(ctx->get_jview(), jViewNotifyDragDrop,
-                           (jint)x, (jint)y,
-                           (jint)x_abs, (jint)y_abs,
+                           (jint) x, (jint) y,
+                           (jint) x_abs, (jint) y_abs,
                            translate_gdk_action_to_glass(selected));
     LOG_EXCEPTION(mainEnv)
 
     gtk_drag_finish(context, selected, selected == GDK_ACTION_MOVE, GDK_CURRENT_TIME);
 }
 
-void dnd_drag_leave_callback(WindowContext* ctx) {
+void dnd_drag_leave_callback(WindowContext *ctx) {
     mainEnv->CallVoidMethod(ctx->get_jview(), jViewNotifyDragLeave, NULL);
     CHECK_JNI_EXCEPTION(mainEnv)
 
     reset_target_ctx();
 }
 
 void glass_dnd_attach_context(WindowContext *ctx) {
-    gtk_drag_dest_set(ctx->get_gtk_widget(), (GtkDestDefaults)0, NULL, 0,
+    gtk_drag_dest_set(ctx->get_gtk_widget(), (GtkDestDefaults) 0, NULL, 0,
                       (GdkDragAction)(GDK_ACTION_COPY | GDK_ACTION_MOVE | GDK_ACTION_LINK));
 
-    GtkTargetList *target_list = gtk_target_list_new (NULL, 0);
+    GtkTargetList *target_list = gtk_target_list_new(NULL, 0);
     gtk_target_list_add_image_targets(target_list, TARGET_IMAGE, TRUE);
     gtk_target_list_add_uri_targets(target_list, TARGET_URI);
     gtk_target_list_add_text_targets(target_list, TARGET_TEXT);
     gtk_target_list_add(target_list, gdk_atom_intern_static_string(""), 0, TARGET_RAW);
 
@@ -208,41 +206,39 @@
     g_signal_connect(ctx->get_gtk_widget(), "drag-motion", G_CALLBACK(dnd_drag_motion_callback), ctx);
     g_signal_connect(ctx->get_gtk_widget(), "drag-drop", G_CALLBACK(dnd_drag_drop_callback), ctx);
     g_signal_connect(ctx->get_gtk_widget(), "drag-data-received", G_CALLBACK(dnd_on_drag_data_received_callback), ctx);
 }
 
-static gboolean check_state_in_drag(JNIEnv *env)
-{
+static gboolean check_state_in_drag(JNIEnv *env) {
     if (!target_ctx.ctx) {
         jclass jc = env->FindClass("java/lang/IllegalStateException");
         if (!env->ExceptionCheck()) {
             env->ThrowNew(jc,
-                    "Cannot get supported actions. Drag pointer haven't entered the application window");
+                          "Cannot get supported actions. Drag pointer haven't entered the application window");
         }
         return TRUE;
     }
     return FALSE;
 }
 
-static GdkAtom* get_target_ctx_target_atoms(gint *size) {
-    GList* targets = gdk_drag_context_list_targets(target_ctx.ctx);
-    gint s = (gint)g_list_length(targets);
-    GdkAtom* atoms = (GdkAtom*) g_try_malloc0(sizeof(GdkAtom)*s);
+static GdkAtom *get_target_ctx_target_atoms(gint *size) {
+    GList *targets = gdk_drag_context_list_targets(target_ctx.ctx);
+    gint s = (gint) g_list_length(targets);
+    GdkAtom *atoms = (GdkAtom *) g_try_malloc0(sizeof(GdkAtom) * s);
 
     int i = 0;
     for (; targets != NULL; targets = targets->next) {
-        atoms[i++] = (GdkAtom)targets->data;
+        atoms[i++] = (GdkAtom) targets->data;
     }
 
     *size = s;
 
     g_list_free(targets);
     return atoms;
 }
 
-jobjectArray dnd_target_get_mimes(JNIEnv *env)
-{
+jobjectArray dnd_target_get_mimes(JNIEnv *env) {
     if (check_state_in_drag(env)) {
         return NULL;
     }
 
     if (!target_ctx.mimes) {
@@ -257,11 +253,12 @@
             jstring jStr = env->NewStringUTF("application/x-java-rawimage");
             EXCEPTION_OCCURED(env);
             env->CallBooleanMethod(set, jSetAdd, jStr, NULL);
             EXCEPTION_OCCURED(env);
             was_set = TRUE;
-        }  if (gtk_targets_include_uri(targets, size)) {
+        }
+        if (gtk_targets_include_uri(targets, size)) {
             // it's a possibility
             jstring jStr = env->NewStringUTF("application/x-java-file-list");
             EXCEPTION_OCCURED(env);
             env->CallBooleanMethod(set, jSetAdd, jStr, NULL);
             EXCEPTION_OCCURED(env);
@@ -291,65 +288,61 @@
             EXCEPTION_OCCURED(env);
             g_free(name);
         }
 
         target_ctx.mimes = env->NewObjectArray(env->CallIntMethod(set, jSetSize, NULL),
-                jStringCls, NULL);
+                                               jStringCls, NULL);
         EXCEPTION_OCCURED(env);
-        target_ctx.mimes = (jobjectArray)env->CallObjectMethod(set, jSetToArray, target_ctx.mimes, NULL);
-        target_ctx.mimes = (jobjectArray)env->NewGlobalRef(target_ctx.mimes);
+        target_ctx.mimes = (jobjectArray) env->CallObjectMethod(set, jSetToArray, target_ctx.mimes, NULL);
+        target_ctx.mimes = (jobjectArray) env->NewGlobalRef(target_ctx.mimes);
     }
 
     return target_ctx.mimes;
 }
 
-jint dnd_target_get_supported_actions(JNIEnv *env)
-{
+jint dnd_target_get_supported_actions(JNIEnv *env) {
     if (check_state_in_drag(env)) {
         return 0;
     }
     return translate_gdk_action_to_glass(gdk_drag_context_get_actions(target_ctx.ctx));
 }
 
-static jobject dnd_target_get_string(JNIEnv *env)
-{
+static jobject dnd_target_get_string(JNIEnv *env) {
     jobject result = NULL;
 
     GdkAtom atom = gtk_selection_data_get_data_type(target_ctx.data);
-    guchar* data = gtk_selection_data_get_text(target_ctx.data);
+    guchar *data = gtk_selection_data_get_text(target_ctx.data);
 
     if (data) {
-        result = env->NewStringUTF((char *)data);
+        result = env->NewStringUTF((char *) data);
         EXCEPTION_OCCURED(env);
 
         g_free(data);
     }
 
     return result;
 }
 
-static jobject dnd_target_get_list(JNIEnv *env, gboolean files)
-{
+static jobject dnd_target_get_list(JNIEnv *env, gboolean files) {
     jobject result = NULL;
     GdkAtom atom = gtk_selection_data_get_selection(target_ctx.data);
-    gchar** data = gtk_selection_data_get_uris(target_ctx.data);
+    gchar **data = gtk_selection_data_get_uris(target_ctx.data);
 
     if (data) {
         result = uris_to_java(env, data, files);
         // uris_to_java frees it
         //g_strfreev(data);
     }
 
     return result;
 }
 
-static jobject dnd_target_get_image(JNIEnv *env)
-{
+static jobject dnd_target_get_image(JNIEnv *env) {
     jobject result = NULL;
 
     GdkAtom atom = gtk_selection_data_get_selection(target_ctx.data);
-    GdkPixbuf* buf = gtk_selection_data_get_pixbuf(target_ctx.data);
+    GdkPixbuf *buf = gtk_selection_data_get_pixbuf(target_ctx.data);
 
     if (buf == NULL) {
         return NULL;
     }
 
@@ -371,14 +364,14 @@
     stride = gdk_pixbuf_get_rowstride(buf);
 
     cdata = gdk_pixbuf_get_pixels(buf);
 
     //Actually, we are converting RGBA to BGRA, but that's the same operation
-    cdata = (guchar*) convert_BGRA_to_RGBA((int*) cdata, stride, h);
+    cdata = (guchar *) convert_BGRA_to_RGBA((int *) cdata, stride, h);
     data_array = env->NewByteArray(stride * h);
     EXCEPTION_OCCURED(env);
-    env->SetByteArrayRegion(data_array, 0, stride*h, (jbyte*) cdata);
+    env->SetByteArrayRegion(data_array, 0, stride * h, (jbyte *) cdata);
     EXCEPTION_OCCURED(env);
 
     buffer = env->CallStaticObjectMethod(jByteBufferCls, jByteBufferWrap, data_array);
     EXCEPTION_OCCURED(env);
     result = env->NewObject(jGtkPixelsCls, jGtkPixelsInit, w, h, buffer);
@@ -388,35 +381,33 @@
     g_free(cdata);
 
     return result;
 }
 
-static jobject dnd_target_get_raw(JNIEnv *env, GdkAtom target, gboolean string_data)
-{
+static jobject dnd_target_get_raw(JNIEnv *env, GdkAtom target, gboolean string_data) {
     jobject result = NULL;
     GdkAtom atom = gtk_selection_data_get_selection(target_ctx.data);
-    const guchar* data = gtk_selection_data_get_data(target_ctx.data);
+    const guchar *data = gtk_selection_data_get_data(target_ctx.data);
 
     if (string_data) {
-         result = env->NewStringUTF((char *)data);
-         EXCEPTION_OCCURED(env);
+        result = env->NewStringUTF((char *) data);
+        EXCEPTION_OCCURED(env);
     } else {
         gint length = gtk_selection_data_get_length(target_ctx.data);
 
-        jbyteArray array = env->NewByteArray((jsize)length);
+        jbyteArray array = env->NewByteArray((jsize) length);
         EXCEPTION_OCCURED(env);
-        env->SetByteArrayRegion(array, 0, length, (const jbyte*)data);
+        env->SetByteArrayRegion(array, 0, length, (const jbyte *) data);
         EXCEPTION_OCCURED(env);
         result = env->CallStaticObjectMethod(jByteBufferCls, jByteBufferWrap, array);
         EXCEPTION_OCCURED(env);
     }
 
     return result;
 }
 
-jobject dnd_target_get_data(JNIEnv *env, jstring mime)
-{
+jobject dnd_target_get_data(JNIEnv *env, jstring mime) {
     jobject ret = NULL;
 
     if (check_state_in_drag(env)) {
         return NULL;
     }
@@ -429,11 +420,11 @@
         ret = dnd_target_get_list(env, FALSE);
     } else if (g_str_has_prefix(cmime, "text/")) {
         ret = dnd_target_get_raw(env, gdk_atom_intern(cmime, FALSE), TRUE);
     } else if (g_strcmp0(cmime, "application/x-java-file-list") == 0) {
         ret = dnd_target_get_list(env, TRUE);
-    } else if (g_strcmp0(cmime, "application/x-java-rawimage") == 0 ) {
+    } else if (g_strcmp0(cmime, "application/x-java-rawimage") == 0) {
         ret = dnd_target_get_image(env);
     } else {
         ret = dnd_target_get_raw(env, gdk_atom_intern(cmime, FALSE), FALSE);
     }
 
@@ -445,90 +436,83 @@
 
 /************************* SOURCE *********************************************/
 
 static jint dnd_performed_action;
 
-const char * const SOURCE_DND_DATA = "fx-dnd-data";
+const char *const SOURCE_DND_DATA = "fx-dnd-data";
 
-static void dnd_set_performed_action(jint performed_action)
-{
+static void dnd_set_performed_action(jint performed_action) {
     dnd_performed_action = performed_action;
 }
 
-static jint dnd_get_performed_action()
-{
+static jint dnd_get_performed_action() {
     return dnd_performed_action;
 }
 
-static void pixbufDestroyNotifyFunc(guchar *pixels, gpointer)
-{
+static void pixbufDestroyNotifyFunc(guchar *pixels, gpointer) {
     if (pixels != NULL) {
         g_free(pixels);
     }
 }
 
-static jobject dnd_source_get_data(GtkWidget *widget, const char *key)
-{
-    jobject data = (jobject)g_object_get_data(G_OBJECT(widget), SOURCE_DND_DATA);
+static jobject dnd_source_get_data(GtkWidget *widget, const char *key) {
+    jobject data = (jobject) g_object_get_data(G_OBJECT(widget), SOURCE_DND_DATA);
     jstring string = mainEnv->NewStringUTF(key);
     EXCEPTION_OCCURED(mainEnv);
     jobject result = mainEnv->CallObjectMethod(data, jMapGet, string, NULL);
 
     return (EXCEPTION_OCCURED(mainEnv)) ? NULL : result;
 }
 
-static void add_gtk_target_from_jstring(JNIEnv *env, GtkTargetList **list, jstring string, guint flags)
-{
+static void add_gtk_target_from_jstring(JNIEnv *env, GtkTargetList **list, jstring string, guint flags) {
     const char *gstring = env->GetStringUTFChars(string, NULL);
 
     if (g_strcmp0(gstring, "text/plain") == 0) {
         gtk_target_list_add_text_targets(*list, TARGET_TEXT);
     } else if (g_strcmp0(gstring, "application/x-java-rawimage") == 0) {
         gtk_target_list_add_image_targets(*list, TARGET_IMAGE, TRUE);
     } else if (g_strcmp0(gstring, "application/x-java-file-list") == 0) {
         gtk_target_list_add_uri_targets(*list, TARGET_URI);
     } else if (g_strcmp0(gstring, "application/x-java-drag-image") == 0
-        || g_strcmp0(gstring, "application/x-java-drag-image-offset") == 0) {
+               || g_strcmp0(gstring, "application/x-java-drag-image-offset") == 0) {
         // do nothing - those are DragView information
     } else {
         GdkAtom atom = gdk_atom_intern(gstring, FALSE);
         gtk_target_list_add(*list, atom, flags, TARGET_RAW);
     }
 
     env->ReleaseStringUTFChars(string, gstring);
 }
 
-static GtkTargetList* data_to_gtk_target_list(JNIEnv *env, jobject data)
-{
+static GtkTargetList *data_to_gtk_target_list(JNIEnv *env, jobject data) {
     guint flags = GTK_TARGET_OTHER_APP | GTK_TARGET_SAME_APP;
 
     jobject keys;
     jobject keysIterator;
     jstring next;
 
-    GtkTargetList *tlist = gtk_target_list_new (NULL, 0);
+    GtkTargetList *tlist = gtk_target_list_new(NULL, 0);
 
     gint added_count = 0;
 
     keys = env->CallObjectMethod(data, jMapKeySet, NULL);
     JNI_EXCEPTION_TO_CPP(env)
     keysIterator = env->CallObjectMethod(keys, jIterableIterator, NULL);
     JNI_EXCEPTION_TO_CPP(env)
     while (env->CallBooleanMethod(keysIterator, jIteratorHasNext) == JNI_TRUE) {
-        next = (jstring)env->CallObjectMethod(keysIterator, jIteratorNext, NULL);
+        next = (jstring) env->CallObjectMethod(keysIterator, jIteratorNext, NULL);
         JNI_EXCEPTION_TO_CPP(env)
         add_gtk_target_from_jstring(env, &tlist, next, flags);
     }
 
     return tlist;
 }
 
-static gboolean dnd_source_set_string(GtkWidget *widget, GtkSelectionData *data, GdkAtom atom)
-{
+static gboolean dnd_source_set_string(GtkWidget *widget, GtkSelectionData *data, GdkAtom atom) {
     gboolean is_data_set;
 
-    jstring string = (jstring)dnd_source_get_data(widget, "text/plain");
+    jstring string = (jstring) dnd_source_get_data(widget, "text/plain");
     if (!string) {
         return FALSE;
     }
 
     const char *cstring = mainEnv->GetStringUTFChars(string, NULL);
@@ -538,21 +522,20 @@
     mainEnv->ReleaseStringUTFChars(string, cstring);
 
     return is_data_set;
 }
 
-static gboolean dnd_source_set_image(GtkWidget *widget, GtkSelectionData *data, GdkAtom atom)
-{
+static gboolean dnd_source_set_image(GtkWidget *widget, GtkSelectionData *data, GdkAtom atom) {
     jobject pixels = dnd_source_get_data(widget, "application/x-java-rawimage");
     if (!pixels) {
         g_warning("DND source failed to set image\n");
         return FALSE;
     }
 
     gchar *buffer;
     gsize size;
-    const char * type;
+    const char *type;
     GdkPixbuf *pixbuf = NULL;
     gboolean is_data_set;
 
     mainEnv->CallVoidMethod(pixels, jPixelsAttachData, PTR_TO_JLONG(&pixbuf));
 
@@ -563,13 +546,12 @@
     g_object_unref(pixbuf);
 
     return is_data_set;
 }
 
-static gboolean dnd_source_set_uri(GtkWidget *widget, GtkSelectionData *data, GdkAtom atom)
-{
-    const gchar* url = NULL;
+static gboolean dnd_source_set_uri(GtkWidget *widget, GtkSelectionData *data, GdkAtom atom) {
+    const gchar *url = NULL;
     jstring jurl = NULL;
 
     jobjectArray files_array = NULL;
     gsize files_cnt = 0;
 
@@ -584,18 +566,18 @@
     if (!url && !files_cnt) {
         return FALSE;
     }
 
     gboolean is_data_set;
-    GString* res = g_string_new (NULL); //http://www.ietf.org/rfc/rfc2483.txt
+    GString *res = g_string_new(NULL); //http://www.ietf.org/rfc/rfc2483.txt
 
     if (files_cnt > 0) {
         for (gsize i = 0; i < files_cnt; ++i) {
             jstring string = (jstring) mainEnv->GetObjectArrayElement(files_array, i);
             EXCEPTION_OCCURED(mainEnv);
-            const gchar* file = mainEnv->GetStringUTFChars(string, NULL);
-            gchar* uri = g_filename_to_uri(file, NULL, NULL);
+            const gchar *file = mainEnv->GetStringUTFChars(string, NULL);
+            gchar *uri = g_filename_to_uri(file, NULL, NULL);
 
             g_string_append(res, uri);
             g_string_append(res, URI_LIST_LINE_BREAK);
 
             g_free(uri);
@@ -617,26 +599,25 @@
     g_free(uri[0]);
 
     return is_data_set;
 }
 
-static gboolean dnd_source_set_raw(GtkWidget *widget, GtkSelectionData *sel_data, GdkAtom atom)
-{
+static gboolean dnd_source_set_raw(GtkWidget *widget, GtkSelectionData *sel_data, GdkAtom atom) {
     gchar *target_name = gdk_atom_name(atom);
     jobject data = dnd_source_get_data(widget, target_name);
     gboolean is_data_set = FALSE;
     if (data) {
         if (mainEnv->IsInstanceOf(data, jStringCls)) {
-            const char *cstring = mainEnv->GetStringUTFChars((jstring)data, NULL);
+            const char *cstring = mainEnv->GetStringUTFChars((jstring) data, NULL);
             if (cstring) {
                 is_data_set = gtk_selection_data_set_text(sel_data, (gchar *) cstring, strlen(cstring));
-                mainEnv->ReleaseStringUTFChars((jstring)data, cstring);
+                mainEnv->ReleaseStringUTFChars((jstring) data, cstring);
             }
         } else if (mainEnv->IsInstanceOf(data, jByteBufferCls)) {
-            jbyteArray byteArray = (jbyteArray)mainEnv->CallObjectMethod(data, jByteBufferArray);
+            jbyteArray byteArray = (jbyteArray) mainEnv->CallObjectMethod(data, jByteBufferArray);
             if (!EXCEPTION_OCCURED(mainEnv)) {
-                jbyte* raw = mainEnv->GetByteArrayElements(byteArray, NULL);
+                jbyte *raw = mainEnv->GetByteArrayElements(byteArray, NULL);
                 if (raw) {
                     jsize nraw = mainEnv->GetArrayLength(byteArray);
                     gtk_selection_data_set(sel_data, atom, 8, (guchar *) raw, nraw);
                     mainEnv->ReleaseByteArrayElements(byteArray, raw, JNI_ABORT);
                     is_data_set = TRUE;
@@ -662,24 +643,22 @@
     return FALSE;
 }
 
 static void dnd_end_callback(GtkWidget *widget,
                              GdkDragContext *context,
-                             gpointer user_data)
-{
+                             gpointer user_data) {
     if (drag_widget) {
         GdkDragAction action = gdk_drag_context_get_selected_action(context);
         dnd_set_performed_action(translate_gdk_action_to_glass(action));
     }
     gdk_threads_add_idle((GSourceFunc) dnd_destroy_drag_widget_callback, NULL);
 }
 
 static gboolean dnd_drag_failed_callback(GtkWidget *widget,
-                                     GdkDragContext *context,
-                                     GtkDragResult result,
-                                     gpointer user_data)
-{
+                                         GdkDragContext *context,
+                                         GtkDragResult result,
+                                         gpointer user_data) {
     dnd_set_performed_action(com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_NONE);
     gdk_threads_add_idle((GSourceFunc) dnd_destroy_drag_widget_callback, NULL);
 
     return FALSE;
 }
@@ -687,12 +666,11 @@
 static void dnd_data_get_callback(GtkWidget *widget,
                                   GdkDragContext *context,
                                   GtkSelectionData *data,
                                   guint info,
                                   guint time,
-                                  gpointer user_data)
-{
+                                  gpointer user_data) {
     GdkAtom atom = gtk_selection_data_get_target(data);
 
     switch (info) {
         case TARGET_TEXT:
             dnd_source_set_string(widget, data, atom);
@@ -708,21 +686,19 @@
     }
 }
 
 static void dnd_drag_begin_callback(GtkWidget *widget,
                                     GdkDragContext *context,
-                                    gpointer user_data)
-{
+                                    gpointer user_data) {
     if (!is_grab_disabled()) {
         gtk_grab_add(drag_widget);
     }
 
     DragView::set_drag_view(widget, context);
 }
 
-static void dnd_source_push_data(JNIEnv *env, jobject data, jint supported)
-{
+static void dnd_source_push_data(JNIEnv *env, jobject data, jint supported) {
     if (supported == 0) {
         return; // No supported actions, do nothing
     }
 
     data = env->NewGlobalRef(data);
@@ -735,20 +711,20 @@
     gtk_widget_show(drag_widget);
 
     g_object_set_data_full(G_OBJECT(drag_widget), SOURCE_DND_DATA, data, clear_global_ref);
 
     g_signal_connect(drag_widget, "drag-begin",
-        G_CALLBACK(dnd_drag_begin_callback), NULL);
+                     G_CALLBACK(dnd_drag_begin_callback), NULL);
 
     g_signal_connect(drag_widget, "drag-failed",
-        G_CALLBACK(dnd_drag_failed_callback), NULL);
+                     G_CALLBACK(dnd_drag_failed_callback), NULL);
 
     g_signal_connect(drag_widget, "drag-data-get",
-        G_CALLBACK(dnd_data_get_callback), NULL);
+                     G_CALLBACK(dnd_data_get_callback), NULL);
 
     g_signal_connect(drag_widget, "drag-end",
-        G_CALLBACK(dnd_end_callback), NULL);
+                     G_CALLBACK(dnd_end_callback), NULL);
 
     GtkTargetList *tlist = data_to_gtk_target_list(env, data);
 
     GdkDragContext *context;
 
@@ -764,15 +740,14 @@
 #endif
 
     gtk_target_list_unref(tlist);
 }
 
-jint execute_dnd(JNIEnv *env, jobject data, jint supported)
-{
+jint execute_dnd(JNIEnv *env, jobject data, jint supported) {
     try {
         dnd_source_push_data(env, data, supported);
-    } catch (jni_exception&) {
+    } catch (jni_exception &) {
         gdk_threads_add_idle((GSourceFunc) dnd_destroy_drag_widget_callback, NULL);
         return com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_NONE;
     }
 
     while (is_in_drag()) {
@@ -780,25 +755,24 @@
     }
 
     return dnd_get_performed_action();
 }
 
- /******************** DRAG VIEW ***************************/
- DragView::View* DragView::view = NULL;
+/******************** DRAG VIEW ***************************/
+DragView::View *DragView::view = NULL;
 
- gboolean DragView::get_drag_image_offset(GtkWidget *widget, int* x, int* y)
- {
+gboolean DragView::get_drag_image_offset(GtkWidget *widget, int *x, int *y) {
     gboolean offset_set = FALSE;
     jobject bb = dnd_source_get_data(widget, "application/x-java-drag-image-offset");
     if (bb) {
-        jbyteArray byteArray = (jbyteArray)mainEnv->CallObjectMethod(bb, jByteBufferArray);
+        jbyteArray byteArray = (jbyteArray) mainEnv->CallObjectMethod(bb, jByteBufferArray);
         if (!EXCEPTION_OCCURED(mainEnv)) {
-            jbyte* raw = mainEnv->GetByteArrayElements(byteArray, NULL);
+            jbyte *raw = mainEnv->GetByteArrayElements(byteArray, NULL);
             jsize nraw = mainEnv->GetArrayLength(byteArray);
 
             if ((size_t) nraw >= sizeof(jint) * 2) {
-                jint* r = (jint*) raw;
+                jint *r = (jint *) raw;
                 *x = BSWAP_32(r[0]);
                 *y = BSWAP_32(r[1]);
                 offset_set = TRUE;
             }
 
@@ -806,35 +780,34 @@
         }
     }
     return offset_set;
 }
 
-GdkPixbuf* DragView::get_drag_image(GtkWidget *widget, gboolean* is_raw_image, gint* width, gint* height)
-{
+GdkPixbuf *DragView::get_drag_image(GtkWidget *widget, gboolean *is_raw_image, gint *width, gint *height) {
     GdkPixbuf *pixbuf = NULL;
     gboolean is_raw = FALSE;
 
     jobject drag_image = dnd_source_get_data(widget, "application/x-java-drag-image");
 
     if (drag_image) {
         jbyteArray byteArray = (jbyteArray) mainEnv->CallObjectMethod(drag_image, jByteBufferArray);
         if (!EXCEPTION_OCCURED(mainEnv)) {
 
-            jbyte* raw = mainEnv->GetByteArrayElements(byteArray, NULL);
+            jbyte *raw = mainEnv->GetByteArrayElements(byteArray, NULL);
             jsize nraw = mainEnv->GetArrayLength(byteArray);
 
             int w = 0, h = 0;
             int whsz = sizeof(jint) * 2; // Pixels are stored right after two ints
             // in this byteArray: width and height
             if (nraw > whsz) {
-                jint* int_raw = (jint*) raw;
+                jint *int_raw = (jint *) raw;
                 w = BSWAP_32(int_raw[0]);
                 h = BSWAP_32(int_raw[1]);
 
                 // We should have enough pixels for requested width and height
-                if ((nraw - whsz) / 4 - w * h >= 0 ) {
-                    guchar* data = (guchar*) g_try_malloc0(nraw - whsz);
+                if ((nraw - whsz) / 4 - w * h >= 0) {
+                    guchar *data = (guchar *) g_try_malloc0(nraw - whsz);
                     if (data) {
                         memcpy(data, (raw + whsz), nraw - whsz);
                         pixbuf = gdk_pixbuf_new_from_data(data, GDK_COLORSPACE_RGB, TRUE, 8,
                                                           w, h, w * 4, pixbufDestroyNotifyFunc, NULL);
                     }
@@ -859,12 +832,12 @@
 
     int w = gdk_pixbuf_get_width(pixbuf);
     int h = gdk_pixbuf_get_height(pixbuf);
 
     if (w > DRAG_IMAGE_MAX_WIDTH || h > DRAG_IMAGE_MAX_HEIGH) {
-        double rw = DRAG_IMAGE_MAX_WIDTH / (double)w;
-        double rh =  DRAG_IMAGE_MAX_HEIGH / (double)h;
+        double rw = DRAG_IMAGE_MAX_WIDTH / (double) w;
+        double rh = DRAG_IMAGE_MAX_HEIGH / (double) h;
         double r = MIN(rw, rh);
 
         int new_w = w * r;
         int new_h = h * r;
 
@@ -884,55 +857,51 @@
     *height = h;
 
     return pixbuf;
 }
 
-void DragView::set_drag_view(GtkWidget *widget, GdkDragContext *context)
-{
+void DragView::set_drag_view(GtkWidget *widget, GdkDragContext *context) {
     gboolean is_raw_image = FALSE;
     gint w = 0, h = 0;
-    GdkPixbuf* pixbuf = get_drag_image(widget, &is_raw_image, &w, &h);
+    GdkPixbuf *pixbuf = get_drag_image(widget, &is_raw_image, &w, &h);
 
     if (GDK_IS_PIXBUF(pixbuf)) {
         gint offset_x = w / 2;
         gint offset_y = h / 2;
 
         gboolean is_offset_set = get_drag_image_offset(widget, &offset_x, &offset_y);
 
         DragView::view = new DragView::View(context, pixbuf, w, h, is_raw_image,
-            is_offset_set, offset_x, offset_y);
+                                            is_offset_set, offset_x, offset_y);
     }
 }
 
-static void on_screen_changed(GtkWidget *widget, GdkScreen *previous_screen, gpointer view)
-{
-    (void)widget;
-    (void)previous_screen;
+static void on_screen_changed(GtkWidget *widget, GdkScreen *previous_screen, gpointer view) {
+    (void) widget;
+    (void) previous_screen;
 
-    ((DragView::View*) view)->screen_changed();
+    ((DragView::View *) view)->screen_changed();
 }
 
-static gboolean on_expose(GtkWidget *widget, GdkEventExpose *event, gpointer view)
-{
-    (void)widget;
-    (void)event;
+static gboolean on_expose(GtkWidget *widget, GdkEventExpose *event, gpointer view) {
+    (void) widget;
+    (void) event;
 
-    ((DragView::View*) view)->expose();
+    ((DragView::View *) view)->expose();
     return FALSE;
 }
 
-DragView::View::View(GdkDragContext* _context, GdkPixbuf* _pixbuf, gint _width, gint _height,
+DragView::View::View(GdkDragContext *_context, GdkPixbuf *_pixbuf, gint _width, gint _height,
                      gboolean _is_raw_image, gboolean _is_offset_set, gint _offset_x, gint _offset_y) :
-    context(_context),
-    pixbuf(_pixbuf),
-    width(_width),
-    height(_height),
-    is_raw_image(_is_raw_image),
-    is_offset_set(_is_offset_set),
-    offset_x(_offset_x),
-    offset_y(_offset_y)
-{
+        context(_context),
+        pixbuf(_pixbuf),
+        width(_width),
+        height(_height),
+        is_raw_image(_is_raw_image),
+        is_offset_set(_is_offset_set),
+        offset_x(_offset_x),
+        offset_y(_offset_y) {
 #ifdef GLASS_GTK3
     gtk_drag_set_icon_pixbuf(context, pixbuf, offset_x, offset_y);
 #else
     widget = gtk_window_new(GTK_WINDOW_POPUP);
     gtk_window_set_type_hint(GTK_WINDOW(widget), GDK_WINDOW_TYPE_HINT_DND);
@@ -951,12 +920,11 @@
     gtk_widget_show_all(widget);
     gtk_drag_set_icon_widget(context, widget, offset_x, offset_y);
 #endif
 }
 
-void DragView::View::screen_changed()
-{
+void DragView::View::screen_changed() {
     GdkScreen *screen = gtk_widget_get_screen(widget);
 
     glass_configure_window_transparency(widget, true);
 
     if (!gdk_screen_is_composited(screen)) {
@@ -965,21 +933,20 @@
             offset_y = 1;
         }
     }
 }
 
-void DragView::View::expose()
-{
+void DragView::View::expose() {
     cairo_t *context = gdk_cairo_create(gtk_widget_get_window(widget));
 
-    cairo_surface_t* cairo_surface;
+    cairo_surface_t *cairo_surface;
 
-    guchar* pixels = is_raw_image
-            ? (guchar*) convert_BGRA_to_RGBA((const int*) gdk_pixbuf_get_pixels(pixbuf),
-                                                gdk_pixbuf_get_rowstride(pixbuf),
-                                                height)
-            : gdk_pixbuf_get_pixels(pixbuf);
+    guchar *pixels = is_raw_image
+                     ? (guchar *) convert_BGRA_to_RGBA((const int *) gdk_pixbuf_get_pixels(pixbuf),
+                                                       gdk_pixbuf_get_rowstride(pixbuf),
+                                                       height)
+                     : gdk_pixbuf_get_pixels(pixbuf);
 
     cairo_surface = cairo_image_surface_create_for_data(
             pixels,
             CAIRO_FORMAT_ARGB32,
             width, height, width * 4);
diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
@@ -37,10 +37,11 @@
 #include <X11/extensions/shape.h>
 #include <cairo.h>
 #include <cairo-xlib.h>
 #include <gdk/gdkx.h>
 #include <gdk/gdk.h>
+
 #ifdef GLASS_GTK3
 #include <gtk/gtkx.h>
 #endif
 
 #include <string.h>
@@ -49,72 +50,72 @@
 
 #define MOUSE_BACK_BTN 8
 #define MOUSE_FORWARD_BTN 9
 
 static gboolean ctx_configure_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
-    ((WindowContextBase*)user_data)->process_configure();
+    ((WindowContext *) user_data)->process_configure();
     return FALSE;
 }
 
 static gboolean ctx_property_notify_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
-    ((WindowContextBase*)user_data)->process_property_notify(&event->property);
+    ((WindowContext *) user_data)->process_property_notify(&event->property);
     return TRUE;
 }
 
 static gboolean ctx_focus_change_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
-    ((WindowContextBase*)user_data)->process_focus(&event->focus_change);
+    ((WindowContext *) user_data)->process_focus(&event->focus_change);
     return TRUE;
 }
 
 static gboolean ctx_delete_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
-    ((WindowContextBase*)user_data)->process_delete();
+    ((WindowContext *) user_data)->process_delete();
     return TRUE;
 }
 
 static gboolean ctx_window_state_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
-    ((WindowContextBase*)user_data)->process_state(&event->window_state);
+    ((WindowContext *) user_data)->process_state(&event->window_state);
     return FALSE;
 }
 
 static gboolean ctx_device_button_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
-    ((WindowContextBase*)user_data)->process_mouse_button(&event->button);
+    ((WindowContext *) user_data)->process_mouse_button(&event->button);
     return TRUE;
 }
 
 static gboolean ctx_device_motion_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
-    ((WindowContextBase*)user_data)->process_mouse_motion(&event->motion);
+    ((WindowContext *) user_data)->process_mouse_motion(&event->motion);
     gdk_event_request_motions(&event->motion);
     return TRUE;
 }
 
 static gboolean ctx_device_scroll_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
-    ((WindowContextBase*)user_data)->process_mouse_scroll(&event->scroll);
+    ((WindowContext *) user_data)->process_mouse_scroll(&event->scroll);
     return TRUE;
 }
 
 static gboolean ctx_enter_or_leave_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
-    ((WindowContextBase*)user_data)->process_mouse_cross(&event->crossing);
+    ((WindowContext *) user_data)->process_mouse_cross(&event->crossing);
     return TRUE;
 }
 
 static gboolean ctx_key_press_or_release_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
-    ((WindowContextBase*)user_data)->process_key(&event->key);
+    ((WindowContext *) user_data)->process_key(&event->key);
     return TRUE;
 }
 
 static gboolean ctx_map_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
-    ((WindowContextBase*)user_data)->process_map();
+    ((WindowContext *) user_data)->process_map();
     return TRUE;
 }
 
 static void ctx_screen_changed_callback(GtkWidget *widget,
-                              GdkScreen *previous_screen,
-                              gpointer   user_data) {
-    ((WindowContextBase*)user_data)->process_screen_changed();
+                                        GdkScreen *previous_screen,
+                                        gpointer user_data) {
+    ((WindowContext *) user_data)->process_screen_changed();
 }
 
-static void connect_signals(GtkWidget* gtk_widget, WindowContextBase* ctx) {
+static void connect_signals(GtkWidget *gtk_widget, WindowContext *ctx) {
     g_signal_connect(gtk_widget, "configure-event", G_CALLBACK(ctx_configure_callback), ctx);
     g_signal_connect(gtk_widget, "property-notify-event", G_CALLBACK(ctx_property_notify_callback), ctx);
     g_signal_connect(gtk_widget, "focus-in-event", G_CALLBACK(ctx_focus_change_callback), ctx);
     g_signal_connect(gtk_widget, "focus-out-event", G_CALLBACK(ctx_focus_change_callback), ctx);
     g_signal_connect(gtk_widget, "delete-event", G_CALLBACK(ctx_delete_callback), ctx);
@@ -129,97 +130,204 @@
     g_signal_connect(gtk_widget, "key-release-event", G_CALLBACK(ctx_key_press_or_release_callback), ctx);
     g_signal_connect(gtk_widget, "map-event", G_CALLBACK(ctx_map_callback), ctx);
     g_signal_connect(gtk_widget, "screen-changed", G_CALLBACK(ctx_screen_changed_callback), ctx);
 }
 
-GdkWindow* WindowContextBase::get_gdk_window() {
-    return gdk_window;
+
+void destroy_and_delete_ctx(WindowContext *ctx) {
+    if (ctx) {
+        ctx->process_destroy();
+
+        if (!ctx->get_events_count()) {
+            delete ctx;
+        }
+        // else: ctx will be deleted in EventsCounterHelper after completing
+        // an event processing
+    }
 }
 
-GtkWidget* WindowContextBase::get_gtk_widget() {
-    return gtk_widget;
+static inline jint gtk_button_number_to_mouse_button(guint button) {
+    switch (button) {
+        case 1:
+            return com_sun_glass_events_MouseEvent_BUTTON_LEFT;
+        case 2:
+            return com_sun_glass_events_MouseEvent_BUTTON_OTHER;
+        case 3:
+            return com_sun_glass_events_MouseEvent_BUTTON_RIGHT;
+        case MOUSE_BACK_BTN:
+            return com_sun_glass_events_MouseEvent_BUTTON_BACK;
+        case MOUSE_FORWARD_BTN:
+            return com_sun_glass_events_MouseEvent_BUTTON_FORWARD;
+        default:
+            // Other buttons are not supported by quantum and are not reported by other platforms
+            return com_sun_glass_events_MouseEvent_BUTTON_NONE;
+    }
 }
 
-jobject WindowContextBase::get_jview() {
-    return jview;
+////////////////////////////// WindowContext /////////////////////////////////
+
+static GdkAtom atom_net_wm_state = gdk_atom_intern_static_string("_NET_WM_STATE");
+static GdkAtom atom_net_wm_frame_extents = gdk_atom_intern_static_string("_NET_FRAME_EXTENTS");
+
+WindowContext::WindowContext(jobject _jwindow, WindowContext *_owner, long _screen,
+                                   WindowFrameType _frame_type, WindowType type, GdkWMFunction wmf) :
+        screen(_screen),
+        frame_type(_frame_type),
+        window_type(type),
+        owner(_owner),
+        jview(NULL),
+        map_received(false),
+        visible_received(false),
+        on_top(false),
+        is_fullscreen(false),
+        is_iconified(false),
+        is_maximized(false),
+        is_mouse_entered(false),
+        can_be_deleted(false),
+        events_processing_cnt(0),
+        win_group(NULL) {
+
+    jwindow = mainEnv->NewGlobalRef(_jwindow);
+
+    gtk_widget = gtk_window_new(type == POPUP ? GTK_WINDOW_POPUP : GTK_WINDOW_TOPLEVEL);
+
+    if (type != POPUP && owner == NULL) {
+        win_group = gtk_window_group_new();
+    }
+
+    if (gchar * app_name = get_application_name()) {
+        gtk_window_set_wmclass(GTK_WINDOW(gtk_widget), app_name, app_name);
+        g_free(app_name);
+    }
+
+    if (owner) {
+        owner->add_child(this);
+        if (on_top_inherited()) {
+            gtk_window_set_keep_above(GTK_WINDOW(gtk_widget), TRUE);
+        }
+    }
+
+    if (type == UTILITY) {
+        gtk_window_set_type_hint(GTK_WINDOW(gtk_widget), GDK_WINDOW_TYPE_HINT_UTILITY);
+    }
+
+    glong xvisualID = (glong) mainEnv->GetStaticLongField(jApplicationCls, jApplicationVisualID);
+
+    if (xvisualID != 0) {
+        GdkVisual *visual = gdk_x11_screen_lookup_visual(gdk_screen_get_default(), xvisualID);
+        glass_gtk_window_configure_from_visual(gtk_widget, visual);
+    }
+
+    gtk_widget_set_events(gtk_widget, GDK_ALL_EVENTS_MASK);
+    gtk_widget_set_app_paintable(gtk_widget, TRUE);
+    if (frame_type != TITLED) {
+        gtk_window_set_decorated(GTK_WINDOW(gtk_widget), FALSE);
+    }
+
+    glass_gtk_configure_transparency_and_realize(gtk_widget, frame_type == TRANSPARENT);
+    gtk_window_set_title(GTK_WINDOW(gtk_widget), "");
+
+    gdk_window = gtk_widget_get_window(gtk_widget);
+
+    g_object_set_data_full(G_OBJECT(gdk_window), GDK_WINDOW_DATA_CONTEXT, this, NULL);
+
+    glass_dnd_attach_context(this);
+
+    gdk_windowManagerFunctions = wmf;
+    if (wmf) {
+        gdk_window_set_functions(gdk_window, wmf);
+    }
+
+    connect_signals(gtk_widget, this);
 }
 
-jobject WindowContextBase::get_jwindow() {
-    return jwindow;
+void WindowContext::paint(void *data, jint width, jint height) {
+#if GTK_CHECK_VERSION(3, 0, 0)
+    cairo_region_t *region = gdk_window_get_clip_region(gdk_window);
+#if GTK_CHECK_VERSION(3, 22, 0)
+    GdkDrawingContext *dcontext = gdk_window_begin_draw_frame(gdk_window, region);
+    cairo_t *context = gdk_drawing_context_get_cairo_context(dcontext);
+#else
+    gdk_window_begin_paint_region(gdk_window, region);
+    cairo_t* context = gdk_cairo_create(gdk_window);
+#endif
+#else
+    cairo_t *context = gdk_cairo_create(gdk_window);
+#endif
+
+    cairo_set_source_rgba(context, bg_color.red, bg_color.green, bg_color.blue, (frame_type == TRANSPARENT) ? 0 : 1);
+    cairo_set_operator(context, CAIRO_OPERATOR_SOURCE);
+    cairo_paint(context);
+
+    cairo_surface_t *cairo_surface;
+    cairo_surface = cairo_image_surface_create_for_data(
+            (unsigned char *) data,
+            CAIRO_FORMAT_ARGB32,
+            width, height, width * 4);
+
+    cairo_set_source_surface(context, cairo_surface, 0, 0);
+
+    applyShapeMask(data, width, height);
+    cairo_set_operator(context, CAIRO_OPERATOR_SOURCE);
+    cairo_paint(context);
+
+#if GTK_CHECK_VERSION(3, 0, 0)
+#if GTK_CHECK_VERSION(3, 22, 0)
+    gdk_window_end_draw_frame(gdk_window, dcontext);
+    cairo_region_destroy(region);
+#else
+    gdk_window_end_paint(gdk_window);
+    cairo_region_destroy(region);
+    cairo_destroy(context);
+#endif
+#else
+    cairo_destroy(context);
+#endif
+
+    cairo_surface_destroy(cairo_surface);
 }
 
-bool WindowContextBase::isEnabled() {
+bool WindowContext::isEnabled() {
     if (jwindow) {
         bool result = (JNI_TRUE == mainEnv->CallBooleanMethod(jwindow, jWindowIsEnabled));
         LOG_EXCEPTION(mainEnv)
         return result;
     } else {
         return false;
     }
 }
 
-void WindowContextBase::notify_state(jint glass_state) {
-    if (glass_state == com_sun_glass_events_WindowEvent_RESTORE) {
-        if (is_maximized) {
-            glass_state = com_sun_glass_events_WindowEvent_MAXIMIZE;
-        }
-
-        notify_repaint();
-    }
-
-    if (jwindow) {
-       mainEnv->CallVoidMethod(jwindow,
-               jGtkWindowNotifyStateChanged,
-               glass_state);
-       CHECK_JNI_EXCEPTION(mainEnv);
-    }
+GdkWindow *WindowContext::get_gdk_window() {
+    return gdk_window;
 }
 
-void WindowContextBase::notify_repaint() {
-    int w, h;
-    glass_gdk_window_get_size(gdk_window, &w, &h);
-    if (jview) {
-        mainEnv->CallVoidMethod(jview,
-                jViewNotifyRepaint,
-                0, 0, w, h);
-        CHECK_JNI_EXCEPTION(mainEnv);
-    }
+GtkWidget *WindowContext::get_gtk_widget() {
+    return gtk_widget;
 }
 
-void WindowContextBase::process_state(GdkEventWindowState* event) {
-    if (event->changed_mask &
-            (GDK_WINDOW_STATE_ICONIFIED | GDK_WINDOW_STATE_MAXIMIZED)) {
+GtkWindow *WindowContext::get_gtk_window() {
+    return GTK_WINDOW(gtk_widget);
+}
 
-        if (event->changed_mask & GDK_WINDOW_STATE_ICONIFIED) {
-            is_iconified = event->new_window_state & GDK_WINDOW_STATE_ICONIFIED;
-        }
-        if (event->changed_mask & GDK_WINDOW_STATE_MAXIMIZED) {
-            is_maximized = event->new_window_state & GDK_WINDOW_STATE_MAXIMIZED;
-        }
+WindowGeometry WindowContext::get_geometry() {
+    return geometry;
+}
 
-        jint stateChangeEvent;
+jobject WindowContext::get_jwindow() {
+    return jwindow;
+}
 
-        if (is_iconified) {
-            stateChangeEvent = com_sun_glass_events_WindowEvent_MINIMIZE;
-        } else if (is_maximized) {
-            stateChangeEvent = com_sun_glass_events_WindowEvent_MAXIMIZE;
-        } else {
-            stateChangeEvent = com_sun_glass_events_WindowEvent_RESTORE;
-            if ((gdk_windowManagerFunctions & GDK_FUNC_MINIMIZE) == 0) {
-                // in this case - the window manager will not support the programatic
-                // request to iconify - so we need to restore it now.
-                gdk_window_set_functions(gdk_window, gdk_windowManagerFunctions);
-            }
-        }
+jobject WindowContext::get_jview() {
+    return jview;
+}
 
-        notify_state(stateChangeEvent);
-    } else if (event->changed_mask & GDK_WINDOW_STATE_ABOVE) {
-        notify_on_top( event->new_window_state & GDK_WINDOW_STATE_ABOVE);
-    }
+void WindowContext::process_map() {
+    map_received = true;
+    apply_geometry();
 }
 
-void WindowContextBase::process_focus(GdkEventFocus* event) {
+void WindowContext::process_focus(GdkEventFocus *event) {
     if (!event->in) {
         ungrab_focus();
     }
 
     if (xim.enabled && xim.ic) {
@@ -231,54 +339,85 @@
     }
 
     if (jwindow) {
         if (!event->in || isEnabled()) {
             mainEnv->CallVoidMethod(jwindow, jWindowNotifyFocus,
-                    event->in ? com_sun_glass_events_WindowEvent_FOCUS_GAINED : com_sun_glass_events_WindowEvent_FOCUS_LOST);
+                                    event->in ? com_sun_glass_events_WindowEvent_FOCUS_GAINED
+                                              : com_sun_glass_events_WindowEvent_FOCUS_LOST);
             CHECK_JNI_EXCEPTION(mainEnv)
         } else {
             mainEnv->CallVoidMethod(jwindow, jWindowNotifyFocusDisabled);
             CHECK_JNI_EXCEPTION(mainEnv)
         }
     }
 }
 
-void WindowContextBase::increment_events_counter() {
-    ++events_processing_cnt;
-}
-
-void WindowContextBase::decrement_events_counter() {
-    --events_processing_cnt;
-}
+void WindowContext::process_property_notify(GdkEventProperty *event) {
+    if (event->window == gdk_window) {
+        if (event->atom == atom_net_wm_state) {
+            process_net_wm_property();
+        } else if (event->atom == atom_net_wm_frame_extents) {
+            if (frame_type != TITLED) {
+                return;
+            }
 
-size_t WindowContextBase::get_events_count() {
-    return events_processing_cnt;
-}
+            int top, left, bottom, right;
 
-bool WindowContextBase::is_dead() {
-    return can_be_deleted;
-}
+            if (get_frame_extents_property(&top, &left, &bottom, &right)) {
+                if (top + left + bottom + right > 0) {
+                    geometry.frame_extents_received = true;
+                    geometry.adjust_w = left + right;
+                    geometry.adjust_h = top + bottom;
+                    geometry.view_x = left;
+                    geometry.view_y = top;
 
-void destroy_and_delete_ctx(WindowContext* ctx) {
-    if (ctx) {
-        ctx->process_destroy();
+                    save_cached_extents();
 
-        if (!ctx->get_events_count()) {
-            delete ctx;
+                    // set bounds again to set to correct window size that must
+                    // be the total width and height accounting extents
+                    set_bounds(0, 0, false, false, -1, -1, -1, -1);
+                }
+            }
         }
-        // else: ctx will be deleted in EventsCounterHelper after completing
-        // an event processing
     }
 }
 
-void WindowContextBase::process_destroy() {
+void WindowContext::process_configure() {
+    calculate_adjustments();
+
+    gint x, y, w, h, gtk_w, gtk_h;
+
+    gtk_window_get_position(GTK_WINDOW(gtk_widget), &x, &y);
+    gtk_window_get_size(GTK_WINDOW(gtk_widget), &gtk_w, &gtk_h);
+    w = gtk_w + geometry.adjust_w;
+    h = gtk_h + geometry.adjust_h;
+
+    gboolean pos_changed = geometry.current_x != x || geometry.current_y != y;
+    gboolean size_changed = geometry.current_w != w || geometry.current_h != h
+                            || geometry.current_cw != gtk_w || geometry.current_ch != gtk_h;
+
+    geometry.current_x = x;
+    geometry.current_y = y;
+    geometry.current_w = w;
+    geometry.current_h = h;
+    geometry.current_cw = gtk_w;
+    geometry.current_ch = gtk_h;
+
+    size_position_notify(size_changed, pos_changed);
+}
+
+void WindowContext::process_destroy() {
+    if (owner) {
+        owner->remove_child(this);
+    }
+
     ungrab_focus();
 
-    std::set<WindowContextTop*>::iterator it;
+    std::set<WindowContext *>::iterator it;
     for (it = children.begin(); it != children.end(); ++it) {
         // FIX JDK-8226537: this method calls set_owner(NULL) which prevents
-        // WindowContextTop::process_destroy() to call remove_child() (because children
+        // WindowContext::process_destroy() to call remove_child() (because children
         // is being iterated here) but also prevents gtk_window_set_transient_for from
         // being called - this causes the crash on gnome.
         gtk_window_set_transient_for((*it)->get_gtk_window(), NULL);
         (*it)->set_owner(NULL);
         destroy_and_delete_ctx(*it);
@@ -301,45 +440,27 @@
     }
 
     can_be_deleted = true;
 }
 
-void WindowContextBase::process_delete() {
+void WindowContext::process_delete() {
     if (jwindow && isEnabled()) {
         gtk_widget_hide_on_delete(gtk_widget);
         mainEnv->CallVoidMethod(jwindow, jWindowNotifyClose);
         CHECK_JNI_EXCEPTION(mainEnv)
     }
 }
 
-void WindowContextBase::process_expose(GdkEventExpose* event) {
-   if (jview && is_visible()) {
+void WindowContext::process_expose(GdkEventExpose *event) {
+    if (jview && is_visible()) {
         mainEnv->CallVoidMethod(jview, jViewNotifyRepaint, event->area.x, event->area.y,
-                                 event->area.width, event->area.height);
+                                event->area.width, event->area.height);
         CHECK_JNI_EXCEPTION(mainEnv)
     }
 }
 
-static inline jint gtk_button_number_to_mouse_button(guint button) {
-    switch (button) {
-        case 1:
-            return com_sun_glass_events_MouseEvent_BUTTON_LEFT;
-        case 2:
-            return com_sun_glass_events_MouseEvent_BUTTON_OTHER;
-        case 3:
-            return com_sun_glass_events_MouseEvent_BUTTON_RIGHT;
-        case MOUSE_BACK_BTN:
-            return com_sun_glass_events_MouseEvent_BUTTON_BACK;
-        case MOUSE_FORWARD_BTN:
-            return com_sun_glass_events_MouseEvent_BUTTON_FORWARD;
-        default:
-            // Other buttons are not supported by quantum and are not reported by other platforms
-            return com_sun_glass_events_MouseEvent_BUTTON_NONE;
-    }
-}
-
-void WindowContextBase::process_mouse_button(GdkEventButton* event) {
+void WindowContext::process_mouse_button(GdkEventButton *event) {
     bool press = event->type == GDK_BUTTON_PRESS;
     guint state = event->state;
     guint mask = 0;
 
     // We need to add/remove current mouse button from the modifier flags
@@ -371,30 +492,30 @@
 
     jint button = gtk_button_number_to_mouse_button(event->button);
 
     if (jview && button != com_sun_glass_events_MouseEvent_BUTTON_NONE) {
         mainEnv->CallVoidMethod(jview, jViewNotifyMouse,
-                press ? com_sun_glass_events_MouseEvent_DOWN : com_sun_glass_events_MouseEvent_UP,
-                button,
-                (jint) event->x, (jint) event->y,
-                (jint) event->x_root, (jint) event->y_root,
-                gdk_modifier_mask_to_glass(state),
-                (event->button == 3 && press) ? JNI_TRUE : JNI_FALSE,
-                JNI_FALSE);
+                                press ? com_sun_glass_events_MouseEvent_DOWN : com_sun_glass_events_MouseEvent_UP,
+                                button,
+                                (jint) event->x, (jint) event->y,
+                                (jint) event->x_root, (jint) event->y_root,
+                                gdk_modifier_mask_to_glass(state),
+                                (event->button == 3 && press) ? JNI_TRUE : JNI_FALSE,
+                                JNI_FALSE);
         CHECK_JNI_EXCEPTION(mainEnv)
 
         if (jview && event->button == 3 && press) {
             mainEnv->CallVoidMethod(jview, jViewNotifyMenu,
-                    (jint)event->x, (jint)event->y,
-                    (jint)event->x_root, (jint)event->y_root,
-                    JNI_FALSE);
+                                    (jint) event->x, (jint) event->y,
+                                    (jint) event->x_root, (jint) event->y_root,
+                                    JNI_FALSE);
             CHECK_JNI_EXCEPTION(mainEnv)
         }
     }
 }
 
-void WindowContextBase::process_mouse_motion(GdkEventMotion* event) {
+void WindowContext::process_mouse_motion(GdkEventMotion *event) {
     jint glass_modifier = gdk_modifier_mask_to_glass(event->state);
     jint isDrag = glass_modifier & (
             com_sun_glass_events_KeyEvent_MODIFIER_BUTTON_PRIMARY |
             com_sun_glass_events_KeyEvent_MODIFIER_BUTTON_MIDDLE |
             com_sun_glass_events_KeyEvent_MODIFIER_BUTTON_SECONDARY |
@@ -414,22 +535,22 @@
         button = com_sun_glass_events_MouseEvent_BUTTON_FORWARD;
     }
 
     if (jview) {
         mainEnv->CallVoidMethod(jview, jViewNotifyMouse,
-                isDrag ? com_sun_glass_events_MouseEvent_DRAG : com_sun_glass_events_MouseEvent_MOVE,
-                button,
-                (jint) event->x, (jint) event->y,
-                (jint) event->x_root, (jint) event->y_root,
-                glass_modifier,
-                JNI_FALSE,
-                JNI_FALSE);
+                                isDrag ? com_sun_glass_events_MouseEvent_DRAG : com_sun_glass_events_MouseEvent_MOVE,
+                                button,
+                                (jint) event->x, (jint) event->y,
+                                (jint) event->x_root, (jint) event->y_root,
+                                glass_modifier,
+                                JNI_FALSE,
+                                JNI_FALSE);
         CHECK_JNI_EXCEPTION(mainEnv)
     }
 }
 
-void WindowContextBase::process_mouse_scroll(GdkEventScroll* event) {
+void WindowContext::process_mouse_scroll(GdkEventScroll *event) {
     jdouble dx = 0;
     jdouble dy = 0;
 
     // converting direction to change in pixels
     switch (event->direction) {
@@ -456,22 +577,22 @@
         dy = dx;
         dx = t;
     }
     if (jview) {
         mainEnv->CallVoidMethod(jview, jViewNotifyScroll,
-                (jint) event->x, (jint) event->y,
-                (jint) event->x_root, (jint) event->y_root,
-                dx, dy,
-                gdk_modifier_mask_to_glass(event->state),
-                (jint) 0, (jint) 0,
-                (jint) 0, (jint) 0,
-                (jdouble) 40.0, (jdouble) 40.0);
+                                (jint) event->x, (jint) event->y,
+                                (jint) event->x_root, (jint) event->y_root,
+                                dx, dy,
+                                gdk_modifier_mask_to_glass(event->state),
+                                (jint) 0, (jint) 0,
+                                (jint) 0, (jint) 0,
+                                (jdouble) 40.0, (jdouble) 40.0);
         CHECK_JNI_EXCEPTION(mainEnv)
     }
 }
 
-void WindowContextBase::process_mouse_cross(GdkEventCrossing* event) {
+void WindowContext::process_mouse_cross(GdkEventCrossing *event) {
     bool enter = event->type == GDK_ENTER_NOTIFY;
 
     if (jview) {
         guint state = event->state;
         if (enter) { // workaround for RT-21590
@@ -479,23 +600,24 @@
         }
 
         if (enter != is_mouse_entered) {
             is_mouse_entered = enter;
             mainEnv->CallVoidMethod(jview, jViewNotifyMouse,
-                    enter ? com_sun_glass_events_MouseEvent_ENTER : com_sun_glass_events_MouseEvent_EXIT,
-                    com_sun_glass_events_MouseEvent_BUTTON_NONE,
-                    (jint) event->x, (jint) event->y,
-                    (jint) event->x_root, (jint) event->y_root,
-                    gdk_modifier_mask_to_glass(state),
-                    JNI_FALSE,
-                    JNI_FALSE);
+                                    enter ? com_sun_glass_events_MouseEvent_ENTER
+                                          : com_sun_glass_events_MouseEvent_EXIT,
+                                    com_sun_glass_events_MouseEvent_BUTTON_NONE,
+                                    (jint) event->x, (jint) event->y,
+                                    (jint) event->x_root, (jint) event->y_root,
+                                    gdk_modifier_mask_to_glass(state),
+                                    JNI_FALSE,
+                                    JNI_FALSE);
             CHECK_JNI_EXCEPTION(mainEnv)
         }
     }
 }
 
-void WindowContextBase::process_key(GdkEventKey* event) {
+void WindowContext::process_key(GdkEventKey *event) {
     bool press = event->type == GDK_KEY_PRESS;
     jint glassKey = get_glass_key(event);
     jint glassModifier = gdk_modifier_mask_to_glass(event->state);
     if (press) {
         glassModifier |= glass_key_to_modifier(glassKey);
@@ -534,557 +656,106 @@
         jChars = mainEnv->NewCharArray(0);
     }
     if (jview) {
         if (press) {
             mainEnv->CallVoidMethod(jview, jViewNotifyKey,
-                    com_sun_glass_events_KeyEvent_PRESS,
-                    glassKey,
-                    jChars,
-                    glassModifier);
+                                    com_sun_glass_events_KeyEvent_PRESS,
+                                    glassKey,
+                                    jChars,
+                                    glassModifier);
             CHECK_JNI_EXCEPTION(mainEnv)
 
             if (jview && key > 0) { // TYPED events should only be sent for printable characters.
                 mainEnv->CallVoidMethod(jview, jViewNotifyKey,
-                        com_sun_glass_events_KeyEvent_TYPED,
-                        com_sun_glass_events_KeyEvent_VK_UNDEFINED,
-                        jChars,
-                        glassModifier);
+                                        com_sun_glass_events_KeyEvent_TYPED,
+                                        com_sun_glass_events_KeyEvent_VK_UNDEFINED,
+                                        jChars,
+                                        glassModifier);
                 CHECK_JNI_EXCEPTION(mainEnv)
             }
         } else {
             mainEnv->CallVoidMethod(jview, jViewNotifyKey,
-                    com_sun_glass_events_KeyEvent_RELEASE,
-                    glassKey,
-                    jChars,
-                    glassModifier);
+                                    com_sun_glass_events_KeyEvent_RELEASE,
+                                    glassKey,
+                                    jChars,
+                                    glassModifier);
             CHECK_JNI_EXCEPTION(mainEnv)
         }
     }
 }
 
-void WindowContextBase::paint(void* data, jint width, jint height) {
-#if GTK_CHECK_VERSION(3, 0, 0)
-    cairo_region_t *region = gdk_window_get_clip_region(gdk_window);
-#if GTK_CHECK_VERSION(3, 22, 0)
-    GdkDrawingContext *dcontext = gdk_window_begin_draw_frame(gdk_window, region);
-    cairo_t *context = gdk_drawing_context_get_cairo_context(dcontext);
-#else
-    gdk_window_begin_paint_region(gdk_window, region);
-    cairo_t* context = gdk_cairo_create(gdk_window);
-#endif
-#else
-    cairo_t* context = gdk_cairo_create(gdk_window);
-#endif
-    if (bg_color.is_set) {
-        cairo_set_source_rgb(context, bg_color.red, bg_color.green, bg_color.blue);
-        cairo_set_operator(context, CAIRO_OPERATOR_SOURCE);
-        cairo_paint(context);
-    }
-
-    cairo_surface_t* cairo_surface;
-    cairo_surface = cairo_image_surface_create_for_data(
-            (unsigned char*)data,
-            CAIRO_FORMAT_ARGB32,
-            width, height, width * 4);
-
-    applyShapeMask(data, width, height);
-    cairo_set_source_surface(context, cairo_surface, 0, 0);
-    cairo_set_operator(context, CAIRO_OPERATOR_ATOP);
-    cairo_paint(context);
-
-#if GTK_CHECK_VERSION(3, 0, 0)
-#if GTK_CHECK_VERSION(3, 22, 0)
-    gdk_window_end_draw_frame(gdk_window, dcontext);
-    cairo_region_destroy(region);
-#else
-    gdk_window_end_paint(gdk_window);
-    cairo_region_destroy(region);
-    cairo_destroy(context);
-#endif
-#else
-    cairo_destroy(context);
-#endif
-
-    cairo_surface_destroy(cairo_surface);
-}
-
-void WindowContextBase::add_child(WindowContextTop* child) {
-    children.insert(child);
-    gtk_window_set_transient_for(child->get_gtk_window(), this->get_gtk_window());
-
-    if (win_group != NULL) {
-        gtk_window_group_add_window(win_group, GTK_WINDOW(child->get_gtk_widget()));
-    }
-}
-
-void WindowContextBase::remove_child(WindowContextTop* child) {
-    children.erase(child);
-    gtk_window_set_transient_for(child->get_gtk_window(), NULL);
-
-    if (win_group != NULL) {
-        gtk_window_group_remove_window(win_group, GTK_WINDOW(child->get_gtk_widget()));
-    }
-}
-
-void WindowContextBase::show_or_hide_children(bool show) {
-    std::set<WindowContextTop*>::iterator it;
-    for (it = children.begin(); it != children.end(); ++it) {
-        (*it)->set_minimized(!show);
-        (*it)->show_or_hide_children(show);
-    }
-}
-
-void WindowContextBase::set_visible(bool visible) {
-    if (visible) {
-        gtk_widget_show_all(gtk_widget);
-    } else {
-        gtk_widget_hide(gtk_widget);
-        if (jview && is_mouse_entered) {
-            is_mouse_entered = false;
-            mainEnv->CallVoidMethod(jview, jViewNotifyMouse,
-                    com_sun_glass_events_MouseEvent_EXIT,
-                    com_sun_glass_events_MouseEvent_BUTTON_NONE,
-                    0, 0,
-                    0, 0,
-                    0,
-                    JNI_FALSE,
-                    JNI_FALSE);
-            CHECK_JNI_EXCEPTION(mainEnv)
-        }
-    }
-}
-
-bool WindowContextBase::is_visible() {
-    return gtk_widget_get_visible(gtk_widget);
-}
-
-bool WindowContextBase::set_view(jobject view) {
-
-    if (jview) {
-        mainEnv->CallVoidMethod(jview, jViewNotifyMouse,
-                com_sun_glass_events_MouseEvent_EXIT,
-                com_sun_glass_events_MouseEvent_BUTTON_NONE,
-                0, 0,
-                0, 0,
-                0,
-                JNI_FALSE,
-                JNI_FALSE);
-        mainEnv->DeleteGlobalRef(jview);
-    }
-
-    if (view) {
-        jview = mainEnv->NewGlobalRef(view);
-    } else {
-        jview = NULL;
-    }
-    return TRUE;
-}
-
-bool WindowContextBase::grab_focus() {
-    if (win_group == NULL) {
-        return FALSE;
-    }
-
-    if (!gtk_widget_has_grab(gtk_widget)) {
-        GtkWidget* current_grab = gtk_grab_get_current();
-
-        if (current_grab != NULL) {
-            gtk_grab_remove(current_grab);
-        }
-
-        gtk_grab_add(gtk_widget);
-    }
-
-    return TRUE;
-}
-
-void WindowContextBase::ungrab_focus() {
-    if (win_group == NULL) {
-        return;
-    }
-
-    if (gtk_widget_has_grab(gtk_widget)) {
-        gtk_grab_remove(gtk_widget);
-
-        if (jwindow) {
-            mainEnv->CallVoidMethod(jwindow, jWindowNotifyFocusUngrab);
-            CHECK_JNI_EXCEPTION(mainEnv)
-        }
-    }
-}
-
-void WindowContextBase::set_cursor(GdkCursor* cursor) {
-    gdk_window_set_cursor(gdk_window, cursor);
-}
-
-void WindowContextBase::set_background(float r, float g, float b) {
-    bg_color.red = r;
-    bg_color.green = g;
-    bg_color.blue = b;
-    bg_color.is_set = TRUE;
-    notify_repaint();
-}
-
-WindowContextBase::~WindowContextBase() {
-    if (xim.ic) {
-        XDestroyIC(xim.ic);
-        xim.ic = NULL;
-    }
-    if (xim.im) {
-        XCloseIM(xim.im);
-        xim.im = NULL;
-    }
-
-    gtk_widget_destroy(gtk_widget);
-}
-
-////////////////////////////// WindowContextTop /////////////////////////////////
-
-static GdkAtom atom_net_wm_state = gdk_atom_intern_static_string("_NET_WM_STATE");
-static GdkAtom atom_net_wm_frame_extents = gdk_atom_intern_static_string("_NET_FRAME_EXTENTS");
-
-WindowContextTop::WindowContextTop(jobject _jwindow, WindowContext* _owner, long _screen,
-        WindowFrameType _frame_type, WindowType type, GdkWMFunction wmf) :
-            WindowContextBase(),
-            screen(_screen),
-            frame_type(_frame_type),
-            window_type(type),
-            owner(_owner),
-            geometry(),
-            map_received(false),
-            visible_received(false),
-            on_top(false),
-            is_fullscreen(false)
-{
-    jwindow = mainEnv->NewGlobalRef(_jwindow);
-
-    gtk_widget = gtk_window_new(type == POPUP ? GTK_WINDOW_POPUP : GTK_WINDOW_TOPLEVEL);
-
-    if (type != POPUP && owner == NULL) {
-        win_group = gtk_window_group_new();
-    }
-
-    if (gchar* app_name = get_application_name()) {
-        gtk_window_set_wmclass(GTK_WINDOW(gtk_widget), app_name, app_name);
-        g_free(app_name);
-    }
-
-    if (owner) {
-        owner->add_child(this);
-        if (on_top_inherited()) {
-            gtk_window_set_keep_above(GTK_WINDOW(gtk_widget), TRUE);
-        }
-    }
-
-    if (type == UTILITY) {
-        gtk_window_set_type_hint(GTK_WINDOW(gtk_widget), GDK_WINDOW_TYPE_HINT_UTILITY);
-    }
-
-    glong xvisualID = (glong)mainEnv->GetStaticLongField(jApplicationCls, jApplicationVisualID);
-
-    if (xvisualID != 0) {
-        GdkVisual *visual = gdk_x11_screen_lookup_visual(gdk_screen_get_default(), xvisualID);
-        glass_gtk_window_configure_from_visual(gtk_widget, visual);
-    }
-
-    gtk_widget_set_events(gtk_widget, GDK_ALL_EVENTS_MASK);
-    gtk_widget_set_app_paintable(gtk_widget, TRUE);
-    if (frame_type != TITLED) {
-        gtk_window_set_decorated(GTK_WINDOW(gtk_widget), FALSE);
-    }
-
-    glass_gtk_configure_transparency_and_realize(gtk_widget, frame_type == TRANSPARENT);
-    gtk_window_set_title(GTK_WINDOW(gtk_widget), "");
-
-    gdk_window = gtk_widget_get_window(gtk_widget);
-
-    g_object_set_data_full(G_OBJECT(gdk_window), GDK_WINDOW_DATA_CONTEXT, this, NULL);
-
-    glass_dnd_attach_context(this);
-
-    gdk_windowManagerFunctions = wmf;
-    if (wmf) {
-        gdk_window_set_functions(gdk_window, wmf);
-    }
-
-    connect_signals(gtk_widget, this);
-}
-
-// Applied to a temporary full screen window to prevent sending events to Java
-void WindowContextTop::detach_from_java() {
-    if (jview) {
-        mainEnv->DeleteGlobalRef(jview);
-        jview = NULL;
-    }
-    if (jwindow) {
-        mainEnv->DeleteGlobalRef(jwindow);
-        jwindow = NULL;
-    }
-}
-
-// This function calculate the deltas between window and window + decoration (titleblar, borders).
-// Only useful if the window manager does not support the frame extents extension - in this case
-// it uses GDK calculation, that is primary based on _NET_FRAME_EXTENTS but will try harder
-// if that's not available.
-void WindowContextTop::calculate_adjustments() {
-    if (frame_type != TITLED || geometry.frame_extents_received) {
-        return;
-    }
-
-    gint x, y;
-    gdk_window_get_origin(gdk_window, &x, &y);
-
-    gint rx, ry;
-    gdk_window_get_root_origin(gdk_window, &rx, &ry);
-
-    if (rx != x || ry != y) {
-        // the left extends are correct - the right one is guessed to be the same
-        geometry.adjust_w = (rx - x) * 2;
-        // guess that bottom size is the same as left and right
-        geometry.adjust_h = (ry - y) + (rx - x);
-
-        // those will be correct
-        geometry.view_x = (rx - x);
-        geometry.view_y = (ry - y);
-
-        save_cached_extents();
-    } else {
-        CachedExtents c = (window_type == NORMAL) ? normal_extents : utility_extents;
-        geometry.adjust_w = c.adjust_w;
-        geometry.adjust_h = c.adjust_h;
-        geometry.view_x = c.view_x;
-        geometry.view_y = c.view_y;
-    }
-
-    apply_geometry();
-}
-
-void WindowContextTop::save_cached_extents() {
-    if (frame_type != TITLED) {
-        return;
-    }
-
-    if (window_type == NORMAL) {
-        normal_extents.adjust_w = geometry.adjust_w;
-        normal_extents.adjust_h = geometry.adjust_h;
-        normal_extents.view_x = geometry.view_x;
-        normal_extents.view_y = geometry.view_y;
-    } else {
-        utility_extents.adjust_w = geometry.adjust_w;
-        utility_extents.adjust_h = geometry.adjust_h;
-        utility_extents.view_x = geometry.view_x;
-        utility_extents.view_y = geometry.view_y;
-    }
-}
-
-void WindowContextTop::apply_geometry() {
-    if (!map_received) {
-        return;
-    }
-
-    GdkGeometry gdk_geometry;
-    gdk_geometry.win_gravity = GDK_GRAVITY_NORTH_WEST;
-
-    if ((!geometry.resizable || !geometry.enabled) && !(is_maximized || is_fullscreen)) {
-        // not resizeable
-        int w = (geometry.current_w - geometry.adjust_w) > 0
-                    ? geometry.current_w - geometry.adjust_w
-                    : geometry.current_cw;
-
-        int h = (geometry.current_h - geometry.adjust_h) > 0
-                    ? geometry.current_h - geometry.adjust_h
-                    : geometry.current_ch;
-
-        gdk_geometry.min_width = gdk_geometry.max_width = w;
-        gdk_geometry.min_height = gdk_geometry.max_height = h;
-    } else {
-        gdk_geometry.min_width = (geometry.minw - geometry.adjust_w) > 0
-                                    ? geometry.minw - geometry.adjust_w : 1;
-        gdk_geometry.min_height = (geometry.minh -  geometry.adjust_h) > 0
-                                    ? geometry.minh - geometry.adjust_h : 1;
-
-        gdk_geometry.max_width = (geometry.maxw - geometry.adjust_w > 0)
-                                    ? geometry.maxw - geometry.adjust_w : G_MAXINT;
-        gdk_geometry.max_height = (geometry.maxh - geometry.adjust_h> 0)
-                                    ? geometry.maxh - geometry.adjust_h : G_MAXINT;
-    }
-
-    gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &gdk_geometry,
-        (GdkWindowHints) (GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE | GDK_HINT_WIN_GRAVITY));
-}
-
-void WindowContextTop::size_position_notify(bool size_changed, bool pos_changed) {
-    if (jview) {
-        if (size_changed) {
-            mainEnv->CallVoidMethod(jview, jViewNotifyResize, geometry.current_cw, geometry.current_ch);
-            CHECK_JNI_EXCEPTION(mainEnv);
-        }
-
-        if (pos_changed) {
-            mainEnv->CallVoidMethod(jview, jViewNotifyView, com_sun_glass_events_ViewEvent_MOVE);
-            CHECK_JNI_EXCEPTION(mainEnv)
-        }
-    }
-
-    if (jwindow) {
-        if (size_changed || is_maximized) {
-            mainEnv->CallVoidMethod(jwindow, jWindowNotifyResize,
-                    (is_maximized)
-                        ? com_sun_glass_events_WindowEvent_MAXIMIZE
-                        : com_sun_glass_events_WindowEvent_RESIZE,
-                    geometry.current_w, geometry.current_h);
-            CHECK_JNI_EXCEPTION(mainEnv)
-        }
-
-        if (pos_changed) {
-            mainEnv->CallVoidMethod(jwindow, jWindowNotifyMove, geometry.current_x, geometry.current_y);
-            CHECK_JNI_EXCEPTION(mainEnv)
-        }
-    }
-}
-
-void WindowContextTop::activate_window() {
-    Display *display = GDK_DISPLAY_XDISPLAY (gdk_window_get_display (gdk_window));
-    Atom navAtom = XInternAtom(display, "_NET_ACTIVE_WINDOW", True);
-    if (navAtom != None) {
-        XClientMessageEvent clientMessage;
-        memset(&clientMessage, 0, sizeof(clientMessage));
-
-        clientMessage.type = ClientMessage;
-        clientMessage.window = GDK_WINDOW_XID(gdk_window);
-        clientMessage.message_type = navAtom;
-        clientMessage.format = 32;
-        clientMessage.data.l[0] = 1;
-        clientMessage.data.l[1] = gdk_x11_get_server_time(gdk_window);
-        clientMessage.data.l[2] = 0;
-
-        XSendEvent(display, XDefaultRootWindow(display), False,
-                   SubstructureRedirectMask | SubstructureNotifyMask,
-                   (XEvent *) &clientMessage);
-        XFlush(display);
-    }
-}
-
-bool WindowContextTop::get_frame_extents_property(int *top, int *left,
-        int *bottom, int *right) {
-    unsigned long *extents;
-
-    if (gdk_property_get(gdk_window,
-            atom_net_wm_frame_extents,
-            gdk_atom_intern("CARDINAL", FALSE),
-            0,
-            sizeof (unsigned long) * 4,
-            FALSE,
-            NULL,
-            NULL,
-            NULL,
-            (guchar**) & extents)) {
-        *left = extents [0];
-        *right = extents [1];
-        *top = extents [2];
-        *bottom = extents [3];
-
-        g_free(extents);
-        return true;
-    }
-
-    return false;
-}
-
-void WindowContextTop::process_net_wm_property() {
-    // Workaround for https://bugs.launchpad.net/unity/+bug/998073
-
-    static GdkAtom atom_atom = gdk_atom_intern_static_string("ATOM");
-    static GdkAtom atom_net_wm_state = gdk_atom_intern_static_string("_NET_WM_STATE");
-    static GdkAtom atom_net_wm_state_hidden = gdk_atom_intern_static_string("_NET_WM_STATE_HIDDEN");
-    static GdkAtom atom_net_wm_state_above = gdk_atom_intern_static_string("_NET_WM_STATE_ABOVE");
-
-    gint length;
-    glong* atoms = NULL;
-
-    if (gdk_property_get(gdk_window, atom_net_wm_state, atom_atom,
-            0, G_MAXLONG, FALSE, NULL, NULL, &length, (guchar**) &atoms)) {
+void WindowContext::process_state(GdkEventWindowState *event) {
+    if (event->changed_mask &
+        (GDK_WINDOW_STATE_ICONIFIED | GDK_WINDOW_STATE_MAXIMIZED)) {
 
-        bool is_hidden = false;
-        bool is_above = false;
-        for (gint i = 0; i < (gint)(length / sizeof(glong)); i++) {
-            if (atom_net_wm_state_hidden == (GdkAtom)atoms[i]) {
-                is_hidden = true;
-            } else if (atom_net_wm_state_above == (GdkAtom)atoms[i]) {
-                is_above = true;
-            }
+        if (event->changed_mask & GDK_WINDOW_STATE_ICONIFIED) {
+            is_iconified = event->new_window_state & GDK_WINDOW_STATE_ICONIFIED;
         }
-
-        g_free(atoms);
-
-        if (is_iconified != is_hidden) {
-            is_iconified = is_hidden;
-
-            notify_state((is_hidden)
-                    ? com_sun_glass_events_WindowEvent_MINIMIZE
-                    : com_sun_glass_events_WindowEvent_RESTORE);
+        if (event->changed_mask & GDK_WINDOW_STATE_MAXIMIZED) {
+            is_maximized = event->new_window_state & GDK_WINDOW_STATE_MAXIMIZED;
         }
 
-        notify_on_top(is_above);
-    }
-}
-
-void WindowContextTop::process_property_notify(GdkEventProperty* event) {
-    if (event->window == gdk_window) {
-        if (event->atom == atom_net_wm_state) {
-            process_net_wm_property();
-        } else if (event->atom == atom_net_wm_frame_extents) {
-            if (frame_type != TITLED) {
-                return;
-            }
-
-            int top, left, bottom, right;
-
-            if (get_frame_extents_property(&top, &left, &bottom, &right)) {
-                if (top + left + bottom + right > 0) {
-                    geometry.frame_extents_received = true;
-                    geometry.adjust_w = left + right;
-                    geometry.adjust_h = top + bottom;
-                    geometry.view_x = left;
-                    geometry.view_y = top;
-
-                    save_cached_extents();
+        jint stateChangeEvent;
 
-                    // set bounds again to set to correct window size that must
-                    // be the total width and height accounting extents
-                    set_bounds(0, 0, false, false, -1, -1, -1, -1);
-                }
+        if (is_iconified) {
+            stateChangeEvent = com_sun_glass_events_WindowEvent_MINIMIZE;
+        } else if (is_maximized) {
+            stateChangeEvent = com_sun_glass_events_WindowEvent_MAXIMIZE;
+        } else {
+            stateChangeEvent = com_sun_glass_events_WindowEvent_RESTORE;
+            if ((gdk_windowManagerFunctions & GDK_FUNC_MINIMIZE) == 0) {
+                // in this case - the window manager will not support the programatic
+                // request to iconify - so we need to restore it now.
+                gdk_window_set_functions(gdk_window, gdk_windowManagerFunctions);
             }
         }
+
+        notify_state(stateChangeEvent);
+    } else if (event->changed_mask & GDK_WINDOW_STATE_ABOVE) {
+        notify_on_top(event->new_window_state & GDK_WINDOW_STATE_ABOVE);
     }
 }
 
-void WindowContextTop::process_configure() {
-    calculate_adjustments();
+void WindowContext::process_net_wm_property() {
+    // Workaround for https://bugs.launchpad.net/unity/+bug/998073
 
-    gint x, y, w, h, gtk_w, gtk_h;
+    static GdkAtom atom_atom = gdk_atom_intern_static_string("ATOM");
+    static GdkAtom atom_net_wm_state = gdk_atom_intern_static_string("_NET_WM_STATE");
+    static GdkAtom atom_net_wm_state_hidden = gdk_atom_intern_static_string("_NET_WM_STATE_HIDDEN");
+    static GdkAtom atom_net_wm_state_above = gdk_atom_intern_static_string("_NET_WM_STATE_ABOVE");
 
-    gtk_window_get_position(GTK_WINDOW(gtk_widget), &x, &y);
-    gtk_window_get_size(GTK_WINDOW(gtk_widget), &gtk_w, &gtk_h);
-    w = gtk_w + geometry.adjust_w;
-    h = gtk_h + geometry.adjust_h;
+    gint length;
+    glong *atoms = NULL;
 
-    gboolean pos_changed = geometry.current_x != x || geometry.current_y != y;
-    gboolean size_changed = geometry.current_w != w || geometry.current_h != h
-                            || geometry.current_cw != gtk_w || geometry.current_ch != gtk_h;
+    if (gdk_property_get(gdk_window, atom_net_wm_state, atom_atom,
+                         0, G_MAXLONG, FALSE, NULL, NULL, &length, (guchar * *) & atoms)) {
 
-    geometry.current_x = x;
-    geometry.current_y = y;
-    geometry.current_w = w;
-    geometry.current_h = h;
-    geometry.current_cw = gtk_w;
-    geometry.current_ch = gtk_h;
+        bool is_hidden = false;
+        bool is_above = false;
+        for (gint i = 0; i < (gint)(length / sizeof(glong)); i++) {
+            if (atom_net_wm_state_hidden == (GdkAtom) atoms[i]) {
+                is_hidden = true;
+            } else if (atom_net_wm_state_above == (GdkAtom) atoms[i]) {
+                is_above = true;
+            }
+        }
 
-    size_position_notify(size_changed, pos_changed);
+        g_free(atoms);
+
+        if (is_iconified != is_hidden) {
+            is_iconified = is_hidden;
+
+            notify_state((is_hidden)
+                         ? com_sun_glass_events_WindowEvent_MINIMIZE
+                         : com_sun_glass_events_WindowEvent_RESTORE);
+        }
+
+        notify_on_top(is_above);
+    }
 }
 
-void WindowContextTop::process_screen_changed() {
+void WindowContext::process_screen_changed() {
     glong to_screen = getScreenPtrForLocation(geometry.current_x, geometry.current_y);
     if (to_screen != -1) {
         if (to_screen != screen) {
             if (jwindow) {
                 //notify screen changed
@@ -1095,19 +766,95 @@
             screen = to_screen;
         }
     }
 }
 
-void WindowContextTop::set_resizable(bool res) {
-    if (res != geometry.resizable) {
-        geometry.resizable = res;
-        apply_geometry();
+void WindowContext::notify_on_top(bool top) {
+    // Do not report effective (i.e. native) values to the FX, only if the user sets it manually
+    if (top != effective_on_top() && jwindow) {
+        if (on_top_inherited() && !top) {
+            // Disallow user's "on top" handling on windows that inherited the property
+            gtk_window_set_keep_above(GTK_WINDOW(gtk_widget), TRUE);
+        } else {
+            on_top = top;
+            update_ontop_tree(top);
+            mainEnv->CallVoidMethod(jwindow,
+                                    jWindowNotifyLevelChanged,
+                                    top ? com_sun_glass_ui_Window_Level_FLOATING
+                                        : com_sun_glass_ui_Window_Level_NORMAL);
+            CHECK_JNI_EXCEPTION(mainEnv);
+        }
+    }
+}
+
+void WindowContext::notify_repaint() {
+    int w, h;
+    glass_gdk_window_get_size(gdk_window, &w, &h);
+    if (jview) {
+        mainEnv->CallVoidMethod(jview,
+                                jViewNotifyRepaint,
+                                0, 0, w, h);
+        CHECK_JNI_EXCEPTION(mainEnv);
+    }
+}
+
+void WindowContext::notify_state(jint glass_state) {
+    if (glass_state == com_sun_glass_events_WindowEvent_RESTORE) {
+        if (is_maximized) {
+            glass_state = com_sun_glass_events_WindowEvent_MAXIMIZE;
+        }
+
+        notify_repaint();
+    }
+
+    if (jwindow) {
+        mainEnv->CallVoidMethod(jwindow,
+                                jGtkWindowNotifyStateChanged,
+                                glass_state);
+        CHECK_JNI_EXCEPTION(mainEnv);
+    }
+}
+
+bool WindowContext::set_view(jobject view) {
+    if (jview) {
+        mainEnv->CallVoidMethod(jview, jViewNotifyMouse,
+                                com_sun_glass_events_MouseEvent_EXIT,
+                                com_sun_glass_events_MouseEvent_BUTTON_NONE,
+                                0, 0,
+                                0, 0,
+                                0,
+                                JNI_FALSE,
+                                JNI_FALSE);
+        mainEnv->DeleteGlobalRef(jview);
+    }
+
+    if (view) {
+        jview = mainEnv->NewGlobalRef(view);
+    } else {
+        jview = NULL;
     }
+    return TRUE;
 }
 
-void WindowContextTop::set_visible(bool visible) {
-    WindowContextBase::set_visible(visible);
+void WindowContext::set_visible(bool visible) {
+    if (visible) {
+        gtk_widget_show_all(gtk_widget);
+    } else {
+        gtk_widget_hide(gtk_widget);
+        if (jview && is_mouse_entered) {
+            is_mouse_entered = false;
+            mainEnv->CallVoidMethod(jview, jViewNotifyMouse,
+                                    com_sun_glass_events_MouseEvent_EXIT,
+                                    com_sun_glass_events_MouseEvent_BUTTON_NONE,
+                                    0, 0,
+                                    0, 0,
+                                    0,
+                                    JNI_FALSE,
+                                    JNI_FALSE);
+            CHECK_JNI_EXCEPTION(mainEnv)
+        }
+    }
 
     if (visible) {
         visible_received = TRUE;
     }
 
@@ -1116,11 +863,66 @@
         mainEnv->CallVoidMethod(jwindow, jWindowNotifyFocus, com_sun_glass_events_WindowEvent_FOCUS_GAINED);
         CHECK_JNI_EXCEPTION(mainEnv);
     }
 }
 
-void WindowContextTop::set_bounds(int x, int y, bool xSet, bool ySet, int w, int h, int cw, int ch) {
+void WindowContext::set_cursor(GdkCursor *cursor) {
+    gdk_window_set_cursor(gdk_window, cursor);
+}
+
+void WindowContext::set_level(int level) {
+    if (level == com_sun_glass_ui_Window_Level_NORMAL) {
+        on_top = false;
+    } else if (level == com_sun_glass_ui_Window_Level_FLOATING
+               || level == com_sun_glass_ui_Window_Level_TOPMOST) {
+        on_top = true;
+    }
+    // We need to emulate always on top behaviour on child windows
+
+    if (!on_top_inherited()) {
+        update_ontop_tree(on_top);
+    }
+}
+
+void WindowContext::set_background(float r, float g, float b) {
+    bg_color.red = r;
+    bg_color.green = g;
+    bg_color.blue = b;
+    notify_repaint();
+}
+
+void WindowContext::set_minimized(bool minimize) {
+    is_iconified = minimize;
+    if (minimize) {
+        if (frame_type == TRANSPARENT) {
+            // https://bugs.launchpad.net/ubuntu/+source/unity/+bug/1245571
+            glass_window_reset_input_shape_mask(gtk_widget_get_window(gtk_widget));
+        }
+
+        if ((gdk_windowManagerFunctions & GDK_FUNC_MINIMIZE) == 0) {
+            // in this case - the window manager will not support the programatic
+            // request to iconify - so we need to disable this until we are restored.
+            GdkWMFunction wmf = (GdkWMFunction)(gdk_windowManagerFunctions | GDK_FUNC_MINIMIZE);
+            gdk_window_set_functions(gdk_window, wmf);
+        }
+        gtk_window_iconify(GTK_WINDOW(gtk_widget));
+    } else {
+        gtk_window_deiconify(GTK_WINDOW(gtk_widget));
+        activate_window();
+    }
+}
+
+void WindowContext::set_maximized(bool maximize) {
+    is_maximized = maximize;
+    if (maximize) {
+        gtk_window_maximize(GTK_WINDOW(gtk_widget));
+    } else {
+        gtk_window_unmaximize(GTK_WINDOW(gtk_widget));
+    }
+}
+
+void WindowContext::set_bounds(int x, int y, bool xSet, bool ySet, int w, int h, int cw, int ch) {
     calculate_adjustments();
 
     // newW / newH always content sizes compatible with GTK+
     // if window has no decoration, adjustments will be ZERO
     int newW = w > 0 ? w - geometry.adjust_w : cw;
@@ -1145,230 +947,432 @@
         } else {
             gtk_window_set_default_size(GTK_WINDOW(gtk_widget), newW, newH);
         }
     }
 
-    if (xSet || ySet) {
-        int newX = (xSet) ? x : geometry.current_x;
-        int newY = (ySet) ? y : geometry.current_y;
+    if (xSet || ySet) {
+        int newX = (xSet) ? x : geometry.current_x;
+        int newY = (ySet) ? y : geometry.current_y;
+
+        if (newX != geometry.current_x || newY != geometry.current_y) {
+            pos_changed = TRUE;
+            geometry.current_x = newX;
+            geometry.current_y = newY;
+            gtk_window_move(GTK_WINDOW(gtk_widget), newX, newY);
+        }
+    }
+
+    size_position_notify(size_changed, pos_changed);
+}
+
+void WindowContext::set_resizable(bool res) {
+    if (res != geometry.resizable) {
+        geometry.resizable = res;
+        apply_geometry();
+    }
+}
+
+void WindowContext::set_focusable(bool focusable) {
+    gtk_window_set_accept_focus(GTK_WINDOW(gtk_widget), focusable ? TRUE : FALSE);
+}
+
+void WindowContext::set_title(const char *title) {
+    gtk_window_set_title(GTK_WINDOW(gtk_widget), title);
+}
+
+void WindowContext::set_alpha(double alpha) {
+    gtk_window_set_opacity(GTK_WINDOW(gtk_widget), (gdouble) alpha);
+}
+
+void WindowContext::set_enabled(bool enabled) {
+    if (enabled != geometry.enabled) {
+        gtk_widget_set_sensitive(gtk_widget, enabled);
+        geometry.enabled = enabled;
+        apply_geometry();
+    }
+}
+
+void WindowContext::set_minimum_size(int w, int h) {
+    gboolean changed = geometry.minw != w || geometry.minh != h;
+
+    if (!changed) {
+        return;
+    }
+
+    geometry.minw = w;
+    geometry.minh = h;
+
+    apply_geometry();
+}
+
+void WindowContext::set_maximum_size(int w, int h) {
+    gboolean changed = geometry.maxw != w || geometry.maxh != h;
+
+    if (!changed) {
+        return;
+    }
+
+    geometry.maxw = w;
+    geometry.maxh = h;
+
+    apply_geometry();
+}
+
+void WindowContext::set_icon(GdkPixbuf *pixbuf) {
+    gtk_window_set_icon(GTK_WINDOW(gtk_widget), pixbuf);
+}
+
+void WindowContext::set_modal(bool modal, WindowContext *parent) {
+    if (modal) {
+        //gtk_window_set_type_hint(GTK_WINDOW(gtk_widget), GDK_WINDOW_TYPE_HINT_DIALOG);
+        if (parent) {
+            gtk_window_set_transient_for(GTK_WINDOW(gtk_widget), parent->get_gtk_window());
+        }
+    }
+    gtk_window_set_modal(GTK_WINDOW(gtk_widget), modal ? TRUE : FALSE);
+}
+
+void WindowContext::set_gravity(float x, float y) {
+    geometry.gravity_x = x;
+    geometry.gravity_y = y;
+}
+
+void WindowContext::set_owner(WindowContext *owner_ctx) {
+    owner = owner_ctx;
+}
+
+void WindowContext::add_child(WindowContext *child) {
+    children.insert(child);
+    gtk_window_set_transient_for(child->get_gtk_window(), this->get_gtk_window());
+
+    if (win_group != NULL) {
+        gtk_window_group_add_window(win_group, GTK_WINDOW(child->get_gtk_widget()));
+    }
+}
+
+void WindowContext::remove_child(WindowContext *child) {
+    children.erase(child);
+    gtk_window_set_transient_for(child->get_gtk_window(), NULL);
+
+    if (win_group != NULL) {
+        gtk_window_group_remove_window(win_group, GTK_WINDOW(child->get_gtk_widget()));
+    }
+}
+
+void WindowContext::show_or_hide_children(bool show) {
+    std::set<WindowContext *>::iterator it;
+    for (it = children.begin(); it != children.end(); ++it) {
+        (*it)->set_minimized(!show);
+        (*it)->show_or_hide_children(show);
+    }
+}
+
+bool WindowContext::is_visible() {
+    return gtk_widget_get_visible(gtk_widget);
+}
+
+bool WindowContext::is_dead() {
+    return can_be_deleted;
+}
+
+bool WindowContext::grab_focus() {
+    if (win_group == NULL) {
+        return FALSE;
+    }
+
+    if (!gtk_widget_has_grab(gtk_widget)) {
+        GtkWidget *current_grab = gtk_grab_get_current();
 
-        if (newX != geometry.current_x || newY != geometry.current_y) {
-            pos_changed = TRUE;
-            geometry.current_x = newX;
-            geometry.current_y = newY;
-            gtk_window_move(GTK_WINDOW(gtk_widget), newX, newY);
+        if (current_grab != NULL) {
+            gtk_grab_remove(current_grab);
         }
-    }
 
-    size_position_notify(size_changed, pos_changed);
-}
+        gtk_grab_add(gtk_widget);
+    }
 
-void WindowContextTop::process_map() {
-    map_received = true;
-    apply_geometry();
+    return TRUE;
 }
 
-void WindowContextTop::applyShapeMask(void* data, uint width, uint height) {
-    if (frame_type != TRANSPARENT) {
+void WindowContext::ungrab_focus() {
+    if (win_group == NULL) {
         return;
     }
 
-    glass_window_apply_shape_mask(gtk_widget_get_window(gtk_widget), data, width, height);
-}
-
-void WindowContextTop::set_minimized(bool minimize) {
-    is_iconified = minimize;
-    if (minimize) {
-        if (frame_type == TRANSPARENT) {
-            // https://bugs.launchpad.net/ubuntu/+source/unity/+bug/1245571
-            glass_window_reset_input_shape_mask(gtk_widget_get_window(gtk_widget));
-        }
+    if (gtk_widget_has_grab(gtk_widget)) {
+        gtk_grab_remove(gtk_widget);
 
-        if ((gdk_windowManagerFunctions & GDK_FUNC_MINIMIZE) == 0) {
-            // in this case - the window manager will not support the programatic
-            // request to iconify - so we need to disable this until we are restored.
-            GdkWMFunction wmf = (GdkWMFunction)(gdk_windowManagerFunctions | GDK_FUNC_MINIMIZE);
-            gdk_window_set_functions(gdk_window, wmf);
+        if (jwindow) {
+            mainEnv->CallVoidMethod(jwindow, jWindowNotifyFocusUngrab);
+            CHECK_JNI_EXCEPTION(mainEnv)
         }
-        gtk_window_iconify(GTK_WINDOW(gtk_widget));
-    } else {
-        gtk_window_deiconify(GTK_WINDOW(gtk_widget));
-        activate_window();
     }
 }
 
-void WindowContextTop::set_maximized(bool maximize) {
-    is_maximized = maximize;
-    if (maximize) {
-        gtk_window_maximize(GTK_WINDOW(gtk_widget));
-    } else {
-        gtk_window_unmaximize(GTK_WINDOW(gtk_widget));
+void WindowContext::restack(bool restack) {
+    gdk_window_restack(gdk_window, NULL, restack ? TRUE : FALSE);
+}
+
+void WindowContext::request_focus() {
+    //JDK-8212060: Window show and then move glitch.
+    //The WindowContext::set_visible will take care of showing the window.
+    //The below code will only handle later request_focus.
+    if (is_visible()) {
+        gtk_window_present(GTK_WINDOW(gtk_widget));
     }
 }
 
-void WindowContextTop::enter_fullscreen() {
+void WindowContext::enter_fullscreen() {
     is_fullscreen = TRUE;
     gtk_window_fullscreen(GTK_WINDOW(gtk_widget));
 }
 
-void WindowContextTop::exit_fullscreen() {
+void WindowContext::exit_fullscreen() {
     is_fullscreen = FALSE;
     gtk_window_unfullscreen(GTK_WINDOW(gtk_widget));
 }
 
-void WindowContextTop::request_focus() {
-    //JDK-8212060: Window show and then move glitch.
-    //The WindowContextBase::set_visible will take care of showing the window.
-    //The below code will only handle later request_focus.
-    if (is_visible()) {
-        gtk_window_present(GTK_WINDOW(gtk_widget));
+// Applied to a temporary full screen window to prevent sending events to Java
+void WindowContext::detach_from_java() {
+    if (jview) {
+        mainEnv->DeleteGlobalRef(jview);
+        jview = NULL;
+    }
+    if (jwindow) {
+        mainEnv->DeleteGlobalRef(jwindow);
+        jwindow = NULL;
     }
 }
 
-void WindowContextTop::set_focusable(bool focusable) {
-    gtk_window_set_accept_focus(GTK_WINDOW(gtk_widget), focusable ? TRUE : FALSE);
+void WindowContext::increment_events_counter() {
+    ++events_processing_cnt;
 }
 
-void WindowContextTop::set_title(const char* title) {
-    gtk_window_set_title(GTK_WINDOW(gtk_widget),title);
+void WindowContext::decrement_events_counter() {
+    --events_processing_cnt;
 }
 
-void WindowContextTop::set_alpha(double alpha) {
-    gtk_window_set_opacity(GTK_WINDOW(gtk_widget), (gdouble)alpha);
+size_t WindowContext::get_events_count() {
+    return events_processing_cnt;
 }
 
-void WindowContextTop::set_enabled(bool enabled) {
-    if (enabled != geometry.enabled) {
-        gtk_widget_set_sensitive(gtk_widget, enabled);
-        geometry.enabled = enabled;
-        apply_geometry();
+///////////////////////// PROTECTED
+
+void WindowContext::applyShapeMask(void *data, uint width, uint height) {
+    if (frame_type != TRANSPARENT) {
+        return;
     }
+
+    glass_window_apply_shape_mask(gtk_widget_get_window(gtk_widget), data, width, height);
 }
 
-void WindowContextTop::set_minimum_size(int w, int h) {
-    gboolean changed = geometry.minw != w || geometry.minh != h;
+///////////////////////// PRIVATE
 
-    if (!changed) {
+// This function calculate the deltas between window and window + decoration (titleblar, borders).
+// Only useful if the window manager does not support the frame extents extension - in this case
+// it uses GDK calculation, that is primary based on _NET_FRAME_EXTENTS but will try harder
+// if that's not available.
+void WindowContext::calculate_adjustments() {
+    if (frame_type != TITLED || geometry.frame_extents_received) {
         return;
     }
 
-    geometry.minw = w;
-    geometry.minh = h;
+    gint x, y;
+    gdk_window_get_origin(gdk_window, &x, &y);
+
+    gint rx, ry;
+    gdk_window_get_root_origin(gdk_window, &rx, &ry);
+
+    if (rx != x || ry != y) {
+        // the left extends are correct - the right one is guessed to be the same
+        geometry.adjust_w = (rx - x) * 2;
+        // guess that bottom size is the same as left and right
+        geometry.adjust_h = (ry - y) + (rx - x);
+
+        // those will be correct
+        geometry.view_x = (rx - x);
+        geometry.view_y = (ry - y);
+
+        save_cached_extents();
+    } else {
+        CachedExtents c = (window_type == NORMAL) ? normal_extents : utility_extents;
+        geometry.adjust_w = c.adjust_w;
+        geometry.adjust_h = c.adjust_h;
+        geometry.view_x = c.view_x;
+        geometry.view_y = c.view_y;
+    }
 
     apply_geometry();
 }
 
-void WindowContextTop::set_maximum_size(int w, int h) {
-    gboolean changed = geometry.maxw != w || geometry.maxh != h;
+void WindowContext::save_cached_extents() {
+    if (frame_type != TITLED) {
+        return;
+    }
 
-    if (!changed) {
+    if (window_type == NORMAL) {
+        normal_extents.adjust_w = geometry.adjust_w;
+        normal_extents.adjust_h = geometry.adjust_h;
+        normal_extents.view_x = geometry.view_x;
+        normal_extents.view_y = geometry.view_y;
+    } else {
+        utility_extents.adjust_w = geometry.adjust_w;
+        utility_extents.adjust_h = geometry.adjust_h;
+        utility_extents.view_x = geometry.view_x;
+        utility_extents.view_y = geometry.view_y;
+    }
+}
+
+void WindowContext::apply_geometry() {
+    if (!map_received) {
         return;
     }
 
-    geometry.maxw = w;
-    geometry.maxh = h;
+    GdkGeometry gdk_geometry;
+    gdk_geometry.win_gravity = GDK_GRAVITY_NORTH_WEST;
 
-    apply_geometry();
-}
+    if ((!geometry.resizable || !geometry.enabled) && !(is_maximized || is_fullscreen)) {
+        // not resizeable
+        int w = (geometry.current_w - geometry.adjust_w) > 0
+                ? geometry.current_w - geometry.adjust_w
+                : geometry.current_cw;
 
-void WindowContextTop::set_icon(GdkPixbuf* pixbuf) {
-    gtk_window_set_icon(GTK_WINDOW(gtk_widget), pixbuf);
-}
+        int h = (geometry.current_h - geometry.adjust_h) > 0
+                ? geometry.current_h - geometry.adjust_h
+                : geometry.current_ch;
 
-void WindowContextTop::restack(bool restack) {
-    gdk_window_restack(gdk_window, NULL, restack ? TRUE : FALSE);
-}
+        gdk_geometry.min_width = gdk_geometry.max_width = w;
+        gdk_geometry.min_height = gdk_geometry.max_height = h;
+    } else {
+        gdk_geometry.min_width = (geometry.minw - geometry.adjust_w) > 0
+                                 ? geometry.minw - geometry.adjust_w : 1;
+        gdk_geometry.min_height = (geometry.minh - geometry.adjust_h) > 0
+                                  ? geometry.minh - geometry.adjust_h : 1;
 
-void WindowContextTop::set_modal(bool modal, WindowContext* parent) {
-    if (modal) {
-        //gtk_window_set_type_hint(GTK_WINDOW(gtk_widget), GDK_WINDOW_TYPE_HINT_DIALOG);
-        if (parent) {
-            gtk_window_set_transient_for(GTK_WINDOW(gtk_widget), parent->get_gtk_window());
-        }
+        gdk_geometry.max_width = (geometry.maxw - geometry.adjust_w > 0)
+                                 ? geometry.maxw - geometry.adjust_w : G_MAXINT;
+        gdk_geometry.max_height = (geometry.maxh - geometry.adjust_h > 0)
+                                  ? geometry.maxh - geometry.adjust_h : G_MAXINT;
     }
-    gtk_window_set_modal(GTK_WINDOW(gtk_widget), modal ? TRUE : FALSE);
+
+    gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &gdk_geometry,
+                                  (GdkWindowHints)(GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE | GDK_HINT_WIN_GRAVITY));
 }
 
-GtkWindow *WindowContextTop::get_gtk_window() {
-    return GTK_WINDOW(gtk_widget);
+bool WindowContext::get_frame_extents_property(int *top, int *left,
+                                               int *bottom, int *right) {
+    unsigned long *extents;
+
+    if (gdk_property_get(gdk_window,
+                         atom_net_wm_frame_extents,
+                         gdk_atom_intern("CARDINAL", FALSE),
+                         0,
+                         sizeof(unsigned long) * 4,
+                         FALSE,
+                         NULL,
+                         NULL,
+                         NULL,
+                         (guchar * *) & extents)) {
+        *left = extents[0];
+        *right = extents[1];
+        *top = extents[2];
+        *bottom = extents[3];
+
+        g_free(extents);
+        return true;
+    }
+
+    return false;
 }
 
-WindowGeometry WindowContextTop::get_geometry() {
-    return geometry;
+void WindowContext::activate_window() {
+    Display *display = GDK_DISPLAY_XDISPLAY(gdk_window_get_display(gdk_window));
+    Atom navAtom = XInternAtom(display, "_NET_ACTIVE_WINDOW", True);
+    if (navAtom != None) {
+        XClientMessageEvent clientMessage;
+        memset(&clientMessage, 0, sizeof(clientMessage));
+
+        clientMessage.type = ClientMessage;
+        clientMessage.window = GDK_WINDOW_XID(gdk_window);
+        clientMessage.message_type = navAtom;
+        clientMessage.format = 32;
+        clientMessage.data.l[0] = 1;
+        clientMessage.data.l[1] = gdk_x11_get_server_time(gdk_window);
+        clientMessage.data.l[2] = 0;
+
+        XSendEvent(display, XDefaultRootWindow(display), False,
+                   SubstructureRedirectMask | SubstructureNotifyMask,
+                   (XEvent * ) & clientMessage);
+        XFlush(display);
+    }
 }
 
-void WindowContextTop::set_gravity(float x, float y) {
-    geometry.gravity_x = x;
-    geometry.gravity_y = y;
+void WindowContext::size_position_notify(bool size_changed, bool pos_changed) {
+    if (jview) {
+        if (size_changed) {
+            mainEnv->CallVoidMethod(jview, jViewNotifyResize, geometry.current_cw, geometry.current_ch);
+            CHECK_JNI_EXCEPTION(mainEnv);
+        }
+
+        if (pos_changed) {
+            mainEnv->CallVoidMethod(jview, jViewNotifyView, com_sun_glass_events_ViewEvent_MOVE);
+            CHECK_JNI_EXCEPTION(mainEnv)
+        }
+    }
+
+    if (jwindow) {
+        if (size_changed || is_maximized) {
+            mainEnv->CallVoidMethod(jwindow, jWindowNotifyResize,
+                                    (is_maximized)
+                                    ? com_sun_glass_events_WindowEvent_MAXIMIZE
+                                    : com_sun_glass_events_WindowEvent_RESIZE,
+                                    geometry.current_w, geometry.current_h);
+            CHECK_JNI_EXCEPTION(mainEnv)
+        }
+
+        if (pos_changed) {
+            mainEnv->CallVoidMethod(jwindow, jWindowNotifyMove, geometry.current_x, geometry.current_y);
+            CHECK_JNI_EXCEPTION(mainEnv)
+        }
+    }
 }
 
-void WindowContextTop::update_ontop_tree(bool on_top) {
+void WindowContext::update_ontop_tree(bool on_top) {
     bool effective_on_top = on_top || this->on_top;
     gtk_window_set_keep_above(GTK_WINDOW(gtk_widget), effective_on_top ? TRUE : FALSE);
-    for (std::set<WindowContextTop*>::iterator it = children.begin(); it != children.end(); ++it) {
+    for (std::set<WindowContext *>::iterator it = children.begin(); it != children.end(); ++it) {
         (*it)->update_ontop_tree(effective_on_top);
     }
 }
 
-bool WindowContextTop::on_top_inherited() {
-    WindowContext* o = owner;
+bool WindowContext::on_top_inherited() {
+    WindowContext *o = owner;
     while (o) {
-        WindowContextTop* topO = dynamic_cast<WindowContextTop*>(o);
+        WindowContext *topO = dynamic_cast<WindowContext *>(o);
         if (!topO) break;
         if (topO->on_top) {
             return true;
         }
         o = topO->owner;
     }
     return false;
 }
 
-bool WindowContextTop::effective_on_top() {
+bool WindowContext::effective_on_top() {
     if (owner) {
-        WindowContextTop* topO = dynamic_cast<WindowContextTop*>(owner);
+        WindowContext *topO = dynamic_cast<WindowContext *>(owner);
         return (topO && topO->effective_on_top()) || on_top;
     }
     return on_top;
 }
 
-void WindowContextTop::notify_on_top(bool top) {
-    // Do not report effective (i.e. native) values to the FX, only if the user sets it manually
-    if (top != effective_on_top() && jwindow) {
-        if (on_top_inherited() && !top) {
-            // Disallow user's "on top" handling on windows that inherited the property
-            gtk_window_set_keep_above(GTK_WINDOW(gtk_widget), TRUE);
-        } else {
-            on_top = top;
-            update_ontop_tree(top);
-            mainEnv->CallVoidMethod(jwindow,
-                    jWindowNotifyLevelChanged,
-                    top ? com_sun_glass_ui_Window_Level_FLOATING :  com_sun_glass_ui_Window_Level_NORMAL);
-            CHECK_JNI_EXCEPTION(mainEnv);
-        }
-    }
-}
-
-void WindowContextTop::set_level(int level) {
-    if (level == com_sun_glass_ui_Window_Level_NORMAL) {
-        on_top = false;
-    } else if (level == com_sun_glass_ui_Window_Level_FLOATING
-            || level == com_sun_glass_ui_Window_Level_TOPMOST) {
-        on_top = true;
+WindowContext::~WindowContext() {
+    if (xim.ic) {
+        XDestroyIC(xim.ic);
+        xim.ic = NULL;
     }
-    // We need to emulate always on top behaviour on child windows
-
-    if (!on_top_inherited()) {
-        update_ontop_tree(on_top);
+    if (xim.im) {
+        XCloseIM(xim.im);
+        xim.im = NULL;
     }
-}
 
-void WindowContextTop::set_owner(WindowContext * owner_ctx) {
-    owner = owner_ctx;
+    gtk_widget_destroy(gtk_widget);
 }
-
-void WindowContextTop::process_destroy() {
-    if (owner) {
-        owner->remove_child(this);
-    }
-
-    WindowContextBase::process_destroy();
-}
diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
@@ -51,18 +51,18 @@
     REQUEST_NONE,
     REQUEST_RESIZABLE,
     REQUEST_NOT_RESIZABLE
 };
 
-static const guint MOUSE_BUTTONS_MASK = (guint) (GDK_BUTTON1_MASK | GDK_BUTTON2_MASK | GDK_BUTTON3_MASK);
+static const guint MOUSE_BUTTONS_MASK = (guint)(GDK_BUTTON1_MASK | GDK_BUTTON2_MASK | GDK_BUTTON3_MASK);
 
 struct BgColor {
-    BgColor(): red(0), green(0), blue(0), is_set(FALSE) {}
+    BgColor() : red(0), green(0), blue(0) {}
+
     float red;
     float green;
     float blue;
-    bool is_set;
 };
 
 struct CachedExtents {
     int adjust_w;
     int adjust_h;
@@ -70,33 +70,33 @@
     // The position of the view relative to the window
     int view_x;
     int view_y;
 };
 
-static CachedExtents normal_extents = {0, 0, 0 ,0};
-static CachedExtents utility_extents = {0, 0, 0 ,0};
+static CachedExtents normal_extents = {0, 0, 0, 0};
+static CachedExtents utility_extents = {0, 0, 0, 0};
 
 struct WindowGeometry {
-    WindowGeometry(): current_x(0),
-                      current_y(0),
-                      current_w(0),
-                      current_h(0),
-                      current_cw(0),
-                      current_ch(0),
-                      adjust_w(0),
-                      adjust_h(0),
-                      view_x(0),
-                      view_y(0),
-                      frame_extents_received(false),
-                      gravity_x(1.00),
-                      gravity_y(1.00),
-                      enabled(true),
-                      resizable(true),
-                      minw(-1),
-                      minh(-1),
-                      maxw(-1),
-                      maxh(-1){}
+    WindowGeometry() : current_x(0),
+                       current_y(0),
+                       current_w(0),
+                       current_h(0),
+                       current_cw(0),
+                       current_ch(0),
+                       adjust_w(0),
+                       adjust_h(0),
+                       view_x(0),
+                       view_y(0),
+                       frame_extents_received(false),
+                       gravity_x(1.00),
+                       gravity_y(1.00),
+                       enabled(true),
+                       resizable(true),
+                       minw(-1),
+                       minh(-1),
+                       maxw(-1),
+                       maxh(-1) {}
 
     int current_x; // current position X
     int current_y; // current position Y
     int current_w; // current window width
     int current_h; // current window height
@@ -127,240 +127,146 @@
 
     int maxw;
     int maxh;
 };
 
-class WindowContextTop;
-
 class WindowContext {
-public:
-    virtual bool isEnabled() = 0;
-    virtual bool hasIME() = 0;
-    virtual bool filterIME(GdkEvent *) = 0;
-    virtual void enableOrResetIME() = 0;
-    virtual void disableIME() = 0;
-    virtual void paint(void* data, jint width, jint height) = 0;
-    virtual WindowGeometry get_geometry() = 0;
-
-    virtual void enter_fullscreen() = 0;
-    virtual void exit_fullscreen() = 0;
-    virtual void show_or_hide_children(bool) = 0;
-    virtual void set_visible(bool) = 0;
-    virtual bool is_visible() = 0;
-    virtual void set_bounds(int, int, bool, bool, int, int, int, int) = 0;
-    virtual void set_resizable(bool) = 0;
-    virtual void request_focus() = 0;
-    virtual void set_focusable(bool)= 0;
-    virtual bool grab_focus() = 0;
-    virtual void ungrab_focus() = 0;
-    virtual void set_title(const char*) = 0;
-    virtual void set_alpha(double) = 0;
-    virtual void set_enabled(bool) = 0;
-    virtual void set_minimum_size(int, int) = 0;
-    virtual void set_maximum_size(int, int) = 0;
-    virtual void set_minimized(bool) = 0;
-    virtual void set_maximized(bool) = 0;
-    virtual void set_icon(GdkPixbuf*) = 0;
-    virtual void restack(bool) = 0;
-    virtual void set_cursor(GdkCursor*) = 0;
-    virtual void set_modal(bool, WindowContext* parent = NULL) = 0;
-    virtual void set_gravity(float, float) = 0;
-    virtual void set_level(int) = 0;
-    virtual void set_background(float, float, float) = 0;
-
-    virtual void process_property_notify(GdkEventProperty*) = 0;
-    virtual void process_configure() = 0;
-    virtual void process_map() = 0;
-    virtual void process_focus(GdkEventFocus*) = 0;
-    virtual void process_destroy() = 0;
-    virtual void process_delete() = 0;
-    virtual void process_expose(GdkEventExpose*) = 0;
-    virtual void process_mouse_button(GdkEventButton*) = 0;
-    virtual void process_mouse_motion(GdkEventMotion*) = 0;
-    virtual void process_mouse_scroll(GdkEventScroll*) = 0;
-    virtual void process_mouse_cross(GdkEventCrossing*) = 0;
-    virtual void process_key(GdkEventKey*) = 0;
-    virtual void process_state(GdkEventWindowState*) = 0;
-    virtual void process_screen_changed() { }
-    virtual void notify_state(jint) = 0;
-    virtual void notify_on_top(bool) {}
-
-    virtual void add_child(WindowContextTop* child) = 0;
-    virtual void remove_child(WindowContextTop* child) = 0;
-    virtual bool set_view(jobject) = 0;
-
-    virtual GdkWindow *get_gdk_window() = 0;
-    virtual GtkWindow *get_gtk_window() = 0;
-    virtual GtkWidget *get_gtk_widget() = 0;
-    virtual jobject get_jview() = 0;
-    virtual jobject get_jwindow() = 0;
-
-    virtual int getEmbeddedX() = 0;
-    virtual int getEmbeddedY() = 0;
-
-    virtual void increment_events_counter() = 0;
-    virtual void decrement_events_counter() = 0;
-    virtual size_t get_events_count() = 0;
-    virtual bool is_dead() = 0;
-
-    virtual ~WindowContext() {}
-};
+    jlong screen;
+    WindowFrameType frame_type;
+    WindowType window_type;
+    struct WindowContext *owner;
+    jobject jwindow;
+    jobject jview;
 
-class WindowContextBase: public WindowContext {
+    bool map_received;
+    bool visible_received;
+    bool on_top;
+    bool is_fullscreen;
+    bool is_iconified;
+    bool is_maximized;
+    bool is_mouse_entered;
+    bool can_be_deleted;
 
-    struct _XIM{
+    struct _XIM {
         XIM im;
         XIC ic;
         bool enabled;
-    } xim;
+    } xim = { NULL, NULL, FALSE};
 
     size_t events_processing_cnt;
-    bool can_be_deleted;
-protected:
-    std::set<WindowContextTop*> children;
-    jobject jwindow;
-    jobject jview;
-    GtkWidget* gtk_widget;
-    GdkWindow* gdk_window;
-    GtkWindowGroup* win_group; // this is used for window grabs
+
+    WindowGeometry geometry;
+    GtkWindowGroup *win_group; // this is used for window grabs
+    std::set<WindowContext *> children;
     GdkWMFunction gdk_windowManagerFunctions;
+    GtkWidget *gtk_widget;
+    GdkWindow *gdk_window;
     BgColor bg_color;
 
-    bool is_iconified;
-    bool is_maximized;
-    bool is_mouse_entered;
-
 public:
-    bool isEnabled();
+    WindowContext(jobject, WindowContext *, long, WindowFrameType, WindowType, GdkWMFunction);
+
     bool hasIME();
     bool filterIME(GdkEvent *);
     void enableOrResetIME();
     void disableIME();
+
     void paint(void*, jint, jint);
+    bool isEnabled();
+
     GdkWindow *get_gdk_window();
     GtkWidget *get_gtk_widget();
+    GtkWindow *get_gtk_window();
+    WindowGeometry get_geometry();
     jobject get_jwindow();
     jobject get_jview();
 
-    void add_child(WindowContextTop*);
-    void remove_child(WindowContextTop*);
-    void show_or_hide_children(bool);
-    void set_visible(bool);
-    bool is_visible();
-    bool set_view(jobject);
-    bool grab_focus();
-    void ungrab_focus();
-    void set_cursor(GdkCursor*);
-    void set_level(int) {}
-    void set_background(float, float, float);
-
-    void process_map() {}
+    void process_map();
     void process_focus(GdkEventFocus*);
+    void process_property_notify(GdkEventProperty *);
+    void process_configure();
     void process_destroy();
     void process_delete();
     void process_expose(GdkEventExpose*);
     void process_mouse_button(GdkEventButton*);
     void process_mouse_motion(GdkEventMotion*);
     void process_mouse_scroll(GdkEventScroll*);
     void process_mouse_cross(GdkEventCrossing*);
     void process_key(GdkEventKey*);
     void process_state(GdkEventWindowState*);
-
-    void notify_repaint();
-    void notify_state(jint);
-
-    int getEmbeddedX() { return 0; }
-    int getEmbeddedY() { return 0; }
-
-    void increment_events_counter();
-    void decrement_events_counter();
-    size_t get_events_count();
-    bool is_dead();
-
-    ~WindowContextBase();
-protected:
-    virtual void applyShapeMask(void*, uint width, uint height) = 0;
-private:
-    bool im_filter_keypress(GdkEventKey*);
-    void paint_buffer(cairo_t*);
-};
-
-
-class WindowContextTop: public WindowContextBase {
-    jlong screen;
-    WindowFrameType frame_type;
-    WindowType window_type;
-    struct WindowContext *owner;
-    WindowGeometry geometry;
-    bool map_received;
-    bool visible_received;
-    bool on_top;
-    bool is_fullscreen;
-public:
-    WindowContextTop(jobject, WindowContext*, long, WindowFrameType, WindowType, GdkWMFunction);
-    void process_map();
-    void process_property_notify(GdkEventProperty*);
-    void process_configure();
-    void process_destroy();
     void process_net_wm_property();
     void process_screen_changed();
 
-    WindowGeometry get_geometry();
+    void notify_on_top(bool);
+    void notify_repaint();
+    void notify_state(jint);
 
+    bool set_view(jobject);
+    void set_visible(bool);
+    void set_cursor(GdkCursor*);
+    void set_level(int);
+    void set_background(float, float, float);
     void set_minimized(bool);
     void set_maximized(bool);
     void set_bounds(int, int, bool, bool, int, int, int, int);
     void set_resizable(bool);
-    void request_focus();
     void set_focusable(bool);
-    void set_title(const char*);
+    void set_title(const char *);
     void set_alpha(double);
     void set_enabled(bool);
     void set_minimum_size(int, int);
     void set_maximum_size(int, int);
-    void set_icon(GdkPixbuf*);
-    void restack(bool);
-    void set_modal(bool, WindowContext* parent = NULL);
+    void set_icon(GdkPixbuf *);
+    void set_modal(bool, WindowContext *parent = NULL);
     void set_gravity(float, float);
-    void set_level(int);
-    void set_visible(bool);
-    void notify_on_top(bool);
-
+    void set_owner(WindowContext *);
+    void add_child(WindowContext *);
+    void remove_child(WindowContext *);
+    void show_or_hide_children(bool);
+    bool is_visible();
+    bool is_dead();
+    bool grab_focus();
+    void ungrab_focus();
+    void restack(bool);
+    void request_focus();
     void enter_fullscreen();
     void exit_fullscreen();
-
-    void set_owner(WindowContext*);
-
-    GtkWindow *get_gtk_window();
     void detach_from_java();
+    void increment_events_counter();
+    void decrement_events_counter();
+    size_t get_events_count();
+    ~WindowContext();
+
 protected:
-    void applyShapeMask(void*, uint width, uint height);
+    void applyShapeMask(void *, uint width, uint height);
+
 private:
+    bool im_filter_keypress(GdkEventKey*);
     void calculate_adjustments();
     void save_cached_extents();
     void apply_geometry();
     bool get_frame_extents_property(int *, int *, int *, int *);
-    void request_frame_extents();
     void activate_window();
     void size_position_notify(bool, bool);
     void update_ontop_tree(bool);
     bool on_top_inherited();
     bool effective_on_top();
-    WindowContextTop(WindowContextTop&);
-    WindowContextTop& operator= (const WindowContextTop&);
+//    WindowContext(WindowContext &);
+//    WindowContext &operator=(const WindowContext &);
 };
 
-void destroy_and_delete_ctx(WindowContext* ctx);
+void destroy_and_delete_ctx(WindowContext *ctx);
 
 class EventsCounterHelper {
 private:
-    WindowContext* ctx;
+    WindowContext *ctx;
 public:
-    explicit EventsCounterHelper(WindowContext* context) {
+    explicit EventsCounterHelper(WindowContext *context) {
         ctx = context;
         ctx->increment_events_counter();
     }
+
     ~EventsCounterHelper() {
         ctx->decrement_events_counter();
         if (ctx->is_dead() && ctx->get_events_count() == 0) {
             delete ctx;
         }
diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window_ime.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window_ime.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window_ime.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window_ime.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -28,11 +28,11 @@
 #include "glass_general.h"
 
 #include <cstring>
 #include <cstdlib>
 
-bool WindowContextBase::hasIME() {
+bool WindowContext::hasIME() {
     return xim.enabled;
 }
 
 static XKeyPressedEvent convert_event(GdkEventKey *event) {
     XKeyPressedEvent result;
@@ -49,11 +49,11 @@
     result.same_screen = True;
 
     return result;
 }
 
-bool WindowContextBase::im_filter_keypress(GdkEventKey* event) {
+bool WindowContext::im_filter_keypress(GdkEventKey* event) {
     static size_t buf_len = 12;
     static char *buffer = NULL;
 
     if (buffer == NULL) {
         buffer = (char*)malloc(buf_len * sizeof (char));
@@ -105,11 +105,11 @@
     }
 
     return TRUE;
 }
 
-bool WindowContextBase::filterIME(GdkEvent * event) {
+bool WindowContext::filterIME(GdkEvent * event) {
     if (!hasIME()) {
         return false;
     }
 
     switch (event->type) {
@@ -218,11 +218,11 @@
     XFree(styles);
 
     return result;
 }
 
-void WindowContextBase::enableOrResetIME() {
+void WindowContext::enableOrResetIME() {
     Display *display = gdk_x11_display_get_xdisplay(gdk_window_get_display(gdk_window));
     if (xim.im == NULL || xim.ic == NULL) {
         xim.im = XOpenIM(display, NULL, NULL, NULL);
         if (xim.im == NULL) {
             return;
@@ -266,10 +266,10 @@
     XSetICFocus(xim.ic);
 
     xim.enabled = TRUE;
 }
 
-void WindowContextBase::disableIME() {
+void WindowContext::disableIME() {
     if (xim.ic != NULL) {
         XUnsetICFocus(xim.ic);
     }
 }
