diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
@@ -159,20 +159,16 @@
     virtual void set_gravity(float, float) = 0;
     virtual void set_level(int) = 0;
     virtual void set_background(float, float, float) = 0;
 
     virtual void process_property_notify(GdkEventProperty*) = 0;
-    virtual void process_configure(GdkEventConfigure*) = 0;
+    virtual void process_configure() = 0;
     virtual void process_map() = 0;
     virtual void process_focus(GdkEventFocus*) = 0;
     virtual void process_destroy() = 0;
     virtual void process_delete() = 0;
-#ifdef GLASS_GTK3
-    virtual void process_draw(cairo_t*) = 0;
-#else
     virtual void process_expose(GdkEventExpose*) = 0;
-#endif
     virtual void process_mouse_button(GdkEventButton*) = 0;
     virtual void process_mouse_motion(GdkEventMotion*) = 0;
     virtual void process_mouse_scroll(GdkEventScroll*) = 0;
     virtual void process_mouse_cross(GdkEventCrossing*) = 0;
     virtual void process_key(GdkEventKey*) = 0;
@@ -252,15 +248,11 @@
 
     void process_map() {}
     void process_focus(GdkEventFocus*);
     void process_destroy();
     void process_delete();
-#ifdef GLASS_GTK3
-    void process_draw(cairo_t*);
-#else
     void process_expose(GdkEventExpose*);
-#endif
     void process_mouse_button(GdkEventButton*);
     void process_mouse_motion(GdkEventMotion*);
     void process_mouse_scroll(GdkEventScroll*);
     void process_mouse_cross(GdkEventCrossing*);
     void process_key(GdkEventKey*);
@@ -298,11 +290,11 @@
 
 public:
     WindowContextTop(jobject, WindowContext*, long, WindowFrameType, WindowType, GdkWMFunction);
     void process_map();
     void process_property_notify(GdkEventProperty*);
-    void process_configure(GdkEventConfigure*);
+    void process_configure();
     void process_destroy();
     void process_net_wm_property();
     void process_screen_changed();
 
     WindowGeometry get_geometry();
