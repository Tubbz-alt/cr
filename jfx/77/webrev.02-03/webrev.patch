diff a/modules/javafx.graphics/src/main/native-glass/gtk/GlassApplication.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/GlassApplication.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/GlassApplication.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/GlassApplication.cpp
@@ -435,14 +435,17 @@
 
     glass_evloop_call_hooks(event);
 
     if (ctx != NULL) {
         EventsCounterHelper helper(ctx);
-        gtk_main_do_event(event);
 
-        if (event->type == GDK_DRAG_LEAVE) {
+        if (event->type == GDK_EXPOSE) {
+            ctx->process_expose(&event->expose);
+        } else if (event->type == GDK_DRAG_LEAVE) {
             dnd_drag_leave_callback(ctx);
+        } else {
+            gtk_main_do_event(event);
         }
     } else {
         if (window == gdk_screen_get_root_window(gdk_screen_get_default())) {
             if (event->any.type == GDK_PROPERTY_NOTIFY) {
                 if (event->property.atom == gdk_atom_intern_static_string("_NET_WORKAREA")
diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
@@ -48,42 +48,15 @@
 #include <algorithm>
 
 #define MOUSE_BACK_BTN 8
 #define MOUSE_FORWARD_BTN 9
 
-// EVENTS
 static gboolean ctx_configure_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
-    ((WindowContextBase*)user_data)->process_configure(NULL);
+    ((WindowContextBase*)user_data)->process_configure();
     return FALSE;
 }
 
-#ifdef GLASS_GTK3
-static gboolean ctx_draw_callback(GtkWidget *widget, cairo_t* cr, gpointer user_data) {
-    ((WindowContextBase*)user_data)->process_draw(cr);
-
-    return TRUE;
-}
-#else
-static gboolean ctx_expose_callback(GtkWidget *widget, GdkEvent* event, gpointer user_data) {
-    ((WindowContextBase*)user_data)->process_expose(&event->expose);
-    return TRUE;
-}
-#endif
-
-//static gboolean ctx_damage_callback(GtkWidget *widget, GdkEvent* event, gpointer user_data) {
-//    GdkEventExpose* e = &event->expose;
-//
-//#ifdef GLASS_GTK3
-//    gtk_widget_queue_draw_region(widget, e->region);
-//#else
-//    GdkWindow* gdk_win = gtk_widget_get_root_window(widget);
-//    gdk_window_invalidate_rect(gdk_win, &e->area, FALSE);
-//    gdk_window_process_updates(gdk_win, FALSE);
-//#endif
-//    return TRUE;
-//}
-
 static gboolean ctx_property_notify_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
     ((WindowContextBase*)user_data)->process_property_notify(&event->property);
     return TRUE;
 }
 
@@ -139,16 +112,10 @@
     ((WindowContextBase*)user_data)->process_screen_changed();
 }
 
 static void connect_signals(GtkWidget* gtk_widget, WindowContextBase* ctx) {
     g_signal_connect(gtk_widget, "configure-event", G_CALLBACK(ctx_configure_callback), ctx);
-//    g_signal_connect(gtk_widget, "damage-event", G_CALLBACK(ctx_damage_callback), ctx);
-#ifdef GLASS_GTK3
-    g_signal_connect(gtk_widget, "draw", G_CALLBACK(ctx_draw_callback), ctx);
-#else
-    g_signal_connect(gtk_widget, "expose-event", G_CALLBACK(ctx_expose_callback), ctx);
-#endif
     g_signal_connect(gtk_widget, "property-notify-event", G_CALLBACK(ctx_property_notify_callback), ctx);
     g_signal_connect(gtk_widget, "focus-in-event", G_CALLBACK(ctx_focus_change_callback), ctx);
     g_signal_connect(gtk_widget, "focus-out-event", G_CALLBACK(ctx_focus_change_callback), ctx);
     g_signal_connect(gtk_widget, "delete-event", G_CALLBACK(ctx_delete_callback), ctx);
     g_signal_connect(gtk_widget, "window-state-event", G_CALLBACK(ctx_window_state_callback), ctx);
@@ -342,29 +309,18 @@
         mainEnv->CallVoidMethod(jwindow, jWindowNotifyClose);
         CHECK_JNI_EXCEPTION(mainEnv)
     }
 }
 
-#ifdef GLASS_GTK3
-void WindowContextBase::process_draw(cairo_t* cr) {
-    if (jview) {
-        GdkRectangle r;
-        if (gdk_cairo_get_clip_rectangle (cr, &r)) {
-            mainEnv->CallVoidMethod(jview, jViewNotifyRepaint,r.x, r.y, r.width, r.height);
-            CHECK_JNI_EXCEPTION(mainEnv)
-        }
-    }
-}
-#else
 void WindowContextBase::process_expose(GdkEventExpose* event) {
-   if (jview) {
+   if (jview && is_visible()) {
         mainEnv->CallVoidMethod(jview, jViewNotifyRepaint, event->area.x, event->area.y,
                                  event->area.width, event->area.height);
         CHECK_JNI_EXCEPTION(mainEnv)
     }
 }
-#endif
+
 static inline jint gtk_button_number_to_mouse_button(guint button) {
     switch (button) {
         case 1:
             return com_sun_glass_events_MouseEvent_BUTTON_LEFT;
         case 2:
@@ -1042,16 +998,16 @@
             }
         }
     }
 }
 
-void WindowContextTop::process_configure(GdkEventConfigure* event) {
+void WindowContextTop::process_configure() {
     // this is to let java know about user changes on the window
     // if the window is not visible, there will be no changes
-    if (!map_received && !is_maximized) {
-        return;
-    }
+//    if (!map_received && !is_maximized) {
+//        return;
+//    }
 
     gint x, y, w, h, gtk_w, gtk_h;
 
     calculate_adjustments();
 
@@ -1151,11 +1107,10 @@
     }
 }
 
 void WindowContextTop::process_map() {
     map_received = true;
-
     geometry.resizable = geometry.resizable_on_map;
     set_enabled(geometry.enabled_on_map);
 
     apply_geometry();
 }
diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.h
@@ -159,20 +159,16 @@
     virtual void set_gravity(float, float) = 0;
     virtual void set_level(int) = 0;
     virtual void set_background(float, float, float) = 0;
 
     virtual void process_property_notify(GdkEventProperty*) = 0;
-    virtual void process_configure(GdkEventConfigure*) = 0;
+    virtual void process_configure() = 0;
     virtual void process_map() = 0;
     virtual void process_focus(GdkEventFocus*) = 0;
     virtual void process_destroy() = 0;
     virtual void process_delete() = 0;
-#ifdef GLASS_GTK3
-    virtual void process_draw(cairo_t*) = 0;
-#else
     virtual void process_expose(GdkEventExpose*) = 0;
-#endif
     virtual void process_mouse_button(GdkEventButton*) = 0;
     virtual void process_mouse_motion(GdkEventMotion*) = 0;
     virtual void process_mouse_scroll(GdkEventScroll*) = 0;
     virtual void process_mouse_cross(GdkEventCrossing*) = 0;
     virtual void process_key(GdkEventKey*) = 0;
@@ -252,15 +248,11 @@
 
     void process_map() {}
     void process_focus(GdkEventFocus*);
     void process_destroy();
     void process_delete();
-#ifdef GLASS_GTK3
-    void process_draw(cairo_t*);
-#else
     void process_expose(GdkEventExpose*);
-#endif
     void process_mouse_button(GdkEventButton*);
     void process_mouse_motion(GdkEventMotion*);
     void process_mouse_scroll(GdkEventScroll*);
     void process_mouse_cross(GdkEventCrossing*);
     void process_key(GdkEventKey*);
@@ -298,11 +290,11 @@
 
 public:
     WindowContextTop(jobject, WindowContext*, long, WindowFrameType, WindowType, GdkWMFunction);
     void process_map();
     void process_property_notify(GdkEventProperty*);
-    void process_configure(GdkEventConfigure*);
+    void process_configure();
     void process_destroy();
     void process_net_wm_property();
     void process_screen_changed();
 
     WindowGeometry get_geometry();
