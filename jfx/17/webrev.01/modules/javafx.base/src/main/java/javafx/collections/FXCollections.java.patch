diff a/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java b/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
--- a/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
+++ b/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
@@ -1006,10 +1006,15 @@
         SynchronizedList(List<T> list, Object mutex) {
             this.backingList = list;
             this.mutex = mutex;
         }
 
+        SynchronizedList(List<T> list) {
+            this.backingList = list;
+            this.mutex = this;
+        }
+
         @Override
         public int size() {
             synchronized(mutex) {
                 return backingList.size();
             }
@@ -1195,23 +1200,19 @@
         private ListListenerHelper helper;
 
         private final ObservableList<T> backingList;
         private final ListChangeListener<T> listener;
 
-        SynchronizedObservableList(ObservableList<T> seq, Object mutex) {
-            super(seq, mutex);
+        SynchronizedObservableList(ObservableList<T> seq) {
+            super(seq);
             this.backingList = seq;
             listener = c -> {
                 ListListenerHelper.fireValueChangedEvent(helper, new SourceAdapterChange<T>(SynchronizedObservableList.this, c));
             };
             backingList.addListener(new WeakListChangeListener<T>(listener));
         }
 
-        SynchronizedObservableList(ObservableList<T> seq) {
-            this(seq, new Object());
-        }
-
         @Override
         public boolean addAll(T... elements) {
             synchronized(mutex) {
                 return backingList.addAll(elements);
             }
@@ -1772,11 +1773,12 @@
             this.backingSet = set;
             this.mutex = mutex;
         }
 
         SynchronizedSet(Set<E> set) {
-            this(set, new Object());
+            this.backingSet = set;
+            this.mutex = this;
         }
 
         @Override
         public int size() {
             synchronized(mutex) {
@@ -1888,23 +1890,19 @@
 
         private final ObservableSet<E> backingSet;
         private SetListenerHelper listenerHelper;
         private final SetChangeListener<E> listener;
 
-        SynchronizedObservableSet(ObservableSet<E> set, Object mutex) {
-            super(set, mutex);
+        SynchronizedObservableSet(ObservableSet<E> set) {
+            super(set);
             backingSet = set;
             listener = c -> {
                 SetListenerHelper.fireValueChangedEvent(listenerHelper, new SetAdapterChange<E>(SynchronizedObservableSet.this, c));
             };
             backingSet.addListener(new WeakSetChangeListener<E>(listener));
         }
 
-        SynchronizedObservableSet(ObservableSet<E> set) {
-            this(set, new Object());
-        }
-
         @Override
         public void addListener(InvalidationListener listener) {
             synchronized (mutex) {
                 listenerHelper = SetListenerHelper.addListener(listenerHelper, listener);
             }
@@ -2550,17 +2548,13 @@
 
     private static class SynchronizedMap<K, V> implements Map<K, V> {
         final Object mutex;
         private final Map<K, V> backingMap;
 
-        SynchronizedMap(Map<K, V> map, Object mutex) {
-            backingMap = map;
-            this.mutex = mutex;
-        }
-
         SynchronizedMap(Map<K, V> map) {
-            this(map, new Object());
+            backingMap = map;
+            this.mutex = this;
         }
 
         @Override
         public int size() {
             synchronized (mutex) {
@@ -2782,23 +2776,19 @@
 
         private final ObservableMap<K, V> backingMap;
         private MapListenerHelper listenerHelper;
         private final MapChangeListener<K, V> listener;
 
-        SynchronizedObservableMap(ObservableMap<K, V> map, Object mutex) {
-            super(map, mutex);
+        SynchronizedObservableMap(ObservableMap<K, V> map) {
+            super(map);
             backingMap = map;
             listener = c -> {
                 MapListenerHelper.fireValueChangedEvent(listenerHelper, new MapAdapterChange<K, V>(SynchronizedObservableMap.this, c));
             };
             backingMap.addListener(new WeakMapChangeListener<K, V>(listener));
         }
 
-        SynchronizedObservableMap(ObservableMap<K, V> map) {
-            this(map, new Object());
-        }
-
         @Override
         public void addListener(InvalidationListener listener) {
             synchronized (mutex) {
                 listenerHelper = MapListenerHelper.addListener(listenerHelper, listener);
             }
