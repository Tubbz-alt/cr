diff a/modules/javafx.graphics/src/main/java/javafx/animation/Animation.java b/modules/javafx.graphics/src/main/java/javafx/animation/Animation.java
--- a/modules/javafx.graphics/src/main/java/javafx/animation/Animation.java
+++ b/modules/javafx.graphics/src/main/java/javafx/animation/Animation.java
@@ -254,11 +254,11 @@
     Animation parent = null;
 
     /* Package-private for testing purposes */
     ClipEnvelope clipEnvelope;
 
-    private boolean lastPlayedFinished = false;
+    private boolean lastPlayedFinished = true;
 
     private boolean lastPlayedForward = true;
     /**
      * Defines the direction/speed at which the {@code Animation} is expected to
      * be played.
@@ -976,10 +976,11 @@
         }
         if (getStatus() != Status.STOPPED) {
             clipEnvelope.abortCurrentPulse();
             doStop();
             jumpTo(Duration.ZERO);
+            lastPlayedFinished = true;
         }
     }
 
     /**
      * Pauses the animation. If the animation is not currently running, this
diff a/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationTest.java b/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/animation/AnimationTest.java
@@ -320,14 +320,23 @@
         animation.play();
         assertEquals(Status.RUNNING, animation.getStatus());
         assertFalse(listener.wasCalled);
         assertFalse(timer.containsPulseReceiver(animation.shim_pulseReceiver()));
         animation.stop();
-        animation.setRate(1.0);
+
+        // stopped timeline, rate = -1
+        listener.wasCalled = false;
+        animation.setRate(-1.0);
+        animation.play();
+        assertEquals(ONE_SEC.toMillis(), animation.getCurrentTime().toMillis(), EPSILON);
+        assertFalse(listener.wasCalled);
+        assertTrue(timer.containsPulseReceiver(animation.shim_pulseReceiver()));
+        animation.stop();
 
         // stopped timeline, cycleDuration = 0
         listener.wasCalled = false;
+        animation.setRate(1.0);
         animation.shim_setCycleDuration(Duration.ZERO);
         animation.play();
         assertEquals(Status.STOPPED, animation.getStatus());
         assertTrue(listener.wasCalled);
         assertFalse(timer.containsPulseReceiver(animation.shim_pulseReceiver()));
