diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextInputControlTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextInputControlTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextInputControlTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextInputControlTest.java
@@ -51,11 +51,10 @@
 import javafx.scene.control.TextArea;
 import javafx.scene.control.TextField;
 import javafx.scene.control.TextInputControl;
 import com.sun.javafx.tk.Toolkit;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;
 import test.com.sun.javafx.pgstub.StubToolkit;
@@ -204,19 +203,10 @@
         assertEquals("Apples", textInput.getText());
         other.set("Oranges");
         assertEquals("Oranges", textInput.getText());
     }
 
-    @Ignore("getCssMetaData will return null for textProperty")
-    @Test public void impl_cssSettable_ReturnsFalseForTextAlways() {
-        CssMetaData styleable = ((StyleableProperty)textInput.textProperty()).getCssMetaData();
-        assertTrue(styleable.isSettable(textInput));
-        StringProperty other = new SimpleStringProperty("Apples");
-        textInput.textProperty().bind(other);
-        assertFalse(styleable.isSettable(textInput));
-    }
-
     @Test public void cannotSpecifyTextViaCSS() {
         try {
             CssMetaData styleable = ((StyleableProperty)textInput.textProperty()).getCssMetaData();
             assertNull(styleable);
         } catch (ClassCastException ignored) {
@@ -315,19 +305,10 @@
         assertFalse(textInput.isEditable());
         other.set(true);
         assertTrue(textInput.isEditable());
     }
 
-    @Ignore("getCssMetaData will return null for editableProperty")
-    @Test public void impl_cssSettable_ReturnsFalseForEditableAlways() {
-        CssMetaData styleable = ((StyleableProperty)textInput.editableProperty()).getCssMetaData();
-        assertTrue(styleable.isSettable(textInput));
-        StringProperty other = new SimpleStringProperty("Apples");
-        textInput.textProperty().bind(other);
-        assertFalse(styleable.isSettable(textInput));
-    }
-
     @Test public void cannotSpecifyEditableViaCSS() {
         try {
             CssMetaData styleable = ((StyleableProperty)textInput.editableProperty()).getCssMetaData();
             assertNull(styleable);
         } catch (ClassCastException ignored) {
@@ -449,13 +430,10 @@
         });
         textInput.setText("Hello");
         assertTrue(passed[0]);
     }
 
-    @Ignore("The notification here doesn't happen because the invalid flag is set after the first set," +
-            "however setting a change listener *must* clear that, but doesn't. I copied the code for this " +
-            "straight from the beans package, so there may be a bug there.")
     @Test public void lengthChangeNotificationWhenTextIsSetToEmptyResult() {
         textInput.setText("Goodbye");
         final boolean[] passed = new boolean[] { false };
         textInput.lengthProperty().addListener((observable, oldValue, newValue) -> {
             passed[0] = true;
@@ -640,15 +618,10 @@
         });
         other.set("Cleared!");
         assertTrue(passed[0]);
     }
 
-    @Ignore
-    @Test public void selectionCanBeNull() {
-
-    }
-
     /******************************************************
      * Test for cut/copy/paste                            *
      *****************************************************/
 
     @Test public void cutRemovesSelection() {
