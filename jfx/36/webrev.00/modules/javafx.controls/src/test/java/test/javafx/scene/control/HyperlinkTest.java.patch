diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/HyperlinkTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/HyperlinkTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/HyperlinkTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/HyperlinkTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -45,11 +45,10 @@
 import javafx.scene.Cursor;
 import javafx.scene.control.Hyperlink;
 import javafx.scene.shape.Rectangle;
 
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class HyperlinkTest {
     private Hyperlink link;
 
@@ -174,33 +173,10 @@
         } catch (Exception e) {
             org.junit.Assert.fail(e.toString());
         }
     }
 
-    @Ignore ("replaced by visitedPropertyIsNotStyleable")
-    @Test public void whenVisitedIsBound_impl_cssSettable_ReturnsFalse() {
-        // will return null!
-        CssMetaData styleable = ((StyleableProperty)link.visitedProperty()).getCssMetaData();
-        assertFalse(styleable.isSettable(link));
-        BooleanProperty other = new SimpleBooleanProperty(true);
-        link.visitedProperty().bind(other);
-    }
-
-    @Ignore ("replaced by visitedPropertyIsNotStyleable")
-    @Test public void whenVisitedIsSpecifiedViaCSSAndIsNotBound_impl_cssSettable_ReturnsFalse() {
-        // will return null!
-        CssMetaData styleable = ((StyleableProperty)link.visitedProperty()).getCssMetaData();
-        assertFalse(styleable.isSettable(link));
-    }
-
-    @Ignore ("replaced by visitedPropertyIsNotStyleable")
-    @Test public void cannotSpecifyVisitedViaCSS() {
-        // will return null!
-        ((StyleableProperty)link.visitedProperty()).applyStyle(null, Boolean.TRUE);
-        assertFalse(link.isVisited());
-    }
-
     @Test public void settingVisitedSetsPseudoClass() {
         link.setVisited(true);
         assertPseudoClassExists(link, "visited");
     }
 
