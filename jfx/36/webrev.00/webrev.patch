diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -857,11 +857,11 @@
         assertEquals("0", comboBox.getValue());
         assertEquals("0", comboBox.getSelectionModel().getSelectedItem());
         assertTrue(sm.isSelected(2));
     }
 
-    @Ignore("Test not working as the heights being returned are not accurate")
+    @Ignore("JDK-8091127 Test not working as the heights being returned are not accurate")
     @Test public void test_rt20106() {
         comboBox.getItems().addAll("0","1","2","3","4","5","6","7","8","9");
 
         Stage stage = new Stage();
         Scene scene = new Scene(comboBox);
@@ -946,22 +946,19 @@
         IndexedCell cell = flow.getVisibleCell(2);
         System.out.println("cell: " + cell);
         assertEquals("TO_STRING", cell.getText());
     }
 
-    @Ignore
     @Test public void test_rt20189() {
         comboBox.getItems().addAll("0","1","2","3","4","5","6","7","8","9");
 
         Stage stage = new Stage();
         Scene scene = new Scene(comboBox);
         stage.setScene(scene);
         comboBox.applyCss();
         comboBox.show();
 
-        SelectionModel sm = getListView().getSelectionModel();
-
         comboBox.getSelectionModel().select(2);
         Object item = sm.getSelectedItem();
         assertEquals("2", item);
         assertEquals(2, sm.getSelectedIndex());
 
@@ -1198,11 +1195,10 @@
 
         sl.dispose();
     }
 
     private int test_rt34603_count = 0;
-    @Ignore("Bug has not yet been resolved")
     @Test public void test_rt34603() {
         assertEquals(0, test_rt34603_count);
 
         VBox hbox = new VBox(10);
 
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/HyperlinkTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/HyperlinkTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/HyperlinkTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/HyperlinkTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -45,11 +45,10 @@
 import javafx.scene.Cursor;
 import javafx.scene.control.Hyperlink;
 import javafx.scene.shape.Rectangle;
 
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class HyperlinkTest {
     private Hyperlink link;
 
@@ -174,33 +173,10 @@
         } catch (Exception e) {
             org.junit.Assert.fail(e.toString());
         }
     }
 
-    @Ignore ("replaced by visitedPropertyIsNotStyleable")
-    @Test public void whenVisitedIsBound_impl_cssSettable_ReturnsFalse() {
-        // will return null!
-        CssMetaData styleable = ((StyleableProperty)link.visitedProperty()).getCssMetaData();
-        assertFalse(styleable.isSettable(link));
-        BooleanProperty other = new SimpleBooleanProperty(true);
-        link.visitedProperty().bind(other);
-    }
-
-    @Ignore ("replaced by visitedPropertyIsNotStyleable")
-    @Test public void whenVisitedIsSpecifiedViaCSSAndIsNotBound_impl_cssSettable_ReturnsFalse() {
-        // will return null!
-        CssMetaData styleable = ((StyleableProperty)link.visitedProperty()).getCssMetaData();
-        assertFalse(styleable.isSettable(link));
-    }
-
-    @Ignore ("replaced by visitedPropertyIsNotStyleable")
-    @Test public void cannotSpecifyVisitedViaCSS() {
-        // will return null!
-        ((StyleableProperty)link.visitedProperty()).applyStyle(null, Boolean.TRUE);
-        assertFalse(link.isVisited());
-    }
-
     @Test public void settingVisitedSetsPseudoClass() {
         link.setVisited(true);
         assertPseudoClassExists(link, "visited");
     }
 
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/LabeledTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/LabeledTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/LabeledTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/LabeledTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -241,11 +241,10 @@
      *  - if bound, impl_cssSettable returns false                                  *
      *  - if specified via CSS and not bound, impl_cssSettable returns true         *
      *                                                                              *
      *******************************************************************************/
 
-    @Ignore("This is not the default whilst we await a fix for RT-12212")
     @Test public void alignmentDefaultValueIsCENTER_LEFT() {
         assertEquals(Pos.CENTER_LEFT, labeled.getAlignment());
     }
 
     @Test public void alignmentCanBeNull() {
@@ -763,15 +762,14 @@
     @Test public void labelPaddingDefaultValueIsEmptyInsets() {
         assertEquals(Insets.EMPTY, labeled.getLabelPadding());
         assertEquals(Insets.EMPTY, labeled.labelPaddingProperty().get());
     }
 
-    @Ignore ("labelPaddingProperty returns read-only property")
     @Test public void canSpecifyLabelPaddingFromCSS() {
         Insets insets = new Insets(5, 4, 3, 2);
-//        CssMetaData styleable = ((StyleableProperty)labeled.labelPaddingProperty()).getCssMetaData();
-//        styleable.set(labeled,insets, null);
+        CssMetaData styleable = ((StyleableProperty)labeled.labelPaddingProperty()).getCssMetaData();
+        styleable.set(labeled, insets, null);
         assertEquals(insets, labeled.getLabelPadding());
         assertEquals(insets, labeled.labelPaddingProperty().get());
     }
 
     /********************************************************************************
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextInputControlTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextInputControlTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextInputControlTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextInputControlTest.java
@@ -51,11 +51,10 @@
 import javafx.scene.control.TextArea;
 import javafx.scene.control.TextField;
 import javafx.scene.control.TextInputControl;
 import com.sun.javafx.tk.Toolkit;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;
 import test.com.sun.javafx.pgstub.StubToolkit;
@@ -204,19 +203,10 @@
         assertEquals("Apples", textInput.getText());
         other.set("Oranges");
         assertEquals("Oranges", textInput.getText());
     }
 
-    @Ignore("getCssMetaData will return null for textProperty")
-    @Test public void impl_cssSettable_ReturnsFalseForTextAlways() {
-        CssMetaData styleable = ((StyleableProperty)textInput.textProperty()).getCssMetaData();
-        assertTrue(styleable.isSettable(textInput));
-        StringProperty other = new SimpleStringProperty("Apples");
-        textInput.textProperty().bind(other);
-        assertFalse(styleable.isSettable(textInput));
-    }
-
     @Test public void cannotSpecifyTextViaCSS() {
         try {
             CssMetaData styleable = ((StyleableProperty)textInput.textProperty()).getCssMetaData();
             assertNull(styleable);
         } catch (ClassCastException ignored) {
@@ -315,19 +305,10 @@
         assertFalse(textInput.isEditable());
         other.set(true);
         assertTrue(textInput.isEditable());
     }
 
-    @Ignore("getCssMetaData will return null for editableProperty")
-    @Test public void impl_cssSettable_ReturnsFalseForEditableAlways() {
-        CssMetaData styleable = ((StyleableProperty)textInput.editableProperty()).getCssMetaData();
-        assertTrue(styleable.isSettable(textInput));
-        StringProperty other = new SimpleStringProperty("Apples");
-        textInput.textProperty().bind(other);
-        assertFalse(styleable.isSettable(textInput));
-    }
-
     @Test public void cannotSpecifyEditableViaCSS() {
         try {
             CssMetaData styleable = ((StyleableProperty)textInput.editableProperty()).getCssMetaData();
             assertNull(styleable);
         } catch (ClassCastException ignored) {
@@ -449,13 +430,10 @@
         });
         textInput.setText("Hello");
         assertTrue(passed[0]);
     }
 
-    @Ignore("The notification here doesn't happen because the invalid flag is set after the first set," +
-            "however setting a change listener *must* clear that, but doesn't. I copied the code for this " +
-            "straight from the beans package, so there may be a bug there.")
     @Test public void lengthChangeNotificationWhenTextIsSetToEmptyResult() {
         textInput.setText("Goodbye");
         final boolean[] passed = new boolean[] { false };
         textInput.lengthProperty().addListener((observable, oldValue, newValue) -> {
             passed[0] = true;
@@ -640,15 +618,10 @@
         });
         other.set("Cleared!");
         assertTrue(passed[0]);
     }
 
-    @Ignore
-    @Test public void selectionCanBeNull() {
-
-    }
-
     /******************************************************
      * Test for cut/copy/paste                            *
      *****************************************************/
 
     @Test public void cutRemovesSelection() {
