diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/edits.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/edits.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/edits.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/edits.h
@@ -22,12 +22,12 @@
 /**
  * Records lengths of string edits but not replacement text. Supports replacements, insertions, deletions
  * in linear progression. Does not support moving/reordering of text.
  *
  * There are two types of edits: <em>change edits</em> and <em>no-change edits</em>. Add edits to
- * instances of this class using {@link #addReplace(int, int)} (for change edits) and
- * {@link #addUnchanged(int)} (for no-change edits). Change edits are retained with full granularity,
+ * instances of this class using {@link #addReplace(int32_t, int32_t)} (for change edits) and
+ * {@link #addUnchanged(int32_t)} (for no-change edits). Change edits are retained with full granularity,
  * whereas adjacent no-change edits are always merged together. In no-change edits, there is a one-to-one
  * mapping between code points in the source and destination strings.
  *
  * After all edits have been added, instances of this class should be considered immutable, and an
  * {@link Edits::Iterator} can be used for queries.
@@ -60,15 +60,15 @@
  * <li>e ⇨ e (no-change)
  * <li>F ⇨ f (change)
  * </ul>
  *
  * The "fine changes" and "coarse changes" iterators will step through only the change edits when their
- * {@link Edits::Iterator#next()} methods are called. They are identical to the non-change iterators when
- * their {@link Edits::Iterator#findSourceIndex(int)} or {@link Edits::Iterator#findDestinationIndex(int)}
+ * `Edits::Iterator::next()` methods are called. They are identical to the non-change iterators when
+ * their `Edits::Iterator::findSourceIndex()` or `Edits::Iterator::findDestinationIndex()`
  * methods are used to walk through the string.
  *
- * For examples of how to use this class, see the test <code>TestCaseMapEditsIteratorDocs</code> in
+ * For examples of how to use this class, see the test `TestCaseMapEditsIteratorDocs` in
  * UCharacterCaseTest.java.
  *
  * An Edits object tracks a separate UErrorCode, but ICU string transformation functions
  * (e.g., case mapping functions) merge any such errors into their API's UErrorCode.
  *
@@ -84,11 +84,11 @@
             array(stackArray), capacity(STACK_CAPACITY), length(0), delta(0), numChanges(0),
             errorCode_(U_ZERO_ERROR) {}
     /**
      * Copy constructor.
      * @param other source edits
-     * @draft ICU 60
+     * @stable ICU 60
      */
     Edits(const Edits &other) :
             array(stackArray), capacity(STACK_CAPACITY), length(other.length),
             delta(other.delta), numChanges(other.numChanges),
             errorCode_(other.errorCode_) {
@@ -96,11 +96,11 @@
     }
     /**
      * Move constructor, might leave src empty.
      * This object will have the same contents that the source object had.
      * @param src source edits
-     * @draft ICU 60
+     * @stable ICU 60
      */
     Edits(Edits &&src) U_NOEXCEPT :
             array(stackArray), capacity(STACK_CAPACITY), length(src.length),
             delta(src.delta), numChanges(src.numChanges),
             errorCode_(src.errorCode_) {
@@ -115,21 +115,21 @@
 
     /**
      * Assignment operator.
      * @param other source edits
      * @return *this
-     * @draft ICU 60
+     * @stable ICU 60
      */
     Edits &operator=(const Edits &other);
 
     /**
      * Move assignment operator, might leave src empty.
      * This object will have the same contents that the source object had.
      * The behavior is undefined if *this and src are the same object.
      * @param src source edits
      * @return *this
-     * @draft ICU 60
+     * @stable ICU 60
      */
     Edits &operator=(Edits &&src) U_NOEXCEPT;
 
     /**
      * Resets the data but may not release memory.
@@ -171,40 +171,38 @@
      * @return TRUE if there are any change edits
      * @stable ICU 59
      */
     UBool hasChanges() const { return numChanges != 0; }
 
-#ifndef U_HIDE_DRAFT_API
     /**
      * @return the number of change edits
-     * @draft ICU 60
+     * @stable ICU 60
      */
     int32_t numberOfChanges() const { return numChanges; }
-#endif  // U_HIDE_DRAFT_API
 
     /**
      * Access to the list of edits.
      *
      * At any moment in time, an instance of this class points to a single edit: a "window" into a span
      * of the source string and the corresponding span of the destination string. The source string span
      * starts at {@link #sourceIndex()} and runs for {@link #oldLength()} chars; the destination string
      * span starts at {@link #destinationIndex()} and runs for {@link #newLength()} chars.
      *
-     * The iterator can be moved between edits using the {@link #next()}, {@link #findSourceIndex(int)},
-     * and {@link #findDestinationIndex(int)} methods. Calling any of these methods mutates the iterator
-     * to make it point to the corresponding edit.
+     * The iterator can be moved between edits using the `next()`, `findSourceIndex(int32_t, UErrorCode &)`,
+     * and `findDestinationIndex(int32_t, UErrorCode &)` methods.
+     * Calling any of these methods mutates the iterator to make it point to the corresponding edit.
      *
      * For more information, see the documentation for {@link Edits}.
      *
      * @see getCoarseIterator
      * @see getFineIterator
      * @stable ICU 59
      */
     struct U_COMMON_API Iterator U_FINAL : public UMemory {
         /**
          * Default constructor, empty iterator.
-         * @draft ICU 60
+         * @stable ICU 60
          */
         Iterator() :
                 array(nullptr), index(0), length(0),
                 remaining(0), onlyChanges_(FALSE), coarse(FALSE),
                 dir(0), changed(FALSE), oldLength_(0), newLength_(0),
@@ -251,11 +249,10 @@
          */
         UBool findSourceIndex(int32_t i, UErrorCode &errorCode) {
             return findIndex(i, TRUE, errorCode) == 0;
         }
 
-#ifndef U_HIDE_DRAFT_API
         /**
          * Moves the iterator to the edit that contains the destination index.
          * The destination index may be found in a no-change edit
          * even if normal iteration would skip no-change edits.
          * Normal iteration can continue from a found edit.
@@ -269,11 +266,11 @@
          * @param i destination index
          * @param errorCode ICU error code. Its input value must pass the U_SUCCESS() test,
          *                  or else the function returns immediately. Check for U_FAILURE()
          *                  on output or use with function chaining. (See User Guide for details.)
          * @return TRUE if the edit for the destination index was found
-         * @draft ICU 60
+         * @stable ICU 60
          */
         UBool findDestinationIndex(int32_t i, UErrorCode &errorCode) {
             return findIndex(i, FALSE, errorCode) == 0;
         }
 
@@ -295,11 +292,11 @@
          * @param i source index
          * @param errorCode ICU error code. Its input value must pass the U_SUCCESS() test,
          *                  or else the function returns immediately. Check for U_FAILURE()
          *                  on output or use with function chaining. (See User Guide for details.)
          * @return destination index; undefined if i is not 0..string length
-         * @draft ICU 60
+         * @stable ICU 60
          */
         int32_t destinationIndexFromSourceIndex(int32_t i, UErrorCode &errorCode);
 
         /**
          * Computes the source index corresponding to the given destination index.
@@ -319,14 +316,13 @@
          * @param i destination index
          * @param errorCode ICU error code. Its input value must pass the U_SUCCESS() test,
          *                  or else the function returns immediately. Check for U_FAILURE()
          *                  on output or use with function chaining. (See User Guide for details.)
          * @return source index; undefined if i is not 0..string length
-         * @draft ICU 60
+         * @stable ICU 60
          */
         int32_t sourceIndexFromDestinationIndex(int32_t i, UErrorCode &errorCode);
-#endif  // U_HIDE_DRAFT_API
 
         /**
          * Returns whether the edit currently represented by the iterator is a change edit.
          *
          * @return TRUE if this edit replaces oldLength() units with newLength() different ones.
@@ -364,17 +360,17 @@
         int32_t sourceIndex() const { return srcIndex; }
 
         /**
          * The start index of the current span in the replacement string; the span has length
          * {@link #newLength}. Well-defined only if the current edit is a change edit.
-         * <p>
-         * The <em>replacement string</em> is the concatenation of all substrings of the destination
+         *
+         * The *replacement string* is the concatenation of all substrings of the destination
          * string corresponding to change edits.
-         * <p>
+         *
          * This method is intended to be used together with operations that write only replacement
-         * characters (e.g., {@link CaseMap#omitUnchangedText()}). The source string can then be modified
-         * in-place.
+         * characters (e.g. operations specifying the \ref U_OMIT_UNCHANGED_TEXT option).
+         * The source string can then be modified in-place.
          *
          * @return the current index into the replacement-characters-only string,
          *         not counting unchanged spans
          * @stable ICU 59
          */
@@ -473,11 +469,10 @@
      */
     Iterator getFineIterator() const {
         return Iterator(array, length, FALSE, FALSE);
     }
 
-#ifndef U_HIDE_DRAFT_API
     /**
      * Merges the two input Edits and appends the result to this object.
      *
      * Consider two string transformations (for example, normalization and case mapping)
      * where each records Edits in addition to writing an output string.<br>
@@ -499,14 +494,13 @@
      *     map to substrings of output string c.
      * @param errorCode ICU error code. Its input value must pass the U_SUCCESS() test,
      *                  or else the function returns immediately. Check for U_FAILURE()
      *                  on output or use with function chaining. (See User Guide for details.)
      * @return *this, with the merged edits appended
-     * @draft ICU 60
+     * @stable ICU 60
      */
     Edits &mergeAndAppend(const Edits &ab, const Edits &bc, UErrorCode &errorCode);
-#endif  // U_HIDE_DRAFT_API
 
 private:
     void releaseArray() U_NOEXCEPT;
     Edits &copyArray(const Edits &other);
     Edits &moveArray(Edits &src) U_NOEXCEPT;
