diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/bytesinkutil.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/bytesinkutil.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/bytesinkutil.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/bytesinkutil.cpp
@@ -9,10 +9,11 @@
 #include "unicode/edits.h"
 #include "unicode/stringoptions.h"
 #include "unicode/utf8.h"
 #include "unicode/utf16.h"
 #include "bytesinkutil.h"
+#include "charstr.h"
 #include "cmemory.h"
 #include "uassert.h"
 
 U_NAMESPACE_BEGIN
 
@@ -118,6 +119,43 @@
         appendNonEmptyUnchanged(s, length, sink, options, edits);
     }
     return TRUE;
 }
 
+CharStringByteSink::CharStringByteSink(CharString* dest) : dest_(*dest) {
+}
+
+CharStringByteSink::~CharStringByteSink() = default;
+
+void
+CharStringByteSink::Append(const char* bytes, int32_t n) {
+    UErrorCode status = U_ZERO_ERROR;
+    dest_.append(bytes, n, status);
+    // Any errors are silently ignored.
+}
+
+char*
+CharStringByteSink::GetAppendBuffer(int32_t min_capacity,
+                                    int32_t desired_capacity_hint,
+                                    char* scratch,
+                                    int32_t scratch_capacity,
+                                    int32_t* result_capacity) {
+    if (min_capacity < 1 || scratch_capacity < min_capacity) {
+        *result_capacity = 0;
+        return nullptr;
+    }
+
+    UErrorCode status = U_ZERO_ERROR;
+    char* result = dest_.getAppendBuffer(
+            min_capacity,
+            desired_capacity_hint,
+            *result_capacity,
+            status);
+    if (U_SUCCESS(status)) {
+        return result;
+    }
+
+    *result_capacity = scratch_capacity;
+    return scratch;
+}
+
 U_NAMESPACE_END
