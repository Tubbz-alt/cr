diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/charstr.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/charstr.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/charstr.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/charstr.cpp
@@ -77,11 +77,11 @@
     if(sLength<-1 || (s==NULL && sLength!=0)) {
         errorCode=U_ILLEGAL_ARGUMENT_ERROR;
         return *this;
     }
     if(sLength<0) {
-        sLength=uprv_strlen(s);
+        sLength= static_cast<int32_t>(uprv_strlen(s));
     }
     if(sLength>0) {
         if(s==(buffer.getAlias()+len)) {
             // The caller wrote into the getAppendBuffer().
             if(sLength>=(buffer.getCapacity()-len)) {
@@ -124,19 +124,25 @@
     resultCapacity=0;
     return NULL;
 }
 
 CharString &CharString::appendInvariantChars(const UnicodeString &s, UErrorCode &errorCode) {
+    return appendInvariantChars(s.getBuffer(), s.length(), errorCode);
+}
+
+CharString &CharString::appendInvariantChars(const UChar* uchars, int32_t ucharsLen, UErrorCode &errorCode) {
     if(U_FAILURE(errorCode)) {
         return *this;
     }
-    if (!uprv_isInvariantUnicodeString(s)) {
+    if (!uprv_isInvariantUString(uchars, ucharsLen)) {
         errorCode = U_INVARIANT_CONVERSION_ERROR;
         return *this;
     }
-    if(ensureCapacity(len+s.length()+1, 0, errorCode)) {
-        len+=s.extract(0, 0x7fffffff, buffer.getAlias()+len, buffer.getCapacity()-len, US_INV);
+    if(ensureCapacity(len+ucharsLen+1, 0, errorCode)) {
+        u_UCharsToChars(uchars, buffer.getAlias()+len, ucharsLen);
+        len += ucharsLen;
+        buffer[len] = 0;
     }
     return *this;
 }
 
 UBool CharString::ensureCapacity(int32_t capacity,
