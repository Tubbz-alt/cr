diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/numparse_types.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/numparse_types.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/numparse_types.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/numparse_types.h
@@ -47,10 +47,11 @@
     PARSE_FLAG_EXACT_AFFIX = 0x0200,
     PARSE_FLAG_PLUS_SIGN_ALLOWED = 0x0400,
     // PARSE_FLAG_OPTIMIZE = 0x0800, // no longer used
     // PARSE_FLAG_FORCE_BIG_DECIMAL = 0x1000, // not used in ICU4C
     PARSE_FLAG_NO_FOREIGN_CURRENCY = 0x2000,
+    PARSE_FLAG_ALLOW_INFINITE_RECURSION = 0x4000,
 };
 
 
 // TODO: Is this class worthwhile?
 template<int32_t stackCapacity>
@@ -61,11 +62,11 @@
         fBuffer[0] = 0;
     }
 
     CompactUnicodeString(const UnicodeString& text)
             : fBuffer(text.length() + 1) {
-        memcpy(fBuffer.getAlias(), text.getBuffer(), sizeof(UChar) * text.length());
+        uprv_memcpy(fBuffer.getAlias(), text.getBuffer(), sizeof(UChar) * text.length());
         fBuffer[text.length()] = 0;
     }
 
     inline UnicodeString toAliasedUnicodeString() const {
         return UnicodeString(TRUE, fBuffer.getAlias(), -1);
@@ -158,11 +159,11 @@
      */
     bool success() const;
 
     bool seenNumber() const;
 
-    double getDouble() const;
+    double getDouble(UErrorCode& status) const;
 
     void populateFormattable(Formattable& output, parse_flags_t parseFlags) const;
 
     bool isBetterThan(const ParsedNumber& other);
 };
@@ -264,11 +265,11 @@
     int32_t getCaseSensitivePrefixLength(const UnicodeString& other);
 
     bool operator==(const UnicodeString& other) const;
 
   private:
-    const UnicodeString fStr;
+    const UnicodeString& fStr;
     int32_t fStart;
     int32_t fEnd;
     bool fFoldCase;
 
     int32_t getPrefixLengthInternal(const UnicodeString& other, bool foldCase);
@@ -344,11 +345,11 @@
      * @param result
      *            The data structure to store results.
      */
     virtual void postProcess(ParsedNumber&) const {
         // Default implementation: no-op
-    };
+    }
 
     // String for debugging
     virtual UnicodeString toString() const = 0;
 
   protected:
