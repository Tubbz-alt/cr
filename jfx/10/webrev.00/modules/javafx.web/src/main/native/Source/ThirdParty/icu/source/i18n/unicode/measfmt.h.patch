diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/measfmt.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/measfmt.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/measfmt.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/measfmt.h
@@ -102,21 +102,21 @@
 
     /**
      * Constructor.
      * <p>
      * <strong>NOTE:</strong> New users are strongly encouraged to use
-     * {@link NumberFormatter} instead of NumberFormat.
+     * {@link icu::number::NumberFormatter} instead of NumberFormat.
      * @stable ICU 53
      */
     MeasureFormat(
             const Locale &locale, UMeasureFormatWidth width, UErrorCode &status);
 
     /**
      * Constructor.
      * <p>
      * <strong>NOTE:</strong> New users are strongly encouraged to use
-     * {@link NumberFormatter} instead of NumberFormat.
+     * {@link icu::number::NumberFormatter} instead of NumberFormat.
      * @stable ICU 53
      */
     MeasureFormat(
             const Locale &locale,
             UMeasureFormatWidth width,
@@ -200,11 +200,11 @@
     /**
      * Formats a single measure per unit. An example of such a
      * formatted string is 3.5 meters per second.
      * @param measure The measure object. In above example, 3.5 meters.
      * @param perUnit The per unit. In above example, it is
-     *        *MeasureUnit::createSecond(status).
+     *        `*%MeasureUnit::createSecond(status)`.
      * @param appendTo formatted string appended here.
      * @param pos the field position.
      * @param status the error.
      * @return appendTo reference
      *
@@ -221,11 +221,11 @@
      * Gets the display name of the specified {@link MeasureUnit} corresponding to the current
      * locale and format width.
      * @param unit  The unit for which to get a display name.
      * @param status the error.
      * @return  The display name in the locale and width specified in
-     *          {@link MeasureFormat#getInstance}, or null if there is no display name available
+     *          the MeasureFormat constructor, or null if there is no display name available
      *          for the specified unit.
      *
      * @stable ICU 58
      */
     UnicodeString getUnitDisplayName(const MeasureUnit& unit, UErrorCode &status) const;
@@ -234,11 +234,11 @@
     /**
      * Return a formatter for CurrencyAmount objects in the given
      * locale.
      * <p>
      * <strong>NOTE:</strong> New users are strongly encouraged to use
-     * {@link NumberFormatter} instead of NumberFormat.
+     * {@link icu::number::NumberFormatter} instead of NumberFormat.
      * @param locale desired locale
      * @param ec input-output error code
      * @return a formatter object, or NULL upon error
      * @stable ICU 3.0
      */
@@ -248,11 +248,11 @@
     /**
      * Return a formatter for CurrencyAmount objects in the default
      * locale.
      * <p>
      * <strong>NOTE:</strong> New users are strongly encouraged to use
-     * {@link NumberFormatter} instead of NumberFormat.
+     * {@link icu::number::NumberFormatter} instead of NumberFormat.
      * @param ec input-output error code
      * @return a formatter object, or NULL upon error
      * @stable ICU 3.0
      */
     static MeasureFormat* U_EXPORT2 createCurrencyFormat(UErrorCode& ec);
@@ -320,11 +320,18 @@
 
     /**
      * ICU use only.
      * @internal.
      */
-    const NumberFormat &getNumberFormat() const;
+    const NumberFormat &getNumberFormatInternal() const;
+
+    /**
+     * ICU use only.
+     * Always returns the short form currency formatter.
+     * @internal.
+     */
+    const NumberFormat& getCurrencyFormatInternal() const;
 
     /**
      * ICU use only.
      * @internal.
      */
@@ -346,38 +353,17 @@
 
  private:
     const MeasureFormatCacheData *cache;
     const SharedNumberFormat *numberFormat;
     const SharedPluralRules *pluralRules;
-    UMeasureFormatWidth width;
+    UMeasureFormatWidth fWidth;
 
     // Declared outside of MeasureFormatSharedData because ListFormatter
     // objects are relatively cheap to copy; therefore, they don't need to be
     // shared across instances.
     ListFormatter *listFormatter;
-    const SimpleFormatter *getFormatterOrNull(
-            const MeasureUnit &unit, UMeasureFormatWidth width, int32_t index) const;
-
-    const SimpleFormatter *getFormatter(
-            const MeasureUnit &unit, UMeasureFormatWidth width, int32_t index,
-            UErrorCode &errorCode) const;
-
-    const SimpleFormatter *getPluralFormatter(
-            const MeasureUnit &unit, UMeasureFormatWidth width, int32_t index,
-            UErrorCode &errorCode) const;
-
-    const SimpleFormatter *getPerFormatter(
-            UMeasureFormatWidth width,
-            UErrorCode &status) const;
-
-    int32_t withPerUnitAndAppend(
-        const UnicodeString &formatted,
-        const MeasureUnit &perUnit,
-        UnicodeString &appendTo,
-        UErrorCode &status) const;
-
     UnicodeString &formatMeasure(
         const Measure &measure,
         const NumberFormat &nf,
         UnicodeString &appendTo,
         FieldPosition &pos,
