diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_stringbuilder.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_stringbuilder.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_stringbuilder.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_stringbuilder.h
@@ -83,10 +83,12 @@
 
     int32_t append(const NumberStringBuilder &other, UErrorCode &status);
 
     int32_t insert(int32_t index, const NumberStringBuilder &other, UErrorCode &status);
 
+    void writeTerminator(UErrorCode& status);
+
     /**
      * Gets a "safe" UnicodeString that can be used even after the NumberStringBuilder is destructed.
      * */
     UnicodeString toUnicodeString() const;
 
@@ -104,10 +106,14 @@
 
     bool nextFieldPosition(FieldPosition& fp, UErrorCode& status) const;
 
     void getAllFieldPositions(FieldPositionIteratorHandler& fpih, UErrorCode& status) const;
 
+    bool nextPosition(ConstrainedFieldPosition& cfpos, Field numericField, UErrorCode& status) const;
+
+    bool containsField(Field field) const;
+
   private:
     bool fUsingHeap = false;
     ValueOrHeapArray<char16_t> fChars;
     ValueOrHeapArray<Field> fFields;
     int32_t fZero = DEFAULT_CAPACITY / 2;
@@ -136,10 +142,18 @@
     int32_t prepareForInsert(int32_t index, int32_t count, UErrorCode &status);
 
     int32_t prepareForInsertHelper(int32_t index, int32_t count, UErrorCode &status);
 
     int32_t remove(int32_t index, int32_t count);
+
+    static bool isIntOrGroup(Field field);
+
+    static bool isNumericField(Field field);
+
+    int32_t trimBack(int32_t limit) const;
+
+    int32_t trimFront(int32_t start) const;
 };
 
 } // namespace impl
 } // namespace number
 U_NAMESPACE_END
