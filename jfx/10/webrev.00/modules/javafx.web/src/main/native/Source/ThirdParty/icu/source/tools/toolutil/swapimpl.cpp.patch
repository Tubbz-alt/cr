diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/tools/toolutil/swapimpl.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/tools/toolutil/swapimpl.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/tools/toolutil/swapimpl.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/tools/toolutil/swapimpl.cpp
@@ -39,10 +39,11 @@
 #include "uinvchar.h"
 #include "uassert.h"
 #include "uarrsort.h"
 #include "ucmndata.h"
 #include "udataswp.h"
+#include "ulayout_props.h"
 
 /* swapping implementations in common */
 
 #include "uresdata.h"
 #include "ucnv_io.h"
@@ -241,11 +242,11 @@
 
         /*
          * swap the main properties UTrie
          * PT serialized properties trie, see utrie.h (byte size: 4*(i0-16))
          */
-        utrie2_swapAnyVersion(ds,
+        utrie_swapAnyVersion(ds,
             inData32+UPROPS_INDEX_COUNT,
             4*(dataIndexes[UPROPS_PROPS32_INDEX]-UPROPS_INDEX_COUNT),
             outData32+UPROPS_INDEX_COUNT,
             pErrorCode);
 
@@ -272,11 +273,11 @@
 
         /*
          * swap the additional UTrie
          * i3 additionalTrieIndex; -- 32-bit unit index to the additional trie for more properties
          */
-        utrie2_swapAnyVersion(ds,
+        utrie_swapAnyVersion(ds,
             inData32+dataIndexes[UPROPS_ADDITIONAL_TRIE_INDEX],
             4*(dataIndexes[UPROPS_ADDITIONAL_VECTORS_INDEX]-dataIndexes[UPROPS_ADDITIONAL_TRIE_INDEX]),
             outData32+dataIndexes[UPROPS_ADDITIONAL_TRIE_INDEX],
             pErrorCode);
 
@@ -334,11 +335,11 @@
         pInfo->dataFormat[2]==UCASE_FMT_2 &&
         pInfo->dataFormat[3]==UCASE_FMT_3 &&
         ((pInfo->formatVersion[0]==1 &&
           pInfo->formatVersion[2]==UTRIE_SHIFT &&
           pInfo->formatVersion[3]==UTRIE_INDEX_SHIFT) ||
-         2<=pInfo->formatVersion[0] || pInfo->formatVersion[0]<=4)
+         (2<=pInfo->formatVersion[0] && pInfo->formatVersion[0]<=4))
     )) {
         udata_printError(ds, "ucase_swap(): data format %02x.%02x.%02x.%02x (format version %02x) is not recognized as case mapping data\n",
                          pInfo->dataFormat[0], pInfo->dataFormat[1],
                          pInfo->dataFormat[2], pInfo->dataFormat[3],
                          pInfo->formatVersion[0]);
@@ -389,11 +390,11 @@
         ds->swapArray32(ds, inBytes, count, outBytes, pErrorCode);
         offset+=count;
 
         /* swap the UTrie */
         count=indexes[UCASE_IX_TRIE_SIZE];
-        utrie2_swapAnyVersion(ds, inBytes+offset, count, outBytes+offset, pErrorCode);
+        utrie_swapAnyVersion(ds, inBytes+offset, count, outBytes+offset, pErrorCode);
         offset+=count;
 
         /* swap the uint16_t exceptions[] and unfold[] */
         count=(indexes[UCASE_IX_EXC_LENGTH]+indexes[UCASE_IX_UNFOLD_LENGTH])*2;
         ds->swapArray16(ds, inBytes+offset, count, outBytes+offset, pErrorCode);
@@ -491,11 +492,11 @@
         ds->swapArray32(ds, inBytes, count, outBytes, pErrorCode);
         offset+=count;
 
         /* swap the UTrie */
         count=indexes[UBIDI_IX_TRIE_SIZE];
-        utrie2_swapAnyVersion(ds, inBytes+offset, count, outBytes+offset, pErrorCode);
+        utrie_swapAnyVersion(ds, inBytes+offset, count, outBytes+offset, pErrorCode);
         offset+=count;
 
         /* swap the uint32_t mirrors[] */
         count=indexes[UBIDI_IX_MIRROR_LENGTH]*4;
         ds->swapArray32(ds, inBytes+offset, count, outBytes+offset, pErrorCode);
@@ -638,10 +639,110 @@
     return headerSize+size;
 }
 
 #endif
 
+// Unicode text layout properties data swapping --------------------------------
+
+static int32_t U_CALLCONV
+ulayout_swap(const UDataSwapper *ds,
+             const void *inData, int32_t length, void *outData,
+             UErrorCode *pErrorCode) {
+    // udata_swapDataHeader checks the arguments.
+    int32_t headerSize = udata_swapDataHeader(ds, inData, length, outData, pErrorCode);
+    if (pErrorCode == nullptr || U_FAILURE(*pErrorCode)) {
+        return 0;
+    }
+
+    // Check data format and format version.
+    const UDataInfo *pInfo = (const UDataInfo *)((const char *)inData + 4);
+    if (!(
+            pInfo->dataFormat[0] == ULAYOUT_FMT_0 &&    // dataFormat="Layo"
+            pInfo->dataFormat[1] == ULAYOUT_FMT_1 &&
+            pInfo->dataFormat[2] == ULAYOUT_FMT_2 &&
+            pInfo->dataFormat[3] == ULAYOUT_FMT_3 &&
+            pInfo->formatVersion[0] == 1)) {
+        udata_printError(ds,
+            "ulayout_swap(): data format %02x.%02x.%02x.%02x (format version %02x) "
+            "is not recognized as text layout properties data\n",
+            pInfo->dataFormat[0], pInfo->dataFormat[1],
+            pInfo->dataFormat[2], pInfo->dataFormat[3],
+            pInfo->formatVersion[0]);
+        *pErrorCode = U_UNSUPPORTED_ERROR;
+        return 0;
+    }
+
+    const uint8_t *inBytes = (const uint8_t *)inData + headerSize;
+    uint8_t *outBytes = (uint8_t *)outData + headerSize;
+
+    const int32_t *inIndexes = (const int32_t *)inBytes;
+
+    if (length >= 0) {
+        length -= headerSize;
+        if (length < 12 * 4) {
+            udata_printError(ds,
+                "ulayout_swap(): too few bytes (%d after header) for text layout properties data\n",
+                length);
+            *pErrorCode = U_INDEX_OUTOFBOUNDS_ERROR;
+            return 0;
+        }
+    }
+
+    int32_t indexesLength = udata_readInt32(ds, inIndexes[ULAYOUT_IX_INDEXES_LENGTH]);
+    if (indexesLength < 12) {
+        udata_printError(ds,
+            "ulayout_swap(): too few indexes (%d) for text layout properties data\n",
+            indexesLength);
+        *pErrorCode = U_INDEX_OUTOFBOUNDS_ERROR;
+        return 0;
+    }
+
+    // Read the data offsets before swapping anything.
+    int32_t indexes[ULAYOUT_IX_TRIES_TOP + 1];
+    for (int32_t i = ULAYOUT_IX_INPC_TRIE_TOP; i <= ULAYOUT_IX_TRIES_TOP; ++i) {
+        indexes[i] = udata_readInt32(ds, inIndexes[i]);
+    }
+    int32_t size = indexes[ULAYOUT_IX_TRIES_TOP];
+
+    if (length >= 0) {
+        if (length < size) {
+            udata_printError(ds,
+                "ulayout_swap(): too few bytes (%d after header) "
+                "for all of text layout properties data\n",
+                length);
+            *pErrorCode = U_INDEX_OUTOFBOUNDS_ERROR;
+            return 0;
+        }
+
+        // Copy the data for inaccessible bytes.
+        if (inBytes != outBytes) {
+            uprv_memcpy(outBytes, inBytes, size);
+        }
+
+        // Swap the int32_t indexes[].
+        int32_t offset = 0;
+        int32_t count = indexesLength * 4;
+        ds->swapArray32(ds, inBytes, count, outBytes, pErrorCode);
+        offset += count;
+
+        // Swap each trie.
+        for (int32_t i = ULAYOUT_IX_INPC_TRIE_TOP; i <= ULAYOUT_IX_TRIES_TOP; ++i) {
+            int32_t top = indexes[i];
+            count = top - offset;
+            U_ASSERT(count >= 0);
+            if (count >= 16) {
+                utrie_swapAnyVersion(ds, inBytes + offset, count, outBytes + offset, pErrorCode);
+            }
+            offset = top;
+        }
+
+        U_ASSERT(offset == size);
+    }
+
+    return headerSize + size;
+}
+
 /* Swap 'Test' data from gentest */
 static int32_t U_CALLCONV
 test_swap(const UDataSwapper *ds,
            const void *inData, int32_t length, void *outData,
            UErrorCode *pErrorCode) {
@@ -729,10 +830,14 @@
 
 #if !UCONFIG_NO_NORMALIZATION
     { { 0x4e, 0x6f, 0x72, 0x6d }, unorm_swap },         /* dataFormat="Norm" */
     { { 0x4e, 0x72, 0x6d, 0x32 }, unorm2_swap },        /* dataFormat="Nrm2" */
 #endif
+
+    { { ULAYOUT_FMT_0, ULAYOUT_FMT_1, ULAYOUT_FMT_2, ULAYOUT_FMT_3 },
+                                  ulayout_swap },       // dataFormat="Layo"
+
 #if !UCONFIG_NO_COLLATION
     { { 0x55, 0x43, 0x6f, 0x6c }, ucol_swap },          /* dataFormat="UCol" */
     { { 0x49, 0x6e, 0x76, 0x43 }, ucol_swapInverseUCA },/* dataFormat="InvC" */
 #endif
 #if !UCONFIG_NO_BREAK_ITERATION
