diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_utils.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_utils.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_utils.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_utils.cpp
@@ -68,11 +68,11 @@
         case CLDR_PATTERN_STYLE_SCIENTIFIC:
             patternKey = "scientificFormat";
             break;
         default:
             patternKey = "decimalFormat"; // silence compiler error
-            U_ASSERT(false);
+            UPRV_UNREACHABLE;
     }
     LocalUResourceBundlePointer res(ures_open(nullptr, locale.getName(), &status));
     if (U_FAILURE(status)) { return u""; }
 
     // Attempt to get the pattern with the native numbering system.
@@ -235,11 +235,13 @@
     }
 }
 
 void DecNum::divideBy(const DecNum& rhs, UErrorCode& status) {
     uprv_decNumberDivide(fData, fData, rhs.fData, &fContext);
-    if (fContext.status != 0) {
+    if ((fContext.status & DEC_Inexact) != 0) {
+        // Ignore.
+    } else if (fContext.status != 0) {
         status = U_INTERNAL_PROGRAM_ERROR;
     }
 }
 
 bool DecNum::isNegative() const {
