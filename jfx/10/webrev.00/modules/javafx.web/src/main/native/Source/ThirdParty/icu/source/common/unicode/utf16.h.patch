diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/utf16.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/utf16.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/utf16.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/utf16.h
@@ -211,12 +211,10 @@
             } \
         } \
     } \
 }
 
-#ifndef U_HIDE_DRAFT_API
-
 /**
  * Get a code point from a string at a random-access offset,
  * without changing the offset.
  * "Safe" macro, handles unpaired surrogates and checks for string boundaries.
  *
@@ -234,11 +232,11 @@
  * @param start starting string offset (usually 0)
  * @param i string offset, must be start<=i<length
  * @param length string length
  * @param c output UChar32 variable
  * @see U16_GET_UNSAFE
- * @draft ICU 60
+ * @stable ICU 60
  */
 #define U16_GET_OR_FFFD(s, start, i, length, c) { \
     (c)=(s)[i]; \
     if(U16_IS_SURROGATE(c)) { \
         uint16_t __c2; \
@@ -256,12 +254,10 @@
             } \
         } \
     } \
 }
 
-#endif  // U_HIDE_DRAFT_API
-
 /* definitions with forward iteration --------------------------------------- */
 
 /**
  * Get a code point from a string at a code point boundary offset,
  * and advance the offset to the next code point boundary.
@@ -318,12 +314,10 @@
             (c)=U16_GET_SUPPLEMENTARY((c), __c2); \
         } \
     } \
 }
 
-#ifndef U_HIDE_DRAFT_API
-
 /**
  * Get a code point from a string at a code point boundary offset,
  * and advance the offset to the next code point boundary.
  * (Post-incrementing forward iteration.)
  * "Safe" macro, handles unpaired surrogates and checks for string boundaries.
@@ -339,11 +333,11 @@
  * @param s const UChar * string
  * @param i string offset, must be i<length
  * @param length string length
  * @param c output UChar32 variable
  * @see U16_NEXT_UNSAFE
- * @draft ICU 60
+ * @stable ICU 60
  */
 #define U16_NEXT_OR_FFFD(s, i, length, c) { \
     (c)=(s)[(i)++]; \
     if(U16_IS_SURROGATE(c)) { \
         uint16_t __c2; \
@@ -354,12 +348,10 @@
             (c)=0xfffd; \
         } \
     } \
 }
 
-#endif  // U_HIDE_DRAFT_API
-
 /**
  * Append a code point to a string, overwriting 1 or 2 code units.
  * The offset points to the current end of the string contents
  * and is advanced (post-increment).
  * "Unsafe" macro, assumes a valid code point and sufficient space in the string.
@@ -583,12 +575,10 @@
             (c)=U16_GET_SUPPLEMENTARY(__c2, (c)); \
         } \
     } \
 }
 
-#ifndef U_HIDE_DRAFT_API
-
 /**
  * Move the string offset from one code point boundary to the previous one
  * and get the code point between them.
  * (Pre-decrementing backward iteration.)
  * "Safe" macro, handles unpaired surrogates and checks for string boundaries.
@@ -603,11 +593,11 @@
  * @param s const UChar * string
  * @param start starting string offset (usually 0)
  * @param i string offset, must be start<i
  * @param c output UChar32 variable
  * @see U16_PREV_UNSAFE
- * @draft ICU 60
+ * @stable ICU 60
  */
 #define U16_PREV_OR_FFFD(s, start, i, c) { \
     (c)=(s)[--(i)]; \
     if(U16_IS_SURROGATE(c)) { \
         uint16_t __c2; \
@@ -618,12 +608,10 @@
             (c)=0xfffd; \
         } \
     } \
 }
 
-#endif  // U_HIDE_DRAFT_API
-
 /**
  * Move the string offset from one code point boundary to the previous one.
  * (Pre-decrementing backward iteration.)
  * The input offset may be the same as the string length.
  * "Unsafe" macro, assumes well-formed UTF-16.
