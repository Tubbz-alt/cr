diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/uvectr64.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/uvectr64.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/uvectr64.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/uvectr64.h
@@ -94,21 +94,21 @@
 
     //------------------------------------------------------------
     // subset of java.util.Vector API
     //------------------------------------------------------------
 
-    void addElement(int64_t elem, UErrorCode &status);
+    inline void addElement(int64_t elem, UErrorCode &status);
 
     void setElementAt(int64_t elem, int32_t index);
 
     void insertElementAt(int64_t elem, int32_t index, UErrorCode &status);
 
-    int64_t elementAti(int32_t index) const;
+    inline int64_t elementAti(int32_t index) const;
 
     //UBool equals(const UVector64 &other) const;
 
-    int64_t lastElementi(void) const;
+    inline int64_t lastElementi(void) const;
 
     //int32_t indexOf(int64_t elem, int32_t startIndex = 0) const;
 
     //UBool contains(int64_t elem) const;
 
@@ -120,11 +120,11 @@
 
     //void removeElementAt(int32_t index);
 
     void removeAllElements();
 
-    int32_t size(void) const;
+    inline int32_t size(void) const;
 
     inline UBool isEmpty(void) const { return count == 0; }
 
     // Inline.  Use this one for speedy size check.
     inline UBool ensureCapacity(int32_t minimumCapacity, UErrorCode &status);
@@ -150,11 +150,11 @@
     //void sortedInsert(int64_t elem, UErrorCode& ec);
 
     /**
      * Returns a pointer to the internal array holding the vector.
      */
-    int64_t *getBuffer() const;
+    inline int64_t *getBuffer() const;
 
     /**
      * Set the maximum allowed buffer capacity for this vector/stack.
      * Default with no limit set is unlimited, go until malloc() fails.
      * A Limit of zero means unlimited capacity.
@@ -188,16 +188,16 @@
 public:
     //UBool empty(void) const;   // TODO:  redundant, same as empty().  Remove it?
 
     //int64_t peeki(void) const;
 
-    int64_t popi(void);
+    inline int64_t popi(void);
 
-    int64_t push(int64_t i, UErrorCode &status);
+    inline int64_t push(int64_t i, UErrorCode &status);
 
-    int64_t *reserveBlock(int32_t size, UErrorCode &status);
-    int64_t *popFrame(int32_t size);
+    inline int64_t *reserveBlock(int32_t size, UErrorCode &status);
+    inline int64_t *popFrame(int32_t size);
 };
 
 
 // UVector64 inlines
 
