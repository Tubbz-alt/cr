diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ustr_titlecase_brkiter.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ustr_titlecase_brkiter.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ustr_titlecase_brkiter.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ustr_titlecase_brkiter.cpp
@@ -75,17 +75,11 @@
 WholeStringBreakIterator::~WholeStringBreakIterator() {}
 UBool WholeStringBreakIterator::operator==(const BreakIterator&) const { return FALSE; }
 BreakIterator *WholeStringBreakIterator::clone() const { return nullptr; }
 
 CharacterIterator &WholeStringBreakIterator::getText() const {
-    U_ASSERT(FALSE);  // really should not be called
-    // Returns a null reference.
-    // Otherwise we would have to define a dummy CharacterIterator,
-    // and either have it as a field and const_cast it to a non-const reference,
-    // or have it via a pointer and return a reference to that.
-    CharacterIterator *none = nullptr;
-    return *none;
+    UPRV_UNREACHABLE;  // really should not be called
 }
 UText *WholeStringBreakIterator::getUText(UText * /*fillIn*/, UErrorCode &errorCode) const {
     if (U_SUCCESS(errorCode)) {
         errorCode = U_UNSUPPORTED_ERROR;
     }
@@ -103,14 +97,12 @@
         } else {
             errorCode = U_INDEX_OUTOFBOUNDS_ERROR;
         }
     }
 }
-void  WholeStringBreakIterator::adoptText(CharacterIterator* it) {
-    U_ASSERT(FALSE);  // should not be called
-    length = it->getLength();
-    delete it;
+void  WholeStringBreakIterator::adoptText(CharacterIterator*) {
+    UPRV_UNREACHABLE;  // should not be called
 }
 
 int32_t WholeStringBreakIterator::first() { return 0; }
 int32_t WholeStringBreakIterator::last() { return length; }
 int32_t WholeStringBreakIterator::previous() { return 0; }
