diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/transreg.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/transreg.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/transreg.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/transreg.cpp
@@ -184,12 +184,11 @@
                     delete (Transliterator*)(transliterators.elementAt(i));
             }
         }
         break;
     case RULES:
-        U_ASSERT(FALSE); // don't call create() if isRuleBased() returns TRUE!
-        break;
+        UPRV_UNREACHABLE; // don't call create() if isRuleBased() returns TRUE!
     }
     return t;
 }
 
 UBool TransliteratorAlias::isRuleBased() const {
@@ -1328,16 +1327,16 @@
                 return NULL;
             }
             int32_t passNumber = 1;
             for (int32_t i = 0; U_SUCCESS(status) && i < entry->u.dataVector->size(); i++) {
                 // TODO: Should passNumber be turned into a decimal-string representation (1 -> "1")?
-                Transliterator* t = new RuleBasedTransliterator(UnicodeString(CompoundTransliterator::PASS_STRING) + UnicodeString(passNumber++),
+                Transliterator* tl = new RuleBasedTransliterator(UnicodeString(CompoundTransliterator::PASS_STRING) + UnicodeString(passNumber++),
                     (TransliterationRuleData*)(entry->u.dataVector->elementAt(i)), FALSE);
-                if (t == 0)
+                if (tl == 0)
                     status = U_MEMORY_ALLOCATION_ERROR;
                 else
-                    rbts->addElement(t, status);
+                    rbts->addElement(tl, status);
             }
             if (U_FAILURE(status)) {
                 delete rbts;
                 return 0;
             }
@@ -1394,12 +1393,11 @@
                 }
             //}
         }
         return 0;
     default:
-        U_ASSERT(FALSE); // can't get here
-        return 0;
+        UPRV_UNREACHABLE; // can't get here
     }
 }
 U_NAMESPACE_END
 
 #endif /* #if !UCONFIG_NO_TRANSLITERATION */
