diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/char16ptr.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/char16ptr.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/char16ptr.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/char16ptr.h
@@ -26,10 +26,12 @@
  */
 #ifdef U_ALIASING_BARRIER
     // Use the predefined value.
 #elif (defined(__clang__) || defined(__GNUC__)) && U_PLATFORM != U_PF_BROWSER_NATIVE_CLIENT
 #   define U_ALIASING_BARRIER(ptr) asm volatile("" : : "rm"(ptr) : "memory")
+#elif defined(U_IN_DOXYGEN)
+#   define U_ALIASING_BARRIER(ptr)
 #endif
 
 /**
  * char16_t * wrapper with implicit conversion from distinct but bit-compatible pointer types.
  * @stable ICU 59
@@ -101,10 +103,11 @@
         wchar_t *wp;
     } u_;
 #endif
 };
 
+/// \cond
 #ifdef U_ALIASING_BARRIER
 
 Char16Ptr::Char16Ptr(char16_t *p) : p_(p) {}
 #if !U_CHAR16_IS_TYPEDEF
 Char16Ptr::Char16Ptr(uint16_t *p) : p_(cast(p)) {}
@@ -132,10 +135,11 @@
 Char16Ptr::~Char16Ptr() {}
 
 char16_t *Char16Ptr::get() const { return u_.cp; }
 
 #endif
+/// \endcond
 
 /**
  * const char16_t * wrapper with implicit conversion from distinct but bit-compatible pointer types.
  * @stable ICU 59
  */
@@ -207,10 +211,11 @@
         const wchar_t *wp;
     } u_;
 #endif
 };
 
+/// \cond
 #ifdef U_ALIASING_BARRIER
 
 ConstChar16Ptr::ConstChar16Ptr(const char16_t *p) : p_(p) {}
 #if !U_CHAR16_IS_TYPEDEF
 ConstChar16Ptr::ConstChar16Ptr(const uint16_t *p) : p_(cast(p)) {}
@@ -238,10 +243,11 @@
 ConstChar16Ptr::~ConstChar16Ptr() {}
 
 const char16_t *ConstChar16Ptr::get() const { return u_.cp; }
 
 #endif
+/// \endcond
 
 /**
  * Converts from const char16_t * to const UChar *.
  * Includes an aliasing barrier if available.
  * @param p pointer
