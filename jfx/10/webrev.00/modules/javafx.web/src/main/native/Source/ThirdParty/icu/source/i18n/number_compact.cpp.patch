diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_compact.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_compact.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_compact.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_compact.cpp
@@ -258,11 +258,11 @@
         UnicodeString hello(patternString);
         CompactModInfo &info = precomputedMods[i];
         ParsedPatternInfo patternInfo;
         PatternParser::parseToPatternInfo(UnicodeString(patternString), patternInfo, status);
         if (U_FAILURE(status)) { return; }
-        buildReference.setPatternInfo(&patternInfo);
+        buildReference.setPatternInfo(&patternInfo, UNUM_COMPACT_FIELD);
         info.mod = buildReference.createImmutable(status);
         if (U_FAILURE(status)) { return; }
         info.patternString = patternString;
     }
 }
@@ -271,17 +271,17 @@
                                      UErrorCode &status) const {
     parent->processQuantity(quantity, micros, status);
     if (U_FAILURE(status)) { return; }
 
     // Treat zero as if it had magnitude 0
-    int magnitude;
+    int32_t magnitude;
     if (quantity.isZero()) {
         magnitude = 0;
         micros.rounder.apply(quantity, status);
     } else {
         // TODO: Revisit chooseMultiplierAndApply
-        int multiplier = micros.rounder.chooseMultiplierAndApply(quantity, data, status);
+        int32_t multiplier = micros.rounder.chooseMultiplierAndApply(quantity, data, status);
         magnitude = quantity.isZero() ? 0 : quantity.getMagnitude();
         magnitude -= multiplier;
     }
 
     StandardPlural::Form plural = utils::getStandardPlural(rules, quantity);
@@ -295,11 +295,11 @@
         // TODO: Benchmark this and maybe change to a binary search or hash table.
         int32_t i = 0;
         for (; i < precomputedModsLength; i++) {
             const CompactModInfo &info = precomputedMods[i];
             if (u_strcmp(patternString, info.patternString) == 0) {
-                info.mod->applyToMicros(micros, quantity);
+                info.mod->applyToMicros(micros, quantity, status);
                 break;
             }
         }
         // It should be guaranteed that we found the entry.
         U_ASSERT(i < precomputedModsLength);
@@ -308,11 +308,11 @@
         // Overwrite the PatternInfo in the existing modMiddle.
         // C++ Note: Use unsafePatternInfo for proper lifecycle.
         ParsedPatternInfo &patternInfo = const_cast<CompactHandler *>(this)->unsafePatternInfo;
         PatternParser::parseToPatternInfo(UnicodeString(patternString), patternInfo, status);
         static_cast<MutablePatternModifier*>(const_cast<Modifier*>(micros.modMiddle))
-            ->setPatternInfo(&patternInfo);
+            ->setPatternInfo(&patternInfo, UNUM_COMPACT_FIELD);
     }
 
     // We already performed rounding. Do not perform it again.
     micros.rounder = RoundingImpl::passThrough();
 }
