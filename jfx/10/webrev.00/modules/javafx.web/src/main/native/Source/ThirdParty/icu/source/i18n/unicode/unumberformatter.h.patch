diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/unumberformatter.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/unumberformatter.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/unumberformatter.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/unumberformatter.h
@@ -5,12 +5,14 @@
 
 #if !UCONFIG_NO_FORMATTING
 #ifndef __UNUMBERFORMATTER_H__
 #define __UNUMBERFORMATTER_H__
 
+#include "unicode/parseerr.h"
 #include "unicode/ufieldpositer.h"
 #include "unicode/umisc.h"
+#include "unicode/uformattedvalue.h"
 
 
 /**
  * \file
  * \brief C-compatible API for localized number formatting; not recommended for C++.
@@ -89,11 +91,11 @@
  * <li>ISO_CODE: "USDÂ 123.00" and undefined behavior
  * <li>HIDDEN: "123.00" and "123"
  * </ul>
  *
  * <p>
- * This enum is similar to {@link com.ibm.icu.text.MeasureFormat.FormatWidth}.
+ * This enum is similar to {@link UMeasureFormatWidth}.
  *
  * @draft ICU 60
  */
 typedef enum UNumberUnitWidth {
     /**
@@ -188,14 +190,13 @@
  *
  * <p>
  * Note: This enum specifies the strategy for grouping sizes. To set which character to use as the
  * grouping separator, use the "symbols" setter.
  *
- * @draft ICU 61 -- TODO: This should be renamed to UNumberGroupingStrategy before promoting to stable,
- * for consistency with the other enums.
+ * @draft ICU 63
  */
-typedef enum UGroupingStrategy {
+typedef enum UNumberGroupingStrategy {
     /**
      * Do not display grouping separators in any locale.
      *
      * @draft ICU 61
      */
@@ -252,20 +253,25 @@
      * Use the Western defaults: groups of 3 and enabled for all numbers 1000 or greater. Do not use
      * locale data for determining the grouping strategy.
      *
      * @draft ICU 61
      */
-            UNUM_GROUPING_THOUSANDS,
+            UNUM_GROUPING_THOUSANDS
 
+#ifndef U_HIDE_INTERNAL_API
+    ,
     /**
-     * One more than the highest UGroupingStrategy value.
+     * One more than the highest UNumberGroupingStrategy value.
      *
      * @internal ICU 62: The numeric value may change over time; see ICU ticket #12420.
      */
             UNUM_GROUPING_COUNT
+#endif  /* U_HIDE_INTERNAL_API */
+
+} UNumberGroupingStrategy;
+
 
-} UGroupingStrategy;
 #endif  /* U_HIDE_DRAFT_API */
 
 #ifndef U_HIDE_DRAFT_API
 /**
  * An enum declaring how to denote positive and negative numbers. Example outputs when formatting
@@ -369,10 +375,12 @@
  * <p>
  * <ul>
  * <li>UNUM_DECIMAL_SEPARATOR_AUTO: "1", "1.1"
  * <li>UNUM_DECIMAL_SEPARATOR_ALWAYS: "1.", "1.1"
  * </ul>
+ *
+ * @draft ICU 60
  */
 typedef enum UNumberDecimalSeparatorDisplay {
     /**
      * Show the decimal separator when there are one or more digits to display after the separator, and do not show
      * it otherwise. This is the default behavior.
@@ -395,30 +403,28 @@
      */
             UNUM_DECIMAL_SEPARATOR_COUNT
 } UNumberDecimalSeparatorDisplay;
 #endif  /* U_HIDE_DRAFT_API */
 
-#ifndef U_HIDE_DRAFT_API
+struct UNumberFormatter;
 /**
  * C-compatible version of icu::number::LocalizedNumberFormatter.
  *
  * NOTE: This is a C-compatible API; C++ users should build against numberformatter.h instead.
  *
- * @draft ICU 62
+ * @stable ICU 62
  */
-struct UNumberFormatter;
 typedef struct UNumberFormatter UNumberFormatter;
 
-
+struct UFormattedNumber;
 /**
  * C-compatible version of icu::number::FormattedNumber.
  *
  * NOTE: This is a C-compatible API; C++ users should build against numberformatter.h instead.
  *
- * @draft ICU 62
+ * @stable ICU 62
  */
-struct UFormattedNumber;
 typedef struct UFormattedNumber UFormattedNumber;
 
 
 /**
  * Creates a new UNumberFormatter for the given skeleton string and locale. This is currently the only
@@ -433,28 +439,45 @@
  *
  * @param skeleton The skeleton string, like u"percent precision-integer"
  * @param skeletonLen The number of UChars in the skeleton string, or -1 it it is NUL-terminated.
  * @param locale The NUL-terminated locale ID.
  * @param ec Set if an error occurs.
- * @draft ICU 62
+ * @stable ICU 62
  */
-U_DRAFT UNumberFormatter* U_EXPORT2
+U_STABLE UNumberFormatter* U_EXPORT2
 unumf_openForSkeletonAndLocale(const UChar* skeleton, int32_t skeletonLen, const char* locale,
                                UErrorCode* ec);
 
 
+#ifndef U_HIDE_DRAFT_API
 /**
- * Creates a new UFormattedNumber for holding the result of a number formatting operation.
+ * Like unumf_openForSkeletonAndLocale, but accepts a UParseError, which will be populated with the
+ * location of a skeleton syntax error if such a syntax error exists.
  *
- * Objects of type UFormattedNumber are not guaranteed to be threadsafe.
- *
- * NOTE: This is a C-compatible API; C++ users should build against numberformatter.h instead.
+ * @param skeleton The skeleton string, like u"percent precision-integer"
+ * @param skeletonLen The number of UChars in the skeleton string, or -1 it it is NUL-terminated.
+ * @param locale The NUL-terminated locale ID.
+ * @param perror A parse error struct populated if an error occurs when parsing. Can be NULL.
+ *               If no error occurs, perror->offset will be set to -1.
+ * @param ec Set if an error occurs.
+ * @draft ICU 64
+ */
+U_DRAFT UNumberFormatter* U_EXPORT2
+unumf_openForSkeletonAndLocaleWithError(
+       const UChar* skeleton, int32_t skeletonLen, const char* locale, UParseError* perror, UErrorCode* ec);
+#endif  // U_HIDE_DRAFT_API
+
+
+/**
+ * Creates an object to hold the result of a UNumberFormatter
+ * operation. The object can be used repeatedly; it is cleared whenever
+ * passed to a format function.
  *
  * @param ec Set if an error occurs.
- * @draft ICU 62
+ * @stable ICU 62
  */
-U_DRAFT UFormattedNumber* U_EXPORT2
+U_STABLE UFormattedNumber* U_EXPORT2
 unumf_openResult(UErrorCode* ec);
 
 
 /**
  * Uses a UNumberFormatter to format an integer to a UFormattedNumber. A string, field position, and other
@@ -467,13 +490,13 @@
  *
  * @param uformatter A formatter object created by unumf_openForSkeletonAndLocale or similar.
  * @param value The number to be formatted.
  * @param uresult The object that will be mutated to store the result; see unumf_openResult.
  * @param ec Set if an error occurs.
- * @draft ICU 62
+ * @stable ICU 62
  */
-U_DRAFT void U_EXPORT2
+U_STABLE void U_EXPORT2
 unumf_formatInt(const UNumberFormatter* uformatter, int64_t value, UFormattedNumber* uresult,
                 UErrorCode* ec);
 
 
 /**
@@ -487,13 +510,13 @@
  *
  * @param uformatter A formatter object created by unumf_openForSkeletonAndLocale or similar.
  * @param value The number to be formatted.
  * @param uresult The object that will be mutated to store the result; see unumf_openResult.
  * @param ec Set if an error occurs.
- * @draft ICU 62
+ * @stable ICU 62
  */
-U_DRAFT void U_EXPORT2
+U_STABLE void U_EXPORT2
 unumf_formatDouble(const UNumberFormatter* uformatter, double value, UFormattedNumber* uresult,
                    UErrorCode* ec);
 
 
 /**
@@ -511,41 +534,67 @@
  * @param uformatter A formatter object created by unumf_openForSkeletonAndLocale or similar.
  * @param value The numeric string to be formatted.
  * @param valueLen The length of the numeric string, or -1 if it is NUL-terminated.
  * @param uresult The object that will be mutated to store the result; see unumf_openResult.
  * @param ec Set if an error occurs.
- * @draft ICU 62
+ * @stable ICU 62
  */
-U_DRAFT void U_EXPORT2
+U_STABLE void U_EXPORT2
 unumf_formatDecimal(const UNumberFormatter* uformatter, const char* value, int32_t valueLen,
                     UFormattedNumber* uresult, UErrorCode* ec);
 
+#ifndef U_HIDE_DRAFT_API
+/**
+ * Returns a representation of a UFormattedNumber as a UFormattedValue,
+ * which can be subsequently passed to any API requiring that type.
+ *
+ * The returned object is owned by the UFormattedNumber and is valid
+ * only as long as the UFormattedNumber is present and unchanged in memory.
+ *
+ * You can think of this method as a cast between types.
+ *
+ * @param uresult The object containing the formatted string.
+ * @param ec Set if an error occurs.
+ * @return A UFormattedValue owned by the input object.
+ * @draft ICU 64
+ */
+U_DRAFT const UFormattedValue* U_EXPORT2
+unumf_resultAsValue(const UFormattedNumber* uresult, UErrorCode* ec);
+#endif  /* U_HIDE_DRAFT_API */
+
 
 /**
  * Extracts the result number string out of a UFormattedNumber to a UChar buffer if possible.
  * If bufferCapacity is greater than the required length, a terminating NUL is written.
  * If bufferCapacity is less than the required length, an error code is set.
  *
+ * Also see ufmtval_getString, which returns a NUL-terminated string:
+ *
+ *     int32_t len;
+ *     const UChar* str = ufmtval_getString(unumf_resultAsValue(uresult, &ec), &len, &ec);
+ *
  * NOTE: This is a C-compatible API; C++ users should build against numberformatter.h instead.
  *
  * @param uresult The object containing the formatted number.
  * @param buffer Where to save the string output.
  * @param bufferCapacity The number of UChars available in the buffer.
  * @param ec Set if an error occurs.
  * @return The required length.
- * @draft ICU 62
+ * @stable ICU 62
  */
-U_DRAFT int32_t U_EXPORT2
+U_STABLE int32_t U_EXPORT2
 unumf_resultToString(const UFormattedNumber* uresult, UChar* buffer, int32_t bufferCapacity,
                      UErrorCode* ec);
 
 
 /**
+ * This is a simpler but less powerful alternative to {@link ufmtval_nextPosition}.
+ *
  * If a field occurs just once, calling this method will find that occurrence and return it. If a
  * field occurs multiple times, this method may be called repeatedly with the following pattern:
  *
  * <pre>
  * UFieldPosition ufpos = {UNUM_GROUPING_SEPARATOR_FIELD, 0, 0};
@@ -557,68 +606,68 @@
  * This method is useful if you know which field to query. If you want all available field position
  * information, use unumf_resultGetAllFieldPositions().
  *
  * NOTE: All fields of the UFieldPosition must be initialized before calling this method.
  *
- * @param fieldPosition
+ * @param uresult The object containing the formatted number.
+ * @param ufpos
  *            Input+output variable. On input, the "field" property determines which field to look up,
  *            and the "endIndex" property determines where to begin the search. On output, the
  *            "beginIndex" field is set to the beginning of the first occurrence of the field after the
  *            input "endIndex", and "endIndex" is set to the end of that occurrence of the field
  *            (exclusive index). If a field position is not found, the FieldPosition is not changed and
  *            the method returns FALSE.
  * @param ec Set if an error occurs.
- * @draft ICU 62
+ * @stable ICU 62
  */
-U_DRAFT UBool U_EXPORT2
+U_STABLE UBool U_EXPORT2
 unumf_resultNextFieldPosition(const UFormattedNumber* uresult, UFieldPosition* ufpos, UErrorCode* ec);
 
 
 /**
  * Populates the given iterator with all fields in the formatted output string. This allows you to
  * determine the locations of the integer part, fraction part, and sign.
  *
- * If you need information on only one field, use unumf_resultNextFieldPosition().
+ * This is an alternative to the more powerful {@link ufmtval_nextPosition} API.
+ *
+ * If you need information on only one field, use {@link ufmtval_nextPosition} or
+ * {@link unumf_resultNextFieldPosition}.
  *
  * @param uresult The object containing the formatted number.
- * @param fpositer
+ * @param ufpositer
  *         A pointer to a UFieldPositionIterator created by {@link #ufieldpositer_open}. Iteration
  *         information already present in the UFieldPositionIterator is deleted, and the iterator is reset
  *         to apply to the fields in the formatted string created by this function call. The field values
  *         and indexes returned by {@link #ufieldpositer_next} represent fields denoted by
  *         the UNumberFormatFields enum. Fields are not returned in a guaranteed order. Fields cannot
  *         overlap, but they may nest. For example, 1234 could format as "1,234" which might consist of a
  *         grouping separator field for ',' and an integer field encompassing the entire string.
  * @param ec Set if an error occurs.
- * @draft ICU 62
+ * @stable ICU 62
  */
-U_DRAFT void U_EXPORT2
+U_STABLE void U_EXPORT2
 unumf_resultGetAllFieldPositions(const UFormattedNumber* uresult, UFieldPositionIterator* ufpositer,
                                  UErrorCode* ec);
 
 
 /**
  * Releases the UNumberFormatter created by unumf_openForSkeletonAndLocale().
  *
- * NOTE: This is a C-compatible API; C++ users should build against numberformatter.h instead.
- *
  * @param uformatter An object created by unumf_openForSkeletonAndLocale().
- * @draft ICU 62
+ * @stable ICU 62
  */
-U_DRAFT void U_EXPORT2
+U_STABLE void U_EXPORT2
 unumf_close(UNumberFormatter* uformatter);
 
 
 /**
  * Releases the UFormattedNumber created by unumf_openResult().
  *
- * NOTE: This is a C-compatible API; C++ users should build against numberformatter.h instead.
- *
  * @param uresult An object created by unumf_openResult().
- * @draft ICU 62
+ * @stable ICU 62
  */
-U_DRAFT void U_EXPORT2
+U_STABLE void U_EXPORT2
 unumf_closeResult(UFormattedNumber* uresult);
 
 
 #if U_SHOW_CPLUSPLUS_API
 U_NAMESPACE_BEGIN
@@ -634,16 +683,16 @@
  * // no need to explicitly call unumf_close()
  * </pre>
  *
  * @see LocalPointerBase
  * @see LocalPointer
- * @draft ICU 62
+ * @stable ICU 62
  */
 U_DEFINE_LOCAL_OPEN_POINTER(LocalUNumberFormatterPointer, UNumberFormatter, unumf_close);
 
 /**
- * \class LocalUNumberFormatterPointer
+ * \class LocalUFormattedNumberPointer
  * "Smart pointer" class; closes a UFormattedNumber via unumf_closeResult().
  * For most methods see the LocalPointerBase base class.
  *
  * Usage:
  * <pre>
@@ -651,67 +700,14 @@
  * // no need to explicitly call unumf_closeResult()
  * </pre>
  *
  * @see LocalPointerBase
  * @see LocalPointer
- * @draft ICU 62
+ * @stable ICU 62
  */
 U_DEFINE_LOCAL_OPEN_POINTER(LocalUFormattedNumberPointer, UFormattedNumber, unumf_closeResult);
 
 U_NAMESPACE_END
 #endif // U_SHOW_CPLUSPLUS_API
-#endif  /* U_HIDE_DRAFT_API */
-
 #endif //__UNUMBERFORMATTER_H__
 #endif /* #if !UCONFIG_NO_FORMATTING */
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
