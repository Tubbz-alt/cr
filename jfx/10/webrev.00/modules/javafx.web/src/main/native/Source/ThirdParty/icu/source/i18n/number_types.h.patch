diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_types.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_types.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_types.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_types.h
@@ -14,17 +14,22 @@
 #include "unicode/numberformatter.h"
 #include "unicode/utf16.h"
 #include "uassert.h"
 #include "unicode/platform.h"
 #include "unicode/uniset.h"
+#include "standardplural.h"
 
 U_NAMESPACE_BEGIN namespace number {
 namespace impl {
 
 // Typedef several enums for brevity and for easier comparison to Java.
 
-typedef UNumberFormatFields Field;
+// Convention: bottom 4 bits for field, top 4 bits for field category.
+// Field category 0 implies the number category so that the number field
+// literals can be directly passed as a Field type.
+// See the helper functions in "NumFieldUtils" in number_utils.h
+typedef uint8_t Field;
 
 typedef UNumberFormatRoundingMode RoundingMode;
 
 typedef UNumberFormatPadPosition PadPosition;
 
@@ -43,10 +48,11 @@
 
 class Modifier;
 class MutablePatternModifier;
 class DecimalQuantity;
 class NumberStringBuilder;
+class ModifierStore;
 struct MicroProps;
 
 
 enum AffixPatternType {
     // Represents a literal character; the value is stored in the code point field.
@@ -125,16 +131,17 @@
      * number instead of rendering the number.
      */
     virtual bool hasBody() const = 0;
 };
 
+
 /**
  * A Modifier is an object that can be passed through the formatting pipeline until it is finally applied to the string
  * builder. A Modifier usually contains a prefix and a suffix that are applied, but it could contain something else,
  * like a {@link com.ibm.icu.text.SimpleFormatter} pattern.
  *
- * A Modifier is usually immutable, except in cases such as {@link MurkyModifier}, which are mutable for performance
+ * A Modifier is usually immutable, except in cases such as {@link MutablePatternModifier}, which are mutable for performance
  * reasons.
  *
  * Exported as U_I18N_API because it is a base class for other exported types
  */
 class U_I18N_API Modifier {
@@ -160,27 +167,76 @@
      * Gets the length of the prefix. This information can be used in combination with {@link #apply} to extract the
      * prefix and suffix strings.
      *
      * @return The number of characters (UTF-16 code units) in the prefix.
      */
-    virtual int32_t getPrefixLength(UErrorCode& status) const = 0;
+    virtual int32_t getPrefixLength() const = 0;
 
     /**
      * Returns the number of code points in the modifier, prefix plus suffix.
      */
-    virtual int32_t getCodePointCount(UErrorCode& status) const = 0;
+    virtual int32_t getCodePointCount() const = 0;
 
     /**
      * Whether this modifier is strong. If a modifier is strong, it should always be applied immediately and not allowed
      * to bubble up. With regard to padding, strong modifiers are considered to be on the inside of the prefix and
      * suffix.
+
+    /**
+     * Whether the modifier contains at least one occurrence of the given field.
+     */
+    virtual bool containsField(UNumberFormatFields field) const = 0;
+
+    /**
+     * A fill-in for getParameters(). obj will always be set; if non-null, the other
+     * two fields are also safe to read.
+     */
+    struct U_I18N_API Parameters {
+        const ModifierStore* obj = nullptr;
+        int8_t signum;
+        StandardPlural::Form plural;
+
+        Parameters();
+        Parameters(const ModifierStore* _obj, int8_t _signum, StandardPlural::Form _plural);
+    };
+
+    /**
+     * Gets a set of "parameters" for this Modifier.
+     *
+     * TODO: Make this return a `const Parameters*` more like Java?
+     */
+    virtual void getParameters(Parameters& output) const = 0;
+
+    /**
+     * Returns whether this Modifier is *semantically equivalent* to the other Modifier;
+     * in many cases, this is the same as equal, but parameters should be ignored.
+     */
+    virtual bool semanticallyEquivalent(const Modifier& other) const = 0;
 };
 
+
+/**
+ * This is *not* a modifier; rather, it is an object that can return modifiers
+ * based on given parameters.
+ *
+ * Exported as U_I18N_API because it is a base class for other exported types.
+ */
+class U_I18N_API ModifierStore {
+  public:
+    virtual ~ModifierStore();
+
+    /**
+     * Returns a Modifier with the given parameters (best-effort).
+     */
+    virtual const Modifier* getModifier(int8_t signum, StandardPlural::Form plural) const = 0;
+};
+
+
 /**
  * This interface is used when all number formatting settings, including the locale, are known, except for the quantity
  * itself. The {@link #processQuantity} method performs the final step in the number processing pipeline: it uses the
  * quantity to generate a finalized {@link MicroProps}, which can be used to render the number to output.
  *
@@ -292,10 +348,11 @@
   private:
     bool fNull;
     T fValue;
 };
 
+
 } // namespace impl
 } // namespace number
 U_NAMESPACE_END
 
 #endif //__NUMBER_TYPES_H__
