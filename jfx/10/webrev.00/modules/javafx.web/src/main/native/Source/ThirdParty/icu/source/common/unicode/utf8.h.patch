diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/utf8.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/utf8.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/utf8.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/utf8.h
@@ -607,11 +607,10 @@
     if(U8_IS_TRAIL((s)[(i)])) { \
         (i)=utf8_back1SafeBody(s, start, (i)); \
     } \
 }
 
-#ifndef U_HIDE_DRAFT_API
 /**
  * If the string ends with a UTF-8 byte sequence that is valid so far
  * but incomplete, then reduce the length of the string to end before
  * the lead byte of that incomplete sequence.
  * For example, if the string ends with E1 80, the length is reduced by 2.
@@ -632,11 +631,11 @@
  *
  * @param s const uint8_t * string
  * @param start int32_t starting string offset (usually 0)
  * @param length int32_t string length (usually start<=length)
  * @see U8_SET_CP_START
- * @draft ICU 61
+ * @stable ICU 61
  */
 #define U8_TRUNCATE_IF_INCOMPLETE(s, start, length) \
     if((length)>(start)) { \
         uint8_t __b1=s[(length)-1]; \
         if(U8_IS_SINGLE(__b1)) { \
@@ -656,11 +655,10 @@
                     (length)-=3; \
                 } \
             } \
         } \
     }
-#endif  // U_HIDE_DRAFT_API
 
 /* definitions with backward iteration -------------------------------------- */
 
 /**
  * Move the string offset from one code point boundary to the previous one
