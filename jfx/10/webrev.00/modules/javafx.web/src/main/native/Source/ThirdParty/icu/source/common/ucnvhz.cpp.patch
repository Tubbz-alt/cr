diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnvhz.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnvhz.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnvhz.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnvhz.cpp
@@ -197,11 +197,11 @@
                     if (myData->isEmptySegment) {
                         myData->isEmptySegment = FALSE; /* we are handling it, reset to avoid future spurious errors */
                         *err = U_ILLEGAL_ESCAPE_SEQUENCE;
                         args->converter->toUCallbackReason = UCNV_IRREGULAR;
                         args->converter->toUBytes[0] = UCNV_TILDE;
-                        args->converter->toUBytes[1] = mySourceChar;
+                        args->converter->toUBytes[1] = static_cast<uint8_t>(mySourceChar);
                         args->converter->toULength = 2;
                         args->target = myTarget;
                         args->source = mySource;
                         return;
                     }
@@ -227,11 +227,11 @@
                         /* The current byte could be the start of a character: Back it out. */
                         args->converter->toULength = 1;
                         --mySource;
                     } else {
                         /* Include the current byte in the illegal sequence. */
-                        args->converter->toUBytes[1] = mySourceChar;
+                        args->converter->toUBytes[1] = static_cast<uint8_t>(mySourceChar);
                         args->converter->toULength = 2;
                     }
                     args->target = myTarget;
                     args->source = mySource;
                     return;
