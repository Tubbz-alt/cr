diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/utrie2.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/utrie2.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/utrie2.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/utrie2.h
@@ -20,11 +20,10 @@
 #define __UTRIE2_H__
 
 #include "unicode/utypes.h"
 #include "unicode/utf8.h"
 #include "putilimp.h"
-#include "udataswp.h"
 
 U_CDECL_BEGIN
 
 struct UTrie;  /* forward declaration */
 #ifndef __UTRIE_H__
@@ -328,44 +327,10 @@
                  void *data, int32_t capacity,
                  UErrorCode *pErrorCode);
 
 /* Public UTrie2 API: miscellaneous functions ------------------------------- */
 
-/**
- * Get the UTrie version from 32-bit-aligned memory containing the serialized form
- * of either a UTrie (version 1) or a UTrie2 (version 2).
- *
- * @param data a pointer to 32-bit-aligned memory containing the serialized form
- *             of a UTrie, version 1 or 2
- * @param length the number of bytes available at data;
- *               can be more than necessary (see return value)
- * @param anyEndianOk If FALSE, only platform-endian serialized forms are recognized.
- *                    If TRUE, opposite-endian serialized forms are recognized as well.
- * @return the UTrie version of the serialized form, or 0 if it is not
- *         recognized as a serialized UTrie
- */
-U_CAPI int32_t U_EXPORT2
-utrie2_getVersion(const void *data, int32_t length, UBool anyEndianOk);
-
-/**
- * Swap a serialized UTrie2.
- * @internal
- */
-U_CAPI int32_t U_EXPORT2
-utrie2_swap(const UDataSwapper *ds,
-            const void *inData, int32_t length, void *outData,
-            UErrorCode *pErrorCode);
-
-/**
- * Swap a serialized UTrie or UTrie2.
- * @internal
- */
-U_CAPI int32_t U_EXPORT2
-utrie2_swapAnyVersion(const UDataSwapper *ds,
-                      const void *inData, int32_t length, void *outData,
-                      UErrorCode *pErrorCode);
-
 /**
  * Build a UTrie2 (version 2) from a UTrie (version 1).
  * Enumerates all values in the UTrie and builds a UTrie2 with the same values.
  * The resulting UTrie2 will be frozen.
  *
@@ -707,10 +672,14 @@
     int32_t length;         /* number of serialized bytes at memory; 0 if not frozen yet */
     UBool isMemoryOwned;    /* TRUE if the trie owns the memory */
     UBool padding1;
     int16_t padding2;
     UNewTrie2 *newTrie;     /* builder object; NULL when frozen */
+
+#ifdef UTRIE2_DEBUG
+    const char *name;
+#endif
 };
 
 /**
  * Trie constants, defining shift widths, index array lengths, etc.
  *
