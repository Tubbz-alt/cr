diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/double-conversion-bignum.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/double-conversion-bignum.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/double-conversion-bignum.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/double-conversion-bignum.cpp
@@ -43,11 +43,11 @@
 U_NAMESPACE_BEGIN
 
 namespace double_conversion {
 
 Bignum::Bignum()
-    : bigits_(bigits_buffer_, kBigitCapacity), used_digits_(0), exponent_(0) {
+    : bigits_buffer_(), bigits_(bigits_buffer_, kBigitCapacity), used_digits_(0), exponent_(0) {
   for (int i = 0; i < kBigitCapacity; ++i) {
     bigits_[i] = 0;
   }
 }
 
@@ -457,30 +457,31 @@
   // power_exponent.
   // Get rid of first 1-bit;
   mask >>= 2;
   uint64_t this_value = base;
 
-  bool delayed_multipliciation = false;
+  bool delayed_multiplication = false;
   const uint64_t max_32bits = 0xFFFFFFFF;
   while (mask != 0 && this_value <= max_32bits) {
     this_value = this_value * this_value;
     // Verify that there is enough space in this_value to perform the
     // multiplication.  The first bit_size bits must be 0.
     if ((power_exponent & mask) != 0) {
+      ASSERT(bit_size > 0);
       uint64_t base_bits_mask =
           ~((static_cast<uint64_t>(1) << (64 - bit_size)) - 1);
       bool high_bits_zero = (this_value & base_bits_mask) == 0;
       if (high_bits_zero) {
         this_value *= base;
       } else {
-        delayed_multipliciation = true;
+        delayed_multiplication = true;
       }
     }
     mask >>= 1;
   }
   AssignUInt64(this_value);
-  if (delayed_multipliciation) {
+  if (delayed_multiplication) {
     MultiplyByUInt32(base);
   }
 
   // Now do the same thing as a bignum.
   while (mask != 0) {
