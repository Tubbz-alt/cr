diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/fphdlimp.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/fphdlimp.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/fphdlimp.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/fphdlimp.cpp
@@ -36,11 +36,12 @@
 FieldPositionOnlyHandler::~FieldPositionOnlyHandler() {
 }
 
 void
 FieldPositionOnlyHandler::addAttribute(int32_t id, int32_t start, int32_t limit) {
-  if (pos.getField() == id) {
+  if (pos.getField() == id && (!acceptFirstOnly || !seenFirst)) {
+    seenFirst = TRUE;
     pos.setBeginIndex(start + fShift);
     pos.setEndIndex(limit + fShift);
   }
 }
 
@@ -55,21 +56,31 @@
 UBool
 FieldPositionOnlyHandler::isRecording(void) const {
   return pos.getField() != FieldPosition::DONT_CARE;
 }
 
+void FieldPositionOnlyHandler::setAcceptFirstOnly(UBool acceptFirstOnly) {
+  this->acceptFirstOnly = acceptFirstOnly;
+}
+
 
 // utility subclass FieldPositionIteratorHandler
 
 FieldPositionIteratorHandler::FieldPositionIteratorHandler(FieldPositionIterator* posIter,
                                                            UErrorCode& _status)
-    : iter(posIter), vec(NULL), status(_status) {
+    : iter(posIter), vec(NULL), status(_status), fCategory(UFIELD_CATEGORY_UNDEFINED) {
   if (iter && U_SUCCESS(status)) {
     vec = new UVector32(status);
   }
 }
 
+FieldPositionIteratorHandler::FieldPositionIteratorHandler(
+    UVector32* vec,
+    UErrorCode& status)
+    : iter(nullptr), vec(vec), status(status), fCategory(UFIELD_CATEGORY_UNDEFINED) {
+}
+
 FieldPositionIteratorHandler::~FieldPositionIteratorHandler() {
   // setData adopts the vec regardless of status, so it's safe to null it
   if (iter) {
     iter->setData(vec, status);
   }
@@ -77,12 +88,13 @@
   vec = NULL;
 }
 
 void
 FieldPositionIteratorHandler::addAttribute(int32_t id, int32_t start, int32_t limit) {
-  if (iter && U_SUCCESS(status) && start < limit) {
+  if (vec && U_SUCCESS(status) && start < limit) {
     int32_t size = vec->size();
+    vec->addElement(fCategory, status);
     vec->addElement(id, status);
     vec->addElement(start + fShift, status);
     vec->addElement(limit + fShift, status);
     if (!U_SUCCESS(status)) {
       vec->setSize(size);
