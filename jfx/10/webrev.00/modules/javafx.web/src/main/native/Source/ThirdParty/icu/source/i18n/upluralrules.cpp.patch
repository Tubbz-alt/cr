diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/upluralrules.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/upluralrules.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/upluralrules.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/upluralrules.cpp
@@ -15,11 +15,13 @@
 #include "unicode/plurrule.h"
 #include "unicode/locid.h"
 #include "unicode/unistr.h"
 #include "unicode/unum.h"
 #include "unicode/numfmt.h"
+#include "unicode/unumberformatter.h"
 #include "number_decimalquantity.h"
+#include "number_utypes.h"
 
 U_NAMESPACE_USE
 
 namespace {
 
@@ -89,10 +91,32 @@
     }
     UnicodeString result = ((PluralRules*)uplrules)->select(number);
     return result.extract(keyword, capacity, *status);
 }
 
+U_CAPI int32_t U_EXPORT2
+uplrules_selectFormatted(const UPluralRules *uplrules,
+                const UFormattedNumber* number,
+                UChar *keyword, int32_t capacity,
+                UErrorCode *status)
+{
+    if (U_FAILURE(*status)) {
+        return 0;
+    }
+    if (keyword == NULL ? capacity != 0 : capacity < 0) {
+        *status = U_ILLEGAL_ARGUMENT_ERROR;
+        return 0;
+    }
+    const number::impl::DecimalQuantity* dq =
+        number::impl::validateUFormattedNumberToDecimalQuantity(number, *status);
+    if (U_FAILURE(*status)) {
+        return 0;
+    }
+    UnicodeString result = ((PluralRules*)uplrules)->select(*dq);
+    return result.extract(keyword, capacity, *status);
+}
+
 U_CAPI int32_t U_EXPORT2
 uplrules_selectWithFormat(const UPluralRules *uplrules,
                           double number,
                           const UNumberFormat *fmt,
                           UChar *keyword, int32_t capacity,
