diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/dtitvinf.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/dtitvinf.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/dtitvinf.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/dtitvinf.cpp
@@ -324,11 +324,13 @@
     UCalendarDateFields validateAndProcessPatternLetter(const char *patternLetter) {
         // Check that patternLetter is just one letter
         char c0;
         if ((c0 = patternLetter[0]) != 0 && patternLetter[1] == 0) {
             // Check that the pattern letter is accepted
-            if (c0 == 'y') {
+            if (c0 == 'G') {
+                return UCAL_ERA;
+            } else if (c0 == 'y') {
                 return UCAL_YEAR;
             } else if (c0 == 'M') {
                 return UCAL_MONTH;
             } else if (c0 == 'd') {
                 return UCAL_DATE;
@@ -592,11 +594,11 @@
 
     int32_t pos = UHASH_FIRST;
     const UHashElement* elem = NULL;
     while ( (elem = fIntervalPatterns->nextElement(pos)) != NULL ) {
         const UHashTok keyTok = elem->key;
-        UnicodeString* skeleton = (UnicodeString*)keyTok.pointer;
+        UnicodeString* newSkeleton = (UnicodeString*)keyTok.pointer;
 #ifdef DTITVINF_DEBUG
     skeleton->extract(0,  skeleton->length(), result, "UTF-8");
     sprintf(mesg, "available skeletons: skeleton: %s; \n", result);
     PRINTMESG(mesg)
 #endif
@@ -604,11 +606,11 @@
         // clear skeleton field width
         int8_t i;
         for ( i = 0; i < fieldLength; ++i ) {
             skeletonFieldWidth[i] = 0;
         }
-        parseSkeleton(*skeleton, skeletonFieldWidth);
+        parseSkeleton(*newSkeleton, skeletonFieldWidth);
         // calculate distance
         int32_t distance = 0;
         int8_t fieldDifference = 1;
         for ( i = 0; i < fieldLength; ++i ) {
             int32_t inputFieldWidth = inputSkeletonFieldWidth[i];
@@ -630,11 +632,11 @@
                             (inputFieldWidth - fieldWidth) :
                             (fieldWidth - inputFieldWidth);
             }
         }
         if ( distance < bestDistance ) {
-            bestSkeleton = skeleton;
+            bestSkeleton = newSkeleton;
             bestDistance = distance;
             bestMatchDistanceInfo = fieldDifference;
         }
         if ( distance == 0 ) {
             bestMatchDistanceInfo = 0;
