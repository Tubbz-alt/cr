diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnvsel.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnvsel.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnvsel.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnvsel.cpp
@@ -39,10 +39,11 @@
 #include "unicode/uchriter.h"
 #include "utrie2.h"
 #include "propsvec.h"
 #include "uassert.h"
 #include "ucmndata.h"
+#include "udataswp.h"
 #include "uenumimp.h"
 #include "cmemory.h"
 #include "cstring.h"
 
 U_NAMESPACE_USE
@@ -70,11 +71,11 @@
   int32_t columns = (result->encodingsCount+31)/32;
 
   // set errorValue to all-ones
   for (int32_t col = 0; col < columns; col++) {
     upvec_setValue(upvec, UPVEC_ERROR_VALUE_CP, UPVEC_ERROR_VALUE_CP,
-                   col, ~0, ~0, status);
+                   col, static_cast<uint32_t>(~0), static_cast<uint32_t>(~0), status);
   }
 
   for (int32_t i = 0; i < result->encodingsCount; ++i) {
     uint32_t mask;
     uint32_t column;
@@ -107,11 +108,11 @@
                    &smallStatus);
       if (U_FAILURE(smallStatus)) {
         // this will be reached for the converters that fill the set with
         // strings. Those should be ignored by our system
       } else {
-        upvec_setValue(upvec, start_char, end_char, column, ~0, mask,
+        upvec_setValue(upvec, start_char, end_char, column, static_cast<uint32_t>(~0), mask,
                        status);
       }
     }
     ucnv_close(test_converter);
     uset_close(unicode_point_set);
@@ -128,11 +129,11 @@
       UChar32 end_char;
 
       uset_getItem(excludedCodePoints, j, &start_char, &end_char, NULL, 0,
                    status);
       for (int32_t col = 0; col < columns; col++) {
-        upvec_setValue(upvec, start_char, end_char, col, ~0, ~0,
+        upvec_setValue(upvec, start_char, end_char, col, static_cast<uint32_t>(~0), static_cast<uint32_t>(~0),
                       status);
       }
     }
   }
 
@@ -682,11 +683,11 @@
     for (; ent; totalOnes++)
     {
       ent &= ent - 1; // clear the least significant bit set
     }
   }
-  return totalOnes;
+  return static_cast<int16_t>(totalOnes);
 }
 
 
 /* internal function! */
 static UEnumeration *selectForMask(const UConverterSelector* sel,
