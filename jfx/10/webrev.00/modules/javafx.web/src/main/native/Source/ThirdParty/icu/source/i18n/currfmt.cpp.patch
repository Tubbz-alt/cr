diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/currfmt.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/currfmt.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/currfmt.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/currfmt.cpp
@@ -19,23 +19,20 @@
 #include "unicode/curramt.h"
 
 U_NAMESPACE_BEGIN
 
 CurrencyFormat::CurrencyFormat(const Locale& locale, UErrorCode& ec) :
-    MeasureFormat(locale, UMEASFMT_WIDTH_WIDE, ec), fmt(NULL)
+    MeasureFormat(locale, UMEASFMT_WIDTH_WIDE, ec)
 {
-    fmt = NumberFormat::createCurrencyInstance(locale, ec);
 }
 
 CurrencyFormat::CurrencyFormat(const CurrencyFormat& other) :
-    MeasureFormat(other), fmt(NULL)
+    MeasureFormat(other)
 {
-    fmt = (NumberFormat*) other.fmt->clone();
 }
 
 CurrencyFormat::~CurrencyFormat() {
-    delete fmt;
 }
 
 Format* CurrencyFormat::clone() const {
     return new CurrencyFormat(*this);
 }
@@ -43,18 +40,18 @@
 UnicodeString& CurrencyFormat::format(const Formattable& obj,
                                       UnicodeString& appendTo,
                                       FieldPosition& pos,
                                       UErrorCode& ec) const
 {
-    return fmt->format(obj, appendTo, pos, ec);
+    return getCurrencyFormatInternal().format(obj, appendTo, pos, ec);
 }
 
 void CurrencyFormat::parseObject(const UnicodeString& source,
                                  Formattable& result,
                                  ParsePosition& pos) const
 {
-    CurrencyAmount* currAmt = fmt->parseCurrency(source, pos);
+    CurrencyAmount* currAmt = getCurrencyFormatInternal().parseCurrency(source, pos);
     if (currAmt != NULL) {
         result.adoptObject(currAmt);
     }
 }
 
