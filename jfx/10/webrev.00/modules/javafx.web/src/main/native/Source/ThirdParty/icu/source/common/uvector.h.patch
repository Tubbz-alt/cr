diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/uvector.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/uvector.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/uvector.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/uvector.h
@@ -140,23 +140,23 @@
 
     int32_t elementAti(int32_t index) const;
 
     UBool equals(const UVector &other) const;
 
-    void* firstElement(void) const;
+    inline void* firstElement(void) const;
 
-    void* lastElement(void) const;
+    inline void* lastElement(void) const;
 
-    int32_t lastElementi(void) const;
+    inline int32_t lastElementi(void) const;
 
     int32_t indexOf(void* obj, int32_t startIndex = 0) const;
 
     int32_t indexOf(int32_t obj, int32_t startIndex = 0) const;
 
-    UBool contains(void* obj) const;
+    inline UBool contains(void* obj) const;
 
-    UBool contains(int32_t obj) const;
+    inline UBool contains(int32_t obj) const;
 
     UBool containsAll(const UVector& other) const;
 
     UBool removeAll(const UVector& other);
 
@@ -166,13 +166,13 @@
 
     UBool removeElement(void* obj);
 
     void removeAllElements();
 
-    int32_t size(void) const;
+    inline int32_t size(void) const;
 
-    UBool isEmpty(void) const;
+    inline UBool isEmpty(void) const;
 
     UBool ensureCapacity(int32_t minimumCapacity, UErrorCode &status);
 
     /**
      * Change the size of this vector as follows: If newSize is
@@ -193,11 +193,11 @@
 
     UObjectDeleter *setDeleter(UObjectDeleter *d);
 
     UElementsAreEqual *setComparer(UElementsAreEqual *c);
 
-    void* operator[](int32_t index) const;
+    inline void* operator[](int32_t index) const;
 
     /**
      * Removes the element at the given index from this vector and
      * transfer ownership of it to the caller.  After this call, the
      * caller owns the result and must delete it and the vector entry
@@ -307,23 +307,23 @@
     virtual ~UStack();
 
     // It's okay not to have a virtual destructor (in UVector)
     // because UStack has no special cleanup to do.
 
-    UBool empty(void) const;
+    inline UBool empty(void) const;
 
-    void* peek(void) const;
+    inline void* peek(void) const;
 
-    int32_t peeki(void) const;
+    inline int32_t peeki(void) const;
 
     void* pop(void);
 
     int32_t popi(void);
 
-    void* push(void* obj, UErrorCode &status);
+    inline void* push(void* obj, UErrorCode &status);
 
-    int32_t push(int32_t i, UErrorCode &status);
+    inline int32_t push(int32_t i, UErrorCode &status);
 
     /*
     If the object o occurs as an item in this stack,
     this method returns the 1-based distance from the top of the stack.
     */
