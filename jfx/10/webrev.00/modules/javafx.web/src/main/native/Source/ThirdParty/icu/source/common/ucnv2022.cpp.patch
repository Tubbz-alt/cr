diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnv2022.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnv2022.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnv2022.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnv2022.cpp
@@ -2119,11 +2119,11 @@
                 if(myData->version==3) {
                     pToU2022State->g=0;
                     continue;
                 } else {
                     /* only JIS7 uses SI/SO, not ISO-2022-JP-x */
-                    myData->isEmptySegment = FALSE; /* reset this, we have a different error */
+                    myData->isEmptySegment = FALSE;    /* reset this, we have a different error */
                     break;
                 }
 
             case UCNV_SO:
                 if(myData->version==3) {
@@ -2131,11 +2131,11 @@
                     pToU2022State->cs[1] = (int8_t)HWKANA_7BIT;
                     pToU2022State->g=1;
                     continue;
                 } else {
                     /* only JIS7 uses SI/SO, not ISO-2022-JP-x */
-                    myData->isEmptySegment = FALSE; /* reset this, we have a different error */
+                    myData->isEmptySegment = FALSE;    /* reset this, we have a different error */
                     break;
                 }
 
             case ESC_2022:
                 mySource--;
@@ -2157,11 +2157,11 @@
 
                 /* invalid or illegal escape sequence */
                 if(U_FAILURE(*err)){
                     args->target = myTarget;
                     args->source = mySource;
-                    myData->isEmptySegment = FALSE; /* Reset to avoid future spurious errors */
+                    myData->isEmptySegment = FALSE;    /* Reset to avoid future spurious errors */
                     return;
                 }
                 /* If we successfully completed an escape sequence, we begin a new segment, empty so far */
                 if(myData->key==0) {
                     myData->isEmptySegment = TRUE;
@@ -2710,11 +2710,11 @@
             mySourceChar= (unsigned char) *mySource++;
 
             if(mySourceChar==UCNV_SI){
                 myData->toU2022State.g = 0;
                 if (myData->isEmptySegment) {
-                    myData->isEmptySegment = FALSE; /* we are handling it, reset to avoid future spurious errors */
+                    myData->isEmptySegment = FALSE;    /* we are handling it, reset to avoid future spurious errors */
                     *err = U_ILLEGAL_ESCAPE_SEQUENCE;
                     args->converter->toUCallbackReason = UCNV_IRREGULAR;
                     args->converter->toUBytes[0] = (uint8_t)mySourceChar;
                     args->converter->toULength = 1;
                     args->target = myTarget;
@@ -2723,28 +2723,28 @@
                 }
                 /*consume the source */
                 continue;
             }else if(mySourceChar==UCNV_SO){
                 myData->toU2022State.g = 1;
-                myData->isEmptySegment = TRUE;  /* Begin a new segment, empty so far */
+                myData->isEmptySegment = TRUE;    /* Begin a new segment, empty so far */
                 /*consume the source */
                 continue;
             }else if(mySourceChar==ESC_2022){
                 mySource--;
 escape:
-                myData->isEmptySegment = FALSE; /* Any invalid ESC sequences will be detected separately, so just reset this */
+                myData->isEmptySegment = FALSE;    /* Any invalid ESC sequences will be detected separately, so just reset this */
                 changeState_2022(args->converter,&(mySource),
                                 mySourceLimit, ISO_2022_KR, err);
                 if(U_FAILURE(*err)){
                     args->target = myTarget;
                     args->source = mySource;
                     return;
                 }
                 continue;
             }
 
-            myData->isEmptySegment = FALSE; /* Any invalid char errors will be detected separately, so just reset this */
+            myData->isEmptySegment = FALSE;    /* Any invalid char errors will be detected separately, so just reset this */
             if(myData->toU2022State.g == 1) {
                 if(mySource < mySourceLimit) {
                     int leadIsOk, trailIsOk;
                     uint8_t trailByte;
 getTrailByte:
@@ -2770,11 +2770,11 @@
                         mySourceChar = (mySourceChar << 8) | trailByte;
                     } else if (!(trailIsOk || IS_2022_CONTROL(trailByte))) {
                         /* report a pair of illegal bytes if the second byte is not a DBCS starter */
                         ++mySource;
                         /* add another bit so that the code below writes 2 bytes in case of error */
-                        mySourceChar = 0x10000 | (mySourceChar << 8) | trailByte;
+                        mySourceChar = static_cast<UChar>(0x10000 | (mySourceChar << 8) | trailByte);
                     }
                 } else {
                     args->converter->toUBytes[0] = (uint8_t)mySourceChar;
                     args->converter->toULength = 1;
                     break;
@@ -3299,29 +3299,29 @@
 
             switch(mySourceChar){
             case UCNV_SI:
                 pToU2022State->g=0;
                 if (myData->isEmptySegment) {
-                    myData->isEmptySegment = FALSE; /* we are handling it, reset to avoid future spurious errors */
+                    myData->isEmptySegment = FALSE;    /* we are handling it, reset to avoid future spurious errors */
                     *err = U_ILLEGAL_ESCAPE_SEQUENCE;
                     args->converter->toUCallbackReason = UCNV_IRREGULAR;
-                    args->converter->toUBytes[0] = mySourceChar;
+                    args->converter->toUBytes[0] = static_cast<uint8_t>(mySourceChar);
                     args->converter->toULength = 1;
                     args->target = myTarget;
                     args->source = mySource;
                     return;
                 }
                 continue;
 
             case UCNV_SO:
                 if(pToU2022State->cs[1] != 0) {
                     pToU2022State->g=1;
-                    myData->isEmptySegment = TRUE;  /* Begin a new segment, empty so far */
+                    myData->isEmptySegment = TRUE;    /* Begin a new segment, empty so far */
                     continue;
                 } else {
                     /* illegal to have SO before a matching designator */
-                    myData->isEmptySegment = FALSE; /* Handling a different error, reset this to avoid future spurious errs */
+                    myData->isEmptySegment = FALSE;    /* Handling a different error, reset this to avoid future spurious errs */
                     break;
                 }
 
             case ESC_2022:
                 mySource--;
@@ -3343,11 +3343,11 @@
 
                 /* invalid or illegal escape sequence */
                 if(U_FAILURE(*err)){
                     args->target = myTarget;
                     args->source = mySource;
-                    myData->isEmptySegment = FALSE; /* Reset to avoid future spurious errors */
+                    myData->isEmptySegment = FALSE;    /* Reset to avoid future spurious errors */
                     return;
                 }
                 continue;
 
             /* ISO-2022-CN does not use single-byte (C1) SS2 and SS3 */
