diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/usearch.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/usearch.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/usearch.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/usearch.cpp
@@ -496,11 +496,11 @@
     }
     cesize --; // down to the last index
     for (count = 0; count < cesize; count ++) {
         // number of ces from right of array to the count
         int temp = defaultforward - count - 1;
-        shift[hashFromCE32(cetable[count])] = temp > 1 ? temp : 1;
+        shift[hashFromCE32(cetable[count])] = temp > 1 ? static_cast<int16_t>(temp) : 1;
     }
     shift[hashFromCE32(cetable[cesize])] = 1;
     // for ignorables we just shift by one. see test examples.
     shift[hashFromCE32(0)] = 1;
 
@@ -3542,13 +3542,11 @@
 
     // Caller is requesting a new, never accessed before, CE.
     //   Verify that it is the next one in sequence, which is all
     //   that is allowed.
     if (index != limitIx) {
-        U_ASSERT(FALSE);
-
-        return NULL;
+        UPRV_UNREACHABLE;
     }
 
     // Manage the circular CE buffer indexing
     limitIx++;
 
@@ -3581,13 +3579,11 @@
 
     // Caller is requesting a new, never accessed before, CE.
     //   Verify that it is the next one in sequence, which is all
     //   that is allowed.
     if (index != limitIx) {
-        U_ASSERT(FALSE);
-
-        return NULL;
+        UPRV_UNREACHABLE;
     }
 
     // Manage the circular CE buffer indexing
     limitIx++;
 
