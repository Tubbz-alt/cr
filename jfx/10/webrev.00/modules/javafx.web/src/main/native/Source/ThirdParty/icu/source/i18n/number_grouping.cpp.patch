diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_grouping.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_grouping.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_grouping.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_grouping.cpp
@@ -32,11 +32,11 @@
     return result[0] - u'0';
 }
 
 }
 
-Grouper Grouper::forStrategy(UGroupingStrategy grouping) {
+Grouper Grouper::forStrategy(UNumberGroupingStrategy grouping) {
     switch (grouping) {
     case UNUM_GROUPING_OFF:
         return {-1, -1, -2, grouping};
     case UNUM_GROUPING_AUTO:
         return {-2, -2, -2, grouping};
@@ -45,12 +45,11 @@
     case UNUM_GROUPING_ON_ALIGNED:
         return {-4, -4, 1, grouping};
     case UNUM_GROUPING_THOUSANDS:
         return {3, 3, 1, grouping};
     default:
-        U_ASSERT(FALSE);
-        return {}; // return a value: silence compiler warning
+        UPRV_UNREACHABLE;
     }
 }
 
 Grouper Grouper::forProperties(const DecimalFormatProperties& properties) {
     if (!properties.groupingUsed) {
@@ -78,11 +77,11 @@
         grouping2 = grouping1;
     }
     if (fMinGrouping == -2) {
         fMinGrouping = getMinGroupingForLocale(locale);
     } else if (fMinGrouping == -3) {
-        fMinGrouping = uprv_max(2, getMinGroupingForLocale(locale));
+        fMinGrouping = static_cast<int16_t>(uprv_max(2, getMinGroupingForLocale(locale)));
     } else {
         // leave fMinGrouping alone
     }
     fGrouping1 = grouping1;
     fGrouping2 = grouping2;
