diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ubidiln.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ubidiln.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ubidiln.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ubidiln.cpp
@@ -515,11 +515,11 @@
     }
 }
 
 /* compute the runs array --------------------------------------------------- */
 
-static int32_t getRunFromLogicalIndex(UBiDi *pBiDi, int32_t logicalIndex, UErrorCode *pErrorCode) {
+static int32_t getRunFromLogicalIndex(UBiDi *pBiDi, int32_t logicalIndex) {
     Run *runs=pBiDi->runs;
     int32_t runCount=pBiDi->runCount, visualStart=0, i, length, logicalStart;
 
     for(i=0; i<runCount; i++) {
         length=runs[i].visualLimit-visualStart;
@@ -528,13 +528,11 @@
             return i;
         }
         visualStart+=length;
     }
     /* we should never get here */
-    U_ASSERT(FALSE);
-    *pErrorCode = U_INVALID_STATE_ERROR;
-    return 0;
+    UPRV_UNREACHABLE;
 }
 
 /*
  * Compute the runs array from the levels array.
  * After ubidi_getRuns() returns TRUE, runCount is guaranteed to be >0
@@ -545,11 +543,11 @@
  * sum of appropriate LRM/RLM_BEFORE/AFTER flags.
  * If option UBIDI_OPTION_REMOVE_CONTROLS is set, insertRemove will contain the
  * negative number of BiDi control characters within this run.
  */
 U_CFUNC UBool
-ubidi_getRuns(UBiDi *pBiDi, UErrorCode *pErrorCode) {
+ubidi_getRuns(UBiDi *pBiDi, UErrorCode*) {
     /*
      * This method returns immediately if the runs are already set. This
      * includes the case of length==0 (handled in setPara)..
      */
     if (pBiDi->runCount>=0) {
@@ -686,22 +684,22 @@
     if(pBiDi->insertPoints.size>0) {
         Point *point, *start=pBiDi->insertPoints.points,
                       *limit=start+pBiDi->insertPoints.size;
         int32_t runIndex;
         for(point=start; point<limit; point++) {
-            runIndex=getRunFromLogicalIndex(pBiDi, point->pos, pErrorCode);
+            runIndex=getRunFromLogicalIndex(pBiDi, point->pos);
             pBiDi->runs[runIndex].insertRemove|=point->flag;
         }
     }
 
     /* handle remove BiDi control characters */
     if(pBiDi->controlCount>0) {
         int32_t runIndex;
         const UChar *start=pBiDi->text, *limit=start+pBiDi->length, *pu;
         for(pu=start; pu<limit; pu++) {
             if(IS_BIDI_CONTROL_CHAR(*pu)) {
-                runIndex=getRunFromLogicalIndex(pBiDi, (int32_t)(pu-start), pErrorCode);
+                runIndex=getRunFromLogicalIndex(pBiDi, (int32_t)(pu-start));
                 pBiDi->runs[runIndex].insertRemove--;
             }
         }
     }
 
