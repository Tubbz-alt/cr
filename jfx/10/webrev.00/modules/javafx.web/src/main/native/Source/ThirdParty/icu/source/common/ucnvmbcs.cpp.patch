diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnvmbcs.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnvmbcs.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnvmbcs.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ucnvmbcs.cpp
@@ -1381,19 +1381,19 @@
     name=(char *)newResults+sizeofFromUBytes;
     uprv_strcpy(name, sharedData->staticData->name);
     uprv_strcat(name, UCNV_SWAP_LFNL_OPTION_STRING);
 
     /* set the pointers */
-    umtx_lock(NULL);
+    icu::umtx_lock(NULL);
     if(mbcsTable->swapLFNLStateTable==NULL) {
         mbcsTable->swapLFNLStateTable=newStateTable;
         mbcsTable->swapLFNLFromUnicodeBytes=(uint8_t *)newResults;
         mbcsTable->swapLFNLName=name;
 
         newStateTable=NULL;
     }
-    umtx_unlock(NULL);
+    icu::umtx_unlock(NULL);
 
     /* release the allocated memory if another thread beat us to it */
     if(newStateTable!=NULL) {
         uprv_free(newStateTable);
     }
@@ -1917,13 +1917,13 @@
 
     if((pArgs->options&UCNV_OPTION_SWAP_LFNL)!=0) {
         /* do this because double-checked locking is broken */
         UBool isCached;
 
-        umtx_lock(NULL);
+        icu::umtx_lock(NULL);
         isCached=mbcsTable->swapLFNLStateTable!=NULL;
-        umtx_unlock(NULL);
+        icu::umtx_unlock(NULL);
 
         if(!isCached) {
             if(!_EBCDICSwapLFNL(cnv->sharedData, pErrorCode)) {
                 if(U_FAILURE(*pErrorCode)) {
                     return; /* something went wrong */
@@ -4162,12 +4162,12 @@
     prevSourceIndex=-1;
     sourceIndex= c==0 ? 0 : -1;
     nextSourceIndex=0;
 
     /* Get the SI/SO character for the converter */
-    siLength = getSISOBytes(SI, cnv->options, siBytes);
-    soLength = getSISOBytes(SO, cnv->options, soBytes);
+    siLength = static_cast<uint8_t>(getSISOBytes(SI, cnv->options, siBytes));
+    soLength = static_cast<uint8_t>(getSISOBytes(SO, cnv->options, soBytes));
 
     /* conversion loop */
     /*
      * This is another piece of ugly code:
      * A goto into the loop if the converter state contains a first surrogate
