diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/quantityformatter.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/quantityformatter.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/quantityformatter.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/quantityformatter.cpp
@@ -23,10 +23,12 @@
 #include "unicode/fmtable.h"
 #include "unicode/fieldpos.h"
 #include "standardplural.h"
 #include "uassert.h"
 #include "number_decimalquantity.h"
+#include "number_utypes.h"
+#include "number_stringbuilder.h"
 
 U_NAMESPACE_BEGIN
 
 QuantityFormatter::QuantityFormatter() {
     for (int32_t i = 0; i < UPRV_LENGTHOF(formatters); ++i) {
@@ -172,10 +174,43 @@
         fmt.format(number, formattedNumber, pos, status);
     }
     return StandardPlural::orOtherFromString(pluralKeyword);
 }
 
+void QuantityFormatter::formatAndSelect(
+        double quantity,
+        const NumberFormat& fmt,
+        const PluralRules& rules,
+        number::impl::NumberStringBuilder& output,
+        StandardPlural::Form& pluralForm,
+        UErrorCode& status) {
+    UnicodeString pluralKeyword;
+    const DecimalFormat* df = dynamic_cast<const DecimalFormat*>(&fmt);
+    if (df != nullptr) {
+        number::impl::UFormattedNumberData fn;
+        fn.quantity.setToDouble(quantity);
+        df->toNumberFormatter().formatImpl(&fn, status);
+        if (U_FAILURE(status)) {
+            return;
+        }
+        output = std::move(fn.getStringRef());
+        pluralKeyword = rules.select(fn.quantity);
+    } else {
+        UnicodeString result;
+        fmt.format(quantity, result, status);
+        if (U_FAILURE(status)) {
+            return;
+        }
+        output.append(result, UNUM_FIELD_COUNT, status);
+        if (U_FAILURE(status)) {
+            return;
+        }
+        pluralKeyword = rules.select(quantity);
+    }
+    pluralForm = StandardPlural::orOtherFromString(pluralKeyword);
+}
+
 UnicodeString &QuantityFormatter::format(
             const SimpleFormatter &pattern,
             const UnicodeString &value,
             UnicodeString &appendTo,
             FieldPosition &pos,
