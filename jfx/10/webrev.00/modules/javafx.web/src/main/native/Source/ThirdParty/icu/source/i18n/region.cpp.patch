diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/region.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/region.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/region.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/region.cpp
@@ -166,33 +166,41 @@
     while ( ures_hasNext(worldContainment.getAlias()) ) {
         UnicodeString *continentName = new UnicodeString(ures_getNextUnicodeString(worldContainment.getAlias(),NULL,&status));
         continents->addElement(continentName,status);
     }
 
+    UResourceBundle *groupingBundle = nullptr;
     while ( ures_hasNext(groupingContainment.getAlias()) ) {
-        UnicodeString *groupingName = new UnicodeString(ures_getNextUnicodeString(groupingContainment.getAlias(),NULL,&status));
-        groupings->addElement(groupingName,status);
+        groupingBundle = ures_getNextResource(groupingContainment.getAlias(), groupingBundle, &status);
+        if (U_FAILURE(status)) {
+            break;
+        }
+        UnicodeString *groupingName = new UnicodeString(ures_getKey(groupingBundle), -1, US_INV);
+        if (groupingName) {
+            groupings->addElement(groupingName,status);
+        }
     }
+    ures_close(groupingBundle);
 
     for ( int32_t i = 0 ; i < allRegions->size() ; i++ ) {
         LocalPointer<Region> r(new Region(), status);
         if ( U_FAILURE(status) ) {
            return;
         }
         UnicodeString *regionName = (UnicodeString *)allRegions->elementAt(i);
         r->idStr = *regionName;
 
         r->idStr.extract(0,r->idStr.length(),r->id,sizeof(r->id),US_INV);
-        r->type = URGN_TERRITORY; // Only temporary - figure out the real type later once the aliases are known.
+        r->fType = URGN_TERRITORY; // Only temporary - figure out the real type later once the aliases are known.
 
         Formattable result;
         UErrorCode ps = U_ZERO_ERROR;
         df->parse(r->idStr,result,ps);
         if ( U_SUCCESS(ps) ) {
             r->code = result.getLong(); // Convert string to number
             uhash_iput(newNumericCodeMap.getAlias(),r->code,(void *)(r.getAlias()),&status);
-            r->type = URGN_SUBCONTINENT;
+            r->fType = URGN_SUBCONTINENT;
         } else {
             r->code = -1;
         }
         void* idStrAlias = (void*)&(r->idStr); // about to orphan 'r'. Save this off.
         uhash_put(newRegionIDMap.getAlias(),idStrAlias,(void *)(r.orphan()),&status); // regionIDMap takes ownership
@@ -229,13 +237,13 @@
                     aliasFromRegion->code = result.getLong(); // Convert string to number
                     uhash_iput(newNumericCodeMap.getAlias(),aliasFromRegion->code,(void *)aliasFromRegion,&status);
                 } else {
                     aliasFromRegion->code = -1;
                 }
-                aliasFromRegion->type = URGN_DEPRECATED;
+                aliasFromRegion->fType = URGN_DEPRECATED;
             } else {
-                aliasFromRegion->type = URGN_DEPRECATED;
+                aliasFromRegion->fType = URGN_DEPRECATED;
             }
 
             {
                 LocalPointer<UVector> newPreferredValues(new UVector(uprv_deleteUObject, uhash_compareUnicodeString, status), status);
                 aliasFromRegion->preferredValues = newPreferredValues.orphan();
@@ -288,40 +296,40 @@
     // Now fill in the special cases for WORLD, UNKNOWN, CONTINENTS, and GROUPINGS
     Region *r;
     UnicodeString WORLD_ID_STRING(WORLD_ID);
     r = (Region *) uhash_get(newRegionIDMap.getAlias(),(void *)&WORLD_ID_STRING);
     if ( r ) {
-        r->type = URGN_WORLD;
+        r->fType = URGN_WORLD;
     }
 
     UnicodeString UNKNOWN_REGION_ID_STRING(UNKNOWN_REGION_ID);
     r = (Region *) uhash_get(newRegionIDMap.getAlias(),(void *)&UNKNOWN_REGION_ID_STRING);
     if ( r ) {
-        r->type = URGN_UNKNOWN;
+        r->fType = URGN_UNKNOWN;
     }
 
     for ( int32_t i = 0 ; i < continents->size() ; i++ ) {
         r = (Region *) uhash_get(newRegionIDMap.getAlias(),(void *)continents->elementAt(i));
         if ( r ) {
-            r->type = URGN_CONTINENT;
+            r->fType = URGN_CONTINENT;
         }
     }
 
     for ( int32_t i = 0 ; i < groupings->size() ; i++ ) {
         r = (Region *) uhash_get(newRegionIDMap.getAlias(),(void *)groupings->elementAt(i));
         if ( r ) {
-            r->type = URGN_GROUPING;
+            r->fType = URGN_GROUPING;
         }
     }
 
     // Special case: The region code "QO" (Outlying Oceania) is a subcontinent code added by CLDR
     // even though it looks like a territory code.  Need to handle it here.
 
     UnicodeString OUTLYING_OCEANIA_REGION_ID_STRING(OUTLYING_OCEANIA_REGION_ID);
     r = (Region *) uhash_get(newRegionIDMap.getAlias(),(void *)&OUTLYING_OCEANIA_REGION_ID_STRING);
     if ( r ) {
-        r->type = URGN_SUBCONTINENT;
+        r->fType = URGN_SUBCONTINENT;
     }
 
     // Load territory containment info from the supplemental data.
     while ( ures_hasNext(territoryContainment.getAlias()) ) {
         LocalUResourceBundlePointer mapping(ures_getNextResource(territoryContainment.getAlias(),NULL,&status));
@@ -354,30 +362,30 @@
                 parentRegion->containedRegions->addElement((void *)childStr.orphan(),status);
 
                 // Set the parent region to be the containing region of the child.
                 // Regions of type GROUPING can't be set as the parent, since another region
                 // such as a SUBCONTINENT, CONTINENT, or WORLD must always be the parent.
-                if ( parentRegion->type != URGN_GROUPING) {
+                if ( parentRegion->fType != URGN_GROUPING) {
                     childRegion->containingRegion = parentRegion;
                 }
             }
         }
     }
 
     // Create the availableRegions lists
     int32_t pos = UHASH_FIRST;
     while ( const UHashElement* element = uhash_nextElement(newRegionIDMap.getAlias(),&pos)) {
         Region *ar = (Region *)element->value.pointer;
-        if ( availableRegions[ar->type] == NULL ) {
+        if ( availableRegions[ar->fType] == NULL ) {
             LocalPointer<UVector> newAr(new UVector(uprv_deleteUObject, uhash_compareUnicodeString, status), status);
-            availableRegions[ar->type] = newAr.orphan();
+            availableRegions[ar->fType] = newAr.orphan();
         }
         LocalPointer<UnicodeString> arString(new UnicodeString(ar->idStr), status);
         if( U_FAILURE(status) ) {
             return;  // error out
         }
-        availableRegions[ar->type]->addElement((void *)arString.orphan(),status);
+        availableRegions[ar->fType]->addElement((void *)arString.orphan(),status);
     }
 
     ucln_i18n_registerCleanup(UCLN_I18N_REGION, region_cleanup);
     // copy hashtables
     numericCodeMap = newNumericCodeMap.orphan();
@@ -414,11 +422,11 @@
     gRegionDataInitOnce.reset();
 }
 
 Region::Region ()
         : code(-1),
-          type(URGN_UNKNOWN),
+          fType(URGN_UNKNOWN),
           containingRegion(NULL),
           containedRegions(NULL),
           preferredValues(NULL) {
     id[0] = 0;
 }
@@ -479,11 +487,11 @@
     if ( !r ) { // Unknown region code
         status = U_ILLEGAL_ARGUMENT_ERROR;
         return NULL;
     }
 
-    if ( r->type == URGN_DEPRECATED && r->preferredValues->size() == 1) {
+    if ( r->fType == URGN_DEPRECATED && r->preferredValues->size() == 1) {
         StringEnumeration *pv = r->getPreferredValues(status);
         pv->reset(status);
         const UnicodeString *ustr = pv->snext(status);
         r = (Region *)uhash_get(regionIDMap,(void *)ustr);
         delete pv;
@@ -527,11 +535,11 @@
     if ( !r ) {
         status = U_ILLEGAL_ARGUMENT_ERROR;
         return NULL;
     }
 
-    if ( r->type == URGN_DEPRECATED && r->preferredValues->size() == 1) {
+    if ( r->fType == URGN_DEPRECATED && r->preferredValues->size() == 1) {
         StringEnumeration *pv = r->getPreferredValues(status);
         pv->reset(status);
         const UnicodeString *ustr = pv->snext(status);
         r = (Region *)uhash_get(regionIDMap,(void *)ustr);
         delete pv;
@@ -578,11 +586,11 @@
     umtx_initOnce(gRegionDataInitOnce, &loadRegionData, status);
     if ( containingRegion == NULL ) {
         return NULL;
     }
 
-    return ( containingRegion->type == type )? containingRegion: containingRegion->getContainingRegion(type);
+    return ( containingRegion->fType == type)? containingRegion: containingRegion->getContainingRegion(type);
 }
 
 /**
  * Return an enumeration over the IDs of all the regions that are immediate children of this region in the
  * region hierarchy. These returned regions could be either macro regions, territories, or a mixture of the two,
@@ -616,13 +624,13 @@
     UVector *result = new UVector(NULL, uhash_compareChars, status);
 
     StringEnumeration *cr = getContainedRegions(status);
 
     for ( int32_t i = 0 ; i < cr->count(status) ; i++ ) {
-        const char *id = cr->next(NULL,status);
-        const Region *r = Region::getInstance(id,status);
-        if ( r->getType() == type ) {
+        const char *regionId = cr->next(NULL,status);
+        const Region *r = Region::getInstance(regionId,status);
+        if ( r->getType() == type) {
             result->addElement((void *)&r->idStr,status);
         } else {
             StringEnumeration *children = r->getContainedRegions(type, status);
             for ( int32_t j = 0 ; j < children->count(status) ; j++ ) {
                 const char *id2 = children->next(NULL,status);
@@ -670,11 +678,11 @@
  * "SU" (Soviet Union) would return a list of the regions containing "RU" (Russia), "AM" (Armenia), "AZ" (Azerbaijan), etc...
  */
 StringEnumeration*
 Region::getPreferredValues(UErrorCode &status) const {
     umtx_initOnce(gRegionDataInitOnce, &loadRegionData, status); // returns immediately if U_FAILURE(status)
-    if (U_FAILURE(status) ||  type != URGN_DEPRECATED) {
+    if (U_FAILURE(status) || fType != URGN_DEPRECATED) {
         return NULL;
     }
     return new RegionNameEnumeration(preferredValues,status);
 }
 
@@ -695,11 +703,11 @@
 /**
  * Returns the region type of this region.
  */
 URegionType
 Region::getType() const {
-    return type;
+    return fType;
 }
 
 RegionNameEnumeration::RegionNameEnumeration(UVector *fNameList, UErrorCode& status) {
     pos=0;
     if (fNameList && U_SUCCESS(status)) {
