diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ustrcase.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ustrcase.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ustrcase.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/ustrcase.cpp
@@ -216,11 +216,11 @@
     int32_t destIndex = 0;
     int32_t prev = srcStart;
     int32_t srcIndex = srcStart;
     for (;;) {
         // fast path for simple cases
-        UChar lead;
+        UChar lead = 0;
         while (srcIndex < srcLimit) {
             lead = src[srcIndex];
             int32_t delta;
             if (lead < LatinCase::LONG_S) {
                 int8_t d = latinToLower[lead];
@@ -236,11 +236,11 @@
                 ++srcIndex;
                 if (!UCASE_IS_UPPER_OR_TITLE(props) || (delta = UCASE_GET_DELTA(props)) == 0) {
                     continue;
                 }
             }
-            lead += delta;
+            lead += static_cast<UChar>(delta);
             destIndex = appendUnchanged(dest, destIndex, destCapacity,
                                         src + prev, srcIndex - 1 - prev, options, edits);
             if (destIndex >= 0) {
                 destIndex = appendUChar(dest, destIndex, destCapacity, lead);
                 if (edits != nullptr) {
@@ -331,11 +331,11 @@
                 ++srcIndex;
                 if (UCASE_GET_TYPE(props) != UCASE_LOWER || (delta = UCASE_GET_DELTA(props)) == 0) {
                     continue;
                 }
             }
-            lead += delta;
+            lead += static_cast<UChar>(delta);
             destIndex = appendUnchanged(dest, destIndex, destCapacity,
                                         src + prev, srcIndex - 1 - prev, options, edits);
             if (destIndex >= 0) {
                 destIndex = appendUChar(dest, destIndex, destCapacity, lead);
                 if (edits != nullptr) {
@@ -1745,12 +1745,12 @@
         cmpRes=c1-c2;
         break;
     }
 
     if(matchLen1) {
-        *matchLen1=m1-org1;
-        *matchLen2=m2-org2;
+        *matchLen1=static_cast<int32_t>(m1-org1);
+        *matchLen2=static_cast<int32_t>(m2-org2);
     }
     return cmpRes;
 }
 
 /* internal function */
