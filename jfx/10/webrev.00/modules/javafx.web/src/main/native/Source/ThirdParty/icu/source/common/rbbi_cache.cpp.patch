diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/rbbi_cache.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/rbbi_cache.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/rbbi_cache.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/rbbi_cache.cpp
@@ -72,13 +72,11 @@
             *result = r;
             *statusIndex = fOtherRuleStatusIndex;
             return TRUE;
         }
     }
-    U_ASSERT(FALSE);
-    fPositionInCache = -1;
-    return FALSE;
+    UPRV_UNREACHABLE;
 }
 
 
 UBool RuleBasedBreakIterator::DictionaryCache::preceding(int32_t fromPos, int32_t *result, int32_t *statusIndex) {
     if (fromPos <= fStart || fromPos > fLimit) {
@@ -114,13 +112,11 @@
             *result = r;
             *statusIndex = ( r == fStart) ? fFirstRuleStatusIndex : fOtherRuleStatusIndex;
             return TRUE;
         }
     }
-    U_ASSERT(FALSE);
-    fPositionInCache = -1;
-    return FALSE;
+    UPRV_UNREACHABLE;
 }
 
 void RuleBasedBreakIterator::DictionaryCache::populateDictionary(int32_t startPos, int32_t endPos,
                                        int32_t firstRuleStatus, int32_t otherRuleStatus) {
     if ((endPos - startPos) <= 1) {
@@ -386,12 +382,11 @@
     if (fBoundaries[fEndBufIdx] < position) {
         // The last position in the cache precedes the requested position.
         // Add following position(s) to the cache.
         while (fBoundaries[fEndBufIdx] < position) {
             if (!populateFollowing()) {
-                U_ASSERT(false);
-                return false;
+                UPRV_UNREACHABLE;
             }
         }
         fBufIdx = fEndBufIdx;                      // Set iterator position to the end of the buffer.
         fTextIdx = fBoundaries[fBufIdx];           // Required because populateFollowing may add extra boundaries.
         while (fTextIdx > position) {              // Move backwards to a position at or preceding the requested pos.
@@ -601,11 +596,11 @@
     int32_t nextIdx = modChunkSize(fEndBufIdx + 1);
     if (nextIdx == fStartBufIdx) {
         fStartBufIdx = modChunkSize(fStartBufIdx + 6);    // TODO: experiment. Probably revert to 1.
     }
     fBoundaries[nextIdx] = position;
-    fStatuses[nextIdx] = ruleStatusIdx;
+    fStatuses[nextIdx] = static_cast<uint16_t>(ruleStatusIdx);
     fEndBufIdx = nextIdx;
     if (update == UpdateCachePosition) {
         // Set current position to the newly added boundary.
         fBufIdx = nextIdx;
         fTextIdx = position;
@@ -629,11 +624,11 @@
             return false;
         }
         fEndBufIdx = modChunkSize(fEndBufIdx - 1);
     }
     fBoundaries[nextIdx] = position;
-    fStatuses[nextIdx] = ruleStatusIdx;
+    fStatuses[nextIdx] = static_cast<uint16_t>(ruleStatusIdx);
     fStartBufIdx = nextIdx;
     if (update == UpdateCachePosition) {
         fBufIdx = nextIdx;
         fTextIdx = position;
     }
