diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/uobject.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/uobject.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/uobject.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/uobject.h
@@ -18,36 +18,36 @@
 
 #ifndef __UOBJECT_H__
 #define __UOBJECT_H__
 
 #include "unicode/utypes.h"
+#include "unicode/platform.h"
 
 /**
  * \file
  * \brief C++ API: Common ICU base class UObject.
  */
 
 /**
- * @{
  * \def U_NO_THROW
- *         Define this to define the throw() specification so
+ *         Since ICU 64, use U_NOEXCEPT instead.
+ *
+ *         Previously, define this to define the throw() specification so
  *                 certain functions do not throw any exceptions
  *
  *         UMemory operator new methods should have the throw() specification
  *         appended to them, so that the compiler adds the additional NULL check
  *         before calling constructors. Without, if <code>operator new</code> returns NULL the
  *         constructor is still called, and if the constructor references member
  *         data, (which it typically does), the result is a segmentation violation.
  *
- * @stable ICU 4.2
+ * @stable ICU 4.2. Since ICU 64, Use U_NOEXCEPT instead. See ICU-20422.
  */
 #ifndef U_NO_THROW
 #define U_NO_THROW throw()
 #endif
 
-/** @} */
-
 /*===========================================================================*/
 /* UClassID-based RTTI */
 /*===========================================================================*/
 
 /**
@@ -126,68 +126,68 @@
      * (uprv_malloc(), uprv_free(), uprv_realloc());
      * they or something else could be used here to implement C++ new/delete
      * for ICU4C C++ classes
      * @stable ICU 2.4
      */
-    static void * U_EXPORT2 operator new(size_t size) U_NO_THROW;
+    static void * U_EXPORT2 operator new(size_t size) U_NOEXCEPT;
 
     /**
      * Override for ICU4C C++ memory management.
      * See new().
      * @stable ICU 2.4
      */
-    static void * U_EXPORT2 operator new[](size_t size) U_NO_THROW;
+    static void * U_EXPORT2 operator new[](size_t size) U_NOEXCEPT;
 
     /**
      * Override for ICU4C C++ memory management.
      * simple, non-class types are allocated using the macros in common/cmemory.h
      * (uprv_malloc(), uprv_free(), uprv_realloc());
      * they or something else could be used here to implement C++ new/delete
      * for ICU4C C++ classes
      * @stable ICU 2.4
      */
-    static void U_EXPORT2 operator delete(void *p) U_NO_THROW;
+    static void U_EXPORT2 operator delete(void *p) U_NOEXCEPT;
 
     /**
      * Override for ICU4C C++ memory management.
      * See delete().
      * @stable ICU 2.4
      */
-    static void U_EXPORT2 operator delete[](void *p) U_NO_THROW;
+    static void U_EXPORT2 operator delete[](void *p) U_NOEXCEPT;
 
 #if U_HAVE_PLACEMENT_NEW
     /**
      * Override for ICU4C C++ memory management for STL.
      * See new().
      * @stable ICU 2.6
      */
-    static inline void * U_EXPORT2 operator new(size_t, void *ptr) U_NO_THROW { return ptr; }
+    static inline void * U_EXPORT2 operator new(size_t, void *ptr) U_NOEXCEPT { return ptr; }
 
     /**
      * Override for ICU4C C++ memory management for STL.
      * See delete().
      * @stable ICU 2.6
      */
-    static inline void U_EXPORT2 operator delete(void *, void *) U_NO_THROW {}
+    static inline void U_EXPORT2 operator delete(void *, void *) U_NOEXCEPT {}
 #endif /* U_HAVE_PLACEMENT_NEW */
 #if U_HAVE_DEBUG_LOCATION_NEW
     /**
       * This method overrides the MFC debug version of the operator new
       *
       * @param size   The requested memory size
       * @param file   The file where the allocation was requested
       * @param line   The line where the allocation was requested
       */
-    static void * U_EXPORT2 operator new(size_t size, const char* file, int line) U_NO_THROW;
+    static void * U_EXPORT2 operator new(size_t size, const char* file, int line) U_NOEXCEPT;
     /**
       * This method provides a matching delete for the MFC debug new
       *
       * @param p      The pointer to the allocated memory
       * @param file   The file where the allocation was requested
       * @param line   The line where the allocation was requested
       */
-    static void U_EXPORT2 operator delete(void* p, const char* file, int line) U_NO_THROW;
+    static void U_EXPORT2 operator delete(void* p, const char* file, int line) U_NOEXCEPT;
 #endif /* U_HAVE_DEBUG_LOCATION_NEW */
 #endif /* U_OVERRIDE_CXX_ALLOCATION */
 
     /*
      * Assignment operator not declared. The compiler will provide one
