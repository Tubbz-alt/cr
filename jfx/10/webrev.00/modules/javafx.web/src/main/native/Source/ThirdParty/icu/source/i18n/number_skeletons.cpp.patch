diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_skeletons.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_skeletons.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_skeletons.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_skeletons.cpp
@@ -157,12 +157,11 @@
         case STEM_ENGINEERING:
             return Notation::engineering();
         case STEM_NOTATION_SIMPLE:
             return Notation::simple();
         default:
-            U_ASSERT(false);
-            return Notation::simple(); // return a value: silence compiler warning
+            UPRV_UNREACHABLE;
     }
 }
 
 MeasureUnit stem_to_object::unit(skeleton::StemEnum stem) {
     switch (stem) {
@@ -174,12 +173,11 @@
             return NoUnit::percent(); // NOLINT
         case STEM_PERMILLE:
             // Slicing is okay
             return NoUnit::permille(); // NOLINT
         default:
-            U_ASSERT(false);
-            return {}; // return a value: silence compiler warning
+            UPRV_UNREACHABLE;
     }
 }
 
 Precision stem_to_object::precision(skeleton::StemEnum stem) {
     switch (stem) {
@@ -190,12 +188,11 @@
         case STEM_PRECISION_CURRENCY_STANDARD:
             return Precision::currency(UCURR_USAGE_STANDARD);
         case STEM_PRECISION_CURRENCY_CASH:
             return Precision::currency(UCURR_USAGE_CASH);
         default:
-            U_ASSERT(false);
-            return Precision::integer(); // return a value: silence compiler warning
+            UPRV_UNREACHABLE;
     }
 }
 
 UNumberFormatRoundingMode stem_to_object::roundingMode(skeleton::StemEnum stem) {
     switch (stem) {
@@ -214,16 +211,15 @@
         case STEM_ROUNDING_MODE_HALF_UP:
             return UNUM_ROUND_HALFUP;
         case STEM_ROUNDING_MODE_UNNECESSARY:
             return UNUM_ROUND_UNNECESSARY;
         default:
-            U_ASSERT(false);
-            return UNUM_ROUND_UNNECESSARY;
+            UPRV_UNREACHABLE;
     }
 }
 
-UGroupingStrategy stem_to_object::groupingStrategy(skeleton::StemEnum stem) {
+UNumberGroupingStrategy stem_to_object::groupingStrategy(skeleton::StemEnum stem) {
     switch (stem) {
         case STEM_GROUP_OFF:
             return UNUM_GROUPING_OFF;
         case STEM_GROUP_MIN2:
             return UNUM_GROUPING_MIN2;
@@ -313,15 +309,15 @@
             break;
         case UNUM_ROUND_UNNECESSARY:
             sb.append(u"rounding-mode-unnecessary", -1);
             break;
         default:
-            U_ASSERT(false);
+            UPRV_UNREACHABLE;
     }
 }
 
-void enum_to_stem_string::groupingStrategy(UGroupingStrategy value, UnicodeString& sb) {
+void enum_to_stem_string::groupingStrategy(UNumberGroupingStrategy value, UnicodeString& sb) {
     switch (value) {
         case UNUM_GROUPING_OFF:
             sb.append(u"group-off", -1);
             break;
         case UNUM_GROUPING_MIN2:
@@ -335,11 +331,11 @@
             break;
         case UNUM_GROUPING_THOUSANDS:
             sb.append(u"group-thousands", -1);
             break;
         default:
-            U_ASSERT(false);
+            UPRV_UNREACHABLE;
     }
 }
 
 void enum_to_stem_string::unitWidth(UNumberUnitWidth value, UnicodeString& sb) {
     switch (value) {
@@ -357,11 +353,11 @@
             break;
         case UNUM_UNIT_WIDTH_HIDDEN:
             sb.append(u"unit-width-hidden", -1);
             break;
         default:
-            U_ASSERT(false);
+            UPRV_UNREACHABLE;
     }
 }
 
 void enum_to_stem_string::signDisplay(UNumberSignDisplay value, UnicodeString& sb) {
     switch (value) {
@@ -385,11 +381,11 @@
             break;
         case UNUM_SIGN_ACCOUNTING_EXCEPT_ZERO:
             sb.append(u"sign-accounting-except-zero", -1);
             break;
         default:
-            U_ASSERT(false);
+            UPRV_UNREACHABLE;
     }
 }
 
 void
 enum_to_stem_string::decimalSeparatorDisplay(UNumberDecimalSeparatorDisplay value, UnicodeString& sb) {
@@ -399,30 +395,62 @@
             break;
         case UNUM_DECIMAL_SEPARATOR_ALWAYS:
             sb.append(u"decimal-always", -1);
             break;
         default:
-            U_ASSERT(false);
+            UPRV_UNREACHABLE;
     }
 }
 
 
-UnlocalizedNumberFormatter skeleton::create(const UnicodeString& skeletonString, UErrorCode& status) {
+UnlocalizedNumberFormatter skeleton::create(
+        const UnicodeString& skeletonString, UParseError* perror, UErrorCode& status) {
+
+    // Initialize perror
+    if (perror != nullptr) {
+        perror->line = 0;
+        perror->offset = -1;
+        perror->preContext[0] = 0;
+        perror->postContext[0] = 0;
+    }
+
     umtx_initOnce(gNumberSkeletonsInitOnce, &initNumberSkeletons, status);
-    MacroProps macros = parseSkeleton(skeletonString, status);
-    return NumberFormatter::with().macros(macros);
+    if (U_FAILURE(status)) {
+        return {};
+    }
+
+    int32_t errOffset;
+    MacroProps macros = parseSkeleton(skeletonString, errOffset, status);
+    if (U_SUCCESS(status)) {
+        return NumberFormatter::with().macros(macros);
+    }
+
+    if (perror == nullptr) {
+        return {};
+    }
+
+    // Populate the UParseError with the error location
+    perror->offset = errOffset;
+    int32_t contextStart = uprv_max(0, errOffset - U_PARSE_CONTEXT_LEN + 1);
+    int32_t contextEnd = uprv_min(skeletonString.length(), errOffset + U_PARSE_CONTEXT_LEN - 1);
+    skeletonString.extract(contextStart, errOffset - contextStart, perror->preContext, 0);
+    perror->preContext[errOffset - contextStart] = 0;
+    skeletonString.extract(errOffset, contextEnd - errOffset, perror->postContext, 0);
+    perror->postContext[contextEnd - errOffset] = 0;
+    return {};
 }
 
 UnicodeString skeleton::generate(const MacroProps& macros, UErrorCode& status) {
     umtx_initOnce(gNumberSkeletonsInitOnce, &initNumberSkeletons, status);
     UnicodeString sb;
     GeneratorHelpers::generateSkeleton(macros, sb, status);
     return sb;
 }
 
-MacroProps skeleton::parseSkeleton(const UnicodeString& skeletonString, UErrorCode& status) {
-    if (U_FAILURE(status)) { return MacroProps(); }
+MacroProps skeleton::parseSkeleton(
+        const UnicodeString& skeletonString, int32_t& errOffset, UErrorCode& status) {
+    U_ASSERT(U_SUCCESS(status));
 
     // Add a trailing whitespace to the end of the skeleton string to make code cleaner.
     UnicodeString tempSkeletonString(skeletonString);
     tempSkeletonString.append(u' ');
 
@@ -462,21 +490,25 @@
             } else {
                 // A separator after the first separator of a token. Parse it as an option.
                 stem = parseOption(stem, segment, macros, status);
             }
             segment.resetLength();
-            if (U_FAILURE(status)) { return macros; }
+            if (U_FAILURE(status)) {
+                errOffset = segment.getOffset();
+                return macros;
+            }
 
             // Consume the segment:
             segment.adjustOffset(offset);
             offset = 0;
 
+            errOffset = segment.getOffset();
             return macros;
 
         } else {
             // Two spaces in a row; this is OK.
         }
@@ -484,10 +516,11 @@
         // Does the current stem forbid options?
         if (isOptionSeparator && stem == STATE_NULL) {
             // segment.setLength(U16_LENGTH(cp)); // for error message
             // throw new SkeletonSyntaxException("Unexpected option separator", segment);
             status = U_NUMBER_SKELETON_SYNTAX_ERROR;
+            errOffset = segment.getOffset();
             return macros;
         }
 
         // Does the current stem require an option?
         if (isTokenSeparator && stem != STATE_NULL) {
@@ -500,10 +533,11 @@
                 case STATE_NUMBERING_SYSTEM:
                 case STATE_SCALE:
                     // segment.setLength(U16_LENGTH(cp)); // for error message
                     // throw new SkeletonSyntaxException("Stem requires an option", segment);
                     status = U_NUMBER_SKELETON_SYNTAX_ERROR;
+                    errOffset = segment.getOffset();
                     return macros;
                 default:
                     break;
             }
             stem = STATE_NULL;
@@ -663,12 +697,11 @@
         case STEM_SCALE:
         CHECK_NULL(seen, scale, status);
             return STATE_SCALE;
 
         default:
-            U_ASSERT(false);
-            return STATE_NULL; // return a value: silence compiler warning
+            UPRV_UNREACHABLE;
     }
 }
 
 ParseState skeleton::parseOption(ParseState stem, const StringSegment& segment, MacroProps& macros,
                                  UErrorCode& status) {
@@ -1387,11 +1420,13 @@
         if (impl.fMinSig == -1) {
             blueprint_helpers::generateDigitsStem(1, impl.fMaxSig, sb, status);
         } else {
             blueprint_helpers::generateDigitsStem(impl.fMinSig, -1, sb, status);
         }
-    } else if (macros.precision.fType == Precision::RND_INCREMENT) {
+    } else if (macros.precision.fType == Precision::RND_INCREMENT
+            || macros.precision.fType == Precision::RND_INCREMENT_ONE
+            || macros.precision.fType == Precision::RND_INCREMENT_FIVE) {
         const Precision::IncrementSettings& impl = macros.precision.fUnion.increment;
         sb.append(u"precision-increment/", -1);
         blueprint_helpers::generateIncrementOption(
                 impl.fIncrement,
                 impl.fMinFrac - impl.fMaxFrac,
