diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/alphaindex.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/alphaindex.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/alphaindex.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/alphaindex.h
@@ -264,10 +264,12 @@
         /**
          * Finds the index bucket for the given name and returns the number of that bucket.
          * Use getBucket() to get the bucket's properties.
          *
          * @param name the string to be sorted into an index bucket
+         * @param errorCode Error code, will be set with the reason if the
+         *                  operation fails.
          * @return the bucket number for the name
          * @stable ICU 51
          */
         int32_t getBucketIndex(const UnicodeString &name, UErrorCode &errorCode) const;
 
@@ -375,13 +377,14 @@
      */
     virtual const RuleBasedCollator &getCollator() const;
 
 
    /**
-     * Get the default label used for abbreviated buckets <i>between</i> other index characters.
-     * For example, consider the labels when Latin and Greek are used:
-     *     X Y Z ... &#x0391; &#x0392; &#x0393;.
+     * Get the default label used for abbreviated buckets *between* other index characters.
+     * For example, consider the labels when Latin (X Y Z) and Greek (Α Β Γ) are used:
+     *
+     *     X Y Z ... Α Β Γ.
      *
      * @return inflow label
      * @stable ICU 4.8
      */
     virtual const UnicodeString &getInflowLabel() const;
@@ -646,11 +649,11 @@
      AlphabeticIndex(const AlphabeticIndex &other);
 
      /**
       *   No assignment.
       */
-     AlphabeticIndex &operator =(const AlphabeticIndex & /*other*/) { return *this;};
+     AlphabeticIndex &operator =(const AlphabeticIndex & /*other*/) { return *this;}
 
     /**
      * No Equality operators.
      * @internal
      */
@@ -698,18 +701,20 @@
 
 #ifndef U_HIDE_INTERNAL_API
     /**
      * A (name, data) pair, to be sorted by name into one of the index buckets.
      * The user data is not used by the index implementation.
+     * \cond
      * @internal
      */
     struct Record: public UMemory {
         const UnicodeString  name_;
         const void           *data_;
+    /** \endcond */
 #endif  /* U_HIDE_INTERNAL_API */
 
 private:
 
     /**
