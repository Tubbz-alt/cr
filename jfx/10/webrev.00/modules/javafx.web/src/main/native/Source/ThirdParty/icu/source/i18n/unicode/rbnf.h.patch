diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/rbnf.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/rbnf.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/rbnf.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/unicode/rbnf.h
@@ -311,11 +311,10 @@
  *   <tr>
  *     <td>NaN:</td>
  *     <td>The rule for an IEEE 754 NaN (not a number).</td>
  *   </tr>
  *   <tr>
- *   <tr>
  *     <td><em>nothing</em></td>
  *     <td>If the rule's rule descriptor is left out, the base value is one plus the
  *     preceding rule's base value (or zero if this is the first rule in the list) in a normal
  *     rule set.&nbsp; In a fraction rule set, the base value is the same as the preceding rule's
  *     base value.</td>
@@ -1011,18 +1010,18 @@
   virtual void setContext(UDisplayContext value, UErrorCode& status);
 
     /**
      * Get the rounding mode.
      * @return A rounding mode
-     * @draft ICU 60
+     * @stable ICU 60
      */
     virtual ERoundingMode getRoundingMode(void) const;
 
     /**
      * Set the rounding mode.
      * @param roundingMode A rounding mode
-     * @draft ICU 60
+     * @stable ICU 60
      */
     virtual void setRoundingMode(ERoundingMode roundingMode);
 
 public:
     /**
@@ -1093,20 +1092,20 @@
     UnicodeString& adjustForCapitalizationContext(int32_t startPos, UnicodeString& currentResult, UErrorCode& status) const;
     UnicodeString& format(int64_t number, NFRuleSet *ruleSet, UnicodeString& toAppendTo, UErrorCode& status) const;
     void format(double number, NFRuleSet& rs, UnicodeString& toAppendTo, UErrorCode& status) const;
 
 private:
-    NFRuleSet **ruleSets;
+    NFRuleSet **fRuleSets;
     UnicodeString* ruleSetDescriptions;
     int32_t numRuleSets;
     NFRuleSet *defaultRuleSet;
     Locale locale;
     RuleBasedCollator* collator;
     DecimalFormatSymbols* decimalFormatSymbols;
     NFRule *defaultInfinityRule;
     NFRule *defaultNaNRule;
-    ERoundingMode roundingMode;
+    ERoundingMode fRoundingMode;
     UBool lenient;
     UnicodeString* lenientParseRules;
     LocalizationInfo* localizations;
     UnicodeString originalDescription;
     UBool capitalizationInfoSet;
