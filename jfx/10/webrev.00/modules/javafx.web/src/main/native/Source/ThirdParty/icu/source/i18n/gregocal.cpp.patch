diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/gregocal.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/gregocal.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/gregocal.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/gregocal.cpp
@@ -539,12 +539,12 @@
     if (month < 0 || month > 11) {
         eyear += ClockMath::floorDivide(month, 12, month);
     }
 
     UBool isLeap = eyear%4 == 0;
-    int32_t y = eyear-1;
-    int32_t julianDay = 365*y + ClockMath::floorDivide(y, 4) + (kJan1_1JulianDay - 3);
+    int64_t y = (int64_t)eyear-1;
+    int64_t julianDay = 365*y + ClockMath::floorDivide(y, (int64_t)4) + (kJan1_1JulianDay - 3);
 
     nonConstThis->fIsGregorian = (eyear >= fGregorianCutoverYear);
 #if defined (U_DEBUG_CAL)
     fprintf(stderr, "%s:%d: (hcms%d/%d) fIsGregorian %s, fInvertGregorian %s\n",
         __FILE__, __LINE__, eyear,month, fIsGregorian?"T":"F", fInvertGregorian?"T":"F");
@@ -570,11 +570,11 @@
 
     if (month != 0) {
         julianDay += isLeap?kLeapNumDays[month]:kNumDays[month];
     }
 
-    return julianDay;
+    return static_cast<int32_t>(julianDay);
 }
 
 int32_t GregorianCalendar::handleGetMonthLength(int32_t extendedYear, int32_t month)  const
 {
     // If the month is out of range, adjust it into range, and
