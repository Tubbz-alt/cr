diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/rbbi.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/rbbi.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/rbbi.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/rbbi.h
@@ -97,27 +97,27 @@
     /**
      *
      * If present, UStack of LanguageBreakEngine objects that might handle
      * dictionary characters. Searched from top to bottom to find an object to
      * handle a given character.
-     * @internal
+     * @internal (private)
      */
     UStack              *fLanguageBreakEngines;
 
     /**
      *
      * If present, the special LanguageBreakEngine used for handling
      * characters that are in the dictionary set, but not handled by any
-     * LangugageBreakEngine.
-     * @internal
+     * LanguageBreakEngine.
+     * @internal (private)
      */
     UnhandledEngine     *fUnhandledBreakEngine;
 
     /**
      * Counter for the number of characters encountered with the "dictionary"
      *   flag set.
-     * @internal
+     * @internal (private)
      */
     uint32_t            fDictionaryCharCount;
 
     /**
      *   A character iterator that refers to the same text as the UText, above.
@@ -148,11 +148,11 @@
      *             are created via this constructor; the rules are compiled
      *             into memory, then the break iterator is constructed here.
      *
      *             The break iterator adopts the memory, and will
      *             free it when done.
-     * @internal
+     * @internal (private)
      */
     RuleBasedBreakIterator(RBBIDataHeader* data, UErrorCode &status);
 
     /** @internal */
     friend class RBBIRuleBuilder;
@@ -258,11 +258,11 @@
      * and vice versa.
      * @param that The BreakIterator to be compared for inequality
      * @return TRUE if both BreakIterators are not same.
      *  @stable ICU 2.0
      */
-    UBool operator!=(const BreakIterator& that) const;
+    inline UBool operator!=(const BreakIterator& that) const;
 
     /**
      * Returns a newly-constructed RuleBasedBreakIterator with the same
      * behavior, and iterating over the same text, as this one.
      * Differs from the copy constructor in that it is polymorphic, and
