diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/uspoof_impl.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/uspoof_impl.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/uspoof_impl.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/uspoof_impl.cpp
@@ -50,11 +50,10 @@
     // constructor, to allow for lazy data loading.  See #12696.
     fSpoofData = SpoofData::getDefault(status);
 }
 
 void SpoofImpl::construct(UErrorCode& status) {
-    fMagic = USPOOF_MAGIC;
     fChecks = USPOOF_ALL_CHECKS;
     fSpoofData = NULL;
     fAllowedCharsSet = NULL;
     fAllowedLocales = NULL;
     fRestrictionLevel = USPOOF_HIGHLY_RESTRICTIVE;
@@ -72,16 +71,15 @@
 }
 
 
 // Copy Constructor, used by the user level clone() function.
 SpoofImpl::SpoofImpl(const SpoofImpl &src, UErrorCode &status)  :
-        fMagic(0), fChecks(USPOOF_ALL_CHECKS), fSpoofData(NULL), fAllowedCharsSet(NULL) ,
+        fChecks(USPOOF_ALL_CHECKS), fSpoofData(NULL), fAllowedCharsSet(NULL) ,
         fAllowedLocales(NULL) {
     if (U_FAILURE(status)) {
         return;
     }
-    fMagic = src.fMagic;
     fChecks = src.fChecks;
     if (src.fSpoofData != NULL) {
         fSpoofData = src.fSpoofData->addReference();
     }
     fAllowedCharsSet = static_cast<const UnicodeSet *>(src.fAllowedCharsSet->clone());
@@ -91,41 +89,31 @@
     }
     fRestrictionLevel = src.fRestrictionLevel;
 }
 
 SpoofImpl::~SpoofImpl() {
-    fMagic = 0;                // head off application errors by preventing use of
-                               //    of deleted objects.
     if (fSpoofData != NULL) {
         fSpoofData->removeReference();   // Will delete if refCount goes to zero.
     }
     delete fAllowedCharsSet;
     uprv_free((void *)fAllowedLocales);
 }
 
 //  Cast this instance as a USpoofChecker for the C API.
 USpoofChecker *SpoofImpl::asUSpoofChecker() {
-    return reinterpret_cast<USpoofChecker*>(this);
+    return exportForC();
 }
 
 //
 //  Incoming parameter check on Status and the SpoofChecker object
 //    received from the C API.
 //
 const SpoofImpl *SpoofImpl::validateThis(const USpoofChecker *sc, UErrorCode &status) {
+    auto* This = validate(sc, status);
     if (U_FAILURE(status)) {
         return NULL;
     }
-    if (sc == NULL) {
-        status = U_ILLEGAL_ARGUMENT_ERROR;
-        return NULL;
-    }
-    SpoofImpl *This = (SpoofImpl *)sc;
-    if (This->fMagic != USPOOF_MAGIC) {
-        status = U_INVALID_FORMAT_ERROR;
-        return NULL;
-    }
     if (This->fSpoofData != NULL && !This->fSpoofData->validateDataVersion(status)) {
         return NULL;
     }
     return This;
 }
@@ -452,39 +440,28 @@
 //
 //   class CheckResult Implementation
 //
 //-----------------------------------------
 
-CheckResult::CheckResult() : fMagic(USPOOF_CHECK_MAGIC) {
+CheckResult::CheckResult() {
     clear();
 }
 
 USpoofCheckResult* CheckResult::asUSpoofCheckResult() {
-    return reinterpret_cast<USpoofCheckResult*>(this);
+    return exportForC();
 }
 
 //
 //  Incoming parameter check on Status and the CheckResult object
 //    received from the C API.
 //
 const CheckResult* CheckResult::validateThis(const USpoofCheckResult *ptr, UErrorCode &status) {
-    if (U_FAILURE(status)) { return NULL; }
-    if (ptr == NULL) {
-        status = U_ILLEGAL_ARGUMENT_ERROR;
-        return NULL;
-    }
-    CheckResult *This = (CheckResult*) ptr;
-    if (This->fMagic != USPOOF_CHECK_MAGIC) {
-        status = U_INVALID_FORMAT_ERROR;
-        return NULL;
-    }
-    return This;
+    return validate(ptr, status);
 }
 
 CheckResult* CheckResult::validateThis(USpoofCheckResult *ptr, UErrorCode &status) {
-    return const_cast<CheckResult *>
-        (CheckResult::validateThis(const_cast<const USpoofCheckResult*>(ptr), status));
+    return validate(ptr, status);
 }
 
 void CheckResult::clear() {
     fChecks = 0;
     fNumerics.clear();
@@ -750,13 +727,11 @@
 void *SpoofData::reserveSpace(int32_t numBytes,  UErrorCode &status) {
     if (U_FAILURE(status)) {
         return NULL;
     }
     if (!fDataOwned) {
-        U_ASSERT(FALSE);
-        status = U_INTERNAL_PROGRAM_ERROR;
-        return NULL;
+        UPRV_UNREACHABLE;
     }
 
     numBytes = (numBytes + 15) & ~15;   // Round up to a multiple of 16
     uint32_t returnOffset = fMemLimit;
     fMemLimit += numBytes;
