diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/platform.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/platform.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/platform.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/platform.h
@@ -36,11 +36,11 @@
  * try to derive it from the U_PLATFORM value
  * (for which we might need a new value constant in rare cases)
  * and/or from other macros that are predefined by the compiler
  * or defined in standard (POSIX or platform or compiler) headers.
  *
- * As a temporary workaround, you can add an explicit <code>#define</code> for some macros
+ * As a temporary workaround, you can add an explicit \#define for some macros
  * before it is first tested, or add an equivalent -D macro definition
  * to the compiler's command line.
  *
  * Note: Some compilers provide ways to show the predefined macros.
  * For example, with gcc you can compile an empty .c file and have the compiler
@@ -205,10 +205,13 @@
 /* Commented out because this is already set in mh-cygwin-msvc
 #if U_PLATFORM == U_PF_CYGWIN && defined(_MSC_VER)
 #   define CYGWINMSVC
 #endif
 */
+#ifdef U_IN_DOXYGEN
+#   define CYGWINMSVC
+#endif
 
 /**
  * \def U_PLATFORM_USES_ONLY_WIN32_API
  * Defines whether the platform uses only the Win32 API.
  * Set to 1 for Windows/MSVC and MinGW but not Cygwin.
@@ -415,10 +418,13 @@
 #    define __has_attribute(x) 0
 #endif
 #ifndef __has_cpp_attribute
 #    define __has_cpp_attribute(x) 0
 #endif
+#ifndef __has_declspec_attribute
+#    define __has_declspec_attribute(x) 0
+#endif
 #ifndef __has_builtin
 #    define __has_builtin(x) 0
 #endif
 #ifndef __has_feature
 #    define __has_feature(x) 0
@@ -491,17 +497,12 @@
  * if the move constructor and the move operator are declared as not throwing exceptions.
  * @internal
  */
 #ifdef U_NOEXCEPT
     /* Use the predefined value. */
-#elif defined(_HAS_EXCEPTIONS) && !_HAS_EXCEPTIONS  /* Visual Studio */
-#   define U_NOEXCEPT
-#elif U_CPLUSPLUS_VERSION >= 11 || __has_feature(cxx_noexcept) || __has_extension(cxx_noexcept) \
-        || (defined(_MSC_VER) && _MSC_VER >= 1900)  /* Visual Studio 2015 */
-#   define U_NOEXCEPT noexcept
 #else
-#   define U_NOEXCEPT
+#   define U_NOEXCEPT noexcept
 #endif
 
 /**
  * \def U_FALLTHROUGH
  * Annotate intentional fall-through between switch labels.
@@ -517,10 +518,12 @@
     // Other compilers might choke on the feature test.
 #   if __has_cpp_attribute(clang::fallthrough) || \
             (__has_feature(cxx_attributes) && __has_warning("-Wimplicit-fallthrough"))
 #       define U_FALLTHROUGH [[clang::fallthrough]]
 #   endif
+#elif defined(__GNUC__) && (__GNUC__ >= 7)
+#   define U_FALLTHROUGH __attribute__((fallthrough))
 #endif
 
 #ifndef U_FALLTHROUGH
 #   define U_FALLTHROUGH
 #endif
@@ -761,11 +764,12 @@
 #ifdef U_DECLARE_UTF16
     /* Use the predefined value. */
 #elif U_HAVE_CHAR16_T \
     || (defined(__xlC__) && defined(__IBM_UTF_LITERAL) && U_SIZEOF_WCHAR_T != 2) \
     || (defined(__HP_aCC) && __HP_aCC >= 035000) \
-    || (defined(__HP_cc) && __HP_cc >= 111106)
+    || (defined(__HP_cc) && __HP_cc >= 111106) \
+    || (defined(U_IN_DOXYGEN))
 #   define U_DECLARE_UTF16(string) u ## string
 #elif U_SIZEOF_WCHAR_T == 2 \
     && (U_CHARSET_FAMILY == 0 || (U_PF_OS390 <= U_PLATFORM && U_PLATFORM <= U_PF_OS400 && defined(__UCS2__)))
 #   define U_DECLARE_UTF16(string) L ## string
 #else
@@ -780,19 +784,19 @@
 
 #ifdef U_EXPORT
     /* Use the predefined value. */
 #elif defined(U_STATIC_IMPLEMENTATION)
 #   define U_EXPORT
+#elif defined(_MSC_VER) || (__has_declspec_attribute(dllexport) && __has_declspec_attribute(dllimport))
+#   define U_EXPORT __declspec(dllexport)
 #elif defined(__GNUC__)
 #   define U_EXPORT __attribute__((visibility("default")))
 #elif (defined(__SUNPRO_CC) && __SUNPRO_CC >= 0x550) \
    || (defined(__SUNPRO_C) && __SUNPRO_C >= 0x550)
 #   define U_EXPORT __global
-#elif defined(_MSC_VER)
-#   define U_EXPORT __declspec(dllexport)
 #else
 #   define U_EXPORT
 #endif
 
 /* U_CALLCONV is releated to U_EXPORT2 */
@@ -804,11 +808,11 @@
 #   define U_EXPORT2
 #endif
 
 #ifdef U_IMPORT
     /* Use the predefined value. */
-#elif defined(_MSC_VER)
+#elif defined(_MSC_VER) || (__has_declspec_attribute(dllexport) && __has_declspec_attribute(dllimport))
     /* Windows needs to export/import data. */
 #   define U_IMPORT __declspec(dllimport)
 #else
 #   define U_IMPORT
 #endif
