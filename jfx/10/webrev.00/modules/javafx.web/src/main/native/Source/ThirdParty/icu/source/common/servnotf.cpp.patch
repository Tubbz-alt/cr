diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/servnotf.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/servnotf.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/servnotf.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/servnotf.cpp
@@ -19,20 +19,23 @@
 U_NAMESPACE_BEGIN
 
 EventListener::~EventListener() {}
 UOBJECT_DEFINE_RTTI_IMPLEMENTATION(EventListener)
 
-static UMutex notifyLock = U_MUTEX_INITIALIZER;
+static UMutex *notifyLock() {
+    static UMutex m = U_MUTEX_INITIALIZER;
+    return &m;
+}
 
 ICUNotifier::ICUNotifier(void)
 : listeners(NULL)
 {
 }
 
 ICUNotifier::~ICUNotifier(void) {
     {
-        Mutex lmx(&notifyLock);
+        Mutex lmx(notifyLock());
         delete listeners;
         listeners = NULL;
     }
 }
 
@@ -45,11 +48,11 @@
             status = U_ILLEGAL_ARGUMENT_ERROR;
             return;
         }
 
         if (acceptsListener(*l)) {
-            Mutex lmx(&notifyLock);
+            Mutex lmx(notifyLock());
             if (listeners == NULL) {
                 listeners = new UVector(5, status);
             } else {
                 for (int i = 0, e = listeners->size(); i < e; ++i) {
                     const EventListener* el = (const EventListener*)(listeners->elementAt(i));
@@ -78,11 +81,11 @@
             status = U_ILLEGAL_ARGUMENT_ERROR;
             return;
         }
 
         {
-            Mutex lmx(&notifyLock);
+            Mutex lmx(notifyLock());
             if (listeners != NULL) {
                 // identity equality check
                 for (int i = 0, e = listeners->size(); i < e; ++i) {
                     const EventListener* el = (const EventListener*)listeners->elementAt(i);
                     if (l == el) {
@@ -101,11 +104,11 @@
 
 void
 ICUNotifier::notifyChanged(void)
 {
     if (listeners != NULL) {
-        Mutex lmx(&notifyLock);
+        Mutex lmx(notifyLock());
         if (listeners != NULL) {
             for (int i = 0, e = listeners->size(); i < e; ++i) {
                 EventListener* el = (EventListener*)listeners->elementAt(i);
                 notifyListener(*el);
             }
