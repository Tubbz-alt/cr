diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_integerwidth.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_integerwidth.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_integerwidth.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/number_integerwidth.cpp
@@ -41,18 +41,19 @@
 
 void IntegerWidth::apply(impl::DecimalQuantity& quantity, UErrorCode& status) const {
     if (fHasError) {
         status = U_ILLEGAL_ARGUMENT_ERROR;
     } else if (fUnion.minMaxInt.fMaxInt == -1) {
-        quantity.setIntegerLength(fUnion.minMaxInt.fMinInt, INT32_MAX);
+        quantity.setMinInteger(fUnion.minMaxInt.fMinInt);
     } else {
         // Enforce the backwards-compatibility feature "FormatFailIfMoreThanMaxDigits"
         if (fUnion.minMaxInt.fFormatFailIfMoreThanMaxDigits &&
             fUnion.minMaxInt.fMaxInt < quantity.getMagnitude()) {
             status = U_ILLEGAL_ARGUMENT_ERROR;
         }
-        quantity.setIntegerLength(fUnion.minMaxInt.fMinInt, fUnion.minMaxInt.fMaxInt);
+        quantity.setMinInteger(fUnion.minMaxInt.fMinInt);
+        quantity.applyMaxInteger(fUnion.minMaxInt.fMaxInt);
     }
 }
 
 bool IntegerWidth::operator==(const IntegerWidth& other) const {
     // Private operator==; do error and bogus checking first!
