diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/tzfmt.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/tzfmt.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/tzfmt.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/tzfmt.cpp
@@ -145,11 +145,14 @@
 static icu::UInitOnce gZoneIdTrieInitOnce = U_INITONCE_INITIALIZER;
 
 static TextTrieMap *gShortZoneIdTrie = NULL;
 static icu::UInitOnce gShortZoneIdTrieInitOnce = U_INITONCE_INITIALIZER;
 
-static UMutex gLock = U_MUTEX_INITIALIZER;
+static UMutex *gLock() {
+    static UMutex m = U_MUTEX_INITIALIZER;
+    return &m;
+}
 
 U_CDECL_BEGIN
 /**
  * Cleanup callback func
  */
@@ -265,11 +268,11 @@
         return (width == 1 || width == 2);
     case MINUTE:
     case SECOND:
         return (width == 2);
     default:
-        U_ASSERT(FALSE);
+        UPRV_UNREACHABLE;
     }
     return (width > 0);
 }
 
 GMTOffsetField::FieldType
@@ -587,12 +590,11 @@
     case UTZFMT_PAT_POSITIVE_HMS:
     case UTZFMT_PAT_NEGATIVE_HMS:
         required = FIELDS_HMS;
         break;
     default:
-        U_ASSERT(FALSE);
-        break;
+        UPRV_UNREACHABLE;
     }
 
     UVector* patternItems = parseOffsetPattern(pattern, required, status);
     if (patternItems == NULL) {
         return;
@@ -1026,11 +1028,11 @@
             case UTZFMT_STYLE_GENERIC_SHORT:
                 genericNameTypes = UTZGNM_SHORT | UTZGNM_LOCATION;
                 break;
 
             default:
-                U_ASSERT(FALSE);
+                UPRV_UNREACHABLE;
             }
 
             int32_t len = 0;
             UTimeZoneFormatTimeType tt = UTZFMT_TIME_TYPE_UNKNOWN;
             const TimeZoneGenericNames *gnames = getTimeZoneGenericNames(status);
@@ -1381,37 +1383,37 @@
 TimeZoneFormat::getTimeZoneGenericNames(UErrorCode& status) const {
     if (U_FAILURE(status)) {
         return NULL;
     }
 
-    umtx_lock(&gLock);
+    umtx_lock(gLock());
     if (fTimeZoneGenericNames == NULL) {
         TimeZoneFormat *nonConstThis = const_cast<TimeZoneFormat *>(this);
         nonConstThis->fTimeZoneGenericNames = TimeZoneGenericNames::createInstance(fLocale, status);
     }
-    umtx_unlock(&gLock);
+    umtx_unlock(gLock());
 
     return fTimeZoneGenericNames;
 }
 
 const TZDBTimeZoneNames*
 TimeZoneFormat::getTZDBTimeZoneNames(UErrorCode& status) const {
     if (U_FAILURE(status)) {
         return NULL;
     }
 
-    umtx_lock(&gLock);
+    umtx_lock(gLock());
     if (fTZDBTimeZoneNames == NULL) {
         TZDBTimeZoneNames *tzdbNames = new TZDBTimeZoneNames(fLocale);
         if (tzdbNames == NULL) {
             status = U_MEMORY_ALLOCATION_ERROR;
         } else {
             TimeZoneFormat *nonConstThis = const_cast<TimeZoneFormat *>(this);
             nonConstThis->fTZDBTimeZoneNames = tzdbNames;
         }
     }
-    umtx_unlock(&gLock);
+    umtx_unlock(gLock());
 
     return fTZDBTimeZoneNames;
 }
 
 UnicodeString&
@@ -2646,16 +2648,16 @@
     for (int32_t type = 0; type < UTZFMT_PAT_COUNT; type++) {
         UBool afterH = FALSE;
         UVector *items = fGMTOffsetPatternItems[type];
         for (int32_t i = 0; i < items->size(); i++) {
             const GMTOffsetField* item = (GMTOffsetField*)items->elementAt(i);
-            GMTOffsetField::FieldType type = item->getType();
-            if (type != GMTOffsetField::TEXT) {
+            GMTOffsetField::FieldType fieldType = item->getType();
+            if (fieldType != GMTOffsetField::TEXT) {
                 if (afterH) {
                     fAbuttingOffsetHoursAndMinutes = TRUE;
                     break;
-                } else if (type == GMTOffsetField::HOUR) {
+                } else if (fieldType == GMTOffsetField::HOUR) {
                     afterH = TRUE;
                 }
             } else if (afterH) {
                 break;
             }
