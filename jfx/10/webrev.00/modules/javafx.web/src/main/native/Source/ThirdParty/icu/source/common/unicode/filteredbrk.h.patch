diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/filteredbrk.h b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/filteredbrk.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/filteredbrk.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/unicode/filteredbrk.h
@@ -65,20 +65,18 @@
    * @see createEmptyInstance()
    */
   static FilteredBreakIteratorBuilder *createInstance(UErrorCode &status);
 #endif  /* U_HIDE_DEPRECATED_API */
 
-#ifndef U_HIDE_DRAFT_API
   /**
    * Construct an empty FilteredBreakIteratorBuilder.
    * In this state, it will not suppress any segment boundaries.
    * @param status The error code.
    * @return the new builder
-   * @draft ICU 60
+   * @stable ICU 60
    */
   static FilteredBreakIteratorBuilder *createEmptyInstance(UErrorCode &status);
-#endif  /* U_HIDE_DRAFT_API */
 
   /**
    * Suppress a certain string from being the end of a segment.
    * For example, suppressing "Mr.", then segments ending in "Mr." will not be returned
    * by the iterator.
@@ -93,11 +91,11 @@
   /**
    * Stop suppressing a certain string from being the end of the segment.
    * This function does not create any new segment boundaries, but only serves to un-do
    * the effect of earlier calls to suppressBreakAfter, or to un-do the effect of
    * locale data which may be suppressing certain strings.
-   * @param exception the exception to remove
+   * @param string the exception to remove
    * @param status error code
    * @return returns TRUE if the string was present and now removed,
    * FALSE if the call was a no-op because the string was not being suppressed.
    * @stable ICU 56
    */
@@ -112,11 +110,10 @@
    * @deprecated ICU 60 use wrapIteratorWithFilter() instead
    * @see wrapBreakIteratorWithFilter()
    */
   virtual BreakIterator *build(BreakIterator* adoptBreakIterator, UErrorCode& status) = 0;
 
-#ifndef U_HIDE_DRAFT_API
   /**
    * Wrap (adopt) an existing break iterator in a new filtered instance.
    * The resulting BreakIterator is owned by the caller.
    * The BreakIteratorFilter may be destroyed before the BreakIterator is destroyed.
    * Note that the adoptBreakIterator is adopted by the new BreakIterator
@@ -124,16 +121,15 @@
    * The FilteredBreakIteratorBuilder may be reused.
    * This function is an alias for build()
    * @param adoptBreakIterator the break iterator to adopt
    * @param status error code
    * @return the new BreakIterator, owned by the caller.
-   * @draft ICU 60
+   * @stable ICU 60
    */
   inline BreakIterator *wrapIteratorWithFilter(BreakIterator* adoptBreakIterator, UErrorCode& status) {
     return build(adoptBreakIterator, status);
   }
-#endif  /* U_HIDE_DRAFT_API */
 
  protected:
   /**
    * For subclass use
    * @stable ICU 56
