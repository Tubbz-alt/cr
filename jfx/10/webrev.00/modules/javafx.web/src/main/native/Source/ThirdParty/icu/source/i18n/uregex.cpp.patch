diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/uregex.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/uregex.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/uregex.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/uregex.cpp
@@ -765,11 +765,11 @@
                UErrorCode          *status)  {
     RegularExpression *regexp = (RegularExpression*)regexp2;
     if (validateRE(regexp, TRUE, status) == FALSE) {
         return 0;
     }
-    int32_t result = regexp->fMatcher->start(groupNum, *status);
+    int64_t result = regexp->fMatcher->start64(groupNum, *status);
     return result;
 }
 
 //------------------------------------------------------------------------------
 //
@@ -789,11 +789,11 @@
              UErrorCode           *status)  {
     RegularExpression *regexp = (RegularExpression*)regexp2;
     if (validateRE(regexp, TRUE, status) == FALSE) {
         return 0;
     }
-    int32_t result = regexp->fMatcher->end(groupNum, *status);
+    int64_t result = regexp->fMatcher->end64(groupNum, *status);
     return result;
 }
 
 //------------------------------------------------------------------------------
 //
@@ -1652,12 +1652,12 @@
         if (nativeIdx == -1) {
             srcIdx = 0;
         } else if (UTEXT_USES_U16(m->fInputText)) {
             srcIdx = (int32_t)nativeIdx;
         } else {
-            UErrorCode status = U_ZERO_ERROR;
-            srcIdx = utext_extract(m->fInputText, 0, nativeIdx, NULL, 0, &status);
+            UErrorCode newStatus = U_ZERO_ERROR;
+            srcIdx = utext_extract(m->fInputText, 0, nativeIdx, NULL, 0, &newStatus);
         }
 
         for (;;) {
             U_ASSERT(destIdx >= 0);
 
