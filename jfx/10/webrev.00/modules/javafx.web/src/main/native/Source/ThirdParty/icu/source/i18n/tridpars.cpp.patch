diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/tridpars.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/tridpars.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/tridpars.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/i18n/tridpars.cpp
@@ -48,11 +48,14 @@
 static UInitOnce gSpecialInversesInitOnce = U_INITONCE_INITIALIZER;
 
 /**
  * The mutex controlling access to SPECIAL_INVERSES
  */
-static UMutex LOCK = U_MUTEX_INITIALIZER;
+static UMutex *LOCK() {
+    static UMutex m = U_MUTEX_INITIALIZER;
+    return &m;
+}
 
 TransliteratorIDParser::Specs::Specs(const UnicodeString& s, const UnicodeString& t,
                                      const UnicodeString& v, UBool sawS,
                                      const UnicodeString& f) {
     source = s;
@@ -657,11 +660,11 @@
     // If target == inverseTarget then force bidirectional => FALSE
     if (bidirectional && 0==target.caseCompare(inverseTarget, U_FOLD_CASE_DEFAULT)) {
         bidirectional = FALSE;
     }
 
-    Mutex lock(&LOCK);
+    Mutex lock(LOCK());
 
     UnicodeString *tempus = new UnicodeString(inverseTarget);  // Used for null pointer check before usage.
     if (tempus == NULL) {
         status = U_MEMORY_ALLOCATION_ERROR;
         return;
@@ -861,13 +864,13 @@
         return NULL;
     }
 
     UnicodeString* inverseTarget;
 
-    umtx_lock(&LOCK);
+    umtx_lock(LOCK());
     inverseTarget = (UnicodeString*) SPECIAL_INVERSES->get(specs.target);
-    umtx_unlock(&LOCK);
+    umtx_unlock(LOCK());
 
     if (inverseTarget != NULL) {
         // If the original ID contained "Any-" then make the
         // special inverse "Any-Foo"; otherwise make it "Foo".
         // So "Any-NFC" => "Any-NFD" but "NFC" => "NFD".
