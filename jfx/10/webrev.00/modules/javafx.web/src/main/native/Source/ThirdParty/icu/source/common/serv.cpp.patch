diff a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/serv.cpp b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/serv.cpp
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/serv.cpp
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/icu/source/common/serv.cpp
@@ -331,11 +331,14 @@
 
 /*
 ******************************************************************
 */
 
-static UMutex lock = U_MUTEX_INITIALIZER;
+static UMutex *lock() {
+    static UMutex m = U_MUTEX_INITIALIZER;
+    return &m;
+}
 
 ICUService::ICUService()
 : name()
 , timestamp(0)
 , factories(NULL)
@@ -356,11 +359,11 @@
 }
 
 ICUService::~ICUService()
 {
     {
-        Mutex mutex(&lock);
+        Mutex mutex(lock());
         clearCaches();
         delete factories;
         factories = NULL;
     }
 }
@@ -447,11 +450,11 @@
         // we single-thread everything using this service, for now.
 
         // if factory is not null, we're calling from within the mutex,
         // and since some unix machines don't have reentrant mutexes we
         // need to make sure not to try to lock it again.
-        XMutex mutex(&lock, factory != NULL);
+        XMutex mutex(lock(), factory != NULL);
 
         if (serviceCache == NULL) {
             ncthis->serviceCache = new Hashtable(status);
             if (ncthis->serviceCache == NULL) {
                 return NULL;
@@ -613,11 +616,11 @@
     if (U_FAILURE(status)) {
         return result;
     }
 
     {
-        Mutex mutex(&lock);
+        Mutex mutex(lock());
         const Hashtable* map = getVisibleIDMap(status);
         if (map != NULL) {
             ICUServiceKey* fallbackKey = createKey(matchID, status);
 
             for (int32_t pos = UHASH_FIRST;;) {
@@ -690,23 +693,23 @@
 UnicodeString&
 ICUService::getDisplayName(const UnicodeString& id, UnicodeString& result, const Locale& locale) const
 {
     {
         UErrorCode status = U_ZERO_ERROR;
-        Mutex mutex(&lock);
+        Mutex mutex(lock());
         const Hashtable* map = getVisibleIDMap(status);
         if (map != NULL) {
             ICUServiceFactory* f = (ICUServiceFactory*)map->get(id);
             if (f != NULL) {
                 f->getDisplayName(id, locale, result);
                 return result;
             }
 
             // fallback
-            UErrorCode status = U_ZERO_ERROR;
+            status = U_ZERO_ERROR;
             ICUServiceKey* fallbackKey = createKey(&id, status);
-            while (fallbackKey->fallback()) {
+            while (fallbackKey != NULL && fallbackKey->fallback()) {
                 UnicodeString us;
                 fallbackKey->currentID(us);
                 f = (ICUServiceFactory*)map->get(us);
                 if (f != NULL) {
                     f->getDisplayName(id, locale, result);
@@ -742,11 +745,11 @@
 {
     result.removeAllElements();
     result.setDeleter(userv_deleteStringPair);
     if (U_SUCCESS(status)) {
         ICUService* ncthis = (ICUService*)this; // cast away semantic const
-        Mutex mutex(&lock);
+        Mutex mutex(lock());
 
         if (dnCache != NULL && dnCache->locale != locale) {
             delete dnCache;
             ncthis->dnCache = NULL;
         }
@@ -847,11 +850,11 @@
 
 URegistryKey
 ICUService::registerFactory(ICUServiceFactory* factoryToAdopt, UErrorCode& status)
 {
     if (U_SUCCESS(status) && factoryToAdopt != NULL) {
-        Mutex mutex(&lock);
+        Mutex mutex(lock());
 
         if (factories == NULL) {
             factories = new UVector(deleteUObject, NULL, status);
             if (U_FAILURE(status)) {
                 delete factories;
@@ -878,11 +881,11 @@
 ICUService::unregister(URegistryKey rkey, UErrorCode& status)
 {
     ICUServiceFactory *factory = (ICUServiceFactory*)rkey;
     UBool result = FALSE;
     if (factory != NULL && factories != NULL) {
-        Mutex mutex(&lock);
+        Mutex mutex(lock());
 
         if (factories->removeElement(factory)) {
             clearCaches();
             result = TRUE;
         } else {
@@ -898,11 +901,11 @@
 
 void
 ICUService::reset()
 {
     {
-        Mutex mutex(&lock);
+        Mutex mutex(lock());
         reInitializeFactories();
         clearCaches();
     }
     notifyChanged();
 }
