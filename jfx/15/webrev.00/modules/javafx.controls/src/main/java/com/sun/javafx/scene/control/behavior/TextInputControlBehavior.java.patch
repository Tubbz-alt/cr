diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TextInputControlBehavior.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TextInputControlBehavior.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TextInputControlBehavior.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TextInputControlBehavior.java
@@ -122,10 +122,11 @@
         final Predicate<KeyEvent> validWhenEditable = e -> !c.isEditable();
         final Predicate<KeyEvent> validOnWindows = e -> !PlatformUtil.isWindows();
         final Predicate<KeyEvent> validOnLinux = e -> !PlatformUtil.isLinux();
 
         KeyMapping cancelEditMapping;
+        KeyMapping fireMapping;
         KeyMapping consumeMostPressedEventsMapping;
 
         // create a child input map for mappings which are applicable on all
         // platforms, and regardless of editing state
         addDefaultMapping(inputMap,
@@ -134,11 +135,11 @@
                 keyMapping(LEFT, e -> nextCharacterVisually(false)),
                 keyMapping(UP, e -> c.home()),
                 keyMapping(HOME, e -> c.home()),
                 keyMapping(DOWN, e -> c.end()),
                 keyMapping(END, e -> c.end()),
-                keyMapping(ENTER, this::fire),
+                fireMapping = keyMapping(ENTER, this::fire),
 
                 keyMapping(new KeyBinding(HOME).shortcut(), e -> c.home()),
                 keyMapping(new KeyBinding(END).shortcut(), e -> c.end()),
 
                 // deletion (only applies when control is editable)
@@ -211,10 +212,12 @@
                     }
                 }
         );
 
         cancelEditMapping.setAutoConsume(false);
+        // fix of JDK-8207759: don't auto-consume
+        fireMapping.setAutoConsume(false);
         consumeMostPressedEventsMapping.setAutoConsume(false);
 
         // mac os specific mappings
         InputMap<T> macOsInputMap = new InputMap<>(c);
         macOsInputMap.setInterceptor(e -> !PlatformUtil.isMac());
@@ -618,22 +621,11 @@
             nextWord();
         }
     }
 
     protected void fire(KeyEvent event) { } // TODO move to TextFieldBehavior
-    protected void cancelEdit(KeyEvent event) { forwardToParent(event);} // not autoconsumed
-
-    protected void forwardToParent(KeyEvent event) {
-        // fix for JDK-8145515
-        if (getNode().getProperties().containsKey(DISABLE_FORWARD_TO_PARENT)) {
-            return;
-        }
-
-        if (getNode().getParent() != null) {
-            getNode().getParent().fireEvent(event);
-        }
-    }
+    protected void cancelEdit(KeyEvent event) { };
 
     protected void selectHome() {
         getNode().selectHome();
     }
 
