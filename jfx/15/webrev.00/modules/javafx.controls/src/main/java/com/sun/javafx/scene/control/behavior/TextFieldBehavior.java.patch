diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TextFieldBehavior.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TextFieldBehavior.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TextFieldBehavior.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TextFieldBehavior.java
@@ -23,37 +23,37 @@
  * questions.
  */
 
 package com.sun.javafx.scene.control.behavior;
 
+
+import com.sun.javafx.PlatformUtil;
+import com.sun.javafx.geom.transform.Affine3D;
+import com.sun.javafx.scene.NodeHelper;
 import com.sun.javafx.scene.control.Properties;
+import com.sun.javafx.scene.control.skin.Utils;
+import com.sun.javafx.stage.WindowHelper;
+
+import static com.sun.javafx.PlatformUtil.*;
+
 import javafx.beans.value.ChangeListener;
 import javafx.beans.value.WeakChangeListener;
 import javafx.event.ActionEvent;
 import javafx.event.EventHandler;
 import javafx.geometry.Bounds;
-import javafx.scene.control.ContextMenu;
 import javafx.scene.control.TextField;
 import javafx.scene.control.skin.TextFieldSkin;
-import com.sun.javafx.scene.control.skin.Utils;
 import javafx.scene.input.ContextMenuEvent;
 import javafx.scene.input.KeyEvent;
 import javafx.scene.input.MouseEvent;
 import javafx.scene.text.HitInfo;
 import javafx.stage.Screen;
-import com.sun.javafx.PlatformUtil;
-import com.sun.javafx.geom.transform.Affine3D;
-
-import static com.sun.javafx.PlatformUtil.isMac;
-import static com.sun.javafx.PlatformUtil.isWindows;
-import com.sun.javafx.scene.NodeHelper;
-import com.sun.javafx.stage.WindowHelper;
 
 /**
  * Text field behavior.
  */
 public class TextFieldBehavior extends TextInputControlBehavior<TextField> {
@@ -181,13 +181,14 @@
         // use textField as target to prevent immediate copy in dispatch
         ActionEvent actionEvent = new ActionEvent(textField, textField);
 
         textField.commitValue();
         textField.fireEvent(actionEvent);
-
-        if (onAction == null && !actionEvent.isConsumed()) {
-            forwardToParent(event);
+        // fix of JDK-8207759: reverted logic
+        // mapping not auto-consume and consume if handled by action
+        if (onAction != null || actionEvent.isConsumed()) {
+            event.consume();
         }
     }
 
     @Override
     protected void cancelEdit(KeyEvent event) {
