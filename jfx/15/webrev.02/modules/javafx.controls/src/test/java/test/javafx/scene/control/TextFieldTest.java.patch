diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
@@ -34,24 +34,29 @@
 import org.junit.Test;
 
 import com.sun.javafx.tk.Toolkit;
 
 import static javafx.scene.input.KeyCode.*;
+import static javafx.scene.input.KeyEvent.*;
+import static java.util.stream.Collectors.*;
 import static org.junit.Assert.*;
 import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;
 
 import javafx.beans.property.ObjectProperty;
 import javafx.beans.property.SimpleObjectProperty;
 import javafx.beans.property.SimpleStringProperty;
 import javafx.beans.property.StringProperty;
 import javafx.collections.ObservableSet;
 import javafx.css.PseudoClass;
 import javafx.event.ActionEvent;
+import javafx.event.Event;
 import javafx.event.EventHandler;
 import javafx.scene.Scene;
+import javafx.scene.control.ComboBox;
 import javafx.scene.control.TextField;
 import javafx.scene.control.TextInputControlShim;
+import javafx.scene.input.KeyCode;
 import javafx.scene.input.KeyCodeCombination;
 import javafx.scene.input.KeyEvent;
 import javafx.scene.layout.StackPane;
 import javafx.stage.Stage;
 import test.com.sun.javafx.pgstub.StubToolkit;
@@ -300,10 +305,96 @@
 
     private Scene scene;
     private Stage stage;
     private StackPane root;
 
+    /**
+     * Guard against potential regression of JDK-8145515: eventFilter
+     * on editor not notified for ENTER released.
+     */
+    @Test
+    public void testEditorInComboBoxEnterReleasedFilter() {
+        initStage();
+        ComboBox<String> combo = new ComboBox<>();
+        combo.setEditable(true);
+        root.getChildren().add(combo);
+        stage.show();
+        List<Event> events = new ArrayList<>();
+        combo.getEditor().addEventFilter(KEY_RELEASED, events::add);
+        KeyCode key = ENTER;
+        KeyEventFirer keyFirer = new KeyEventFirer(combo);
+        keyFirer.doKeyPress(key);
+        assertEquals(1, events.size());
+    }
+
+    /**
+     * Unfixed part of JDK-8145515, reported as regression JDK-8229914: eventFilter
+     * on editor not notified for ENTER pressed.
+     */
+    @Ignore("JDK-8229914")
+    @Test
+    public void testEditorInComboBoxEnterPressedFilter() {
+        initStage();
+        ComboBox<String> combo = new ComboBox<>();
+        combo.setEditable(true);
+        root.getChildren().add(combo);
+        stage.show();
+        List<Event> events = new ArrayList<>();
+        combo.getEditor().addEventFilter(KEY_PRESSED, events::add);
+        KeyCode key = ENTER;
+        KeyEventFirer keyFirer = new KeyEventFirer(combo);
+        keyFirer.doKeyPress(key);
+        assertEquals(1, events.size());
+    }
+
+    /**
+     * Test related to https://bugs.openjdk.java.net/browse/JDK-8207759
+     * broken event dispatch sequence by forwardToParent.
+     */
+    @Test
+    public void testEventSequenceEnterHandler() {
+        initStage();
+        root.getChildren().add(txtField);
+        stage.show();
+        List<Event> events = new ArrayList<>();
+        EventHandler<KeyEvent> adder = events::add;
+        scene.addEventHandler(KEY_PRESSED, adder);
+        root.addEventHandler(KEY_PRESSED, adder);
+        txtField.addEventHandler(KEY_PRESSED, adder);
+        KeyCode key = ENTER;
+        KeyEventFirer keyFirer = new KeyEventFirer(txtField);
+        keyFirer.doKeyPress(key);
+        assertEquals("event count", 3, events.size());
+        List<Object> sources = events.stream()
+                .map(e -> e.getSource())
+                .collect(toList());
+        List<Object> expected = List.of(txtField, root, scene);
+        assertEquals(expected, sources);
+    }
+
+    @Test
+    public void testEventSequenceEscapeHandler() {
+        initStage();
+        root.getChildren().add(txtField);
+        stage.show();
+        List<Event> events = new ArrayList<>();
+        EventHandler<KeyEvent> adder = events::add;
+        scene.addEventHandler(KEY_PRESSED, adder);
+        root.addEventHandler(KEY_PRESSED, adder);
+        txtField.addEventHandler(KEY_PRESSED, adder);
+        KeyCode key = ESCAPE;
+        KeyEventFirer keyFirer = new KeyEventFirer(txtField);
+        keyFirer.doKeyPress(key);
+        assertEquals("event count", 3, events.size());
+        List<Object> sources = events.stream()
+                .map(e -> e.getSource())
+                .collect(toList());
+        List<Object> expected = List.of(txtField, root, scene);
+        assertEquals(expected, sources);
+    }
+
+
     /**
      * test for JDK-8207774: ENTER must not be forwared if actionHandler
      * consumed the action.
      *
      * Here we test that an accelerator is not triggered.
