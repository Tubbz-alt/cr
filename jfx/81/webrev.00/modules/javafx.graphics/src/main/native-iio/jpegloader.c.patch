diff a/modules/javafx.graphics/src/main/native-iio/jpegloader.c b/modules/javafx.graphics/src/main/native-iio/jpegloader.c
--- a/modules/javafx.graphics/src/main/native-iio/jpegloader.c
+++ b/modules/javafx.graphics/src/main/native-iio/jpegloader.c
@@ -43,26 +43,18 @@
 #else
 #define jlong_to_ptr(a) ((void*)(int)(a))
 #define ptr_to_jlong(a) ((jlong)(int)(a))
 #endif
 
-/* On non iOS platforms we use JNI_OnLoad() shared library entrypoint. */
-#define USING_BUILTIN_LIBRARY_ENTRYPOINT 0
-
-/* On iOS we use builtin libraries, thus JNI_OnLoad_javafx_iio() is the entrypoint */
 #ifdef __APPLE__
 
 #include <TargetConditionals.h>
 
 /* RT-37125: use setjmp/longjmp versions that do not save/restore the signal mask */
 #define longjmp _longjmp
 #define setjmp _setjmp
 
-#if TARGET_OS_IPHONE /* iOS */
-#undef  USING_BUILTIN_LIBRARY_ENTRYPOINT
-#define USING_BUILTIN_LIBRARY_ENTRYPOINT 1
-#endif
 #endif
 
 static jboolean checkAndClearException(JNIEnv *env) {
     if (!(*env)->ExceptionCheck(env)) {
         return JNI_FALSE;
@@ -106,11 +98,11 @@
 
 /* Initialize the Java VM instance variable when the library is
    first loaded */
 static JavaVM *jvm;
 
-#if USING_BUILTIN_LIBRARY_ENTRYPOINT
+#ifdef STATIC_BUILD
 
 JNIEXPORT jint JNICALL
 JNI_OnLoad_javafx_iio(JavaVM *vm, void *reserved) {
     jvm = vm;
 #ifdef JNI_VERSION_1_8
@@ -131,11 +123,11 @@
 JNI_OnLoad(JavaVM *vm, void *reserved) {
     jvm = vm;
     return JNI_VERSION_1_2;
 }
 
-#endif
+#endif // STATIC_BUILD
 
 
 /*
  * The following sets of defines must match the warning messages in the
  * Java code.
