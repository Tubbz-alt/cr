diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/font/CompositeGlyphMapper.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/font/CompositeGlyphMapper.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/font/CompositeGlyphMapper.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/font/CompositeGlyphMapper.java
@@ -90,10 +90,13 @@
         return ((slot) << 24 | (glyphCode & GLYPHMASK));
     }
 
     private final int convertToGlyph(int unicode) {
         for (int slot = 0; slot < font.getNumSlots(); slot++) {
+            if (slot >= 255) { // not supposed to happen.
+                return missingGlyph;
+            }
             CharToGlyphMapper mapper = getSlotMapper(slot);
             int glyphCode = mapper.charToGlyph(unicode);
             if (glyphCode != mapper.getMissingGlyphCode()) {
                 glyphCode = compositeGlyphCode(slot, glyphCode);
                 glyphMap.put(unicode, glyphCode);
diff a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/GlyphCache.java b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/GlyphCache.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/GlyphCache.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/GlyphCache.java
@@ -67,10 +67,11 @@
     private final FontStrike strike;
 
     // segmented arrays are in blocks of 32 glyphs.
     private static final int SEGSHIFT = 5;
     private static final int SEGSIZE  = 1 << SEGSHIFT;
+    private static final int SEGMASK  = SEGSIZE - 1;
     HashMap<Integer, GlyphData[]>
         glyphDataMap = new HashMap<Integer, GlyphData[]>();
 
     // Because of SEGSHIFT the 5 high bit in the key to glyphDataMap are unused
     // Using them for subpixel
@@ -236,12 +237,12 @@
         context.clearGlyphCaches();
         packer.clear();
     }
 
     private GlyphData getCachedGlyph(int glyphCode, int subPixel) {
-        int segIndex = glyphCode >> SEGSHIFT;
-        int subIndex = glyphCode % SEGSIZE;
+        int segIndex = glyphCode >>> SEGSHIFT;
+        int subIndex = glyphCode & SEGMASK;
         segIndex |= (subPixel << SUBPIXEL_SHIFT);
         GlyphData[] segment = glyphDataMap.get(segIndex);
         if (segment != null) {
             if (segment[subIndex] != null) {
                 return segment[subIndex];
diff a/modules/javafx.graphics/src/main/native-font/fontpath_linux.c b/modules/javafx.graphics/src/main/native-font/fontpath_linux.c
--- a/modules/javafx.graphics/src/main/native-font/fontpath_linux.c
+++ b/modules/javafx.graphics/src/main/native-font/fontpath_linux.c
@@ -400,14 +400,15 @@
             closeFontConfig(libfontconfig, JNI_FALSE);
             return JNI_FALSE;
         }
         fontCount = 0;
         minGlyphs = 20;
+        FcCharSet *unionCharset = NULL;
         for (j=0; j<nfonts; j++) {
             FcPattern *fontPattern = fontset->fonts[j];
             FcChar8 *fontformat;
-            FcCharSet *unionCharset = NULL, *charset;
+            FcCharSet *charset;
 
             fontformat = NULL;
             (*FcPatternGetString)(fontPattern, FC_FONTFORMAT, 0, &fontformat);
             /* We only want TrueType fonts for Java FX */
             if (fontformat != NULL
@@ -454,10 +455,17 @@
             (*FcPatternGetString)(fontPattern, FC_STYLE, 0, &styleStr[j]);
             (*FcPatternGetString)(fontPattern, FC_FULLNAME, 0, &fullname[j]);
             if (!includeFallbacks) {
                 break;
             }
+            if (fontCount == 254) {
+                /* Upstream Java code currently stores this in a byte;
+                 * And we need one slot free for when this sequence is
+                 * used as a fallback sequeunce.
+                 */
+                break;
+            }
         }
 
         /* Once we get here 'fontCount' is the number of returned fonts
          * we actually want to use, so we create 'fcFontArr' of that length.
          * The non-null entries of "family[]" etc are those fonts.
