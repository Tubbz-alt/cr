diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/scene/text/TextLayout.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/scene/text/TextLayout.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/scene/text/TextLayout.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/scene/text/TextLayout.java
@@ -73,11 +73,11 @@
     public static final int TYPE_STRIKETHROUGH  = 1 << 2;
     public static final int TYPE_BASELINE       = 1 << 3;
     public static final int TYPE_TOP            = 1 << 4;
     public static final int TYPE_BEARINGS       = 1 << 5;
 
-    static final int DEFAULT_TAB_SIZE = 8;
+    public static final int DEFAULT_TAB_SIZE = 8;
 
     public static class Hit {
         int charIndex;
         int insertionIndex;
         boolean leading;
diff a/modules/javafx.graphics/src/main/java/javafx/scene/text/Text.java b/modules/javafx.graphics/src/main/java/javafx/scene/text/Text.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/text/Text.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/text/Text.java
@@ -1879,17 +1879,19 @@
                     @Override public String getName() { return "tabSize"; }
                     @Override public CssMetaData getCssMetaData() {
                         return StyleableProperties.TAB_SIZE;
                     }
                     @Override protected void invalidated() {
-                        TextLayout layout = getTextLayout();
-                        if (layout.setTabSize(get())) {
-                            needsTextLayout();
-                        }
-                        NodeHelper.markDirty(Text.this, DirtyBits.TEXT_ATTRS);
-                        if (getBoundsType() == TextBoundsType.VISUAL) {
-                            NodeHelper.geomChanged(Text.this);
+                        if (!isSpan()) {
+                            TextLayout layout = getTextLayout();
+                            if (layout.setTabSize(get())) {
+                                needsTextLayout();
+                            }
+                            NodeHelper.markDirty(Text.this, DirtyBits.TEXT_ATTRS);
+                            if (getBoundsType() == TextBoundsType.VISUAL) {
+                                NodeHelper.geomChanged(Text.this);
+                            }
                         }
                     }
                 };
             }
             return tabSize;
diff a/modules/javafx.graphics/src/main/java/javafx/scene/text/TextFlow.java b/modules/javafx.graphics/src/main/java/javafx/scene/text/TextFlow.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/text/TextFlow.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/text/TextFlow.java
@@ -488,27 +488,20 @@
         return lineSpacing;
     }
 
     /**
      * The size of a tab stop in spaces.
-     * Values less than 1 are treated as 1.
+     * Values less than 1 are treated as 1. This value overrides the
+     * {@code tabSize} of contained {@link javafx.scene.text.Text Text} nodes.
      *
      * @defaultValue {@code 8}
      *
      * @since 14
      */
     private IntegerProperty tabSize;
 
-    public final int getTabSize() {
-        return tabSize == null ? TextLayout.DEFAULT_TAB_SIZE : tabSize.get();
-    }
-
-    public final void setTabSize(int spaces) {
-        tabSizeProperty().set(spaces);
-    }
-
-    final IntegerProperty tabSizeProperty() {
+    public final IntegerProperty tabSizeProperty() {
         if (tabSize == null) {
             tabSize = new StyleableIntegerProperty(TextLayout.DEFAULT_TAB_SIZE) {
                 @Override public Object getBean() { return TextFlow.this; }
                 @Override public String getName() { return "tabSize"; }
                 @Override public CssMetaData getCssMetaData() {
@@ -523,10 +516,18 @@
             };
         }
         return tabSize;
     }
 
+    public final int getTabSize() {
+        return tabSize == null ? TextLayout.DEFAULT_TAB_SIZE : tabSize.get();
+    }
+
+    public final void setTabSize(int spaces) {
+        tabSizeProperty().set(spaces);
+    }
+
     @Override public final double getBaselineOffset() {
         Insets insets = getInsets();
         double top = snapSpaceY(insets.getTop());
         return top - getTextLayout().getBounds().getMinY();
     }
diff a/modules/javafx.graphics/src/test/java/test/com/sun/javafx/pgstub/StubTextLayout.java b/modules/javafx.graphics/src/test/java/test/com/sun/javafx/pgstub/StubTextLayout.java
--- a/modules/javafx.graphics/src/test/java/test/com/sun/javafx/pgstub/StubTextLayout.java
+++ b/modules/javafx.graphics/src/test/java/test/com/sun/javafx/pgstub/StubTextLayout.java
@@ -35,16 +35,21 @@
 
 public class StubTextLayout implements TextLayout {
 
     @Override
     public boolean setContent(TextSpan[] spans) {
+        this.spans = spans;
+        this.text = null; /* Initialized in getText() */
+        this.nullFontSize = 10; // need a non-zero size
         return true;
     }
 
+    private TextSpan[] spans;
     private String text;
     private Font font;
     private int tabSize = DEFAULT_TAB_SIZE;
+    private int nullFontSize = 10;
 
     @Override
     public boolean setContent(String text, Object font) {
         this.text = text;
         final StubFontLoader.StubFont stub = ((StubFontLoader.StubFont)font);
@@ -82,16 +87,15 @@
         return getBounds(null, new RectBounds());
     }
 
     @Override
     public BaseBounds getBounds(TextSpan filter, BaseBounds bounds) {
-        final double fontSize = (font == null ? 0 : ((Font)font).getSize());
-        final String[] lines = text.split("\n");
+        final double fontSize = (font == null ? nullFontSize : ((Font)font).getSize());
+        final String[] lines = getText().split("\n");
         double width = 0.0;
         double height = fontSize * lines.length;
         for (String line : lines) {
-            int tabs = 0;
             final int length;
             if (line.contains("\t")) {
                 // count chars but when encountering a tab round up to a tabSize boundary
                 char [] chrs = line.toCharArray();
                 int spaces = 0;
@@ -151,15 +155,15 @@
     }
 
     @Override
     public Hit getHitInfo(float x, float y) {
         // TODO this probably needs to be entirely rewritten...
-        if (text == null) {
+        if (getText() == null) {
             return new Hit(0, -1, true);
         }
 
-        final double fontSize = (font == null ? 0 : ((Font)font).getSize());
+        final double fontSize = (font == null ? nullFontSize : ((Font)font).getSize());
         final String[] lines = text.split("\n");
         int lineIndex = Math.min(lines.length - 1, (int) (y / fontSize));
         if (lineIndex >= lines.length) {
             throw new IllegalStateException("Asked for hit info out of y range: x=" + x + "y=" +
                     + y + "text='" + text + "', lineIndex=" + lineIndex + ", numLines=" + lines.length +
@@ -204,6 +208,18 @@
             return true;
         }
         return false;
     }
 
+    private String getText() {
+        if (text == null) {
+            if (spans != null) {
+                StringBuilder sb = new StringBuilder();
+                for (TextSpan span : spans) {
+                    sb.append(span.getText());
+                }
+                text = sb.toString();
+            }
+        }
+        return text;
+    }
 }
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextFlowTest.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextFlowTest.java
--- /dev/null
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextFlowTest.java
@@ -0,0 +1,116 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.javafx.scene.text;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertNotNull;
+
+import javafx.scene.text.Text;
+import javafx.scene.text.TextFlow;
+import javafx.scene.layout.HBox;
+import javafx.scene.layout.VBox;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+import test.com.sun.javafx.pgstub.StubToolkit;
+import com.sun.javafx.tk.Toolkit;
+
+import org.junit.Test;
+
+public class TextFlowTest {
+
+    @Test public void testTabSize() {
+        Toolkit tk = (StubToolkit) Toolkit.getToolkit();
+        VBox root = new VBox();
+        Scene scene = new Scene(root);
+        Stage stage = new Stage();
+        stage.setScene(scene);
+        stage.setWidth(300);
+        stage.setHeight(200);
+
+        try {
+            Text text1 = new Text("\tfirst");
+            Text text2 = new Text("\tsecond");
+            TextFlow textFlow = new TextFlow(text1, text2);
+            textFlow.setPrefWidth(TextFlow.USE_COMPUTED_SIZE);
+            textFlow.setMaxWidth(TextFlow.USE_PREF_SIZE);
+            root.getChildren().addAll(textFlow);
+            stage.show();
+            tk.firePulse();
+            assertEquals(8, textFlow.getTabSize());
+            // initial width with default 8-space tab
+            double widthT8 = textFlow.getBoundsInLocal().getWidth();
+            text1.setTabSize(4);
+            text2.setTabSize(3);
+            // StubToolkit is reusing a StubTextLayout ?
+            tk.getTextLayoutFactory().disposeLayout(tk.getTextLayoutFactory().getLayout());
+            // Tab size of contained text nodes should not have any effect.
+            tk.firePulse();
+            assertEquals(widthT8, textFlow.getBoundsInLocal().getWidth(), 0.0);
+
+            textFlow.setTabSize(1);
+            tk.firePulse();
+            // width with tab at 1 spaces
+            double widthT1 = textFlow.getBoundsInLocal().getWidth();
+            assertTrue(widthT1 < widthT8);
+
+            textFlow.setTabSize(20);
+            tk.firePulse();
+            double widthT20 = textFlow.getBoundsInLocal().getWidth();
+            assertTrue(widthT20 > widthT8);
+
+            assertEquals(20, textFlow.getTabSize());
+            assertEquals(20, textFlow.tabSizeProperty().get());
+
+            textFlow.tabSizeProperty().set(10);
+            tk.firePulse();
+            double widthT10 = textFlow.getBoundsInLocal().getWidth();
+            assertTrue(widthT10 > widthT8);
+            assertTrue(widthT10 < widthT20);
+
+            assertEquals(10, textFlow.getTabSize());
+            assertEquals(10, textFlow.tabSizeProperty().get());
+
+            // tab size of contained text nodes isn't modified by TextFlow
+            assertEquals(4, text1.getTabSize());
+            assertEquals(3, text2.getTabSize());
+
+            // Test clamping
+            textFlow.tabSizeProperty().set(0);
+            assertEquals(0, textFlow.tabSizeProperty().get());
+            assertEquals(0, textFlow.getTabSize());
+            tk.firePulse();
+            double widthT0Clamp = textFlow.getBoundsInLocal().getWidth();
+            // values < 1 are treated as 1
+            assertEquals(widthT1, widthT0Clamp, 0.5);
+        } finally {
+            stage.hide();
+        }
+
+    }
+}
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextTest.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextTest.java
@@ -263,13 +263,16 @@
             // width with tab at 4 spaces
             double widthT4 = text.getBoundsInLocal().getWidth();
             double expected = widthT8 - 4 * widthSpace;
             // should be approximately 4 space-widths shorter
             assertEquals(expected, widthT4, 0.5);
+            assertEquals(4, text.getTabSize());
+            assertEquals(4, text.tabSizeProperty().get());
 
             text.tabSizeProperty().set(5);
             assertEquals(5, text.tabSizeProperty().get());
+            assertEquals(5, text.getTabSize());
             tk.firePulse();
             double widthT5 = text.getBoundsInLocal().getWidth();
             expected = widthT8 - 3 * widthSpace;
             assertEquals(expected, widthT5, 0.5);
 
