diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextTest.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextTest.java
@@ -246,11 +246,11 @@
         try {
             Text text = new Text("\tHello");
             root.getChildren().addAll(text);
             stage.show();
             tk.firePulse();
-            assertEquals(text.getTabSize(),8);
+            assertEquals(8, text.getTabSize());
             // initial width with default 8-space tab
             double widthT8 = text.getBoundsInLocal().getWidth();
             text.setTabSize(1);
             tk.firePulse();
             // width with tab at 1 spaces
@@ -263,10 +263,26 @@
             // width with tab at 4 spaces
             double widthT4 = text.getBoundsInLocal().getWidth();
             double expected = widthT8 - 4 * widthSpace;
             // should be approximately 4 space-widths shorter
             assertEquals(expected, widthT4, 0.5);
+
+            text.tabSizeProperty().set(5);
+            assertEquals(5, text.tabSizeProperty().get());
+            tk.firePulse();
+            double widthT5 = text.getBoundsInLocal().getWidth();
+            expected = widthT8 - 3 * widthSpace;
+            assertEquals(expected, widthT5, 0.5);
+
+            // Test clamping
+            text.tabSizeProperty().set(0);
+            assertEquals(0, text.tabSizeProperty().get());
+            assertEquals(0, text.getTabSize());
+            tk.firePulse();
+            double widthT0Clamp = text.getBoundsInLocal().getWidth();
+            // values < 1 are treated as 1
+            assertEquals(widthT1, widthT0Clamp, 0.5);
         } finally {
             stage.hide();
         }
   }
 }
