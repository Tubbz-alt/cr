diff a/modules/javafx.graphics/src/main/docs/javafx/scene/doc-files/cssref.html b/modules/javafx.graphics/src/main/docs/javafx/scene/doc-files/cssref.html
--- a/modules/javafx.graphics/src/main/docs/javafx/scene/doc-files/cssref.html
+++ b/modules/javafx.graphics/src/main/docs/javafx/scene/doc-files/cssref.html
@@ -3030,11 +3030,12 @@
         <tr>
         <th class="propertyname" scope="row">-fx-tab-size</th>
           <td class="value"><a href="#typenumber" class="typelink">&lt;integer&gt;</a></td>
           <td>8</td>
           <td>&nbsp;</td>
-        </tr>        <tr>
+        </tr>
+        <tr>
         <th class="propertyname" scope="row">-fx-text-alignment</th>
           <td class="value">[ left | center | right | justify ] </td>
           <td>left</td>
           <td>inherits</td>
         </tr>
diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/text/PrismTextLayout.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/text/PrismTextLayout.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/text/PrismTextLayout.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/text/PrismTextLayout.java
@@ -649,12 +649,13 @@
         return outline;
     }
 
     @Override
     public boolean setTabSize(int spaces) {
-        if (spaces < 1)
+        if (spaces < 1) {
             spaces = 1;
+        }
         if (tabSize != spaces) {
             tabSize = spaces;
             relayout();
             return true;
         }
diff a/modules/javafx.graphics/src/main/java/javafx/scene/text/Text.java b/modules/javafx.graphics/src/main/java/javafx/scene/text/Text.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/text/Text.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/text/Text.java
@@ -1269,39 +1269,27 @@
         return TransformedShape.translatedShape(shape, x, y);
     }
 
     /**
      * The size of a tab stop in spaces.
-     *
-     * @return the {@code tabSize} property
+     * Values less than 1 are treated as 1.
      *
      * @defaultValue {@code 8}
      *
      * @since 14
      */
     public final IntegerProperty tabSizeProperty() {
         return getTextAttribute().tabSizeProperty();
     }
 
-    /**
-     * Gets the size of a tab stop in spaces.
-     * @return the size of a tab in spaces
-     * @since 14
-     */
     public final int getTabSize() {
         if (attributes == null || attributes.tabSize == null) {
             return TextLayout.DEFAULT_TAB_SIZE;
         }
         return getTextAttribute().getTabSize();
     }
 
-    /**
-     * Sets the size of a tab stop.
-     * @param spaces the size of a tab in spaces. Defaults to 8.
-     * Minimum is 1, lower values will be clamped to 1.
-     * @since 14
-     */
     public final void setTabSize(int spaces) {
         tabSizeProperty().set(spaces);
     }
 
 
@@ -1890,11 +1878,10 @@
                     @Override public Object getBean() { return Text.this; }
                     @Override public String getName() { return "tabSize"; }
                     @Override public CssMetaData getCssMetaData() {
                         return StyleableProperties.TAB_SIZE;
                     }
-                    @Override public void set(int v) { super.set((v < 1) ? 1 : v); }
                     @Override protected void invalidated() {
                         TextLayout layout = getTextLayout();
                         if (layout.setTabSize(get())) {
                             needsTextLayout();
                         }
@@ -1937,10 +1924,15 @@
         double wrap = getWrappingWidth();
         if (wrap != 0) {
             sb.append(", wrappingWidth=").append(wrap);
         }
 
+        int tab = getTabSize();
+        if (tab != TextLayout.DEFAULT_TAB_SIZE) {
+            sb.append(", tabSize=").append(tab);
+        }
+
         sb.append(", font=").append(getFont());
         sb.append(", fontSmoothingType=").append(getFontSmoothingType());
 
         if (isStrikethrough()) {
             sb.append(", strikethrough");
diff a/modules/javafx.graphics/src/main/java/javafx/scene/text/TextFlow.java b/modules/javafx.graphics/src/main/java/javafx/scene/text/TextFlow.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/text/TextFlow.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/text/TextFlow.java
@@ -485,36 +485,25 @@
                 }
             };
         }
         return lineSpacing;
     }
+
     /**
      * The size of a tab stop in spaces.
-     *
-     * @return the {@code tabSize} property
+     * Values less than 1 are treated as 1.
      *
      * @defaultValue {@code 8}
      *
      * @since 14
      */
     private IntegerProperty tabSize;
 
-    /**
-     * Gets the size of a tab stop in spaces.
-     * @return the size of a tab in spaces
-     * @since 14
-     */
     public final int getTabSize() {
         return tabSize == null ? TextLayout.DEFAULT_TAB_SIZE : tabSize.get();
     }
 
-    /**
-     * Sets the size of a tab stop.
-     * @param spaces the size of a tab in spaces. Defaults to 8.
-     * Minimum is 1, lower values will be clamped to 1.
-     * @since 14
-    */
     public final void setTabSize(int spaces) {
         tabSizeProperty().set(spaces);
     }
 
     final IntegerProperty tabSizeProperty() {
@@ -523,11 +512,10 @@
                 @Override public Object getBean() { return TextFlow.this; }
                 @Override public String getName() { return "tabSize"; }
                 @Override public CssMetaData getCssMetaData() {
                     return StyleableProperties.TAB_SIZE;
                 }
-                @Override public void set(int v) { super.set((v < 1) ? 1 : v); }
                 @Override protected void invalidated() {
                     TextLayout layout = getTextLayout();
                     if (layout.setTabSize(get())) {
                         requestLayout();
                     }
diff a/modules/javafx.graphics/src/test/java/test/com/sun/javafx/pgstub/StubTextLayout.java b/modules/javafx.graphics/src/test/java/test/com/sun/javafx/pgstub/StubTextLayout.java
--- a/modules/javafx.graphics/src/test/java/test/com/sun/javafx/pgstub/StubTextLayout.java
+++ b/modules/javafx.graphics/src/test/java/test/com/sun/javafx/pgstub/StubTextLayout.java
@@ -194,12 +194,13 @@
         return new RectBounds();
     }
 
     @Override
     public boolean setTabSize(int spaces) {
-        if (spaces < 1)
+        if (spaces < 1) {
             spaces = 1;
+        }
         if (tabSize != spaces) {
             tabSize = spaces;
             return true;
         }
         return false;
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextTest.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/text/TextTest.java
@@ -246,11 +246,11 @@
         try {
             Text text = new Text("\tHello");
             root.getChildren().addAll(text);
             stage.show();
             tk.firePulse();
-            assertEquals(text.getTabSize(),8);
+            assertEquals(8, text.getTabSize());
             // initial width with default 8-space tab
             double widthT8 = text.getBoundsInLocal().getWidth();
             text.setTabSize(1);
             tk.firePulse();
             // width with tab at 1 spaces
@@ -263,10 +263,26 @@
             // width with tab at 4 spaces
             double widthT4 = text.getBoundsInLocal().getWidth();
             double expected = widthT8 - 4 * widthSpace;
             // should be approximately 4 space-widths shorter
             assertEquals(expected, widthT4, 0.5);
+
+            text.tabSizeProperty().set(5);
+            assertEquals(5, text.tabSizeProperty().get());
+            tk.firePulse();
+            double widthT5 = text.getBoundsInLocal().getWidth();
+            expected = widthT8 - 3 * widthSpace;
+            assertEquals(expected, widthT5, 0.5);
+
+            // Test clamping
+            text.tabSizeProperty().set(0);
+            assertEquals(0, text.tabSizeProperty().get());
+            assertEquals(0, text.getTabSize());
+            tk.firePulse();
+            double widthT0Clamp = text.getBoundsInLocal().getWidth();
+            // values < 1 are treated as 1
+            assertEquals(widthT1, widthT0Clamp, 0.5);
         } finally {
             stage.hide();
         }
   }
 }
