diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/java/JavaDOMUtils.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/java/JavaDOMUtils.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/java/JavaDOMUtils.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/java/JavaDOMUtils.h
@@ -25,11 +25,13 @@
 
 #pragma once
 
 #include <jni.h>
 
+#include <wtf/Ref.h>
 #include <wtf/RefPtr.h>
+#include <wtf/GetPtr.h>
 #include <wtf/text/WTFString.h>
 #include "ExceptionOr.h"
 
 // Note that a pointer to a Node is not necessarily the same address
 // as a pointer to an Element: a static_cast between the two is not
@@ -56,22 +58,44 @@
 void raiseNotSupportedErrorException(JNIEnv*);
 
 void raiseDOMErrorException(JNIEnv*, Exception&&);
 
 template<typename T> T raiseOnDOMError(JNIEnv*, ExceptionOr<T>&&);
+template<typename T> T* raiseOnDOMError(JNIEnv*, ExceptionOr<Ref<T>>&&);
+String raiseOnDOMError(JNIEnv*, ExceptionOr<String>&&);
 void raiseOnDOMError(JNIEnv*, ExceptionOr<void>&&);
 
 inline void raiseOnDOMError(JNIEnv* env, ExceptionOr<void>&& possibleException)
 {
     if (possibleException.hasException())
         raiseDOMErrorException(env, possibleException.releaseException());
 }
 
+inline String raiseOnDOMError(JNIEnv* env, ExceptionOr<String>&& exceptionOrReturnValue)
+{
+    if (exceptionOrReturnValue.hasException()) {
+        raiseDOMErrorException(env, exceptionOrReturnValue.releaseException());
+        return emptyString();
+    }
+    return exceptionOrReturnValue.releaseReturnValue();
+}
+
+template<typename T> inline T* raiseOnDOMError(JNIEnv* env, ExceptionOr<Ref<T>>&& exceptionOrReturnValue)
+{
+    if (exceptionOrReturnValue.hasException()) {
+        raiseDOMErrorException(env, exceptionOrReturnValue.releaseException());
+        return nullptr;
+    }
+    return WTF::getPtr(exceptionOrReturnValue.releaseReturnValue());
+}
+
 template<typename T> inline T raiseOnDOMError(JNIEnv* env, ExceptionOr<T>&& exceptionOrReturnValue)
 {
-    if (exceptionOrReturnValue.hasException())
+    if (exceptionOrReturnValue.hasException()) {
         raiseDOMErrorException(env, exceptionOrReturnValue.releaseException());
+        return static_cast<T>(NULL);
+    }
     return exceptionOrReturnValue.releaseReturnValue();
 }
 
 template <typename T> class JavaReturn {
     JNIEnv* m_env;
diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/DOM/JavaDocument.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/DOM/JavaDocument.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/DOM/JavaDocument.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/DOM/JavaDocument.cpp
@@ -1252,17 +1252,11 @@
 
 JNIEXPORT jlong JNICALL Java_com_sun_webkit_dom_DocumentImpl_createAttributeImpl(JNIEnv* env, jclass, jlong peer
     , jstring name)
 {
     WebCore::JSMainThreadNullState state;
-
-    auto result = IMPL->createAttribute(String(env, name));
-    if (result.hasException()) {
-        raiseDOMErrorException(env, result.releaseException());
-        return {};
-    }
-    return JavaReturn<Attr>(env, WTF::getPtr(result.releaseReturnValue()));
+    return JavaReturn<Attr>(env, WTF::getPtr(raiseOnDOMError(env, IMPL->createAttribute(String(env, name)))));
 }
 
 
 JNIEXPORT jlong JNICALL Java_com_sun_webkit_dom_DocumentImpl_createEntityReferenceImpl(JNIEnv* env, jclass, jlong, jstring)
 {
