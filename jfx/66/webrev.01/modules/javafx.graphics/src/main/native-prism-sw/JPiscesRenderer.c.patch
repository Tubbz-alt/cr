diff a/modules/javafx.graphics/src/main/native-prism-sw/JPiscesRenderer.c b/modules/javafx.graphics/src/main/native-prism-sw/JPiscesRenderer.c
--- a/modules/javafx.graphics/src/main/native-prism-sw/JPiscesRenderer.c
+++ b/modules/javafx.graphics/src/main/native-prism-sw/JPiscesRenderer.c
@@ -47,11 +47,10 @@
 static jfieldID fieldIds[RENDERER_LAST + 1];
 static jboolean fieldIdsInitialized = JNI_FALSE;
 static jboolean initializeRendererFieldIds(JNIEnv *env, jobject objectHandle);
 
 static int toPiscesCoords(unsigned int ff);
-static void renderer_finalize(JNIEnv *env, jobject objectHandle);
 static void fillAlphaMask(Renderer* rdr, jint minX, jint minY, jint maxX, jint maxY,
     JNIEnv *env, jobject this, jint maskType, jbyteArray jmask, jint x, jint y,
     jint maskWidth, jint maskHeight, jint offset, jint stride);
 
 JNIEXPORT void JNICALL
@@ -80,18 +79,15 @@
         JNI_ThrowNew(env, "java/lang/IllegalStateException", "");
     }
 }
 
 JNIEXPORT void JNICALL
-Java_com_sun_pisces_PiscesRenderer_nativeFinalize(JNIEnv* env,
-                                                  jobject objectHandle)
+Java_com_sun_pisces_PiscesRenderer_disposeNative(JNIEnv *env, jclass cls, jlong nativePtr)
 {
-    renderer_finalize(env, objectHandle);
-
-    if (JNI_TRUE == readAndClearMemErrorFlag()) {
-        JNI_ThrowNew(env, "java/lang/OutOfMemoryError",
-                     "Allocation of internal renderer buffer failed.");
+    Renderer* rdr = (Renderer*) JLongToPointer(nativePtr);
+    if (rdr != NULL) {
+        renderer_dispose(rdr);
     }
 }
 
 JNIEXPORT void JNICALL
 Java_com_sun_pisces_PiscesRenderer_setClipImpl(JNIEnv* env, jobject objectHandle,
@@ -291,28 +287,10 @@
     return (Renderer*)JLongToPointer(
                 (*env)->GetLongField(env, objectHandle,
                                      fieldIds[RENDERER_NATIVE_PTR]));
 }
 
-static void
-renderer_finalize(JNIEnv *env, jobject objectHandle) {
-    Renderer* rdr;
-
-    if (!fieldIdsInitialized) {
-        return;
-    }
-
-    rdr = (Renderer*)JLongToPointer((*env)->GetLongField(env, objectHandle,
-                                    fieldIds[RENDERER_NATIVE_PTR]));
-
-    if (rdr != (Renderer*)0) {
-        renderer_dispose(rdr);
-        (*env)->SetLongField(env, objectHandle, fieldIds[RENDERER_NATIVE_PTR],
-                         (jlong)0);
-    }
-}
-
 static jboolean
 initializeObjectFieldIds(JNIEnv *env,
     jobject objectHandle,
     const char * className,
     FieldDesc * fieldDesc,
