diff a/build.properties b/build.properties
--- a/build.properties
+++ b/build.properties
@@ -37,11 +37,11 @@
 # to gradle when the BUILD_MILESTONE env variable is set to "fcs". This
 # will cause the suffix to become blank.
 jfx.release.suffix=-ea
 
 # UPDATE THE FOLLOWING VALUES FOR A NEW RELEASE
-jfx.release.major.version=14
+jfx.release.major.version=15
 jfx.release.minor.version=0
 jfx.release.security.version=0
 jfx.release.patch.version=0
 
 # Note: The release version is now calculated in build.gradle as the
@@ -54,12 +54,12 @@
 #
 ##############################################################################
 
 javadoc.bottom=<small><a href="http://bugreport.java.com/bugreport/">Report a bug or suggest an enhancement</a><br> Copyright &copy; 2008, 2020, Oracle and/or its affiliates. All rights reserved.</small>
 
-javadoc.title=JavaFX 14
-javadoc.header=JavaFX&nbsp;14
+javadoc.title=JavaFX 15
+javadoc.header=JavaFX&nbsp;15
 
 ##############################################################################
 #
 # Build properties for defining the version of JDK used to build FX
 #
diff a/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java b/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
--- a/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
+++ b/modules/javafx.base/src/main/java/javafx/collections/FXCollections.java
@@ -1007,10 +1007,20 @@
             this.backingList = list;
             this.mutex = mutex;
         }
 
         SynchronizedList(List<T> list) {
+            this.backingList = list;
+            this.mutex = this;
+        }
+
+        SynchronizedList(List<T> list) {
+            this.backingList = list;
+            this.mutex = this;
+        }
+
+        SynchronizedList(List<T> list) {
             this.backingList = list;
             this.mutex = this;
         }
 
         @Override
diff a/modules/javafx.base/src/test/java/test/com/sun/javafx/runtime/VersionInfoTest.java b/modules/javafx.base/src/test/java/test/com/sun/javafx/runtime/VersionInfoTest.java
--- a/modules/javafx.base/src/test/java/test/com/sun/javafx/runtime/VersionInfoTest.java
+++ b/modules/javafx.base/src/test/java/test/com/sun/javafx/runtime/VersionInfoTest.java
@@ -87,11 +87,11 @@
     @Test
     public void testMajorVersion() {
         String version = VersionInfo.getVersion();
         // Need to update major version number when we develop the next
         // major release.
-        assertTrue(version.startsWith("14"));
+        assertTrue(version.startsWith("15"));
         String runtimeVersion = VersionInfo.getRuntimeVersion();
         assertTrue(runtimeVersion.startsWith(version));
     }
 
     @Test
diff a/modules/javafx.base/src/test/java/test/javafx/collections/FXCollectionsTest.java b/modules/javafx.base/src/test/java/test/javafx/collections/FXCollectionsTest.java
--- a/modules/javafx.base/src/test/java/test/javafx/collections/FXCollectionsTest.java
+++ b/modules/javafx.base/src/test/java/test/javafx/collections/FXCollectionsTest.java
@@ -670,10 +670,183 @@
         set.addAll(Arrays.asList("foo6", "foo7"));
         assertTrue(set.containsAll(Arrays.asList("foo", "foo2", "foo3", "foo6", "foo7")));
         assertEquals(5, set.size());
     }
 
+    @Test
+    public void synchronizedMapIterationProtectionTest() {
+        testIterationProtection(FXCollections.synchronizedObservableMap(FXCollections.observableHashMap()), this::putRandomValue, this::copyMap);
+    }
+
+    private void putRandomValue(Map<Integer, Integer> map, Random rnd) {
+        map.put(rnd.nextInt(1000), rnd.nextInt());
+    }
+
+    private void copyMap(Map<Integer, Integer> map) {
+        new HashMap<>(map);
+    }
+
+    @Test
+    public void synchronizedSetIterationProtectionTest() {
+        testIterationProtection(FXCollections.synchronizedObservableSet(FXCollections.observableSet()), this::addRandomValue, this::copySet);
+    }
+
+    private void addRandomValue(Set<Integer> set, Random rnd) {
+        set.add(rnd.nextInt(1000));
+    }
+
+    private void copySet(Set<Integer> set) {
+        new HashSet<>(set);
+    }
+
+    @Test
+    public void synchronizedListIterationProtectionTest() {
+        testIterationProtection(FXCollections.synchronizedObservableList(FXCollections.observableArrayList()), this::modifyList, this::iterateOverList);
+    }
+
+    private void modifyList(List<Integer> list, Random rnd) {
+        if (rnd.nextInt(1000) > list.size()) {
+            list.add(rnd.nextInt(1000));
+        } else {
+            list.remove(rnd.nextInt(list.size()));
+        }
+    }
+
+    private void iterateOverList(List<Integer> list) {
+        Iterator<Integer> it = list.iterator();
+        while (it.hasNext()) {
+            it.next();
+        }
+    }
+
+    public <V> void testIterationProtection(V collection, BiConsumer<V, Random> backgroundChanger, Consumer<V> protectedCode) {
+        CollectionChangeThread<V> thread = new CollectionChangeThread<>(collection, backgroundChanger);
+        thread.start();
+        for (int i = 0; i < 10000; i++) {
+            try {
+                synchronized (collection) {
+                    protectedCode.accept(collection);
+                }
+            } catch (ConcurrentModificationException e) {
+                fail("ConcurrentModificationException should not be thrown");
+            }
+        }
+        thread.terminate();
+    }
+
+    private static class CollectionChangeThread<V> extends Thread {
+        private boolean shallRun = true;
+        private V collection;
+        private BiConsumer<V, Random> backgroundChanger;
+        private Random rnd = new Random();
+
+        public CollectionChangeThread(V collection, BiConsumer<V, Random> backgroundChanger) {
+            super("FXCollectionsTest.CollectionChangeThread");
+            this.collection = collection;
+            this.backgroundChanger = backgroundChanger;
+        }
+
+        @Override
+        public void run() {
+            while (shallRun) {
+                backgroundChanger.accept(collection, rnd);
+            }
+        }
+
+        public void terminate() {
+            shallRun = false;
+        }
+    }
+
+
+    @Test
+    public void synchronizedMapIterationProtectionTest() {
+        testIterationProtection(FXCollections.synchronizedObservableMap(FXCollections.observableHashMap()), this::putRandomValue, this::copyMap);
+    }
+
+    private void putRandomValue(Map<Integer, Integer> map, Random rnd) {
+        map.put(rnd.nextInt(1000), rnd.nextInt());
+    }
+
+    private void copyMap(Map<Integer, Integer> map) {
+        new HashMap<>(map);
+    }
+
+    @Test
+    public void synchronizedSetIterationProtectionTest() {
+        testIterationProtection(FXCollections.synchronizedObservableSet(FXCollections.observableSet()), this::addRandomValue, this::copySet);
+    }
+
+    private void addRandomValue(Set<Integer> set, Random rnd) {
+        set.add(rnd.nextInt(1000));
+    }
+
+    private void copySet(Set<Integer> set) {
+        new HashSet<>(set);
+    }
+
+    @Test
+    public void synchronizedListIterationProtectionTest() {
+        testIterationProtection(FXCollections.synchronizedObservableList(FXCollections.observableArrayList()), this::modifyList, this::iterateOverList);
+    }
+
+    private void modifyList(List<Integer> list, Random rnd) {
+        if (rnd.nextInt(1000) > list.size()) {
+            list.add(rnd.nextInt(1000));
+        } else {
+            list.remove(rnd.nextInt(list.size()));
+        }
+    }
+
+    private void iterateOverList(List<Integer> list) {
+        Iterator<Integer> it = list.iterator();
+        while (it.hasNext()) {
+            it.next();
+        }
+    }
+
+    public <V> void testIterationProtection(V collection, BiConsumer<V, Random> backgroundChanger, Consumer<V> protectedCode) {
+        CollectionChangeThread<V> thread = new CollectionChangeThread<>(collection, backgroundChanger);
+        thread.start();
+        for (int i = 0; i < 10000; i++) {
+            try {
+                synchronized (collection) {
+                    protectedCode.accept(collection);
+                }
+            } catch (ConcurrentModificationException e) {
+                thread.terminate();
+                fail("ConcurrentModificationException should not be thrown");
+            }
+        }
+        thread.terminate();
+    }
+
+    private static class CollectionChangeThread<V> extends Thread {
+        private boolean shallRun = true;
+        private V collection;
+        private BiConsumer<V, Random> backgroundChanger;
+        private Random rnd = new Random();
+
+        public CollectionChangeThread(V collection, BiConsumer<V, Random> backgroundChanger) {
+            super("FXCollectionsTest.CollectionChangeThread");
+            this.collection = collection;
+            this.backgroundChanger = backgroundChanger;
+        }
+
+        @Override
+        public void run() {
+            while (shallRun) {
+                backgroundChanger.accept(collection, rnd);
+            }
+        }
+
+        public void terminate() {
+            shallRun = false;
+        }
+    }
+
+
     @Test
     public void synchronizedMapIterationProtectionTest() {
         testIterationProtection(FXCollections.synchronizedObservableMap(FXCollections.observableHashMap()), this::putRandomValue, this::copyMap);
     }
 
diff a/modules/javafx.web/src/main/java/javafx/scene/web/WebView.java b/modules/javafx.web/src/main/java/javafx/scene/web/WebView.java
--- a/modules/javafx.web/src/main/java/javafx/scene/web/WebView.java
+++ b/modules/javafx.web/src/main/java/javafx/scene/web/WebView.java
@@ -992,16 +992,17 @@
             screenX = screenPoint.getX();
             screenY = screenPoint.getY();
         }
 
         final Integer id = idMap.get(type);
-        if (id == null) {
+        final Integer button = idMap.get(ev.getButton());
+        if (id == null || button == null) {
             // not supported by webkit
             return;
         }
         WCMouseEvent mouseEvent =
-                new WCMouseEvent(id, idMap.get(ev.getButton()),
+                new WCMouseEvent(id, button,
                     ev.getClickCount(), (int) x, (int) y,
                     (int) screenX, (int) screenY,
                     System.currentTimeMillis(),
                     ev.isShiftDown(), ev.isControlDown(), ev.isAltDown(),
                     ev.isMetaDown(), ev.isPopupTrigger());
diff a/modules/javafx.web/src/test/java/test/javafx/scene/web/WebViewTest.java b/modules/javafx.web/src/test/java/test/javafx/scene/web/WebViewTest.java
--- a/modules/javafx.web/src/test/java/test/javafx/scene/web/WebViewTest.java
+++ b/modules/javafx.web/src/test/java/test/javafx/scene/web/WebViewTest.java
@@ -28,11 +28,13 @@
 import static org.junit.Assert.assertEquals;
 
 import java.io.File;
 import java.util.concurrent.FutureTask;
 
-import javafx.application.Platform;
+import javafx.event.Event;
+import javafx.scene.input.MouseButton;
+import javafx.scene.input.MouseEvent;
 import javafx.scene.web.WebEngineShim;
 import javafx.scene.web.WebView;
 
 import org.junit.Test;
 
@@ -52,10 +54,22 @@
 
         checkFontScale(view, SCALE);
         checkZoom(view, ZOOM);
     }
 
+    @Test public void testForwardMouseButton() {
+        WebView view = getView();
+        Event forward = new MouseEvent(MouseEvent.MOUSE_PRESSED, 0, 0, 0, 0, MouseButton.FORWARD, 1, false, false, false, false, false, false, false, false, true, true, false, true, null);
+        view.fireEvent(forward);    // must not throw NullPointerException (JDK-8236912)
+    }
+
+    @Test public void testBackMouseButton() {
+        WebView view = getView();
+        Event back = new MouseEvent(MouseEvent.MOUSE_PRESSED, 0, 0, 0, 0, MouseButton.BACK, 1, false, false, false, false, false, false, false, true, false, true, false, true, null);
+        view.fireEvent(back);    // must not throw NullPointerException (JDK-8236912)
+    }
+
     void checkFontScale(WebView view, float scale) {
         assertEquals("WebView.fontScale", scale, view.getFontScale(), DELTA);
         assertEquals("WebPage.zoomFactor",
                 scale, WebEngineShim.getPage(view.getEngine()).getZoomFactor(true), DELTA);
     }
