diff a/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java b/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
--- a/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
+++ b/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
@@ -444,17 +444,15 @@
     protected void processMouseEvent(MouseEvent e) {
         if ((e.getID() == MouseEvent.MOUSE_PRESSED) &&
             (e.getButton() == MouseEvent.BUTTON1)) {
             if (isFocusable() && !hasFocus()) {
                 requestFocus();
-                // this focus request event goes to eventqueue and will be
-                // asynchronously handled so MOUSE_PRESSED event will not be
-                // honoured by FX immediately due to lack of focus in fx
-                // component. Fire the same MOUSE_PRESSED event after
-                // requestFocus() so that 2nd mouse press will be honoured
-                // since now fx have focus
-                jfxPanelIOP.postEvent(this, e);
+                // This fixes JDK-8087914 without causing JDK-8200224
+                // It is safe, because in JavaFX only the method "setFocused(true)" is called,
+                // which doesn't have any side-effects when called multiple times.
+                int focusCause = AbstractEvents.FOCUSEVENT_ACTIVATED;
+                stagePeer.setFocused(true, focusCause);
             }
         }
 
         sendMouseEventToFX(e);
         super.processMouseEvent(e);
diff a/modules/javafx.swing/src/test/java/test/javafx/embed/swing/JFXPanelTest.java b/modules/javafx.swing/src/test/java/test/javafx/embed/swing/JFXPanelTest.java
--- /dev/null
+++ b/modules/javafx.swing/src/test/java/test/javafx/embed/swing/JFXPanelTest.java
@@ -0,0 +1,131 @@
+/*
+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.javafx.embed.swing;
+
+import javafx.application.Application;
+import javafx.application.Platform;
+import javafx.embed.swing.JFXPanel;
+import javafx.scene.Group;
+import javafx.scene.shape.Circle;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+import javax.swing.JPanel;
+import javax.swing.JFrame;
+import javax.swing.SwingUtilities;
+import junit.framework.AssertionFailedError;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import java.awt.Dimension;
+import java.awt.event.MouseEvent;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+
+public class JFXPanelTest {
+
+    // Used to launch the application before running any test
+    private static final CountDownLatch launchLatch = new CountDownLatch(1);
+    private static boolean setupIsDone = false;
+
+    @BeforeClass
+    public static void doSetupOnce() {
+        if (setupIsDone) return;
+        Platform.startup(() -> {
+            Platform.setImplicitExit(false);
+            launchLatch.countDown();
+        });
+
+        try {
+            if (!launchLatch.await(5000, TimeUnit.MILLISECONDS)) {
+                throw new AssertionFailedError("Timeout waiting for Application to launch");
+            }
+        } catch (InterruptedException ex) {
+            AssertionFailedError err = new AssertionFailedError("Unexpected exception");
+            err.initCause(ex);
+            throw err;
+        }
+
+        assertEquals(0, launchLatch.getCount());
+        setupIsDone = true;
+    }
+
+    static class TestFXPanel extends JFXPanel {
+        protected void processMouseEventPublic(MouseEvent e) {
+            processMouseEvent(e);
+        }
+    };
+
+    @Test
+    public void testNoDoubleClickOnFirstClick() throws Exception {
+
+        final CountDownLatch firstPressedEventLatch = new CountDownLatch(1);
+
+        // It's an array, so we can mutate it inside of lambda statement
+        final int[] pressedEventCounter = {0};
+
+        SwingUtilities.invokeLater(() -> {
+            TestFXPanel fxPnl = new TestFXPanel();
+            fxPnl.setPreferredSize(new Dimension(100, 100));
+            JFrame jframe = new JFrame();
+            JPanel jpanel = new JPanel();
+            jpanel.add(fxPnl);
+            jframe.setContentPane(jpanel);
+            jframe.setVisible(true);
+
+            Platform.runLater(() -> {
+                Group grp = new Group();
+                Scene scene = new Scene(new Group());
+                scene.getRoot().requestFocus();
+
+                scene.addEventHandler(javafx.scene.input.MouseEvent.MOUSE_PRESSED, (event -> {
+                    pressedEventCounter[0] += 1;
+                    firstPressedEventLatch.countDown();
+                }));
+
+                fxPnl.setScene(scene);
+
+                SwingUtilities.invokeLater(() -> {
+                    MouseEvent e = new MouseEvent(fxPnl, MouseEvent.MOUSE_PRESSED, 0, MouseEvent.BUTTON1_DOWN_MASK,
+                            5, 5, 1, false, MouseEvent.BUTTON1);
+
+                    fxPnl.processMouseEventPublic(e);
+                });
+            });
+        });
+
+        if (!firstPressedEventLatch.await(5000, TimeUnit.MILLISECONDS)) {
+            throw new Exception("No first click detected.");
+        };
+
+        Thread.sleep(100); // there should be no pressed event after the initial one. Let's wait for 0.1s and check again.
+        assertEquals(1, pressedEventCounter[0]);
+    }
+}
diff a/modules/javafx.swing/src/test/java/test/javafx/embed/swing/SwingFXUtilsTest.java b/modules/javafx.swing/src/test/java/test/javafx/embed/swing/SwingFXUtilsTest.java
--- a/modules/javafx.swing/src/test/java/test/javafx/embed/swing/SwingFXUtilsTest.java
+++ b/modules/javafx.swing/src/test/java/test/javafx/embed/swing/SwingFXUtilsTest.java
@@ -41,50 +41,21 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+
 public class SwingFXUtilsTest {
     static final boolean verbose = false;
 
     // Used to launch the application before running any test
     private static final CountDownLatch launchLatch = new CountDownLatch(1);
 
-    // Application class. An instance is created and initialized before running
-    // the first test, and it lives through the execution of all tests.
-    public static class MyApp extends Application {
-        @Override
-        public void start(Stage primaryStage) throws Exception {
-            Platform.setImplicitExit(false);
-            assertTrue(Platform.isFxApplicationThread());
-            assertNotNull(primaryStage);
-
-            launchLatch.countDown();
-        }
-    }
 
     @BeforeClass
     public static void doSetupOnce() {
-        // Start the Application
-        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();
-
-        try {
-            if (!launchLatch.await(5000, TimeUnit.MILLISECONDS)) {
-                throw new AssertionFailedError("Timeout waiting for Application to launch");
-            }
-        } catch (InterruptedException ex) {
-            AssertionFailedError err = new AssertionFailedError("Unexpected exception");
-            err.initCause(ex);
-            throw err;
-        }
-
-        assertEquals(0, launchLatch.getCount());
-    }
-
-    @AfterClass
-    public static void doTeardownOnce() {
-        Platform.exit();
+        JFXPanelTest.doSetupOnce();
     }
 
     @Test
     public void testFromFXImg() {
         testFromFXImg("alpha.png");
