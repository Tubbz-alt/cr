diff a/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java b/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
--- a/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
+++ b/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
@@ -444,17 +444,15 @@
     protected void processMouseEvent(MouseEvent e) {
         if ((e.getID() == MouseEvent.MOUSE_PRESSED) &&
             (e.getButton() == MouseEvent.BUTTON1)) {
             if (isFocusable() && !hasFocus()) {
                 requestFocus();
-                // this focus request event goes to eventqueue and will be
-                // asynchronously handled so MOUSE_PRESSED event will not be
-                // honoured by FX immediately due to lack of focus in fx
-                // component. Fire the same MOUSE_PRESSED event after
-                // requestFocus() so that 2nd mouse press will be honoured
-                // since now fx have focus
-                jfxPanelIOP.postEvent(this, e);
+                // This fixes JDK-8087914 without causing JDK-8200224
+                // It is safe, because in JavaFX only the method "setFocused(true)" is called,
+                // which doesn't have any side-effects when called multiple times.
+                int focusCause = AbstractEvents.FOCUSEVENT_ACTIVATED;
+                stagePeer.setFocused(true, focusCause);
             }
         }
 
         sendMouseEventToFX(e);
         super.processMouseEvent(e);
diff a/tests/system/src/test/java/test/javafx/embed/swing/SwingFXUtilsTest.java b/tests/system/src/test/java/test/javafx/embed/swing/SwingFXUtilsTest.java
--- a/tests/system/src/test/java/test/javafx/embed/swing/SwingFXUtilsTest.java
+++ b/tests/system/src/test/java/test/javafx/embed/swing/SwingFXUtilsTest.java
@@ -78,15 +78,10 @@
         }
 
         assertEquals(0, launchLatch.getCount());
     }
 
-    @AfterClass
-    public static void doTeardownOnce() {
-        Platform.exit();
-    }
-
     @Test
     public void testFromFXImg() {
         testFromFXImg("alpha.png");
         testFromFXImg("opaque.gif");
         testFromFXImg("opaque.jpg");
diff a/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelTest.java b/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelTest.java
--- a/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelTest.java
+++ b/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelTest.java
@@ -23,25 +23,25 @@
  * questions.
  */
 package test.robot.javafx.embed.swing;
 
 import com.sun.javafx.PlatformUtil;
+import javafx.application.Platform;
+import javafx.scene.Group;
+import javafx.scene.Scene;
 import org.junit.Assume;
 import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.AfterClass;
 import org.junit.Test;
 
 import javafx.embed.swing.JFXPanel;
 
-import javax.swing.JFrame;
-import javax.swing.JMenuBar;
-import javax.swing.JMenu;
-import javax.swing.JMenuItem;
-import javax.swing.SwingUtilities;
-import java.awt.Robot;
+import javax.swing.*;
+import java.awt.*;
 import java.awt.event.InputEvent;
+import java.awt.event.MouseEvent;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
 public class JFXPanelTest {
     private static Robot robot;
@@ -105,10 +105,64 @@
         });
         endLatch.await(5, TimeUnit.SECONDS);
         Assert.assertTrue("It seems FX initialization is deadlocked", stop);
     }
 
+    class TestFXPanel extends JFXPanel {
+        protected void processMouseEventPublic(MouseEvent e) {
+            processMouseEvent(e);
+        }
+    };
+
+    @Test
+    public void testNoDoubleClickOnFirstClick() throws Exception {
+
+        CountDownLatch firstPressedEventLatch = new CountDownLatch(1);
+
+        // It's an array, so we can mutate it inside of lambda statement
+        int[] pressedEventCounter = {0};
+
+        SwingUtilities.invokeLater(() -> {
+            TestFXPanel fxPnl = new TestFXPanel();
+            fxPnl.setPreferredSize(new Dimension(100, 100));
+            JFrame jframe = new JFrame();
+            JPanel jpanel = new JPanel();
+            jpanel.add(fxPnl);
+            jframe.setContentPane(jpanel);
+            jframe.pack();
+            jframe.setVisible(true);
+
+            Platform.runLater(() -> {
+                Group grp = new Group();
+                Scene scene = new Scene(new Group());
+
+                scene.addEventHandler(javafx.scene.input.MouseEvent.MOUSE_PRESSED, (event -> {
+                    pressedEventCounter[0] += 1;
+                    firstPressedEventLatch.countDown();
+                }));
+
+                fxPnl.setScene(scene);
+
+                SwingUtilities.invokeLater(() -> {
+                    MouseEvent e = new MouseEvent(fxPnl, MouseEvent.MOUSE_PRESSED, 0, MouseEvent.BUTTON1_DOWN_MASK,
+                            5, 5, 1, false, MouseEvent.BUTTON1);
+
+                    fxPnl.processMouseEventPublic(e);
+                });
+            });
+        });
+
+        if(!firstPressedEventLatch.await(5000, TimeUnit.MILLISECONDS)) {
+            throw new Exception();
+        };
+
+        Thread.sleep(500); // there should be no pressed event after the initial one. Let's wait for 0.5s and check again.
+
+        Assert.assertEquals(1, pressedEventCounter[0]);
+    }
+
+
     @AfterClass
     public static void teardown() throws Exception {
         stop = true;
         if (frame != null) {
             SwingUtilities.invokeLater(frame::dispose);
