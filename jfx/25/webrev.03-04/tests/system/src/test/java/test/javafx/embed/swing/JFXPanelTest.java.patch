diff a/tests/system/src/test/java/test/javafx/embed/swing/JFXPanelTest.java b/tests/system/src/test/java/test/javafx/embed/swing/JFXPanelTest.java
--- a/tests/system/src/test/java/test/javafx/embed/swing/JFXPanelTest.java
+++ b/tests/system/src/test/java/test/javafx/embed/swing/JFXPanelTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -30,11 +30,10 @@
 import org.junit.BeforeClass;
 import org.junit.AfterClass;
 import org.junit.Test;
 import junit.framework.AssertionFailedError;
 
-
 import javax.swing.JFrame;
 import javax.swing.JMenu;
 import javax.swing.JMenuItem;
 import javax.swing.JMenuBar;
 import javax.swing.JPanel;
@@ -67,33 +66,27 @@
             launchLatch.countDown();
         }
     }
 
     @BeforeClass
-    public static void doSetupOnce() {
+    public static void doSetupOnce() throws Exception {
         // Start the Application
         new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();
 
-        try {
-            if (!launchLatch.await(5000, TimeUnit.MILLISECONDS)) {
-                throw new AssertionFailedError("Timeout waiting for Application to launch");
-            }
-        } catch (InterruptedException ex) {
-            AssertionFailedError err = new AssertionFailedError("Unexpected exception");
-            err.initCause(ex);
-            throw err;
+        if (!launchLatch.await(5000, TimeUnit.MILLISECONDS)) {
+            throw new AssertionFailedError("Timeout waiting for Application to launch");
         }
 
         Assert.assertEquals(0, launchLatch.getCount());
     }
 
     @AfterClass
     public static void doTeardownOnce() {
         Platform.exit();
     }
 
-    class TestFXPanel extends JFXPanel {
+    static class TestFXPanel extends JFXPanel {
         protected void processMouseEventPublic(MouseEvent e) {
             processMouseEvent(e);
         }
     };
 
@@ -104,42 +97,43 @@
 
         // It's an array, so we can mutate it inside of lambda statement
         int[] pressedEventCounter = {0};
 
         SwingUtilities.invokeLater(() -> {
+            TestFXPanel dummyFXPanel = new TestFXPanel();
+            dummyFXPanel.setPreferredSize(new Dimension(100, 100));
             TestFXPanel fxPnl = new TestFXPanel();
             fxPnl.setPreferredSize(new Dimension(100, 100));
             JFrame jframe = new JFrame();
             JPanel jpanel = new JPanel();
+            jpanel.add(dummyFXPanel);
             jpanel.add(fxPnl);
             jframe.setContentPane(jpanel);
             jframe.pack();
             jframe.setVisible(true);
 
             Platform.runLater(() -> {
-                Group grp = new Group();
+                Scene dummyScene = new Scene(new Group());
+                dummyFXPanel.setScene(dummyScene);
                 Scene scene = new Scene(new Group());
+                fxPnl.setScene(scene);
 
                 scene.addEventHandler(javafx.scene.input.MouseEvent.MOUSE_PRESSED, (event -> {
                     pressedEventCounter[0] += 1;
                     firstPressedEventLatch.countDown();
                 }));
 
-                fxPnl.setScene(scene);
-
                 SwingUtilities.invokeLater(() -> {
                     MouseEvent e = new MouseEvent(fxPnl, MouseEvent.MOUSE_PRESSED, 0, MouseEvent.BUTTON1_DOWN_MASK,
                             5, 5, 1, false, MouseEvent.BUTTON1);
 
                     fxPnl.processMouseEventPublic(e);
                 });
             });
         });
 
-        if(!firstPressedEventLatch.await(5000, TimeUnit.MILLISECONDS)) {
-            throw new Exception();
-        };
+        Assert.assertTrue(firstPressedEventLatch.await(5000, TimeUnit.MILLISECONDS));
 
         Thread.sleep(500); // there should be no pressed event after the initial one. Let's wait for 0.5s and check again.
 
         Assert.assertEquals(1, pressedEventCounter[0]);
     }
