diff a/modules/javafx.base/src/main/java/com/sun/javafx/PlatformUtil.java b/modules/javafx.base/src/main/java/com/sun/javafx/PlatformUtil.java
--- a/modules/javafx.base/src/main/java/com/sun/javafx/PlatformUtil.java
+++ b/modules/javafx.base/src/main/java/com/sun/javafx/PlatformUtil.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -69,10 +69,11 @@
     private static final boolean WINDOWS_7_OR_LATER = WINDOWS && versionNumberGreaterThanOrEqualTo(6.1f);
     private static final boolean MAC = os.startsWith("Mac");
     private static final boolean LINUX = os.startsWith("Linux") && !ANDROID;
     private static final boolean SOLARIS = os.startsWith("SunOS");
     private static final boolean IOS = os.startsWith("iOS");
+    private static final boolean STATIC_BUILD = "Substrate VM".equals(System.getProperty("java.vm.name"));
 
     /**
      * Utility method used to determine whether the version number as
      * reported by system properties is greater than or equal to a given
      * value.
@@ -175,10 +176,17 @@
      */
     public static boolean isIOS(){
         return IOS;
     }
 
+    /**
+     * Returns true if the current runtime is a statically linked image
+     */
+    public static boolean isStaticBuild(){
+        return STATIC_BUILD;
+    }
+
     private static void loadPropertiesFromFile(final File file) {
         Properties p = new Properties();
         try {
             InputStream in = new FileInputStream(file);
             p.load(in);
diff a/modules/javafx.base/src/main/java/module-info.java b/modules/javafx.base/src/main/java/module-info.java
--- a/modules/javafx.base/src/main/java/module-info.java
+++ b/modules/javafx.base/src/main/java/module-info.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -47,10 +47,11 @@
 
     exports com.sun.javafx to
         javafx.controls,
         javafx.graphics,
         javafx.fxml,
+        javafx.media,
         javafx.swing;
     exports com.sun.javafx.beans to
         javafx.controls,
         javafx.fxml,
         javafx.graphics;
diff a/modules/javafx.media/src/main/java/com/sun/media/jfxmedia/locator/ConnectionHolder.java b/modules/javafx.media/src/main/java/com/sun/media/jfxmedia/locator/ConnectionHolder.java
--- a/modules/javafx.media/src/main/java/com/sun/media/jfxmedia/locator/ConnectionHolder.java
+++ b/modules/javafx.media/src/main/java/com/sun/media/jfxmedia/locator/ConnectionHolder.java
@@ -256,11 +256,11 @@
         }
 
         boolean isSeekable() {
             return (urlConnection instanceof HttpURLConnection) ||
                    (urlConnection instanceof JarURLConnection) ||
-                   isJRT();
+                   isJRT() || isResource();
         }
 
         boolean isRandomAccess() {
             return false;
         }
@@ -297,11 +297,11 @@
                 } finally {
                     if (tmpURLConnection != null) {
                         Locator.closeConnection(tmpURLConnection);
                     }
                 }
-            } else if ((urlConnection instanceof JarURLConnection) || isJRT()) {
+            } else if ((urlConnection instanceof JarURLConnection) || isJRT() || isResource()) {
                 try {
                     closeConnection();
 
                     urlConnection = uri.toURL().openConnection();
 
@@ -340,10 +340,16 @@
 
         private boolean isJRT() {
             String scheme = uri.getScheme().toLowerCase();
             return "jrt".equals(scheme);
         }
+
+        private boolean isResource() {
+            String scheme = uri.getScheme().toLowerCase();
+            return "resource".equals(scheme);
+        }
+
     }
 
     // A "ConnectionHolder" that "reads" from a ByteBuffer, generally loaded from
     // some unsupported or buggy source
     private static class MemoryConnectionHolder extends ConnectionHolder {
diff a/modules/javafx.media/src/main/java/com/sun/media/jfxmedia/locator/Locator.java b/modules/javafx.media/src/main/java/com/sun/media/jfxmedia/locator/Locator.java
--- a/modules/javafx.media/src/main/java/com/sun/media/jfxmedia/locator/Locator.java
+++ b/modules/javafx.media/src/main/java/com/sun/media/jfxmedia/locator/Locator.java
@@ -415,11 +415,11 @@
                                     isMediaUnAvailable = true;
                                 }
                             }
 
                             // FIXME: get cache settings from server, honor them
-                        } else if (scheme.equals("file") || scheme.equals("jar") || scheme.equals("jrt")) {
+                        } else if (scheme.equals("file") || scheme.equals("jar") || scheme.equals("jrt") || (scheme.equals("resource")) ) {
                             InputStream stream = getInputStream(uri);
                             stream.close();
                             isConnected = true;
                             contentType = MediaUtils.filenameToContentType(uriString); // We need to provide at least something
                         }
diff a/modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/platform/PlatformManager.java b/modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/platform/PlatformManager.java
--- a/modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/platform/PlatformManager.java
+++ b/modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/platform/PlatformManager.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,10 +23,11 @@
  * questions.
  */
 
 package com.sun.media.jfxmediaimpl.platform;
 
+import com.sun.javafx.PlatformUtil;
 import com.sun.media.jfxmedia.Media;
 import com.sun.media.jfxmedia.MediaPlayer;
 import com.sun.media.jfxmedia.MetadataParser;
 import com.sun.media.jfxmedia.locator.Locator;
 import com.sun.media.jfxmedia.logging.Logger;
@@ -197,10 +198,13 @@
                         }
                     }
                 }
             }
         }
+        if (PlatformUtil.isStaticBuild()) {
+            outProtocols.add("resource");
+        }
 
         return outProtocols;
     }
 
     public MetadataParser createMetadataParser(Locator source) {
diff a/modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/platform/gstreamer/GSTPlatform.java b/modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/platform/gstreamer/GSTPlatform.java
--- a/modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/platform/gstreamer/GSTPlatform.java
+++ b/modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/platform/gstreamer/GSTPlatform.java
@@ -60,11 +60,12 @@
      */
     private static final String[] PROTOCOLS = {
         "file",
         "http",
         "https",
-        "jrt"
+        "jrt",
+        "resource"
     };
 
     private static GSTPlatform globalInstance = null;
 
     @Override
diff a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gst.c b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gst.c
--- a/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gst.c
+++ b/modules/javafx.media/src/main/native/gstreamer/gstreamer-lite/gstreamer/gst/gst.c
@@ -120,10 +120,17 @@
 #include "gst-i18n-lib.h"
 #include <locale.h>             /* for LC_ALL */
 
 #include "gst.h"
 
+#ifdef GSTREAMER_LITE
+#ifdef STATIC_BUILD
+gboolean fxplugins_init (GstPlugin * plugin);
+gboolean fxavplugins_init (GstPlugin * plugin);
+#endif // STATIC_BUILD
+#endif // GSTREAMER_LITE
+
 #define GST_CAT_DEFAULT GST_CAT_GST_INIT
 
 #define MAX_PATH_SPLIT  16
 #define GST_PLUGIN_SEPARATOR ","
 
@@ -816,10 +823,20 @@
 #if defined(GSTREAMER_LITE)
   gst_plugin_register_static (GST_VERSION_MAJOR, GST_VERSION_MINOR,
       "gstplugins-lite", "gstplugins-lite",
       lite_plugins_init, VERSION, GST_LICENSE, PACKAGE,
       GST_PACKAGE_NAME, GST_PACKAGE_ORIGIN);
+#ifdef STATIC_BUILD
+  gst_plugin_register_static (GST_VERSION_MAJOR, GST_VERSION_MINOR,
+      "fxplugins", "fxplugin",
+      fxplugins_init, VERSION, GST_LICENSE, PACKAGE,
+      GST_PACKAGE_NAME, GST_PACKAGE_ORIGIN);
+  gst_plugin_register_static (GST_VERSION_MAJOR, GST_VERSION_MINOR,
+     "fxavplugins", "fxavplugin",
+      fxavplugins_init, VERSION, GST_LICENSE, PACKAGE,
+      GST_PACKAGE_NAME, GST_PACKAGE_ORIGIN);
+#endif // STATIC_BUILD
 #endif // GSTREAMER_LITE
 
   /*
    * Any errors happening below this point are non-fatal, we therefore mark
    * gstreamer as being initialized, since it is the case from a plugin point of
diff a/modules/javafx.media/src/main/native/gstreamer/plugins/av/fxavcodecplugin.c b/modules/javafx.media/src/main/native/gstreamer/plugins/av/fxavcodecplugin.c
--- a/modules/javafx.media/src/main/native/gstreamer/plugins/av/fxavcodecplugin.c
+++ b/modules/javafx.media/src/main/native/gstreamer/plugins/av/fxavcodecplugin.c
@@ -28,17 +28,22 @@
 #include <fxplugins_common.h>
 #include <audiodecoder.h>
 #include <videodecoder.h>
 #include <mpegtsdemuxer.h>
 
+#ifdef STATIC_BUILD
+gboolean fxavplugins_init (GstPlugin * plugin)
+#else
 static gboolean fxplugins_init (GstPlugin * plugin)
+#endif
 {
     return audiodecoder_plugin_init(plugin) &&
            videodecoder_plugin_init(plugin) &&
            mpegts_demuxer_plugin_init(plugin);
 }
 
+#ifndef STATIC_BUILD
 GstPluginDesc gst_plugin_desc =
 {
     GST_VERSION_MAJOR,
     GST_VERSION_MINOR,
     "avplugin",
@@ -49,5 +54,6 @@
     "JFXMedia",
     "JFXMedia",
     "http://javafx.com/",
     NULL
 };
+#endif
diff a/modules/javafx.media/src/main/native/gstreamer/plugins/fxplugins.c b/modules/javafx.media/src/main/native/gstreamer/plugins/fxplugins.c
--- a/modules/javafx.media/src/main/native/gstreamer/plugins/fxplugins.c
+++ b/modules/javafx.media/src/main/native/gstreamer/plugins/fxplugins.c
@@ -37,11 +37,15 @@
 
 #if defined(WIN32)
 gboolean dshowwrapper_init(GstPlugin* aacdecoder);
 #endif
 
+#ifdef STATIC_BUILD
+gboolean fxplugins_init (GstPlugin * plugin)
+#else
 static gboolean fxplugins_init (GstPlugin * plugin)
+#endif
 {
     return java_source_plugin_init(plugin) &&
            hls_progress_buffer_plugin_init(plugin) &&
 
 #if defined(WIN32)
diff a/modules/javafx.media/src/main/native/jfxmedia/platform/gstreamer/GstPlatform.cpp b/modules/javafx.media/src/main/native/jfxmedia/platform/gstreamer/GstPlatform.cpp
--- a/modules/javafx.media/src/main/native/jfxmedia/platform/gstreamer/GstPlatform.cpp
+++ b/modules/javafx.media/src/main/native/jfxmedia/platform/gstreamer/GstPlatform.cpp
@@ -51,11 +51,15 @@
     JavaVM *g_pJVM;
 
     /*
      * Specify the require JNI version.
      */
+#ifdef STATIC_BUILD
+    JNIEXPORT jint JNICALL JNI_OnLoad_jfxmedia(JavaVM *vm, void *reserved)
+#else
     JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved)
+#endif
     {
         g_pJVM = vm;
         return JNI_VERSION_1_2;
     }
 
