diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/Binding.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/Binding.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/Binding.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/Binding.java
@@ -22,20 +22,22 @@
  */
 package jdk.internal.foreign.abi;
 
 import jdk.incubator.foreign.MemoryLayout;
 
+import java.util.Objects;
+
 public abstract class Binding {
     static final int MOVE_TAG = 0;
     static final int DEREFERENCE_TAG = 1;
     static final int COPY_BUFFER_TAG = 2;
     static final int ALLOC_BUFFER_TAG = 3;
     static final int BOX_ADDRESS_TAG = 4;
     static final int BASE_ADDRESS_TAG = 5;
     static final int DUP_TAG = 6;
 
-    final int tag;
+    private final int tag;
 
     private Binding(int tag) {
         this.tag = tag;
     }
 
@@ -65,15 +67,29 @@
         }
 
         @Override
         public String toString() {
             return "Move{" +
-                    "tag=" + tag +
+                    "tag=" + tag() +
                     ", storage=" + storage +
                     ", type=" + type +
                     '}';
         }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+            Move move = (Move) o;
+            return storage.equals(move.storage) &&
+                    type.equals(move.type);
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(tag(), storage, type);
+        }
     }
 
     /**
      * Loads or stores a Java primitive to a MemorySegment at a certain offset
      */
@@ -96,15 +112,29 @@
         }
 
         @Override
         public String toString() {
             return "Dereference{" +
-                    "tag=" + tag +
+                    "tag=" + tag() +
                     ", offset=" + offset +
                     ", type=" + type +
                     '}';
         }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+            Dereference that = (Dereference) o;
+            return offset == that.offset &&
+                    type.equals(that.type);
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(tag(), offset, type);
+        }
     }
 
     /**
      * Copies from a MemoryAddress into a newly allocated MemorySegment
      */
@@ -127,15 +157,29 @@
         }
 
         @Override
         public String toString() {
             return "Copy{" +
-                    "tag=" + tag +
+                    "tag=" + tag() +
                     ", size=" + size +
                     ", alignment=" + alignment +
                     '}';
         }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+            Copy copy = (Copy) o;
+            return size == copy.size &&
+                    alignment == copy.alignment;
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(tag(), size, alignment);
+        }
     }
 
     /**
      * Allocates a MemorySegment
      */
@@ -158,14 +202,29 @@
         }
 
         @Override
         public String toString() {
             return "AllocateBuffer{" +
+                    "tag=" + tag() +
                     "size=" + size +
                     ", alignment=" + alignment +
                     '}';
         }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+            AllocateBuffer that = (AllocateBuffer) o;
+            return size == that.size &&
+                    alignment == that.alignment;
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(tag(), size, alignment);
+        }
     }
 
     /**
      * Boxes or unboxes a MemoryAddress to a long and vice versa (depending on box/unbox interpreter)
      */
@@ -174,11 +233,24 @@
             super(BOX_ADDRESS_TAG);
         }
 
         @Override
         public String toString() {
-            return "BoxAddress{}";
+            return "BoxAddress{" +
+                    "tag=" + tag() +
+                    "}";
+        }
+
+        @Override
+        public int hashCode() {
+            return tag();
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            return o != null && getClass() == o.getClass();
         }
     }
 
     /**
      * Takes the base address of a MemorySegment
@@ -188,11 +260,24 @@
             super(BASE_ADDRESS_TAG);
         }
 
         @Override
         public String toString() {
-            return "BaseAddress{}";
+            return "BaseAddress{" +
+                    "tag=" + tag() +
+                    "}";
+        }
+
+        @Override
+        public int hashCode() {
+            return tag();
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            return o != null && getClass() == o.getClass();
         }
     }
 
     /**
      * Duplicates a value on top of the interpreter stack
@@ -202,9 +287,22 @@
             super(DUP_TAG);
         }
 
         @Override
         public String toString() {
-            return "Dup{}";
+            return "Dup{" +
+                    "tag=" + tag() +
+                    "}";
+        }
+
+        @Override
+        public int hashCode() {
+            return tag();
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            return o != null && getClass() == o.getClass();
         }
     }
 }
