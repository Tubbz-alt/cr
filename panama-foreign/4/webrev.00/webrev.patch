diff a/src/java.base/share/classes/java/lang/invoke/IndirectVarHandle.java b/src/java.base/share/classes/java/lang/invoke/IndirectVarHandle.java
--- a/src/java.base/share/classes/java/lang/invoke/IndirectVarHandle.java
+++ b/src/java.base/share/classes/java/lang/invoke/IndirectVarHandle.java
@@ -82,8 +82,8 @@
         return handle;
     }
 
     @Override
     public MethodHandle toMethodHandle(AccessMode accessMode) {
-        return getMethodHandle(accessMode.ordinal()).bindTo(this);
+        return getMethodHandle(accessMode.ordinal()).bindTo(this.directTarget);
     }
 }
diff a/test/jdk/java/foreign/TestAdaptVarHandles.java b/test/jdk/java/foreign/TestAdaptVarHandles.java
--- a/test/jdk/java/foreign/TestAdaptVarHandles.java
+++ b/test/jdk/java/foreign/TestAdaptVarHandles.java
@@ -80,11 +80,11 @@
             throw new ExceptionInInitializerError();
         }
     }
 
     @Test
-    public void testFilterValue() {
+    public void testFilterValue() throws Throwable {
         ValueLayout layout = MemoryLayouts.JAVA_INT;
         MemorySegment segment = MemorySegment.allocateNative(layout);
         VarHandle intHandle = layout.varHandle(int.class);
         VarHandle i2SHandle = MethodHandles.filterValue(intHandle, S2I, I2S);
         i2SHandle.set(segment.baseAddress(), "1");
@@ -94,11 +94,11 @@
         assertEquals(value, "43");
         boolean swapped = (boolean)i2SHandle.compareAndSet(segment.baseAddress(), "43", "12");
         assertTrue(swapped);
         oldValue = (String)i2SHandle.compareAndExchange(segment.baseAddress(), "12", "42");
         assertEquals(oldValue, "12");
-        value = (String)i2SHandle.get(segment.baseAddress());
+        value = (String)i2SHandle.toMethodHandle(VarHandle.AccessMode.GET).invokeExact(segment.baseAddress());
         assertEquals(value, "42");
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadFilterNullTarget() {
@@ -158,11 +158,11 @@
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
         MethodHandles.filterValue(intHandle, S2I_EX, I2S);
     }
 
     @Test
-    public void testFilterCoordinates() {
+    public void testFilterCoordinates() throws Throwable {
         ValueLayout layout = MemoryLayouts.JAVA_INT;
         MemorySegment segment = MemorySegment.allocateNative(layout);
         VarHandle intHandle = MemoryHandles.withStride(layout.varHandle(int.class), 4);
         VarHandle intHandle_longIndex = MethodHandles.filterCoordinates(intHandle, 0, BASE_ADDR, S2L);
         intHandle_longIndex.set(segment, "0", 1);
@@ -172,11 +172,11 @@
         assertEquals(value, 43);
         boolean swapped = (boolean)intHandle_longIndex.compareAndSet(segment, "0", 43, 12);
         assertTrue(swapped);
         oldValue = (int)intHandle_longIndex.compareAndExchange(segment, "0", 12, 42);
         assertEquals(oldValue, 12);
-        value = (int)intHandle_longIndex.get(segment, "0");
+        value = (int)intHandle_longIndex.toMethodHandle(VarHandle.AccessMode.GET).invokeExact(segment, "0");
         assertEquals(value, 42);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadFilterCoordinatesNullTarget() {
@@ -218,11 +218,11 @@
         VarHandle intHandle = MemoryHandles.withStride(MemoryLayouts.JAVA_INT.varHandle(int.class), 4);
         MethodHandles.filterCoordinates(intHandle, 1, S2L, S2L);
     }
 
     @Test
-    public void testInsertCoordinates() {
+    public void testInsertCoordinates() throws Throwable {
         ValueLayout layout = MemoryLayouts.JAVA_INT;
         MemorySegment segment = MemorySegment.allocateNative(layout);
         VarHandle intHandle = MemoryHandles.withStride(layout.varHandle(int.class), 4);
         VarHandle intHandle_longIndex = MethodHandles.insertCoordinates(intHandle, 0, segment.baseAddress(), 0L);
         intHandle_longIndex.set(1);
@@ -232,11 +232,11 @@
         assertEquals(value, 43);
         boolean swapped = (boolean)intHandle_longIndex.compareAndSet(43, 12);
         assertTrue(swapped);
         oldValue = (int)intHandle_longIndex.compareAndExchange(12, 42);
         assertEquals(oldValue, 12);
-        value = (int)intHandle_longIndex.get();
+        value = (int)intHandle_longIndex.toMethodHandle(VarHandle.AccessMode.GET).invokeExact();
         assertEquals(value, 42);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadInsertCoordinatesNullTarget() {
@@ -272,26 +272,26 @@
         VarHandle intHandle = MemoryHandles.withStride(MemoryLayouts.JAVA_INT.varHandle(int.class), 4);
         MethodHandles.insertCoordinates(intHandle, 1, 0L, 0L);
     }
 
     @Test
-    public void testPermuteCoordinates() {
+    public void testPermuteCoordinates() throws Throwable {
         ValueLayout layout = MemoryLayouts.JAVA_INT;
         MemorySegment segment = MemorySegment.allocateNative(layout);
         VarHandle intHandle = MemoryHandles.withStride(layout.varHandle(int.class), 4);
         VarHandle intHandle_swap = MethodHandles.permuteCoordinates(intHandle,
-                List.of(long.class, MemoryAddress.class), new int[] { 1, 0 });
+                List.of(long.class, MemoryAddress.class), 1, 0);
         intHandle_swap.set(0L, segment.baseAddress(), 1);
         int oldValue = (int)intHandle_swap.getAndAdd(0L, segment.baseAddress(), 42);
         assertEquals(oldValue, 1);
         int value = (int)intHandle_swap.get(0L, segment.baseAddress());
         assertEquals(value, 43);
         boolean swapped = (boolean)intHandle_swap.compareAndSet(0L, segment.baseAddress(), 43, 12);
         assertTrue(swapped);
         oldValue = (int)intHandle_swap.compareAndExchange(0L, segment.baseAddress(), 12, 42);
         assertEquals(oldValue, 12);
-        value = (int)intHandle_swap.get(0L, segment.baseAddress());
+        value = (int)intHandle_swap.toMethodHandle(VarHandle.AccessMode.GET).invokeExact(0L, segment.baseAddress());
         assertEquals(value, 42);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadPermuteCoordinatesNullTarget() {
@@ -333,11 +333,11 @@
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
         MethodHandles.permuteCoordinates(intHandle, List.of(int.class, int.class), -1);
     }
 
     @Test
-    public void testCollectCoordinates() {
+    public void testCollectCoordinates() throws Throwable {
         ValueLayout layout = MemoryLayouts.JAVA_INT;
         MemorySegment segment = MemorySegment.allocateNative(layout);
         VarHandle intHandle = MemoryHandles.withStride(layout.varHandle(int.class), 4);
         VarHandle intHandle_sum = MethodHandles.collectCoordinates(intHandle, 1, SUM_OFFSETS);
         intHandle_sum.set(segment.baseAddress(), -2L, 2L, 1);
@@ -347,11 +347,11 @@
         assertEquals(value, 43);
         boolean swapped = (boolean)intHandle_sum.compareAndSet(segment.baseAddress(), -2L, 2L, 43, 12);
         assertTrue(swapped);
         oldValue = (int)intHandle_sum.compareAndExchange(segment.baseAddress(), -2L, 2L, 12, 42);
         assertEquals(oldValue, 12);
-        value = (int)intHandle_sum.get(segment.baseAddress(), -2L, 2L);
+        value = (int)intHandle_sum.toMethodHandle(VarHandle.AccessMode.GET).invokeExact(segment.baseAddress(), -2L, 2L);
         assertEquals(value, 42);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadCollectCoordinatesNullTarget() {
