diff a/src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java b/src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java
--- a/src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java
+++ b/src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java
@@ -245,11 +245,11 @@
     }
 
     void addAccessModeMethodIfNeeded(VarHandle.AccessMode mode, BinderClassWriter cw) {
         String methName = mode.methodName();
         MethodType methType = form.getMethodType(mode.at.ordinal())
-                .insertParameterTypes(0, BASE_CLASS);
+                .insertParameterTypes(0, VarHandle.class);
 
         try {
             MethodType helperType = methType.insertParameterTypes(2, long.class);
             if (dimensions > 0) {
                 helperType = helperType.dropParameterTypes(3, 3 + dimensions);
@@ -265,15 +265,17 @@
             MethodVisitor mv = cw.visitMethod(ACC_STATIC, methName, methType.toMethodDescriptorString(), null, null);
             mv.visitAnnotation(Type.getDescriptor(ForceInline.class), true);
             mv.visitCode();
 
             mv.visitVarInsn(ALOAD, 0); // handle impl
+            mv.visitTypeInsn(CHECKCAST, Type.getInternalName(BASE_CLASS));
             mv.visitVarInsn(ALOAD, 1); // receiver
 
             // offset calculation
             int slot = 2;
             mv.visitVarInsn(ALOAD, 0); // load recv
+            mv.visitTypeInsn(CHECKCAST, Type.getInternalName(BASE_CLASS));
             mv.visitFieldInsn(GETFIELD, Type.getInternalName(BASE_CLASS), "offset", "J");
             for (int i = 0 ; i < dimensions ; i++) {
                 // load ADD MH
                 mv.visitLdcInsn(cw.makeConstantPoolPatch(ADD_OFFSETS_HANDLE));
                 mv.visitTypeInsn(CHECKCAST, Type.getInternalName(MethodHandle.class));
