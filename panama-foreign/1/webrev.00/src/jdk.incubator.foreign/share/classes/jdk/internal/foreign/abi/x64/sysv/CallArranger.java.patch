diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
@@ -77,23 +77,23 @@
         16,
         0 //no shadow space
     );
 
     // record
-    private static class Bindings {
-        final CallingSequence callingSequence;
-        final boolean isInMemoryReturn;
-        final int nVectorArgs;
+    public static class Bindings {
+        public final CallingSequence callingSequence;
+        public final boolean isInMemoryReturn;
+        public final int nVectorArgs;
 
         Bindings(CallingSequence callingSequence, boolean isInMemoryReturn, int nVectorArgs) {
             this.callingSequence = callingSequence;
             this.isInMemoryReturn = isInMemoryReturn;
             this.nVectorArgs = nVectorArgs;
         }
     }
 
-    private static Bindings getBindings(MethodType mt, FunctionDescriptor cDesc, boolean forUpcall) {
+    public static Bindings getBindings(MethodType mt, FunctionDescriptor cDesc, boolean forUpcall) {
         SharedUtils.checkFunctionTypes(mt, cDesc);
 
         CallingSequenceBuilder csb = new CallingSequenceBuilder(forUpcall);
 
         BindingCalculator argCalc = forUpcall ? new BoxBindingCalculator(true) : new UnboxBindingCalculator(true);
@@ -171,11 +171,11 @@
             this.classes = classes;
         }
 
         public static TypeClass ofValue(List<ArgumentClassImpl> classes) {
             if (classes.size() != 1) {
-                throw new IllegalStateException();
+                throw new IllegalStateException("Multiple classes not supported: " + classes);
             }
             final Kind kind;
             switch (classes.get(0)) {
                 case POINTER: kind = Kind.POINTER; break;
                 case INTEGER: kind = Kind.INTEGER; break;
