diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
@@ -85,21 +85,21 @@
         16,  // Stack is always 16 byte aligned on AArch64
         0    // No shadow space
     );
 
     // record
-    private static class Bindings {
-        final CallingSequence callingSequence;
-        final boolean isInMemoryReturn;
+    public static class Bindings {
+        public final CallingSequence callingSequence;
+        public final boolean isInMemoryReturn;
 
         Bindings(CallingSequence callingSequence, boolean isInMemoryReturn) {
             this.callingSequence = callingSequence;
             this.isInMemoryReturn = isInMemoryReturn;
         }
     }
 
-    private static Bindings getBindings(MethodType mt, FunctionDescriptor cDesc, boolean forUpcall) {
+    public static Bindings getBindings(MethodType mt, FunctionDescriptor cDesc, boolean forUpcall) {
         SharedUtils.checkFunctionTypes(mt, cDesc);
 
         CallingSequenceBuilder csb = new CallingSequenceBuilder(forUpcall);
 
         BindingCalculator argCalc = forUpcall ? new BoxBindingCalculator(true) : new UnboxBindingCalculator(true);
@@ -376,10 +376,11 @@
                             if (offset + copy < layout.byteSize()) {
                                 bindings.add(new Binding.Dup());
                             }
                             bindings.add(new Binding.Dereference(offset, type));
                             bindings.add(new Binding.Move(storage, type));
+                            offset += copy;
                         }
                     } else {
                         spillStructUnbox(bindings, layout);
                     }
                     break;
@@ -400,11 +401,11 @@
                     VMStorage[] regs = storageCalculator.regAlloc(
                         StorageClasses.VECTOR, group.memberLayouts().size());
                     if (regs != null) {
                         long offset = 0;
                         for (int i = 0; i < group.memberLayouts().size(); i++) {
-                            VMStorage storage = regs[i++];
+                            VMStorage storage = regs[i];
                             final long size = group.memberLayouts().get(i).byteSize();
                             Class<?> type = SharedUtils.primitiveCarrierForSize(size);
                             if (i + 1 < group.memberLayouts().size()) {
                                 bindings.add(new Binding.Dup());
                             }
@@ -501,11 +502,11 @@
                     VMStorage[] regs = storageCalculator.regAlloc(
                         StorageClasses.VECTOR, group.memberLayouts().size());
                     if (regs != null) {
                         long offset = 0;
                         for (int i = 0; i < group.memberLayouts().size(); i++) {
-                            VMStorage storage = regs[i++];
+                            VMStorage storage = regs[i];
                             final long size = group.memberLayouts().get(i).byteSize();
                             Class<?> type = SharedUtils.primitiveCarrierForSize(size);
                             bindings.add(new Binding.Dup());
                             bindings.add(new Binding.Move(storage, type));
                             bindings.add(new Binding.Dereference(offset, type));
