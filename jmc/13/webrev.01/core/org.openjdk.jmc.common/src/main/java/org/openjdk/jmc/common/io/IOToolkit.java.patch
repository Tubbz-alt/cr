diff a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java
--- a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java
+++ b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java
@@ -60,12 +60,19 @@
 
 /**
  * Common functionality you might want when you're working with I/O.
  */
 public final class IOToolkit {
-	private static final int ZIP_MAGIC[] = new int[] {80, 75, 3, 4};
-	private static final int GZ_MAGIC[] = new int[] {31, 139};
+	/**
+	 * Magic bytes for recognizing Zip.
+	 */
+	public static final int MAGIC_ZIP[] = new int[] {80, 75, 3, 4};
+
+	/**
+	 * Magic bytes for recognizing GZip.
+	 */
+	public static final int MAGIC_GZ[] = new int[] {31, 139};
 
 	private IOToolkit() {
 		throw new Error("Don't"); //$NON-NLS-1$
 	}
 
@@ -98,13 +105,13 @@
 	 */
 	public static InputStream openUncompressedStream(File file) throws IOException {
 		FileInputStream fin = new FileInputStream(file);
 		try {
 			InputStream in = new BufferedInputStream(fin);
-			if (hasMagic(file, GZ_MAGIC)) {
+			if (hasMagic(file, MAGIC_GZ)) {
 				return new GZIPInputStream(in);
-			} else if (hasMagic(file, ZIP_MAGIC)) {
+			} else if (hasMagic(file, MAGIC_ZIP)) {
 				ZipInputStream zin = new ZipInputStream(in);
 				zin.getNextEntry();
 				return zin;
 			}
 			return in;
@@ -133,18 +140,18 @@
 	public static InputStream openUncompressedStream(InputStream stream) throws IOException {
 		InputStream in = stream;
 		if (!in.markSupported()) {
 			in = new BufferedInputStream(stream);
 		}
-		in.mark(GZ_MAGIC.length + 1);
-		if (hasMagic(in, GZ_MAGIC)) {
+		in.mark(MAGIC_GZ.length + 1);
+		if (hasMagic(in, MAGIC_GZ)) {
 			in.reset();
 			return new GZIPInputStream(in);
 		}
 		in.reset();
-		in.mark(ZIP_MAGIC.length + 1);
-		if (hasMagic(in, ZIP_MAGIC)) {
+		in.mark(MAGIC_ZIP.length + 1);
+		if (hasMagic(in, MAGIC_ZIP)) {
 			in.reset();
 			ZipInputStream zin = new ZipInputStream(in);
 			zin.getNextEntry();
 			return zin;
 		}
@@ -203,11 +210,11 @@
 	 * @return {@code true} if it is a GZip file, {@code false} otherwise
 	 * @throws IOException
 	 *             if an error occurred when trying to read from the file
 	 */
 	public static boolean isGZipFile(File file) throws IOException {
-		return hasMagic(file, GZ_MAGIC);
+		return hasMagic(file, MAGIC_GZ);
 	}
 
 	/**
 	 * Checks if the file is a ZIP archive.
 	 *
@@ -216,11 +223,11 @@
 	 * @return {@code true} if it's a ZIP archive, {@code false} otherwise
 	 * @throws IOException
 	 *             if an error occurred when trying to read from the file
 	 */
 	public static boolean isZipFile(File file) throws IOException {
-		return hasMagic(file, ZIP_MAGIC);
+		return hasMagic(file, MAGIC_ZIP);
 	}
 
 	/**
 	 * Checks if the file is compressed in a way compatible with
 	 * {@link #openUncompressedStream(File)}.
@@ -233,17 +240,17 @@
 	 *             if an error occurred when trying to read from the file
 	 */
 	public static boolean isCompressedFile(File file) throws IOException {
 		BufferedInputStream is = null;
 		try {
-			is = new BufferedInputStream(new FileInputStream(file), ZIP_MAGIC.length + 1);
-			is.mark(ZIP_MAGIC.length + 1);
-			if (hasMagic(is, GZ_MAGIC)) {
+			is = new BufferedInputStream(new FileInputStream(file), MAGIC_ZIP.length + 1);
+			is.mark(MAGIC_ZIP.length + 1);
+			if (hasMagic(is, MAGIC_GZ)) {
 				return true;
 			}
 			is.reset();
-			return hasMagic(is, ZIP_MAGIC);
+			return hasMagic(is, MAGIC_ZIP);
 		} finally {
 			closeSilently(is);
 		}
 	}
 
