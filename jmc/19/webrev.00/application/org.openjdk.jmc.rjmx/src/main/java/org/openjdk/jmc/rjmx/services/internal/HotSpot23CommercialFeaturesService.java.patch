diff a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/services/internal/HotSpot23CommercialFeaturesService.java b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/services/internal/HotSpot23CommercialFeaturesService.java
--- a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/services/internal/HotSpot23CommercialFeaturesService.java
+++ b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/services/internal/HotSpot23CommercialFeaturesService.java
@@ -41,22 +41,22 @@
 import org.openjdk.jmc.rjmx.services.ICommercialFeaturesService;
 import org.openjdk.jmc.rjmx.services.IDiagnosticCommandService;
 import javax.management.ObjectName;
 
 public class HotSpot23CommercialFeaturesService implements ICommercialFeaturesService {
-	private final static String VM_FLAG = "UnlockCommercialFeatures"; //$NON-NLS-1$
+	private final static String UNLOCK_COMMERCIAL_FEATURES_FLAG = "UnlockCommercialFeatures"; //$NON-NLS-1$
 	private final static String UNLOCK_COMMAND = "VM.unlock_commercial_features"; //$NON-NLS-1$
 	private final MBeanServerConnection server;
 	private final IDiagnosticCommandService dcs;
 	private final static String JDK_MANAGEMENT_JFR_MBEAN_NAME = "jdk.management.jfr:type=FlightRecorder"; //$NON-NLS-1$
 
 	public HotSpot23CommercialFeaturesService(IConnectionHandle handle)
 			throws ConnectionException, ServiceNotAvailableException {
 		server = handle.getServiceOrThrow(MBeanServerConnection.class);
 		dcs = handle.getServiceOrNull(IDiagnosticCommandService.class);
 		try {
-			HotspotManagementToolkit.getVMOption(server, VM_FLAG); // Will fail if option is not available
+			HotspotManagementToolkit.getVMOption(server, UNLOCK_COMMERCIAL_FEATURES_FLAG); // Will fail if option is not available
 		} catch (Exception e) {
 			// Commercial Feature option is not available but Flight Recorder is.
 			if (!isJfrMBeanAvailable()) {
 				throw new ServiceNotAvailableException(""); //$NON-NLS-1$
 			}
@@ -64,11 +64,12 @@
 	}
 
 	@Override
 	public boolean isCommercialFeaturesEnabled() {
 		try {
-			return ((String) HotspotManagementToolkit.getVMOption(server, VM_FLAG)).contains("true"); //$NON-NLS-1$
+			return ((String) HotspotManagementToolkit.getVMOption(server, UNLOCK_COMMERCIAL_FEATURES_FLAG))
+					.contains("true"); //$NON-NLS-1$
 		} catch (Exception e) {
 			return false;
 		}
 	}
 
@@ -76,11 +77,11 @@
 	public void enableCommercialFeatures() throws Exception {
 		if (dcs != null) {
 			dcs.runCtrlBreakHandlerWithResult(UNLOCK_COMMAND);
 		}
 		if (!isCommercialFeaturesEnabled()) {
-			HotspotManagementToolkit.setVMOption(server, VM_FLAG, "true"); //$NON-NLS-1$
+			HotspotManagementToolkit.setVMOption(server, UNLOCK_COMMERCIAL_FEATURES_FLAG, "true"); //$NON-NLS-1$
 		}
 	}
 
 	private boolean isJfrMBeanAvailable() {
 		try {
@@ -94,6 +95,11 @@
 	private ObjectName getJfrMBeanObjectName() throws Exception {
 		ObjectName candidateObjectName = ConnectionToolkit.createObjectName(JDK_MANAGEMENT_JFR_MBEAN_NAME);
 		server.getMBeanInfo(candidateObjectName);
 		return candidateObjectName;
 	}
+
+	@Override
+	public boolean hasCommercialFeatures() {
+		return true;
+	}
 }
