diff a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/services/internal/CommercialFeaturesServiceFactory.java b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/services/internal/CommercialFeaturesServiceFactory.java
--- a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/services/internal/CommercialFeaturesServiceFactory.java
+++ b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/services/internal/CommercialFeaturesServiceFactory.java
@@ -32,10 +32,11 @@
  */
 package org.openjdk.jmc.rjmx.services.internal;
 
 import org.openjdk.jmc.common.version.JavaVersion;
 import org.openjdk.jmc.rjmx.ConnectionException;
+import org.openjdk.jmc.rjmx.ConnectionToolkit;
 import org.openjdk.jmc.rjmx.IConnectionHandle;
 import org.openjdk.jmc.rjmx.ServiceNotAvailableException;
 import org.openjdk.jmc.rjmx.services.ICommercialFeaturesService;
 import org.openjdk.jmc.rjmx.services.IServiceFactory;
 import org.openjdk.jmc.ui.common.jvm.JVMDescriptor;
@@ -50,14 +51,20 @@
 		// it should be safe - the commercial features flag is not coming back
 		JVMDescriptor descriptor = handle.getServerDescriptor().getJvmInfo();
 		if (descriptor != null) {
 			JavaVersion version = new JavaVersion(descriptor.getJavaVersion());
 			if (version.getMajorVersion() >= 11) {
-				return new Jdk11CommercialFeaturesService();
+				return new NoCommercialFeaturesService();
 			}
 		}
-		return new HotSpot23CommercialFeaturesService(handle);
+
+		// Funnily enough, OpenJDK built JVMs for unknown reasons also have the unlock commercial features flag,
+		// so we'll just check if Oracle is the JVM vendor. Any other vendor will not have JFR protected by commercial flags.
+		if (ConnectionToolkit.isOracle(handle)) {
+			return new HotSpot23CommercialFeaturesService(handle);
+		}
+		return new NoCommercialFeaturesService();
 	}
 
 	@Override
 	public Class<ICommercialFeaturesService> getServiceType() {
 		return ICommercialFeaturesService.class;
