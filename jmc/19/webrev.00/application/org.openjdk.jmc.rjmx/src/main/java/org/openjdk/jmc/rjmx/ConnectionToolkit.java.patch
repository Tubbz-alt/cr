diff a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/ConnectionToolkit.java b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/ConnectionToolkit.java
--- a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/ConnectionToolkit.java
+++ b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/ConnectionToolkit.java
@@ -344,11 +344,10 @@
 	 *            the connection handle to check.
 	 * @return {@code true} if the connection handle is connected to a JRockit, {@code false}
 	 *         otherwise.
 	 */
 	public static boolean isJRockit(IConnectionHandle connectionHandle) {
-
 		String vmName = getVMName(connectionHandle);
 		return JavaVMVersionToolkit.isJRockitJVMName(vmName);
 	}
 
 	/**
@@ -363,10 +362,20 @@
 	public static boolean isHotSpot(IConnectionHandle connectionHandle) {
 		String vmName = getVMName(connectionHandle);
 		return vmName != null && JavaVMVersionToolkit.isHotspotJVMName(vmName);
 	}
 
+	/**
+	 * Returns {@code true} if the connection handle is associated with an Oracle built JVM,
+	 * {@code false} otherwise. This method <b>does not</b> require the connection handle to be
+	 * connected.
+	 */
+	public static boolean isOracle(IConnectionHandle handle) {
+		String vendor = handle.getServerDescriptor().getJvmInfo().getJvmVendor();
+		return vendor != null && vendor.contains("Oracle");
+	}
+
 	/**
 	 * This will return true if the java version is above or equal the supplied value. (For example
 	 * 1.7.0_40).
 	 *
 	 * @param connectionHandle
@@ -409,7 +418,6 @@
 			RJMXPlugin.getDefault().getLogger().log(Level.WARNING,
 					"Could not check the java.version from System Properties!", e); //$NON-NLS-1$
 		}
 		return null;
 	}
-
 }
