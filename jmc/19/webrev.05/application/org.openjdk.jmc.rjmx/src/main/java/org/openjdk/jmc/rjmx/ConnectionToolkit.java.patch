diff a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/ConnectionToolkit.java b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/ConnectionToolkit.java
--- a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/ConnectionToolkit.java
+++ b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/ConnectionToolkit.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -54,10 +54,11 @@
 import javax.management.remote.JMXServiceURL;
 
 import org.openjdk.jmc.common.version.JavaVMVersionToolkit;
 import org.openjdk.jmc.common.version.JavaVersion;
 import org.openjdk.jmc.rjmx.internal.RJMXConnection;
+import org.openjdk.jmc.ui.common.jvm.JVMDescriptor;
 
 /**
  * Toolkit providing utility methods to retrieve MBean proxy objects, invoke JMX operations and
  * query a connection about its properties.
  */
@@ -344,11 +345,10 @@
 	 *            the connection handle to check.
 	 * @return {@code true} if the connection handle is connected to a JRockit, {@code false}
 	 *         otherwise.
 	 */
 	public static boolean isJRockit(IConnectionHandle connectionHandle) {
-
 		String vmName = getVMName(connectionHandle);
 		return JavaVMVersionToolkit.isJRockitJVMName(vmName);
 	}
 
 	/**
@@ -363,10 +363,38 @@
 	public static boolean isHotSpot(IConnectionHandle connectionHandle) {
 		String vmName = getVMName(connectionHandle);
 		return vmName != null && JavaVMVersionToolkit.isHotspotJVMName(vmName);
 	}
 
+	/**
+	 * Returns {@code true} if the connection handle is associated with an Oracle built JVM,
+	 * {@code false} otherwise. This method <b>does not</b> require the connection handle to be
+	 * connected.
+	 */
+	public static boolean isOracle(IConnectionHandle handle) {
+		JVMDescriptor descriptor = handle.getServerDescriptor().getJvmInfo();
+		// This should normally not happen for discovered JVMs, but users can create custom connections
+		String vendor = null;
+		if (descriptor != null) {
+			vendor = descriptor.getJvmVendor();
+		} else {
+			// We try checking if connected
+			if (handle.isConnected()) {
+				MBeanServerConnection connection = handle.getServiceOrNull(MBeanServerConnection.class);
+				if (connection != null) {
+					try {
+						vendor = getRuntimeBean(connection).getVmVendor();
+					} catch (IOException e) {
+						// Worst case we classify JVM vendor wrong
+						RJMXPlugin.getDefault().getLogger().log(Level.WARNING, "Could not check if Oracle JVM", e);
+					}
+				}
+			}
+		}
+		return vendor != null && vendor.contains("Oracle");
+	}
+
 	/**
 	 * This will return true if the java version is above or equal the supplied value. (For example
 	 * 1.7.0_40).
 	 *
 	 * @param connectionHandle
@@ -409,7 +437,6 @@
 			RJMXPlugin.getDefault().getLogger().log(Level.WARNING,
 					"Could not check the java.version from System Properties!", e); //$NON-NLS-1$
 		}
 		return null;
 	}
-
 }
