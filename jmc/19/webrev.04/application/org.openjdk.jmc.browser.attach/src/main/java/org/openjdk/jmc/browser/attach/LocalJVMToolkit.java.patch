diff a/application/org.openjdk.jmc.browser.attach/src/main/java/org/openjdk/jmc/browser/attach/LocalJVMToolkit.java b/application/org.openjdk.jmc.browser.attach/src/main/java/org/openjdk/jmc/browser/attach/LocalJVMToolkit.java
--- a/application/org.openjdk.jmc.browser.attach/src/main/java/org/openjdk/jmc/browser/attach/LocalJVMToolkit.java
+++ b/application/org.openjdk.jmc.browser.attach/src/main/java/org/openjdk/jmc/browser/attach/LocalJVMToolkit.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -197,10 +197,12 @@
 					JVMArch jvmArch = JVMArch.OTHER;
 					boolean isDebug = false;
 					String address = null;
 					String version = null;
 					String jvmArgs = null;
+					String jvmVendor = null;
+
 					try {
 						// This used to leak one \BaseNamedObjects\hsperfdata_* Section handle on Windows
 						MonitoredVm mvm = host.getMonitoredVm(new VmIdentifier(name));
 						try {
 							// use the command line as the display name
@@ -233,10 +235,16 @@
 							}
 
 							if (sm != null) {
 								isDebug = isDebug(sm.stringValue());
 							}
+
+							sm = (StringMonitor) mvm.findByName("java.property.java.vm.vendor"); //$NON-NLS-1$
+							if (sm != null) {
+								jvmVendor = sm.stringValue();
+							}
+
 							// NOTE: isAttachable seems to return true even if a real attach is not possible.
 							// attachable = MonitoredVmUtil.isAttachable(mvm);
 
 							jvmArch = getArch(vmid);
 							// Check if the in-memory agent has been started, in that case we can connect anyway
@@ -258,12 +266,12 @@
 							mvm.detach();
 						}
 					} catch (Exception x) {
 						// ignore
 					}
-					connDesc = createDescriptor(name, jvmArgs, vmid, connectable, type, jvmArch, address, version,
-							isDebug);
+					connDesc = createDescriptor(name, jvmArgs, jvmVendor, vmid, connectable, type, jvmArch, address,
+							version, isDebug);
 					return connDesc;
 				}
 			});
 			return future.get(TIMEOUT_THRESHOLD, TimeUnit.SECONDS);
 		} catch (Exception e) {
@@ -359,10 +367,11 @@
 					String address = null;
 					String version = null;
 					String javaArgs = null;
 					String jvmArgs = null;
 					String jvmVersion = null;
+					String jvmVendor = null;
 					VirtualMachine vm = null;
 					try {
 						// Attach creates one process handle on Windows.
 						// This leaks one thread handle due to Sun bug in j2se/src/windows/native/sun/tools/attach/WindowsVirtualMachine.c
 						vm = VirtualMachine.attach(vmd);
@@ -379,10 +388,11 @@
 						if (props != null) {
 							String vmName = props.getProperty("java.vm.name"); //$NON-NLS-1$
 							jvmType = getJVMType(vmName);
 							version = props.getProperty("java.version"); //$NON-NLS-1$
 							jvmVersion = props.getProperty("java.vm.version"); //$NON-NLS-1$
+							jvmVendor = props.getProperty("java.vm.vendor");
 							isDebug = isDebug(jvmVersion);
 							jvmArch = JVMArch.getJVMArch(props);
 						}
 						Properties agentProps = vm.getAgentProperties();
 						address = (String) agentProps.get(LOCAL_CONNECTOR_ADDRESS_PROP);
@@ -396,12 +406,12 @@
 						if (vm != null) {
 							vm.detach();
 						}
 					}
 					if (connectable.isAttachable()) {
-						connDesc = createDescriptor(javaArgs, jvmArgs, Integer.parseInt(vmd.id()), connectable, jvmType,
-								jvmArch, address, version, isDebug);
+						connDesc = createDescriptor(javaArgs, jvmArgs, jvmVendor, Integer.parseInt(vmd.id()),
+								connectable, jvmType, jvmArch, address, version, isDebug);
 					}
 					BrowserAttachPlugin.getPluginLogger().info("Done resolving PID " + vmd); //$NON-NLS-1$
 					return connDesc;
 				}
 			});
@@ -461,13 +471,14 @@
 	private static boolean isValidDisplayName(String displayName) {
 		return displayName != null && !displayName.equals("") && !displayName.equals("Unknown"); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 
 	private static DiscoveryEntry createDescriptor(
-		String javaCommand, String jvmArgs, int pid, Connectable connectable, JVMType type, JVMArch arch,
-		String address, String version, boolean isDebug) {
-		JVMDescriptor jvmInfo = new JVMDescriptor(version, type, arch, javaCommand, jvmArgs, pid, isDebug, connectable);
+		String javaCommand, String jvmArgs, String jvmVendor, int pid, Connectable connectable, JVMType type,
+		JVMArch arch, String address, String version, boolean isDebug) {
+		JVMDescriptor jvmInfo = new JVMDescriptor(version, type, arch, javaCommand, jvmArgs, jvmVendor, pid, isDebug,
+				connectable);
 		LocalConnectionDescriptor lcd = new LocalConnectionDescriptor(pid, address, connectable == ATTACHABLE);
 		String guid = "Local-[PID:" + pid + ", seq:" + (SEQ_NUMBER++) + "]"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 		IServerDescriptor sd = IServerDescriptor.create(guid, null, jvmInfo);
 		return new DiscoveryEntry(sd, lcd);
 	}
