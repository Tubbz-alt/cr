diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ExtraRowTableViewer.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ExtraRowTableViewer.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ExtraRowTableViewer.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ExtraRowTableViewer.java
@@ -58,10 +58,14 @@
 
 	public void setExtraMessage(String message) {
 		this.message = message;
 	}
 
+	public long getNumRowsDisplayed() {
+		return getFilteredChildren(getInput()).length;
+	}
+
 	@Override
 	public void refresh(Object element) {
 		if (message == null) {
 			super.refresh(element);
 		} else {
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/FilterComponent.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/FilterComponent.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/FilterComponent.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/FilterComponent.java
@@ -37,10 +37,12 @@
 import java.util.stream.Stream;
 
 import org.eclipse.jface.action.IAction;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.ModifyEvent;
+import org.eclipse.swt.events.ModifyListener;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.RGB;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Composite;
@@ -86,12 +88,14 @@
 	private String searchString;
 
 	public static FilterComponent createFilterComponent(
 		ItemList list, IItemFilter filter, IItemCollection items, Supplier<Stream<SelectionStoreEntry>> selections,
 		Consumer<IItemFilter> onSelect) {
-		return createFilterComponent(list.getManager().getViewer().getControl(), list.getManager(), filter, items,
-				selections, onSelect);
+		FilterComponent fc = createFilterComponent(list.getManager().getViewer().getControl(), list.getManager(),
+				filter, items, selections, onSelect);
+		fc.addItemListSearchListener(list);
+		return fc;
 	}
 
 	public static FilterComponent createFilterComponent(
 		ItemHistogram histogram, IItemFilter filter, IItemCollection items,
 		Supplier<Stream<SelectionStoreEntry>> selections, Consumer<IItemFilter> onSelect) {
@@ -178,10 +182,19 @@
 
 	public SashForm getComponent() {
 		return mainSash;
 	}
 
+	private void addItemListSearchListener(ItemList itemList) {
+		searchText.addModifyListener(new ModifyListener() {
+			@Override
+			public void modifyText(ModifyEvent e) {
+				itemList.onSearchFilterChange();
+			}
+		});
+	}
+
 	private IAction createShowSearchAction() {
 		IAction checkAction = ActionToolkit.checkAction(max -> {
 			// it would be better to use setVisible here instead of heightHint, but that doesn't work properly
 			if (max) {
 				searchLayoutData.heightHint = SWT.DEFAULT;
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemList.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemList.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemList.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemList.java
@@ -205,10 +205,20 @@
 
 	private void clearEllipsisMessage() {
 		tableViewer.setExtraMessage(null);
 	}
 
+	public void onSearchFilterChange() {
+		long numRows = tableViewer.getNumRowsDisplayed();
+		if (numRows < maxSize) {
+			clearEllipsisMessage();
+		} else {
+			setEllipsisMessage();
+		}
+		tableViewer.refresh();
+	}
+
 	/**
 	 * Construct an identifier that can be used when persisting column state.
 	 *
 	 * @param a
 	 * @return An identifier based on attribute id and type
