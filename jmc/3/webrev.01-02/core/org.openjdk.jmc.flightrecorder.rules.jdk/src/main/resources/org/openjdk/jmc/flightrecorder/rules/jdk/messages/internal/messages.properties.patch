diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/resources/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/messages.properties b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/resources/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/messages.properties
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/resources/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/messages.properties
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/resources/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/messages.properties
@@ -600,11 +600,11 @@
 SystemGcRule_CONFIG_WARNING_LIMIT=System.gc() ratio limit
 SystemGcRule_CONFIG_WARNING_LIMIT_LONG=Warning limit for ratio between System.gc() and total garbage collections
 SystemGcRuleFactory_RULE_NAME=GCs Caused by System.gc()
 # {0} is a percentage
 SystemGcRuleFactory_TEXT_INFO={0} of the garbage collections were caused by System.gc().
-SystemGcRuleFactory_TEXT_INFO_LONG=Calling System.gc() can cause unnecessary garbage collections and isn't usually needed.<p>If the calls are in libraries where you can't change the source code, you can use the command line flag '-XX:+DisableExplicitGC' to make the JVM ignore all System.gc() calls.
+SystemGcRuleFactory_TEXT_INFO_LONG=Calling System.gc() can cause unnecessary garbage collections. If you're not sure that you need these calls, consider removing them.<p>If the calls are in libraries where you can't change the source code, you can use the command line flag '-XX:+DisableExplicitGC' to make the JVM ignore all System.gc() calls.
 SystemGcRuleFactory_TEXT_OK=No garbage collections were caused by System.gc().
 TlabAllocationRatioRuleFactory_RULE_NAME=TLAB Allocation Ratio
 # {0} is a percentage
 TlabAllocationRatioRuleFactory_TEXT_INFO=The program allocated {0} of the memory outside of TLABs.
 TlabAllocationRatioRuleFactory_TEXT_RECOMMEND_LESS_ALLOCATION=Allocating objects outside of Thread Local Allocation Buffers (TLABs) is more expensive than allocating inside TLABs. This may be acceptable if the individual allocations are intended to be larger than a reasonable TLAB. It may be possible to avoid this by decreasing the size of the individual allocations. There are some TLAB related JVM flags that you can experiment with, but it is usually better to let the JVM manage TLAB sizes automatically.
