diff a/application/coverage/pom.xml b/application/coverage/pom.xml
--- a/application/coverage/pom.xml
+++ b/application/coverage/pom.xml
@@ -1,9 +1,9 @@
-<?xml version="1.0" encoding="UTF-8"?>
+<?xml version="1.0" encoding="UTF-8" ?>
 <!--
-   Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
-   Copyright (c) 2019, Red Hat Inc. All rights reserved.
+   Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
+   Copyright (c) 2019, 2020, Red Hat Inc. All rights reserved.
 
    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 
    The contents of this file are subject to the terms of either the Universal Permissive License
    v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -277,15 +277,10 @@
 		<dependency>
 			<groupId>org.openjdk.jmc</groupId>
 			<artifactId>org.openjdk.jmc.ide.ui</artifactId>
 			<version>${project.version}</version>
 		</dependency>
-		<dependency>
-			<groupId>org.openjdk.jmc</groupId>
-			<artifactId>org.openjdk.jmc.jdp</artifactId>
-			<version>${project.version}</version>
-		</dependency>
 		<dependency>
 			<groupId>org.openjdk.jmc</groupId>
 			<artifactId>org.openjdk.jmc.joverflow</artifactId>
 			<version>1.0.0-SNAPSHOT</version>
 		</dependency>
@@ -408,16 +403,10 @@
 			<groupId>org.openjdk.jmc</groupId>
 			<artifactId>org.openjdk.jmc.ide.launch.test</artifactId>
 			<scope>test</scope>
 			<version>${project.version}</version>
 		</dependency>
-		<dependency>
-			<groupId>org.openjdk.jmc</groupId>
-			<artifactId>org.openjdk.jmc.jdp.test</artifactId>
-			<scope>test</scope>
-			<version>${project.version}</version>
-		</dependency>
 		<dependency>
 			<groupId>org.openjdk.jmc</groupId>
 			<artifactId>org.openjdk.jmc.joverflow.test</artifactId>
 			<scope>test</scope>
 			<version>${project.version}</version>
@@ -514,15 +503,15 @@
 						</configuration>
 					</execution>
 				</executions>
 			</plugin>
 			<plugin>
-  				<groupId>com.diffplug.spotless</groupId>
-  				<artifactId>spotless-maven-plugin</artifactId>
-  				<version>${spotless.version}</version>
-  				<configuration>
-    				<skip>true</skip>
-  				</configuration>
-			</plugin>		
+				<groupId>com.diffplug.spotless</groupId>
+				<artifactId>spotless-maven-plugin</artifactId>
+				<version>${spotless.version}</version>
+				<configuration>
+					<skip>true</skip>
+				</configuration>
+			</plugin>
 		</plugins>
 	</build>
-</project>
+</project>
diff a/application/org.openjdk.jmc.jdp/build.properties b/application/org.openjdk.jmc.jdp/build.properties
--- a/application/org.openjdk.jmc.jdp/build.properties
+++ /dev/null
@@ -1,37 +0,0 @@
-#
-#  Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
-#
-#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-#
-#  The contents of this file are subject to the terms of either the Universal Permissive License 
-#  v 1.0 as shown at http://oss.oracle.com/licenses/upl
-#   
-#  or the following license:
-#   
-#  Redistribution and use in source and binary forms, with or without modification, are permitted
-#  provided that the following conditions are met:
-#   
-#  1. Redistributions of source code must retain the above copyright notice, this list of conditions
-#  and the following disclaimer.
-#   
-#  2. Redistributions in binary form must reproduce the above copyright notice, this list of
-#  conditions and the following disclaimer in the documentation and/or other materials provided with
-#  the distribution.
-#   
-#  3. Neither the name of the copyright holder nor the names of its contributors may be used to
-#  endorse or promote products derived from this software without specific prior written permission.
-#
-#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
-#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
-#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
-#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-#
-source.. = src/main/java/
-output.. = target/classes/
-bin.includes = META-INF/,\
-               .
-pde.match.rule.bundle=compatible
diff a/application/org.openjdk.jmc.jdp/pom.xml b/application/org.openjdk.jmc.jdp/pom.xml
--- a/application/org.openjdk.jmc.jdp/pom.xml
+++ /dev/null
@@ -1,68 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--   
-   Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
-   
-   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-   
-   The contents of this file are subject to the terms of either the Universal Permissive License 
-   v 1.0 as shown at http://oss.oracle.com/licenses/upl
-   
-   or the following license:
-   
-   Redistribution and use in source and binary forms, with or without modification, are permitted
-   provided that the following conditions are met:
-   
-   1. Redistributions of source code must retain the above copyright notice, this list of conditions
-   and the following disclaimer.
-   
-   2. Redistributions in binary form must reproduce the above copyright notice, this list of
-   conditions and the following disclaimer in the documentation and/or other materials provided with
-   the distribution.
-   
-   3. Neither the name of the copyright holder nor the names of its contributors may be used to
-   endorse or promote products derived from this software without specific prior written permission.
-   
-   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
-   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
-   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
-   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-	<parent>
-		<groupId>org.openjdk.jmc</groupId>
-		<artifactId>missioncontrol.application</artifactId>
-		<version>8.0.0-SNAPSHOT</version>
-	</parent>
-	<artifactId>org.openjdk.jmc.jdp</artifactId>
-	<packaging>eclipse-plugin</packaging>
-
-	<properties>
-		<spotless.config.path>${basedir}/../../configuration/ide/eclipse/formatting/formatting.xml</spotless.config.path>
-	</properties>
-
-	<build>
-		<plugins>
-			<plugin>
-				<groupId>org.eclipse.tycho</groupId>
-				<artifactId>tycho-compiler-plugin</artifactId>
-				<version>${tycho.version}</version>
-				<configuration>
-					<extraClasspathElements>
-						<dependency>
-							<groupId>sun.jdk</groupId>
-							<artifactId>tools</artifactId>
-							<version>1.8.0</version>
-							<scope>system</scope>
-							<systemPath>${java.home}/../lib/tools.jar</systemPath>
-						</dependency>
-					</extraClasspathElements>
-				</configuration>
-			</plugin>
-		</plugins>
-	</build>
-</project>
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/Discoverable.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/Discoverable.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/Discoverable.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.client;
-
-import java.util.Map;
-
-/**
- * Discoverable instances represent a discovered JDP beacon transmitting data on the network.
- * Discoverables are used to identify JVM services on the network. Usually the properties in a
- * discoverable can be used to identify an endpoint of communication.
- */
-public interface Discoverable {
-	/**
-	 * @return the identifier uniquely identifying the discoverable session. A new session UUID is
-	 *         generated whenever the JDP server is started.
-	 */
-	String getSessionId();
-
-	/**
-	 * @return the discovery payload.
-	 */
-	Map<String, String> getPayload();
-}
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/DiscoveryEvent.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/DiscoveryEvent.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/DiscoveryEvent.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.client;
-
-/**
- * A discovery event. These are triggered from the {@link JDPClient} when a {@link Discoverable} is
- * FOUND, LOST or CHANGED.
- */
-public final class DiscoveryEvent {
-	public enum Kind {
-		FOUND, LOST, CHANGED
-	}
-
-	private final Kind kind;
-	private final Discoverable discoverable;
-
-	/**
-	 * Constructor.
-	 *
-	 * @param kind
-	 *            the type of discovery that was made.
-	 * @param discoverable
-	 *            what was discovered.
-	 */
-	public DiscoveryEvent(Kind kind, Discoverable discoverable) {
-		this.kind = kind;
-		this.discoverable = discoverable;
-	}
-
-	/**
-	 * The kind of discovery. The discoverable was either FOUND, LOST or CHANGED.
-	 *
-	 * @return kind of discovery. The discoverable was either FOUND, LOST or CHANGED.
-	 */
-	public Kind getKind() {
-		return kind;
-	}
-
-	/**
-	 * @return the discoverable for which the status was updated.
-	 */
-	public Discoverable getDiscoverable() {
-		return discoverable;
-	}
-
-	@Override
-	public String toString() {
-		return kind + " " + discoverable.getSessionId(); //$NON-NLS-1$
-	}
-}
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/DiscoveryListener.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/DiscoveryListener.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/DiscoveryListener.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.client;
-
-/**
- * Interface for listeners interested in notifications about discovered JVM services.
- */
-public interface DiscoveryListener {
-
-	/**
-	 * Called whenever a change in the discovery status has occurred for a service.
-	 *
-	 * @param event
-	 *            an event describing the change in discovery status.
-	 */
-	public void onDiscovery(DiscoveryEvent event);
-}
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/JDPClient.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/JDPClient.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/JDPClient.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.client;
-
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.MulticastSocket;
-import java.util.Set;
-import java.util.logging.Logger;
-
-import org.openjdk.jmc.jdp.common.Configuration;
-import org.openjdk.jmc.jdp.common.ConfigurationFactory;
-
-/**
- * <p>
- * Client for discovering JVM services on the network.
- * </p>
- * <p>
- * <b>Note:</b> This client is also able to parse packets sent using the legacy JRockit Discovery
- * Protocol.
- * </p>
- */
-public final class JDPClient {
-	static final Logger LOGGER = Logger.getLogger("org.openjdk.jmc.jdp.client"); //$NON-NLS-1$
-	private final InetAddress address;
-	private final int port;
-	private PacketListener listener;
-	private final PacketProcessor processor = new PacketProcessor();
-	private final Pruner pruner;
-
-	public JDPClient() {
-		this(ConfigurationFactory.DEFAULT_MULTICAST_ADDRESS, Configuration.DEFAULT_MULTICAST_PORT,
-				Pruner.DEFAULT_MAX_HB_TIME);
-	}
-
-	JDPClient(InetAddress address, int port) {
-		this(address, port, Pruner.DEFAULT_MAX_HB_TIME);
-	}
-
-	public JDPClient(InetAddress address, int port, int heartBeatTimeout) {
-		this.address = address;
-		this.port = port;
-		pruner = new Pruner(processor, heartBeatTimeout);
-	}
-
-	public void addDiscoveryListener(DiscoveryListener listener) {
-		processor.addDiscoveryListener(listener);
-	}
-
-	public void removeDiscoveryListener(DiscoveryListener listener) {
-		processor.removeDiscoveryListener(listener);
-	}
-
-	public synchronized void start() throws IOException {
-		MulticastSocket socket = new MulticastSocket(port);
-		listener = new PacketListener(socket, processor);
-		socket.joinGroup(address);
-		ThreadGroup jdpThreads = new ThreadGroup("JDP Client"); //$NON-NLS-1$
-		startThread(jdpThreads, listener, "(JDP Packet Listener)"); //$NON-NLS-1$
-		startThread(jdpThreads, pruner, "(JDP Client Pruner)"); //$NON-NLS-1$
-	}
-
-	private static void startThread(ThreadGroup group, Runnable r, String name) {
-		Thread t = new Thread(group, r, name);
-		t.setDaemon(true);
-		t.start();
-	}
-
-	public synchronized void stop() {
-		pruner.stop();
-		if (listener != null) {
-			listener.stop();
-		}
-	}
-
-	public Set<Discoverable> getDiscoverables() {
-		return processor.getDiscoverables();
-	}
-}
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/PacketListener.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/PacketListener.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/PacketListener.java
+++ /dev/null
@@ -1,92 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.client;
-
-import java.io.IOException;
-import java.net.DatagramPacket;
-import java.net.MulticastSocket;
-import java.util.logging.Level;
-
-import org.openjdk.jmc.jdp.common.JDPPacket;
-
-/**
- * This package private class listens for JDP packets, and sends them to the packet processor for
- * processing.
- */
-final class PacketListener implements Runnable {
-	private static final int BUFFER_LENGTH = 4096;
-	private final MulticastSocket socket;
-	private final PacketProcessor packetProcessor;
-	private volatile boolean shutdown;
-
-	PacketListener(MulticastSocket socket, PacketProcessor packetProcessor) {
-		this.socket = socket;
-		this.packetProcessor = packetProcessor;
-	}
-
-	@Override
-	public void run() {
-		byte[] buffer = new byte[BUFFER_LENGTH];
-		DatagramPacket dgram = new DatagramPacket(buffer, buffer.length);
-
-		while (!shutdown) {
-			try {
-				socket.receive(dgram);
-			} catch (IOException e) {
-				if (!shutdown) {
-					JDPClient.LOGGER.log(Level.SEVERE, "Problem listening for JDP packets! Shutting down!", e); //$NON-NLS-1$
-					socket.close();
-				}
-				return;
-			}
-
-			byte[] data = new byte[dgram.getLength()];
-			System.arraycopy(dgram.getData(), dgram.getOffset(), data, 0, dgram.getLength());
-			try {
-				JDPPacket packet = new JDPPacket(data);
-				packetProcessor.process(packet);
-			} catch (Exception e) {
-				JDPClient.LOGGER.log(Level.WARNING, "Could not decode JDP packet. Skipping!", e); //$NON-NLS-1$
-			}
-		}
-	}
-
-	public void stop() {
-		shutdown = true;
-		socket.close();
-	}
-
-	public boolean isAlive() {
-		return !shutdown;
-	}
-}
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/PacketProcessor.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/PacketProcessor.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/PacketProcessor.java
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.client;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import org.openjdk.jmc.jdp.client.DiscoveryEvent.Kind;
-import org.openjdk.jmc.jdp.common.JDPPacket;
-
-/**
- * The package private PacketProcessor will remember detected packets and transmit the appropriate
- * events (FOUND, CHANGED) to the registered listeners.
- */
-final class PacketProcessor {
-	private static final String KEY_BROADCAST_PERIOD = "BROADCAST_INTERVAL"; //$NON-NLS-1$
-
-	private final List<DiscoveryListener> listeners = new ArrayList<>();
-	final Map<String, DiscoverableInfo> infoMap = new HashMap<>();
-
-	static class DiscoverableInfo {
-		// The timestamp the packet was last discovered.
-		long timestamp;
-		// The calculated heart beat interval
-		long heartBeat;
-		// Heart beat in packet?
-		boolean needToCalculateHeartBeat = true;
-		// The packet discovered
-		JDPPacket packet;
-	}
-
-	public synchronized void process(JDPPacket packet) {
-		// Using same hb calculations as in the old JRMC client
-		DiscoverableInfo info = infoMap.get(packet.getSessionId());
-		long now = System.currentTimeMillis();
-
-		if (info == null) {
-			info = new DiscoverableInfo();
-			info.timestamp = now;
-			info.packet = packet;
-			infoMap.put(packet.getSessionId(), info);
-			long broadcastPeriod = getBroadcastPeriodFromPayload(packet.getPayload());
-			if (broadcastPeriod > 0) {
-				info.heartBeat = broadcastPeriod;
-				info.needToCalculateHeartBeat = false;
-			}
-			JDPClient.LOGGER.fine("Found " + packet); //$NON-NLS-1$
-			fireEvent(new DiscoveryEvent(Kind.FOUND, packet));
-		} else if (!info.packet.equals(packet)) {
-			JDPClient.LOGGER.fine("Changed " + packet); //$NON-NLS-1$
-			fireEvent(new DiscoveryEvent(Kind.CHANGED, packet));
-		}
-		if (info.needToCalculateHeartBeat) {
-			long newHB = now - info.timestamp;
-			info.heartBeat = (info.heartBeat == 0 ? newHB : (info.heartBeat + newHB) / 2);
-		}
-		info.timestamp = now;
-	}
-
-	private long getBroadcastPeriodFromPayload(Map<String, String> payload) {
-		if (!payload.containsKey(KEY_BROADCAST_PERIOD)) {
-			return -1;
-		}
-		return Long.parseLong(payload.get(KEY_BROADCAST_PERIOD));
-	}
-
-	synchronized void fireEvent(DiscoveryEvent event) {
-		for (DiscoveryListener listener : listeners) {
-			listener.onDiscovery(event);
-		}
-	}
-
-	/**
-	 * @return a clone of the internal discoverables.
-	 */
-	public synchronized Set<Discoverable> getDiscoverables() {
-		Set<Discoverable> discoverables = new HashSet<>();
-		for (DiscoverableInfo info : infoMap.values()) {
-			discoverables.add(info.packet);
-		}
-		return discoverables;
-	}
-
-	public synchronized void addDiscoveryListener(DiscoveryListener listener) {
-		listeners.add(listener);
-	}
-
-	public synchronized void removeDiscoveryListener(DiscoveryListener listener) {
-		listeners.remove(listener);
-	}
-}
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/Pruner.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/Pruner.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/Pruner.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.client;
-
-import java.util.Collection;
-
-import org.openjdk.jmc.jdp.client.DiscoveryEvent.Kind;
-import org.openjdk.jmc.jdp.client.PacketProcessor.DiscoverableInfo;
-
-/**
- * This package private class prunes packets that have timed out, discovering lost services. This
- * class is responsible for emitting {@link DiscoveryEvent.Type} LOST events.
- */
-final class Pruner implements Runnable {
-	/**
-	 * How often to check for packets to mark as dead.
-	 */
-	final static long PRUNING_INTERVAL = 3000L;
-
-	/**
-	 * @see maxHBTime
-	 */
-	final static int DEFAULT_MAX_HB_TIME = 12000;
-
-	/**
-	 * The maximum time to wait for the next heart beat, no matter what.
-	 */
-	final int maxHBTime;
-
-	/**
-	 * This is how many heart beats to wait before considering the service down.
-	 */
-	static double HB_MISSED_BEFORE_DOWN = 2.5;
-
-	private volatile boolean isRunning;
-	private final PacketProcessor processor;
-
-	public Pruner(PacketProcessor processor, int maxHBTime) {
-		this.processor = processor;
-		this.maxHBTime = maxHBTime;
-	}
-
-	@Override
-	public void run() {
-		JDPClient.LOGGER.fine("JDP prune thread started!"); //$NON-NLS-1$
-		isRunning = true;
-		while (isRunning) {
-			try {
-				Thread.sleep(PRUNING_INTERVAL);
-			} catch (InterruptedException e) {
-				// Ignore - don't mind being interrupted.
-			}
-			checkPackets();
-		}
-		JDPClient.LOGGER.info("JDP prune thread shutting down!"); //$NON-NLS-1$
-	}
-
-	private void checkPackets() {
-		JDPClient.LOGGER.finer("JDP prune checking..."); //$NON-NLS-1$
-		long now = System.currentTimeMillis();
-		synchronized (processor) {
-			Collection<DiscoverableInfo> values = processor.infoMap.values();
-			DiscoverableInfo[] discoverableInfos = values.toArray(new DiscoverableInfo[values.size()]);
-			for (PacketProcessor.DiscoverableInfo info : discoverableInfos) {
-				if (info.heartBeat != 0) {
-					// If we missed a few heart beats, we consider it down.
-					if (now - info.timestamp > (info.heartBeat * HB_MISSED_BEFORE_DOWN)) {
-						remove(info);
-					}
-				} else if ((now - info.timestamp) > maxHBTime) {
-					remove(info);
-				}
-			}
-		}
-	}
-
-	/**
-	 * @param key
-	 *            the descriptor to remove.
-	 */
-	private void remove(DiscoverableInfo info) {
-		processor.infoMap.remove(info.packet.getSessionId());
-		JDPClient.LOGGER.fine("Lost " + info.packet); //$NON-NLS-1$
-		processor.fireEvent(new DiscoveryEvent(Kind.LOST, info.packet));
-	}
-
-	public void stop() {
-		isRunning = false;
-	}
-}
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/package-info.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/package-info.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/package-info.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-/**
- * This package contains the classes related to the JDP client. The JDP is a light-weight protocol
- * providing a heart beat for services wishing to broadcast their presence.
- */
-package org.openjdk.jmc.jdp.client;
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/CodingException.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/CodingException.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/CodingException.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.common;
-
-/**
- * Exception thrown when a packet cannot be encoded or decoded.
- */
-public class CodingException extends RuntimeException {
-	private static final long serialVersionUID = 1L;
-
-	public CodingException(String string) {
-		super(string);
-	}
-
-	public CodingException(String string, Exception e) {
-		super(string, e);
-	}
-}
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/Configuration.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/Configuration.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/Configuration.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.common;
-
-import java.net.InetAddress;
-
-/**
- * Interface providing the network settings for a JDP server.
- */
-public interface Configuration {
-	public static final int DEFAULT_MULTICAST_PORT = 7095;
-	public static final int DEFAULT_BROADCAST_PERIOD = 5000;
-	public static final short DEFAULT_TTL = 0;
-	public static final String DEFAULT_MULTICAST_ADDRESS = "224.0.23.178"; //$NON-NLS-1$
-	public static final int DEFAULT_MAX_HEART_BEAT_TIMEOUT = 12000;
-
-	/**
-	 * The multicast group to join.
-	 *
-	 * @return the {@link InetAddress} for the multicast group to join.
-	 */
-	InetAddress getMulticastAddress();
-
-	/**
-	 * The multicast port to use.
-	 *
-	 * @return the multicast port to use.
-	 */
-	int getMulticastPort();
-
-	/**
-	 * The time to wait between broadcasts, in milliseconds.
-	 * <p>
-	 * Note: the server will need to be restarted for any changes to take effect.
-	 * </p>
-	 */
-	int getBroadcastPeriod();
-
-	/**
-	 * The "time to live" for the JDP packets. The time to live is by default 0, which means that no
-	 * JDP packets will escape the subnet.
-	 * <p>
-	 * Note: the server will need to be restarted for any changes to take effect.
-	 * </p>
-	 */
-	short getTTL();
-
-	/**
-	 * @return the max time to wait for a new heart beat. Used for old style JDP packets that do not
-	 *         provide their broadcast interval, to timeout if the broadcaster is shut down after
-	 *         sending the first packet.
-	 */
-	int getMaxHeartBeatTimeout();
-}
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/ConfigurationFactory.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/ConfigurationFactory.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/ConfigurationFactory.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.common;
-
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-/**
- * Class with the network configuration settings default for the JDP protocol.
- */
-public final class ConfigurationFactory {
-	public static final InetAddress DEFAULT_MULTICAST_ADDRESS;
-
-	static {
-		InetAddress tmp = null;
-		try {
-			tmp = InetAddress.getByName(Configuration.DEFAULT_MULTICAST_ADDRESS);
-		} catch (UnknownHostException e) {
-			// Multicast address by IP, should never happen!
-			Logger.getLogger("org.openjdk.jmc.jdp.common").log(Level.SEVERE, //$NON-NLS-1$
-					"Could not create default mulitcast address!", //$NON-NLS-1$
-					e);
-		}
-		DEFAULT_MULTICAST_ADDRESS = tmp;
-	}
-
-	public static Configuration createConfiguration() {
-		// CMH - get values properly from the JVM settings here!
-		return new Configuration() {
-			@Override
-			public int getMulticastPort() {
-				return DEFAULT_MULTICAST_PORT;
-			}
-
-			@Override
-			public InetAddress getMulticastAddress() {
-				return ConfigurationFactory.DEFAULT_MULTICAST_ADDRESS;
-			}
-
-			@Override
-			public int getBroadcastPeriod() {
-				return DEFAULT_BROADCAST_PERIOD;
-			}
-
-			@Override
-			public short getTTL() {
-				return DEFAULT_TTL;
-			}
-
-			@Override
-			public int getMaxHeartBeatTimeout() {
-				return DEFAULT_MAX_HEART_BEAT_TIMEOUT;
-			}
-		};
-	}
-}
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/JDPPacket.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/JDPPacket.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/JDPPacket.java
+++ /dev/null
@@ -1,234 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.common;
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.EOFException;
-import java.io.IOException;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Map.Entry;
-
-import org.openjdk.jmc.jdp.client.Discoverable;
-
-/**
- * Class for delivering and retrieving the content.
- */
-public final class JDPPacket implements Discoverable {
-	static final String KEY_DISCOVERABLE_ID = "DISCOVERABLE_SESSION_UUID"; //$NON-NLS-1$
-	// Protocol version will be read as unsigned short
-	private static final int PROTOCOL_VERSION = 1;
-	private static final byte[] MAGIC = {(byte) 0xC0, (byte) 0xFF, (byte) 0xEE, (byte) 0x42};
-	private final Map<String, String> decoded;
-	private final byte[] encoded;
-	private final String sessionId;
-
-	public JDPPacket(Map<String, String> discoveryData) {
-		decoded = discoveryData;
-		encoded = encode(discoveryData);
-		sessionId = decoded.get(KEY_DISCOVERABLE_ID);
-	}
-
-	public JDPPacket(byte[] data) throws CodingException {
-		decoded = decode(data);
-		encoded = data;
-		sessionId = decoded.get(KEY_DISCOVERABLE_ID);
-	}
-
-	@Override
-	public Map<String, String> getPayload() {
-		return decoded;
-	}
-
-	@Override
-	public String getSessionId() {
-		return sessionId;
-	}
-
-	public byte[] getDiscoveryDataAsByteArray() {
-		return encoded;
-	}
-
-	private static byte[] encode(Map<String, String> discoveryData) throws CodingException {
-		// First generate the content
-		ByteArrayOutputStream baos = new ByteArrayOutputStream(512);
-		DataOutputStream dos = new DataOutputStream(baos);
-		try {
-			dos.write(MAGIC);
-			dos.writeShort(PROTOCOL_VERSION);
-
-			for (Entry<String, String> entry : discoveryData.entrySet()) {
-				if (entry.getValue() != null) {
-					dos.writeUTF(entry.getKey());
-					dos.writeUTF(entry.getValue());
-				}
-			}
-		} catch (IOException e) {
-			throw new CodingException("Problem encoding JDP packet!", e); //$NON-NLS-1$
-		}
-		return baos.toByteArray();
-	}
-
-	private static Map<String, String> decode(byte[] data) throws CodingException {
-		if (data.length < 6) {
-			throw new CodingException("Corrupt packet! Length was " + data.length); //$NON-NLS-1$
-		}
-		if (checkMagic(data)) {
-			try {
-				return decodeHotSpot(data);
-			} catch (IOException e) {
-				throw new CodingException("Problem decoding JDP packet!", e); //$NON-NLS-1$
-			}
-		} else if (JRockitJDPPacketDecoder.checkJRockitJDP(data)) {
-			return JRockitJDPPacketDecoder.decodeJRockitJDP(data);
-		} else {
-			throw new CodingException("Packet does not start with JDP magic!"); //$NON-NLS-1$
-		}
-	}
-
-	private static Map<String, String> decodeHotSpot(byte[] data) throws IOException {
-		ByteArrayInputStream bis = new ByteArrayInputStream(data);
-		DataInputStream dis = new DataInputStream(bis);
-		Map<String, String> dataMap = new HashMap<>();
-		// Read past magic - magic already verified when dispatching.
-		dis.readInt();
-		checkVersion(dis.readUnsignedShort());
-
-		// Check for empty packet
-		if (dis.available() == 0) {
-			return dataMap;
-		}
-
-		String value = null;
-		try {
-			while (true) {
-				String key = decodeString(dis);
-				value = decodeString(dis);
-				dataMap.put(key, value);
-			}
-		} catch (EOFException e) {
-			if (value == null) {
-				throw new IOException("Problem decoding JDP packet!", e); //$NON-NLS-1$
-			}
-		}
-
-		return dataMap;
-	}
-
-	/**
-	 * Reads a string from the byte buffer.
-	 *
-	 * @param data
-	 *            the byte buffer to read from.
-	 * @param size
-	 *            the size to read.
-	 * @param offset
-	 *            the position to read from.
-	 * @return the resulting String.
-	 * @throws IOException
-	 */
-	private static String decodeString(DataInputStream dis) throws IOException {
-		int length;
-		length = dis.readUnsignedShort();
-		if (length > dis.available()) {
-			throw new CodingException("Discovered corrupt JDP packet!"); //$NON-NLS-1$
-		}
-		byte[] buf = new byte[length];
-		if (dis.read(buf) != length) {
-			throw new IOException("Problem decoding string!"); //$NON-NLS-1$
-		}
-		return new String(buf, "UTF-8"); //$NON-NLS-1$
-
-	}
-
-	/**
-	 * Checks if the first bytes in the byte buffer are the JDP magic bytes.
-	 *
-	 * @param data
-	 *            the byte buffer to check.
-	 * @return true if the first bytes match, false otherwise.
-	 */
-	private static boolean checkMagic(byte[] data) {
-		for (int i = 0; i < MAGIC.length; i++) {
-			if (MAGIC[i] != data[i]) {
-				return false;
-			}
-		}
-		return true;
-	}
-
-	/**
-	 * Checks if this version bytes in the byte buffer are of a version that this class can decode.
-	 */
-	private static void checkVersion(int version) throws CodingException {
-		if (PROTOCOL_VERSION != version) {
-			throw new CodingException(
-					String.format("Found JDP packet with unsupported version. Version found was %d.", version)); //$NON-NLS-1$
-		}
-	}
-
-	@Override
-	public int hashCode() {
-		return sessionId.hashCode();
-	}
-
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj) {
-			return true;
-		}
-		if (obj == null) {
-			return false;
-		}
-		if (getClass() != obj.getClass()) {
-			return false;
-		}
-		JDPPacket other = (JDPPacket) obj;
-		if (!sessionId.equals(other.sessionId)) {
-			return false;
-		}
-		if (!decoded.equals(other.decoded)) {
-			return false;
-		}
-		return true;
-	}
-
-	@Override
-	public String toString() {
-		return String.format("JDPPacket(%s): (%s)", sessionId, decoded); //$NON-NLS-1$
-	}
-
-}
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/JRockitJDPPacketDecoder.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/JRockitJDPPacketDecoder.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/JRockitJDPPacketDecoder.java
+++ /dev/null
@@ -1,169 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.common;
-
-import java.io.ByteArrayInputStream;
-import java.io.DataInputStream;
-import java.net.MalformedURLException;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.StringTokenizer;
-
-import javax.management.remote.JMXServiceURL;
-
-/**
- * This class provides compatibility with the old style JRockit JDP packets.
- */
-final class JRockitJDPPacketDecoder {
-	public static final String KEY_VERSION = "version"; //$NON-NLS-1$
-	private static final char DELIMITER = '!';
-
-	// FIXME: These keys need to be shared/standardized
-	private static final String KEY_SERVICE_URL = "serviceURL"; //$NON-NLS-1$
-	private static final String KEY_NAME = "name"; //$NON-NLS-1$
-
-	private JRockitJDPPacketDecoder() {
-		throw new AssertionError("Not to be instantiated!"); //$NON-NLS-1$
-	}
-
-	public static boolean checkJRockitJDP(byte[] data) {
-		if (data[4] == '!') {
-			return true;
-		}
-		return false;
-	}
-
-	public static Map<String, String> decodeJRockitJDP(byte[] data) {
-		ByteArrayInputStream bis = new ByteArrayInputStream(data, 2, data.length - 2);
-		DataInputStream dis = new DataInputStream(bis);
-		Map<String, String> result = new HashMap<>();
-
-		String address = null;
-		int port = 0;
-		boolean supportsJMXRMI = true;
-
-		String payload = null;
-		try {
-			payload = dis.readUTF();
-
-			StringTokenizer strTok = new StringTokenizer(payload, String.valueOf(DELIMITER), false);
-
-			int totalTokens = strTok.countTokens();
-			if (totalTokens >= 4) {
-				// *** New protocol with version and jmx information***
-				decodeExtendedInfo(result, strTok.nextToken());
-				supportsJMXRMI = useJMXMAPI(strTok.nextToken());
-				address = strTok.nextToken();
-				port = Integer.parseInt(strTok.nextToken());
-				if (totalTokens >= 5) {
-					// Contains additional user defined name
-					result.put(KEY_NAME, strTok.nextToken());
-				}
-			} else {
-				// *** Old protocol ***
-				address = strTok.nextToken();
-				try {
-					port = Integer.parseInt(strTok.nextToken());
-				} catch (NumberFormatException nfe) {
-				}
-				supportsJMXRMI = false;
-			}
-		} catch (Exception e) {
-		}
-
-		try {
-			result.put(KEY_SERVICE_URL, createServiceURL(address, port, supportsJMXRMI).toString());
-		} catch (MalformedURLException e) {
-			// This should not happen - if it does, we simply will have no valid
-			// URL in the packet.
-		}
-		// FIXME: auto-resolve hostname?
-		result.put(JDPPacket.KEY_DISCOVERABLE_ID, address + ":" + port); //$NON-NLS-1$
-		return result;
-	}
-
-	private static boolean useJMXMAPI(String token) {
-		if ("1".equals(token)) { //$NON-NLS-1$
-			return true;
-		}
-		return false;
-	}
-
-	/**
-	 * Creates a jmx over rmi or "jmx over rmp" service URL.
-	 *
-	 * @param host
-	 *            the host name.
-	 * @param port
-	 *            port or {@link JMXDescriptorBuilder#DEFAULT_PORT} for the default port for the
-	 *            selected protocol
-	 * @param useJMXRMI
-	 *            true if JMX over RMI should be used, false to use JMX over RMP
-	 * @return the {@link JMXServiceURL}.
-	 * @throws MalformedURLException
-	 *             if the URL could not be created with the provided data.
-	 */
-	private static JMXServiceURL createServiceURL(String host, int port, boolean useJMXRMI)
-			throws MalformedURLException {
-		if (useJMXRMI) {
-			return new JMXServiceURL("rmi", "", 0, "/jndi/rmi://" + host + ":" + port + "/jmxrmi"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$
-		} else {
-			return new JMXServiceURL("rmp", host, port); //$NON-NLS-1$
-		}
-	}
-
-	/**
-	 * Decodes the extendedInfo into the hash map.
-	 *
-	 * @param result
-	 * @param extendedInfo
-	 */
-	private static void decodeExtendedInfo(Map<String, String> result, String extendedInfo) {
-		String[] info = extendedInfo.split(","); //$NON-NLS-1$
-		if (info == null) {
-			return;
-		}
-		// For backwards compatibility with the very oldest version of JDP...
-		if (info.length == 1 && extendedInfo.indexOf('=') < 0) {
-			result.put(KEY_VERSION, extendedInfo);
-			return;
-		}
-
-		for (String element : info) {
-			String[] keyValue = element.split("="); //$NON-NLS-1$
-			if (keyValue != null && keyValue.length == 2) {
-				result.put(keyValue[0], keyValue[1]);
-			}
-		}
-	}
-}
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/package-info.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/package-info.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/package-info.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-/**
- * This package contains the classes related to the JDP that are shared between the client and
- * server implementations. The JDP is a light-weight protocol providing a heart beat for services
- * wishing to broadcast their presence.
- */
-package org.openjdk.jmc.jdp.common;
diff a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/jmx/JMXDataKeys.java b/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/jmx/JMXDataKeys.java
--- a/application/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/jmx/JMXDataKeys.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.jmx;
-
-/**
- * The keys for data exposed by the {@link JMXJDPServer}.
- */
-public final class JMXDataKeys {
-	public static final String KEY_JMX_SERVICE_URL = "JMX_SERVICE_URL"; //$NON-NLS-1$
-	public static final String KEY_PID = "PROCESS_ID"; //$NON-NLS-1$
-	public static final String KEY_JAVA_COMMAND = "MAIN_CLASS"; //$NON-NLS-1$
-	public static final String KEY_INSTANCE_NAME = "INSTANCE_NAME"; //$NON-NLS-1$
-	public static final String KEY_RMI_HOSTNAME = "RMI_HOSTNAME"; //$NON-NLS-1$
-}
diff a/application/pom.xml b/application/pom.xml
--- a/application/pom.xml
+++ b/application/pom.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!--   
-   Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+   Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
    
    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
    
    The contents of this file are subject to the terms of either the Universal Permissive License 
    v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -95,11 +95,10 @@
 		<module>org.openjdk.jmc.greychart</module>
 		<module>org.openjdk.jmc.greychart.ui</module>
 		<module>org.openjdk.jmc.ide.jdt</module>
 		<module>org.openjdk.jmc.ide.launch</module>
 		<module>org.openjdk.jmc.ide.ui</module>
-		<module>org.openjdk.jmc.jdp</module>
 		<module>org.openjdk.jmc.joverflow</module>
 		<module>org.openjdk.jmc.joverflow.ui</module>
 		<module>org.openjdk.jmc.osgi.extension</module>
 		<module>org.openjdk.jmc.pde</module>
 		<module>org.openjdk.jmc.rcp.application</module>
@@ -164,10 +163,15 @@
 		<dependency>
 			<groupId>org.openjdk.jmc</groupId>
 			<artifactId>flightrecorder.rules.jdk</artifactId>
 			<version>8.0.0-SNAPSHOT</version>
 		</dependency>
+		<dependency>
+			<groupId>org.openjdk.jmc</groupId>
+			<artifactId>jdp</artifactId>
+			<version>8.0.0-SNAPSHOT</version>
+		</dependency>
 		<dependency>
 			<groupId>org.jacoco</groupId>
 			<artifactId>jacoco-maven-plugin</artifactId>
 			<version>0.8.3</version>
 		</dependency>
@@ -182,6 +186,6 @@
 					<pomDependencies>consider</pomDependencies>
 				</configuration>
 			</plugin>
 		</plugins>
 	</build>
-</project>
+</project>
diff a/application/tests/org.openjdk.jmc.jdp.test/build.properties b/application/tests/org.openjdk.jmc.jdp.test/build.properties
--- a/application/tests/org.openjdk.jmc.jdp.test/build.properties
+++ /dev/null
@@ -1,37 +0,0 @@
-#
-#  Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
-#
-#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-#
-#  The contents of this file are subject to the terms of either the Universal Permissive License 
-#  v 1.0 as shown at http://oss.oracle.com/licenses/upl
-#   
-#  or the following license:
-#   
-#  Redistribution and use in source and binary forms, with or without modification, are permitted
-#  provided that the following conditions are met:
-#   
-#  1. Redistributions of source code must retain the above copyright notice, this list of conditions
-#  and the following disclaimer.
-#   
-#  2. Redistributions in binary form must reproduce the above copyright notice, this list of
-#  conditions and the following disclaimer in the documentation and/or other materials provided with
-#  the distribution.
-#   
-#  3. Neither the name of the copyright holder nor the names of its contributors may be used to
-#  endorse or promote products derived from this software without specific prior written permission.
-#
-#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
-#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
-#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
-#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-#
-source.. = src/test/java/
-output.. = target/test-classes/
-bin.includes = META-INF/,\
-               .
-pde.match.rule.bundle=compatible
diff a/application/tests/org.openjdk.jmc.jdp.test/pom.xml b/application/tests/org.openjdk.jmc.jdp.test/pom.xml
--- a/application/tests/org.openjdk.jmc.jdp.test/pom.xml
+++ /dev/null
@@ -1,60 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--   
-   Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
-   
-   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-   
-   The contents of this file are subject to the terms of either the Universal Permissive License 
-   v 1.0 as shown at http://oss.oracle.com/licenses/upl
-   
-   or the following license:
-   
-   Redistribution and use in source and binary forms, with or without modification, are permitted
-   provided that the following conditions are met:
-   
-   1. Redistributions of source code must retain the above copyright notice, this list of conditions
-   and the following disclaimer.
-   
-   2. Redistributions in binary form must reproduce the above copyright notice, this list of
-   conditions and the following disclaimer in the documentation and/or other materials provided with
-   the distribution.
-   
-   3. Neither the name of the copyright holder nor the names of its contributors may be used to
-   endorse or promote products derived from this software without specific prior written permission.
-   
-   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
-   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
-   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
-   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-	<parent>
-		<groupId>org.openjdk.jmc</groupId>
-		<artifactId>missioncontrol.application.tests</artifactId>
-		<version>8.0.0-SNAPSHOT</version>
-	</parent>
-	<artifactId>org.openjdk.jmc.jdp.test</artifactId>
-	<packaging>eclipse-test-plugin</packaging>
-
-	<properties>
-		<spotless.config.path>${basedir}/../../../configuration/ide/eclipse/formatting/formatting.xml</spotless.config.path>
-	</properties>
-
-	<build>
-		<plugins>
-			<plugin>
-				<groupId>org.eclipse.tycho</groupId>
-				<artifactId>tycho-surefire-plugin</artifactId>
-				<version>${tycho.version}</version>
-				<configuration>
-					<argLine>-Djava.net.preferIPv4Stack=true</argLine>
-				</configuration>
-			</plugin>
-		</plugins>
-	</build>
-</project>
diff a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/AllTests.java b/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/AllTests.java
--- a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/AllTests.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp;
-
-import org.junit.runner.RunWith;
-import org.junit.runners.Suite;
-import org.junit.runners.Suite.SuiteClasses;
-
-import org.openjdk.jmc.jdp.client.JDPClientTest;
-import org.openjdk.jmc.jdp.client.JDPJMXTest;
-import org.openjdk.jmc.jdp.client.JDPPacketTest;
-import org.openjdk.jmc.jdp.client.JDPServerTest;
-
-/**
- * The test suite for all the tests related to the JDP component.
- */
-@RunWith(Suite.class)
-@SuiteClasses({JDPClientTest.class, JDPJMXTest.class, JDPPacketTest.class, JDPServerTest.class})
-public class AllTests {
-
-}
diff a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/ClientTester.java b/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/ClientTester.java
--- a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/ClientTester.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp;
-
-import java.io.IOException;
-import java.io.StringWriter;
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Map.Entry;
-
-import org.openjdk.jmc.jdp.client.DiscoveryEvent;
-import org.openjdk.jmc.jdp.client.DiscoveryListener;
-import org.openjdk.jmc.jdp.client.JDPClient;
-import org.openjdk.jmc.jdp.common.Configuration;
-
-/**
- * Prints whatever JDP packets that are discovered on stdout.
- */
-@SuppressWarnings("nls")
-public class ClientTester {
-	private static final String MULTICAST_PORT = "-port";
-	private static final String MULTICAST_ADDRESS = "-address";
-
-	static class Listener implements DiscoveryListener {
-		@Override
-		public void onDiscovery(DiscoveryEvent event) {
-			System.out.println(String.format("Event: %s session %s", event.getKind().toString(),
-					event.getDiscoverable().getSessionId()));
-			System.out.println(String.format("Data:%n%s", printMap(event.getDiscoverable().getPayload())));
-		}
-
-		private String printMap(Map<String, String> map) {
-			StringWriter sw = new StringWriter();
-			for (Entry<String, String> entry : map.entrySet()) {
-				sw.append(String.format("\t%-26s\t%-20s%n", entry.getKey(), entry.getValue()));
-			}
-			return sw.toString();
-		}
-	}
-
-	public static void main(String[] args) throws IOException {
-		Map<String, String> commands = parseArguments(args);
-		JDPClient client = createClient(commands);
-		client.addDiscoveryListener(new Listener());
-		client.start();
-		System.out.println("Press enter to quit");
-		System.in.read();
-		client.stop();
-	}
-
-	private static JDPClient createClient(Map<String, String> commands) throws UnknownHostException {
-		int port = Integer.parseInt(commands.get(MULTICAST_PORT));
-		InetAddress address = InetAddress.getByName(commands.get(MULTICAST_ADDRESS));
-		return new JDPClient(address, port, Configuration.DEFAULT_MAX_HEART_BEAT_TIMEOUT);
-	}
-
-	private static HashMap<String, String> parseArguments(String[] args) {
-		HashMap<String, String> commandMap = new HashMap<>();
-		commandMap.put(MULTICAST_ADDRESS, Configuration.DEFAULT_MULTICAST_ADDRESS);
-		commandMap.put(MULTICAST_PORT, Integer.toString(Configuration.DEFAULT_MULTICAST_PORT));
-
-		for (int i = 0; i < args.length; i++) {
-			if (args[i].startsWith("-")) {
-				StringBuilder buf = new StringBuilder();
-				int j = i + 1;
-				while (j < args.length && !args[j].startsWith("-")) {
-					buf.append(" ");
-					buf.append(args[j++]);
-				}
-				commandMap.put(args[i], buf.toString().trim());
-				i = j - 1;
-			}
-		}
-		return commandMap;
-	}
-}
diff a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/ServerTester.java b/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/ServerTester.java
--- a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/ServerTester.java
+++ /dev/null
@@ -1,214 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp;
-
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.management.remote.JMXServiceURL;
-
-import org.openjdk.jmc.jdp.client.TestToolkit;
-import org.openjdk.jmc.jdp.common.Configuration;
-import org.openjdk.jmc.jdp.jmx.JMXDataKeys;
-import org.openjdk.jmc.jdp.server.jmx.JMXJDPServer;
-
-@SuppressWarnings("nls")
-public class ServerTester {
-	private static final String BROADCAST_PERIOD = "-period";
-	private static final String MULTICAST_PORT = "-port";
-	private static final String MULTICAST_ADDRESS = "-address";
-	private static final String TTL = "-ttl";
-	private static final String JMXPORT = "-jmxport";
-	private static final String JMXHOST = "-jmxhost";
-	private static final String PID = "-pid";
-	private static final String COMMAND = "-command";
-	// Will automatically start a number of servers derived from the settings.
-	private static final String AUTO = "-n";
-	// Will put the JVMs in separate groups.
-	private static final String GROUPS = "-groups";
-	// Will disable explicit naming
-	private static final String DISABLE_NAMING = "-nonaming";
-
-	public static void main(String[] args) throws UnknownHostException {
-		Map<String, String> commands = parseArguments(args);
-		Collection<JMXJDPServer> servers = createServers(commands);
-		try {
-			for (JMXJDPServer server : servers) {
-				server.start();
-				TestToolkit.printServerSettings(server);
-			}
-			System.out.println("Press enter to quit");
-			System.in.read();
-			for (JMXJDPServer server : servers) {
-				System.out.println("Stopping server...");
-				server.stop();
-			}
-		} catch (IOException e) {
-			e.printStackTrace();
-			System.exit(2);
-		}
-	}
-
-	public static Configuration createConfiguration(
-		final short ttl, final int period, final int port, final InetAddress address) {
-		return new Configuration() {
-
-			@Override
-			public short getTTL() {
-				return ttl;
-			}
-
-			@Override
-			public int getMulticastPort() {
-				return port;
-			}
-
-			@Override
-			public InetAddress getMulticastAddress() {
-				return address;
-			}
-
-			@Override
-			public int getBroadcastPeriod() {
-				return period;
-			}
-
-			@Override
-			public int getMaxHeartBeatTimeout() {
-				return Configuration.DEFAULT_MAX_HEART_BEAT_TIMEOUT;
-			}
-		};
-	}
-
-	private static Collection<JMXJDPServer> createServers(Map<String, String> commands) throws UnknownHostException {
-		List<JMXJDPServer> servers = new ArrayList<>();
-		int auto = Integer.parseInt(commands.get(AUTO));
-		int groups = Integer.parseInt(commands.get(GROUPS));
-		boolean disableNaming = Boolean.parseBoolean(commands.get(DISABLE_NAMING));
-		for (int n = 0; n < auto; n++) {
-			String name = disableNaming ? null : createName(n, groups);
-			servers.add(new JMXJDPServer(createConfiguration(n, commands), createData(n, commands, name)));
-		}
-		return servers;
-	}
-
-	private static String createName(int n, int groups) {
-		if (groups == 0) {
-			return String.format("JVM %d", n);
-		}
-		int group = n / groups;
-		int jvmNo = n % groups;
-		return String.format("Cluster %d/JVM %d", group, jvmNo);
-	}
-
-	private static JMXServiceURL createAgentUrl(int n, Map<String, String> commands) {
-		String host = commands.get(JMXHOST);
-		int port = Integer.parseInt(commands.get(JMXPORT));
-		if (n > 0) {
-			host += n;
-			port += n;
-		}
-		try {
-			return TestToolkit.createServiceURL(host, port);
-		} catch (Exception e) {
-			System.out.println("Could not create service URL!");
-			e.printStackTrace();
-			System.exit(1);
-		}
-		return null;
-	}
-
-	private static Configuration createConfiguration(int n, Map<String, String> commands) throws UnknownHostException {
-		short ttl = (short) Integer.parseInt(commands.get(TTL));
-		int period = Integer.parseInt(commands.get(BROADCAST_PERIOD));
-		int port = Integer.parseInt(commands.get(MULTICAST_PORT));
-		InetAddress address = InetAddress.getByName(commands.get(MULTICAST_ADDRESS));
-
-		return createConfiguration(ttl, period, port, address);
-	}
-
-	private static HashMap<String, String> parseArguments(String[] args) {
-		HashMap<String, String> commandMap = new HashMap<>();
-		commandMap.put(MULTICAST_ADDRESS, Configuration.DEFAULT_MULTICAST_ADDRESS);
-		commandMap.put(MULTICAST_PORT, Integer.toString(Configuration.DEFAULT_MULTICAST_PORT));
-		commandMap.put(JMXHOST, "localhost");
-		commandMap.put(JMXPORT, "7095");
-		commandMap.put(TTL, Integer.toString(Configuration.DEFAULT_TTL));
-		commandMap.put(BROADCAST_PERIOD, Integer.toString(Configuration.DEFAULT_BROADCAST_PERIOD));
-		commandMap.put(AUTO, Integer.toString(1));
-		commandMap.put(GROUPS, Integer.toString(0));
-		commandMap.put(PID, JMXJDPServer.getPID());
-
-		for (int i = 0; i < args.length; i++) {
-			if (args[i].startsWith("-")) {
-				StringBuilder buf = new StringBuilder();
-				int j = i + 1;
-				while (j < args.length && !args[j].startsWith("-")) {
-					buf.append(" ");
-					buf.append(args[j++]);
-				}
-				commandMap.put(args[i], buf.toString().trim());
-				i = j - 1;
-			}
-		}
-		return commandMap;
-	}
-
-	private static Map<String, String> createData(int n, Map<String, String> commands, String name) {
-		Map<String, String> discoveryData = new HashMap<>();
-		discoveryData.put(JMXDataKeys.KEY_INSTANCE_NAME, name);
-		discoveryData.put(JMXDataKeys.KEY_JMX_SERVICE_URL, createAgentUrl(n, commands).toString());
-		discoveryData.put(JMXDataKeys.KEY_JAVA_COMMAND, createCommand(n, commands));
-		discoveryData.put(JMXDataKeys.KEY_PID, createPID(n, commands));
-		return discoveryData;
-	}
-
-	private static String createPID(int n, Map<String, String> commands) {
-		int base = Integer.parseInt(commands.get(PID));
-		return Integer.toString(base + n);
-	}
-
-	private static String createCommand(int n, Map<String, String> commands) {
-		String command = commands.get(COMMAND);
-		if (command == null) {
-			return JMXJDPServer.getJavaCommand();
-		}
-		return command;
-	}
-}
diff a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPClientTest.java b/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPClientTest.java
--- a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPClientTest.java
+++ /dev/null
@@ -1,138 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.client;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
-import java.util.Properties;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.TimeUnit;
-import java.util.logging.Logger;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import org.openjdk.jmc.jdp.common.Configuration;
-import org.openjdk.jmc.jdp.server.JDPServer;
-
-@SuppressWarnings("nls")
-public class JDPClientTest {
-	public final static Logger LOGGER = Logger.getLogger("org.openjdk.jmc.jdp.test");
-	private final Configuration config = TestToolkit.createConfiguration();
-	private volatile BlockingQueue<DiscoveryEvent> eventQueue;
-	private String discoverableID;
-
-	@Before
-	public void setUp() throws Exception {
-		discoverableID = TestToolkit.generateNewID("JDPClientTest");
-		System.out.println("JDP test with discoverable id " + discoverableID);
-	}
-
-	@Test
-	public void testJDPClient() throws Exception {
-		JDPClient client = createDefaultClient();
-		JDPServer server = createDefaultServer();
-		client.start();
-		server.start();
-
-		DiscoveryEvent event = eventQueue.poll(config.getBroadcastPeriod() * 2, TimeUnit.MILLISECONDS);
-		assertNotNull(event);
-		assertEquals(DiscoveryEvent.Kind.FOUND, event.getKind());
-
-		server.stop();
-		long sleepTime = (long) Math.max(Pruner.PRUNING_INTERVAL,
-				config.getBroadcastPeriod() * Pruner.HB_MISSED_BEFORE_DOWN);
-		event = eventQueue.poll(sleepTime * 8, TimeUnit.MILLISECONDS);
-
-		assertNotNull(event);
-		assertEquals(DiscoveryEvent.Kind.LOST, event.getKind());
-		client.stop();
-	}
-
-	@Test
-	public void testChangePacket() throws Exception {
-		JDPClient client = createDefaultClient();
-		JDPServer server = createDefaultServer();
-		client.start();
-		server.start();
-
-		DiscoveryEvent event = eventQueue.poll(config.getBroadcastPeriod() * 2, TimeUnit.MILLISECONDS);
-		assertNotNull(event);
-		assertEquals(event.getKind(), DiscoveryEvent.Kind.FOUND);
-		assertEquals(event.getDiscoverable().getPayload().get("apa"), "gorilla");
-
-		event = null;
-		Properties props = createDefaultData();
-		props.setProperty("apa", "mongo");
-		server.setDiscoveryData(props);
-
-		event = eventQueue.poll(config.getBroadcastPeriod() * 2, TimeUnit.MILLISECONDS);
-		assertNotNull(event);
-		assertEquals(event.getKind(), DiscoveryEvent.Kind.CHANGED);
-		assertEquals(event.getDiscoverable().getPayload().get("apa"), "mongo");
-		client.stop();
-		server.stop();
-	}
-
-	public JDPClient createDefaultClient() {
-		eventQueue = new LinkedBlockingQueue<>();
-		JDPClient client = new JDPClient(config.getMulticastAddress(), config.getMulticastPort());
-		client.addDiscoveryListener(new DiscoveryListener() {
-
-			@Override
-			public void onDiscovery(DiscoveryEvent event) {
-				if (discoverableID.equals(event.getDiscoverable().getPayload().get(JDPServer.KEY_DISCOVERABLE_ID))) {
-					eventQueue.add(event);
-				}
-			}
-		});
-		return client;
-	}
-
-	public JDPServer createDefaultServer() {
-		JDPServer server = new JDPServer(discoverableID, config);
-		TestToolkit.printServerSettings(server);
-
-		server.setDiscoveryData(createDefaultData());
-		return server;
-	}
-
-	private Properties createDefaultData() {
-		Properties props = new Properties();
-		props.setProperty("test", "JDPClientTest");
-		props.setProperty("apa", "gorilla");
-		return props;
-	}
-}
diff a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPJMXTest.java b/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPJMXTest.java
--- a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPJMXTest.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.client;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.TimeUnit;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.openjdk.jmc.jdp.common.Configuration;
-import org.openjdk.jmc.jdp.server.JDPServer;
-
-@SuppressWarnings("nls")
-public class JDPJMXTest {
-	private volatile BlockingQueue<DiscoveryEvent> eventQueue;
-	private final Configuration config = TestToolkit.createConfiguration();
-	private String discoverableID;
-
-	@Before
-	public void setUp() throws Exception {
-		discoverableID = TestToolkit.generateNewID("payload.id");
-		System.out.println("JDP test with discoverable id " + discoverableID);
-	}
-
-	@Test
-	public void testJDPClient() throws Exception {
-		JDPClient client = createDefaultClient();
-		JDPServer server = TestToolkit.createDefaultJMXJDPServer(discoverableID);
-		TestToolkit.printServerSettings(server);
-		client.start();
-		server.start();
-
-		DiscoveryEvent event = eventQueue.poll(config.getBroadcastPeriod() * 2, TimeUnit.MILLISECONDS);
-
-		assertNotNull(event);
-		assertEquals(DiscoveryEvent.Kind.FOUND, event.getKind());
-
-		server.stop();
-		event = null;
-		long sleepTime = (long) Math.max(Pruner.PRUNING_INTERVAL,
-				config.getBroadcastPeriod() * Pruner.HB_MISSED_BEFORE_DOWN) * 2;
-		event = eventQueue.poll(sleepTime * 8, TimeUnit.MILLISECONDS);
-
-		assertNotNull(event);
-		assertEquals(DiscoveryEvent.Kind.LOST, event.getKind());
-		client.stop();
-	}
-
-	public JDPClient createDefaultClient() {
-		eventQueue = new LinkedBlockingQueue<>();
-		JDPClient client = new JDPClient(config.getMulticastAddress(), config.getMulticastPort());
-		client.addDiscoveryListener(new DiscoveryListener() {
-			@Override
-			public void onDiscovery(DiscoveryEvent event) {
-				if (discoverableID.equals(event.getDiscoverable().getPayload().get(JDPServer.KEY_DISCOVERABLE_ID))) {
-					eventQueue.add(event);
-				}
-			}
-		});
-		return client;
-	}
-
-}
diff a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPPacketTest.java b/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPPacketTest.java
--- a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPPacketTest.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.client;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.junit.Test;
-
-import org.openjdk.jmc.jdp.common.JDPPacket;
-
-@SuppressWarnings("nls")
-public class JDPPacketTest {
-	private final static String KEY_NAME = "Name";
-	private final static String KEY_SKILLS = "Skills";
-	private final static String VALUE_NAME = "Duke";
-	private final static String VALUE_SKILLS = "Barrista, Programmer";
-
-	@Test
-	public void testCreatePacket() throws Exception {
-		new JDPPacket(createDefaultProperties());
-	}
-
-	@Test
-	public void testEncodeDecode() throws Exception {
-		JDPPacket packet = new JDPPacket(createDefaultProperties());
-		byte[] bytes = packet.getDiscoveryDataAsByteArray();
-		JDPPacket packet2 = new JDPPacket(bytes);
-		Map<String, String> props = packet2.getPayload();
-		assertEquals(props.get(KEY_NAME), VALUE_NAME);
-		assertEquals(props.get(KEY_SKILLS), VALUE_SKILLS);
-	}
-
-	static Map<String, String> createDefaultProperties() {
-		Map<String, String> props = new HashMap<>();
-		props.put(KEY_NAME, VALUE_NAME);
-		props.put(KEY_SKILLS, VALUE_SKILLS);
-		return props;
-	}
-
-	@Test
-	public void testEncodeDecodeEmpty() throws Exception {
-		JDPPacket packet = new JDPPacket(new HashMap<String, String>());
-		byte[] bytes = packet.getDiscoveryDataAsByteArray();
-		JDPPacket packet2 = new JDPPacket(bytes);
-		assertTrue(packet2.getPayload().size() == 0);
-	}
-
-	@Test
-	public void testTestToolkit() {
-		assertEquals("JMX_SERVICE_URL", TestToolkit
-				.parseCommaSeparatedByteString("74, 77, 88, 95, 83, 69, 82, 86, 73, 67, 69, 95, 85, 82, 76"));
-	}
-}
diff a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPServerTest.java b/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPServerTest.java
--- a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPServerTest.java
+++ /dev/null
@@ -1,127 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.client;
-
-import static org.junit.Assert.assertTrue;
-
-import java.net.InetAddress;
-
-import org.junit.Assume;
-import org.junit.Test;
-
-import org.openjdk.jmc.jdp.common.Configuration;
-import org.openjdk.jmc.jdp.server.JDPServer;
-
-@SuppressWarnings("nls")
-public class JDPServerTest {
-	@Test
-	public void testStartStopServer() throws Exception {
-		skip("This test should not be run unless we start using the JDP server for the JMC client.");
-
-		JDPServer server = new JDPServer(getNewId(), createCustomConfiguration());
-		TestToolkit.printServerSettings(server);
-
-		server.setDiscoveryData(JDPPacketTest.createDefaultProperties());
-		server.start();
-		assertTrue(server.isAlive());
-		Thread.sleep(10000);
-		server.stop();
-		assertTrue(!server.isAlive());
-	}
-
-	@Test
-	public void testRepeatedStartStopServer() throws Exception {
-		skip("This test should not be run unless we start using the JDP server for the JMC client.");
-
-		JDPServer server = new JDPServer(getNewId(), TestToolkit.createConfiguration());
-		TestToolkit.printServerSettings(server);
-
-		server.setDiscoveryData(JDPPacketTest.createDefaultProperties());
-		for (int i = 0; i < 200; i++) {
-			server.start();
-			assertTrue("Server should be alive!", server.isAlive());
-			server.stop();
-			assertTrue("Server should be dead!", !server.isAlive());
-			Thread.yield();
-		}
-	}
-
-	@Test
-	public void testStartEmptyPacket() throws Exception {
-		JDPServer server = new JDPServer(getNewId(), TestToolkit.createConfiguration());
-		server.start();
-		assertTrue(server.isAlive());
-		Thread.sleep(4000);
-		server.stop();
-	}
-
-	private static String getNewId() {
-		return TestToolkit.generateNewID("JDPServerTest");
-	}
-
-	private static Configuration createCustomConfiguration() {
-		return new Configuration() {
-			@Override
-			public short getTTL() {
-				return Configuration.DEFAULT_TTL;
-			}
-
-			@Override
-			public int getMulticastPort() {
-				return TestToolkit.TEST_MULTICAST_PORT;
-			}
-
-			@Override
-			public InetAddress getMulticastAddress() {
-				return TestToolkit.TEST_MULTICAST_ADDRESS;
-			}
-
-			@Override
-			public int getBroadcastPeriod() {
-				return 1000;
-			}
-
-			@Override
-			public int getMaxHeartBeatTimeout() {
-				return Configuration.DEFAULT_MAX_HEART_BEAT_TIMEOUT;
-			}
-		};
-	}
-
-	/**
-	 * @see Assume
-	 */
-	private final void skip(String message) {
-		Assume.assumeTrue(message, false);
-	}
-}
diff a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/TestToolkit.java b/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/TestToolkit.java
--- a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/TestToolkit.java
+++ /dev/null
@@ -1,151 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.client;
-
-import java.io.UnsupportedEncodingException;
-import java.net.InetAddress;
-import java.net.MalformedURLException;
-import java.net.UnknownHostException;
-import java.security.SecureRandom;
-import java.util.logging.Level;
-
-import javax.management.remote.JMXServiceURL;
-
-import org.openjdk.jmc.jdp.common.Configuration;
-import org.openjdk.jmc.jdp.server.JDPServer;
-import org.openjdk.jmc.jdp.server.jmx.JMXJDPServer;
-
-@SuppressWarnings("nls")
-public final class TestToolkit {
-	private static final String HEXES = "0123456789ABCDEF";
-	private final static SecureRandom RND = new SecureRandom();
-	public static final int TEST_MULTICAST_PORT = 7711;
-	private static final String TEST_MULTICAST_ADDRESS_STRING = "224.0.23.177";
-	public static final InetAddress TEST_MULTICAST_ADDRESS;
-
-	static {
-		InetAddress tmp = null;
-		try {
-			tmp = InetAddress.getByName(TEST_MULTICAST_ADDRESS_STRING);
-		} catch (UnknownHostException e) {
-			// Multicast address by IP, should never happen!
-			JDPClientTest.LOGGER.log(Level.SEVERE, "Could not create test multicast address!", e);
-		}
-		TEST_MULTICAST_ADDRESS = tmp;
-	}
-
-	private TestToolkit() {
-		throw new AssertionError("Nope!");
-	}
-
-	public static String toHexString(byte[] raw) {
-		if (raw == null) {
-			return null;
-		}
-		final StringBuilder hex = new StringBuilder(2 * raw.length);
-		for (final byte b : raw) {
-			hex.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));
-		}
-		return hex.toString();
-	}
-
-	public static long nextLong() {
-		return RND.nextLong();
-	}
-
-	public static String generateNewID(String prefix) {
-		return String.format("%s %X", prefix, RND.nextLong());
-	}
-
-	public static void printServerSettings(JDPServer server) {
-		System.out.println(
-				String.format("JDP Server created at %s:%d", server.getConfiguration().getMulticastAddress().toString(),
-						server.getConfiguration().getMulticastPort()));
-	}
-
-	public static JDPServer createDefaultJMXJDPServer(String discoverableID) throws MalformedURLException {
-		return new JMXJDPServer(discoverableID, createConfiguration(), createServiceURL("localhost", 7091), null);
-	}
-
-	public static JMXServiceURL createServiceURL(String host, int port) throws MalformedURLException {
-		return new JMXServiceURL(String.format("service:jmx:rmi:///jndi/rmi://%s:%d/jmxrmi", host, port));
-	}
-
-	public static String parseCommaSeparatedByteString(String str) {
-		String[] tmp = str.split(", ");
-		byte[] bytes = toBytes(tmp);
-		try {
-			return new String(bytes, "UTF-8");
-		} catch (UnsupportedEncodingException e) {
-			return null;
-		}
-	}
-
-	public static Configuration createConfiguration() {
-		return new Configuration() {
-
-			@Override
-			public short getTTL() {
-				return 1;
-			}
-
-			@Override
-			public int getMulticastPort() {
-				return TEST_MULTICAST_PORT;
-			}
-
-			@Override
-			public InetAddress getMulticastAddress() {
-				return TEST_MULTICAST_ADDRESS;
-			}
-
-			@Override
-			public int getBroadcastPeriod() {
-				return 1000;
-			}
-
-			@Override
-			public int getMaxHeartBeatTimeout() {
-				return Configuration.DEFAULT_MAX_HEART_BEAT_TIMEOUT;
-			}
-		};
-	}
-
-	private static byte[] toBytes(String[] tmp) {
-		byte[] bytes = new byte[tmp.length];
-		for (int i = 0; i < tmp.length; i++) {
-			bytes[i] = Byte.parseByte(tmp[i]);
-		}
-		return bytes;
-	}
-}
diff a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/Broadcaster.java b/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/Broadcaster.java
--- a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/Broadcaster.java
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.server;
-
-import java.io.IOException;
-import java.net.DatagramPacket;
-import java.net.InetAddress;
-import java.net.MulticastSocket;
-import java.util.logging.Level;
-
-import org.openjdk.jmc.jdp.common.Configuration;
-import org.openjdk.jmc.jdp.common.JDPPacket;
-
-/**
- * Class that will simply broadcast the provided data over the supplied socket until shut down.
- */
-@SuppressWarnings("nls")
-final class Broadcaster implements Runnable {
-	private final byte[] data;
-	private final MulticastSocket socket;
-	private final InetAddress addr;
-	private final int port;
-	private final int period;
-	private final JDPPacket packet;
-	private volatile boolean isRunning = true;
-
-	public Broadcaster(Configuration configuration, JDPPacket packet) throws IOException {
-		this(createSocket(configuration), configuration.getMulticastAddress(), configuration.getMulticastPort(), packet,
-				configuration.getBroadcastPeriod());
-	}
-
-	public Broadcaster(MulticastSocket socket, InetAddress addr, int port, JDPPacket packet, int period) {
-		this.socket = socket;
-		this.addr = addr;
-		this.port = port;
-		this.packet = packet;
-		data = packet.getDiscoveryDataAsByteArray();
-		this.period = period;
-	}
-
-	@Override
-	public void run() {
-		final DatagramPacket dp = new DatagramPacket(data, data.length, addr, port);
-		while (isRunning) {
-			long now = System.currentTimeMillis();
-
-			try {
-				socket.send(dp);
-				JDPServer.LOGGER.fine("Sent JDP packet with contents:" + packet.getPayload());
-			} catch (IOException ioe) {
-				if (isRunning) {
-					JDPServer.LOGGER.log(Level.SEVERE, "Could not send JDP packet!", ioe);
-					shutDown();
-				} else {
-					JDPServer.LOGGER.log(Level.INFO,
-							"Could not send JDP packet, most likely ok since Broadcaster had been shutdown and the socket closed.!",
-							ioe);
-				}
-			}
-			try {
-				Thread.sleep(Math.max(0, period - (System.currentTimeMillis() - now)));
-			} catch (InterruptedException e) {
-				// Ignore
-			}
-		}
-	}
-
-	public void shutDown() {
-		JDPServer.LOGGER.fine("Shutting down JDP broadcaster!");
-		isRunning = false;
-		socket.close();
-	}
-
-	private static MulticastSocket createSocket(Configuration configuration) throws IOException {
-		MulticastSocket socket = new MulticastSocket(configuration.getMulticastPort());
-		socket.setTimeToLive(configuration.getTTL());
-		socket.joinGroup(configuration.getMulticastAddress());
-		return socket;
-	}
-
-}
diff a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/JDPServer.java b/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/JDPServer.java
--- a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/JDPServer.java
+++ /dev/null
@@ -1,210 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.server;
-
-import java.io.IOException;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Properties;
-import java.util.logging.Logger;
-
-import org.openjdk.jmc.jdp.client.JDPClientTest;
-import org.openjdk.jmc.jdp.common.Configuration;
-import org.openjdk.jmc.jdp.common.ConfigurationFactory;
-import org.openjdk.jmc.jdp.common.JDPPacket;
-
-/**
- * <p>
- * The JDP server provides a light weight means to multicast a heart beat on the network, making it
- * possible for client applications to detect the presence a service. The life cycle of the JDP
- * server is normally handled by the JVM, and is kept in sync with the external JMX management
- * agent. It is possible to use the JDP server as a stand-alone utility to broadcast information
- * about other agents than the JVM managed server, however the life cycle will need be managed
- * manually. Use one JDPServer per service to broadcast information about.
- * </p>
- * <p>
- * The information broadcasted by the JDP server can be configured using the #setDiscoveryData()
- * method.
- * </p>
- */
-@SuppressWarnings("nls")
-public class JDPServer {
-	public final static String KEY_PERIOD = "BROADCAST_INTERVAL";
-	public final static String KEY_DISCOVERABLE_ID = "DISCOVERABLE_SESSION_UUID";
-	final static Logger LOGGER = JDPClientTest.LOGGER;
-	private final Configuration configuration;
-	private final String discoverableID;
-	private volatile boolean isStarted;
-	private Broadcaster broadcaster;
-	private Map<String, String> discoveryData;
-
-	/**
-	 * Creates a JDP server with the default settings.
-	 *
-	 * @param discoverableID
-	 *            a String uniquely identifying the service instance. Must not be null!
-	 */
-	public JDPServer(String discoverableID) {
-		this(discoverableID, ConfigurationFactory.createConfiguration());
-	}
-
-	/**
-	 * Creates a JDP server. Note that this JDP server will be using a random server ID.
-	 *
-	 * @param discoverableID
-	 *            a String uniquely identifying the service instance. Must not be null!
-	 * @param configuration
-	 *            the network configuration to use.
-	 */
-	public JDPServer(String discoverableID, Configuration configuration) {
-		if (discoverableID == null) {
-			throw new NullPointerException("A unique identifier for the discoverable must be provided!");
-		}
-		this.discoverableID = discoverableID;
-		this.configuration = configuration;
-	}
-
-	/**
-	 * This method starts the JDP server.
-	 *
-	 * @throws IOException
-	 */
-	public synchronized void start() throws IOException {
-		if (isAlive()) {
-			return;
-		}
-		JDPPacket packet = createPacket();
-		broadcaster = new Broadcaster(configuration, packet);
-		new Thread(broadcaster, "(JDP autodiscovery)").start();
-		isStarted = true;
-		LOGGER.info("JDP Server started at " + configuration.getMulticastAddress() + ":"
-				+ configuration.getMulticastPort());
-	}
-
-	/**
-	 * Calling this method will cause the JDP server to stop transmitting.
-	 */
-	public synchronized void stop() {
-		isStarted = false;
-		broadcaster.shutDown();
-		broadcaster = null;
-	}
-
-	/**
-	 * @return true if the JDP server is up and running, false otherwise.
-	 */
-	public synchronized boolean isAlive() {
-		return isStarted;
-	}
-
-	/**
-	 * Sets the properties to broadcast. This is a convenience method for those still using the old
-	 * java.util.Properties class.
-	 *
-	 * @param props
-	 *            the properties to broadcast.
-	 */
-	public synchronized void setDiscoveryData(Properties props) {
-		discoveryData = convert(props);
-		restartIfAlive();
-	}
-
-	/**
-	 * Sets the properties to broadcast.
-	 *
-	 * @param props
-	 *            the properties to broadcast.
-	 */
-	public synchronized void setDiscoveryData(Map<String, String> props) {
-		discoveryData = props;
-	}
-
-	/**
-	 * @return the properties to broadcast.
-	 */
-	public synchronized Map<String, String> getDiscoveryData() {
-		if (discoveryData == null) {
-			return Collections.emptyMap();
-		}
-		return discoveryData;
-	}
-
-	/**
-	 * Stops and then starts the server again.
-	 *
-	 * @throws IOException
-	 */
-	public void restart() throws IOException {
-		stop();
-		start();
-	}
-
-	private JDPPacket createPacket() {
-		Map<String, String> data = new HashMap<>(getDiscoveryData());
-		data.put(KEY_PERIOD, String.valueOf(configuration.getBroadcastPeriod()));
-		data.put(KEY_DISCOVERABLE_ID, discoverableID);
-		return new JDPPacket(data);
-	}
-
-	private void restartIfAlive() {
-		if (isAlive()) {
-			try {
-				restart();
-			} catch (IOException e) {
-				// It was already alive, so unlikely to happen.
-				// If it does, shutdown to cleanup.
-				stop();
-			}
-		}
-	}
-
-	/**
-	 * Helper method to convert from properties to map.
-	 */
-	private static Map<String, String> convert(Properties props) {
-		Map<String, String> result = new HashMap<>();
-		for (Entry<Object, Object> entry : props.entrySet()) {
-			result.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));
-		}
-		return result;
-	}
-
-	/**
-	 * @return the configuration settings for the server.
-	 */
-	public Configuration getConfiguration() {
-		return configuration;
-	}
-}
diff a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/JMXJDPServer.java b/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/JMXJDPServer.java
--- a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/JMXJDPServer.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.server.jmx;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.UUID;
-
-import javax.management.remote.JMXServiceURL;
-
-import org.openjdk.jmc.jdp.common.Configuration;
-import org.openjdk.jmc.jdp.jmx.JMXDataKeys;
-import org.openjdk.jmc.jdp.server.JDPServer;
-
-/**
- * Specialization of the general JDP Server to broadcast the JMX service URL and information needed
- * to support Mission Control.
- */
-@SuppressWarnings("nls")
-public class JMXJDPServer extends JDPServer {
-	private final static String JAVA_COMMAND = retrieveJavaCommand();
-
-	public JMXJDPServer(String discoverableID, Configuration configuration, Map<String, String> discoveryData) {
-		super(discoverableID, configuration);
-		setDiscoveryData(discoveryData);
-	}
-
-	public JMXJDPServer(Configuration configuration, Map<String, String> discoveryData) {
-		this(generateUniqueID(), configuration, discoveryData);
-	}
-
-	public JMXJDPServer(String discoverableID, Configuration configuration, JMXServiceURL agentURL, String name) {
-		super(discoverableID, configuration);
-		setDiscoveryData(createData(agentURL, name));
-	}
-
-	public JMXJDPServer(Configuration configuration, JMXServiceURL agentURL, String name) {
-		this(generateUniqueID(), configuration, agentURL, name);
-	}
-
-	private static String generateUniqueID() {
-		return UUID.randomUUID().toString();
-	}
-
-	private Map<String, String> createData(JMXServiceURL agentURL, String name) {
-		Map<String, String> discoveryData = new HashMap<>();
-		discoveryData.put(JMXDataKeys.KEY_PID, getPID());
-		discoveryData.put(JMXDataKeys.KEY_JAVA_COMMAND, JAVA_COMMAND);
-		discoveryData.put(JMXDataKeys.KEY_JMX_SERVICE_URL, agentURL.toString());
-		if (name != null) {
-			discoveryData.put(JMXDataKeys.KEY_INSTANCE_NAME, name);
-		}
-		return discoveryData;
-	}
-
-	private static String retrieveJavaCommand() {
-		// This one is usually missing when running with a custom launcher...
-		String javaCommand = System.getProperty("sun.java.command");
-
-		// ... so let's use the class path as backup. This is testing, and we just need something indicative of what the heck is running...
-		if (javaCommand == null) {
-			javaCommand = System.getProperty("java.class.path");
-		}
-
-		return javaCommand;
-	}
-
-	public static String getJavaCommand() {
-		return JAVA_COMMAND;
-	}
-
-	public static String getPID() {
-		return PIDHelper.getPID();
-	}
-}
diff a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/PIDHelper.java b/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/PIDHelper.java
--- a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/PIDHelper.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.jdp.server.jmx;
-
-import java.lang.management.ManagementFactory;
-
-/**
- * Helper class to determine the PID in a way that works for both JRockit and Hotspot. According to
- * Mandy, there will be a better way to retrieve this in JDK8. This class can in other words be
- * deleted in JDK8.
- */
-@SuppressWarnings("nls")
-class PIDHelper {
-	private static String PID = parsePID(ManagementFactory.getRuntimeMXBean().getName());
-
-	private static String parsePID(String s) {
-		if (s != null) {
-			return s.split("@")[0];
-		}
-		return null;
-	}
-
-	public static String getPID() {
-		return PID;
-	}
-}
diff a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/package-info.java b/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/package-info.java
--- a/application/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/package-info.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-/**
- * This package contains the classes for the specialized convenience JDP server for transmitting
- * information about JMX services. The JDP is a light-weight protocol providing a heart beat for
- * services wishing to broadcast their presence.
- */
-package org.openjdk.jmc.jdp.server.jmx;
diff a/application/tests/pom.xml b/application/tests/pom.xml
--- a/application/tests/pom.xml
+++ b/application/tests/pom.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!--   
-   Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+   Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
    
    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
    
    The contents of this file are subject to the terms of either the Universal Permissive License 
    v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -46,11 +46,10 @@
 		<module>org.openjdk.jmc.flightrecorder.controlpanel.ui.test</module>
 		<module>org.openjdk.jmc.flightrecorder.ext.jfx.test</module>
 		<module>org.openjdk.jmc.flightrecorder.ui.test</module>
 		<module>org.openjdk.jmc.greychart.test</module>
 		<module>org.openjdk.jmc.ide.launch.test</module>
-		<module>org.openjdk.jmc.jdp.test</module>
 		<module>org.openjdk.jmc.joverflow.test</module>
 		<module>org.openjdk.jmc.rjmx.services.jfr.test</module>
 		<module>org.openjdk.jmc.rjmx.test</module>
 		<module>org.openjdk.jmc.ui.common.test</module>
 		<module>org.openjdk.jmc.ui.test</module>
diff a/core/coverage/pom.xml b/core/coverage/pom.xml
--- a/core/coverage/pom.xml
+++ b/core/coverage/pom.xml
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!--
-   Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
-   Copyright (c) 2019, Red Hat Inc. All rights reserved.
+   Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
+   Copyright (c) 2019, 2020, Red Hat Inc. All rights reserved.
 
    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 
    The contents of this file are subject to the terms of either the Universal Permissive License
    v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -67,10 +67,15 @@
 		<dependency>
 			<groupId>org.openjdk.jmc</groupId>
 			<artifactId>flightrecorder.rules.jdk</artifactId>
 			<version>${project.version}</version>
 		</dependency>
+		<dependency>
+			<groupId>org.openjdk.jmc</groupId>
+			<artifactId>jdp</artifactId>
+			<version>${project.version}</version>
+		</dependency>
 		<!-- Second all the modules in core/tests/ -->
 		<dependency>
 			<groupId>org.openjdk.jmc</groupId>
 			<artifactId>common.test</artifactId>
 			<type>test-jar</type>
@@ -93,10 +98,15 @@
 			<groupId>org.openjdk.jmc</groupId>
 			<artifactId>flightrecorder.rules.jdk.test</artifactId>
 			<scope>test</scope>
 			<version>${project.version}</version>
 		</dependency>
+		<dependency>
+			<groupId>org.openjdk.jmc</groupId>
+			<artifactId>jdp.test</artifactId>
+			<version>${project.version}</version>
+		</dependency>
 	</dependencies>
 	<build>
 		<plugins>
 			<plugin>
 				<groupId>org.jacoco</groupId>
@@ -115,6 +125,6 @@
 					</execution>
 				</executions>
 			</plugin>
 		</plugins>
 	</build>
-</project>
+</project>
diff a/application/org.openjdk.jmc.jdp/.classpath b/core/org.openjdk.jmc.jdp/.classpath
--- a/application/org.openjdk.jmc.jdp/.classpath
+++ b/core/org.openjdk.jmc.jdp/.classpath
diff a/application/org.openjdk.jmc.jdp/.project b/core/org.openjdk.jmc.jdp/.project
--- a/application/org.openjdk.jmc.jdp/.project
+++ b/core/org.openjdk.jmc.jdp/.project
diff a/application/org.openjdk.jmc.jdp/.settings/org.eclipse.jdt.core.prefs b/core/org.openjdk.jmc.jdp/.settings/org.eclipse.jdt.core.prefs
--- a/application/org.openjdk.jmc.jdp/.settings/org.eclipse.jdt.core.prefs
+++ b/core/org.openjdk.jmc.jdp/.settings/org.eclipse.jdt.core.prefs
diff a/application/org.openjdk.jmc.jdp/META-INF/MANIFEST.MF b/core/org.openjdk.jmc.jdp/META-INF/MANIFEST.MF
--- a/application/org.openjdk.jmc.jdp/META-INF/MANIFEST.MF
+++ b/core/org.openjdk.jmc.jdp/META-INF/MANIFEST.MF
diff a/core/org.openjdk.jmc.jdp/build.properties b/core/org.openjdk.jmc.jdp/build.properties
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/build.properties
@@ -0,0 +1,37 @@
+#
+#  Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+#
+#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+#
+#  The contents of this file are subject to the terms of either the Universal Permissive License 
+#  v 1.0 as shown at http://oss.oracle.com/licenses/upl
+#   
+#  or the following license:
+#   
+#  Redistribution and use in source and binary forms, with or without modification, are permitted
+#  provided that the following conditions are met:
+#   
+#  1. Redistributions of source code must retain the above copyright notice, this list of conditions
+#  and the following disclaimer.
+#   
+#  2. Redistributions in binary form must reproduce the above copyright notice, this list of
+#  conditions and the following disclaimer in the documentation and/or other materials provided with
+#  the distribution.
+#   
+#  3. Neither the name of the copyright holder nor the names of its contributors may be used to
+#  endorse or promote products derived from this software without specific prior written permission.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+source.. = src/main/java/
+output.. = target/classes/
+bin.includes = META-INF/,\
+               .
+pde.match.rule.bundle=compatible
diff a/core/org.openjdk.jmc.jdp/pom.xml b/core/org.openjdk.jmc.jdp/pom.xml
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/pom.xml
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--   
+   Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+   
+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+   
+   The contents of this file are subject to the terms of either the Universal Permissive License 
+   v 1.0 as shown at http://oss.oracle.com/licenses/upl
+   
+   or the following license:
+   
+   Redistribution and use in source and binary forms, with or without modification, are permitted
+   provided that the following conditions are met:
+   
+   1. Redistributions of source code must retain the above copyright notice, this list of conditions
+   and the following disclaimer.
+   
+   2. Redistributions in binary form must reproduce the above copyright notice, this list of
+   conditions and the following disclaimer in the documentation and/or other materials provided with
+   the distribution.
+   
+   3. Neither the name of the copyright holder nor the names of its contributors may be used to
+   endorse or promote products derived from this software without specific prior written permission.
+   
+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<parent>
+		<groupId>org.openjdk.jmc</groupId>
+		<artifactId>missioncontrol.core</artifactId>
+		<version>8.0.0-SNAPSHOT</version>
+	</parent>
+	<artifactId>jdp</artifactId>
+
+	<properties>
+		<spotless.config.path>${basedir}/../../configuration/ide/eclipse/formatting/formatting.xml</spotless.config.path>
+	</properties>
+</project>
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/Discoverable.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/Discoverable.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/Discoverable.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.client;
+
+import java.util.Map;
+
+/**
+ * Discoverable instances represent a discovered JDP beacon transmitting data on the network.
+ * Discoverables are used to identify JVM services on the network. Usually the properties in a
+ * discoverable can be used to identify an endpoint of communication.
+ */
+public interface Discoverable {
+	/**
+	 * @return the identifier uniquely identifying the discoverable session. A new session UUID is
+	 *         generated whenever the JDP server is started.
+	 */
+	String getSessionId();
+
+	/**
+	 * @return the discovery payload.
+	 */
+	Map<String, String> getPayload();
+}
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/DiscoveryEvent.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/DiscoveryEvent.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/DiscoveryEvent.java
@@ -0,0 +1,80 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.client;
+
+/**
+ * A discovery event. These are triggered from the {@link JDPClient} when a {@link Discoverable} is
+ * FOUND, LOST or CHANGED.
+ */
+public final class DiscoveryEvent {
+	public enum Kind {
+		FOUND, LOST, CHANGED
+	}
+
+	private final Kind kind;
+	private final Discoverable discoverable;
+
+	/**
+	 * Constructor.
+	 *
+	 * @param kind
+	 *            the type of discovery that was made.
+	 * @param discoverable
+	 *            what was discovered.
+	 */
+	public DiscoveryEvent(Kind kind, Discoverable discoverable) {
+		this.kind = kind;
+		this.discoverable = discoverable;
+	}
+
+	/**
+	 * The kind of discovery. The discoverable was either FOUND, LOST or CHANGED.
+	 *
+	 * @return kind of discovery. The discoverable was either FOUND, LOST or CHANGED.
+	 */
+	public Kind getKind() {
+		return kind;
+	}
+
+	/**
+	 * @return the discoverable for which the status was updated.
+	 */
+	public Discoverable getDiscoverable() {
+		return discoverable;
+	}
+
+	@Override
+	public String toString() {
+		return kind + " " + discoverable.getSessionId(); //$NON-NLS-1$
+	}
+}
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/DiscoveryListener.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/DiscoveryListener.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/DiscoveryListener.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.client;
+
+/**
+ * Interface for listeners interested in notifications about discovered JVM services.
+ */
+public interface DiscoveryListener {
+
+	/**
+	 * Called whenever a change in the discovery status has occurred for a service.
+	 *
+	 * @param event
+	 *            an event describing the change in discovery status.
+	 */
+	public void onDiscovery(DiscoveryEvent event);
+}
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/JDPClient.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/JDPClient.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/JDPClient.java
@@ -0,0 +1,109 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.client;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.MulticastSocket;
+import java.util.Set;
+import java.util.logging.Logger;
+
+import org.openjdk.jmc.jdp.common.Configuration;
+import org.openjdk.jmc.jdp.common.ConfigurationFactory;
+
+/**
+ * <p>
+ * Client for discovering JVM services on the network.
+ * </p>
+ * <p>
+ * <b>Note:</b> This client is also able to parse packets sent using the legacy JRockit Discovery
+ * Protocol.
+ * </p>
+ */
+public final class JDPClient {
+	static final Logger LOGGER = Logger.getLogger("org.openjdk.jmc.jdp.client"); //$NON-NLS-1$
+	private final InetAddress address;
+	private final int port;
+	private PacketListener listener;
+	private final PacketProcessor processor = new PacketProcessor();
+	private final Pruner pruner;
+
+	public JDPClient() {
+		this(ConfigurationFactory.DEFAULT_MULTICAST_ADDRESS, Configuration.DEFAULT_MULTICAST_PORT,
+				Pruner.DEFAULT_MAX_HB_TIME);
+	}
+
+	JDPClient(InetAddress address, int port) {
+		this(address, port, Pruner.DEFAULT_MAX_HB_TIME);
+	}
+
+	public JDPClient(InetAddress address, int port, int heartBeatTimeout) {
+		this.address = address;
+		this.port = port;
+		pruner = new Pruner(processor, heartBeatTimeout);
+	}
+
+	public void addDiscoveryListener(DiscoveryListener listener) {
+		processor.addDiscoveryListener(listener);
+	}
+
+	public void removeDiscoveryListener(DiscoveryListener listener) {
+		processor.removeDiscoveryListener(listener);
+	}
+
+	public synchronized void start() throws IOException {
+		MulticastSocket socket = new MulticastSocket(port);
+		listener = new PacketListener(socket, processor);
+		socket.joinGroup(address);
+		ThreadGroup jdpThreads = new ThreadGroup("JDP Client"); //$NON-NLS-1$
+		startThread(jdpThreads, listener, "(JDP Packet Listener)"); //$NON-NLS-1$
+		startThread(jdpThreads, pruner, "(JDP Client Pruner)"); //$NON-NLS-1$
+	}
+
+	private static void startThread(ThreadGroup group, Runnable r, String name) {
+		Thread t = new Thread(group, r, name);
+		t.setDaemon(true);
+		t.start();
+	}
+
+	public synchronized void stop() {
+		pruner.stop();
+		if (listener != null) {
+			listener.stop();
+		}
+	}
+
+	public Set<Discoverable> getDiscoverables() {
+		return processor.getDiscoverables();
+	}
+}
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/PacketListener.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/PacketListener.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/PacketListener.java
@@ -0,0 +1,92 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.client;
+
+import java.io.IOException;
+import java.net.DatagramPacket;
+import java.net.MulticastSocket;
+import java.util.logging.Level;
+
+import org.openjdk.jmc.jdp.common.JDPPacket;
+
+/**
+ * This package private class listens for JDP packets, and sends them to the packet processor for
+ * processing.
+ */
+final class PacketListener implements Runnable {
+	private static final int BUFFER_LENGTH = 4096;
+	private final MulticastSocket socket;
+	private final PacketProcessor packetProcessor;
+	private volatile boolean shutdown;
+
+	PacketListener(MulticastSocket socket, PacketProcessor packetProcessor) {
+		this.socket = socket;
+		this.packetProcessor = packetProcessor;
+	}
+
+	@Override
+	public void run() {
+		byte[] buffer = new byte[BUFFER_LENGTH];
+		DatagramPacket dgram = new DatagramPacket(buffer, buffer.length);
+
+		while (!shutdown) {
+			try {
+				socket.receive(dgram);
+			} catch (IOException e) {
+				if (!shutdown) {
+					JDPClient.LOGGER.log(Level.SEVERE, "Problem listening for JDP packets! Shutting down!", e); //$NON-NLS-1$
+					socket.close();
+				}
+				return;
+			}
+
+			byte[] data = new byte[dgram.getLength()];
+			System.arraycopy(dgram.getData(), dgram.getOffset(), data, 0, dgram.getLength());
+			try {
+				JDPPacket packet = new JDPPacket(data);
+				packetProcessor.process(packet);
+			} catch (Exception e) {
+				JDPClient.LOGGER.log(Level.WARNING, "Could not decode JDP packet. Skipping!", e); //$NON-NLS-1$
+			}
+		}
+	}
+
+	public void stop() {
+		shutdown = true;
+		socket.close();
+	}
+
+	public boolean isAlive() {
+		return !shutdown;
+	}
+}
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/PacketProcessor.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/PacketProcessor.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/PacketProcessor.java
@@ -0,0 +1,125 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.client;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.openjdk.jmc.jdp.client.DiscoveryEvent.Kind;
+import org.openjdk.jmc.jdp.common.JDPPacket;
+
+/**
+ * The package private PacketProcessor will remember detected packets and transmit the appropriate
+ * events (FOUND, CHANGED) to the registered listeners.
+ */
+final class PacketProcessor {
+	private static final String KEY_BROADCAST_PERIOD = "BROADCAST_INTERVAL"; //$NON-NLS-1$
+
+	private final List<DiscoveryListener> listeners = new ArrayList<>();
+	final Map<String, DiscoverableInfo> infoMap = new HashMap<>();
+
+	static class DiscoverableInfo {
+		// The timestamp the packet was last discovered.
+		long timestamp;
+		// The calculated heart beat interval
+		long heartBeat;
+		// Heart beat in packet?
+		boolean needToCalculateHeartBeat = true;
+		// The packet discovered
+		JDPPacket packet;
+	}
+
+	public synchronized void process(JDPPacket packet) {
+		// Using same hb calculations as in the old JRMC client
+		DiscoverableInfo info = infoMap.get(packet.getSessionId());
+		long now = System.currentTimeMillis();
+
+		if (info == null) {
+			info = new DiscoverableInfo();
+			info.timestamp = now;
+			info.packet = packet;
+			infoMap.put(packet.getSessionId(), info);
+			long broadcastPeriod = getBroadcastPeriodFromPayload(packet.getPayload());
+			if (broadcastPeriod > 0) {
+				info.heartBeat = broadcastPeriod;
+				info.needToCalculateHeartBeat = false;
+			}
+			JDPClient.LOGGER.fine("Found " + packet); //$NON-NLS-1$
+			fireEvent(new DiscoveryEvent(Kind.FOUND, packet));
+		} else if (!info.packet.equals(packet)) {
+			JDPClient.LOGGER.fine("Changed " + packet); //$NON-NLS-1$
+			fireEvent(new DiscoveryEvent(Kind.CHANGED, packet));
+		}
+		if (info.needToCalculateHeartBeat) {
+			long newHB = now - info.timestamp;
+			info.heartBeat = (info.heartBeat == 0 ? newHB : (info.heartBeat + newHB) / 2);
+		}
+		info.timestamp = now;
+	}
+
+	private long getBroadcastPeriodFromPayload(Map<String, String> payload) {
+		if (!payload.containsKey(KEY_BROADCAST_PERIOD)) {
+			return -1;
+		}
+		return Long.parseLong(payload.get(KEY_BROADCAST_PERIOD));
+	}
+
+	synchronized void fireEvent(DiscoveryEvent event) {
+		for (DiscoveryListener listener : listeners) {
+			listener.onDiscovery(event);
+		}
+	}
+
+	/**
+	 * @return a clone of the internal discoverables.
+	 */
+	public synchronized Set<Discoverable> getDiscoverables() {
+		Set<Discoverable> discoverables = new HashSet<>();
+		for (DiscoverableInfo info : infoMap.values()) {
+			discoverables.add(info.packet);
+		}
+		return discoverables;
+	}
+
+	public synchronized void addDiscoveryListener(DiscoveryListener listener) {
+		listeners.add(listener);
+	}
+
+	public synchronized void removeDiscoveryListener(DiscoveryListener listener) {
+		listeners.remove(listener);
+	}
+}
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/Pruner.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/Pruner.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/Pruner.java
@@ -0,0 +1,120 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.client;
+
+import java.util.Collection;
+
+import org.openjdk.jmc.jdp.client.DiscoveryEvent.Kind;
+import org.openjdk.jmc.jdp.client.PacketProcessor.DiscoverableInfo;
+
+/**
+ * This package private class prunes packets that have timed out, discovering lost services. This
+ * class is responsible for emitting {@link DiscoveryEvent.Type} LOST events.
+ */
+final class Pruner implements Runnable {
+	/**
+	 * How often to check for packets to mark as dead.
+	 */
+	final static long PRUNING_INTERVAL = 3000L;
+
+	/**
+	 * @see maxHBTime
+	 */
+	final static int DEFAULT_MAX_HB_TIME = 12000;
+
+	/**
+	 * The maximum time to wait for the next heart beat, no matter what.
+	 */
+	final int maxHBTime;
+
+	/**
+	 * This is how many heart beats to wait before considering the service down.
+	 */
+	static double HB_MISSED_BEFORE_DOWN = 2.5;
+
+	private volatile boolean isRunning;
+	private final PacketProcessor processor;
+
+	public Pruner(PacketProcessor processor, int maxHBTime) {
+		this.processor = processor;
+		this.maxHBTime = maxHBTime;
+	}
+
+	@Override
+	public void run() {
+		JDPClient.LOGGER.fine("JDP prune thread started!"); //$NON-NLS-1$
+		isRunning = true;
+		while (isRunning) {
+			try {
+				Thread.sleep(PRUNING_INTERVAL);
+			} catch (InterruptedException e) {
+				// Ignore - don't mind being interrupted.
+			}
+			checkPackets();
+		}
+		JDPClient.LOGGER.info("JDP prune thread shutting down!"); //$NON-NLS-1$
+	}
+
+	private void checkPackets() {
+		JDPClient.LOGGER.finer("JDP prune checking..."); //$NON-NLS-1$
+		long now = System.currentTimeMillis();
+		synchronized (processor) {
+			Collection<DiscoverableInfo> values = processor.infoMap.values();
+			DiscoverableInfo[] discoverableInfos = values.toArray(new DiscoverableInfo[values.size()]);
+			for (PacketProcessor.DiscoverableInfo info : discoverableInfos) {
+				if (info.heartBeat != 0) {
+					// If we missed a few heart beats, we consider it down.
+					if (now - info.timestamp > (info.heartBeat * HB_MISSED_BEFORE_DOWN)) {
+						remove(info);
+					}
+				} else if ((now - info.timestamp) > maxHBTime) {
+					remove(info);
+				}
+			}
+		}
+	}
+
+	/**
+	 * @param key
+	 *            the descriptor to remove.
+	 */
+	private void remove(DiscoverableInfo info) {
+		processor.infoMap.remove(info.packet.getSessionId());
+		JDPClient.LOGGER.fine("Lost " + info.packet); //$NON-NLS-1$
+		processor.fireEvent(new DiscoveryEvent(Kind.LOST, info.packet));
+	}
+
+	public void stop() {
+		isRunning = false;
+	}
+}
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/package-info.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/package-info.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/client/package-info.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/**
+ * This package contains the classes related to the JDP client. The JDP is a light-weight protocol
+ * providing a heart beat for services wishing to broadcast their presence.
+ */
+package org.openjdk.jmc.jdp.client;
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/CodingException.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/CodingException.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/CodingException.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.common;
+
+/**
+ * Exception thrown when a packet cannot be encoded or decoded.
+ */
+public class CodingException extends RuntimeException {
+	private static final long serialVersionUID = 1L;
+
+	public CodingException(String string) {
+		super(string);
+	}
+
+	public CodingException(String string, Exception e) {
+		super(string, e);
+	}
+}
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/Configuration.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/Configuration.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/Configuration.java
@@ -0,0 +1,84 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.common;
+
+import java.net.InetAddress;
+
+/**
+ * Interface providing the network settings for a JDP server.
+ */
+public interface Configuration {
+	public static final int DEFAULT_MULTICAST_PORT = 7095;
+	public static final int DEFAULT_BROADCAST_PERIOD = 5000;
+	public static final short DEFAULT_TTL = 0;
+	public static final String DEFAULT_MULTICAST_ADDRESS = "224.0.23.178"; //$NON-NLS-1$
+	public static final int DEFAULT_MAX_HEART_BEAT_TIMEOUT = 12000;
+
+	/**
+	 * The multicast group to join.
+	 *
+	 * @return the {@link InetAddress} for the multicast group to join.
+	 */
+	InetAddress getMulticastAddress();
+
+	/**
+	 * The multicast port to use.
+	 *
+	 * @return the multicast port to use.
+	 */
+	int getMulticastPort();
+
+	/**
+	 * The time to wait between broadcasts, in milliseconds.
+	 * <p>
+	 * Note: the server will need to be restarted for any changes to take effect.
+	 * </p>
+	 */
+	int getBroadcastPeriod();
+
+	/**
+	 * The "time to live" for the JDP packets. The time to live is by default 0, which means that no
+	 * JDP packets will escape the subnet.
+	 * <p>
+	 * Note: the server will need to be restarted for any changes to take effect.
+	 * </p>
+	 */
+	short getTTL();
+
+	/**
+	 * @return the max time to wait for a new heart beat. Used for old style JDP packets that do not
+	 *         provide their broadcast interval, to timeout if the broadcaster is shut down after
+	 *         sending the first packet.
+	 */
+	int getMaxHeartBeatTimeout();
+}
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/ConfigurationFactory.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/ConfigurationFactory.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/ConfigurationFactory.java
@@ -0,0 +1,88 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.common;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+/**
+ * Class with the network configuration settings default for the JDP protocol.
+ */
+public final class ConfigurationFactory {
+	public static final InetAddress DEFAULT_MULTICAST_ADDRESS;
+
+	static {
+		InetAddress tmp = null;
+		try {
+			tmp = InetAddress.getByName(Configuration.DEFAULT_MULTICAST_ADDRESS);
+		} catch (UnknownHostException e) {
+			// Multicast address by IP, should never happen!
+			Logger.getLogger("org.openjdk.jmc.jdp.common").log(Level.SEVERE, //$NON-NLS-1$
+					"Could not create default mulitcast address!", //$NON-NLS-1$
+					e);
+		}
+		DEFAULT_MULTICAST_ADDRESS = tmp;
+	}
+
+	public static Configuration createConfiguration() {
+		// CMH - get values properly from the JVM settings here!
+		return new Configuration() {
+			@Override
+			public int getMulticastPort() {
+				return DEFAULT_MULTICAST_PORT;
+			}
+
+			@Override
+			public InetAddress getMulticastAddress() {
+				return ConfigurationFactory.DEFAULT_MULTICAST_ADDRESS;
+			}
+
+			@Override
+			public int getBroadcastPeriod() {
+				return DEFAULT_BROADCAST_PERIOD;
+			}
+
+			@Override
+			public short getTTL() {
+				return DEFAULT_TTL;
+			}
+
+			@Override
+			public int getMaxHeartBeatTimeout() {
+				return DEFAULT_MAX_HEART_BEAT_TIMEOUT;
+			}
+		};
+	}
+}
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/JDPPacket.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/JDPPacket.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/JDPPacket.java
@@ -0,0 +1,234 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.common;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.EOFException;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import org.openjdk.jmc.jdp.client.Discoverable;
+
+/**
+ * Class for delivering and retrieving the content.
+ */
+public final class JDPPacket implements Discoverable {
+	static final String KEY_DISCOVERABLE_ID = "DISCOVERABLE_SESSION_UUID"; //$NON-NLS-1$
+	// Protocol version will be read as unsigned short
+	private static final int PROTOCOL_VERSION = 1;
+	private static final byte[] MAGIC = {(byte) 0xC0, (byte) 0xFF, (byte) 0xEE, (byte) 0x42};
+	private final Map<String, String> decoded;
+	private final byte[] encoded;
+	private final String sessionId;
+
+	public JDPPacket(Map<String, String> discoveryData) {
+		decoded = discoveryData;
+		encoded = encode(discoveryData);
+		sessionId = decoded.get(KEY_DISCOVERABLE_ID);
+	}
+
+	public JDPPacket(byte[] data) throws CodingException {
+		decoded = decode(data);
+		encoded = data;
+		sessionId = decoded.get(KEY_DISCOVERABLE_ID);
+	}
+
+	@Override
+	public Map<String, String> getPayload() {
+		return decoded;
+	}
+
+	@Override
+	public String getSessionId() {
+		return sessionId;
+	}
+
+	public byte[] getDiscoveryDataAsByteArray() {
+		return encoded;
+	}
+
+	private static byte[] encode(Map<String, String> discoveryData) throws CodingException {
+		// First generate the content
+		ByteArrayOutputStream baos = new ByteArrayOutputStream(512);
+		DataOutputStream dos = new DataOutputStream(baos);
+		try {
+			dos.write(MAGIC);
+			dos.writeShort(PROTOCOL_VERSION);
+
+			for (Entry<String, String> entry : discoveryData.entrySet()) {
+				if (entry.getValue() != null) {
+					dos.writeUTF(entry.getKey());
+					dos.writeUTF(entry.getValue());
+				}
+			}
+		} catch (IOException e) {
+			throw new CodingException("Problem encoding JDP packet!", e); //$NON-NLS-1$
+		}
+		return baos.toByteArray();
+	}
+
+	private static Map<String, String> decode(byte[] data) throws CodingException {
+		if (data.length < 6) {
+			throw new CodingException("Corrupt packet! Length was " + data.length); //$NON-NLS-1$
+		}
+		if (checkMagic(data)) {
+			try {
+				return decodeHotSpot(data);
+			} catch (IOException e) {
+				throw new CodingException("Problem decoding JDP packet!", e); //$NON-NLS-1$
+			}
+		} else if (JRockitJDPPacketDecoder.checkJRockitJDP(data)) {
+			return JRockitJDPPacketDecoder.decodeJRockitJDP(data);
+		} else {
+			throw new CodingException("Packet does not start with JDP magic!"); //$NON-NLS-1$
+		}
+	}
+
+	private static Map<String, String> decodeHotSpot(byte[] data) throws IOException {
+		ByteArrayInputStream bis = new ByteArrayInputStream(data);
+		DataInputStream dis = new DataInputStream(bis);
+		Map<String, String> dataMap = new HashMap<>();
+		// Read past magic - magic already verified when dispatching.
+		dis.readInt();
+		checkVersion(dis.readUnsignedShort());
+
+		// Check for empty packet
+		if (dis.available() == 0) {
+			return dataMap;
+		}
+
+		String value = null;
+		try {
+			while (true) {
+				String key = decodeString(dis);
+				value = decodeString(dis);
+				dataMap.put(key, value);
+			}
+		} catch (EOFException e) {
+			if (value == null) {
+				throw new IOException("Problem decoding JDP packet!", e); //$NON-NLS-1$
+			}
+		}
+
+		return dataMap;
+	}
+
+	/**
+	 * Reads a string from the byte buffer.
+	 *
+	 * @param data
+	 *            the byte buffer to read from.
+	 * @param size
+	 *            the size to read.
+	 * @param offset
+	 *            the position to read from.
+	 * @return the resulting String.
+	 * @throws IOException
+	 */
+	private static String decodeString(DataInputStream dis) throws IOException {
+		int length;
+		length = dis.readUnsignedShort();
+		if (length > dis.available()) {
+			throw new CodingException("Discovered corrupt JDP packet!"); //$NON-NLS-1$
+		}
+		byte[] buf = new byte[length];
+		if (dis.read(buf) != length) {
+			throw new IOException("Problem decoding string!"); //$NON-NLS-1$
+		}
+		return new String(buf, "UTF-8"); //$NON-NLS-1$
+
+	}
+
+	/**
+	 * Checks if the first bytes in the byte buffer are the JDP magic bytes.
+	 *
+	 * @param data
+	 *            the byte buffer to check.
+	 * @return true if the first bytes match, false otherwise.
+	 */
+	private static boolean checkMagic(byte[] data) {
+		for (int i = 0; i < MAGIC.length; i++) {
+			if (MAGIC[i] != data[i]) {
+				return false;
+			}
+		}
+		return true;
+	}
+
+	/**
+	 * Checks if this version bytes in the byte buffer are of a version that this class can decode.
+	 */
+	private static void checkVersion(int version) throws CodingException {
+		if (PROTOCOL_VERSION != version) {
+			throw new CodingException(
+					String.format("Found JDP packet with unsupported version. Version found was %d.", version)); //$NON-NLS-1$
+		}
+	}
+
+	@Override
+	public int hashCode() {
+		return sessionId.hashCode();
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj) {
+			return true;
+		}
+		if (obj == null) {
+			return false;
+		}
+		if (getClass() != obj.getClass()) {
+			return false;
+		}
+		JDPPacket other = (JDPPacket) obj;
+		if (!sessionId.equals(other.sessionId)) {
+			return false;
+		}
+		if (!decoded.equals(other.decoded)) {
+			return false;
+		}
+		return true;
+	}
+
+	@Override
+	public String toString() {
+		return String.format("JDPPacket(%s): (%s)", sessionId, decoded); //$NON-NLS-1$
+	}
+
+}
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/JRockitJDPPacketDecoder.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/JRockitJDPPacketDecoder.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/JRockitJDPPacketDecoder.java
@@ -0,0 +1,169 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.common;
+
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.net.MalformedURLException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.StringTokenizer;
+
+import javax.management.remote.JMXServiceURL;
+
+/**
+ * This class provides compatibility with the old style JRockit JDP packets.
+ */
+final class JRockitJDPPacketDecoder {
+	public static final String KEY_VERSION = "version"; //$NON-NLS-1$
+	private static final char DELIMITER = '!';
+
+	// FIXME: These keys need to be shared/standardized
+	private static final String KEY_SERVICE_URL = "serviceURL"; //$NON-NLS-1$
+	private static final String KEY_NAME = "name"; //$NON-NLS-1$
+
+	private JRockitJDPPacketDecoder() {
+		throw new AssertionError("Not to be instantiated!"); //$NON-NLS-1$
+	}
+
+	public static boolean checkJRockitJDP(byte[] data) {
+		if (data[4] == '!') {
+			return true;
+		}
+		return false;
+	}
+
+	public static Map<String, String> decodeJRockitJDP(byte[] data) {
+		ByteArrayInputStream bis = new ByteArrayInputStream(data, 2, data.length - 2);
+		DataInputStream dis = new DataInputStream(bis);
+		Map<String, String> result = new HashMap<>();
+
+		String address = null;
+		int port = 0;
+		boolean supportsJMXRMI = true;
+
+		String payload = null;
+		try {
+			payload = dis.readUTF();
+
+			StringTokenizer strTok = new StringTokenizer(payload, String.valueOf(DELIMITER), false);
+
+			int totalTokens = strTok.countTokens();
+			if (totalTokens >= 4) {
+				// *** New protocol with version and jmx information***
+				decodeExtendedInfo(result, strTok.nextToken());
+				supportsJMXRMI = useJMXMAPI(strTok.nextToken());
+				address = strTok.nextToken();
+				port = Integer.parseInt(strTok.nextToken());
+				if (totalTokens >= 5) {
+					// Contains additional user defined name
+					result.put(KEY_NAME, strTok.nextToken());
+				}
+			} else {
+				// *** Old protocol ***
+				address = strTok.nextToken();
+				try {
+					port = Integer.parseInt(strTok.nextToken());
+				} catch (NumberFormatException nfe) {
+				}
+				supportsJMXRMI = false;
+			}
+		} catch (Exception e) {
+		}
+
+		try {
+			result.put(KEY_SERVICE_URL, createServiceURL(address, port, supportsJMXRMI).toString());
+		} catch (MalformedURLException e) {
+			// This should not happen - if it does, we simply will have no valid
+			// URL in the packet.
+		}
+		// FIXME: auto-resolve hostname?
+		result.put(JDPPacket.KEY_DISCOVERABLE_ID, address + ":" + port); //$NON-NLS-1$
+		return result;
+	}
+
+	private static boolean useJMXMAPI(String token) {
+		if ("1".equals(token)) { //$NON-NLS-1$
+			return true;
+		}
+		return false;
+	}
+
+	/**
+	 * Creates a jmx over rmi or "jmx over rmp" service URL.
+	 *
+	 * @param host
+	 *            the host name.
+	 * @param port
+	 *            port or {@link JMXDescriptorBuilder#DEFAULT_PORT} for the default port for the
+	 *            selected protocol
+	 * @param useJMXRMI
+	 *            true if JMX over RMI should be used, false to use JMX over RMP
+	 * @return the {@link JMXServiceURL}.
+	 * @throws MalformedURLException
+	 *             if the URL could not be created with the provided data.
+	 */
+	private static JMXServiceURL createServiceURL(String host, int port, boolean useJMXRMI)
+			throws MalformedURLException {
+		if (useJMXRMI) {
+			return new JMXServiceURL("rmi", "", 0, "/jndi/rmi://" + host + ":" + port + "/jmxrmi"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$
+		} else {
+			return new JMXServiceURL("rmp", host, port); //$NON-NLS-1$
+		}
+	}
+
+	/**
+	 * Decodes the extendedInfo into the hash map.
+	 *
+	 * @param result
+	 * @param extendedInfo
+	 */
+	private static void decodeExtendedInfo(Map<String, String> result, String extendedInfo) {
+		String[] info = extendedInfo.split(","); //$NON-NLS-1$
+		if (info == null) {
+			return;
+		}
+		// For backwards compatibility with the very oldest version of JDP...
+		if (info.length == 1 && extendedInfo.indexOf('=') < 0) {
+			result.put(KEY_VERSION, extendedInfo);
+			return;
+		}
+
+		for (String element : info) {
+			String[] keyValue = element.split("="); //$NON-NLS-1$
+			if (keyValue != null && keyValue.length == 2) {
+				result.put(keyValue[0], keyValue[1]);
+			}
+		}
+	}
+}
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/package-info.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/package-info.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/common/package-info.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/**
+ * This package contains the classes related to the JDP that are shared between the client and
+ * server implementations. The JDP is a light-weight protocol providing a heart beat for services
+ * wishing to broadcast their presence.
+ */
+package org.openjdk.jmc.jdp.common;
diff a/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/jmx/JMXDataKeys.java b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/jmx/JMXDataKeys.java
--- /dev/null
+++ b/core/org.openjdk.jmc.jdp/src/main/java/org/openjdk/jmc/jdp/jmx/JMXDataKeys.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.jmx;
+
+/**
+ * The keys for data exposed by the JMXJDPServer
+ */
+public final class JMXDataKeys {
+	public static final String KEY_JMX_SERVICE_URL = "JMX_SERVICE_URL"; //$NON-NLS-1$
+	public static final String KEY_PID = "PROCESS_ID"; //$NON-NLS-1$
+	public static final String KEY_JAVA_COMMAND = "MAIN_CLASS"; //$NON-NLS-1$
+	public static final String KEY_INSTANCE_NAME = "INSTANCE_NAME"; //$NON-NLS-1$
+	public static final String KEY_RMI_HOSTNAME = "RMI_HOSTNAME"; //$NON-NLS-1$
+}
diff a/core/pom.xml b/core/pom.xml
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -52,10 +52,11 @@
 	<modules>
 		<module>org.openjdk.jmc.common</module>
 		<module>org.openjdk.jmc.flightrecorder</module>
 		<module>org.openjdk.jmc.flightrecorder.rules</module>
 		<module>org.openjdk.jmc.flightrecorder.rules.jdk</module>
+		<module>org.openjdk.jmc.jdp</module>
 		<module>tests</module>
 		<module>coverage</module>
 	</modules>
 
 	<distributionManagement>
diff a/application/tests/org.openjdk.jmc.jdp.test/.classpath b/core/tests/org.openjdk.jmc.jdp.test/.classpath
--- a/application/tests/org.openjdk.jmc.jdp.test/.classpath
+++ b/core/tests/org.openjdk.jmc.jdp.test/.classpath
diff a/application/tests/org.openjdk.jmc.jdp.test/.project b/core/tests/org.openjdk.jmc.jdp.test/.project
--- a/application/tests/org.openjdk.jmc.jdp.test/.project
+++ b/core/tests/org.openjdk.jmc.jdp.test/.project
diff a/application/tests/org.openjdk.jmc.jdp.test/META-INF/MANIFEST.MF b/core/tests/org.openjdk.jmc.jdp.test/META-INF/MANIFEST.MF
--- a/application/tests/org.openjdk.jmc.jdp.test/META-INF/MANIFEST.MF
+++ b/core/tests/org.openjdk.jmc.jdp.test/META-INF/MANIFEST.MF
diff a/core/tests/org.openjdk.jmc.jdp.test/build.properties b/core/tests/org.openjdk.jmc.jdp.test/build.properties
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/build.properties
@@ -0,0 +1,37 @@
+#
+#  Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+#
+#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+#
+#  The contents of this file are subject to the terms of either the Universal Permissive License 
+#  v 1.0 as shown at http://oss.oracle.com/licenses/upl
+#   
+#  or the following license:
+#   
+#  Redistribution and use in source and binary forms, with or without modification, are permitted
+#  provided that the following conditions are met:
+#   
+#  1. Redistributions of source code must retain the above copyright notice, this list of conditions
+#  and the following disclaimer.
+#   
+#  2. Redistributions in binary form must reproduce the above copyright notice, this list of
+#  conditions and the following disclaimer in the documentation and/or other materials provided with
+#  the distribution.
+#   
+#  3. Neither the name of the copyright holder nor the names of its contributors may be used to
+#  endorse or promote products derived from this software without specific prior written permission.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+source.. = src/test/java/
+output.. = target/test-classes/
+bin.includes = META-INF/,\
+               .
+pde.match.rule.bundle=compatible
diff a/core/tests/org.openjdk.jmc.jdp.test/pom.xml b/core/tests/org.openjdk.jmc.jdp.test/pom.xml
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/pom.xml
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--   
+   Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+   
+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+   
+   The contents of this file are subject to the terms of either the Universal Permissive License 
+   v 1.0 as shown at http://oss.oracle.com/licenses/upl
+   
+   or the following license:
+   
+   Redistribution and use in source and binary forms, with or without modification, are permitted
+   provided that the following conditions are met:
+   
+   1. Redistributions of source code must retain the above copyright notice, this list of conditions
+   and the following disclaimer.
+   
+   2. Redistributions in binary form must reproduce the above copyright notice, this list of
+   conditions and the following disclaimer in the documentation and/or other materials provided with
+   the distribution.
+   
+   3. Neither the name of the copyright holder nor the names of its contributors may be used to
+   endorse or promote products derived from this software without specific prior written permission.
+   
+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<parent>
+		<groupId>org.openjdk.jmc</groupId>
+		<artifactId>missioncontrol.core.tests</artifactId>
+		<version>8.0.0-SNAPSHOT</version>
+	</parent>
+	<artifactId>jdp.test</artifactId>
+
+	<properties>
+		<spotless.config.path>${basedir}/../../../configuration/ide/eclipse/formatting/formatting.xml</spotless.config.path>
+	</properties>
+
+	<dependencies>
+		<dependency>
+			<groupId>org.openjdk.jmc</groupId>
+			<artifactId>jdp</artifactId>
+			<version>${project.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>junit</groupId>
+			<artifactId>junit</artifactId>
+			<scope>test</scope>
+		</dependency>
+	</dependencies>
+
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-surefire-plugin</artifactId>
+				<configuration>
+					<argLine>-Djava.net.preferIPv4Stack=true</argLine>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+</project>
diff a/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/AllTests.java b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/AllTests.java
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/AllTests.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp;
+
+import org.junit.runner.RunWith;
+import org.junit.runners.Suite;
+import org.junit.runners.Suite.SuiteClasses;
+
+import org.openjdk.jmc.jdp.client.JDPClientTest;
+import org.openjdk.jmc.jdp.client.JDPJMXTest;
+import org.openjdk.jmc.jdp.client.JDPPacketTest;
+import org.openjdk.jmc.jdp.client.JDPServerTest;
+
+/**
+ * The test suite for all the tests related to the JDP component.
+ */
+@RunWith(Suite.class)
+@SuiteClasses({JDPClientTest.class, JDPJMXTest.class, JDPPacketTest.class, JDPServerTest.class})
+public class AllTests {
+
+}
diff a/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/ClientTester.java b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/ClientTester.java
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/ClientTester.java
@@ -0,0 +1,108 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp;
+
+import java.io.IOException;
+import java.io.StringWriter;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import org.openjdk.jmc.jdp.client.DiscoveryEvent;
+import org.openjdk.jmc.jdp.client.DiscoveryListener;
+import org.openjdk.jmc.jdp.client.JDPClient;
+import org.openjdk.jmc.jdp.common.Configuration;
+
+/**
+ * Prints whatever JDP packets that are discovered on stdout.
+ */
+@SuppressWarnings("nls")
+public class ClientTester {
+	private static final String MULTICAST_PORT = "-port";
+	private static final String MULTICAST_ADDRESS = "-address";
+
+	static class Listener implements DiscoveryListener {
+		@Override
+		public void onDiscovery(DiscoveryEvent event) {
+			System.out.println(String.format("Event: %s session %s", event.getKind().toString(),
+					event.getDiscoverable().getSessionId()));
+			System.out.println(String.format("Data:%n%s", printMap(event.getDiscoverable().getPayload())));
+		}
+
+		private String printMap(Map<String, String> map) {
+			StringWriter sw = new StringWriter();
+			for (Entry<String, String> entry : map.entrySet()) {
+				sw.append(String.format("\t%-26s\t%-20s%n", entry.getKey(), entry.getValue()));
+			}
+			return sw.toString();
+		}
+	}
+
+	public static void main(String[] args) throws IOException {
+		Map<String, String> commands = parseArguments(args);
+		JDPClient client = createClient(commands);
+		client.addDiscoveryListener(new Listener());
+		client.start();
+		System.out.println("Press enter to quit");
+		System.in.read();
+		client.stop();
+	}
+
+	private static JDPClient createClient(Map<String, String> commands) throws UnknownHostException {
+		int port = Integer.parseInt(commands.get(MULTICAST_PORT));
+		InetAddress address = InetAddress.getByName(commands.get(MULTICAST_ADDRESS));
+		return new JDPClient(address, port, Configuration.DEFAULT_MAX_HEART_BEAT_TIMEOUT);
+	}
+
+	private static HashMap<String, String> parseArguments(String[] args) {
+		HashMap<String, String> commandMap = new HashMap<>();
+		commandMap.put(MULTICAST_ADDRESS, Configuration.DEFAULT_MULTICAST_ADDRESS);
+		commandMap.put(MULTICAST_PORT, Integer.toString(Configuration.DEFAULT_MULTICAST_PORT));
+
+		for (int i = 0; i < args.length; i++) {
+			if (args[i].startsWith("-")) {
+				StringBuilder buf = new StringBuilder();
+				int j = i + 1;
+				while (j < args.length && !args[j].startsWith("-")) {
+					buf.append(" ");
+					buf.append(args[j++]);
+				}
+				commandMap.put(args[i], buf.toString().trim());
+				i = j - 1;
+			}
+		}
+		return commandMap;
+	}
+}
diff a/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/ServerTester.java b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/ServerTester.java
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/ServerTester.java
@@ -0,0 +1,214 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.management.remote.JMXServiceURL;
+
+import org.openjdk.jmc.jdp.client.TestToolkit;
+import org.openjdk.jmc.jdp.common.Configuration;
+import org.openjdk.jmc.jdp.jmx.JMXDataKeys;
+import org.openjdk.jmc.jdp.server.jmx.JMXJDPServer;
+
+@SuppressWarnings("nls")
+public class ServerTester {
+	private static final String BROADCAST_PERIOD = "-period";
+	private static final String MULTICAST_PORT = "-port";
+	private static final String MULTICAST_ADDRESS = "-address";
+	private static final String TTL = "-ttl";
+	private static final String JMXPORT = "-jmxport";
+	private static final String JMXHOST = "-jmxhost";
+	private static final String PID = "-pid";
+	private static final String COMMAND = "-command";
+	// Will automatically start a number of servers derived from the settings.
+	private static final String AUTO = "-n";
+	// Will put the JVMs in separate groups.
+	private static final String GROUPS = "-groups";
+	// Will disable explicit naming
+	private static final String DISABLE_NAMING = "-nonaming";
+
+	public static void main(String[] args) throws UnknownHostException {
+		Map<String, String> commands = parseArguments(args);
+		Collection<JMXJDPServer> servers = createServers(commands);
+		try {
+			for (JMXJDPServer server : servers) {
+				server.start();
+				TestToolkit.printServerSettings(server);
+			}
+			System.out.println("Press enter to quit");
+			System.in.read();
+			for (JMXJDPServer server : servers) {
+				System.out.println("Stopping server...");
+				server.stop();
+			}
+		} catch (IOException e) {
+			e.printStackTrace();
+			System.exit(2);
+		}
+	}
+
+	public static Configuration createConfiguration(
+		final short ttl, final int period, final int port, final InetAddress address) {
+		return new Configuration() {
+
+			@Override
+			public short getTTL() {
+				return ttl;
+			}
+
+			@Override
+			public int getMulticastPort() {
+				return port;
+			}
+
+			@Override
+			public InetAddress getMulticastAddress() {
+				return address;
+			}
+
+			@Override
+			public int getBroadcastPeriod() {
+				return period;
+			}
+
+			@Override
+			public int getMaxHeartBeatTimeout() {
+				return Configuration.DEFAULT_MAX_HEART_BEAT_TIMEOUT;
+			}
+		};
+	}
+
+	private static Collection<JMXJDPServer> createServers(Map<String, String> commands) throws UnknownHostException {
+		List<JMXJDPServer> servers = new ArrayList<>();
+		int auto = Integer.parseInt(commands.get(AUTO));
+		int groups = Integer.parseInt(commands.get(GROUPS));
+		boolean disableNaming = Boolean.parseBoolean(commands.get(DISABLE_NAMING));
+		for (int n = 0; n < auto; n++) {
+			String name = disableNaming ? null : createName(n, groups);
+			servers.add(new JMXJDPServer(createConfiguration(n, commands), createData(n, commands, name)));
+		}
+		return servers;
+	}
+
+	private static String createName(int n, int groups) {
+		if (groups == 0) {
+			return String.format("JVM %d", n);
+		}
+		int group = n / groups;
+		int jvmNo = n % groups;
+		return String.format("Cluster %d/JVM %d", group, jvmNo);
+	}
+
+	private static JMXServiceURL createAgentUrl(int n, Map<String, String> commands) {
+		String host = commands.get(JMXHOST);
+		int port = Integer.parseInt(commands.get(JMXPORT));
+		if (n > 0) {
+			host += n;
+			port += n;
+		}
+		try {
+			return TestToolkit.createServiceURL(host, port);
+		} catch (Exception e) {
+			System.out.println("Could not create service URL!");
+			e.printStackTrace();
+			System.exit(1);
+		}
+		return null;
+	}
+
+	private static Configuration createConfiguration(int n, Map<String, String> commands) throws UnknownHostException {
+		short ttl = (short) Integer.parseInt(commands.get(TTL));
+		int period = Integer.parseInt(commands.get(BROADCAST_PERIOD));
+		int port = Integer.parseInt(commands.get(MULTICAST_PORT));
+		InetAddress address = InetAddress.getByName(commands.get(MULTICAST_ADDRESS));
+
+		return createConfiguration(ttl, period, port, address);
+	}
+
+	private static HashMap<String, String> parseArguments(String[] args) {
+		HashMap<String, String> commandMap = new HashMap<>();
+		commandMap.put(MULTICAST_ADDRESS, Configuration.DEFAULT_MULTICAST_ADDRESS);
+		commandMap.put(MULTICAST_PORT, Integer.toString(Configuration.DEFAULT_MULTICAST_PORT));
+		commandMap.put(JMXHOST, "localhost");
+		commandMap.put(JMXPORT, "7095");
+		commandMap.put(TTL, Integer.toString(Configuration.DEFAULT_TTL));
+		commandMap.put(BROADCAST_PERIOD, Integer.toString(Configuration.DEFAULT_BROADCAST_PERIOD));
+		commandMap.put(AUTO, Integer.toString(1));
+		commandMap.put(GROUPS, Integer.toString(0));
+		commandMap.put(PID, JMXJDPServer.getPID());
+
+		for (int i = 0; i < args.length; i++) {
+			if (args[i].startsWith("-")) {
+				StringBuilder buf = new StringBuilder();
+				int j = i + 1;
+				while (j < args.length && !args[j].startsWith("-")) {
+					buf.append(" ");
+					buf.append(args[j++]);
+				}
+				commandMap.put(args[i], buf.toString().trim());
+				i = j - 1;
+			}
+		}
+		return commandMap;
+	}
+
+	private static Map<String, String> createData(int n, Map<String, String> commands, String name) {
+		Map<String, String> discoveryData = new HashMap<>();
+		discoveryData.put(JMXDataKeys.KEY_INSTANCE_NAME, name);
+		discoveryData.put(JMXDataKeys.KEY_JMX_SERVICE_URL, createAgentUrl(n, commands).toString());
+		discoveryData.put(JMXDataKeys.KEY_JAVA_COMMAND, createCommand(n, commands));
+		discoveryData.put(JMXDataKeys.KEY_PID, createPID(n, commands));
+		return discoveryData;
+	}
+
+	private static String createPID(int n, Map<String, String> commands) {
+		int base = Integer.parseInt(commands.get(PID));
+		return Integer.toString(base + n);
+	}
+
+	private static String createCommand(int n, Map<String, String> commands) {
+		String command = commands.get(COMMAND);
+		if (command == null) {
+			return JMXJDPServer.getJavaCommand();
+		}
+		return command;
+	}
+}
diff a/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPClientTest.java b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPClientTest.java
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPClientTest.java
@@ -0,0 +1,138 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.client;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
+import java.util.Properties;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Logger;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import org.openjdk.jmc.jdp.common.Configuration;
+import org.openjdk.jmc.jdp.server.JDPServer;
+
+@SuppressWarnings("nls")
+public class JDPClientTest {
+	public final static Logger LOGGER = Logger.getLogger("org.openjdk.jmc.jdp.test");
+	private final Configuration config = TestToolkit.createConfiguration();
+	private volatile BlockingQueue<DiscoveryEvent> eventQueue;
+	private String discoverableID;
+
+	@Before
+	public void setUp() throws Exception {
+		discoverableID = TestToolkit.generateNewID("JDPClientTest");
+		System.out.println("JDP test with discoverable id " + discoverableID);
+	}
+
+	@Test
+	public void testJDPClient() throws Exception {
+		JDPClient client = createDefaultClient();
+		JDPServer server = createDefaultServer();
+		client.start();
+		server.start();
+
+		DiscoveryEvent event = eventQueue.poll(config.getBroadcastPeriod() * 2, TimeUnit.MILLISECONDS);
+		assertNotNull(event);
+		assertEquals(DiscoveryEvent.Kind.FOUND, event.getKind());
+
+		server.stop();
+		long sleepTime = (long) Math.max(Pruner.PRUNING_INTERVAL,
+				config.getBroadcastPeriod() * Pruner.HB_MISSED_BEFORE_DOWN);
+		event = eventQueue.poll(sleepTime * 8, TimeUnit.MILLISECONDS);
+
+		assertNotNull(event);
+		assertEquals(DiscoveryEvent.Kind.LOST, event.getKind());
+		client.stop();
+	}
+
+	@Test
+	public void testChangePacket() throws Exception {
+		JDPClient client = createDefaultClient();
+		JDPServer server = createDefaultServer();
+		client.start();
+		server.start();
+
+		DiscoveryEvent event = eventQueue.poll(config.getBroadcastPeriod() * 2, TimeUnit.MILLISECONDS);
+		assertNotNull(event);
+		assertEquals(event.getKind(), DiscoveryEvent.Kind.FOUND);
+		assertEquals(event.getDiscoverable().getPayload().get("apa"), "gorilla");
+
+		event = null;
+		Properties props = createDefaultData();
+		props.setProperty("apa", "mongo");
+		server.setDiscoveryData(props);
+
+		event = eventQueue.poll(config.getBroadcastPeriod() * 2, TimeUnit.MILLISECONDS);
+		assertNotNull(event);
+		assertEquals(event.getKind(), DiscoveryEvent.Kind.CHANGED);
+		assertEquals(event.getDiscoverable().getPayload().get("apa"), "mongo");
+		client.stop();
+		server.stop();
+	}
+
+	public JDPClient createDefaultClient() {
+		eventQueue = new LinkedBlockingQueue<>();
+		JDPClient client = new JDPClient(config.getMulticastAddress(), config.getMulticastPort());
+		client.addDiscoveryListener(new DiscoveryListener() {
+
+			@Override
+			public void onDiscovery(DiscoveryEvent event) {
+				if (discoverableID.equals(event.getDiscoverable().getPayload().get(JDPServer.KEY_DISCOVERABLE_ID))) {
+					eventQueue.add(event);
+				}
+			}
+		});
+		return client;
+	}
+
+	public JDPServer createDefaultServer() {
+		JDPServer server = new JDPServer(discoverableID, config);
+		TestToolkit.printServerSettings(server);
+
+		server.setDiscoveryData(createDefaultData());
+		return server;
+	}
+
+	private Properties createDefaultData() {
+		Properties props = new Properties();
+		props.setProperty("test", "JDPClientTest");
+		props.setProperty("apa", "gorilla");
+		return props;
+	}
+}
diff a/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPJMXTest.java b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPJMXTest.java
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPJMXTest.java
@@ -0,0 +1,97 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.client;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.openjdk.jmc.jdp.common.Configuration;
+import org.openjdk.jmc.jdp.server.JDPServer;
+
+@SuppressWarnings("nls")
+public class JDPJMXTest {
+	private volatile BlockingQueue<DiscoveryEvent> eventQueue;
+	private final Configuration config = TestToolkit.createConfiguration();
+	private String discoverableID;
+
+	@Before
+	public void setUp() throws Exception {
+		discoverableID = TestToolkit.generateNewID("payload.id");
+		System.out.println("JDP test with discoverable id " + discoverableID);
+	}
+
+	@Test
+	public void testJDPClient() throws Exception {
+		JDPClient client = createDefaultClient();
+		JDPServer server = TestToolkit.createDefaultJMXJDPServer(discoverableID);
+		TestToolkit.printServerSettings(server);
+		client.start();
+		server.start();
+
+		DiscoveryEvent event = eventQueue.poll(config.getBroadcastPeriod() * 2, TimeUnit.MILLISECONDS);
+
+		assertNotNull(event);
+		assertEquals(DiscoveryEvent.Kind.FOUND, event.getKind());
+
+		server.stop();
+		event = null;
+		long sleepTime = (long) Math.max(Pruner.PRUNING_INTERVAL,
+				config.getBroadcastPeriod() * Pruner.HB_MISSED_BEFORE_DOWN) * 2;
+		event = eventQueue.poll(sleepTime * 8, TimeUnit.MILLISECONDS);
+
+		assertNotNull(event);
+		assertEquals(DiscoveryEvent.Kind.LOST, event.getKind());
+		client.stop();
+	}
+
+	public JDPClient createDefaultClient() {
+		eventQueue = new LinkedBlockingQueue<>();
+		JDPClient client = new JDPClient(config.getMulticastAddress(), config.getMulticastPort());
+		client.addDiscoveryListener(new DiscoveryListener() {
+			@Override
+			public void onDiscovery(DiscoveryEvent event) {
+				if (discoverableID.equals(event.getDiscoverable().getPayload().get(JDPServer.KEY_DISCOVERABLE_ID))) {
+					eventQueue.add(event);
+				}
+			}
+		});
+		return client;
+	}
+
+}
diff a/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPPacketTest.java b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPPacketTest.java
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPPacketTest.java
@@ -0,0 +1,87 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.client;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Test;
+
+import org.openjdk.jmc.jdp.common.JDPPacket;
+
+@SuppressWarnings("nls")
+public class JDPPacketTest {
+	private final static String KEY_NAME = "Name";
+	private final static String KEY_SKILLS = "Skills";
+	private final static String VALUE_NAME = "Duke";
+	private final static String VALUE_SKILLS = "Barrista, Programmer";
+
+	@Test
+	public void testCreatePacket() throws Exception {
+		new JDPPacket(createDefaultProperties());
+	}
+
+	@Test
+	public void testEncodeDecode() throws Exception {
+		JDPPacket packet = new JDPPacket(createDefaultProperties());
+		byte[] bytes = packet.getDiscoveryDataAsByteArray();
+		JDPPacket packet2 = new JDPPacket(bytes);
+		Map<String, String> props = packet2.getPayload();
+		assertEquals(props.get(KEY_NAME), VALUE_NAME);
+		assertEquals(props.get(KEY_SKILLS), VALUE_SKILLS);
+	}
+
+	static Map<String, String> createDefaultProperties() {
+		Map<String, String> props = new HashMap<>();
+		props.put(KEY_NAME, VALUE_NAME);
+		props.put(KEY_SKILLS, VALUE_SKILLS);
+		return props;
+	}
+
+	@Test
+	public void testEncodeDecodeEmpty() throws Exception {
+		JDPPacket packet = new JDPPacket(new HashMap<String, String>());
+		byte[] bytes = packet.getDiscoveryDataAsByteArray();
+		JDPPacket packet2 = new JDPPacket(bytes);
+		assertTrue(packet2.getPayload().size() == 0);
+	}
+
+	@Test
+	public void testTestToolkit() {
+		assertEquals("JMX_SERVICE_URL", TestToolkit
+				.parseCommaSeparatedByteString("74, 77, 88, 95, 83, 69, 82, 86, 73, 67, 69, 95, 85, 82, 76"));
+	}
+}
diff a/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPServerTest.java b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPServerTest.java
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/JDPServerTest.java
@@ -0,0 +1,127 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.client;
+
+import static org.junit.Assert.assertTrue;
+
+import java.net.InetAddress;
+
+import org.junit.Assume;
+import org.junit.Test;
+
+import org.openjdk.jmc.jdp.common.Configuration;
+import org.openjdk.jmc.jdp.server.JDPServer;
+
+@SuppressWarnings("nls")
+public class JDPServerTest {
+	@Test
+	public void testStartStopServer() throws Exception {
+		skip("This test should not be run unless we start using the JDP server for the JMC client.");
+
+		JDPServer server = new JDPServer(getNewId(), createCustomConfiguration());
+		TestToolkit.printServerSettings(server);
+
+		server.setDiscoveryData(JDPPacketTest.createDefaultProperties());
+		server.start();
+		assertTrue(server.isAlive());
+		Thread.sleep(10000);
+		server.stop();
+		assertTrue(!server.isAlive());
+	}
+
+	@Test
+	public void testRepeatedStartStopServer() throws Exception {
+		skip("This test should not be run unless we start using the JDP server for the JMC client.");
+
+		JDPServer server = new JDPServer(getNewId(), TestToolkit.createConfiguration());
+		TestToolkit.printServerSettings(server);
+
+		server.setDiscoveryData(JDPPacketTest.createDefaultProperties());
+		for (int i = 0; i < 200; i++) {
+			server.start();
+			assertTrue("Server should be alive!", server.isAlive());
+			server.stop();
+			assertTrue("Server should be dead!", !server.isAlive());
+			Thread.yield();
+		}
+	}
+
+	@Test
+	public void testStartEmptyPacket() throws Exception {
+		JDPServer server = new JDPServer(getNewId(), TestToolkit.createConfiguration());
+		server.start();
+		assertTrue(server.isAlive());
+		Thread.sleep(4000);
+		server.stop();
+	}
+
+	private static String getNewId() {
+		return TestToolkit.generateNewID("JDPServerTest");
+	}
+
+	private static Configuration createCustomConfiguration() {
+		return new Configuration() {
+			@Override
+			public short getTTL() {
+				return Configuration.DEFAULT_TTL;
+			}
+
+			@Override
+			public int getMulticastPort() {
+				return TestToolkit.TEST_MULTICAST_PORT;
+			}
+
+			@Override
+			public InetAddress getMulticastAddress() {
+				return TestToolkit.TEST_MULTICAST_ADDRESS;
+			}
+
+			@Override
+			public int getBroadcastPeriod() {
+				return 1000;
+			}
+
+			@Override
+			public int getMaxHeartBeatTimeout() {
+				return Configuration.DEFAULT_MAX_HEART_BEAT_TIMEOUT;
+			}
+		};
+	}
+
+	/**
+	 * @see Assume
+	 */
+	private final void skip(String message) {
+		Assume.assumeTrue(message, false);
+	}
+}
diff a/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/TestToolkit.java b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/TestToolkit.java
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/client/TestToolkit.java
@@ -0,0 +1,151 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.client;
+
+import java.io.UnsupportedEncodingException;
+import java.net.InetAddress;
+import java.net.MalformedURLException;
+import java.net.UnknownHostException;
+import java.security.SecureRandom;
+import java.util.logging.Level;
+
+import javax.management.remote.JMXServiceURL;
+
+import org.openjdk.jmc.jdp.common.Configuration;
+import org.openjdk.jmc.jdp.server.JDPServer;
+import org.openjdk.jmc.jdp.server.jmx.JMXJDPServer;
+
+@SuppressWarnings("nls")
+public final class TestToolkit {
+	private static final String HEXES = "0123456789ABCDEF";
+	private final static SecureRandom RND = new SecureRandom();
+	public static final int TEST_MULTICAST_PORT = 7711;
+	private static final String TEST_MULTICAST_ADDRESS_STRING = "224.0.23.177";
+	public static final InetAddress TEST_MULTICAST_ADDRESS;
+
+	static {
+		InetAddress tmp = null;
+		try {
+			tmp = InetAddress.getByName(TEST_MULTICAST_ADDRESS_STRING);
+		} catch (UnknownHostException e) {
+			// Multicast address by IP, should never happen!
+			JDPClientTest.LOGGER.log(Level.SEVERE, "Could not create test multicast address!", e);
+		}
+		TEST_MULTICAST_ADDRESS = tmp;
+	}
+
+	private TestToolkit() {
+		throw new AssertionError("Nope!");
+	}
+
+	public static String toHexString(byte[] raw) {
+		if (raw == null) {
+			return null;
+		}
+		final StringBuilder hex = new StringBuilder(2 * raw.length);
+		for (final byte b : raw) {
+			hex.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));
+		}
+		return hex.toString();
+	}
+
+	public static long nextLong() {
+		return RND.nextLong();
+	}
+
+	public static String generateNewID(String prefix) {
+		return String.format("%s %X", prefix, RND.nextLong());
+	}
+
+	public static void printServerSettings(JDPServer server) {
+		System.out.println(
+				String.format("JDP Server created at %s:%d", server.getConfiguration().getMulticastAddress().toString(),
+						server.getConfiguration().getMulticastPort()));
+	}
+
+	public static JDPServer createDefaultJMXJDPServer(String discoverableID) throws MalformedURLException {
+		return new JMXJDPServer(discoverableID, createConfiguration(), createServiceURL("localhost", 7091), null);
+	}
+
+	public static JMXServiceURL createServiceURL(String host, int port) throws MalformedURLException {
+		return new JMXServiceURL(String.format("service:jmx:rmi:///jndi/rmi://%s:%d/jmxrmi", host, port));
+	}
+
+	public static String parseCommaSeparatedByteString(String str) {
+		String[] tmp = str.split(", ");
+		byte[] bytes = toBytes(tmp);
+		try {
+			return new String(bytes, "UTF-8");
+		} catch (UnsupportedEncodingException e) {
+			return null;
+		}
+	}
+
+	public static Configuration createConfiguration() {
+		return new Configuration() {
+
+			@Override
+			public short getTTL() {
+				return 1;
+			}
+
+			@Override
+			public int getMulticastPort() {
+				return TEST_MULTICAST_PORT;
+			}
+
+			@Override
+			public InetAddress getMulticastAddress() {
+				return TEST_MULTICAST_ADDRESS;
+			}
+
+			@Override
+			public int getBroadcastPeriod() {
+				return 1000;
+			}
+
+			@Override
+			public int getMaxHeartBeatTimeout() {
+				return Configuration.DEFAULT_MAX_HEART_BEAT_TIMEOUT;
+			}
+		};
+	}
+
+	private static byte[] toBytes(String[] tmp) {
+		byte[] bytes = new byte[tmp.length];
+		for (int i = 0; i < tmp.length; i++) {
+			bytes[i] = Byte.parseByte(tmp[i]);
+		}
+		return bytes;
+	}
+}
diff a/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/Broadcaster.java b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/Broadcaster.java
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/Broadcaster.java
@@ -0,0 +1,111 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.server;
+
+import java.io.IOException;
+import java.net.DatagramPacket;
+import java.net.InetAddress;
+import java.net.MulticastSocket;
+import java.util.logging.Level;
+
+import org.openjdk.jmc.jdp.common.Configuration;
+import org.openjdk.jmc.jdp.common.JDPPacket;
+
+/**
+ * Class that will simply broadcast the provided data over the supplied socket until shut down.
+ */
+@SuppressWarnings("nls")
+final class Broadcaster implements Runnable {
+	private final byte[] data;
+	private final MulticastSocket socket;
+	private final InetAddress addr;
+	private final int port;
+	private final int period;
+	private final JDPPacket packet;
+	private volatile boolean isRunning = true;
+
+	public Broadcaster(Configuration configuration, JDPPacket packet) throws IOException {
+		this(createSocket(configuration), configuration.getMulticastAddress(), configuration.getMulticastPort(), packet,
+				configuration.getBroadcastPeriod());
+	}
+
+	public Broadcaster(MulticastSocket socket, InetAddress addr, int port, JDPPacket packet, int period) {
+		this.socket = socket;
+		this.addr = addr;
+		this.port = port;
+		this.packet = packet;
+		data = packet.getDiscoveryDataAsByteArray();
+		this.period = period;
+	}
+
+	@Override
+	public void run() {
+		final DatagramPacket dp = new DatagramPacket(data, data.length, addr, port);
+		while (isRunning) {
+			long now = System.currentTimeMillis();
+
+			try {
+				socket.send(dp);
+				JDPServer.LOGGER.fine("Sent JDP packet with contents:" + packet.getPayload());
+			} catch (IOException ioe) {
+				if (isRunning) {
+					JDPServer.LOGGER.log(Level.SEVERE, "Could not send JDP packet!", ioe);
+					shutDown();
+				} else {
+					JDPServer.LOGGER.log(Level.INFO,
+							"Could not send JDP packet, most likely ok since Broadcaster had been shutdown and the socket closed.!",
+							ioe);
+				}
+			}
+			try {
+				Thread.sleep(Math.max(0, period - (System.currentTimeMillis() - now)));
+			} catch (InterruptedException e) {
+				// Ignore
+			}
+		}
+	}
+
+	public void shutDown() {
+		JDPServer.LOGGER.fine("Shutting down JDP broadcaster!");
+		isRunning = false;
+		socket.close();
+	}
+
+	private static MulticastSocket createSocket(Configuration configuration) throws IOException {
+		MulticastSocket socket = new MulticastSocket(configuration.getMulticastPort());
+		socket.setTimeToLive(configuration.getTTL());
+		socket.joinGroup(configuration.getMulticastAddress());
+		return socket;
+	}
+
+}
diff a/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/JDPServer.java b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/JDPServer.java
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/JDPServer.java
@@ -0,0 +1,210 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.server;
+
+import java.io.IOException;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Properties;
+import java.util.logging.Logger;
+
+import org.openjdk.jmc.jdp.client.JDPClientTest;
+import org.openjdk.jmc.jdp.common.Configuration;
+import org.openjdk.jmc.jdp.common.ConfigurationFactory;
+import org.openjdk.jmc.jdp.common.JDPPacket;
+
+/**
+ * <p>
+ * The JDP server provides a light weight means to multicast a heart beat on the network, making it
+ * possible for client applications to detect the presence a service. The life cycle of the JDP
+ * server is normally handled by the JVM, and is kept in sync with the external JMX management
+ * agent. It is possible to use the JDP server as a stand-alone utility to broadcast information
+ * about other agents than the JVM managed server, however the life cycle will need be managed
+ * manually. Use one JDPServer per service to broadcast information about.
+ * </p>
+ * <p>
+ * The information broadcasted by the JDP server can be configured using the #setDiscoveryData()
+ * method.
+ * </p>
+ */
+@SuppressWarnings("nls")
+public class JDPServer {
+	public final static String KEY_PERIOD = "BROADCAST_INTERVAL";
+	public final static String KEY_DISCOVERABLE_ID = "DISCOVERABLE_SESSION_UUID";
+	final static Logger LOGGER = JDPClientTest.LOGGER;
+	private final Configuration configuration;
+	private final String discoverableID;
+	private volatile boolean isStarted;
+	private Broadcaster broadcaster;
+	private Map<String, String> discoveryData;
+
+	/**
+	 * Creates a JDP server with the default settings.
+	 *
+	 * @param discoverableID
+	 *            a String uniquely identifying the service instance. Must not be null!
+	 */
+	public JDPServer(String discoverableID) {
+		this(discoverableID, ConfigurationFactory.createConfiguration());
+	}
+
+	/**
+	 * Creates a JDP server. Note that this JDP server will be using a random server ID.
+	 *
+	 * @param discoverableID
+	 *            a String uniquely identifying the service instance. Must not be null!
+	 * @param configuration
+	 *            the network configuration to use.
+	 */
+	public JDPServer(String discoverableID, Configuration configuration) {
+		if (discoverableID == null) {
+			throw new NullPointerException("A unique identifier for the discoverable must be provided!");
+		}
+		this.discoverableID = discoverableID;
+		this.configuration = configuration;
+	}
+
+	/**
+	 * This method starts the JDP server.
+	 *
+	 * @throws IOException
+	 */
+	public synchronized void start() throws IOException {
+		if (isAlive()) {
+			return;
+		}
+		JDPPacket packet = createPacket();
+		broadcaster = new Broadcaster(configuration, packet);
+		new Thread(broadcaster, "(JDP autodiscovery)").start();
+		isStarted = true;
+		LOGGER.info("JDP Server started at " + configuration.getMulticastAddress() + ":"
+				+ configuration.getMulticastPort());
+	}
+
+	/**
+	 * Calling this method will cause the JDP server to stop transmitting.
+	 */
+	public synchronized void stop() {
+		isStarted = false;
+		broadcaster.shutDown();
+		broadcaster = null;
+	}
+
+	/**
+	 * @return true if the JDP server is up and running, false otherwise.
+	 */
+	public synchronized boolean isAlive() {
+		return isStarted;
+	}
+
+	/**
+	 * Sets the properties to broadcast. This is a convenience method for those still using the old
+	 * java.util.Properties class.
+	 *
+	 * @param props
+	 *            the properties to broadcast.
+	 */
+	public synchronized void setDiscoveryData(Properties props) {
+		discoveryData = convert(props);
+		restartIfAlive();
+	}
+
+	/**
+	 * Sets the properties to broadcast.
+	 *
+	 * @param props
+	 *            the properties to broadcast.
+	 */
+	public synchronized void setDiscoveryData(Map<String, String> props) {
+		discoveryData = props;
+	}
+
+	/**
+	 * @return the properties to broadcast.
+	 */
+	public synchronized Map<String, String> getDiscoveryData() {
+		if (discoveryData == null) {
+			return Collections.emptyMap();
+		}
+		return discoveryData;
+	}
+
+	/**
+	 * Stops and then starts the server again.
+	 *
+	 * @throws IOException
+	 */
+	public void restart() throws IOException {
+		stop();
+		start();
+	}
+
+	private JDPPacket createPacket() {
+		Map<String, String> data = new HashMap<>(getDiscoveryData());
+		data.put(KEY_PERIOD, String.valueOf(configuration.getBroadcastPeriod()));
+		data.put(KEY_DISCOVERABLE_ID, discoverableID);
+		return new JDPPacket(data);
+	}
+
+	private void restartIfAlive() {
+		if (isAlive()) {
+			try {
+				restart();
+			} catch (IOException e) {
+				// It was already alive, so unlikely to happen.
+				// If it does, shutdown to cleanup.
+				stop();
+			}
+		}
+	}
+
+	/**
+	 * Helper method to convert from properties to map.
+	 */
+	private static Map<String, String> convert(Properties props) {
+		Map<String, String> result = new HashMap<>();
+		for (Entry<Object, Object> entry : props.entrySet()) {
+			result.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));
+		}
+		return result;
+	}
+
+	/**
+	 * @return the configuration settings for the server.
+	 */
+	public Configuration getConfiguration() {
+		return configuration;
+	}
+}
diff a/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/JMXJDPServer.java b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/JMXJDPServer.java
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/JMXJDPServer.java
@@ -0,0 +1,105 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.server.jmx;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+
+import javax.management.remote.JMXServiceURL;
+
+import org.openjdk.jmc.jdp.common.Configuration;
+import org.openjdk.jmc.jdp.jmx.JMXDataKeys;
+import org.openjdk.jmc.jdp.server.JDPServer;
+
+/**
+ * Specialization of the general JDP Server to broadcast the JMX service URL and information needed
+ * to support Mission Control.
+ */
+@SuppressWarnings("nls")
+public class JMXJDPServer extends JDPServer {
+	private final static String JAVA_COMMAND = retrieveJavaCommand();
+
+	public JMXJDPServer(String discoverableID, Configuration configuration, Map<String, String> discoveryData) {
+		super(discoverableID, configuration);
+		setDiscoveryData(discoveryData);
+	}
+
+	public JMXJDPServer(Configuration configuration, Map<String, String> discoveryData) {
+		this(generateUniqueID(), configuration, discoveryData);
+	}
+
+	public JMXJDPServer(String discoverableID, Configuration configuration, JMXServiceURL agentURL, String name) {
+		super(discoverableID, configuration);
+		setDiscoveryData(createData(agentURL, name));
+	}
+
+	public JMXJDPServer(Configuration configuration, JMXServiceURL agentURL, String name) {
+		this(generateUniqueID(), configuration, agentURL, name);
+	}
+
+	private static String generateUniqueID() {
+		return UUID.randomUUID().toString();
+	}
+
+	private Map<String, String> createData(JMXServiceURL agentURL, String name) {
+		Map<String, String> discoveryData = new HashMap<>();
+		discoveryData.put(JMXDataKeys.KEY_PID, getPID());
+		discoveryData.put(JMXDataKeys.KEY_JAVA_COMMAND, JAVA_COMMAND);
+		discoveryData.put(JMXDataKeys.KEY_JMX_SERVICE_URL, agentURL.toString());
+		if (name != null) {
+			discoveryData.put(JMXDataKeys.KEY_INSTANCE_NAME, name);
+		}
+		return discoveryData;
+	}
+
+	private static String retrieveJavaCommand() {
+		// This one is usually missing when running with a custom launcher...
+		String javaCommand = System.getProperty("sun.java.command");
+
+		// ... so let's use the class path as backup. This is testing, and we just need something indicative of what the heck is running...
+		if (javaCommand == null) {
+			javaCommand = System.getProperty("java.class.path");
+		}
+
+		return javaCommand;
+	}
+
+	public static String getJavaCommand() {
+		return JAVA_COMMAND;
+	}
+
+	public static String getPID() {
+		return PIDHelper.getPID();
+	}
+}
diff a/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/PIDHelper.java b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/PIDHelper.java
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/PIDHelper.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.jdp.server.jmx;
+
+import java.lang.management.ManagementFactory;
+
+/**
+ * Helper class to determine the PID in a way that works for both JRockit and Hotspot. According to
+ * Mandy, there will be a better way to retrieve this in JDK8. This class can in other words be
+ * deleted in JDK8.
+ */
+@SuppressWarnings("nls")
+class PIDHelper {
+	private static String PID = parsePID(ManagementFactory.getRuntimeMXBean().getName());
+
+	private static String parsePID(String s) {
+		if (s != null) {
+			return s.split("@")[0];
+		}
+		return null;
+	}
+
+	public static String getPID() {
+		return PID;
+	}
+}
diff a/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/package-info.java b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/package-info.java
--- /dev/null
+++ b/core/tests/org.openjdk.jmc.jdp.test/src/test/java/org/openjdk/jmc/jdp/server/jmx/package-info.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/**
+ * This package contains the classes for the specialized convenience JDP server for transmitting
+ * information about JMX services. The JDP is a light-weight protocol providing a heart beat for
+ * services wishing to broadcast their presence.
+ */
+package org.openjdk.jmc.jdp.server.jmx;
diff a/core/tests/pom.xml b/core/tests/pom.xml
--- a/core/tests/pom.xml
+++ b/core/tests/pom.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!--   
-   Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+   Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
    
    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
    
    The contents of this file are subject to the terms of either the Universal Permissive License 
    v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -44,10 +44,11 @@
 	<modules>
 		<module>org.openjdk.jmc.common.test</module>
 		<module>org.openjdk.jmc.flightrecorder.test</module>
 		<module>org.openjdk.jmc.flightrecorder.rules.test</module>
 		<module>org.openjdk.jmc.flightrecorder.rules.jdk.test</module>
+		<module>org.openjdk.jmc.jdp.test</module>
 	</modules>
 	<properties>
 		<test.includes.default>**/Test*.java,**/*Test.java,**/*TestCase.java</test.includes.default>
 		<test.excludes.default>**/*$*</test.excludes.default>
 		<fail.if.no.tests>true</fail.if.no.tests>
