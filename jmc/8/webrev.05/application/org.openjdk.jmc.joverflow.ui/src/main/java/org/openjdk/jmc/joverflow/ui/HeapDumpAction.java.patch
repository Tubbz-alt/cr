diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/HeapDumpAction.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/HeapDumpAction.java
--- a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/HeapDumpAction.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/HeapDumpAction.java
@@ -90,12 +90,12 @@
 				Throwable root = e;
 				while (root.getCause() != null) {
 					root = root.getCause();
 				}
 				final String message = root.getMessage() != null ? root.getMessage() : root.toString();
-				DisplayToolkit.safeAsyncExec(() -> DialogToolkit
-						.showError(Display.getCurrent().getActiveShell(), "Failed to create Heap Dump", message));
+				DisplayToolkit.safeAsyncExec(() -> DialogToolkit.showError(Display.getCurrent().getActiveShell(),
+						"Failed to create Heap Dump", message));
 			} finally {
 				IOToolkit.closeSilently(connector);
 			}
 		};
 	}
@@ -130,11 +130,12 @@
 			};
 			DisplayToolkit.safeSyncExec(() -> {
 				InputDialog dialog = new InputDialog(Display.getCurrent().getActiveShell(), "Enter a destination file",
 						"Enter a path to the destination file in the remote filesystem. "
 								+ "You will have to make the file available in the local filesystem manually, "
-								+ "for example by moving it or using a shared filesystem.", "", null);
+								+ "for example by moving it or using a shared filesystem.",
+						"", null);
 				if (dialog.open() == Window.OK) {
 					String s = dialog.getValue();
 					opener.file = new File(s.endsWith(HPROF_FILE_EXTENSION) ? s : s + "." + HPROF_FILE_EXTENSION);
 				}
 			});
