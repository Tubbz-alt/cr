diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/AttributeComponentConfiguration.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/AttributeComponentConfiguration.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/AttributeComponentConfiguration.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/AttributeComponentConfiguration.java
@@ -77,19 +77,18 @@
 		populateAttributeMaps(isSuitableForLineCharts(items, allTypes));
 	}
 
 	private void forEachType(IItemCollection items) {
 		if (items != null) {
-			ItemCollectionToolkit.stream(items).map(IItemIterable::getType)
-					.forEach(type -> {
-						allTypes.put(type.getIdentifier(), type);
-						for (IAttribute<?> a : type.getAttributes()) {
-							if (!a.equals(JfrAttributes.EVENT_STACKTRACE)) {
-								allAttributes.put(ItemList.getColumnId(a), a);
-							}
-						}
-					});
+			ItemCollectionToolkit.stream(items).map(IItemIterable::getType).forEach(type -> {
+				allTypes.put(type.getIdentifier(), type);
+				for (IAttribute<?> a : type.getAttributes()) {
+					if (!a.equals(JfrAttributes.EVENT_STACKTRACE)) {
+						allAttributes.put(ItemList.getColumnId(a), a);
+					}
+				}
+			});
 		}
 	}
 
 	private void populateAttributeMaps(boolean allowLineCharts) {
 		for (Entry<String, IAttribute<?>> a : allAttributes.entrySet()) {
