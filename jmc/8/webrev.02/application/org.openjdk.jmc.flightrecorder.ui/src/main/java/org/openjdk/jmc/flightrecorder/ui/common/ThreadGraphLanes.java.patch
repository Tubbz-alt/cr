diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ThreadGraphLanes.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ThreadGraphLanes.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ThreadGraphLanes.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ThreadGraphLanes.java
@@ -148,12 +148,15 @@
 		laneFilters.stream().filter(ld -> ld.isEnabled()).forEach(lane -> {
 			IItemCollection laneItems = items.apply(lane.getFilter());
 			if (laneItems.iterator().hasNext()) {
 				ISpanSeries<IItem> laneSeries = QuantitySeries.max(laneItems, JfrAttributes.START_TIME,
 						JfrAttributes.END_TIME);
-				this.setTooltipTitle(MessageFormat.format(Messages.ThreadsPage_LANE_TOOLTIP_TITLE, threadName, lane.getName()));
-				lanes.add(new ItemRow(SpanRenderer.withBoundaries(laneSeries, DataPageToolkit.ITEM_COLOR, this.getTooltipTitle()), laneItems));
+				this.setTooltipTitle(
+						MessageFormat.format(Messages.ThreadsPage_LANE_TOOLTIP_TITLE, threadName, lane.getName()));
+				lanes.add(new ItemRow(
+						SpanRenderer.withBoundaries(laneSeries, DataPageToolkit.ITEM_COLOR, this.getTooltipTitle()),
+						laneItems));
 			}
 		});
 		IXDataRenderer renderer = !lanes.isEmpty() ? RendererToolkit.uniformRows(lanes)
 				: new ItemRow(RendererToolkit.empty(), ItemCollectionToolkit.EMPTY);
 		IItemCollection itemsAndThreadLifespan = addThreadLifeSpanEvents(thread, items);
@@ -233,23 +236,23 @@
 						|| dataSourceSupplier.get().getItems().apply(ld.getFilter()).iterator().hasNext()));
 		laneDefs = lanesByApplicability.get(true);
 		naLanes = lanesByApplicability.get(false);
 		return Collections.emptyList();
 	}
-	
+
 	//create two action identifiers to handle the chart context menu and the legend context menu
 	private List<String> chartActionIdentifiers = new ArrayList<>();
 	private List<String> legendActionIdentifiers = new ArrayList<>();
 
 	public void updateContextMenu(MCContextMenuManager mm, boolean isLegendMenu) {
-		
-		if(isLegendMenu) {
+
+		if (isLegendMenu) {
 			for (String id : legendActionIdentifiers) {
 				mm.remove(id);
 			}
 			legendActionIdentifiers.clear();
-		} else { 	
+		} else {
 			for (String id : chartActionIdentifiers) {
 				mm.remove(id);
 			}
 			chartActionIdentifiers.clear();
 		}
@@ -274,22 +277,22 @@
 					buildChart.run();
 				}
 			};
 			String identifier = ld.getName() + checkAction.hashCode();
 			checkAction.setId(identifier);
-			if(isLegendMenu) {
+			if (isLegendMenu) {
 				legendActionIdentifiers.add(identifier);
 			} else {
 				chartActionIdentifiers.add(identifier);
 			}
 			checkAction.setChecked(ld.isEnabled());
 			// FIXME: Add a tooltip here
 			mm.add(checkAction);
 			actions.add(checkAction);
 		});
 	}
-	
+
 	public List<IAction> getContextMenuActions() {
 		return actions;
 	}
 
 }
