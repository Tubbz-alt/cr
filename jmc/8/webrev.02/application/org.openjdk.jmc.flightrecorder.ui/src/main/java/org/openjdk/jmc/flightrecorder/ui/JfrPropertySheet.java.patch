diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/JfrPropertySheet.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/JfrPropertySheet.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/JfrPropertySheet.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/JfrPropertySheet.java
@@ -123,10 +123,11 @@
 			.getMCImageDescriptor(ImageConstants.ICON_NEW_PAGE);
 	private static final String HELP_CONTEXT_ID = FlightRecorderUI.PLUGIN_ID + ".JfrPropertiesView"; //$NON-NLS-1$
 	private static final Object TOO_MANY_VALUES = new Object();
 	private static final PropertySheetRow CALCULATING = new PropertySheetRow(null, null);
 	private static Set<IType<?>> selectedTypes = Collections.emptySet();
+
 	private static class PropertySheetRowSelection extends FlavoredSelectionBase {
 
 		private final PropertySheetRow row;
 
 		PropertySheetRowSelection(PropertySheetRow row) {
@@ -320,12 +321,12 @@
 						return "[" + values[0].getName() + " ... " //$NON-NLS-1$ //$NON-NLS-2$
 								+ values[values.length - 1].getName() + "]"; //$NON-NLS-1$
 					} else if (value instanceof Object[]) {
 						return limitedDeepToString((Object[]) value, this::getValueString);
 					} else if (value instanceof Collection<?>) {
-						selectedTypes = new HashSet<IType<?>>((Collection<IType<?>>) value)
-							.stream().collect(Collectors.toSet());
+						selectedTypes = new HashSet<IType<?>>((Collection<IType<?>>) value).stream()
+								.collect(Collectors.toSet());
 						return limitedDeepToString(((Collection<?>) value).toArray(), this::getValueString);
 					}
 					return TypeHandling.getValueString(value);
 				}
 
@@ -342,14 +343,12 @@
 	@SuppressWarnings("unchecked")
 	private static void updateSelectedTypes(Object value) {
 		if (value instanceof IType<?>) {
 			selectedTypes = new HashSet<IType<?>>();
 			selectedTypes.add((IType<?>) value);
-		}
-		else if (value instanceof Collection<?>) {
-			selectedTypes = new HashSet<IType<?>>((Collection<IType<?>>) value)
-					.stream().collect(Collectors.toSet());
+		} else if (value instanceof Collection<?>) {
+			selectedTypes = new HashSet<IType<?>>((Collection<IType<?>>) value).stream().collect(Collectors.toSet());
 		}
 	}
 
 	private static String limitedDeepToString(Object[] array, Function<Object, String> valueToStringProvider) {
 		return limitedDeepToString(array, new StringBuilder(), true, valueToStringProvider);
