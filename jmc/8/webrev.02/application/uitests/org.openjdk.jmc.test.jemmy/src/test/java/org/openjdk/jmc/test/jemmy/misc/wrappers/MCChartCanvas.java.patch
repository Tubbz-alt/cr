diff a/application/uitests/org.openjdk.jmc.test.jemmy/src/test/java/org/openjdk/jmc/test/jemmy/misc/wrappers/MCChartCanvas.java b/application/uitests/org.openjdk.jmc.test.jemmy/src/test/java/org/openjdk/jmc/test/jemmy/misc/wrappers/MCChartCanvas.java
--- a/application/uitests/org.openjdk.jmc.test.jemmy/src/test/java/org/openjdk/jmc/test/jemmy/misc/wrappers/MCChartCanvas.java
+++ b/application/uitests/org.openjdk.jmc.test.jemmy/src/test/java/org/openjdk/jmc/test/jemmy/misc/wrappers/MCChartCanvas.java
@@ -63,11 +63,12 @@
 	 *            the shell from where to start the search for the ChartCanvas object
 	 * @return a {@link List} of {@link MCChartCanvas} objects
 	 */
 	@SuppressWarnings("unchecked")
 	public static List<MCChartCanvas> getAll(Wrap<? extends Shell> shell) {
-		List<Wrap<? extends ChartCanvas>> list = getVisible(shell.as(Parent.class, ChartCanvas.class).lookup(ChartCanvas.class));
+		List<Wrap<? extends ChartCanvas>> list = getVisible(
+				shell.as(Parent.class, ChartCanvas.class).lookup(ChartCanvas.class));
 		List<MCChartCanvas> canvases = new ArrayList<>();
 		for (int i = 0; i < list.size(); i++) {
 			canvases.add(new MCChartCanvas(list.get(i)));
 		}
 		return canvases;
@@ -83,29 +84,31 @@
 	public static MCChartCanvas getFirst(Wrap<? extends Shell> shell) {
 		return getAll(shell).get(0);
 	}
 
 	/**
-	 * Returns the first visible {@link MCChartCanvas} object underneath the Mission Control main shell
+	 * Returns the first visible {@link MCChartCanvas} object underneath the Mission Control main
+	 * shell
 	 *
 	 * @return a {@link MCChartCanvas} object
 	 */
 	public static MCChartCanvas getChartCanvas() {
 		return getFirst(getShell());
 	}
 
 	/**
 	 * Clicks a specific menu item in the context menu
+	 * 
 	 * @param menuItemText
 	 *            the menu item of interest
 	 */
 	@SuppressWarnings("unchecked")
 	public void clickContextMenuItem(String menuItemText) {
 		focusMc();
 		StringPopupOwner<Shell> contextMenu = control.as(StringPopupOwner.class);
 		contextMenu.setPolicy(StringComparePolicy.SUBSTRING);
-		contextMenu.push(getRelativeClickPoint(), new String[]{menuItemText});
+		contextMenu.push(getRelativeClickPoint(), new String[] {menuItemText});
 	}
 
 	/**
 	 * Checks the isEnabled value for a menu item in the context menu
 	 *
