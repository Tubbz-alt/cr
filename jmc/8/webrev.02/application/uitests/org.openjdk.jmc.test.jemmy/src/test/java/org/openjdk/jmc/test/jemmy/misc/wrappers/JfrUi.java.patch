diff a/application/uitests/org.openjdk.jmc.test.jemmy/src/test/java/org/openjdk/jmc/test/jemmy/misc/wrappers/JfrUi.java b/application/uitests/org.openjdk.jmc.test.jemmy/src/test/java/org/openjdk/jmc/test/jemmy/misc/wrappers/JfrUi.java
--- a/application/uitests/org.openjdk.jmc.test.jemmy/src/test/java/org/openjdk/jmc/test/jemmy/misc/wrappers/JfrUi.java
+++ b/application/uitests/org.openjdk.jmc.test.jemmy/src/test/java/org/openjdk/jmc/test/jemmy/misc/wrappers/JfrUi.java
@@ -149,11 +149,11 @@
 			case PROCESSES:
 				tabText = new String[] {"Environment", "Processes"};
 				break;
 			case NATIVE_LIBRARIES:
 				tabText = new String[] {"Environment", "Native Libraries"};
-				break;				
+				break;
 			case ENVIRONMENT_VARIABLES:
 				tabText = new String[] {"Environment", "Environment Variables"};
 				break;
 			default:
 				break;
@@ -162,46 +162,46 @@
 			return tabText;
 		}
 	}
 
 	/**
-	 * Opens the file in Mission Control, waits for the editor to show up and the system to become idle (all
-	 * rendering and rule calculation done)
+	 * Opens the file in Mission Control, waits for the editor to show up and the system to become
+	 * idle (all rendering and rule calculation done)
 	 *
 	 * @param file
 	 *            a file representing a flight recording
 	 */
 	public static void openJfr(File file) {
 		openJfr(file, true);
 	}
 
 	/**
-	 * Opens the file in Mission Control, optionally waits for the editor to show up and the system to become
-	 * idle (all rendering and rule calculation done)
+	 * Opens the file in Mission Control, optionally waits for the editor to show up and the system
+	 * to become idle (all rendering and rule calculation done)
 	 *
 	 * @param file
 	 *            a file representing a flight recording
 	 * @param waitForEditor
-	 *            {@code true} if supposed to wait for the editor before returning. Otherwise
-	 *            will return immediately
+	 *            {@code true} if supposed to wait for the editor before returning. Otherwise will
+	 *            return immediately
 	 */
 	public static void openJfr(File file, boolean waitForEditor) {
 		openJfr(file, true, waitForEditor);
 	}
 
 	/**
-	 * Opens the file in Mission Control, waits for the editor to show up and the system to become idle (all
-	 * rendering and rule calculation done)
+	 * Opens the file in Mission Control, waits for the editor to show up and the system to become
+	 * idle (all rendering and rule calculation done)
 	 *
 	 * @param file
 	 *            a file representing a flight recording
 	 * @param handlePotentialDecompressionDialog
-	 *            {@code true} if a (potential) decompression dialog should be handled by
-	 *            clicking the Yes button. Otherwise won't check for the dialog
+	 *            {@code true} if a (potential) decompression dialog should be handled by clicking
+	 *            the Yes button. Otherwise won't check for the dialog
 	 * @param waitForEditor
-	 *            {@code true} if supposed to wait for the editor before returning. Otherwise
-	 *            will return immediately
+	 *            {@code true} if supposed to wait for the editor before returning. Otherwise will
+	 *            return immediately
 	 */
 	public static void openJfr(File file, boolean handlePotentialDecompressionDialog, boolean waitForEditor) {
 		TestHelper.openJfr(file.getAbsolutePath());
 
 		if (handlePotentialDecompressionDialog) {
