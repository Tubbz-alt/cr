diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationHdrHistogram.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationHdrHistogram.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationHdrHistogram.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationHdrHistogram.java
@@ -89,25 +89,29 @@
 
 	}
 
 	/**
 	 * Computes the duration at a given percentile for values stored in the histogram.
-	 * @param percentile - the percentile, as a {@link UnitLookup#NUMBER}
+	 * 
+	 * @param percentile
+	 *            - the percentile, as a {@link UnitLookup#NUMBER}
 	 * @return the computed duration, as a {@link UnitLookup#TIMESPAN}
 	 */
 	public IQuantity getDurationAtPercentile(IQuantity percentile) {
 		long rawValue = histogram.getValueAtPercentile(percentile.doubleValue());
 		IQuantity duration = UnitLookup.NANOSECOND.quantity(rawValue);
 		return duration;
 	}
 
 	/**
-	 * Computes the duration at a given percentile for values stored
-	 * in the histogram, and number of values at or above that duration.
-	 * @param percentile - the percentile, as a {@link UnitLookup#NUMBER}
-	 * @return a pair with the computed duration as a {@link UnitLookup#TIMESPAN},
-	 * 	       and item count as a {@link UnitLookup#NUMBER}, in that order
+	 * Computes the duration at a given percentile for values stored in the histogram, and number of
+	 * values at or above that duration.
+	 * 
+	 * @param percentile
+	 *            - the percentile, as a {@link UnitLookup#NUMBER}
+	 * @return a pair with the computed duration as a {@link UnitLookup#TIMESPAN}, and item count as
+	 *         a {@link UnitLookup#NUMBER}, in that order
 	 */
 	public Pair<IQuantity, IQuantity> getDurationAndCountAtPercentile(IQuantity percentile) {
 		long rawValue = histogram.getValueAtPercentile(percentile.doubleValue());
 		IQuantity duration = UnitLookup.NANOSECOND.quantity(rawValue);
 		long rawCount = histogram.getCountBetweenValues(rawValue, histogram.getMaxValue());
@@ -128,15 +132,17 @@
 	public long getTotalCount() {
 		return histogram.getTotalCount();
 	}
 
 	/**
-	 * Gets the lowest value considered equivalent by this histogram,
-	 * subject to its configured precision. This is effectively a lower
-	 * bound for the "bucket" the specified value would fall under.
+	 * Gets the lowest value considered equivalent by this histogram, subject to its configured
+	 * precision. This is effectively a lower bound for the "bucket" the specified value would fall
+	 * under.
+	 * 
 	 * @see Histogram#lowestEquivalentValue(long)
-	 * @param duration - the specified duration quantity
+	 * @param duration
+	 *            - the specified duration quantity
 	 * @return the lowest duration equivalent to the supplied argument
 	 */
 	public IQuantity getLowestEquivalentDuration(IQuantity duration) {
 		long rawValue = duration.clampedLongValueIn(UnitLookup.NANOSECOND);
 		long lowestEquivalent = histogram.lowestEquivalentValue(rawValue);
