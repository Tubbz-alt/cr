diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationPercentileTable.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationPercentileTable.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationPercentileTable.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationPercentileTable.java
@@ -72,30 +72,25 @@
 import org.openjdk.jmc.ui.misc.BackgroundFractionDrawer;
 import org.openjdk.jmc.ui.misc.DelegatingLabelProvider;
 import org.openjdk.jmc.ui.misc.OptimisticComparator;
 
 /**
- * A table containing Flight Recorder event durations at various pre-defined percentiles.
- * Each row in the table contains values for a different percentile, and the columns contain
- * series of durations and event counts.
+ * A table containing Flight Recorder event durations at various pre-defined percentiles. Each row
+ * in the table contains values for a different percentile, and the columns contain series of
+ * durations and event counts.
  *
  * @see DurationPercentileTableBuilder
  */
 public class DurationPercentileTable {
 
 	public static final String TABLE_NAME = "DurationPercentileTable"; //$NON-NLS-1$
 	private static final String COL_ID_PERCENTILE = TABLE_NAME + ".percentile"; //$NON-NLS-1$
 
-	private static final IQuantity[] PERCENTILES = {
-			UnitLookup.NUMBER_UNITY.quantity(0.0),
-			UnitLookup.NUMBER_UNITY.quantity(90.0),
-			UnitLookup.NUMBER_UNITY.quantity(99.0),
-			UnitLookup.NUMBER_UNITY.quantity(99.9),
-			UnitLookup.NUMBER_UNITY.quantity(99.99),
-			UnitLookup.NUMBER_UNITY.quantity(99.999),
-			UnitLookup.NUMBER_UNITY.quantity(100.0),
-	};
+	private static final IQuantity[] PERCENTILES = {UnitLookup.NUMBER_UNITY.quantity(0.0),
+			UnitLookup.NUMBER_UNITY.quantity(90.0), UnitLookup.NUMBER_UNITY.quantity(99.0),
+			UnitLookup.NUMBER_UNITY.quantity(99.9), UnitLookup.NUMBER_UNITY.quantity(99.99),
+			UnitLookup.NUMBER_UNITY.quantity(99.999), UnitLookup.NUMBER_UNITY.quantity(100.0),};
 
 	private final DurationPercentileAggregator[] aggregators; // Correspond to column order
 	private final ColumnManager manager;
 
 	private DurationPercentileTable(ColumnManager manager, DurationPercentileAggregator[] aggregators) {
@@ -116,41 +111,51 @@
 			this.aggregators = new ArrayList<>();
 		}
 
 		/**
 		 * Adds a data series to this table, corresponding to an event type with a duration
-		 * associated with it. Calling this method adds two columns to the resulting table.
-		 * The first column contains duration values for the event at different percentiles,
-		 * and the second column contains the number of events with duration <= the duration
-		 * at that percentile.
+		 * associated with it. Calling this method adds two columns to the resulting table. The
+		 * first column contains duration values for the event at different percentiles, and the
+		 * second column contains the number of events with duration <= the duration at that
+		 * percentile.
 		 *
-		 * @param durationColId - the ID to be used for the duration column of this series
-		 * @param durationColName - the user-visible name to appear for the duration column header
-		 * @param countColId - the ID to be used for the event count column of this series
-		 * @param countColName - the user-visible name to appear for the event count column header
-		 * @param typeId - the event type ID used to match events belonging to this series
+		 * @param durationColId
+		 *            - the ID to be used for the duration column of this series
+		 * @param durationColName
+		 *            - the user-visible name to appear for the duration column header
+		 * @param countColId
+		 *            - the ID to be used for the event count column of this series
+		 * @param countColName
+		 *            - the user-visible name to appear for the event count column header
+		 * @param typeId
+		 *            - the event type ID used to match events belonging to this series
 		 */
-		public void addSeries(String durationColId, String durationColName,
-				String countColId, String countColName, String typeId) {
-			IColumn column = new ColumnBuilder(durationColName, durationColId, new ValueAccessor(durationColId)).style(SWT.RIGHT).build();
+		public void addSeries(
+			String durationColId, String durationColName, String countColId, String countColName, String typeId) {
+			IColumn column = new ColumnBuilder(durationColName, durationColId, new ValueAccessor(durationColId))
+					.style(SWT.RIGHT).build();
 			columns.add(column);
 
 			Function<DurationPercentileTableRow, IQuantity> fractionFunc = row -> row.getCountFraction(countColId);
 			column = new ColumnBuilder(countColName, countColId, new ValueAccessor(countColId)).style(SWT.RIGHT)
 					.columnDrawer(BackgroundFractionDrawer.unchecked(fractionFunc)).build();
 			columns.add(column);
 
-			DurationPercentileAggregator aggregator = new DurationPercentileAggregator(typeId, durationColId, countColId);
+			DurationPercentileAggregator aggregator = new DurationPercentileAggregator(typeId, durationColId,
+					countColId);
 			aggregators.add(aggregator);
 		}
 
 		/**
-		 * Builds the {@link DurationPercentileTable} after all series have been added.
-		 * Calling this method results in the creation of the underlying {@link TableViewer}.
-		 * Further changes to this builder will not affect the returned table.
-		 * @param parent - the parent SWT composite that will contain this table
-		 * @param ts - settings to adjust various attributes of the created table
+		 * Builds the {@link DurationPercentileTable} after all series have been added. Calling this
+		 * method results in the creation of the underlying {@link TableViewer}. Further changes to
+		 * this builder will not affect the returned table.
+		 * 
+		 * @param parent
+		 *            - the parent SWT composite that will contain this table
+		 * @param ts
+		 *            - settings to adjust various attributes of the created table
 		 * @return a fully constructed {@link DurationPercentileTable} with no data
 		 */
 		public DurationPercentileTable build(Composite parent, TableSettings ts) {
 			TableViewer tableViewer = new TableViewer(parent,
 					SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);
@@ -168,21 +173,23 @@
 			columns.add(new ColumnBuilder(Messages.DurationPercentileTable_PERCENTILE_COL_NAME, COL_ID_PERCENTILE,
 					new DelegatingLabelProvider(keyLP, cellAccessor)).comparator(comp).build());
 			columns.addAll(this.columns);
 
 			ColumnManager manager = ColumnManager.build(tableViewer, columns, ts);
-			DurationPercentileAggregator[] aggregatorsCopy = aggregators.toArray(new DurationPercentileAggregator[aggregators.size()]);
+			DurationPercentileAggregator[] aggregatorsCopy = aggregators
+					.toArray(new DurationPercentileAggregator[aggregators.size()]);
 			return new DurationPercentileTable(manager, aggregatorsCopy);
 		}
 	}
 
 	/**
-	 * Updates the data in this table with events from the item collection.
-	 * Calling this method stores the input data into a histogram, which is then
-	 * used to generate duration values at various percentiles.
+	 * Updates the data in this table with events from the item collection. Calling this method
+	 * stores the input data into a histogram, which is then used to generate duration values at
+	 * various percentiles.
 	 *
-	 * @param itemCol - a collection of events to use as input for this table
+	 * @param itemCol
+	 *            - a collection of events to use as input for this table
 	 */
 	public void update(IItemCollection itemCol) {
 		// Add the value of each aggregate to our data model
 		DurationPercentileTableModel model = new DurationPercentileTableModel(itemCol);
 		Arrays.stream(aggregators).parallel().forEach(model::addAggregate);
@@ -206,19 +213,21 @@
 		});
 	}
 
 	/**
 	 * Get the {@link ColumnManager} responsible for the underlying {@link TableViewer}.
+	 * 
 	 * @return the manager
 	 */
 	public ColumnManager getManager() {
 		return manager;
 	}
 
 	/**
-	 * Gets a collection of items whose duration is at least as long as the percentile value
-	 * in the currently selected row.
+	 * Gets a collection of items whose duration is at least as long as the percentile value in the
+	 * currently selected row.
+	 * 
 	 * @return the collection of matching items
 	 */
 	public IItemCollection getSelectedItems() {
 		IStructuredSelection selection = manager.getViewer().getStructuredSelection();
 		Object firstSelection = selection.getFirstElement();
@@ -257,22 +266,27 @@
 	}
 
 	/**
 	 * Aggregator that inserts event durations into a histogram.
 	 */
-	private static class DurationPercentileAggregator extends AggregatorBase<Map<IQuantity, Map<String, IQuantity>>, DurationItemConsumer> {
+	private static class DurationPercentileAggregator
+			extends AggregatorBase<Map<IQuantity, Map<String, IQuantity>>, DurationItemConsumer> {
 
 		private final DurationHdrHistogram histogram;
 		private final String typeId;
 		private final String durationColId;
 		private final String countColId;
 
 		/**
 		 * Creates a new aggregator.
-		 * @param typeId - type ID used to match events
-		 * @param durationColId - the column ID for the duration column of this series
-		 * @param countColId - the column ID for the item count column of this series
+		 * 
+		 * @param typeId
+		 *            - type ID used to match events
+		 * @param durationColId
+		 *            - the column ID for the duration column of this series
+		 * @param countColId
+		 *            - the column ID for the item count column of this series
 		 */
 		public DurationPercentileAggregator(String typeId, String durationColId, String countColId) {
 			super(null, null, UnitLookup.UNKNOWN);
 			this.histogram = new DurationHdrHistogram();
 			this.typeId = typeId;
@@ -339,13 +353,14 @@
 		public String getTypeId() {
 			return typeId;
 		}
 
 		/**
-		 * @param duration - a {@link UnitLookup#TIMESPAN} quantity
-		 * @return a lower bound on values considered equivalent by this
-		 * aggregator's underlying histogram
+		 * @param duration
+		 *            - a {@link UnitLookup#TIMESPAN} quantity
+		 * @return a lower bound on values considered equivalent by this aggregator's underlying
+		 *         histogram
 		 */
 		public IQuantity getLowestEquivalentDuration(IQuantity duration) {
 			return histogram.getLowestEquivalentDuration(duration);
 		}
 
@@ -373,11 +388,13 @@
 			this.itemTotals = new ConcurrentHashMap<>();
 		}
 
 		/**
 		 * Computes the aggregate of this model's items and adds the results to this model.
-		 * @param aggregator - the aggregator to use
+		 * 
+		 * @param aggregator
+		 *            - the aggregator to use
 		 */
 		public void addAggregate(DurationPercentileAggregator aggregator) {
 			aggregator.resetHistogram();
 
 			Map<IQuantity, Map<String, IQuantity>> newData = items.getAggregate(aggregator);
@@ -394,12 +411,13 @@
 				return oldVal;
 			}));
 		}
 
 		/**
-		 * Builds a list of table rows from the data in this model, suitable as input
-		 * to the {@link DurationPercentileTable}'s {@link ColumnViewer}.
+		 * Builds a list of table rows from the data in this model, suitable as input to the
+		 * {@link DurationPercentileTable}'s {@link ColumnViewer}.
+		 * 
 		 * @return the list of rows
 		 */
 		public List<DurationPercentileTableRow> buildRows() {
 			List<DurationPercentileTableRow> rows = new ArrayList<>();
 			for (IQuantity percentile : PERCENTILES) {
@@ -411,12 +429,12 @@
 		}
 
 	}
 
 	/**
-	 * Roughly equivalent to a row in the table, containing the percentile and list of
-	 * associated quantities in column order.
+	 * Roughly equivalent to a row in the table, containing the percentile and list of associated
+	 * quantities in column order.
 	 */
 	private static class DurationPercentileTableRow {
 
 		private final IQuantity percentile;
 		private final Map<String, IQuantity> valuesByColId;
@@ -442,13 +460,15 @@
 		public boolean hasValue(String columnId) {
 			return valuesByColId.containsKey(columnId);
 		}
 
 		/**
-		 * Calculates the fraction of items in this row, compared to the total
-		 * number of items in the series.
-		 * @param columnId - the ID of the item count column
+		 * Calculates the fraction of items in this row, compared to the total number of items in
+		 * the series.
+		 * 
+		 * @param columnId
+		 *            - the ID of the item count column
 		 * @return a fraction quantity between 0 and 1
 		 */
 		public IQuantity getCountFraction(String columnId) {
 			IQuantity count = valuesByColId.get(columnId);
 			IQuantity total = totalsById.get(columnId);
@@ -458,13 +478,15 @@
 			}
 			return UnitLookup.NUMBER_UNITY.quantity(fraction);
 		}
 
 		/**
-		 * Computes the collection of items that have duration at least as long as the
-		 * corresponding values in this row.
-		 * @param aggregators - an array of aggregators that produced the content of this row
+		 * Computes the collection of items that have duration at least as long as the corresponding
+		 * values in this row.
+		 * 
+		 * @param aggregators
+		 *            - an array of aggregators that produced the content of this row
 		 * @return the matching items
 		 */
 		public IItemCollection getItemsForRow(DurationPercentileAggregator[] aggregators) {
 			// Select all events with matching Type ID and duration greater or equal to the value
 			// for the selected percentile in the histogram, subject to the histogram's precision.
