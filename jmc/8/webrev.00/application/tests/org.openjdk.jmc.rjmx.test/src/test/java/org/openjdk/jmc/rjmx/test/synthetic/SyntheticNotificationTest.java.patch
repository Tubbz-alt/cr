diff a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/synthetic/SyntheticNotificationTest.java b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/synthetic/SyntheticNotificationTest.java
--- a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/synthetic/SyntheticNotificationTest.java
+++ b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/synthetic/SyntheticNotificationTest.java
@@ -135,12 +135,12 @@
 		MBeanInfo info = connection.getMBeanInfo(new ObjectName("java.lang:type=Memory"));
 		assertTrue(info.getNotifications().length > 0);
 		for (MBeanNotificationInfo notificationInfo : info.getNotifications()) {
 			if (notificationInfo.getName().equals("java.management.memory.collection.threshold.exceeded")) {
 				assertTrue("Failed to shadow description", notificationInfo.getDescription().contains("shadow"));
-				assertTrue("Got the wrong type:" + notificationInfo.getNotifTypes()[0], "int".equals(notificationInfo
-						.getNotifTypes()[0]));
+				assertTrue("Got the wrong type:" + notificationInfo.getNotifTypes()[0],
+						"int".equals(notificationInfo.getNotifTypes()[0]));
 			} else {
 				assertTrue("Should NOT contain shadow!", !notificationInfo.getDescription().contains("shadow"));
 				assertTrue("Should not be int!", !"int".equals(notificationInfo.getNotifTypes()[0]));
 			}
 		}
