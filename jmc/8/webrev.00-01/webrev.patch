diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationHdrHistogram.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationHdrHistogram.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationHdrHistogram.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationHdrHistogram.java
@@ -91,11 +91,11 @@
 
 	/**
 	 * Computes the duration at a given percentile for values stored in the histogram.
 	 * 
 	 * @param percentile
-	 *            - the percentile, as a {@link UnitLookup#NUMBER}
+	 *            the percentile, as a {@link UnitLookup#NUMBER}
 	 * @return the computed duration, as a {@link UnitLookup#TIMESPAN}
 	 */
 	public IQuantity getDurationAtPercentile(IQuantity percentile) {
 		long rawValue = histogram.getValueAtPercentile(percentile.doubleValue());
 		IQuantity duration = UnitLookup.NANOSECOND.quantity(rawValue);
@@ -105,11 +105,11 @@
 	/**
 	 * Computes the duration at a given percentile for values stored in the histogram, and number of
 	 * values at or above that duration.
 	 * 
 	 * @param percentile
-	 *            - the percentile, as a {@link UnitLookup#NUMBER}
+	 *            the percentile, as a {@link UnitLookup#NUMBER}
 	 * @return a pair with the computed duration as a {@link UnitLookup#TIMESPAN}, and item count as
 	 *         a {@link UnitLookup#NUMBER}, in that order
 	 */
 	public Pair<IQuantity, IQuantity> getDurationAndCountAtPercentile(IQuantity percentile) {
 		long rawValue = histogram.getValueAtPercentile(percentile.doubleValue());
@@ -138,11 +138,11 @@
 	 * precision. This is effectively a lower bound for the "bucket" the specified value would fall
 	 * under.
 	 * 
 	 * @see Histogram#lowestEquivalentValue(long)
 	 * @param duration
-	 *            - the specified duration quantity
+	 *            the specified duration quantity
 	 * @return the lowest duration equivalent to the supplied argument
 	 */
 	public IQuantity getLowestEquivalentDuration(IQuantity duration) {
 		long rawValue = duration.clampedLongValueIn(UnitLookup.NANOSECOND);
 		long lowestEquivalent = histogram.lowestEquivalentValue(rawValue);
@@ -153,7 +153,6 @@
 	 * Resets this histogram to its initial state, deleting all values from it.
 	 */
 	public void reset() {
 		histogram.reset();
 	}
-
 }
