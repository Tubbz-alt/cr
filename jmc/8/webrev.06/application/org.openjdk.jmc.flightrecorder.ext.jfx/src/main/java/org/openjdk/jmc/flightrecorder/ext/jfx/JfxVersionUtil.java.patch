diff a/application/org.openjdk.jmc.flightrecorder.ext.jfx/src/main/java/org/openjdk/jmc/flightrecorder/ext/jfx/JfxVersionUtil.java b/application/org.openjdk.jmc.flightrecorder.ext.jfx/src/main/java/org/openjdk/jmc/flightrecorder/ext/jfx/JfxVersionUtil.java
--- a/application/org.openjdk.jmc.flightrecorder.ext.jfx/src/main/java/org/openjdk/jmc/flightrecorder/ext/jfx/JfxVersionUtil.java
+++ b/application/org.openjdk.jmc.flightrecorder.ext.jfx/src/main/java/org/openjdk/jmc/flightrecorder/ext/jfx/JfxVersionUtil.java
@@ -43,40 +43,38 @@
  */
 final class JfxVersionUtil {
 	enum JavaFxEventAvailability {
 		None, JavaFx8, JavaFx12
 	}
-	
+
 	static JavaFxEventAvailability getAvailability(IItemCollection items) {
-		EventAvailability eventAvailability = RulesToolkit.getEventAvailability(items, JfxConstants.TYPE_ID_PULSE_PHASE_12);
+		EventAvailability eventAvailability = RulesToolkit.getEventAvailability(items,
+				JfxConstants.TYPE_ID_PULSE_PHASE_12);
 		if (RulesToolkit.isEventsEnabled(eventAvailability)) {
 			return JavaFxEventAvailability.JavaFx12;
-		}		
+		}
 		eventAvailability = RulesToolkit.getEventAvailability(items, JfxConstants.TYPE_ID_PULSE_PHASE_8);
 		if (RulesToolkit.isEventsEnabled(eventAvailability)) {
 			return JavaFxEventAvailability.JavaFx8;
 		}
 		return JavaFxEventAvailability.None;
 	}
-	
 
 	static String getPulseTypeId(JavaFxEventAvailability availability) {
 		if (availability == JavaFxEventAvailability.JavaFx8) {
 			return JfxConstants.TYPE_ID_PULSE_PHASE_8;
 		}
 		return JfxConstants.TYPE_ID_PULSE_PHASE_12;
 	}
 
-
 	static IAttribute<IQuantity> getPulseIdAttribute(JavaFxEventAvailability availability) {
 		if (availability == JavaFxEventAvailability.JavaFx8) {
 			return JfxConstants.ATTRIBUTE_PULSE_ID_8;
 		}
 		return JfxConstants.ATTRIBUTE_PULSE_ID_12;
 	}
 
-
 	static IAttribute<String> getPhaseNameAttribute(JavaFxEventAvailability availability) {
 		if (availability == JavaFxEventAvailability.JavaFx8) {
 			return JfxConstants.ATTRIBUTE_PHASE_NAME_8;
 		}
 		return JfxConstants.ATTRIBUTE_PHASE_NAME_12;
