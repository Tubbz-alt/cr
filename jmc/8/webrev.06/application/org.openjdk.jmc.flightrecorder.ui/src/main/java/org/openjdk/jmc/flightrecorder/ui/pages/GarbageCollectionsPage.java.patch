diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/GarbageCollectionsPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/GarbageCollectionsPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/GarbageCollectionsPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/GarbageCollectionsPage.java
@@ -269,11 +269,12 @@
 				LONGEST_PAUSE_COLOR, b -> buildChart());
 		private final IAction sumOfPauses = createAggregatorCheckAction(TOTAL_GC_PAUSE, "sumOfPauses", //$NON-NLS-1$
 				SUM_OF_PAUSES_COLOR, b -> buildChart());
 		private final List<IAction> allChartSeriesActions = Stream.concat(
 				Stream.concat(HEAP_SUMMARY.getAttributes().stream(),
-						Stream.concat(HEAP_SUMMARY_POST_GC.getAttributes().stream(), METASPACE_SUMMARY.getAttributes().stream()))
+						Stream.concat(HEAP_SUMMARY_POST_GC.getAttributes().stream(),
+								METASPACE_SUMMARY.getAttributes().stream()))
 						.map(a -> createAttributeCheckAction(a, b -> buildChart())),
 				Stream.of(longestPause, sumOfPauses, enablePhases, GCEventThread)).collect(Collectors.toList());
 		private final Set<String> excludedAttributeIds;
 		private FilterComponent tableFilter;
 		private XYChart gcChart;
@@ -343,12 +344,12 @@
 			itemListMm.add(tableFilter.getShowSearchAction());
 
 			gcInfoFolder = new CTabFolder(tableSash, SWT.NONE);
 			phasesList = PHASES.buildWithoutBorder(gcInfoFolder, TableSettings.forState(state.getChild(PHASE_LIST)));
 			phasesList.getManager().getViewer().addSelectionChangedListener(e -> {
-					buildChart();	
-					pageContainer.showSelection(ItemCollectionToolkit.build(phasesList.getSelection().get()));
+				buildChart();
+				pageContainer.showSelection(ItemCollectionToolkit.build(phasesList.getSelection().get()));
 			});
 			phasesFilter = FilterComponent.createFilterComponent(phasesList, phasesFilterState,
 					getDataSource().getItems().apply(JdkFilters.GC_PAUSE_PHASE),
 					pageContainer.getSelectionStore()::getSelections, this::onPhasesFilterChange);
 			MCContextMenuManager phasesMm = MCContextMenuManager
@@ -389,13 +390,14 @@
 			gd.widthHint = 180;
 			chartLegend.getControl().setLayoutData(gd);
 			lanes = new ThreadGraphLanes(() -> getDataSource(), () -> buildChart());
 			lanes.initializeChartConfiguration(Stream.of(state.getChildren(THREAD_LANES)));
 			IAction editLanesAction = ActionToolkit.action(() -> lanes.openEditLanesDialog(mm, false),
-					Messages.ThreadsPage_EDIT_LANES, FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.ICON_LANES_EDIT));
+					Messages.ThreadsPage_EDIT_LANES,
+					FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.ICON_LANES_EDIT));
 			form.getToolBarManager().add(editLanesAction);
-			
+
 			DataPageToolkit.createChartTimestampTooltip(chartCanvas);
 			gcChart = new XYChart(pageContainer.getRecordingRange(), renderRoot, 180);
 			gcChart.setVisibleRange(timelineRange.getStart(), timelineRange.getEnd());
 			gcChart.addVisibleRangeListener(r -> timelineRange = r);
 
@@ -415,15 +417,16 @@
 			phasesList.getManager().setSelectionState(phasesSelection);
 			metaspaceList.getManager().setSelectionState(metaspaceSelection);
 			mm = (MCContextMenuManager) chartCanvas.getContextMenu();
 			lanes.updateContextMenu(mm, false);
 			lanes.updateContextMenu(MCContextMenuManager.create(chartLegend.getControl()), true);
-			
+
 			// Older recordings may not have thread information in pause events.
 			// In those cases there is no need for the thread activity actions.
-			if (!getDataSource().getItems().apply(ItemFilters.and(ItemFilters.hasAttribute(JfrAttributes.EVENT_THREAD),
-					JdkFilters.GC_PAUSE)).hasItems()) {
+			if (!getDataSource().getItems()
+					.apply(ItemFilters.and(ItemFilters.hasAttribute(JfrAttributes.EVENT_THREAD), JdkFilters.GC_PAUSE))
+					.hasItems()) {
 				editLanesAction.setEnabled(false);
 				editLanesAction.setToolTipText(Messages.GarbageCollectionsPage_DISABLED_TOOLTIP);
 				GCEventThread.setEnabled(false);
 				GCEventThread.setDescription(Messages.GarbageCollectionsPage_DISABLED_TOOLTIP);
 				for (IAction action : lanes.getContextMenuActions()) {
@@ -500,12 +503,12 @@
 			Predicate<IAttribute<IQuantity>> legendFilter = this::isAttributeEnabled;
 			DataPageToolkit.buildLinesRow(Messages.GarbageCollectionsPage_ROW_HEAP,
 					Messages.GarbageCollectionsPage_ROW_HEAP_DESC, allItems, false, HEAP_SUMMARY, legendFilter,
 					UnitLookup.BYTE.quantity(0), null).ifPresent(rows::add);
 			DataPageToolkit.buildLinesRow(Messages.GarbageCollectionsPage_ROW_HEAP_POST_GC,
-					Messages.GarbageCollectionsPage_ROW_HEAP_POST_GC_DESC, allItems, false, HEAP_SUMMARY_POST_GC, legendFilter,
-					UnitLookup.BYTE.quantity(0), null).ifPresent(rows::add);
+					Messages.GarbageCollectionsPage_ROW_HEAP_POST_GC_DESC, allItems, false, HEAP_SUMMARY_POST_GC,
+					legendFilter, UnitLookup.BYTE.quantity(0), null).ifPresent(rows::add);
 			DataPageToolkit.buildLinesRow(Messages.GarbageCollectionsPage_ROW_METASPACE,
 					Messages.GarbageCollectionsPage_ROW_METASPACE_DESC, allItems, false, METASPACE_SUMMARY,
 					legendFilter, UnitLookup.BYTE.quantity(0), null).ifPresent(rows::add);
 			// Pauses
 			List<IXDataRenderer> gcPauseRows = new ArrayList<>();
@@ -529,20 +532,24 @@
 				ItemRow l2 = buildSpanRow(allItems, JdkTypeIDs.GC_PAUSE_L2);
 				ItemRow l3 = buildSpanRow(allItems, JdkTypeIDs.GC_PAUSE_L3);
 				ItemRow l4 = buildSpanRow(allItems, JdkTypeIDs.GC_PAUSE_L4);
 				rows.add(RendererToolkit.uniformRows(Arrays.asList(pauses, l1, l2, l3, l4), enablePhases.getText()));
 			}
-			IItemFilter pauseThreadsFilter = ItemFilters.and(JdkFilters.GC_PAUSE, ItemFilters.hasAttribute(JfrAttributes.EVENT_THREAD));
+			IItemFilter pauseThreadsFilter = ItemFilters.and(JdkFilters.GC_PAUSE,
+					ItemFilters.hasAttribute(JfrAttributes.EVENT_THREAD));
 			// Thread information may not be available in earlier recordings, ensure we actually have items before proceeding
-			if (GCEventThread.isChecked() && phasesList.getSelection().get().count() > 0 
+			if (GCEventThread.isChecked() && phasesList.getSelection().get().count() > 0
 					&& allItems.apply(pauseThreadsFilter).hasItems()) {
 				// Get the event threads from the selected events
-				IAggregator<Set<IMCThread>, ?> distinctThreadsAggregator = Aggregators.distinct(JfrAttributes.EVENT_THREAD);
+				IAggregator<Set<IMCThread>, ?> distinctThreadsAggregator = Aggregators
+						.distinct(JfrAttributes.EVENT_THREAD);
 				IItemCollection items = ItemCollectionToolkit.build(phasesList.getSelection().get());
 				Set<IMCThread> threads = items.getAggregate(distinctThreadsAggregator);
-				List<IXDataRenderer> renderers = threads.stream().map((thread) ->lanes.buildThreadRenderer(thread,
-						getDataSource().getItems().apply(ItemFilters.equals(JfrAttributes.EVENT_THREAD, thread))))
+				List<IXDataRenderer> renderers = threads.stream()
+						.map((thread) -> lanes.buildThreadRenderer(thread,
+								getDataSource().getItems()
+										.apply(ItemFilters.equals(JfrAttributes.EVENT_THREAD, thread))))
 						.collect(Collectors.toList());
 				rows.add(RendererToolkit.uniformRows(renderers));
 			}
 
 			renderRoot = RendererToolkit.layers(RendererToolkit.uniformRows(rows), buildTableSelectionRenderer());
