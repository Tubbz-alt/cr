diff a/application/org.openjdk.jmc.flightrecorder.ext.jfx/src/main/java/org/openjdk/jmc/flightrecorder/ext/jfx/JfxPage.java b/application/org.openjdk.jmc.flightrecorder.ext.jfx/src/main/java/org/openjdk/jmc/flightrecorder/ext/jfx/JfxPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ext.jfx/src/main/java/org/openjdk/jmc/flightrecorder/ext/jfx/JfxPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ext.jfx/src/main/java/org/openjdk/jmc/flightrecorder/ext/jfx/JfxPage.java
@@ -165,20 +165,21 @@
 			this.pageContainer = editor;
 			this.items = items;
 			Form form = DataPageToolkit.createForm(parent, toolkit, name, icon);
 
 			JavaFxEventAvailability availability = JfxVersionUtil.getAvailability(getItems());
-			
+
 			mainSash = new SashForm(form.getBody(), SWT.VERTICAL | SWT.SMOOTH);
 			toolkit.adapt(mainSash);
 			tableSash = new SashForm(mainSash, SWT.HORIZONTAL | SWT.SMOOTH);
 			toolkit.adapt(tableSash);
 
 			Section phases = CompositeToolkit.createSection(tableSash, toolkit, Messages.JfxPage_PHASES);
 			phasesSash = new SashForm(phases, SWT.HORIZONTAL | SWT.SMOOTH);
 			phases.setClient(phasesSash);
-			pulsesTable = BY_PULSE_HISTOGRAM.buildWithoutBorder(phasesSash, JfxVersionUtil.getPulseIdAttribute(availability),
+			pulsesTable = BY_PULSE_HISTOGRAM.buildWithoutBorder(phasesSash,
+					JfxVersionUtil.getPulseIdAttribute(availability),
 					getPulseTableSettings(state.getChild(PULSES_TABLE)));
 			pulsesFilter = FilterComponent.createFilterComponent(pulsesTable, pulsesTableFilter,
 					getItems().apply(JfxConstants.JFX_PULSE_FILTER), pageContainer.getSelectionStore()::getSelections,
 					this::onPulsesFilterChange);
 			pulsesTable.getManager().getViewer().addSelectionChangedListener(e -> onPulsesSelected());
@@ -189,11 +190,11 @@
 			phaseList.addColumn(JfrAttributes.DURATION);
 			phaseList.addColumn(JfrAttributes.START_TIME);
 			phaseList.addColumn(JfxVersionUtil.getPhaseNameAttribute(availability));
 			phaseList.addColumn(JfrAttributes.EVENT_THREAD);
 			phaseList.addColumn(JfxVersionUtil.getPulseIdAttribute(availability));
-			
+
 			phasesTable = phaseList.buildWithoutBorder(phasesSash, getPhaseListSettings(state.getChild(PHASES_TABLE)));
 			phasesFilter = FilterComponent.createFilterComponent(phasesTable, phasesTableFilter,
 					getItems().apply(JfxConstants.JFX_PULSE_FILTER), pageContainer.getSelectionStore()::getSelections,
 					this::onPhasesFilterChange);
 			phasesTable.getManager().getViewer()
@@ -374,11 +375,12 @@
 
 	private static IXDataRenderer buildThreadRenderer(Object threadName, IItemCollection items) {
 		// Attribute only used for looking up color and name information here
 		IXDataRenderer phaseRenderer = DataPageToolkit.buildSpanRenderer(items,
 				DataPageToolkit.getAttributeValueColor(JfxConstants.ATTRIBUTE_PHASE_NAME_12));
-		return new ItemRow(String.valueOf(threadName), JfxConstants.ATTRIBUTE_PHASE_NAME_12.getDescription(), phaseRenderer, items);
+		return new ItemRow(String.valueOf(threadName), JfxConstants.ATTRIBUTE_PHASE_NAME_12.getDescription(),
+				phaseRenderer, items);
 	}
 
 	private static TableSettings getPulseTableSettings(IState state) {
 		if (state == null) {
 			return new TableSettings(TOTAL_DURATION,
