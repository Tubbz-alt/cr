diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ClassLoadingPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ClassLoadingPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ClassLoadingPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/ClassLoadingPage.java
@@ -30,11 +30,10 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.flightrecorder.ui.pages;
 
-
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -156,21 +155,21 @@
 		CLASS_LOADING_LIST.addColumn(JdkAttributes.CLASS_INITIATING_CLASSLOADER);
 		CLASS_LOADING_LIST.addColumn(JfrAttributes.START_TIME);
 		CLASS_LOADING_LIST.addColumn(JfrAttributes.DURATION);
 		CLASS_LOADING_LIST.addColumn(JfrAttributes.END_TIME);
 		CLASS_LOADING_LIST.addColumn(JfrAttributes.EVENT_THREAD);
-		
+
 		CLASS_UNLOADING_LIST.addColumn(JfrAttributes.EVENT_TIMESTAMP);
 		CLASS_UNLOADING_LIST.addColumn(JfrAttributes.EVENT_THREAD);
 		CLASS_UNLOADING_LIST.addColumn(JdkAttributes.CLASS_UNLOADED);
 		CLASS_UNLOADING_LIST.addColumn(JdkAttributes.CLASS_DEFINING_CLASSLOADER);
-		
+
 		CLASS_DEFINE_LIST.addColumn(JfrAttributes.START_TIME);
 		CLASS_DEFINE_LIST.addColumn(JdkAttributes.CLASS_DEFINING_CLASSLOADER);
 		CLASS_DEFINE_LIST.addColumn(JdkAttributes.CLASS_DEFINED);
 		CLASS_DEFINE_LIST.addColumn(JfrAttributes.EVENT_THREAD);
-		
+
 		CLASS_LOADER_STATISTICS_LIST.addColumn(JdkAttributes.ANONYMOUS_BLOCK_SIZE);
 		CLASS_LOADER_STATISTICS_LIST.addColumn(JdkAttributes.ANONYMOUS_CHUNK_SIZE);
 		CLASS_LOADER_STATISTICS_LIST.addColumn(JdkAttributes.ANONYMOUS_CLASS_COUNT);
 		CLASS_LOADER_STATISTICS_LIST.addColumn(JdkAttributes.BLOCK_SIZE);
 		CLASS_LOADER_STATISTICS_LIST.addColumn(JdkAttributes.CHUNK_SIZE);
@@ -270,27 +269,31 @@
 
 			classLoaderStatisticsTable = CLASS_LOADER_STATISTICS_LIST.buildWithoutBorder(classloaderFolder,
 					TableSettings.forState(state.getChild(CLASS_LOADER_STATISTICS_TABLE)));
 			classLoaderStatisticsTable.getManager().getViewer().addSelectionChangedListener(e -> {
 				// The standard aggregators will skip the null classloader, so we need to do this manually.
-				IItemCollection selection = ItemCollectionToolkit.build(classLoaderStatisticsTable.getSelection().get());
-				Stream<IMCClassLoader> stream = ItemCollectionToolkit.values(selection, JdkAttributes.CLASSLOADER).get().distinct();
+				IItemCollection selection = ItemCollectionToolkit
+						.build(classLoaderStatisticsTable.getSelection().get());
+				Stream<IMCClassLoader> stream = ItemCollectionToolkit.values(selection, JdkAttributes.CLASSLOADER).get()
+						.distinct();
 				Set<IMCClassLoader> selected = stream.collect(Collectors.toSet());
-				IItemFilter selectionFilter =  ItemFilters.and(ItemFilters.or(JdkFilters.CLASS_LOAD_OR_UNLOAD,
-				JdkFilters.CLASS_DEFINE), ItemFilters.memberOf(JdkAttributes.CLASS_DEFINING_CLASSLOADER, selected));
- 				IItemCollection filteredItems = getDataSource().getItems().apply(selectionFilter);
+				IItemFilter selectionFilter = ItemFilters.and(
+						ItemFilters.or(JdkFilters.CLASS_LOAD_OR_UNLOAD, JdkFilters.CLASS_DEFINE),
+						ItemFilters.memberOf(JdkAttributes.CLASS_DEFINING_CLASSLOADER, selected));
+				IItemCollection filteredItems = getDataSource().getItems().apply(selectionFilter);
 				pageContainer.showSelection(filteredItems);
 				updateTables(filteredItems);
 			});
 			classLoaderStatisticsFilter = FilterComponent.createFilterComponent(classLoaderStatisticsTable, null,
 					getDataSource().getItems().apply(JdkFilters.CLASS_LOADER_STATISTICS),
 					pageContainer.getSelectionStore()::getSelections, this::onClassLoaderStatisticsFilterChange);
 			MCContextMenuManager classLoaderStatisticsTableMm = MCContextMenuManager
 					.create(classLoaderStatisticsTable.getManager().getViewer().getControl());
 			ColumnMenusFactory.addDefaultMenus(classLoaderStatisticsTable.getManager(), classLoaderStatisticsTableMm);
-			SelectionStoreActionToolkit.addSelectionStoreActions(pageContainer.getSelectionStore(), classLoaderStatisticsTable,
-					Messages.ClassLoadingPage_CLASS_LOADER_STATISTICS_LIST_SELECTION, classLoaderStatisticsTableMm);
+			SelectionStoreActionToolkit.addSelectionStoreActions(pageContainer.getSelectionStore(),
+					classLoaderStatisticsTable, Messages.ClassLoadingPage_CLASS_LOADER_STATISTICS_LIST_SELECTION,
+					classLoaderStatisticsTableMm);
 			classLoaderStatisticsTableMm.add(classLoaderStatisticsFilter.getShowFilterAction());
 			classLoaderStatisticsTableMm.add(classLoaderStatisticsFilter.getShowSearchAction());
 			classLoaderStatisticsFilter.loadState(state.getChild(CLASS_LOADER_STATISTICS_FILTER));
 			DataPageToolkit.addTabItem(classloaderFolder, classLoaderStatisticsFilter.getComponent(),
 					Messages.ClassLoadingPage_CLASS_LOADER_STATISTICS_TAB_TITLE);
@@ -312,11 +315,11 @@
 			classLoadingTableMm.add(classLoadingFilter.getShowFilterAction());
 			classLoadingTableMm.add(classLoadingFilter.getShowSearchAction());
 			classLoadingFilter.loadState(state.getChild(CLASS_LOADING_FILTER));
 			DataPageToolkit.addTabItem(tabFolder, classLoadingFilter.getComponent(),
 					Messages.ClassLoadingPage_CLASS_LOADING_TAB_TITLE);
-			
+
 			classDefineTable = CLASS_DEFINE_LIST.buildWithoutBorder(tabFolder,
 					TableSettings.forState(state.getChild(CLASS_DEFINE_TABLE)));
 			classDefineTable.getManager().getViewer().addSelectionChangedListener(e -> pageContainer
 					.showSelection(ItemCollectionToolkit.build(classDefineTable.getSelection().get())));
 			classDefineFilter = FilterComponent.createFilterComponent(classDefineTable, null,
@@ -371,12 +374,12 @@
 			classDefineTable.getManager().setSelectionState(classDefineTableSelection);
 			classLoaderStatisticsTable.getManager().setSelectionState(classLoaderStatisticsTableSelection);
 		}
 
 		private void onHistogramFilterChange(IItemFilter filter) {
-			classloaderHistogramFilter.filterChangeHelper(filter, classloaderHistogram,
-					getDataSource().getItems().apply(ItemFilters.or(JdkFilters.CLASS_LOAD_OR_UNLOAD, JdkFilters.CLASS_DEFINE)));
+			classloaderHistogramFilter.filterChangeHelper(filter, classloaderHistogram, getDataSource().getItems()
+					.apply(ItemFilters.or(JdkFilters.CLASS_LOAD_OR_UNLOAD, JdkFilters.CLASS_DEFINE)));
 			if (classLoadingFilter != null) {
 				classLoadingFilter.notifyListener();
 			}
 			if (classUnloadingFilter != null) {
 				classUnloadingFilter.notifyListener();
@@ -399,31 +402,32 @@
 		private void onClassUnloadFilterChange(IItemFilter filter) {
 			classUnloadingFilter.filterChangeHelper(filter, classUnloadingTable,
 					getDataSource().getItems().apply(JdkFilters.CLASS_UNLOAD));
 			classUnloadTableFilter = filter;
 		}
-		
+
 		private void onClassDefineFilterChange(IItemFilter filter) {
 			classDefineFilter.filterChangeHelper(filter, classDefineTable,
 					getDataSource().getItems().apply(JdkFilters.CLASS_DEFINE));
 			classDefineTableFilter = filter;
 		}
-		
+
 		private void onClassLoaderStatisticsFilterChange(IItemFilter filter) {
 			classLoaderStatisticsFilter.filterChangeHelper(filter, classLoaderStatisticsTable,
 					getDataSource().getItems().apply(JdkFilters.CLASS_LOADER_STATISTICS));
 			classLoaderStatisticsTableFilter = filter;
 		}
-	
+
 		@Override
 		public void saveTo(IWritableState state) {
 			PersistableSashForm.saveState(sash, state.createChild(SASH));
 			classloaderHistogram.getManager().getSettings().saveState(state.createChild(HISTOGRAM));
 			classLoadingTable.getManager().getSettings().saveState(state.createChild(CLASS_LOADING_TABLE));
 			classUnloadingTable.getManager().getSettings().saveState(state.createChild(CLASS_UNLOADING_TABLE));
 			classDefineTable.getManager().getSettings().saveState(state.createChild(CLASS_DEFINE_TABLE));
-			classLoaderStatisticsTable.getManager().getSettings().saveState(state.createChild(CLASS_LOADER_STATISTICS_TABLE));
+			classLoaderStatisticsTable.getManager().getSettings()
+					.saveState(state.createChild(CLASS_LOADER_STATISTICS_TABLE));
 			classloaderHistogramFilter.saveState(state.createChild(HISTOGRAM_FILTER));
 			classLoadingFilter.saveState(state.createChild(CLASS_LOADING_FILTER));
 			classUnloadingFilter.saveState(state.createChild(CLASS_UNLOADING_FILTER));
 			classDefineFilter.saveState(state.createChild(CLASS_DEFINE_FILTER));
 			classLoaderStatisticsFilter.saveState(state.createChild(CLASS_LOADER_STATISTICS_FILTER));
