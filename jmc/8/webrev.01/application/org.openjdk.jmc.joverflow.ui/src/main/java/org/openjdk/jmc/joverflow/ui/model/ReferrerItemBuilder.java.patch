diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/model/ReferrerItemBuilder.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/model/ReferrerItemBuilder.java
--- a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/model/ReferrerItemBuilder.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/model/ReferrerItemBuilder.java
@@ -38,11 +38,12 @@
 import java.util.Map;
 
 import org.openjdk.jmc.joverflow.support.RefChainElement;
 
 /**
- * Builder used to construct a list of {@code ReferrerItem} that represents a tree with only a single branching level
+ * Builder used to construct a list of {@code ReferrerItem} that represents a tree with only a
+ * single branching level
  */
 public class ReferrerItemBuilder {
 
 	private final Map<String, ReferrerItem> itemsAtBranchingLevel = new IdentityHashMap<>();
 	private List<String> commonChain = new ArrayList<>();
@@ -70,11 +71,12 @@
 				if (ref == null || !referrerName.equals(ref.toString())) {
 					// A new branching level is found
 					// Create a new branch item with the currently common aggregate values
 					commonChain = commonChain.subList(0, commonDepth);
 					itemsAtBranchingLevel.clear();
-					itemsAtBranchingLevel.put(referrerName, new ReferrerItem(commonChain, referrerName, commonMemory, commonOverhead, commonCount, true));
+					itemsAtBranchingLevel.put(referrerName, new ReferrerItem(commonChain, referrerName, commonMemory,
+							commonOverhead, commonCount, true));
 					break;
 				}
 				ref = ref.getReferer();
 				commonDepth++;
 			}
@@ -104,11 +106,12 @@
 
 	public List<ReferrerItem> buildReferrerList() {
 		List<ReferrerItem> items = new ArrayList<>();
 		int commonDepth = 0;
 		for (String r : commonChain) {
-			items.add(new ReferrerItem(commonChain.subList(0, commonDepth), r, commonMemory, commonOverhead, commonCount, false));
+			items.add(new ReferrerItem(commonChain.subList(0, commonDepth), r, commonMemory, commonOverhead,
+					commonCount, false));
 			commonDepth++;
 		}
 		items.addAll(itemsAtBranchingLevel.values());
 		return items;
 	}
