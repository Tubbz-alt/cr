diff a/application/tests/org.openjdk.jmc.flightrecorder.ext.jfx.test/src/test/java/org/openjdk/jmc/flightrecorder/ext/jfx/test/JfxPulseDurationRuleTest.java b/application/tests/org.openjdk.jmc.flightrecorder.ext.jfx.test/src/test/java/org/openjdk/jmc/flightrecorder/ext/jfx/test/JfxPulseDurationRuleTest.java
--- a/application/tests/org.openjdk.jmc.flightrecorder.ext.jfx.test/src/test/java/org/openjdk/jmc/flightrecorder/ext/jfx/test/JfxPulseDurationRuleTest.java
+++ b/application/tests/org.openjdk.jmc.flightrecorder.ext.jfx.test/src/test/java/org/openjdk/jmc/flightrecorder/ext/jfx/test/JfxPulseDurationRuleTest.java
@@ -52,11 +52,11 @@
 import org.openjdk.jmc.flightrecorder.ext.jfx.JfxPulseDurationRule;
 import org.openjdk.jmc.flightrecorder.ext.jfx.Messages;
 import org.openjdk.jmc.flightrecorder.rules.Result;
 
 public class JfxPulseDurationRuleTest {
-	
+
 	private static final String RECORDINGS_DIR = "jfr";
 	private static final String JFR_FILENAME = "pulseduration.jfr";
 	private static final IQuantity TARGET_HZ = UnitLookup.HERTZ.quantity(60);
 	private static final IQuantity LONG_PHASES_PERCENT = UnitLookup.PERCENT_UNITY.quantity(0.08106355382619974);
 	private static final IQuantity TARGET_PHASE_TIME = UnitLookup.MILLISECOND.quantity(16.666666666666668);
@@ -68,15 +68,15 @@
 	@Test
 	public void testPulseDurationRule() throws Exception {
 		// Load a saved recording containing javafx.PulsePhase events
 		IOResource jfr = TestToolkit.getNamedResource(JfxPulseDurationRuleTest.class, RECORDINGS_DIR, JFR_FILENAME);
 		IItemCollection events = JfrLoaderToolkit.loadEvents(jfr.open());
-		
+
 		// Execute the rule on our test recording
 		JfxPulseDurationRule rule = new JfxPulseDurationRule();
 		RunnableFuture<Result> future = rule.evaluate(events, new IPreferenceValueProvider() {
-			
+
 			@Override
 			@SuppressWarnings("unchecked")
 			public <T> T getPreferenceValue(TypedPreference<T> preference) {
 				// Use hard-coded 60Hz instead of relying on default, which could change
 				if (JfxPulseDurationRule.CONFIG_TARGET_FRAME_RATE.equals(preference)) {
@@ -85,14 +85,15 @@
 				return DEFAULT_VALUES.getPreferenceValue(preference);
 			}
 		});
 		future.run();
 		Result result = future.get();
-		
+
 		// Check that score and warnings match expected values
 		assertEquals(SCORE, result.getScore(), DELTA);
 		assertEquals(MessageFormat.format(WARNING_SHORT, LONG_PHASES_PERCENT.displayUsing(IDisplayable.AUTO),
 				TARGET_PHASE_TIME.displayUsing(IDisplayable.AUTO)), result.getShortDescription());
-		assertEquals(MessageFormat.format(WARNING_LONG, TARGET_HZ.displayUsing(IDisplayable.AUTO)), result.getLongDescription());
+		assertEquals(MessageFormat.format(WARNING_LONG, TARGET_HZ.displayUsing(IDisplayable.AUTO)),
+				result.getLongDescription());
 	}
 
 }
