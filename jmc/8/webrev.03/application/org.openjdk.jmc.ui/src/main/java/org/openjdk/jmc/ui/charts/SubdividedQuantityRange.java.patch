diff a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/charts/SubdividedQuantityRange.java b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/charts/SubdividedQuantityRange.java
--- a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/charts/SubdividedQuantityRange.java
+++ b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/charts/SubdividedQuantityRange.java
@@ -222,24 +222,24 @@
 	public int getFloorSubdivider(IQuantity value) {
 		return toSubdividerTransform(value.getUnit()).targetIntFloor(value.numberValue());
 	}
 
 	/**
-	 * Get the closest lower subdivider index corresponding to the pixel position
-	 * {@code pixel}. Typically used to get a bucket index.
+	 * Get the closest lower subdivider index corresponding to the pixel position {@code pixel}.
+	 * Typically used to get a bucket index.
 	 *
 	 * @param pixel
 	 * @return
 	 */
 	public int getFloorSubdividerAtPixel(Number pixel) {
 		// FIXME: Add the inverted transform to the cache instead.
 		return subdividerToPixelTransform.invert().targetIntFloor(pixel);
 	}
 
 	/**
-	 * Get the closest subdivider index corresponding to the pixel position {@code pixel}.
-	 * Typically used for snapping to ticks or bucket boundaries.
+	 * Get the closest subdivider index corresponding to the pixel position {@code pixel}. Typically
+	 * used for snapping to ticks or bucket boundaries.
 	 *
 	 * @param pixel
 	 * @return
 	 */
 	public int getClosestSubdividerAtPixel(Number pixel) {
@@ -247,12 +247,12 @@
 		// FIXME: Will not clamp correctly during the long to int conversion.
 		return (int) Math.round(subdividerToPixelTransform.invert().targetNumber(pixel).doubleValue());
 	}
 
 	/**
-	 * Get the pixel position corresponding to {@code value}. Note that if you need to perform
-	 * this on many values, all expressed in the same unit, it is more efficient to use
+	 * Get the pixel position corresponding to {@code value}. Note that if you need to perform this
+	 * on many values, all expressed in the same unit, it is more efficient to use
 	 * {@link #toPixelTransform(IUnit)} once and use that to transform all numerical values using
 	 * {@link IScalarAffineTransform#targetValue(double)} or so.
 	 *
 	 * @param value
 	 * @return
