diff a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/subscription/MRIMetadataServiceTest.java b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/subscription/MRIMetadataServiceTest.java
--- a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/subscription/MRIMetadataServiceTest.java
+++ b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/subscription/MRIMetadataServiceTest.java
@@ -65,12 +65,12 @@
 	@Test
 	public void testGetAttributeInfo() throws Exception {
 		@SuppressWarnings("nls")
 		IConnectionHandle handle = IServerHandle.create(LocalRJMXTestToolkit.createDefaultDescriptor()).connect("Test");
 		IMRIMetadataService service = LocalRJMXTestToolkit.getInfoService(handle);
-		IMRIMetadata info = service.getMetadata(new MRI(Type.ATTRIBUTE, "java.lang:type=OperatingSystem",
-				"SystemCpuLoad"));
+		IMRIMetadata info = service
+				.getMetadata(new MRI(Type.ATTRIBUTE, "java.lang:type=OperatingSystem", "SystemCpuLoad"));
 		assertNotNull(info);
 		assertNotNull(info.getMRI());
 		assertNotNull(info.getValueType());
 		assertNotNull(info.getDescription());
 		handle.close();
@@ -78,12 +78,12 @@
 
 	@Test
 	public void testGetMetadata() throws Exception {
 		IConnectionHandle handle = IServerHandle.create(LocalRJMXTestToolkit.createDefaultDescriptor()).connect("Test");
 		IMRIMetadataService service = LocalRJMXTestToolkit.getInfoService(handle);
-		IMRIMetadata info = service.getMetadata(new MRI(Type.ATTRIBUTE, "java.lang:type=OperatingSystem",
-				"SystemCpuLoad"));
+		IMRIMetadata info = service
+				.getMetadata(new MRI(Type.ATTRIBUTE, "java.lang:type=OperatingSystem", "SystemCpuLoad"));
 		assertNotNull(info);
 
 		String description = info.getDescription();
 		assertNotNull(description);
 		assertTrue(description.length() > 12);
@@ -123,14 +123,14 @@
 		IMRIMetadataService service = LocalRJMXTestToolkit.getInfoService(handle);
 		evaluateAttributeType(service, new MRI(Type.ATTRIBUTE, "java.lang:type=Memory", "HeapMemoryUsage"),
 				MemoryUsage.class);
 		evaluateAttributeType(service, new MRI(Type.ATTRIBUTE, "java.lang:type=Memory", "HeapMemoryUsage/committed"),
 				Long.TYPE);
-		evaluateAttributeType(service, new MRI(Type.ATTRIBUTE, "JMImplementation:type=MBeanServerDelegate",
-				"ImplementationVendor"), String.class);
-		evaluateAttributeType(service, new MRI(Type.ATTRIBUTE, "java.lang:type=Runtime", "InputArguments"),
-				List.class);
+		evaluateAttributeType(service,
+				new MRI(Type.ATTRIBUTE, "JMImplementation:type=MBeanServerDelegate", "ImplementationVendor"),
+				String.class);
+		evaluateAttributeType(service, new MRI(Type.ATTRIBUTE, "java.lang:type=Runtime", "InputArguments"), List.class);
 		evaluateAttributeType(service, new MRI(Type.ATTRIBUTE, "java.lang:type=Runtime", "SystemProperties"),
 				Map.class);
 		handle.close();
 	}
 
@@ -160,12 +160,12 @@
 
 	@Test
 	public void testSetMetadata() throws Exception {
 		IConnectionHandle handle = IServerHandle.create(LocalRJMXTestToolkit.createDefaultDescriptor()).connect("Test");
 		IMRIMetadataService service = LocalRJMXTestToolkit.getInfoService(handle);
-		IMRIMetadata info = service.getMetadata(new MRI(Type.ATTRIBUTE, "java.lang:type=OperatingSystem",
-				"SystemCpuLoad"));
+		IMRIMetadata info = service
+				.getMetadata(new MRI(Type.ATTRIBUTE, "java.lang:type=OperatingSystem", "SystemCpuLoad"));
 		assertNotNull(info);
 		service.setMetadata(info.getMRI(), "testgegga", "Oh, testgegga!");
 		String testGegga = (String) service.getMetadata(info.getMRI(), "testgegga");
 		assertEquals("Oh, testgegga!", testGegga);
 		handle.close();
@@ -192,12 +192,11 @@
 
 	@Test
 	public void testOverrideDefultMetadata() throws Exception {
 		IConnectionHandle handle = IServerHandle.create(LocalRJMXTestToolkit.createDefaultDescriptor()).connect("Test");
 		IMRIMetadataService service = LocalRJMXTestToolkit.getInfoService(handle);
-		MRI mri = new MRI(Type.ATTRIBUTE, "java.lang:type=Memory",
-				"HeapMemoryUsage/committed");
+		MRI mri = new MRI(Type.ATTRIBUTE, "java.lang:type=Memory", "HeapMemoryUsage/committed");
 		IMRIMetadata info = service.getMetadata(mri);
 		String description = info.getDescription();
 		String newDescription = "[ja]" + description;
 		service.setMetadata(mri, IMRIMetadataProvider.KEY_DESCRIPTION, newDescription);
 		assertEquals("Description not updated", newDescription, info.getDescription());
