diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationPercentileTable.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationPercentileTable.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationPercentileTable.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DurationPercentileTable.java
@@ -124,19 +124,19 @@
 		 * first column contains duration values for the event at different percentiles, and the
 		 * second column contains the number of events with duration <= the duration at that
 		 * percentile.
 		 *
 		 * @param durationColId
-		 *            - the ID to be used for the duration column of this series
+		 *            the ID to be used for the duration column of this series
 		 * @param durationColName
-		 *            - the user-visible name to appear for the duration column header
+		 *            the user-visible name to appear for the duration column header
 		 * @param countColId
-		 *            - the ID to be used for the event count column of this series
+		 *            the ID to be used for the event count column of this series
 		 * @param countColName
-		 *            - the user-visible name to appear for the event count column header
+		 *            the user-visible name to appear for the event count column header
 		 * @param typeId
-		 *            - the event type ID used to match events belonging to this series
+		 *            the event type ID used to match events belonging to this series
 		 */
 		public void addSeries(
 			String durationColId, String durationColName, String countColId, String countColName, String typeId) {
 			IColumn column = new ColumnBuilder(durationColName, durationColId, new ValueAccessor(durationColId))
 					.style(SWT.RIGHT).build();
@@ -156,13 +156,13 @@
 		 * Builds the {@link DurationPercentileTable} after all series have been added. Calling this
 		 * method results in the creation of the underlying {@link TableViewer}. Further changes to
 		 * this builder will not affect the returned table.
 		 * 
 		 * @param parent
-		 *            - the parent SWT composite that will contain this table
+		 *            the parent SWT composite that will contain this table
 		 * @param ts
-		 *            - settings to adjust various attributes of the created table
+		 *            settings to adjust various attributes of the created table
 		 * @return a fully constructed {@link DurationPercentileTable} with no data
 		 */
 		public DurationPercentileTable build(Composite parent, TableSettings ts) {
 			TableViewer tableViewer = new TableViewer(parent,
 					SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);
@@ -192,11 +192,11 @@
 	 * Updates the data in this table with events from the item collection. Calling this method
 	 * stores the input data into a histogram, which is then used to generate duration values at
 	 * various percentiles.
 	 *
 	 * @param itemCol
-	 *            - a collection of events to use as input for this table
+	 *            a collection of events to use as input for this table
 	 */
 	public void update(IItemCollection itemCol) {
 		// Add the value of each aggregate to our data model
 		DurationPercentileTableModel model = new DurationPercentileTableModel(itemCol);
 		Arrays.stream(aggregators).parallel().forEach(model::addAggregate);
@@ -285,15 +285,15 @@
 
 		/**
 		 * Creates a new aggregator.
 		 * 
 		 * @param typeId
-		 *            - type ID used to match events
+		 *            type ID used to match events
 		 * @param durationColId
-		 *            - the column ID for the duration column of this series
+		 *            the column ID for the duration column of this series
 		 * @param countColId
-		 *            - the column ID for the item count column of this series
+		 *            the column ID for the item count column of this series
 		 */
 		public DurationPercentileAggregator(String typeId, String durationColId, String countColId) {
 			super(null, null, UnitLookup.UNKNOWN);
 			this.histogram = new DurationHdrHistogram();
 			this.typeId = typeId;
@@ -361,11 +361,11 @@
 			return typeId;
 		}
 
 		/**
 		 * @param duration
-		 *            - a {@link UnitLookup#TIMESPAN} quantity
+		 *            a {@link UnitLookup#TIMESPAN} quantity
 		 * @return a lower bound on values considered equivalent by this aggregator's underlying
 		 *         histogram
 		 */
 		public IQuantity getLowestEquivalentDuration(IQuantity duration) {
 			return histogram.getLowestEquivalentDuration(duration);
@@ -397,11 +397,11 @@
 
 		/**
 		 * Computes the aggregate of this model's items and adds the results to this model.
 		 * 
 		 * @param aggregator
-		 *            - the aggregator to use
+		 *            the aggregator to use
 		 */
 		public void addAggregate(DurationPercentileAggregator aggregator) {
 			aggregator.resetHistogram();
 
 			Map<IQuantity, Map<String, IQuantity>> newData = items.getAggregate(aggregator);
@@ -471,11 +471,11 @@
 		/**
 		 * Calculates the fraction of items in this row, compared to the total number of items in
 		 * the series.
 		 * 
 		 * @param columnId
-		 *            - the ID of the item count column
+		 *            the ID of the item count column
 		 * @return a fraction quantity between 0 and 1
 		 */
 		public IQuantity getCountFraction(String columnId) {
 			IQuantity count = valuesByColId.get(columnId);
 			IQuantity total = totalsById.get(columnId);
@@ -489,11 +489,11 @@
 		/**
 		 * Computes the collection of items that have duration at least as long as the corresponding
 		 * values in this row.
 		 * 
 		 * @param aggregators
-		 *            - an array of aggregators that produced the content of this row
+		 *            an array of aggregators that produced the content of this row
 		 * @return the matching items
 		 */
 		public IItemCollection getItemsForRow(DurationPercentileAggregator[] aggregators) {
 			// Select all events with matching Type ID and duration greater or equal to the value
 			// for the selected percentile in the histogram, subject to the histogram's precision.
@@ -502,9 +502,7 @@
 							ItemFilters.moreOrEqual(JfrAttributes.DURATION,
 									a.getLowestEquivalentDuration(getValue(a.getDurationColId())))))
 					.reduce(ItemFilters::or).orElse(ItemFilters.none());
 			return items.apply(filter);
 		}
-
 	}
-
 }
