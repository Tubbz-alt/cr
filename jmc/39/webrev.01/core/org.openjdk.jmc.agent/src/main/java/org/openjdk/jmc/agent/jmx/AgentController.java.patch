diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
@@ -31,10 +31,11 @@
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent.jmx;
 
 import java.lang.instrument.Instrumentation;
+import java.lang.management.ManagementPermission;
 import java.util.HashSet;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -52,10 +53,11 @@
 		this.instrumentation = instrumentation;
 		this.registry = registry;
 	}
 
 	public void defineEventProbes(String xmlDescription) throws Exception{
+		checkSecurity();
 		HashSet<Class<?>> classesToRetransform = new HashSet<Class<?>>();
 		boolean revertAll = xmlDescription == null ? true : xmlDescription.isEmpty();
 		if (revertAll) {
 			List<String> classNames = registry.clearAllTransformData();
 			for (String className : classNames ) {
@@ -87,6 +89,14 @@
 
 		registry.setRevertInstrumentation(true);
 		instrumentation.retransformClasses(classesToRetransformArray);
 		registry.setRevertInstrumentation(false);
 	}
+
+	private void checkSecurity() {
+		  SecurityManager secMan = System.getSecurityManager();
+		  if (secMan != null) {
+		    secMan.checkPermission(new ManagementPermission("control"));
+		  }
+	}
+
 }
