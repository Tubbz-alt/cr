diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/EventBrowserPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/EventBrowserPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/EventBrowserPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/EventBrowserPage.java
@@ -80,10 +80,11 @@
 import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;
 import org.openjdk.jmc.flightrecorder.ui.RuleManager;
 import org.openjdk.jmc.flightrecorder.ui.StreamModel;
 import org.openjdk.jmc.flightrecorder.ui.common.AbstractDataPage;
 import org.openjdk.jmc.flightrecorder.ui.common.DataPageToolkit;
+import org.openjdk.jmc.flightrecorder.ui.common.FilterComponent;
 import org.openjdk.jmc.flightrecorder.ui.common.FlavorSelector;
 import org.openjdk.jmc.flightrecorder.ui.common.FlavorSelector.FlavorSelectorState;
 import org.openjdk.jmc.flightrecorder.ui.common.ImageConstants;
 import org.openjdk.jmc.flightrecorder.ui.common.ItemList;
 import org.openjdk.jmc.flightrecorder.ui.common.ItemList.ItemListBuilder;
@@ -144,10 +145,11 @@
 
 	private SelectionState tableSelection;
 	private ISelection treeSelection;
 	public TreePath[] treeExpansion;
 	public FlavorSelectorState flavorSelectorState;
+	private IItemFilter flagsFilter;
 //	public int topIndex;
 
 	public EventBrowserPage(IPageDefinition definition, StreamModel items, IPageContainer editor) {
 		super(definition, items, editor);
 	}
@@ -160,19 +162,21 @@
 	class EventBrowserUI implements IPageUI {
 
 		private static final String TREE_SASH = "treeSash"; //$NON-NLS-1$
 		private static final String ITEM_LIST = "itemList"; //$NON-NLS-1$
 		private static final String SHOW_TYPES_WITHOUT_EVENTS = "showTypesWithoutEvents"; //$NON-NLS-1$
+		private static final String LIST_FILTER = "listFilter"; //$NON-NLS-1$
 		private ItemList list;
 		private final SashForm treeSash;
 		private final IPageContainer container;
 		private final List<ColumnSettings> listColumns = new ArrayList<>();
 		private String listOrderBy;
 		private Set<IType<?>> selectedTypes = Collections.emptySet();
 		private final TypeFilterBuilder typeFilterTree;
 		private IItemCollection selectionItems;
 		private FlavorSelector flavorSelector;
+		private FilterComponent listFilter;
 		private Boolean showTypesWithoutEvents;
 
 		EventBrowserUI(Composite parent, FormToolkit toolkit, IState state, IPageContainer container) {
 			this.container = container;
 
@@ -225,10 +229,15 @@
 //				typeFilterTree.getViewer().getTree().setTopItem(typeFilterTree.getViewer().getTree().getItem(topIndex));
 //			}
 			list.getManager().setSelectionState(tableSelection);
 		}
 
+		private void onFilterChange(IItemFilter filter) {
+			listFilter.filterChangeHelper(filter, list, getFilteredItems());
+			flagsFilter = filter;
+		}
+
 		private void setTypesWithoutEvents(boolean checked) {
 			showTypesWithoutEvents = checked;
 			refreshTree();
 		}
 
@@ -322,15 +331,26 @@
 				}
 			});
 			listColumns.addAll(0, newColumns);
 
 			Control oldListControl = list.getManager().getViewer().getControl();
-			Composite parent = oldListControl.getParent();
-			oldListControl.dispose();
+			Composite parent = listFilter != null ? listFilter.getComponent().getParent() : oldListControl.getParent();
+			for (Control c : parent.getChildren()) {
+				c.dispose();
+			}
 			list = DataPageToolkit.createSimpleItemList(parent, itemListBuilder, container,
 					DataPageToolkit.createTableSettingsByOrderByAndColumnsWithDefaultOrdering(orderBy, listColumns),
 					Messages.EventBrowserPage_EVENT_BROWSER_SELECTION);
+			listFilter = FilterComponent.createFilterComponent(list, flagsFilter, filteredItems,
+					container.getSelectionStore()::getSelections, this::onFilterChange);
+			listFilter.loadState(getState().getChild(LIST_FILTER));
+			onFilterChange(flagsFilter);
+
+			MCContextMenuManager mm = list.getMenuManager();
+			mm.add(listFilter.getShowFilterAction());
+			mm.add(listFilter.getShowSearchAction());
+
 			parent.layout();
 			list.show(filteredItems);
 		}
 
 		private void mergeListSettings() {
@@ -356,10 +376,11 @@
 		public void saveTo(IWritableState state) {
 			PersistableSashForm.saveState(treeSash, state.createChild(TREE_SASH));
 			mergeListSettings();
 			new TableSettings(listOrderBy, listColumns).saveState(state.createChild(ITEM_LIST));
 			StateToolkit.writeBoolean(state, SHOW_TYPES_WITHOUT_EVENTS, showTypesWithoutEvents);
+			listFilter.saveState(state.createChild(LIST_FILTER));
 			saveToLocal();
 		}
 
 		private void saveToLocal() {
 			treeSelection = typeFilterTree.getViewer().getSelection();
