diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
@@ -38,18 +38,16 @@
 
 public class TraceNode {
 	private final int value;
 	private final String name;
 	private final String packageName;
-	private final String desc;
 	private final List<TraceNode> children = new ArrayList<>();
 
-	public TraceNode(String name, int value, String packageName, String desc) {
+	public TraceNode(String name, int value, String packageName) {
 		this.name = name;
 		this.value = value;
 		this.packageName = packageName;
-		this.desc = desc;
 	}
 
 	public int getValue() {
 		return value;
 	}
@@ -60,14 +58,10 @@
 
 	public String getPackageName() {
 		return packageName;
 	}
 
-	public String getDesc() {
-		return desc;
-	}
-
 	public List<TraceNode> getChildren() {
 		return children;
 	}
 
 	public void addChild(TraceNode child) {
@@ -79,11 +73,10 @@
 		final int prime = 31;
 		int result = 1;
 		result = prime * result + ((children == null) ? 0 : children.hashCode());
 		result = prime * result + ((name == null) ? 0 : name.hashCode());
 		result = prime * result + ((packageName == null) ? 0 : packageName.hashCode());
-		result = prime * result + ((desc == null) ? 0 : desc.hashCode());
 		result = prime * result + value;
 		return result;
 	}
 
 	@Override
@@ -109,21 +102,15 @@
 			if (other.packageName != null) {
 				return false;
 			}
 		} else if (!packageName.equals(other.packageName))
 			return false;
-		if (desc == null) {
-			if (other.desc != null) {
-				return false;
-			}
-		} else if (!desc.equals(other.desc))
-			return false;
 		if (value != other.value)
 			return false;
 		return true;
 	}
 
 	public String toString() {
-		return "TraceNode [name: " + name + ", value: " + value + ", packageName: " + packageName + ", desc: " + desc
-				+ ", children: " + children.size() + "]";
+		return "TraceNode [name: " + name + ", value: " + value + ", packageName: " + packageName + ", children: "
+				+ children.size() + "]";
 	}
 }
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
@@ -44,36 +44,32 @@
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Fork;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFrame;
 import org.openjdk.jmc.flightrecorder.stacktrace.messages.internal.Messages;
 
-import static org.openjdk.jmc.flightrecorder.stacktrace.messages.internal.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;
-import static org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages.Flameview_UNCLASSIFIABLE_FRAME_DESC;
-
 public class TraceTreeUtils {
 	public final static String DEFAULT_ROOT_NAME = "__root";
 	public final static String DEFAULT_ROOT_PACKAGE_NAME = "";
-	public final static String DEFAULT_TRACE_NODE_DESC = "";
 	public final static FrameSeparator DEFAULT_FRAME_SEPARATOR = new FrameSeparator(FrameCategorization.METHOD, false);
 
 	private static class TraceNodeFactory {
 
 		private static TraceNode getRootTraceNode(String rootName, Fork rootFork) {
 			return new TraceNode(rootName == null ? DEFAULT_ROOT_NAME : rootName, rootFork.getItemsInFork(),
-					DEFAULT_ROOT_PACKAGE_NAME, DEFAULT_TRACE_NODE_DESC);
+					DEFAULT_ROOT_PACKAGE_NAME);
 		}
 
 		private static TraceNode getTraceNodeByStacktraceFrame(StacktraceFrame sFrame) {
 			IMCFrame frame = sFrame.getFrame();
 			IMCMethod method = frame.getMethod();
 			String packageName = FormatToolkit.getPackage(method.getType().getPackage());
 			if (frame == StacktraceModel.UNKNOWN_FRAME) {
-				return new TraceNode(Messages.getString(STACKTRACE_UNCLASSIFIABLE_FRAME), sFrame.getItemCount(),
-						packageName, Flameview_UNCLASSIFIABLE_FRAME_DESC);
+				return new TraceNode(Messages.getString(Messages.STACKTRACE_UNCLASSIFIABLE_FRAME),
+						sFrame.getItemCount(), packageName);
 			} else {
 				String name = FormatToolkit.getHumanReadable(method, false, false, true, false, true, false);
-				return new TraceNode(name, sFrame.getItemCount(), packageName, DEFAULT_TRACE_NODE_DESC);
+				return new TraceNode(name, sFrame.getItemCount(), packageName);
 			}
 		}
 	}
 
 	/**
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -75,10 +75,13 @@
 import org.openjdk.jmc.ui.CoreImages;
 import org.openjdk.jmc.ui.common.util.AdapterUtil;
 import org.openjdk.jmc.ui.handlers.MCContextMenuManager;
 import org.openjdk.jmc.ui.misc.DisplayToolkit;
 
+import static org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages.Flameview_UNCLASSIFIABLE_FRAME_DESC;
+import static org.openjdk.jmc.flightrecorder.stacktrace.messages.internal.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;
+
 public class FlameGraphView extends ViewPart implements ISelectionListener {
 	private static final String HTML_PAGE;
 	static {
 		// from: https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.css
 		String cssD3Flamegraph = "jslibs/d3-flamegraph.css";
@@ -251,11 +254,12 @@
 		render(builder, root);
 		return builder.toString();
 	}
 
 	private static void render(StringBuilder builder, TraceNode node) {
-		String start = node.getDesc().isEmpty() ? createJsonTraceNode(node) : createJsonDescTraceNode(node);
+		String start = STACKTRACE_UNCLASSIFIABLE_FRAME.equals(node.getName()) ? createJsonTraceNode(node)
+				: createJsonDescTraceNode(node);
 		builder.append(start);
 		for (int i = 0; i < node.getChildren().size(); i++) {
 			render(builder, node.getChildren().get(i));
 			if (i < node.getChildren().size() - 1) {
 				builder.append(",");
@@ -269,11 +273,11 @@
 				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("v", String.valueOf(node.getValue())));
 	}
 
 	private static String createJsonDescTraceNode(TraceNode node) {
 		return String.format("{%s,%s,%s,%s, \"c\": [ ", toJSonKeyValue("n", node.getName()),
-				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("d", node.getDesc()),
+				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("d", Flameview_UNCLASSIFIABLE_FRAME_DESC),
 				toJSonKeyValue("v", String.valueOf(node.getValue())));
 	}
 
 	private static String toJSonKeyValue(String key, String value) {
 		return "\"" + key + "\": " + "\"" + value + "\"";
