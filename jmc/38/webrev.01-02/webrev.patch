diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
@@ -49,41 +49,20 @@
 public class TraceTreeUtils {
 	public final static String DEFAULT_ROOT_NAME = "__root";
 	public final static String DEFAULT_ROOT_PACKAGE_NAME = "";
 	public final static FrameSeparator DEFAULT_FRAME_SEPARATOR = new FrameSeparator(FrameCategorization.METHOD, false);
 
-	private static class TraceNodeFactory {
-
-		private static TraceNode getRootTraceNode(String rootName, Fork rootFork) {
-			return new TraceNode(rootName == null ? DEFAULT_ROOT_NAME : rootName, rootFork.getItemsInFork(),
-					DEFAULT_ROOT_PACKAGE_NAME);
-		}
-
-		private static TraceNode getTraceNodeByStacktraceFrame(StacktraceFrame sFrame) {
-			IMCFrame frame = sFrame.getFrame();
-			IMCMethod method = frame.getMethod();
-			String packageName = FormatToolkit.getPackage(method.getType().getPackage());
-			if (frame == StacktraceModel.UNKNOWN_FRAME) {
-				return new TraceNode(Messages.getString(Messages.STACKTRACE_UNCLASSIFIABLE_FRAME),
-						sFrame.getItemCount(), packageName);
-			} else {
-				String name = FormatToolkit.getHumanReadable(method, false, false, true, false, true, false);
-				return new TraceNode(name, sFrame.getItemCount(), packageName);
-			}
-		}
-	}
-
 	/**
 	 * Traces a TraceTree from a {@link StacktraceModel}.
 	 *
 	 * @param model
 	 *            the model to trace the tree from.
 	 * @return the root.
 	 */
 	public static TraceNode createTree(StacktraceModel model, String rootName) {
 		Fork rootFork = model.getRootFork();
-		TraceNode root = TraceNodeFactory.getRootTraceNode(rootName, rootFork);
+		TraceNode root = getRootTraceNode(rootName, rootFork);
 		for (Branch branch : rootFork.getBranches()) {
 			addBranch(root, branch);
 		}
 		return root;
 	}
@@ -100,14 +79,14 @@
 		return createTree(new StacktraceModel(threadRootAtTop, frameSeparator, items), rootName);
 	}
 
 	private static void addBranch(TraceNode root, Branch branch) {
 		StacktraceFrame firstFrame = branch.getFirstFrame();
-		TraceNode currentNode = TraceNodeFactory.getTraceNodeByStacktraceFrame(firstFrame);
+		TraceNode currentNode = getTraceNodeByStacktraceFrame(firstFrame);
 		root.addChild(currentNode);
 		for (StacktraceFrame frame : branch.getTailFrames()) {
-			TraceNode newNode = TraceNodeFactory.getTraceNodeByStacktraceFrame(frame);
+			TraceNode newNode = getTraceNodeByStacktraceFrame(frame);
 			currentNode.addChild(newNode);
 			currentNode = newNode;
 		}
 		addFork(currentNode, branch.getEndFork());
 	}
@@ -138,6 +117,24 @@
 		for (int i = 0; i < indentation; i++) {
 			builder.append("   ");
 		}
 		return builder.toString();
 	}
+
+	private static TraceNode getRootTraceNode(String rootName, Fork rootFork) {
+		return new TraceNode(rootName == null ? DEFAULT_ROOT_NAME : rootName, rootFork.getItemsInFork(),
+				DEFAULT_ROOT_PACKAGE_NAME);
+	}
+
+	private static TraceNode getTraceNodeByStacktraceFrame(StacktraceFrame sFrame) {
+		IMCFrame frame = sFrame.getFrame();
+		IMCMethod method = frame.getMethod();
+		String packageName = FormatToolkit.getPackage(method.getType().getPackage());
+		if (frame == StacktraceModel.UNKNOWN_FRAME) {
+			return new TraceNode(Messages.getString(Messages.STACKTRACE_UNCLASSIFIABLE_FRAME), sFrame.getItemCount(),
+					packageName);
+		} else {
+			String name = FormatToolkit.getHumanReadable(method, false, false, true, false, true, false);
+			return new TraceNode(name, sFrame.getItemCount(), packageName);
+		}
+	}
 }
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -75,12 +75,12 @@
 import org.openjdk.jmc.ui.CoreImages;
 import org.openjdk.jmc.ui.common.util.AdapterUtil;
 import org.openjdk.jmc.ui.handlers.MCContextMenuManager;
 import org.openjdk.jmc.ui.misc.DisplayToolkit;
 
-import static org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages.Flameview_UNCLASSIFIABLE_FRAME_DESC;
 import static org.openjdk.jmc.flightrecorder.stacktrace.messages.internal.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;
+import static org.openjdk.jmc.flightrecorder.stacktrace.messages.internal.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME_DESC;
 
 public class FlameGraphView extends ViewPart implements ISelectionListener {
 	private static final String HTML_PAGE;
 	static {
 		// from: https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.css
@@ -273,11 +273,11 @@
 				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("v", String.valueOf(node.getValue())));
 	}
 
 	private static String createJsonDescTraceNode(TraceNode node) {
 		return String.format("{%s,%s,%s,%s, \"c\": [ ", toJSonKeyValue("n", node.getName()),
-				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("d", Flameview_UNCLASSIFIABLE_FRAME_DESC),
+				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("d", STACKTRACE_UNCLASSIFIABLE_FRAME_DESC),
 				toJSonKeyValue("v", String.valueOf(node.getValue())));
 	}
 
 	private static String toJSonKeyValue(String key, String value) {
 		return "\"" + key + "\": " + "\"" + value + "\"";
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties b/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties
@@ -609,7 +609,6 @@
 MemoryLeakPage_RELEVANCE_COLUMN_HEADER=Relevance
 # {0} is a string describing the live object, it's customisable by the user but looks like a java type, {1} is a number
 MemoryLeakPage_STEPS_SKIPPED={0} {1} skipped steps from parent
 MethodProfilingPage_CLASS_HISTOGRAM_SELECTION=Method Profiling Class Histogram Selection
 MethodProfilingPage_PACKAGE_HISTOGRAM_SELECTION=Method Profiling Package Histogram Selection
-MethodProfilingPage_PAGE_NAME=Method Profiling
-Flameview_UNCLASSIFIABLE_FRAME_DESC=Unclassified means the stacktrace reached the stackdepth limit
+MethodProfilingPage_PAGE_NAME=Method Profiling
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/Messages.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/Messages.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/Messages.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/Messages.java
@@ -44,10 +44,11 @@
 	public static final String STACKTRACE_CLASS = "STACKTRACE_CLASS"; //$NON-NLS-1$
 	public static final String STACKTRACE_LINE_NUMBER = "STACKTRACE_LINE_NUMBER"; //$NON-NLS-1$
 	public static final String STACKTRACE_METHOD = "STACKTRACE_METHOD"; //$NON-NLS-1$
 	public static final String STACKTRACE_PACKAGE = "STACKTRACE_PACKAGE"; //$NON-NLS-1$
 	public static final String STACKTRACE_UNCLASSIFIABLE_FRAME = "STACKTRACE_UNCLASSIFIABLE_FRAME"; //$NON-NLS-1$
+	public static final String STACKTRACE_UNCLASSIFIABLE_FRAME_DESC = "STACKTRACE_UNCLASSIFIABLE_FRAME_DESC"; //$NON-NLS-1$
 
 	private Messages() {
 	}
 
 	public static String getString(String key) {
diff a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/messages.properties b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/messages.properties
--- a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/messages.properties
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/messages.properties
@@ -34,5 +34,6 @@
 STACKTRACE_CLASS=Class
 STACKTRACE_LINE_NUMBER=Line Number
 STACKTRACE_METHOD=Method
 STACKTRACE_PACKAGE=Package
 STACKTRACE_UNCLASSIFIABLE_FRAME=~ UNCLASSIFIABLE ~
+STACKTRACE_UNCLASSIFIABLE_FRAME_DESC=Unclassified means the stacktrace reached the stackdepth limit
