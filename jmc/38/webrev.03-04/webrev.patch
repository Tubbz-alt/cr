diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -79,10 +79,13 @@
 
 import static org.openjdk.jmc.flightrecorder.stacktrace.messages.internal.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;
 import static org.openjdk.jmc.flightrecorder.stacktrace.messages.internal.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME_DESC;
 
 public class FlameGraphView extends ViewPart implements ISelectionListener {
+	private static final String UNCLASSIFIABLE_FRAME = getStacktraceInternalMessage(STACKTRACE_UNCLASSIFIABLE_FRAME);
+	private static final String UNCLASSIFIABLE_FRAME_DESC = getStacktraceInternalMessage(
+			STACKTRACE_UNCLASSIFIABLE_FRAME_DESC);
 	private static final String HTML_PAGE;
 	static {
 		// from: https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.css
 		String cssD3Flamegraph = "jslibs/d3-flamegraph.css";
 		// from: https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js
@@ -254,12 +257,12 @@
 		render(builder, root);
 		return builder.toString();
 	}
 
 	private static void render(StringBuilder builder, TraceNode node) {
-		String start = STACKTRACE_UNCLASSIFIABLE_FRAME.equals(node.getName()) ? createJsonTraceNode(node)
-				: createJsonDescTraceNode(node);
+		String start = UNCLASSIFIABLE_FRAME.equals(node.getName()) ? createJsonDescTraceNode(node)
+				: createJsonTraceNode(node);
 		builder.append(start);
 		for (int i = 0; i < node.getChildren().size(); i++) {
 			render(builder, node.getChildren().get(i));
 			if (i < node.getChildren().size() - 1) {
 				builder.append(",");
@@ -273,11 +276,11 @@
 				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("v", String.valueOf(node.getValue())));
 	}
 
 	private static String createJsonDescTraceNode(TraceNode node) {
 		return String.format("{%s,%s,%s,%s, \"c\": [ ", toJSonKeyValue("n", node.getName()),
-				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("d", STACKTRACE_UNCLASSIFIABLE_FRAME_DESC),
+				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("d", UNCLASSIFIABLE_FRAME_DESC),
 				toJSonKeyValue("v", String.valueOf(node.getValue())));
 	}
 
 	private static String toJSonKeyValue(String key, String value) {
 		return "\"" + key + "\": " + "\"" + value + "\"";
@@ -298,6 +301,10 @@
 			FlightRecorderUI.getDefault().getLogger().log(Level.WARNING,
 					MessageFormat.format("Could not load script \"{0}\",\"{1}\"", fileName, e.getMessage())); //$NON-NLS-1$
 			return "";
 		}
 	}
+
+	private static String getStacktraceInternalMessage(String key) {
+		return org.openjdk.jmc.flightrecorder.stacktrace.messages.internal.Messages.getString(key);
+	}
 }
diff a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/messages_ja.properties b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/messages_ja.properties
--- a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/messages_ja.properties
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/messages_ja.properties
@@ -34,5 +34,6 @@
 STACKTRACE_CLASS=\u30AF\u30E9\u30B9
 STACKTRACE_LINE_NUMBER=\u884C\u756A\u53F7
 STACKTRACE_METHOD=\u30E1\u30BD\u30C3\u30C9
 STACKTRACE_PACKAGE=\u30D1\u30C3\u30B1\u30FC\u30B8
 STACKTRACE_UNCLASSIFIABLE_FRAME=~ UNCLASSIFIABLE ~
+STACKTRACE_UNCLASSIFIABLE_FRAME_DESC=Unclassified means the stacktrace reached the stackdepth limit
diff a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/messages_zh_CN.properties b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/messages_zh_CN.properties
--- a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/messages_zh_CN.properties
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/stacktrace/messages/internal/messages_zh_CN.properties
@@ -34,5 +34,6 @@
 STACKTRACE_CLASS=\u7C7B
 STACKTRACE_LINE_NUMBER=\u884C\u53F7
 STACKTRACE_METHOD=\u65B9\u6CD5
 STACKTRACE_PACKAGE=\u5305
 STACKTRACE_UNCLASSIFIABLE_FRAME=~ UNCLASSIFIABLE ~
+STACKTRACE_UNCLASSIFIABLE_FRAME_DESC=Unclassified means the stacktrace reached the stackdepth limit
