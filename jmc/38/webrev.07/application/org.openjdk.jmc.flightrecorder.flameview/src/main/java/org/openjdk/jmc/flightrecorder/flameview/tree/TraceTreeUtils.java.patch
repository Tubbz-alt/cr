diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
@@ -41,10 +41,11 @@
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Branch;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Fork;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFrame;
+import org.openjdk.jmc.flightrecorder.stacktrace.messages.internal.Messages;
 
 public class TraceTreeUtils {
 	public final static String DEFAULT_ROOT_NAME = "__root";
 	public final static String DEFAULT_ROOT_PACKAGE_NAME = "";
 	public final static FrameSeparator DEFAULT_FRAME_SEPARATOR = new FrameSeparator(FrameCategorization.METHOD, false);
@@ -56,12 +57,11 @@
 	 *            the model to trace the tree from.
 	 * @return the root.
 	 */
 	public static TraceNode createTree(StacktraceModel model, String rootName) {
 		Fork rootFork = model.getRootFork();
-		TraceNode root = new TraceNode(rootName == null ? DEFAULT_ROOT_NAME : rootName, rootFork.getItemsInFork(),
-				DEFAULT_ROOT_PACKAGE_NAME);
+		TraceNode root = getRootTraceNode(rootName, rootFork);
 		for (Branch branch : rootFork.getBranches()) {
 			addBranch(root, branch);
 		}
 		return root;
 	}
@@ -78,15 +78,14 @@
 		return createTree(new StacktraceModel(threadRootAtTop, frameSeparator, items), rootName);
 	}
 
 	private static void addBranch(TraceNode root, Branch branch) {
 		StacktraceFrame firstFrame = branch.getFirstFrame();
-		TraceNode currentNode = new TraceNode(format(firstFrame), firstFrame.getItemCount(),
-				formatPackageName(firstFrame));
+		TraceNode currentNode = getTraceNodeByStacktraceFrame(firstFrame);
 		root.addChild(currentNode);
 		for (StacktraceFrame frame : branch.getTailFrames()) {
-			TraceNode newNode = new TraceNode(format(frame), frame.getItemCount(), formatPackageName(frame));
+			TraceNode newNode = getTraceNodeByStacktraceFrame(frame);
 			currentNode.addChild(newNode);
 			currentNode = newNode;
 		}
 		addFork(currentNode, branch.getEndFork());
 	}
@@ -95,22 +94,10 @@
 		for (Branch branch : fork.getBranches()) {
 			addBranch(node, branch);
 		}
 	}
 
-	private static String format(StacktraceFrame sFrame) {
-		IMCFrame frame = sFrame.getFrame();
-		IMCMethod method = frame.getMethod();
-		return FormatToolkit.getHumanReadable(method, false, false, true, false, true, false);
-	}
-
-	private static String formatPackageName(StacktraceFrame sFrame) {
-		IMCFrame frame = sFrame.getFrame();
-		IMCMethod method = frame.getMethod();
-		return FormatToolkit.getPackage(method.getType().getPackage());
-	}
-
 	public static String printTree(TraceNode node) {
 		StringBuilder builder = new StringBuilder();
 		builder.append("=== Tree Printout ===");
 		builder.append(System.lineSeparator());
 		printTree(builder, 0, node);
@@ -129,6 +116,24 @@
 		for (int i = 0; i < indentation; i++) {
 			builder.append("   ");
 		}
 		return builder.toString();
 	}
+
+	private static TraceNode getRootTraceNode(String rootName, Fork rootFork) {
+		return new TraceNode(rootName == null ? DEFAULT_ROOT_NAME : rootName, rootFork.getItemsInFork(),
+				DEFAULT_ROOT_PACKAGE_NAME);
+	}
+
+	private static TraceNode getTraceNodeByStacktraceFrame(StacktraceFrame sFrame) {
+		IMCFrame frame = sFrame.getFrame();
+		IMCMethod method = frame.getMethod();
+		String packageName = FormatToolkit.getPackage(method.getType().getPackage());
+		if (frame == StacktraceModel.UNKNOWN_FRAME) {
+			return new TraceNode(Messages.getString(Messages.STACKTRACE_UNCLASSIFIABLE_FRAME), sFrame.getItemCount(),
+					packageName);
+		} else {
+			String name = FormatToolkit.getHumanReadable(method, false, false, true, false, true, false);
+			return new TraceNode(name, sFrame.getItemCount(), packageName);
+		}
+	}
 }
