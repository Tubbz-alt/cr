diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
@@ -38,16 +38,18 @@
 
 public class TraceNode {
 	private final int value;
 	private final String name;
 	private final String packageName;
+	private final String desc;
 	private final List<TraceNode> children = new ArrayList<>();
 
-	public TraceNode(String name, int value, String packageName) {
+	public TraceNode(String name, int value, String packageName, String desc) {
 		this.name = name;
 		this.value = value;
 		this.packageName = packageName;
+		this.desc = desc;
 	}
 
 	public int getValue() {
 		return value;
 	}
@@ -58,10 +60,14 @@
 
 	public String getPackageName() {
 		return packageName;
 	}
 
+	public String getDesc() {
+		return desc;
+	}
+
 	public List<TraceNode> getChildren() {
 		return children;
 	}
 
 	public void addChild(TraceNode child) {
@@ -73,10 +79,11 @@
 		final int prime = 31;
 		int result = 1;
 		result = prime * result + ((children == null) ? 0 : children.hashCode());
 		result = prime * result + ((name == null) ? 0 : name.hashCode());
 		result = prime * result + ((packageName == null) ? 0 : packageName.hashCode());
+		result = prime * result + ((desc == null) ? 0 : desc.hashCode());
 		result = prime * result + value;
 		return result;
 	}
 
 	@Override
@@ -102,15 +109,21 @@
 			if (other.packageName != null) {
 				return false;
 			}
 		} else if (!packageName.equals(other.packageName))
 			return false;
+		if (desc == null) {
+			if (other.desc != null) {
+				return false;
+			}
+		} else if (!desc.equals(other.desc))
+			return false;
 		if (value != other.value)
 			return false;
 		return true;
 	}
 
 	public String toString() {
-		return "TraceNode [name: " + name + ", value: " + value + ", packageName: " + packageName + ", children: "
-				+ children.size() + "]";
+		return "TraceNode [name: " + name + ", value: " + value + ", packageName: " + packageName + ", desc: " + desc
+				+ ", children: " + children.size() + "]";
 	}
 }
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
@@ -32,36 +32,62 @@
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.flightrecorder.flameview.tree;
 
 import org.openjdk.jmc.common.IMCFrame;
+
 import org.openjdk.jmc.common.IMCMethod;
 import org.openjdk.jmc.common.item.IItemCollection;
 import org.openjdk.jmc.common.util.FormatToolkit;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Branch;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Fork;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFrame;
+import org.openjdk.jmc.flightrecorder.stacktrace.messages.internal.Messages;
+
+import static org.openjdk.jmc.flightrecorder.stacktrace.messages.internal.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;
+import static org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages.Flameview_UNCLASSIFIABLE_FRAME_DESC;
 
 public class TraceTreeUtils {
 	public final static String DEFAULT_ROOT_NAME = "__root";
 	public final static String DEFAULT_ROOT_PACKAGE_NAME = "";
+	public final static String DEFAULT_TRACE_NODE_DESC = "";
 	public final static FrameSeparator DEFAULT_FRAME_SEPARATOR = new FrameSeparator(FrameCategorization.METHOD, false);
 
+	private static class TraceNodeFactory {
+
+		private static TraceNode getRootTraceNode(String rootName, Fork rootFork) {
+			return new TraceNode(rootName == null ? DEFAULT_ROOT_NAME : rootName, rootFork.getItemsInFork(),
+					DEFAULT_ROOT_PACKAGE_NAME, DEFAULT_TRACE_NODE_DESC);
+		}
+
+		private static TraceNode getTraceNodeByStacktraceFrame(StacktraceFrame sFrame) {
+			IMCFrame frame = sFrame.getFrame();
+			IMCMethod method = frame.getMethod();
+			String packageName = FormatToolkit.getPackage(method.getType().getPackage());
+			if (frame == StacktraceModel.UNKNOWN_FRAME) {
+				return new TraceNode(Messages.getString(STACKTRACE_UNCLASSIFIABLE_FRAME), sFrame.getItemCount(),
+						packageName, Flameview_UNCLASSIFIABLE_FRAME_DESC);
+			} else {
+				String name = FormatToolkit.getHumanReadable(method, false, false, true, false, true, false);
+				return new TraceNode(name, sFrame.getItemCount(), packageName, DEFAULT_TRACE_NODE_DESC);
+			}
+		}
+	}
+
 	/**
 	 * Traces a TraceTree from a {@link StacktraceModel}.
 	 *
 	 * @param model
 	 *            the model to trace the tree from.
 	 * @return the root.
 	 */
 	public static TraceNode createTree(StacktraceModel model, String rootName) {
 		Fork rootFork = model.getRootFork();
-		TraceNode root = new TraceNode(rootName == null ? DEFAULT_ROOT_NAME : rootName, rootFork.getItemsInFork(),
-				DEFAULT_ROOT_PACKAGE_NAME);
+		TraceNode root = TraceNodeFactory.getRootTraceNode(rootName, rootFork);
 		for (Branch branch : rootFork.getBranches()) {
 			addBranch(root, branch);
 		}
 		return root;
 	}
@@ -78,15 +104,14 @@
 		return createTree(new StacktraceModel(threadRootAtTop, frameSeparator, items), rootName);
 	}
 
 	private static void addBranch(TraceNode root, Branch branch) {
 		StacktraceFrame firstFrame = branch.getFirstFrame();
-		TraceNode currentNode = new TraceNode(format(firstFrame), firstFrame.getItemCount(),
-				formatPackageName(firstFrame));
+		TraceNode currentNode = TraceNodeFactory.getTraceNodeByStacktraceFrame(firstFrame);
 		root.addChild(currentNode);
 		for (StacktraceFrame frame : branch.getTailFrames()) {
-			TraceNode newNode = new TraceNode(format(frame), frame.getItemCount(), formatPackageName(frame));
+			TraceNode newNode = TraceNodeFactory.getTraceNodeByStacktraceFrame(frame);
 			currentNode.addChild(newNode);
 			currentNode = newNode;
 		}
 		addFork(currentNode, branch.getEndFork());
 	}
@@ -95,22 +120,10 @@
 		for (Branch branch : fork.getBranches()) {
 			addBranch(node, branch);
 		}
 	}
 
-	private static String format(StacktraceFrame sFrame) {
-		IMCFrame frame = sFrame.getFrame();
-		IMCMethod method = frame.getMethod();
-		return FormatToolkit.getHumanReadable(method, false, false, true, false, true, false);
-	}
-
-	private static String formatPackageName(StacktraceFrame sFrame) {
-		IMCFrame frame = sFrame.getFrame();
-		IMCMethod method = frame.getMethod();
-		return FormatToolkit.getPackage(method.getType().getPackage());
-	}
-
 	public static String printTree(TraceNode node) {
 		StringBuilder builder = new StringBuilder();
 		builder.append("=== Tree Printout ===");
 		builder.append(System.lineSeparator());
 		printTree(builder, 0, node);
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -251,22 +251,32 @@
 		render(builder, root);
 		return builder.toString();
 	}
 
 	private static void render(StringBuilder builder, TraceNode node) {
-		String start = String.format("{%s,%s,%s, \"c\": [ ", toJSonKeyValue("n", node.getName()),
-				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("v", String.valueOf(node.getValue())));
+		String start = node.getDesc().isEmpty() ? createJsonTraceNode(node) : createJsonDescTraceNode(node);
 		builder.append(start);
 		for (int i = 0; i < node.getChildren().size(); i++) {
 			render(builder, node.getChildren().get(i));
 			if (i < node.getChildren().size() - 1) {
 				builder.append(",");
 			}
 		}
 		builder.append("]}");
 	}
 
+	private static String createJsonTraceNode(TraceNode node) {
+		return String.format("{%s,%s,%s, \"c\": [ ", toJSonKeyValue("n", node.getName()),
+				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("v", String.valueOf(node.getValue())));
+	}
+
+	private static String createJsonDescTraceNode(TraceNode node) {
+		return String.format("{%s,%s,%s,%s, \"c\": [ ", toJSonKeyValue("n", node.getName()),
+				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("d", node.getDesc()),
+				toJSonKeyValue("v", String.valueOf(node.getValue())));
+	}
+
 	private static String toJSonKeyValue(String key, String value) {
 		return "\"" + key + "\": " + "\"" + value + "\"";
 	}
 
 	private static String loadLibraries(String ... libs) {
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/jsjmclibs/flameviewColoring.js b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/jsjmclibs/flameviewColoring.js
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/jsjmclibs/flameviewColoring.js
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/jsjmclibs/flameviewColoring.js
@@ -41,10 +41,11 @@
         hash = hash & hash;
     }
     return hash;
 };
 
+const htmlTagBr = "\u003Cbr\u002F\u003E";
 const rootPackageColor = "darkred";
 const invalidPackageColor = "snow";
 const packageJavaColorLightGray = "lightgray";
 const packageComSunAndJdkColorDarkGray = "darkgray";
 const packageSunDarkColorGray = "gray";
@@ -118,7 +119,14 @@
 const colorCell = function (d) {
     return colorByPackage(d.data.p);
 };
 
 const adjustTip = function (d) {
-	return d.data.n + "\u003Cbr\u002F\u003Epackage: " + d.data.p + "\u003Cbr\u002F\u003Esamples: " + d.data.v;
+	var tipMessage = d.data.n + htmlTagBr;
+	if( d.data.d !== undefined) {
+		tipMessage += "description: " + d.data.d + htmlTagBr;
+	} else {
+		tipMessage +=  "package: " + d.data.p + htmlTagBr;
+	}
+	tipMessage += "samples: " + d.data.v;
+	return tipMessage;
 };
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/messages/internal/Messages.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/messages/internal/Messages.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/messages/internal/Messages.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/messages/internal/Messages.java
@@ -521,10 +521,11 @@
 	public static String VMOperationPage_DURATION_SELECTION;
 	public static String VMOperationPage_LOG_SELECTION;
 	public static String VMOperationPage_PAGE_NAME;
 	public static String VMOperationPage_ROW_VM_OPERATIONS;
 	public static String VMOperationPage_TIMELINE_SELECTION;
+	public static String Flameview_UNCLASSIFIABLE_FRAME_DESC;
 
 	static {
 		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
 	}
 
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties b/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties
@@ -610,5 +610,6 @@
 # {0} is a string describing the live object, it's customisable by the user but looks like a java type, {1} is a number
 MemoryLeakPage_STEPS_SKIPPED={0} {1} skipped steps from parent
 MethodProfilingPage_CLASS_HISTOGRAM_SELECTION=Method Profiling Class Histogram Selection
 MethodProfilingPage_PACKAGE_HISTOGRAM_SELECTION=Method Profiling Package Histogram Selection
 MethodProfilingPage_PAGE_NAME=Method Profiling
+Flameview_UNCLASSIFIABLE_FRAME_DESC=Unclassified means the stacktrace reached the stackdepth limit
diff a/core/org.openjdk.jmc.flightrecorder/META-INF/MANIFEST.MF b/core/org.openjdk.jmc.flightrecorder/META-INF/MANIFEST.MF
--- a/core/org.openjdk.jmc.flightrecorder/META-INF/MANIFEST.MF
+++ b/core/org.openjdk.jmc.flightrecorder/META-INF/MANIFEST.MF
@@ -11,10 +11,11 @@
  org.openjdk.jmc.flightrecorder.jdk,
  org.openjdk.jmc.flightrecorder.memleak,
  org.openjdk.jmc.flightrecorder.parser,
  org.openjdk.jmc.flightrecorder.parser.filter,
  org.openjdk.jmc.flightrecorder.stacktrace,
+ org.openjdk.jmc.flightrecorder.stacktrace.messages.internal,
  org.openjdk.jmc.flightrecorder.util
 Require-Bundle: org.openjdk.jmc.common;visibility:=reexport
 Eclipse-BuddyPolicy: app
 Eclipse-ExtensibleAPI: true
 Automatic-Module-Name: org.openjdk.jmc.flightrecorder
