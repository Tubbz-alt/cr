diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
@@ -93,15 +93,12 @@
 import static org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs.VM_INFO;
 
 import java.text.MessageFormat;
 
 import org.openjdk.jmc.common.item.Aggregators;
-import org.openjdk.jmc.common.item.IAccessorFactory;
 import org.openjdk.jmc.common.item.IAggregator;
 import org.openjdk.jmc.common.item.IAttribute;
-import org.openjdk.jmc.common.item.IMemberAccessor;
-import org.openjdk.jmc.common.item.IType;
 import org.openjdk.jmc.common.item.ItemFilters;
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
 import org.openjdk.jmc.flightrecorder.jdk.messages.internal.Messages;
@@ -358,22 +355,11 @@
 	public static final IAggregator<IQuantity, ?> ITEM_COUNT = Aggregators
 			.count(Messages.getString(Messages.AGGR_ITEM_COUNT), Messages.getString(Messages.AGGR_ITEM_COUNT_DESC));
 
 	public static final IAggregator<IQuantity, ?> ALLOCATION_TOTAL = Aggregators.sum(
 			Messages.getString(Messages.AGGR_ALLOCATION_TOTAL), Messages.getString(Messages.AGGR_ALLOCATION_TOTAL_DESC),
-			UnitLookup.MEMORY, new IAccessorFactory<IQuantity>() {
-
-				@Override
-				public <T> IMemberAccessor<? extends IQuantity, T> getAccessor(IType<T> type) {
-					if (type.getIdentifier().equals(JdkTypeIDs.ALLOC_INSIDE_TLAB)) {
-						return JdkAttributes.TLAB_SIZE.getAccessor(type);
-					} else if (type.getIdentifier().equals(JdkTypeIDs.ALLOC_OUTSIDE_TLAB)) {
-						return JdkAttributes.ALLOCATION_SIZE.getAccessor(type);
-					}
-					return null;
-				}
-			});
+			UnitLookup.MEMORY, JdkAttributes.TOTAL_ALLOCATION_SIZE);
 	public static final IAggregator<IQuantity, ?> TOTAL_IO_TIME = Aggregators.filter(
 			Aggregators.sum(Messages.getString(Messages.AGGR_TOTAL_IO_TIME),
 					Messages.getString(Messages.AGGR_TOTAL_IO_TIME_DESC), JfrAttributes.DURATION),
 			JdkFilters.FILE_OR_SOCKET_IO);
 	public static final IAggregator<IQuantity, ?> MAX_IO_TIME = Aggregators.filter(
