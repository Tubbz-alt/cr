diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java
@@ -67,19 +67,19 @@
  * conversion. Looks at top frames and searches for java.lang.BoxType.valueOf.
  */
 // FIXME: Rename class (and message constants) from autoboxing to something more generic?
 public class AutoBoxingRule extends AbstractRule {
 
-	private static final String VALUE_OF_METHOD_NAME = "valueOf";
-	private static final String SHORT = "java.lang.Short";
-	private static final String LONG = "java.lang.Long";
-	private static final String INTEGER = "java.lang.Integer";
-	private static final String FLOAT = "java.lang.Float";
-	private static final String DOUBLE = "java.lang.Double";
-	private static final String CHARACTER = "java.lang.Character";
-	private static final String BYTE = "java.lang.Byte";
-	private static final String BOOLEAN = "java.lang.Boolean";
+	private static final String VALUE_OF_METHOD_NAME = "valueOf"; //$NON-NLS-1$
+	private static final String SHORT = "java.lang.Short"; //$NON-NLS-1$
+	private static final String LONG = "java.lang.Long"; //$NON-NLS-1$
+	private static final String INTEGER = "java.lang.Integer"; //$NON-NLS-1$
+	private static final String FLOAT = "java.lang.Float"; //$NON-NLS-1$
+	private static final String DOUBLE = "java.lang.Double"; //$NON-NLS-1$
+	private static final String CHARACTER = "java.lang.Character"; //$NON-NLS-1$
+	private static final String BYTE = "java.lang.Byte"; //$NON-NLS-1$
+	private static final String BOOLEAN = "java.lang.Boolean"; //$NON-NLS-1$
 
 	private static final IPredicate<IMCMethod> IS_AUTOBOXED_PREDICATE = new IPredicate<IMCMethod>() {
 		@Override
 		public boolean evaluate(IMCMethod method) {
 			String type = method.getType().getFullName();
@@ -140,18 +140,18 @@
 		StacktraceModel model = new StacktraceModel(false, sep, allocationItems);
 		Map<IMCType, IQuantity> allocationSizeByType = new HashMap<>();
 		IQuantity sizeOfAllBoxedAllocations = UnitLookup.BYTE.quantity(0);
 		IQuantity largestAllocatedByType = UnitLookup.BYTE.quantity(0);
 		IMCType largestAllocatedType = null;
-		String secondFrameFromMostAllocated = "";
+		String secondFrameFromMostAllocated = ""; //$NON-NLS-1$
 		for (StacktraceFrame stacktraceFrame : model.getRootFork().getFirstFrames()) {
 			IMCMethod method = stacktraceFrame.getFrame().getMethod();
 			if (IS_AUTOBOXED_PREDICATE.evaluate(method)) {
 				SimpleArray<IItem> itemArray = stacktraceFrame.getItems();
 				IQuantity total = UnitLookup.BYTE.quantity(0);
 				for (IItem item : itemArray) {
-					total = total.add(RulesToolkit.getValue(item, JdkAttributes.TLAB_SIZE));
+					total = total.add(RulesToolkit.getValue(item, JdkAttributes.TOTAL_ALLOCATION_SIZE));
 				}
 				sizeOfAllBoxedAllocations = sizeOfAllBoxedAllocations.add(total);
 				if (total.compareTo(largestAllocatedByType) > 0) {
 					largestAllocatedByType = total;
 					largestAllocatedType = method.getType();
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
@@ -93,15 +93,12 @@
 import static org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs.VM_INFO;
 
 import java.text.MessageFormat;
 
 import org.openjdk.jmc.common.item.Aggregators;
-import org.openjdk.jmc.common.item.IAccessorFactory;
 import org.openjdk.jmc.common.item.IAggregator;
 import org.openjdk.jmc.common.item.IAttribute;
-import org.openjdk.jmc.common.item.IMemberAccessor;
-import org.openjdk.jmc.common.item.IType;
 import org.openjdk.jmc.common.item.ItemFilters;
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
 import org.openjdk.jmc.flightrecorder.jdk.messages.internal.Messages;
@@ -358,22 +355,11 @@
 	public static final IAggregator<IQuantity, ?> ITEM_COUNT = Aggregators
 			.count(Messages.getString(Messages.AGGR_ITEM_COUNT), Messages.getString(Messages.AGGR_ITEM_COUNT_DESC));
 
 	public static final IAggregator<IQuantity, ?> ALLOCATION_TOTAL = Aggregators.sum(
 			Messages.getString(Messages.AGGR_ALLOCATION_TOTAL), Messages.getString(Messages.AGGR_ALLOCATION_TOTAL_DESC),
-			UnitLookup.MEMORY, new IAccessorFactory<IQuantity>() {
-
-				@Override
-				public <T> IMemberAccessor<? extends IQuantity, T> getAccessor(IType<T> type) {
-					if (type.getIdentifier().equals(JdkTypeIDs.ALLOC_INSIDE_TLAB)) {
-						return JdkAttributes.TLAB_SIZE.getAccessor(type);
-					} else if (type.getIdentifier().equals(JdkTypeIDs.ALLOC_OUTSIDE_TLAB)) {
-						return JdkAttributes.ALLOCATION_SIZE.getAccessor(type);
-					}
-					return null;
-				}
-			});
+			UnitLookup.MEMORY, JdkAttributes.TOTAL_ALLOCATION_SIZE);
 	public static final IAggregator<IQuantity, ?> TOTAL_IO_TIME = Aggregators.filter(
 			Aggregators.sum(Messages.getString(Messages.AGGR_TOTAL_IO_TIME),
 					Messages.getString(Messages.AGGR_TOTAL_IO_TIME_DESC), JfrAttributes.DURATION),
 			JdkFilters.FILE_OR_SOCKET_IO);
 	public static final IAggregator<IQuantity, ?> MAX_IO_TIME = Aggregators.filter(
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAttributes.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAttributes.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAttributes.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAttributes.java
@@ -573,10 +573,23 @@
 
 	public static final IAttribute<IQuantity> TLAB_SIZE = attr("tlabSize", Messages.getString(Messages.ATTR_TLAB_SIZE), //$NON-NLS-1$
 			MEMORY);
 	public static final IAttribute<IQuantity> ALLOCATION_SIZE = attr("allocationSize", //$NON-NLS-1$
 			Messages.getString(Messages.ATTR_ALLOCATION_SIZE), MEMORY);
+	public static final IAttribute<IQuantity> TOTAL_ALLOCATION_SIZE = Attribute.canonicalize(
+			new Attribute<IQuantity>("(totalAllocationSize)", Messages.getString(Messages.ATTR_ALLOCATION_TOTAL_SIZE), //$NON-NLS-1$
+					Messages.getString(Messages.ATTR_ALLOCATION_TOTAL_SIZE_DESC), MEMORY) {
+				@Override
+				public <U> IMemberAccessor<IQuantity, U> customAccessor(IType<U> type) {
+					if (type.getIdentifier().equals(JdkTypeIDs.ALLOC_INSIDE_TLAB)) {
+						return JdkAttributes.TLAB_SIZE.getAccessor(type);
+					} else if (type.getIdentifier().equals(JdkTypeIDs.ALLOC_OUTSIDE_TLAB)) {
+						return JdkAttributes.ALLOCATION_SIZE.getAccessor(type);
+					}
+					return null;
+				}
+			});
 	public static final IAttribute<IMCType> ALLOCATION_CLASS = attr("objectClass", //$NON-NLS-1$
 			Messages.getString(Messages.ATTR_ALLOCATION_CLASS), Messages.getString(Messages.ATTR_ALLOCATION_CLASS_DESC),
 			CLASS);
 	public static final IAttribute<IMCType> OBJECT_CLASS = attr("objectClass", //$NON-NLS-1$
 			Messages.getString(Messages.ATTR_OBJECT_CLASS), CLASS);
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/messages/internal/Messages.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/messages/internal/Messages.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/messages/internal/Messages.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/messages/internal/Messages.java
@@ -154,10 +154,12 @@
 	public static final String AGGR_VM_OPERATION_DURATION_DESC = "AGGR_VM_OPERATION_DURATION_DESC"; //$NON-NLS-1$
 	public static final String ATTR_ADAPTORS = "ATTR_ADAPTORS"; //$NON-NLS-1$
 	public static final String ATTR_ALLOCATION_CLASS = "ATTR_ALLOCATION_CLASS"; //$NON-NLS-1$
 	public static final String ATTR_ALLOCATION_CLASS_DESC = "ATTR_ALLOCATION_CLASS_DESC"; //$NON-NLS-1$
 	public static final String ATTR_ALLOCATION_SIZE = "ATTR_ALLOCATION_SIZE"; //$NON-NLS-1$
+	public static final String ATTR_ALLOCATION_TOTAL_SIZE = "ATTR_ALLOCATION_TOTAL_SIZE"; //$NON-NLS-1$
+	public static final String ATTR_ALLOCATION_TOTAL_SIZE_DESC = "ATTR_ALLOCATION_TOTAL_SIZE_DESC"; //$NON-NLS-1$
 	public static final String ATTR_ANONYMOUS_BLOCK_SIZE = "ATTR_ANONYMOUS_BLOCK_SIZE"; //$NON-NLS-1$
 	public static final String ATTR_ANONYMOUS_CHUNK_SIZE = "ATTR_ANONYMOUS_CHUNK_SIZE"; //$NON-NLS-1$
 	public static final String ATTR_ANONYMOUS_CLASS_COUNT = "ATTR_ANONYMOUS_CLASS_COUNT"; //$NON-NLS-1$
 	public static final String ATTR_BASE_ADDRESS = "ATTR_BASE_ADDRESS"; //$NON-NLS-1$
 	public static final String ATTR_BLOCK_SIZE = "ATTR_BLOCK_SIZE"; //$NON-NLS-1$
diff a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages.properties b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages.properties
--- a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages.properties
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages.properties
@@ -76,10 +76,12 @@
 ATTR_IO_HOST_DESC=Hostname for the remote host
 ATTR_IO_PORT=Remote Port
 ATTR_IO_TIMEOUT=Timeout Value
 ATTR_TLAB_SIZE=TLAB Size
 ATTR_ALLOCATION_SIZE=Allocation Size
+ATTR_ALLOCATION_TOTAL_SIZE=Total Allocation
+ATTR_ALLOCATION_TOTAL_SIZE_DESC=Allocation both inside and outside TLABs
 ATTR_ALLOCATION_CLASS=Class
 ATTR_ALLOCATION_CLASS_DESC=Class of Allocated Object
 ATTR_OBJECT_CLASS=Class
 ATTR_COUNT=Count
 ATTR_DUMP_REASON=Dump Reason
