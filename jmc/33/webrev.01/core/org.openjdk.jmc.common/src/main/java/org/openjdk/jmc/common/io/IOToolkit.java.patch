diff a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java
--- a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java
+++ b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java
@@ -169,16 +169,12 @@
 	 * @return {@code true} if the file begins with the magic, {@code false} otherwise
 	 * @throws IOException
 	 *             if an error occurred when trying to read from the file
 	 */
 	public static boolean hasMagic(File file, int[] magic) throws IOException {
-		FileInputStream fis = null;
-		try {
-			fis = new FileInputStream(file);
+		try (FileInputStream fis = new FileInputStream(file)) {
 			return hasMagic(fis, magic);
-		} finally {
-			closeSilently(fis);
 		}
 	}
 
 	/**
 	 * Checks if an input stream begins with a specified array of bytes. The input stream will be
@@ -258,21 +254,17 @@
 	 *         {@link #openUncompressedStream(File)}, {@code false} otherwise
 	 * @throws IOException
 	 *             if an error occurred when trying to read from the file
 	 */
 	public static boolean isCompressedFile(File file) throws IOException {
-		BufferedInputStream is = null;
-		try {
-			is = new BufferedInputStream(new FileInputStream(file), MAGIC_ZIP.length + 1);
+		try (BufferedInputStream is = new BufferedInputStream(new FileInputStream(file), MAGIC_ZIP.length + 1)) {
 			is.mark(MAGIC_ZIP.length + 1);
 			if (hasMagic(is, MAGIC_GZ)) {
 				return true;
 			}
 			is.reset();
 			return hasMagic(is, MAGIC_ZIP);
-		} finally {
-			closeSilently(is);
 		}
 	}
 
 	/**
 	 * Read lines from a text file.
@@ -283,27 +275,23 @@
 	 * @return a list of strings, one for each line in the file
 	 * @throws IOException
 	 *             on I/O error
 	 */
 	public static List<String> loadFromFile(File file) throws IOException {
-		FileReader fr = new FileReader(file);
-		try {
+		try (FileReader fr = new FileReader(file)) {
 			return loadFromReader(fr);
-		} catch (IOException e) {
-			throw e;
-		} finally {
-			closeSilently(fr);
 		}
 	}
 
 	private static List<String> loadFromReader(Reader reader) throws IOException {
 		List<String> lines = new ArrayList<>();
-		BufferedReader br = new BufferedReader(reader);
-		while (br.ready()) {
-			lines.add(br.readLine());
+		try (BufferedReader br = new BufferedReader(reader)) {
+			while (br.ready()) {
+				lines.add(br.readLine());
+			}
+			return lines;
 		}
-		return lines;
 	}
 
 	/**
 	 * Write lines to a text file. If the file already exists, it will be overwritten.
 	 *
@@ -314,18 +302,14 @@
 	 *            a list of strings that will be written on one line each
 	 * @throws IOException
 	 *             on I/O error
 	 */
 	public static void saveToFile(File file, List<String> lines) throws IOException {
-		PrintWriter pr = null;
-		try {
-			pr = new PrintWriter(new FileWriter(file));
+		try (PrintWriter pr = new PrintWriter(new FileWriter(file))) {
 			for (String line : lines) {
 				pr.println(line);
 			}
-		} finally {
-			closeSilently(pr);
 		}
 	}
 
 	/**
 	 * Read lines from an input stream.
@@ -336,14 +320,13 @@
 	 * @return a list of strings, one for each line in the stream
 	 * @throws IOException
 	 *             on I/O error
 	 */
 	public static List<String> loadFromStream(InputStream is) throws IOException {
-		try {
+		try (BufferedInputStream bis = new BufferedInputStream(is);
+				BufferedReader r = new BufferedReader(new InputStreamReader(bis))) {
 			List<String> lines = new ArrayList<>();
-			BufferedInputStream bis = new BufferedInputStream(is);
-			BufferedReader r = new BufferedReader(new InputStreamReader(bis));
 			while (r.ready()) {
 				lines.add(r.readLine());
 			}
 			return lines;
 		} finally {
@@ -363,18 +346,13 @@
 	 *            overwritten
 	 * @throws IOException
 	 *             on I/O error
 	 */
 	public static void write(InputStream in, File toOutput, boolean append) throws IOException {
-		FileOutputStream fos = new FileOutputStream(toOutput, append);
-		BufferedOutputStream os = null;
-		try {
-			os = new BufferedOutputStream(fos);
+		try (FileOutputStream fos = new FileOutputStream(toOutput, append);
+				BufferedOutputStream os = new BufferedOutputStream(fos)) {
 			copy(in, os);
-		} finally {
-			closeSilently(os);
-			closeSilently(fos);
 		}
 	}
 
 	/**
 	 * Copy all data from an input stream to an output stream.
@@ -435,12 +413,11 @@
 	 * @return MD5 hash string
 	 * @throws IOException
 	 *             if something goes wrong when reading file data
 	 */
 	public static String calculateFileHash(File file) throws IOException {
-		RandomAccessFile raf = new RandomAccessFile(file, "r"); //$NON-NLS-1$
-		try {
+		try (RandomAccessFile raf = new RandomAccessFile(file, "r")) { //$NON-NLS-1$
 			long seek = raf.length() / 10;
 			byte[] buffer = new byte[1024];
 			MessageDigest hash = MessageDigest.getInstance("MD5"); //$NON-NLS-1$
 			int read;
 			while ((read = raf.read(buffer)) > 0) {
@@ -448,10 +425,8 @@
 				raf.seek(raf.getFilePointer() + seek);
 			}
 			return new BigInteger(1, hash.digest()).toString();
 		} catch (NoSuchAlgorithmException e) {
 			throw new RuntimeException(e);
-		} finally {
-			closeSilently(raf);
 		}
 	}
 }
