diff a/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/logging/LoggingToolkit.java b/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/logging/LoggingToolkit.java
--- a/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/logging/LoggingToolkit.java
+++ b/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/logging/LoggingToolkit.java
@@ -102,12 +102,14 @@
 				e.printStackTrace();
 			}
 		} else {
 			try {
 				if (new File(file).exists()) {
-					readConfiguration(new FileInputStream(file));
-					getLogger().log(Level.INFO, "Loaded user specified logging settings from " + file + "."); //$NON-NLS-1$ //$NON-NLS-2$
+					try (FileInputStream fis = new FileInputStream(file)) {
+						readConfiguration(fis);
+						getLogger().log(Level.INFO, "Loaded user specified logging settings from " + file + "."); //$NON-NLS-1$ //$NON-NLS-2$
+					}
 				} else {
 					getLogger().log(Level.WARNING, "Could not find user specified logging settings at " + file + "."); //$NON-NLS-1$ //$NON-NLS-2$
 				}
 			} catch (Exception e) {
 				getLogger().log(Level.WARNING, "Could not initialize user logger", e); //$NON-NLS-1$
@@ -143,17 +145,14 @@
 			IOToolkit.closeSilently(is);
 		}
 	}
 
 	private static InputStream getAsInputStream(Properties props) throws IOException {
-		ByteArrayOutputStream baos = new ByteArrayOutputStream();
-		try {
+		try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
 			props.store(baos, ""); //$NON-NLS-1$
 			String newProps = baos.toString();
 			return new ByteArrayInputStream(newProps.getBytes("UTF-8")); //$NON-NLS-1$
-		} finally {
-			IOToolkit.closeSilently(baos);
 		}
 	}
 
 	private static void createFolders(Properties props) {
 		String loggingFolder = props.getProperty(KEY_FILE_HANDLER_PATTERN);
