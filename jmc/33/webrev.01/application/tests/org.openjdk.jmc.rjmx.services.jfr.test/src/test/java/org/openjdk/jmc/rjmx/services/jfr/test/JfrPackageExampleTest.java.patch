diff a/application/tests/org.openjdk.jmc.rjmx.services.jfr.test/src/test/java/org/openjdk/jmc/rjmx/services/jfr/test/JfrPackageExampleTest.java b/application/tests/org.openjdk.jmc.rjmx.services.jfr.test/src/test/java/org/openjdk/jmc/rjmx/services/jfr/test/JfrPackageExampleTest.java
--- a/application/tests/org.openjdk.jmc.rjmx.services.jfr.test/src/test/java/org/openjdk/jmc/rjmx/services/jfr/test/JfrPackageExampleTest.java
+++ b/application/tests/org.openjdk.jmc.rjmx.services.jfr.test/src/test/java/org/openjdk/jmc/rjmx/services/jfr/test/JfrPackageExampleTest.java
@@ -36,11 +36,10 @@
 
 import java.io.IOException;
 import java.io.InputStream;
 
 import org.junit.Test;
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.common.unit.IConstrainedMap;
 import org.openjdk.jmc.common.unit.IDescribedMap;
 import org.openjdk.jmc.flightrecorder.configuration.events.EventOptionID;
 import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;
 import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;
@@ -63,27 +62,23 @@
 
 	@Test
 	public void testPackageExample1FunctionalityVerbatim() throws Exception {
 		IConnectionDescriptor descriptor = new ConnectionDescriptorBuilder().hostName("localhost").port(0).build();
 		IServerHandle serverHandle = IServerHandle.create(descriptor);
-		IConnectionHandle handle = serverHandle.connect("Get JFR recording info");
-		try {
+		try (IConnectionHandle handle = serverHandle.connect("Get JFR recording info")) {
 			IFlightRecorderService jfr = handle.getServiceOrThrow(IFlightRecorderService.class);
 			for (IRecordingDescriptor desc : jfr.getAvailableRecordings()) {
 				System.out.println(desc.getName());
 			}
-		} finally {
-			IOToolkit.closeSilently(handle);
 		}
 	}
 
 	@Test
 	public void testPackageExample2FunctionalityVerbatim() throws Exception {
 		IConnectionDescriptor descriptor = new ConnectionDescriptorBuilder().hostName("localhost").port(0).build();
 		IServerHandle serverHandle = IServerHandle.create(descriptor);
-		IConnectionHandle handle = serverHandle.connect("Start time bound flight recording");
-		try {
+		try (IConnectionHandle handle = serverHandle.connect("Start time bound flight recording")) {
 			IFlightRecorderService jfr = handle.getServiceOrThrow(IFlightRecorderService.class);
 
 			long duration = 5000;
 			IDescribedMap<EventOptionID> defaultEventOptions = jfr.getDefaultEventOptions();
 			IConstrainedMap<String> recordingOptions = new RecordingOptionsBuilder(jfr).name("MyRecording")
@@ -92,14 +87,13 @@
 			Thread.sleep(duration);
 			while (recording.getState() != IRecordingDescriptor.RecordingState.STOPPED) {
 				Thread.sleep(1000);
 				recording = jfr.getUpdatedRecordingDescription(recording);
 			}
-			InputStream is = jfr.openStream(recording, true);
-			writeStreamToFile(is);
-		} finally {
-			IOToolkit.closeSilently(handle);
+			try (InputStream is = jfr.openStream(recording, true)) {
+				writeStreamToFile(is);
+			}
 		}
 	}
 
 	private void writeStreamToFile(InputStream in) throws IOException {
 		// Just read and count bytes in the test...
