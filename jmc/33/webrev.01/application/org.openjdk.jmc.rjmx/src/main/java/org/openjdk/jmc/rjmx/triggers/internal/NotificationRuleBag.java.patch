diff a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/triggers/internal/NotificationRuleBag.java b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/triggers/internal/NotificationRuleBag.java
--- a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/triggers/internal/NotificationRuleBag.java
+++ b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/triggers/internal/NotificationRuleBag.java
@@ -30,10 +30,11 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.rjmx.triggers.internal;
 
+import java.io.IOException;
 import java.lang.ref.WeakReference;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
@@ -68,15 +69,16 @@
 			}
 		}
 	}
 
 	void deactivate() {
-		IConnectionHandle handle = handleRef.get();
-		for (Entry<TriggerRule, IMRIValueListener> rule : rules.entrySet()) {
-			deactivateRule(rule.getKey(), rule.getValue(), handle);
+		try (IConnectionHandle handle = handleRef.get()) {
+			for (Entry<TriggerRule, IMRIValueListener> rule : rules.entrySet()) {
+				deactivateRule(rule.getKey(), rule.getValue(), handle);
+			}
+		} catch (IOException e) {
 		}
-
 	}
 
 	Collection<TriggerRule> getAllRegisteredRules() {
 		return rules.keySet();
 	}
