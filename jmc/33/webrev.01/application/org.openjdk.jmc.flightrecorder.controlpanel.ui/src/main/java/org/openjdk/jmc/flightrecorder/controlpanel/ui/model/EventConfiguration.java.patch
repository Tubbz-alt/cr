diff a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/EventConfiguration.java b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/EventConfiguration.java
--- a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/EventConfiguration.java
+++ b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/EventConfiguration.java
@@ -110,22 +110,19 @@
 	 */
 	private final IEventConfiguration original;
 
 	public static void validate(InputStream xmlStream, String streamName, SchemaVersion version)
 			throws ParseException, IOException {
-		InputStream schemaStream = version.createSchemaStream();
-		if (schemaStream != null) {
-			try {
+		try (InputStream schemaStream = version.createSchemaStream()) {
+			if (schemaStream != null) {
 				SchemaFactory schemaFactory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema"); //$NON-NLS-1$
 				XMLModel.validate(xmlStream, streamName, schemaFactory.newSchema(new StreamSource(schemaStream)));
-			} catch (SAXException e) {
-				throw new IOException("Trouble parsing schema for version " + version, e); //$NON-NLS-1$
-			} finally {
-				IOToolkit.closeSilently(schemaStream);
+			} else {
+				throw new IOException("Could not locate schema for version " + version); //$NON-NLS-1$
 			}
-		} else {
-			throw new IOException("Could not locate schema for version " + version); //$NON-NLS-1$
+		} catch (SAXException e) {
+			throw new IOException("Trouble parsing schema for version " + version, e); //$NON-NLS-1$
 		}
 	}
 
 	public static IEventConfiguration createEmpty(IConfigurationStorageDelegate delegate, SchemaVersion version) {
 		Map<String, String> attributes = Collections.singletonMap(JFCGrammar.ATTRIBUTE_VERSION.getName(),
@@ -139,11 +136,13 @@
 	public static XMLModel createModel(String xmlText) throws ParseException, IOException {
 		return XMLModel.create(new InputSource(new StringReader(xmlText)), JFCXMLValidator.getValidator());
 	}
 
 	public static XMLModel createModel(File file) throws FileNotFoundException, IOException, ParseException {
-		return createModel(new FileInputStream(file));
+		try (FileInputStream fis = new FileInputStream(file)) {
+			return createModel(fis);
+		}
 	}
 
 	public static XMLModel createModel(InputStream inStream) throws IOException, ParseException {
 		XMLModel model;
 		try {
