diff a/application/org.openjdk.jmc.console.jconsole/src/main/java/org/openjdk/jmc/console/jconsole/JConsolePluginLoader.java b/application/org.openjdk.jmc.console.jconsole/src/main/java/org/openjdk/jmc/console/jconsole/JConsolePluginLoader.java
--- a/application/org.openjdk.jmc.console.jconsole/src/main/java/org/openjdk/jmc/console/jconsole/JConsolePluginLoader.java
+++ b/application/org.openjdk.jmc.console.jconsole/src/main/java/org/openjdk/jmc/console/jconsole/JConsolePluginLoader.java
@@ -90,12 +90,13 @@
 	}
 
 	private static void initPluginService(File file) throws IOException {
 		String[] files = file.list();
 		if (files != null && files.length > 0) {
-			pluginService = ServiceLoader.load(JConsolePlugin.class,
-					new URLClassLoader(getURLs(file), Activator.class.getClassLoader()));
+			try (URLClassLoader loader = new URLClassLoader(getURLs(file), Activator.class.getClassLoader())) {
+				pluginService = ServiceLoader.load(JConsolePlugin.class, loader);
+			}
 		}
 	}
 
 	/**
 	 * Retrieves the URL's to all the directories plus all the jar's in the provided directory path.
diff a/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/TriggerActionStartTimeBoundRecording.java b/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/TriggerActionStartTimeBoundRecording.java
--- a/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/TriggerActionStartTimeBoundRecording.java
+++ b/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/TriggerActionStartTimeBoundRecording.java
@@ -179,15 +179,12 @@
 	}
 
 	private File dumpFile(
 		IProgressMonitor monitor, IFlightRecorderService service, IRecordingDescriptor descriptor, MCFile path)
 			throws IOException, FlightRecorderException {
-		InputStream stream = service.openStream(descriptor, false);
-		try {
+		try (InputStream stream = service.openStream(descriptor, false)) {
 			return IDESupportToolkit.writeToUniqueFile(path, stream, monitor);
-		} finally {
-			IOToolkit.closeSilently(stream);
 		}
 	}
 
 	private void showAlert(File file, TriggerEvent event) {
 		AlertObject ao = new AlertObject(event.getCreationTime(),
diff a/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/WriteAndOpenRecordingJob.java b/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/WriteAndOpenRecordingJob.java
--- a/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/WriteAndOpenRecordingJob.java
+++ b/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/WriteAndOpenRecordingJob.java
@@ -119,13 +119,10 @@
 		return FlightRecorderToolkit.getDescriptorByTimerange(service.getAvailableRecordings(), timerange);
 	}
 
 	private File writeFile(IProgressMonitor monitor, IRecordingDescriptor descriptor, IQuantity duration)
 			throws FlightRecorderException, IOException {
-		InputStream stream = service.openStream(descriptor, duration, false);
-		try {
+		try (InputStream stream = service.openStream(descriptor, duration, false)) {
 			return IDESupportToolkit.writeToUniqueFile(path, stream, monitor);
-		} finally {
-			IOToolkit.closeSilently(stream);
 		}
 	}
 }
diff a/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/tab/TriggerToolkit.java b/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/tab/TriggerToolkit.java
--- a/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/tab/TriggerToolkit.java
+++ b/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/tab/TriggerToolkit.java
@@ -101,15 +101,14 @@
 	 *            the notification model
 	 * @return {@link IStatus} with severity {@link IStatus#OK} if the trigger were loaded
 	 *         successfully
 	 */
 	public static IStatus resetTriggers(NotificationRegistry model) {
-		InputStream stream = null;
-		try {
-			// Load DOM for default triggers
-			stream = NotificationPlugin.class.getResourceAsStream(NotificationPlugin.DEFAULT_TRIGGER_FILE);
-			Document doc = XmlToolkit.loadDocumentFromStream(new BufferedInputStream(stream));
+		// Load DOM for default triggers
+		try (InputStream stream = NotificationPlugin.class.getResourceAsStream(NotificationPlugin.DEFAULT_TRIGGER_FILE);
+				BufferedInputStream bis = new BufferedInputStream(stream)) {
+			Document doc = XmlToolkit.loadDocumentFromStream(bis);
 			Collection<TriggerRule> c = model.getAvailableRules();
 
 			// Remove all rules
 			TriggerRule[] rules = c.toArray(new TriggerRule[c.size()]);
 			for (TriggerRule rule : rules) {
@@ -122,12 +121,10 @@
 			translateStringValues(documentElement, bundle, NotificationPlugin.getDefault().getBundle());
 			model.importFromXML(documentElement);
 		} catch (Exception exc) {
 			return StatusFactory.createErr(NLS.bind(Messages.TriggerToolkit_ERROR_COULD_NOT_READ_DEFAULT_TEMPLATE_FILE,
 					NotificationPlugin.DEFAULT_TRIGGER_FILE), exc, false);
-		} finally {
-			IOToolkit.closeSilently(stream);
 		}
 		return StatusFactory.createOk(Messages.TriggerToolkit_MESSAGE_DEFAULT_TRIGGERS_LOADED);
 	}
 
 	private static void translateStringValues(Element e, ResourceBundle bundle, Bundle plugin) {
diff a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui.configuration/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/configuration/model/xml/XMLModel.java b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui.configuration/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/configuration/model/xml/XMLModel.java
--- a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui.configuration/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/configuration/model/xml/XMLModel.java
+++ b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui.configuration/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/configuration/model/xml/XMLModel.java
@@ -257,13 +257,14 @@
 	 */
 	public void saveToFile(File file) throws IOException {
 		// NOTE: The pretty printer writes that the encoding is UTF-8, so we must make sure it is.
 		// Ensure charset exists before opening file for writing.
 		Charset charset = Charset.forName("UTF-8"); //$NON-NLS-1$
-		Writer osw = new OutputStreamWriter(new FileOutputStream(file), charset);
-		if (writeTo(osw)) {
-			setDirty(false);
+		try (Writer osw = new OutputStreamWriter(new FileOutputStream(file), charset)) {
+			if (writeTo(osw)) {
+				setDirty(false);
+			}
 		}
 	}
 
 	/**
 	 * Writes the model to the given {@link Writer}. Does not change dirtyness, as returned by
@@ -273,19 +274,16 @@
 	 * @param oneLineElements
 	 *            XML tags to output on a single line
 	 * @return true iff the model was successfully written to the {@link Writer}.
 	 */
 	public boolean writeTo(Writer writer) {
-		PrintWriter pw = new PrintWriter(writer);
-		try {
+		try (PrintWriter pw = new PrintWriter(writer)) {
 			PrettyPrinter pp = new PrettyPrinter(pw, m_validator.getElementsTooKeepOnOneLine());
 			pp.print(this);
 			pw.flush();
 			// PrintWriter never throws any exceptions, so this is how we find out if something went wrong.
 			return !pw.checkError();
-		} finally {
-			IOToolkit.closeSilently(pw);
 		}
 	}
 
 	public XMLTagInstance getRoot() {
 		return m_root;
diff a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/DumpAnyRecordingAction.java b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/DumpAnyRecordingAction.java
--- a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/DumpAnyRecordingAction.java
+++ b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/DumpAnyRecordingAction.java
@@ -60,13 +60,12 @@
 		flightRecorder = flightRecorderProvider;
 	}
 
 	@Override
 	public IWizard doCreateWizard() throws Exception {
-		IConnectionHandle handle = null;
-		try {
-			handle = flightRecorder.getServerHandle().connect(Messages.ACTION_DUMP_ANY_RECORDING_LABEL);
+		try (IConnectionHandle handle = flightRecorder.getServerHandle()
+				.connect(Messages.ACTION_DUMP_ANY_RECORDING_LABEL)) {
 			RecordingProvider recording = flightRecorder.getSnapshotRecording(handle);
 			if (recording != null) {
 				flightRecorder.resetWarning();
 				return new OnePageWizard(new DumpRecordingWizardPage(new DumpRecordingWizardModel(recording)));
 			} else {
@@ -75,11 +74,9 @@
 						flightRecorder.getServerHandle().getServerDescriptor().getDisplayName()));
 			}
 		} catch (Exception e) {
 			flightRecorder.setWarning(e.getLocalizedMessage());
 			throw e;
-		} finally {
-			IOToolkit.closeSilently(handle);
 		}
 	}
 
 }
diff a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/EditRecordingAction.java b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/EditRecordingAction.java
--- a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/EditRecordingAction.java
+++ b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/EditRecordingAction.java
@@ -32,11 +32,10 @@
  */
 package org.openjdk.jmc.flightrecorder.controlpanel.ui.actions;
 
 import org.eclipse.jface.wizard.IWizard;
 
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.ControlPanel;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.ImageConstants;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.RecordingProvider;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.messages.internal.Messages;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.wizards.EditRecordingWizard;
@@ -58,17 +57,13 @@
 		this.recording = recording;
 	}
 
 	@Override
 	public IWizard doCreateWizard() throws Exception {
-		IConnectionHandle connection = null;
-		try {
-			connection = recording.getServerHandle().connect(Messages.ACTION_EDIT_RECORDING_LABEL);
+		try (IConnectionHandle connection = recording.getServerHandle().connect(Messages.ACTION_EDIT_RECORDING_LABEL)) {
 			return new EditRecordingWizard(recording,
 					new RecordingWizardModel(connection.getServiceOrThrow(IFlightRecorderService.class),
 							recording.getRecordingDescriptor(), recording.getDumpToFile()));
-		} finally {
-			IOToolkit.closeSilently(connection);
 		}
 	}
 
 }
diff a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/StartRecordingAction.java b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/StartRecordingAction.java
--- a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/StartRecordingAction.java
+++ b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/StartRecordingAction.java
@@ -58,13 +58,11 @@
 		this.recorder = recorder;
 	}
 
 	@Override
 	public IWizard doCreateWizard() throws Exception {
-		IConnectionHandle handle = null;
-		try {
-			handle = recorder.getServerHandle().connect(Messages.ACTION_START_RECORDING_LABEL);
+		try (IConnectionHandle handle = recorder.getServerHandle().connect(Messages.ACTION_START_RECORDING_LABEL)) {
 			IFlightRecorderService flrService = handle.getServiceOrNull(IFlightRecorderService.class);
 			if (flrService == null) {
 				throw new FlightRecorderException(JVMSupportToolkit.getNoFlightRecorderErrorMessage(handle, false));
 			} else if (flrService.isEnabled()
 					|| ControlPanel.askUserForEnable(flrService, Messages.COMMERCIAL_FEATURES_QUESTION)) {
@@ -76,11 +74,9 @@
 				return null;
 			}
 		} catch (Exception e) {
 			recorder.setWarning(e.getLocalizedMessage());
 			throw e;
-		} finally {
-			IOToolkit.closeSilently(handle);
 		}
 	}
 
 }
diff a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/jobs/UpdateRecordingJob.java b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/jobs/UpdateRecordingJob.java
--- a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/jobs/UpdateRecordingJob.java
+++ b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/jobs/UpdateRecordingJob.java
@@ -67,21 +67,17 @@
 		m_recordingSettings = recordingSettings;
 	}
 
 	@Override
 	protected IStatus run(IProgressMonitor monitor) {
-		IConnectionHandle connection = null;
-		try {
-			connection = m_server.connect(getName());
+		try (IConnectionHandle connection = m_server.connect(getName())) {
 			IFlightRecorderService flightRecorderService = connection.getServiceOrThrow(IFlightRecorderService.class);
 			flightRecorderService.updateRecordingOptions(m_recordingDescriptor, m_recordingOptions);
 			flightRecorderService.updateEventOptions(m_recordingDescriptor, m_recordingSettings);
 			return StatusFactory.createOk(Messages.UPDATE_RECORDING_JOB_SUCCESS_MSG);
 		} catch (Exception e) {
 			ControlPanel.getDefault().getLogger().log(Level.WARNING, "Could not update recording", e); //$NON-NLS-1$
 			return StatusFactory.createErr(
 					NLS.bind(Messages.UPDATE_RECORDING_JOB_SERVICE_ERROR_MSG, m_recordingDescriptor.getName()));
-		} finally {
-			IOToolkit.closeSilently(connection);
 		}
 	}
 }
diff a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/EventConfiguration.java b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/EventConfiguration.java
--- a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/EventConfiguration.java
+++ b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/EventConfiguration.java
@@ -110,22 +110,19 @@
 	 */
 	private final IEventConfiguration original;
 
 	public static void validate(InputStream xmlStream, String streamName, SchemaVersion version)
 			throws ParseException, IOException {
-		InputStream schemaStream = version.createSchemaStream();
-		if (schemaStream != null) {
-			try {
+		try (InputStream schemaStream = version.createSchemaStream()) {
+			if (schemaStream != null) {
 				SchemaFactory schemaFactory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema"); //$NON-NLS-1$
 				XMLModel.validate(xmlStream, streamName, schemaFactory.newSchema(new StreamSource(schemaStream)));
-			} catch (SAXException e) {
-				throw new IOException("Trouble parsing schema for version " + version, e); //$NON-NLS-1$
-			} finally {
-				IOToolkit.closeSilently(schemaStream);
+			} else {
+				throw new IOException("Could not locate schema for version " + version); //$NON-NLS-1$
 			}
-		} else {
-			throw new IOException("Could not locate schema for version " + version); //$NON-NLS-1$
+		} catch (SAXException e) {
+			throw new IOException("Trouble parsing schema for version " + version, e); //$NON-NLS-1$
 		}
 	}
 
 	public static IEventConfiguration createEmpty(IConfigurationStorageDelegate delegate, SchemaVersion version) {
 		Map<String, String> attributes = Collections.singletonMap(JFCGrammar.ATTRIBUTE_VERSION.getName(),
@@ -139,11 +136,13 @@
 	public static XMLModel createModel(String xmlText) throws ParseException, IOException {
 		return XMLModel.create(new InputSource(new StringReader(xmlText)), JFCXMLValidator.getValidator());
 	}
 
 	public static XMLModel createModel(File file) throws FileNotFoundException, IOException, ParseException {
-		return createModel(new FileInputStream(file));
+		try (FileInputStream fis = new FileInputStream(file)) {
+			return createModel(fis);
+		}
 	}
 
 	public static XMLModel createModel(InputStream inStream) throws IOException, ParseException {
 		XMLModel model;
 		try {
diff a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/PrivateStorageDelegate.java b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/PrivateStorageDelegate.java
--- a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/PrivateStorageDelegate.java
+++ b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/PrivateStorageDelegate.java
@@ -88,16 +88,13 @@
 	@Override
 	public boolean save(String fileContent) throws IOException {
 		try {
 			// Ensure charset exists before opening file for writing.
 			Charset charset = Charset.forName(CHARSET_UTF8);
-			Writer out = new OutputStreamWriter(new FileOutputStream(file), charset);
-			try {
+			try (Writer out = new OutputStreamWriter(new FileOutputStream(file), charset)) {
 				out.write(fileContent);
 				out.flush();
-			} finally {
-				IOToolkit.closeSilently(out);
 			}
 			return true;
 		} catch (IllegalCharsetNameException e) {
 			return false;
 		} catch (FileNotFoundException e) {
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/RecordingLoader.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/RecordingLoader.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/RecordingLoader.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/RecordingLoader.java
@@ -164,21 +164,16 @@
 		// FIXME: Can we calculate available memory without resorting to System.gc?
 		System.gc();
 		Runtime runtime = Runtime.getRuntime();
 		long availableMemory = runtime.maxMemory() - runtime.totalMemory() + runtime.freeMemory();
 		if (availableMemory > (zippedFileMemoryFactor * file.length())) { // Try load from stream
-			InputStream stream = IOToolkit.openUncompressedStream(file);
-			try {
+			try (InputStream stream = IOToolkit.openUncompressedStream(file)) {
 				boolean hideExperimentals = !FlightRecorderUI.getDefault().includeExperimentalEventsAndFields();
 				boolean ignoreTruncatedChunk = FlightRecorderUI.getDefault().allowIncompleteRecordingFile();
 				return FlightRecordingLoader.loadStream(stream, hideExperimentals, ignoreTruncatedChunk);
-			} catch (NotEnoughMemoryException e) {
+			} catch (NotEnoughMemoryException | OutOfMemoryError e) {
 				// Try to load part of the file
-			} catch (OutOfMemoryError e) {
-				// Try to load part of the file
-			} finally {
-				IOToolkit.closeSilently(stream);
 			}
 		}
 		String fileName = file.getName();
 		if (IOToolkit.isCompressedFile(file)) {
 			file = unzipFile(file);
@@ -255,16 +250,13 @@
 		 */
 		bringToFront();
 		boolean acceptUnzip = DialogToolkit.openQuestionOnUiThread(Messages.FILE_OPENER_ZIPPED_FILE_TITLE, MessageFormat
 				.format(Messages.FILE_OPENER_ZIPPED_FILE_TEXT, file.getName(), unzippedFile.getAbsolutePath()));
 		if (acceptUnzip) {
-			InputStream is = IOToolkit.openUncompressedStream(file);
-			try {
+			try (InputStream is = IOToolkit.openUncompressedStream(file)) {
 				IOToolkit.write(is, unzippedFile, false);
 				return unzippedFile;
-			} finally {
-				IOToolkit.closeSilently(is);
 			}
 		} else {
 			throw new OperationCanceledException();
 		}
 	}
diff a/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/JfrLaunchDelegateHelper.java b/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/JfrLaunchDelegateHelper.java
--- a/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/JfrLaunchDelegateHelper.java
+++ b/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/JfrLaunchDelegateHelper.java
@@ -238,24 +238,20 @@
 			}
 		};
 	}
 
 	protected void scheduleOpenJfrJob() {
-		FileInputStream stream = null;
-		try {
-			stream = new FileInputStream(recordingFile);
+		try (FileInputStream stream = new FileInputStream(recordingFile)) {
 			boolean wrote = jfrPathToOpen.tryWriteStream(stream, null);
 			if (wrote) {
 				String info = recordingFile.getAbsolutePath() + " was written to " + jfrPathToOpen.getPath() //$NON-NLS-1$
 						+ " which is not expected. Should have existed after refresh."; //$NON-NLS-1$
 				LaunchPlugin.getDefault().getLogger().info(info);
 			}
 			WorkbenchToolkit.asyncOpenEditor(new MCPathEditorInput(recordingFile, false));
 			return;
 		} catch (IOException e) {
-		} finally {
-			IOToolkit.closeSilently(stream);
 		}
 		displayErrorMessage(NLS.bind(Messages.JfrLaunch_JFR_FILE_DID_NOT_EXIST, jfrPathToOpen));
 	}
 
 	protected void displayErrorMessage(String message) {
diff a/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/model/JfrLaunchModel.java b/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/model/JfrLaunchModel.java
--- a/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/model/JfrLaunchModel.java
+++ b/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/model/JfrLaunchModel.java
@@ -58,11 +58,10 @@
 import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
 import org.eclipse.jdt.launching.IVMInstall;
 import org.eclipse.jdt.launching.IVMInstall2;
 import org.eclipse.jdt.launching.JavaRuntime;
 
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.common.unit.QuantityConversionException;
 import org.openjdk.jmc.common.version.JavaVersion;
 import org.openjdk.jmc.common.version.JavaVersionSupport;
 import org.openjdk.jmc.flightrecorder.configuration.events.IEventConfiguration;
 import org.openjdk.jmc.flightrecorder.configuration.events.SchemaVersion;
@@ -324,32 +323,24 @@
 		}
 		return jreVersion;
 	}
 
 	private static String parseJavaVersionFromJre(File theJreRoot) {
-		FileInputStream fis = null;
-		JarInputStream jis = null;
-		try {
-			File rtJar = new File(theJreRoot, "jre/lib/rt.jar"); //$NON-NLS-1$
-			if (!rtJar.exists()) {
-				rtJar = new File(theJreRoot, "lib/rt.jar"); //$NON-NLS-1$
-			}
-			if (rtJar.exists()) {
-				fis = new FileInputStream(rtJar);
-				jis = new JarInputStream(fis);
+		File rtJar = new File(theJreRoot, "jre/lib/rt.jar"); //$NON-NLS-1$
+		if (!rtJar.exists()) {
+			rtJar = new File(theJreRoot, "lib/rt.jar"); //$NON-NLS-1$
+		}
+		if (rtJar.exists()) {
+			try (FileInputStream fis = new FileInputStream(rtJar); JarInputStream jis = new JarInputStream(fis)) {
 				Manifest mf = jis.getManifest();
-				jis.close();
 				Attributes as = mf.getMainAttributes();
 				String impVer = as.getValue("Implementation-Version"); //$NON-NLS-1$
 				if (impVer != null) {
 					return new JavaVersion(impVer).toString();
 				}
+			} catch (IOException e) {
 			}
-		} catch (IOException e) {
-		} finally {
-			IOToolkit.closeSilently(jis);
-			IOToolkit.closeSilently(fis);
 		}
 		return null;
 	}
 
 	private static String getJREName(ILaunchConfiguration configuration) throws CoreException {
diff a/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/heap/parser/ReadBuffer.java b/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/heap/parser/ReadBuffer.java
--- a/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/heap/parser/ReadBuffer.java
+++ b/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/heap/parser/ReadBuffer.java
@@ -166,13 +166,11 @@
 					return new MappedReadMultiBuffer(bufs, mappedBBEndOfs, maxSingleMappedBufSize);
 				}
 			} finally {
 				IOToolkit.closeSilently(ch);
 				IOToolkit.closeSilently(file);
-
 			}
-
 			return new FileReadBuffer(file);
 		}
 	}
 
 	/**
diff a/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/util/FileUtils.java b/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/util/FileUtils.java
--- a/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/util/FileUtils.java
+++ b/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/util/FileUtils.java
@@ -105,15 +105,12 @@
 		}
 		out.close();
 	}
 
 	public static void writeBytesToFile(File file, byte[] bytes) throws IOException {
-		BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));
-		try {
+		try (BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file))) {
 			out.write(bytes);
-		} finally {
-			IOToolkit.closeSilently(out);
 		}
 	}
 
 	public static File fileExistsAndReadableOrExit(String fileName) {
 		try {
diff a/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/logging/LoggingToolkit.java b/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/logging/LoggingToolkit.java
--- a/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/logging/LoggingToolkit.java
+++ b/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/logging/LoggingToolkit.java
@@ -102,12 +102,14 @@
 				e.printStackTrace();
 			}
 		} else {
 			try {
 				if (new File(file).exists()) {
-					readConfiguration(new FileInputStream(file));
-					getLogger().log(Level.INFO, "Loaded user specified logging settings from " + file + "."); //$NON-NLS-1$ //$NON-NLS-2$
+					try (FileInputStream fis = new FileInputStream(file)) {
+						readConfiguration(fis);
+						getLogger().log(Level.INFO, "Loaded user specified logging settings from " + file + "."); //$NON-NLS-1$ //$NON-NLS-2$
+					}
 				} else {
 					getLogger().log(Level.WARNING, "Could not find user specified logging settings at " + file + "."); //$NON-NLS-1$ //$NON-NLS-2$
 				}
 			} catch (Exception e) {
 				getLogger().log(Level.WARNING, "Could not initialize user logger", e); //$NON-NLS-1$
@@ -143,17 +145,14 @@
 			IOToolkit.closeSilently(is);
 		}
 	}
 
 	private static InputStream getAsInputStream(Properties props) throws IOException {
-		ByteArrayOutputStream baos = new ByteArrayOutputStream();
-		try {
+		try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
 			props.store(baos, ""); //$NON-NLS-1$
 			String newProps = baos.toString();
 			return new ByteArrayInputStream(newProps.getBytes("UTF-8")); //$NON-NLS-1$
-		} finally {
-			IOToolkit.closeSilently(baos);
 		}
 	}
 
 	private static void createFolders(Properties props) {
 		String loggingFolder = props.getProperty(KEY_FILE_HANDLER_PATTERN);
diff a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/persistence/internal/PersistenceFile.java b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/persistence/internal/PersistenceFile.java
--- a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/persistence/internal/PersistenceFile.java
+++ b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/persistence/internal/PersistenceFile.java
@@ -75,12 +75,11 @@
 	final MRI mri;
 	final long fileLen;
 
 	PersistenceFile(File file) throws IOException {
 		this.file = file;
-		RandomAccessFile raf = new RandomAccessFile(file, "r"); //$NON-NLS-1$
-		try {
+		try (RandomAccessFile raf = new RandomAccessFile(file, "r")) { //$NON-NLS-1$
 			mri = MRI.createFromQualifiedName(raf.readUTF());
 			fileLen = raf.length();
 			eventsStart = raf.getFilePointer();
 			eventCount = (int) ((fileLen - eventsStart) / EVENT_SIZE);
 			if (eventCount > 0) {
@@ -89,12 +88,10 @@
 				end = raf.readLong();
 			} else {
 				start = Long.MAX_VALUE;
 				end = Long.MAX_VALUE;
 			}
-		} finally {
-			IOToolkit.closeSilently(raf);
 		}
 	}
 
 	boolean isCorrupt() {
 		return eventsStart + (long) eventCount * EVENT_SIZE != fileLen;
@@ -102,15 +99,12 @@
 
 	synchronized ITimestampedData[] getEvents(long min, long max) throws IOException {
 		if (events == null) {
 			// TODO: For now read all data
 			events = new ITimestampedData[eventCount];
-			RandomAccessFile raf = new RandomAccessFile(file, "r"); //$NON-NLS-1$
-			try {
+			try (RandomAccessFile raf = new RandomAccessFile(file, "r")) { //$NON-NLS-1$
 				readEvents(raf, 0, eventCount);
-			} finally {
-				IOToolkit.closeSilently(raf);
 			}
 		}
 		return events;
 	}
 
diff a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/subscription/internal/FileMRIMetadata.java b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/subscription/internal/FileMRIMetadata.java
--- a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/subscription/internal/FileMRIMetadata.java
+++ b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/subscription/internal/FileMRIMetadata.java
@@ -75,13 +75,11 @@
 
 	private final Map<MRI, Map<String, Object>> metadataMap = new HashMap<>();
 
 	static Map<MRI, Map<String, Object>> readDefaultsFromFile() {
 		FileMRIMetadata metadataLoader = new FileMRIMetadata();
-		InputStream is = null;
-		try {
-			is = FileMRIMetadata.class.getResourceAsStream("mrimetadata.xml"); //$NON-NLS-1$
+		try (InputStream is = FileMRIMetadata.class.getResourceAsStream("mrimetadata.xml")) { //$NON-NLS-1$
 			Document doc = XmlToolkit.loadDocumentFromStream(is);
 			List<Element> elems = XmlToolkit.getChildElementsByTag(doc.getDocumentElement(),
 					ELEMENT_METADATA_COLLECTION);
 			if (elems.size() != 1 || elems.get(0) == null) {
 				throw new Exception("Could not find the attributes element!"); //$NON-NLS-1$
@@ -95,12 +93,10 @@
 			}
 		} catch (Exception e) {
 			LOGGER.log(Level.WARNING, "Tried reading mrimetadata.xml, but an exception occurred: " + e.getMessage() //$NON-NLS-1$
 					+ "Extended information about attributes may not be available, " //$NON-NLS-1$
 					+ "and the console will not operate optimally.", e); //$NON-NLS-1$
-		} finally {
-			IOToolkit.closeSilently(is);
 		}
 		return metadataLoader.metadataMap;
 	}
 
 	private void loadMetadataElement(Element e) {
diff a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/triggers/internal/NotificationRuleBag.java b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/triggers/internal/NotificationRuleBag.java
--- a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/triggers/internal/NotificationRuleBag.java
+++ b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/triggers/internal/NotificationRuleBag.java
@@ -30,10 +30,11 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.rjmx.triggers.internal;
 
+import java.io.IOException;
 import java.lang.ref.WeakReference;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
@@ -68,15 +69,16 @@
 			}
 		}
 	}
 
 	void deactivate() {
-		IConnectionHandle handle = handleRef.get();
-		for (Entry<TriggerRule, IMRIValueListener> rule : rules.entrySet()) {
-			deactivateRule(rule.getKey(), rule.getValue(), handle);
+		try (IConnectionHandle handle = handleRef.get()) {
+			for (Entry<TriggerRule, IMRIValueListener> rule : rules.entrySet()) {
+				deactivateRule(rule.getKey(), rule.getValue(), handle);
+			}
+		} catch (IOException e) {
 		}
-
 	}
 
 	Collection<TriggerRule> getAllRegisteredRules() {
 		return rules.keySet();
 	}
diff a/application/org.openjdk.jmc.ui.common/src/main/java/org/openjdk/jmc/ui/common/util/MCVersion.java b/application/org.openjdk.jmc.ui.common/src/main/java/org/openjdk/jmc/ui/common/util/MCVersion.java
--- a/application/org.openjdk.jmc.ui.common/src/main/java/org/openjdk/jmc/ui/common/util/MCVersion.java
+++ b/application/org.openjdk.jmc.ui.common/src/main/java/org/openjdk/jmc/ui/common/util/MCVersion.java
@@ -87,24 +87,22 @@
 	}
 
 	private static Properties getVersionProperties() {
 		// Just one thread executing this when it gets executed.
 		Properties versionProperties = new Properties();
-		InputStream is = MCVersion.class.getResourceAsStream("/version.properties"); //$NON-NLS-1$
-		if (is == null) {
-			LOGGER.log(Level.SEVERE, "Could not open version.properties file."); //$NON-NLS-1$
-			return null;
-		}
-		try {
+		try (InputStream is = MCVersion.class.getResourceAsStream("/version.properties")) { //$NON-NLS-1$
+			if (is == null) {
+				LOGGER.log(Level.SEVERE, "Could not open version.properties file."); //$NON-NLS-1$
+				return null;
+			}
 			versionProperties.load(is);
 		} catch (IOException e) {
 			LOGGER.log(Level.SEVERE, "Error loading version.properties file.", e); //$NON-NLS-1$
 			return null;
-		} finally {
-			IOToolkit.closeSilently(is);
 		}
 		return versionProperties;
+
 	}
 
 	public static String getFullVersion() {
 		return FULL_VERSION;
 	}
diff a/application/tests/org.openjdk.jmc.flightrecorder.controlpanel.ui.test/src/test/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/test/EventConfigurationModelTest.java b/application/tests/org.openjdk.jmc.flightrecorder.controlpanel.ui.test/src/test/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/test/EventConfigurationModelTest.java
--- a/application/tests/org.openjdk.jmc.flightrecorder.controlpanel.ui.test/src/test/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/test/EventConfigurationModelTest.java
+++ b/application/tests/org.openjdk.jmc.flightrecorder.controlpanel.ui.test/src/test/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/test/EventConfigurationModelTest.java
@@ -70,13 +70,14 @@
 			throws ConnectionException, ServiceNotAvailableException {
 		return getConnectionHandle().getServiceOrThrow(IFlightRecorderService.class);
 	}
 
 	protected static IEventConfiguration loadConfig(String jfcName) throws Exception {
-		InputStream in = EventConfigurationModelTest.class.getResourceAsStream(jfcName);
-		XMLModel model = EventConfiguration.createModel(in);
-		return new EventConfiguration(model);
+		try (InputStream in = EventConfigurationModelTest.class.getResourceAsStream(jfcName)) {
+			XMLModel model = EventConfiguration.createModel(in);
+			return new EventConfiguration(model);
+		}
 	}
 
 	@Before
 	public void setUp() throws Exception {
 		assumeHotSpot7u12OrLater(getConnectionHandle());
diff a/application/tests/org.openjdk.jmc.flightrecorder.controlpanel.ui.test/src/test/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/test/EventConfigurationTest.java b/application/tests/org.openjdk.jmc.flightrecorder.controlpanel.ui.test/src/test/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/test/EventConfigurationTest.java
--- a/application/tests/org.openjdk.jmc.flightrecorder.controlpanel.ui.test/src/test/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/test/EventConfigurationTest.java
+++ b/application/tests/org.openjdk.jmc.flightrecorder.controlpanel.ui.test/src/test/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/test/EventConfigurationTest.java
@@ -46,18 +46,20 @@
 
 @SuppressWarnings("nls")
 public class EventConfigurationTest {
 
 	private IEventConfiguration loadConfig(String jfcName) throws Exception {
-		InputStream in = EventConfigurationTest.class.getResourceAsStream(jfcName);
-		XMLModel model = EventConfiguration.createModel(in);
-		return new EventConfiguration(model);
+		try (InputStream in = EventConfigurationTest.class.getResourceAsStream(jfcName)) {
+			XMLModel model = EventConfiguration.createModel(in);
+			return new EventConfiguration(model);
+		}
 	}
 
 	private void validateConfig(String jfcName, SchemaVersion version) throws Exception {
-		InputStream in = EventConfigurationTest.class.getResourceAsStream(jfcName);
-		EventConfiguration.validate(in, jfcName, version);
+		try (InputStream in = EventConfigurationTest.class.getResourceAsStream(jfcName)) {
+			EventConfiguration.validate(in, jfcName, version);
+		}
 	}
 
 	@Test
 	public void testLoadV1() throws Exception {
 		loadConfig("continous_jfr_1_0.jfc");
diff a/application/tests/org.openjdk.jmc.flightrecorder.controlpanel.ui.test/src/test/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/test/JfrControlTestCase.java b/application/tests/org.openjdk.jmc.flightrecorder.controlpanel.ui.test/src/test/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/test/JfrControlTestCase.java
--- a/application/tests/org.openjdk.jmc.flightrecorder.controlpanel.ui.test/src/test/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/test/JfrControlTestCase.java
+++ b/application/tests/org.openjdk.jmc.flightrecorder.controlpanel.ui.test/src/test/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/test/JfrControlTestCase.java
@@ -39,10 +39,11 @@
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.model.EventConfiguration;
 import org.openjdk.jmc.rjmx.services.jfr.test.JfrTestCase;
 
 public class JfrControlTestCase extends JfrTestCase {
 	protected static IEventConfiguration loadConfig(String jfcName) throws Exception {
-		InputStream in = JfrControlTestCase.class.getResourceAsStream(jfcName);
-		XMLModel model = EventConfiguration.createModel(in);
-		return new EventConfiguration(model);
+		try (InputStream in = JfrControlTestCase.class.getResourceAsStream(jfcName)) {
+			XMLModel model = EventConfiguration.createModel(in);
+			return new EventConfiguration(model);
+		}
 	}
 }
diff a/application/tests/org.openjdk.jmc.rjmx.services.jfr.test/src/test/java/org/openjdk/jmc/rjmx/services/jfr/test/JfrPackageExampleTest.java b/application/tests/org.openjdk.jmc.rjmx.services.jfr.test/src/test/java/org/openjdk/jmc/rjmx/services/jfr/test/JfrPackageExampleTest.java
--- a/application/tests/org.openjdk.jmc.rjmx.services.jfr.test/src/test/java/org/openjdk/jmc/rjmx/services/jfr/test/JfrPackageExampleTest.java
+++ b/application/tests/org.openjdk.jmc.rjmx.services.jfr.test/src/test/java/org/openjdk/jmc/rjmx/services/jfr/test/JfrPackageExampleTest.java
@@ -36,11 +36,10 @@
 
 import java.io.IOException;
 import java.io.InputStream;
 
 import org.junit.Test;
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.common.unit.IConstrainedMap;
 import org.openjdk.jmc.common.unit.IDescribedMap;
 import org.openjdk.jmc.flightrecorder.configuration.events.EventOptionID;
 import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;
 import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;
@@ -63,27 +62,23 @@
 
 	@Test
 	public void testPackageExample1FunctionalityVerbatim() throws Exception {
 		IConnectionDescriptor descriptor = new ConnectionDescriptorBuilder().hostName("localhost").port(0).build();
 		IServerHandle serverHandle = IServerHandle.create(descriptor);
-		IConnectionHandle handle = serverHandle.connect("Get JFR recording info");
-		try {
+		try (IConnectionHandle handle = serverHandle.connect("Get JFR recording info")) {
 			IFlightRecorderService jfr = handle.getServiceOrThrow(IFlightRecorderService.class);
 			for (IRecordingDescriptor desc : jfr.getAvailableRecordings()) {
 				System.out.println(desc.getName());
 			}
-		} finally {
-			IOToolkit.closeSilently(handle);
 		}
 	}
 
 	@Test
 	public void testPackageExample2FunctionalityVerbatim() throws Exception {
 		IConnectionDescriptor descriptor = new ConnectionDescriptorBuilder().hostName("localhost").port(0).build();
 		IServerHandle serverHandle = IServerHandle.create(descriptor);
-		IConnectionHandle handle = serverHandle.connect("Start time bound flight recording");
-		try {
+		try (IConnectionHandle handle = serverHandle.connect("Start time bound flight recording")) {
 			IFlightRecorderService jfr = handle.getServiceOrThrow(IFlightRecorderService.class);
 
 			long duration = 5000;
 			IDescribedMap<EventOptionID> defaultEventOptions = jfr.getDefaultEventOptions();
 			IConstrainedMap<String> recordingOptions = new RecordingOptionsBuilder(jfr).name("MyRecording")
@@ -92,14 +87,13 @@
 			Thread.sleep(duration);
 			while (recording.getState() != IRecordingDescriptor.RecordingState.STOPPED) {
 				Thread.sleep(1000);
 				recording = jfr.getUpdatedRecordingDescription(recording);
 			}
-			InputStream is = jfr.openStream(recording, true);
-			writeStreamToFile(is);
-		} finally {
-			IOToolkit.closeSilently(handle);
+			try (InputStream is = jfr.openStream(recording, true)) {
+				writeStreamToFile(is);
+			}
 		}
 	}
 
 	private void writeStreamToFile(InputStream in) throws IOException {
 		// Just read and count bytes in the test...
diff a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/DefaultServicesTest.java b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/DefaultServicesTest.java
--- a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/DefaultServicesTest.java
+++ b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/DefaultServicesTest.java
@@ -49,38 +49,40 @@
  */
 public class DefaultServicesTest extends ServerHandleTestCase {
 
 	@Test
 	public void testMBeanServerConnection() throws Exception {
-		IConnectionHandle handle = getDefaultServer().connect("Test");
-		MBeanServerConnection connection = handle.getServiceOrThrow(MBeanServerConnection.class);
+		try (IConnectionHandle handle = getDefaultServer().connect("Test")) {
+			MBeanServerConnection connection = handle.getServiceOrThrow(MBeanServerConnection.class);
 
-		String[] domains = connection.getDomains();
-		assertNotNull(connection.getDomains());
-		// At least java.lang, no matter what, or we're breaking J2SE compliance...
-		for (String domain : domains) {
-			if (domain.equals("java.lang")) {
-				return;
+			String[] domains = connection.getDomains();
+			assertNotNull(connection.getDomains());
+			// At least java.lang, no matter what, or we're breaking J2SE compliance...
+			for (String domain : domains) {
+				if (domain.equals("java.lang")) {
+					return;
+				}
 			}
+			fail("Could not find java.lang.management among the domains!");
 		}
-		fail("Could not find java.lang.management among the domains!");
 	}
 
 	@Test
 	public void xtestMBeanHelperService() throws Exception {
-		IConnectionHandle handle = getDefaultServer().connect("Test");
-		IMBeanHelperService helper = handle.getServiceOrThrow(IMBeanHelperService.class);
+		try (IConnectionHandle handle = getDefaultServer().connect("Test")) {
+			IMBeanHelperService helper = handle.getServiceOrThrow(IMBeanHelperService.class);
 
-		// FIXME: JMC-4270 - Server time approximation is not reliable. Disabling until a solution is found.
-//		long time = System.currentTimeMillis();
-//
-//		// The server time calculations should not be this much off.
-//		long diff = time - helper.getApproximateServerTime(time);
-//		assertLessThan("Server time approximation off by more than five seconds", 5000L, Math.abs(diff));
-//		System.out.println("DefaultServicesTest.testMBeanHelperService(): Server time approximation difference = "
-//				+ Math.abs(diff) + " ms");
+			// FIXME: JMC-4270 - Server time approximation is not reliable. Disabling until a solution is found.
+//			long time = System.currentTimeMillis();
+//	
+//			// The server time calculations should not be this much off.
+//			long diff = time - helper.getApproximateServerTime(time);
+//			assertLessThan("Server time approximation off by more than five seconds", 5000L, Math.abs(diff));
+//			System.out.println("DefaultServicesTest.testMBeanHelperService(): Server time approximation difference = "
+//					+ Math.abs(diff) + " ms");
 
-		// Should at least contain the java.lang mbeans. Just testing for the Threading one.
-		assertTrue("Could not find the Threading MBean!",
-				helper.getMBeanNames().contains(new ObjectName("java.lang:type=Threading")));
+			// Should at least contain the java.lang mbeans. Just testing for the Threading one.
+			assertTrue("Could not find the Threading MBean!",
+					helper.getMBeanNames().contains(new ObjectName("java.lang:type=Threading")));
+		}
 	}
 }
diff a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/PackageExampleTest.java b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/PackageExampleTest.java
--- a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/PackageExampleTest.java
+++ b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/PackageExampleTest.java
@@ -74,35 +74,29 @@
 	 */
 	@Test
 	public void testPackageExampleVerbatim() throws Exception {
 		IConnectionDescriptor descriptor = new ConnectionDescriptorBuilder().hostName("localhost").port(0).build();
 		IServerHandle serverHandle = IServerHandle.create(descriptor);
-		IConnectionHandle handle = serverHandle.connect("Usage description");
-		try {
+		try (IConnectionHandle handle = serverHandle.connect("Usage description")) {
 			ISubscriptionService service = handle.getServiceOrThrow(ISubscriptionService.class);
 			MRI attribute = new MRI(Type.ATTRIBUTE, "java.lang:type=Threading", "ThreadCount");
 			service.addMRIValueListener(attribute, new IMRIValueListener() {
 				@Override
 				public void valueChanged(MRIValueEvent event) {
 					System.out.println(event.getValue());
 				}
 			});
 			IMRISubscription subscription = service.getMRISubscription(attribute);
 			subscription.setUpdatePolicy(PolicyFactory.createSimpleUpdatePolicy(1500));
-		} finally {
-			// Always close IConnectionHandle when done
-			IOToolkit.closeSilently(handle);
 		}
-
 	}
 
 	@Test
 	public void testPackageExampleFunctionality() throws Exception {
 		ConnectionDescriptorBuilder builder = new ConnectionDescriptorBuilder();
 		IConnectionDescriptor descriptor = builder.hostName("localhost").port(0).build();
-		IConnectionHandle handle = IServerHandle.create(descriptor).connect("Usage description");
-		try {
+		try (IConnectionHandle handle = IServerHandle.create(descriptor).connect("Usage description")) {
 			ISubscriptionService service = handle.getServiceOrThrow(ISubscriptionService.class);
 			gotEvent = false;
 			MRI attribute = new MRI(Type.ATTRIBUTE, "java.lang:type=Threading", "ThreadCount");
 			service.addMRIValueListener(attribute, new IMRIValueListener() {
 				@Override
@@ -116,12 +110,10 @@
 			IMRISubscription subscription = service.getMRISubscription(attribute);
 			subscription.setUpdatePolicy(PolicyFactory.createSimpleUpdatePolicy(1500));
 			synchronized (PackageExampleTest.this) {
 				this.wait(4000);
 			}
-		} finally {
-			IOToolkit.closeSilently(handle);
 		}
 		assertTrue("Never got any event!", gotEvent);
 	}
 
 	@Test
@@ -129,16 +121,13 @@
 		IServerModel model = RJMXPlugin.getDefault().getService(IServerModel.class);
 		for (IServer server : model.elements()) {
 			IServerDescriptor descriptor = server.getServerHandle().getServerDescriptor();
 			if (descriptor.getJvmInfo() != null
 					&& Integer.valueOf(Environment.getThisPID()).equals(descriptor.getJvmInfo().getPid())) {
-				IConnectionHandle handle = server.getServerHandle().connect("Usage description");
-				try {
+				try (IConnectionHandle handle = server.getServerHandle().connect("Usage description")) {
 					handle.getServiceOrThrow(IMBeanHelperService.class).getMBeanNames().size();
 					return;
-				} finally {
-					IOToolkit.closeSilently(handle);
 				}
 			}
 		}
 	}
 }
diff a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/services/ServicesPackageExampleTest.java b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/services/ServicesPackageExampleTest.java
--- a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/services/ServicesPackageExampleTest.java
+++ b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/services/ServicesPackageExampleTest.java
@@ -54,12 +54,11 @@
 // NOTE: If you change the verbatim test YOU MUST update the corresponding package.html document.
 public class ServicesPackageExampleTest extends RjmxTestCase {
 	public void packageExampleFunctionalityVerbatim() throws Exception {
 		IConnectionDescriptor descriptor = new ConnectionDescriptorBuilder().hostName("localhost").port(0).build();
 		IServerHandle handle = IServerHandle.create(descriptor);
-		try {
-			IConnectionHandle connection = handle.connect("Run Diagnostic commands");
+		try (IConnectionHandle connection = handle.connect("Run Diagnostic commands")) {
 			assumeHasDiagnosticCommandsService(connection);
 			IDiagnosticCommandService dcmd = connection.getServiceOrThrow(IDiagnosticCommandService.class);
 			for (IOperation operation : dcmd.getOperations()) {
 				System.out.println(dcmd.runCtrlBreakHandlerWithResult(String.format("help %s", operation.getName())));
 			}
@@ -70,12 +69,11 @@
 
 	@Test
 	public void testPackageExampleFunctionality() throws Exception {
 		IConnectionDescriptor descriptor = new ConnectionDescriptorBuilder().hostName("localhost").port(0).build();
 		IServerHandle handle = IServerHandle.create(descriptor);
-		try {
-			IConnectionHandle connection = handle.connect("Run Diagnostic commands");
+		try (IConnectionHandle connection = handle.connect("Run Diagnostic commands")) {
 			assumeHasDiagnosticCommandsService(connection);
 			IDiagnosticCommandService dcmd = connection.getServiceOrThrow(IDiagnosticCommandService.class);
 			for (IOperation operation : dcmd.getOperations()) {
 				String command = operation.getName();
 				assertNotNull("Could not retrieve help for the command: " + command,
diff a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/subscription/MRIMetadataServiceTest.java b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/subscription/MRIMetadataServiceTest.java
--- a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/subscription/MRIMetadataServiceTest.java
+++ b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/subscription/MRIMetadataServiceTest.java
@@ -90,17 +90,19 @@
 		handle.close();
 	}
 
 	@Test
 	public void testGetExtendedProperties() throws Exception {
-		IConnectionHandle handle = IServerHandle.create(LocalRJMXTestToolkit.createDefaultDescriptor()).connect("Test");
-		IMRIMetadataService service = LocalRJMXTestToolkit.getInfoService(handle);
-		IMRIMetadata info = service
-				.getMetadata(new MRI(Type.ATTRIBUTE, "java.lang:type=Memory", "HeapMemoryUsage/used"));
-		assertNotNull(info);
-		assertTrue("Should be numerical", MRIMetadataToolkit.isNumerical(info));
-		assertNotNull(info.getMetadata("color"));
+		try (IConnectionHandle handle = IServerHandle.create(LocalRJMXTestToolkit.createDefaultDescriptor())
+				.connect("Test")) {
+			IMRIMetadataService service = LocalRJMXTestToolkit.getInfoService(handle);
+			IMRIMetadata info = service
+					.getMetadata(new MRI(Type.ATTRIBUTE, "java.lang:type=Memory", "HeapMemoryUsage/used"));
+			assertNotNull(info);
+			assertTrue("Should be numerical", MRIMetadataToolkit.isNumerical(info));
+			assertNotNull(info.getMetadata("color"));
+		}
 	}
 
 	@Test
 	public void testGetNumericalMetadata() throws Exception {
 		IConnectionHandle handle = IServerHandle.create(LocalRJMXTestToolkit.createDefaultDescriptor()).connect("Test");
diff a/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrMetadataToolkit.java b/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrMetadataToolkit.java
--- a/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrMetadataToolkit.java
+++ b/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrMetadataToolkit.java
@@ -46,24 +46,21 @@
 @SuppressWarnings("restriction")
 public class JfrMetadataToolkit {
 
 	protected static SortedMap<String, SortedMap<String, String>> parseRecordingFile(File recordingFile) {
 		SortedMap<String, SortedMap<String, String>> eventTypeMap = new TreeMap<>();
-		InputStream stream = null;
-		try {
-			stream = IOToolkit.openUncompressedStream(recordingFile);
+		try (InputStream stream = IOToolkit.openUncompressedStream(recordingFile)) {
 			EventArray[] eventArrays = FlightRecordingLoader.loadStream(stream, false, false);
 			for (EventArray entry : eventArrays) {
 				SortedMap<String, String> attrs = new TreeMap<>();
 				for (IAccessorKey<?> a : entry.getType().getAccessorKeys().keySet()) {
 					attrs.put(a.getIdentifier(), a.getContentType().getIdentifier());
 				}
 				String eventTypeId = entry.getType().getIdentifier();
 				eventTypeMap.put(eventTypeId, attrs);
 			}
 		} catch (Exception e) {
-			IOToolkit.closeSilently(stream);
 			throw new RuntimeException(e);
 		}
 		return eventTypeMap;
 	}
 
diff a/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/MetadataTestBase.java b/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/MetadataTestBase.java
--- a/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/MetadataTestBase.java
+++ b/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/MetadataTestBase.java
@@ -166,12 +166,14 @@
 		wizardShell.startAndWaitForRecordingEditor();
 	}
 
 	protected void copyFile(File sourceFile, File destFile) {
 		prepareFile(destFile);
-		try (FileChannel source = new FileInputStream(sourceFile).getChannel();
-				FileChannel destination = new FileOutputStream(destFile).getChannel()) {
+		try (FileInputStream sourceFis = new FileInputStream(sourceFile);
+				FileOutputStream destinationFos = new FileOutputStream(destFile);
+				FileChannel source = sourceFis.getChannel();
+				FileChannel destination = destinationFos.getChannel()) {
 			destination.transferFrom(source, 0, source.size());
 		} catch (IOException e) {
 			e.printStackTrace();
 			fail("Error copying file \"" + sourceFile.getAbsolutePath() + "\" to \"" + destFile.getAbsolutePath()
 					+ "\". Error:\n" + e.getMessage());
diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/Agent.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/Agent.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/Agent.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/Agent.java
@@ -33,10 +33,11 @@
 package org.openjdk.jmc.agent;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.io.InputStream;
 import java.lang.instrument.Instrumentation;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -120,14 +121,13 @@
 	private static void initializeAgent(String agentArguments, Instrumentation instrumentation) {
 		if (agentArguments == null || agentArguments.trim().length() == 0) {
 			agentArguments = DEFAULT_CONFIG;
 		}
 		File file = new File(agentArguments);
-		try {
-			InputStream stream = new FileInputStream(file);
+		try (InputStream stream = new FileInputStream(file)) {
 			initializeAgent(stream, instrumentation);
-		} catch (FileNotFoundException | XMLStreamException e) {
+		} catch (XMLStreamException | IOException e) {
 			getLogger().log(Level.SEVERE, "Failed to read jfr probe definitions from " + file.getPath(), e); //$NON-NLS-1$
 		}
 	}
 
 	private static void printVersion() {
diff a/core/org.openjdk.jmc.agent/src/test/java/org/openjdk/jmc/agent/test/util/TestToolkit.java b/core/org.openjdk.jmc.agent/src/test/java/org/openjdk/jmc/agent/test/util/TestToolkit.java
--- a/core/org.openjdk.jmc.agent/src/test/java/org/openjdk/jmc/agent/test/util/TestToolkit.java
+++ b/core/org.openjdk.jmc.agent/src/test/java/org/openjdk/jmc/agent/test/util/TestToolkit.java
@@ -50,12 +50,13 @@
 	private TestToolkit() {
 		throw new UnsupportedOperationException("Not to be instantiated."); //$NON-NLS-1$
 	}
 
 	public static byte[] getByteCode(Class<?> c) throws IOException {
-		InputStream is = c.getClassLoader().getResourceAsStream(c.getName().replace('.', '/') + ".class"); //$NON-NLS-1$
-		return readFully(is, -1, true);
+		try (InputStream is = c.getClassLoader().getResourceAsStream(c.getName().replace('.', '/') + ".class")) { //$NON-NLS-1$
+			return readFully(is, -1, true);
+		}
 	}
 
 	public static byte[] readFully(InputStream is, int length, boolean readAll) throws IOException {
 		byte[] output = {};
 		if (length == -1) {
@@ -104,14 +105,13 @@
 		template = template.replaceAll("%TEST_NAME%", testName); //$NON-NLS-1$
 		return new ByteArrayInputStream(template.getBytes());
 	}
 
 	public static String readTemplate(Class<?> resouceClass, String templateName) throws IOException {
-		InputStream inputStream = resouceClass.getResourceAsStream(templateName); // $NON-NLS-1$
-		String s = readString(inputStream);
-		closeSilently(inputStream);
-		return s;
+		try (InputStream inputStream = resouceClass.getResourceAsStream(templateName)) {
+			return readString(inputStream);
+		}
 	}
 
 	public static String readString(InputStream in) throws IOException {
 		return readString(new BufferedReader(new InputStreamReader(in), 8192));
 	}
diff a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java
--- a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java
+++ b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java
@@ -169,16 +169,12 @@
 	 * @return {@code true} if the file begins with the magic, {@code false} otherwise
 	 * @throws IOException
 	 *             if an error occurred when trying to read from the file
 	 */
 	public static boolean hasMagic(File file, int[] magic) throws IOException {
-		FileInputStream fis = null;
-		try {
-			fis = new FileInputStream(file);
+		try (FileInputStream fis = new FileInputStream(file)) {
 			return hasMagic(fis, magic);
-		} finally {
-			closeSilently(fis);
 		}
 	}
 
 	/**
 	 * Checks if an input stream begins with a specified array of bytes. The input stream will be
@@ -258,21 +254,17 @@
 	 *         {@link #openUncompressedStream(File)}, {@code false} otherwise
 	 * @throws IOException
 	 *             if an error occurred when trying to read from the file
 	 */
 	public static boolean isCompressedFile(File file) throws IOException {
-		BufferedInputStream is = null;
-		try {
-			is = new BufferedInputStream(new FileInputStream(file), MAGIC_ZIP.length + 1);
+		try (BufferedInputStream is = new BufferedInputStream(new FileInputStream(file), MAGIC_ZIP.length + 1)) {
 			is.mark(MAGIC_ZIP.length + 1);
 			if (hasMagic(is, MAGIC_GZ)) {
 				return true;
 			}
 			is.reset();
 			return hasMagic(is, MAGIC_ZIP);
-		} finally {
-			closeSilently(is);
 		}
 	}
 
 	/**
 	 * Read lines from a text file.
@@ -283,27 +275,23 @@
 	 * @return a list of strings, one for each line in the file
 	 * @throws IOException
 	 *             on I/O error
 	 */
 	public static List<String> loadFromFile(File file) throws IOException {
-		FileReader fr = new FileReader(file);
-		try {
+		try (FileReader fr = new FileReader(file)) {
 			return loadFromReader(fr);
-		} catch (IOException e) {
-			throw e;
-		} finally {
-			closeSilently(fr);
 		}
 	}
 
 	private static List<String> loadFromReader(Reader reader) throws IOException {
 		List<String> lines = new ArrayList<>();
-		BufferedReader br = new BufferedReader(reader);
-		while (br.ready()) {
-			lines.add(br.readLine());
+		try (BufferedReader br = new BufferedReader(reader)) {
+			while (br.ready()) {
+				lines.add(br.readLine());
+			}
+			return lines;
 		}
-		return lines;
 	}
 
 	/**
 	 * Write lines to a text file. If the file already exists, it will be overwritten.
 	 *
@@ -314,18 +302,14 @@
 	 *            a list of strings that will be written on one line each
 	 * @throws IOException
 	 *             on I/O error
 	 */
 	public static void saveToFile(File file, List<String> lines) throws IOException {
-		PrintWriter pr = null;
-		try {
-			pr = new PrintWriter(new FileWriter(file));
+		try (PrintWriter pr = new PrintWriter(new FileWriter(file))) {
 			for (String line : lines) {
 				pr.println(line);
 			}
-		} finally {
-			closeSilently(pr);
 		}
 	}
 
 	/**
 	 * Read lines from an input stream.
@@ -336,14 +320,13 @@
 	 * @return a list of strings, one for each line in the stream
 	 * @throws IOException
 	 *             on I/O error
 	 */
 	public static List<String> loadFromStream(InputStream is) throws IOException {
-		try {
+		try (BufferedInputStream bis = new BufferedInputStream(is);
+				BufferedReader r = new BufferedReader(new InputStreamReader(bis))) {
 			List<String> lines = new ArrayList<>();
-			BufferedInputStream bis = new BufferedInputStream(is);
-			BufferedReader r = new BufferedReader(new InputStreamReader(bis));
 			while (r.ready()) {
 				lines.add(r.readLine());
 			}
 			return lines;
 		} finally {
@@ -363,18 +346,13 @@
 	 *            overwritten
 	 * @throws IOException
 	 *             on I/O error
 	 */
 	public static void write(InputStream in, File toOutput, boolean append) throws IOException {
-		FileOutputStream fos = new FileOutputStream(toOutput, append);
-		BufferedOutputStream os = null;
-		try {
-			os = new BufferedOutputStream(fos);
+		try (FileOutputStream fos = new FileOutputStream(toOutput, append);
+				BufferedOutputStream os = new BufferedOutputStream(fos)) {
 			copy(in, os);
-		} finally {
-			closeSilently(os);
-			closeSilently(fos);
 		}
 	}
 
 	/**
 	 * Copy all data from an input stream to an output stream.
@@ -435,12 +413,11 @@
 	 * @return MD5 hash string
 	 * @throws IOException
 	 *             if something goes wrong when reading file data
 	 */
 	public static String calculateFileHash(File file) throws IOException {
-		RandomAccessFile raf = new RandomAccessFile(file, "r"); //$NON-NLS-1$
-		try {
+		try (RandomAccessFile raf = new RandomAccessFile(file, "r")) { //$NON-NLS-1$
 			long seek = raf.length() / 10;
 			byte[] buffer = new byte[1024];
 			MessageDigest hash = MessageDigest.getInstance("MD5"); //$NON-NLS-1$
 			int read;
 			while ((read = raf.read(buffer)) > 0) {
@@ -448,10 +425,8 @@
 				raf.seek(raf.getFilePointer() + seek);
 			}
 			return new BigInteger(1, hash.digest()).toString();
 		} catch (NoSuchAlgorithmException e) {
 			throw new RuntimeException(e);
-		} finally {
-			closeSilently(raf);
 		}
 	}
 }
diff a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/XmlToolkit.java b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/XmlToolkit.java
--- a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/XmlToolkit.java
+++ b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/XmlToolkit.java
@@ -395,18 +395,12 @@
 	 *             if the document could not be parsed
 	 * @throws IOException
 	 *             if the stream could not be read
 	 */
 	public static Document loadDocumentFromFile(File file) throws SAXException, IOException {
-		FileInputStream is = null;
-		try {
-			is = new FileInputStream(file);
+		try (FileInputStream is = new FileInputStream(file)) {
 			return XmlToolkit.loadDocumentFromStream(new BufferedInputStream(is));
-		} finally {
-			if (is != null) {
-				IOToolkit.closeSilently(is);
-			}
 		}
 	}
 
 	/**
 	 * Loads an XML document from the specified stream.
@@ -455,18 +449,12 @@
 	 *            the file to store it in
 	 * @throws IOException
 	 *             if the file could not written
 	 */
 	public static void storeDocumentToFile(Document doc, File file) throws IOException {
-		PrintWriter pw = null;
-		try {
-			pw = new PrintWriter(file, "UTF-8"); //$NON-NLS-1$
+		try (PrintWriter pw = new PrintWriter(file, "UTF-8")) { //$NON-NLS-1$
 			prettyPrint(doc.getDocumentElement(), pw);
-		} finally {
-			if (pw != null) {
-				IOToolkit.closeSilently(pw);
-			}
 		}
 	}
 
 	/**
 	 * Stores an XML document as a string.
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/JfrLoaderToolkit.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/JfrLoaderToolkit.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/JfrLoaderToolkit.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/JfrLoaderToolkit.java
@@ -64,15 +64,12 @@
 			throws IOException, CouldNotLoadRecordingException {
 		List<InputStream> streams = new ArrayList<>(files.size());
 		for (File file : files) {
 			streams.add(IOToolkit.openUncompressedStream(file));
 		}
-		InputStream stream = new SequenceInputStream(Collections.enumeration(streams));
-		try {
+		try (InputStream stream = new SequenceInputStream(Collections.enumeration(streams))) {
 			return FlightRecordingLoader.loadStream(stream, extensions, false, true);
-		} finally {
-			IOToolkit.closeSilently(stream);
 		}
 	}
 
 	/**
 	 * Loads a potentially zipped or gzipped input stream using the parser extensions loaded from
@@ -95,13 +92,14 @@
 	 * @param extensions
 	 *            the extensions to use when parsing the file
 	 * @return the events in the recording
 	 */
 	public static IItemCollection loadEvents(InputStream stream, List<? extends IParserExtension> extensions)
-			throws IOException, CouldNotLoadRecordingException {
-		InputStream in = IOToolkit.openUncompressedStream(stream);
-		return EventCollection.build(FlightRecordingLoader.loadStream(in, extensions, false, true));
+			throws CouldNotLoadRecordingException, IOException {
+		try (InputStream in = IOToolkit.openUncompressedStream(stream)) {
+			return EventCollection.build(FlightRecordingLoader.loadStream(in, extensions, false, true));
+		}
 	}
 
 	/**
 	 * Loads a potentially zipped or gzipped file using the parser extensions loaded from the java
 	 * service loader
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/EventAppearance.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/EventAppearance.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/EventAppearance.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/EventAppearance.java
@@ -76,22 +76,19 @@
 	private static Properties loadProperties(String fileName) {
 		// Reading through Properties now, for simplicity.
 		// Might change to ResourceBundle, or do as FieldToolkit (or NLS),
 		// if localization is needed. (Which I doubt, since it would be confusing.)
 		Properties properties = new Properties();
-		InputStream in = EventAppearance.class.getResourceAsStream(fileName);
-		if (in != null) {
-			try {
+		try (InputStream in = EventAppearance.class.getResourceAsStream(fileName)) {
+			if (in != null) {
 				properties.load(in);
-			} catch (IOException e) {
-				System.err.println("Problem loading file '" + fileName + "'"); //$NON-NLS-1$ //$NON-NLS-2$
-				e.printStackTrace();
-			} finally {
-				IOToolkit.closeSilently(in);
+			} else {
+				System.err.println("Couldn't find file '" + fileName + "'"); //$NON-NLS-1$ //$NON-NLS-2$
 			}
-		} else {
-			System.err.println("Couldn't find file '" + fileName + "'"); //$NON-NLS-1$ //$NON-NLS-2$
+		} catch (IOException e) {
+			System.err.println("Problem loading file '" + fileName + "'"); //$NON-NLS-1$ //$NON-NLS-2$
+			e.printStackTrace();
 		}
 		return properties;
 	}
 
 	public static String[] getHumanSegmentArray(String path) {
diff a/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/java/org/openjdk/jmc/flightrecorder/test/rules/jdk/TestRulesWithJfr.java b/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/java/org/openjdk/jmc/flightrecorder/test/rules/jdk/TestRulesWithJfr.java
--- a/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/java/org/openjdk/jmc/flightrecorder/test/rules/jdk/TestRulesWithJfr.java
+++ b/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/java/org/openjdk/jmc/flightrecorder/test/rules/jdk/TestRulesWithJfr.java
@@ -164,13 +164,13 @@
 		String filePath = getResultDir().getAbsolutePath() + File.separator
 				+ ((directory != null) ? (directory + File.separator) : "")
 				+ (onlyOneRecording ? "Generated_One_" : "Generated_") + fileName;
 		File resultFile = new File(filePath);
 		prepareFile(resultFile);
-		try {
-			writeDomToStream(doc, new FileOutputStream(resultFile));
-		} catch (FileNotFoundException e) {
+		try (FileOutputStream resultFos = new FileOutputStream(resultFile)) {
+			writeDomToStream(doc, resultFos);
+		} catch (IOException e) {
 			e.printStackTrace();
 		}
 	}
 
 	private static void prepareFile(File file) {
