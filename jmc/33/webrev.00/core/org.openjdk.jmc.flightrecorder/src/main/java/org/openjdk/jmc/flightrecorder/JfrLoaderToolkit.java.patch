diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/JfrLoaderToolkit.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/JfrLoaderToolkit.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/JfrLoaderToolkit.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/JfrLoaderToolkit.java
@@ -64,15 +64,12 @@
 			throws IOException, CouldNotLoadRecordingException {
 		List<InputStream> streams = new ArrayList<>(files.size());
 		for (File file : files) {
 			streams.add(IOToolkit.openUncompressedStream(file));
 		}
-		InputStream stream = new SequenceInputStream(Collections.enumeration(streams));
-		try {
+		try (InputStream stream = new SequenceInputStream(Collections.enumeration(streams))) {
 			return FlightRecordingLoader.loadStream(stream, extensions, false, true);
-		} finally {
-			IOToolkit.closeSilently(stream);
 		}
 	}
 
 	/**
 	 * Loads a potentially zipped or gzipped input stream using the parser extensions loaded from
@@ -95,13 +92,14 @@
 	 * @param extensions
 	 *            the extensions to use when parsing the file
 	 * @return the events in the recording
 	 */
 	public static IItemCollection loadEvents(InputStream stream, List<? extends IParserExtension> extensions)
-			throws IOException, CouldNotLoadRecordingException {
-		InputStream in = IOToolkit.openUncompressedStream(stream);
-		return EventCollection.build(FlightRecordingLoader.loadStream(in, extensions, false, true));
+			throws CouldNotLoadRecordingException, IOException {
+		try (InputStream in = IOToolkit.openUncompressedStream(stream)) {
+			return EventCollection.build(FlightRecordingLoader.loadStream(in, extensions, false, true));
+		}
 	}
 
 	/**
 	 * Loads a potentially zipped or gzipped file using the parser extensions loaded from the java
 	 * service loader
