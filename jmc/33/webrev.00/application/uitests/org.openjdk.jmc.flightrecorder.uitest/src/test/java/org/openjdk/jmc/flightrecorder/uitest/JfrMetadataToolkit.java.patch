diff a/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrMetadataToolkit.java b/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrMetadataToolkit.java
--- a/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrMetadataToolkit.java
+++ b/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrMetadataToolkit.java
@@ -46,24 +46,21 @@
 @SuppressWarnings("restriction")
 public class JfrMetadataToolkit {
 
 	protected static SortedMap<String, SortedMap<String, String>> parseRecordingFile(File recordingFile) {
 		SortedMap<String, SortedMap<String, String>> eventTypeMap = new TreeMap<>();
-		InputStream stream = null;
-		try {
-			stream = IOToolkit.openUncompressedStream(recordingFile);
+		try (InputStream stream = IOToolkit.openUncompressedStream(recordingFile)) {
 			EventArray[] eventArrays = FlightRecordingLoader.loadStream(stream, false, false);
 			for (EventArray entry : eventArrays) {
 				SortedMap<String, String> attrs = new TreeMap<>();
 				for (IAccessorKey<?> a : entry.getType().getAccessorKeys().keySet()) {
 					attrs.put(a.getIdentifier(), a.getContentType().getIdentifier());
 				}
 				String eventTypeId = entry.getType().getIdentifier();
 				eventTypeMap.put(eventTypeId, attrs);
 			}
 		} catch (Exception e) {
-			IOToolkit.closeSilently(stream);
 			throw new RuntimeException(e);
 		}
 		return eventTypeMap;
 	}
 
