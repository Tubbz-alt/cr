diff a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/jobs/UpdateRecordingJob.java b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/jobs/UpdateRecordingJob.java
--- a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/jobs/UpdateRecordingJob.java
+++ b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/jobs/UpdateRecordingJob.java
@@ -67,21 +67,17 @@
 		m_recordingSettings = recordingSettings;
 	}
 
 	@Override
 	protected IStatus run(IProgressMonitor monitor) {
-		IConnectionHandle connection = null;
-		try {
-			connection = m_server.connect(getName());
+		try (IConnectionHandle connection = m_server.connect(getName())) {
 			IFlightRecorderService flightRecorderService = connection.getServiceOrThrow(IFlightRecorderService.class);
 			flightRecorderService.updateRecordingOptions(m_recordingDescriptor, m_recordingOptions);
 			flightRecorderService.updateEventOptions(m_recordingDescriptor, m_recordingSettings);
 			return StatusFactory.createOk(Messages.UPDATE_RECORDING_JOB_SUCCESS_MSG);
 		} catch (Exception e) {
 			ControlPanel.getDefault().getLogger().log(Level.WARNING, "Could not update recording", e); //$NON-NLS-1$
 			return StatusFactory.createErr(
 					NLS.bind(Messages.UPDATE_RECORDING_JOB_SERVICE_ERROR_MSG, m_recordingDescriptor.getName()));
-		} finally {
-			IOToolkit.closeSilently(connection);
 		}
 	}
 }
