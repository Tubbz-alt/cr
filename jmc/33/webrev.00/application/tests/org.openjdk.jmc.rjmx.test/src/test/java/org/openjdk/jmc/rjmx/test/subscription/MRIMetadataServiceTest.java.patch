diff a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/subscription/MRIMetadataServiceTest.java b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/subscription/MRIMetadataServiceTest.java
--- a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/subscription/MRIMetadataServiceTest.java
+++ b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/subscription/MRIMetadataServiceTest.java
@@ -90,17 +90,19 @@
 		handle.close();
 	}
 
 	@Test
 	public void testGetExtendedProperties() throws Exception {
-		IConnectionHandle handle = IServerHandle.create(LocalRJMXTestToolkit.createDefaultDescriptor()).connect("Test");
-		IMRIMetadataService service = LocalRJMXTestToolkit.getInfoService(handle);
-		IMRIMetadata info = service
-				.getMetadata(new MRI(Type.ATTRIBUTE, "java.lang:type=Memory", "HeapMemoryUsage/used"));
-		assertNotNull(info);
-		assertTrue("Should be numerical", MRIMetadataToolkit.isNumerical(info));
-		assertNotNull(info.getMetadata("color"));
+		try (IConnectionHandle handle = IServerHandle.create(LocalRJMXTestToolkit.createDefaultDescriptor())
+				.connect("Test")) {
+			IMRIMetadataService service = LocalRJMXTestToolkit.getInfoService(handle);
+			IMRIMetadata info = service
+					.getMetadata(new MRI(Type.ATTRIBUTE, "java.lang:type=Memory", "HeapMemoryUsage/used"));
+			assertNotNull(info);
+			assertTrue("Should be numerical", MRIMetadataToolkit.isNumerical(info));
+			assertNotNull(info.getMetadata("color"));
+		}
 	}
 
 	@Test
 	public void testGetNumericalMetadata() throws Exception {
 		IConnectionHandle handle = IServerHandle.create(LocalRJMXTestToolkit.createDefaultDescriptor()).connect("Test");
