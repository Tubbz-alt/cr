diff a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/PackageExampleTest.java b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/PackageExampleTest.java
--- a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/PackageExampleTest.java
+++ b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/PackageExampleTest.java
@@ -74,35 +74,29 @@
 	 */
 	@Test
 	public void testPackageExampleVerbatim() throws Exception {
 		IConnectionDescriptor descriptor = new ConnectionDescriptorBuilder().hostName("localhost").port(0).build();
 		IServerHandle serverHandle = IServerHandle.create(descriptor);
-		IConnectionHandle handle = serverHandle.connect("Usage description");
-		try {
+		try (IConnectionHandle handle = serverHandle.connect("Usage description")) {
 			ISubscriptionService service = handle.getServiceOrThrow(ISubscriptionService.class);
 			MRI attribute = new MRI(Type.ATTRIBUTE, "java.lang:type=Threading", "ThreadCount");
 			service.addMRIValueListener(attribute, new IMRIValueListener() {
 				@Override
 				public void valueChanged(MRIValueEvent event) {
 					System.out.println(event.getValue());
 				}
 			});
 			IMRISubscription subscription = service.getMRISubscription(attribute);
 			subscription.setUpdatePolicy(PolicyFactory.createSimpleUpdatePolicy(1500));
-		} finally {
-			// Always close IConnectionHandle when done
-			IOToolkit.closeSilently(handle);
 		}
-
 	}
 
 	@Test
 	public void testPackageExampleFunctionality() throws Exception {
 		ConnectionDescriptorBuilder builder = new ConnectionDescriptorBuilder();
 		IConnectionDescriptor descriptor = builder.hostName("localhost").port(0).build();
-		IConnectionHandle handle = IServerHandle.create(descriptor).connect("Usage description");
-		try {
+		try (IConnectionHandle handle = IServerHandle.create(descriptor).connect("Usage description")) {
 			ISubscriptionService service = handle.getServiceOrThrow(ISubscriptionService.class);
 			gotEvent = false;
 			MRI attribute = new MRI(Type.ATTRIBUTE, "java.lang:type=Threading", "ThreadCount");
 			service.addMRIValueListener(attribute, new IMRIValueListener() {
 				@Override
@@ -116,12 +110,10 @@
 			IMRISubscription subscription = service.getMRISubscription(attribute);
 			subscription.setUpdatePolicy(PolicyFactory.createSimpleUpdatePolicy(1500));
 			synchronized (PackageExampleTest.this) {
 				this.wait(4000);
 			}
-		} finally {
-			IOToolkit.closeSilently(handle);
 		}
 		assertTrue("Never got any event!", gotEvent);
 	}
 
 	@Test
@@ -129,16 +121,13 @@
 		IServerModel model = RJMXPlugin.getDefault().getService(IServerModel.class);
 		for (IServer server : model.elements()) {
 			IServerDescriptor descriptor = server.getServerHandle().getServerDescriptor();
 			if (descriptor.getJvmInfo() != null
 					&& Integer.valueOf(Environment.getThisPID()).equals(descriptor.getJvmInfo().getPid())) {
-				IConnectionHandle handle = server.getServerHandle().connect("Usage description");
-				try {
+				try (IConnectionHandle handle = server.getServerHandle().connect("Usage description")) {
 					handle.getServiceOrThrow(IMBeanHelperService.class).getMBeanNames().size();
 					return;
-				} finally {
-					IOToolkit.closeSilently(handle);
 				}
 			}
 		}
 	}
 }
