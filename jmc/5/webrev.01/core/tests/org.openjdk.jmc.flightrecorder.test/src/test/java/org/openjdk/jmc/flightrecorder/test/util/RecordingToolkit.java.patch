diff a/core/tests/org.openjdk.jmc.flightrecorder.test/src/test/java/org/openjdk/jmc/flightrecorder/test/util/RecordingToolkit.java b/core/tests/org.openjdk.jmc.flightrecorder.test/src/test/java/org/openjdk/jmc/flightrecorder/test/util/RecordingToolkit.java
--- a/core/tests/org.openjdk.jmc.flightrecorder.test/src/test/java/org/openjdk/jmc/flightrecorder/test/util/RecordingToolkit.java
+++ b/core/tests/org.openjdk.jmc.flightrecorder.test/src/test/java/org/openjdk/jmc/flightrecorder/test/util/RecordingToolkit.java
@@ -65,18 +65,20 @@
 
 	public static IOResourceSet getRecordings() throws IOException {
 		return TestToolkit.getResourcesInDirectory(RecordingToolkit.class, RECORDINGS_DIRECTORY, RECORDINGS_INDEXFILE);
 	}
 
-	public static IItemCollection getNamedRecording(String recordingName) throws IOException, CouldNotLoadRecordingException {
-		return getFlightRecording(TestToolkit.getNamedResource(RecordingToolkit.class, RECORDINGS_DIRECTORY, recordingName));
+	public static IItemCollection getNamedRecording(String recordingName)
+			throws IOException, CouldNotLoadRecordingException {
+		return getFlightRecording(
+				TestToolkit.getNamedResource(RecordingToolkit.class, RECORDINGS_DIRECTORY, recordingName));
 	}
-	
+
 	public static InputStream getNamedRecordingResource(String recordingName) throws IOException {
 		return TestToolkit.getNamedResource(RecordingToolkit.class, RECORDINGS_DIRECTORY, recordingName).open();
 	}
-	
+
 	public static IItemCollection getFlightRecording(IOResourceSet resourceSet)
 			throws IOException, CouldNotLoadRecordingException {
 		return getFlightRecording(resourceSet.getResource(0));
 	}
 
@@ -92,11 +94,11 @@
 		}
 		IOToolkit.closeSilently(os);
 		IOToolkit.closeSilently(is);
 		return JfrLoaderToolkit.loadEvents(tmpRecording);
 	}
-	
+
 	public static File createResultFile(String prefix, String suffix, boolean deleteTempOnExit) throws IOException {
 		String resultDir = System.getProperty("results.dir");
 		File resultFile;
 		if (resultDir != null) {
 			resultFile = new File(resultDir, prefix + '.' + System.currentTimeMillis() + '.' + suffix);
