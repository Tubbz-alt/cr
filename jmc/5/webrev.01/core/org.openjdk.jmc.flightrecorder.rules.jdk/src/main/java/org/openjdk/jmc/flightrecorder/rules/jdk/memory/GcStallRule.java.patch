diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcStallRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcStallRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcStallRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcStallRule.java
@@ -95,12 +95,11 @@
 					JdkQueries.CONCURRENT_MODE_FAILURE);
 		}
 
 		EventAvailability eventAvailability = RulesToolkit.getEventAvailability(items,
 				JdkTypeIDs.CONCURRENT_MODE_FAILURE, JdkTypeIDs.GC_CONF, JdkTypeIDs.GARBAGE_COLLECTION);
-		if (eventAvailability != EventAvailability.AVAILABLE
-				&& eventAvailability != EventAvailability.ENABLED) {
+		if (eventAvailability != EventAvailability.AVAILABLE && eventAvailability != EventAvailability.ENABLED) {
 			return RulesToolkit.getEventAvailabilityResult(this, items, eventAvailability,
 					JdkTypeIDs.CONCURRENT_MODE_FAILURE, JdkTypeIDs.GC_CONF, JdkTypeIDs.GARBAGE_COLLECTION);
 		}
 		return new Result(this, 0, Messages.getString(Messages.GcStallRule_TEXT_OK));
 	}
