diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java
@@ -77,11 +77,11 @@
 
 		double versionScore = versionResult.getScore();
 		double timeConversionScore = timeConversionResult.getScore();
 
 		if (versionScore > 0 || timeConversionScore > 0) {
-			return versionResult.getScore() > timeConversionResult.getScore() ? versionResult : timeConversionResult;			
+			return versionResult.getScore() > timeConversionResult.getScore() ? versionResult : timeConversionResult;
 		}
 		// If no rule reported a warning or error, return the rule with the lowest score,
 		// meaning it was NotApplicable, Failed or Ignored.
 		return versionScore < timeConversionScore ? versionResult : timeConversionResult;
 	}
@@ -120,11 +120,11 @@
 	private Result getVersionResult(String versionString) {
 		JavaVersion usedVersion = RulesToolkit.getJavaVersion(versionString);
 
 		if (usedVersion == null) {
 			return RulesToolkit.getNotApplicableResult(this,
-                    Messages.getString(Messages.General_TEXT_COULD_NOT_DETERMINE_JAVA_VERSION));
+					Messages.getString(Messages.General_TEXT_COULD_NOT_DETERMINE_JAVA_VERSION));
 		}
 
 		if (!usedVersion.isGreaterOrEqualThan(JDK_7_U_40)) {
 			return new Result(this, 100,
 					Messages.getString(Messages.FlightRecordingSupportRule_UNSUPPORTED_TEXT_WARN_SHORT),
