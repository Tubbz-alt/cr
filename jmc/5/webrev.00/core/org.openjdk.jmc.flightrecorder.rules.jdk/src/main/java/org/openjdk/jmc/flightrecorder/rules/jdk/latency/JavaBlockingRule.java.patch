diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
@@ -127,15 +127,15 @@
 
 		// Significant blocking detected - do more calculations
 		String mostBlockingText;
 		if (byThread.compareTo(byInstance) > 0) {
 			List<IntEntry<IMCThread>> groupedByThread = RulesToolkit.calculateGroupingScore(
-					items.apply(ItemFilters.type(JdkTypeIDs.MONITOR_ENTER)),JfrAttributes.EVENT_THREAD);
+					items.apply(ItemFilters.type(JdkTypeIDs.MONITOR_ENTER)), JfrAttributes.EVENT_THREAD);
 			IntEntry<IMCThread> mostBlockedThread = groupedByThread.get(groupedByThread.size() - 1);
 
-			IItemCollection mostBlockedThreadOccurences = items.apply(
-					ItemFilters.equals(JfrAttributes.EVENT_THREAD, mostBlockedThread.getKey()));
+			IItemCollection mostBlockedThreadOccurences = items
+					.apply(ItemFilters.equals(JfrAttributes.EVENT_THREAD, mostBlockedThread.getKey()));
 			IQuantity mostBlockingTime = mostBlockedThreadOccurences.getAggregate(JdkAggregators.TOTAL_BLOCKED_TIME);
 
 			mostBlockingText = MessageFormat.format(
 					Messages.getString(Messages.JavaBlockingRule_TEXT_MOST_BLOCKED_THREAD),
 					Encode.forHtml(mostBlockedThread.getKey().getThreadName()), mostBlockedThread.getValue(),
@@ -143,12 +143,12 @@
 		} else {
 			List<IntEntry<IMCType>> groupedByClass = RulesToolkit.calculateGroupingScore(
 					items.apply(ItemFilters.type(JdkTypeIDs.MONITOR_ENTER)), JdkAttributes.MONITOR_CLASS);
 			IntEntry<IMCType> mostBlockingClass = groupedByClass.get(groupedByClass.size() - 1);
 
-			IItemCollection mostBlockedClassOccurences = items.apply(
-					ItemFilters.equals(JdkAttributes.MONITOR_CLASS, mostBlockingClass.getKey()));
+			IItemCollection mostBlockedClassOccurences = items
+					.apply(ItemFilters.equals(JdkAttributes.MONITOR_CLASS, mostBlockingClass.getKey()));
 			IQuantity mostBlockingTime = mostBlockedClassOccurences.getAggregate(JdkAggregators.TOTAL_BLOCKED_TIME);
 
 			mostBlockingText = MessageFormat.format(
 					Messages.getString(Messages.JavaBlockingRule_TEXT_MOST_BLOCKED_CLASS),
 					Encode.forHtml(mostBlockingClass.getKey().getTypeName()), mostBlockingClass.getValue(),
