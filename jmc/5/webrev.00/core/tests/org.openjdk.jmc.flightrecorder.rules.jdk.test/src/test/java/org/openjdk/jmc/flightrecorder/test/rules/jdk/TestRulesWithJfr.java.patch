diff a/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/java/org/openjdk/jmc/flightrecorder/test/rules/jdk/TestRulesWithJfr.java b/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/java/org/openjdk/jmc/flightrecorder/test/rules/jdk/TestRulesWithJfr.java
--- a/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/java/org/openjdk/jmc/flightrecorder/test/rules/jdk/TestRulesWithJfr.java
+++ b/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/java/org/openjdk/jmc/flightrecorder/test/rules/jdk/TestRulesWithJfr.java
@@ -103,20 +103,20 @@
 	private static final String BASELINE_DIR = "baseline";
 	static final String RECORDINGS_DIR = "jfr";
 	static final String RECORDINGS_INDEXFILE = "index.txt";
 
 	private TimeZone defaultTimeZone;
-	
+
 	@Before
 	public void before() {
 		// empty the log before each test
 		DetailsTracker.clear();
 		// force UTC time zone during test
 		defaultTimeZone = TimeZone.getDefault();
 		TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
 	}
-	
+
 	@After
 	public void after() {
 		// restore previous default time zone
 		TimeZone.setDefault(defaultTimeZone);
 	}
@@ -131,11 +131,12 @@
 	public void verifyAllResults() throws IOException {
 		verifyRuleResults(false);
 	}
 
 	private void verifyRuleResults(boolean onlyOneRecording) throws IOException {
-		IOResourceSet jfrs = TestToolkit.getResourcesInDirectory(TestRulesWithJfr.class, RECORDINGS_DIR, RECORDINGS_INDEXFILE);
+		IOResourceSet jfrs = TestToolkit.getResourcesInDirectory(TestRulesWithJfr.class, RECORDINGS_DIR,
+				RECORDINGS_INDEXFILE);
 		String reportName = null;
 		if (onlyOneRecording) {
 			IOResource firstJfr = jfrs.iterator().next();
 			jfrs = new IOResourceSet(firstJfr);
 			reportName = firstJfr.getName();
@@ -239,12 +240,11 @@
 		try {
 			IItemCollection events = JfrLoaderToolkit.loadEvents(jfr.open());
 
 			for (IRule rule : RuleRegistry.getRules()) {
 				try {
-					RunnableFuture<Result> future = rule.evaluate(events,
-							IPreferenceValueProvider.DEFAULT_VALUES);
+					RunnableFuture<Result> future = rule.evaluate(events, IPreferenceValueProvider.DEFAULT_VALUES);
 					future.run();
 					Result result = future.get();
 //					for (Result result : results) {
 					if (minSeverity == null || Severity.get(result.getScore()).compareTo(minSeverity) >= 0) {
 						ItemSet itemSet = null;
@@ -528,12 +528,12 @@
 		public boolean compareAndLog(Object other) {
 			RuleResult otherRule = (RuleResult) other;
 			boolean scoreEquals = Objects.equals(score, otherRule.score);
 			if (!scoreEquals) {
 				// determine if this is just a rounding error
-				scoreEquals = (Math.abs(Float.valueOf(score) - Float.valueOf(otherRule.score)) < 0.0000000000001f) ? true
-						: false;
+				scoreEquals = (Math.abs(Float.valueOf(score) - Float.valueOf(otherRule.score)) < 0.0000000000001f)
+						? true : false;
 				if (scoreEquals) {
 					// apparently a rounding issue. Print it out for informational purposes
 					System.out
 							.println("Rule \"" + id + "\": Encountered rounding issue for score when comparing values "
 									+ score + " and " + otherRule.score);
