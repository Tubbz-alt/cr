diff a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/TypeHandling.java b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/TypeHandling.java
--- a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/TypeHandling.java
+++ b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/TypeHandling.java
@@ -231,21 +231,14 @@
 		}
 		return false;
 	}
 
 	/**
-	 * Check for missing values, and return the numeric value in string format
-	 *
-	 * JMC-6256: JMC doesn't respect Long.MIN_VALUE as a missing value
-	 *
-	 * As per the bug report, the following values should be considered "missing"
-	 * - Integer.MIN_VALUE
-	 * - Long.MIN_VALUE
-	 * - Double.NaN
-	 * - Double.NEGATIVE_INFINITY
-	 * - Float.NaN
-	 * - Float.NEGATIVE_INFINITY
+	 * Check for missing values, and return the numeric value in string format JMC-6256: JMC doesn't
+	 * respect Long.MIN_VALUE as a missing value As per the bug report, the following values should
+	 * be considered "missing" - Integer.MIN_VALUE - Long.MIN_VALUE - Double.NaN -
+	 * Double.NEGATIVE_INFINITY - Float.NaN - Float.NEGATIVE_INFINITY
 	 *
 	 * @param value
 	 *            the numeric value to be converted to a string
 	 * @return a string with the numeric value, or a N/A message
 	 */
@@ -259,20 +252,21 @@
 			if (value.longValue() == Long.MIN_VALUE) {
 				sb.append(MessageFormat.format(Messages.getString(Messages.MISSING_VALUE_TOOLTIP), LONG_MIN_VALUE));
 			}
 		} else if (value.getClass() == Double.class) {
 			if (value.doubleValue() == Double.NEGATIVE_INFINITY) {
-				sb.append(MessageFormat.format(Messages.getString(Messages.MISSING_VALUE_TOOLTIP), DOUBLE_NEGATIVE_INFINITY));
+				sb.append(MessageFormat.format(Messages.getString(Messages.MISSING_VALUE_TOOLTIP),
+						DOUBLE_NEGATIVE_INFINITY));
 			} else if (Double.isNaN(value.doubleValue())) {
 				sb.append(MessageFormat.format(Messages.getString(Messages.MISSING_VALUE_TOOLTIP), DOUBLE_NAN));
 			}
 		} else if (value.getClass() == Float.class) {
 			if (Float.isNaN(value.floatValue())) {
 				sb.append(MessageFormat.format(Messages.getString(Messages.MISSING_VALUE_TOOLTIP), FLOAT_NAN));
-			}
-			else if (value.floatValue() == Float.NEGATIVE_INFINITY) {
-				sb.append(MessageFormat.format(Messages.getString(Messages.MISSING_VALUE_TOOLTIP), FLOAT_NEGATIVE_INFINITY));
+			} else if (value.floatValue() == Float.NEGATIVE_INFINITY) {
+				sb.append(MessageFormat.format(Messages.getString(Messages.MISSING_VALUE_TOOLTIP),
+						FLOAT_NEGATIVE_INFINITY));
 			}
 		}
 		if (sb.length() == 0) {
 			sb.append(TypeHandling.getValueString(value));
 		}
