diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/memleak/ReferenceTreeModel.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/memleak/ReferenceTreeModel.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/memleak/ReferenceTreeModel.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/memleak/ReferenceTreeModel.java
@@ -256,22 +256,23 @@
 		return objects;
 	}
 
 	/**
 	 * A helper method to calculate number of Referenced Object within specified period.
+	 * 
 	 * @param timerange
 	 *            a range of time that specifies which root objects to retrieve
 	 * @param referenceTreeObject
 	 *            leak candidate
-	 * @return number of leaked object during the specified timerange for a given
-	 * 			  leak candidate
+	 * @return number of leaked object during the specified timerange for a given leak candidate
 	 */
 	public int getLeakCountInRange(IRange<IQuantity> timerange, ReferenceTreeObject referenceTreeObject) {
 		int referencecount = 0;
 		for (ReferenceTreeObject rtObject : leakObjects) {
-			if (rtObject.getRootObject().equals(referenceTreeObject.getRootObject()) &&
-					timerange.getStart().compareTo(rtObject.getTimestamp()) <= 0 && timerange.getEnd().compareTo(rtObject.getTimestamp()) >= 0) {
+			if (rtObject.getRootObject().equals(referenceTreeObject.getRootObject())
+					&& timerange.getStart().compareTo(rtObject.getTimestamp()) <= 0
+					&& timerange.getEnd().compareTo(rtObject.getTimestamp()) >= 0) {
 				++referencecount;
 			}
 		}
 		return referencecount;
 	}
@@ -354,12 +355,11 @@
 
 					// Update Root Object with oldObjectSample ref
 					ReferenceTreeObject parent = node.getParent();
 					if (parent == null) {
 						node.updateOldObjectSamples(map.get(objectAccessor.getMember(item).getAddress()));
-					}
-					else {
+					} else {
 						while (parent.getParent() != null) {
 							parent = parent.getParent();
 						}
 						parent.updateOldObjectSamples(map.get(objectAccessor.getMember(item).getAddress()));
 					}
