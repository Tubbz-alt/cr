diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
@@ -37,25 +37,31 @@
 import java.util.List;
 
 public class TraceNode {
 	private final int value;
 	private final String name;
+	private final String packageName;
 	private final List<TraceNode> children = new ArrayList<>();
 
-	public TraceNode(String name, int value) {
+	public TraceNode(String name, int value, String packageName) {
 		this.name = name;
 		this.value = value;
+		this.packageName = packageName;
 	}
 
 	public int getValue() {
 		return value;
 	}
 
 	public String getName() {
 		return name;
 	}
 
+	public String getPackageName() {
+		return packageName;
+	}
+
 	public List<TraceNode> getChildren() {
 		return children;
 	}
 
 	public void addChild(TraceNode child) {
@@ -66,10 +72,11 @@
 	public int hashCode() {
 		final int prime = 31;
 		int result = 1;
 		result = prime * result + ((children == null) ? 0 : children.hashCode());
 		result = prime * result + ((name == null) ? 0 : name.hashCode());
+		result = prime * result + ((packageName == null) ? 0 : packageName.hashCode());
 		result = prime * result + value;
 		return result;
 	}
 
 	@Override
@@ -89,14 +96,21 @@
 		if (name == null) {
 			if (other.name != null)
 				return false;
 		} else if (!name.equals(other.name))
 			return false;
+		if (packageName == null) {
+			if (other.packageName != null) {
+				return false;
+			}
+		} else if (!packageName.equals(other.packageName))
+			return false;
 		if (value != other.value)
 			return false;
 		return true;
 	}
 
 	public String toString() {
-		return "TraceNode [name: " + name + ", value: " + value + ", children: " + children.size() + "]";
+		return "TraceNode [name: " + name + ", value: " + value + ", packageName: " + packageName + ", children: "
+				+ children.size() + "]";
 	}
 }
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
@@ -44,10 +44,11 @@
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFrame;
 
 public class TraceTreeUtils {
 	public final static String DEFAULT_ROOT_NAME = "__root";
+	public final static String DEFAULT_ROOT_PACKAGE_NAME = "";
 	public final static FrameSeparator DEFAULT_FRAME_SEPARATOR = new FrameSeparator(FrameCategorization.METHOD, false);
 
 	/**
 	 * Traces a TraceTree from a {@link StacktraceModel}.
 	 *
@@ -55,11 +56,12 @@
 	 *            the model to trace the tree from.
 	 * @return the root.
 	 */
 	public static TraceNode createTree(StacktraceModel model, String rootName) {
 		Fork rootFork = model.getRootFork();
-		TraceNode root = new TraceNode(rootName == null ? DEFAULT_ROOT_NAME : rootName, rootFork.getItemsInFork());
+		TraceNode root = new TraceNode(rootName == null ? DEFAULT_ROOT_NAME : rootName, rootFork.getItemsInFork(),
+				DEFAULT_ROOT_PACKAGE_NAME);
 		for (Branch branch : rootFork.getBranches()) {
 			addBranch(root, branch);
 		}
 		return root;
 	}
@@ -76,14 +78,15 @@
 		return createTree(new StacktraceModel(threadRootAtTop, frameSeparator, items), rootName);
 	}
 
 	private static void addBranch(TraceNode root, Branch branch) {
 		StacktraceFrame firstFrame = branch.getFirstFrame();
-		TraceNode currentNode = new TraceNode(format(firstFrame), firstFrame.getItemCount());
+		TraceNode currentNode = new TraceNode(format(firstFrame), firstFrame.getItemCount(),
+				formatPackageName(firstFrame));
 		root.addChild(currentNode);
 		for (StacktraceFrame frame : branch.getTailFrames()) {
-			TraceNode newNode = new TraceNode(format(frame), frame.getItemCount());
+			TraceNode newNode = new TraceNode(format(frame), frame.getItemCount(), formatPackageName(frame));
 			currentNode.addChild(newNode);
 			currentNode = newNode;
 		}
 		addFork(currentNode, branch.getEndFork());
 	}
@@ -98,10 +101,16 @@
 		IMCFrame frame = sFrame.getFrame();
 		IMCMethod method = frame.getMethod();
 		return FormatToolkit.getHumanReadable(method, false, false, true, false, true, false);
 	}
 
+	private static String formatPackageName(StacktraceFrame sFrame) {
+		IMCFrame frame = sFrame.getFrame();
+		IMCMethod method = frame.getMethod();
+		return FormatToolkit.getPackage(method.getType().getPackage());
+	}
+
 	public static String printTree(TraceNode node) {
 		StringBuilder builder = new StringBuilder();
 		builder.append("=== Tree Printout ===");
 		builder.append(System.lineSeparator());
 		printTree(builder, 0, node);
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -32,11 +32,10 @@
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.flightrecorder.flameview.views;
 
 import java.io.IOException;
-
 import java.text.MessageFormat;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -91,17 +90,19 @@
 		String jsD3V4 = "jslibs/d3.v4.min.js";
 		// from: https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.9.1/d3-tip.min.js
 		String jsD3Tip = "jslibs/d3-tip.min.js";
 		// from: https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.min.js
 		String jsD3FlameGraph = "jslibs/d3-flamegraph.min.js";
+		// jmc flameview coloring functions
+		String jsFlameviewColoring = "jsjmclibs/flameviewColoring.js";
 
 		String jsIeLibraries = loadLibraries(jsHtml5shiv, jsRespond);
 		String jsD3Libraries = loadLibraries(jsD3V4, jsD3Tip, jsD3FlameGraph);
 
-		// formatter arguments for the template: %1 - CSSs, %2 - IE9 specific scripts, %3 - 3rd party scripts
+		// formatter arguments for the template: %1 - CSSs, %2 - IE9 specific scripts, %3 - 3rd party scripts %4 - 4th Flameview Coloring
 		HTML_PAGE = String.format(fileContent("page.template"), fileContent(cssD3Flamegraph), jsIeLibraries,
-				jsD3Libraries);
+				jsD3Libraries, fileContent(jsFlameviewColoring));
 	}
 
 	private static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(1);
 	private FrameSeparator frameSeparator;
 
@@ -250,12 +251,12 @@
 		render(builder, root);
 		return builder.toString();
 	}
 
 	private static void render(StringBuilder builder, TraceNode node) {
-		String start = String.format("{%s,%s, \"c\": [ ", toJSonKeyValue("n", node.getName()),
-				toJSonKeyValue("v", String.valueOf(node.getValue())));
+		String start = String.format("{%s,%s,%s, \"c\": [ ", toJSonKeyValue("n", node.getName()),
+				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("v", String.valueOf(node.getValue())));
 		builder.append(start);
 		for (int i = 0; i < node.getChildren().size(); i++) {
 			render(builder, node.getChildren().get(i));
 			if (i < node.getChildren().size() - 1) {
 				builder.append(",");
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/jsjmclibs/flameviewColoring.js b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/jsjmclibs/flameviewColoring.js
--- /dev/null
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/jsjmclibs/flameviewColoring.js
@@ -0,0 +1,90 @@
+String.prototype.hashCode = function () {
+    var hash = 0;
+    if (this.length === 0) return hash;
+    for (var i = 0; i < this.length; i++) {
+        var char = this.charCodeAt(i);
+        hash = ((hash << 5) - hash) + char;
+        hash = hash & hash;
+    }
+    return hash;
+};
+
+const rootPackageColor = "darkred";
+const invalidPackageColor = "snow";
+const packageJavaColorLightGray = "lightgray";
+const packageComSunAndJdkColorDarkGray = "darkgray";
+const packageSunDarkColorGray = "gray";
+const packageRestValueHMax = 360;
+const packageRestValueH = 0;
+const packageRestSLValues = [42, 53];
+const packageConsideredDepth = 3;
+const packageMarkerJava = "java";
+const packageMarkerSun = "sun";
+const packageMarkerComSunAndJdk = "comSunAndJdk";
+const packageMarkerRest = "rest";
+const packagesIdentifierMap = new Map().set("java.", packageMarkerJava).set("sun.", packageMarkerSun)
+    .set("com.sun.", packageMarkerComSunAndJdk).set("jdk.", packageMarkerComSunAndJdk);
+const packageColorMap = new Map().set("", rootPackageColor);
+
+const colorByPackage = function (p) {
+    if (p === undefined) {
+        return invalidPackageColor;
+    } else {
+        const packageNameStrip = stripPackageName(p);
+        const packageSelectedColor = packageColorMap.get(packageNameStrip);
+        if (packageSelectedColor === undefined) {
+            const packageMarkerSelected = getPackageMarker(packageNameStrip);
+            const packageNameStripHash = packageNameStrip.hashCode();
+            switch (packageMarkerSelected) {
+                case packageMarkerJava:
+                    packageColorMap.set(packageNameStrip, packageJavaColorLightGray);
+                    break;
+                case packageMarkerComSunAndJdk:
+                    packageColorMap.set(packageNameStrip, packageComSunAndJdkColorDarkGray);
+                    break;
+                case packageMarkerSun:
+                    packageColorMap.set(packageNameStrip, packageSunDarkColorGray);
+                    break;
+                case packageMarkerRest:
+                    const packageRestSelectedColor = createHslColorString(adjustHslPropertyByHash(packageNameStripHash, packageRestValueH, packageRestValueHMax), packageRestSLValues[0], packageRestSLValues[1]);
+                    packageColorMap.set(packageNameStrip, packageRestSelectedColor);
+                    break;
+            }
+            return packageColorMap.get(packageNameStrip);
+        } else {
+            return packageSelectedColor;
+        }
+    }
+};
+
+const getPackageMarker = function(p){
+    for(let k of packagesIdentifierMap.keys()){
+        if(p.startsWith(k)){
+            return packagesIdentifierMap.get(k);
+        }
+    }
+    return packageMarkerRest;
+};
+
+const stripPackageName = function (p) {
+    const splitString = p.split("\u002E");
+    const number = Math.min(splitString.length, packageConsideredDepth);
+    return splitString.slice(0, number).join("\u002E");
+};
+
+const adjustHslPropertyByHash = function (hash, min, max) {
+	const proposedValue = hash % (max - min) + min;
+	return Math.min(proposedValue, max);
+};
+
+const createHslColorString = function(h,s,l){
+    return "hsl\u0028" + h + "\u002c " + s + "\u0025\u002c " + l + "\u0025\u0029";
+};
+
+const colorCell = function (d) {
+    return colorByPackage(d.data.p);
+};
+
+const adjustTip = function (d) {
+	return d.data.n + "\u003Cbr\u002F\u003Epackage: " + d.data.p + "\u003Cbr\u002F\u003Esamples: " + d.data.v;
+};
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template
@@ -11,22 +11,34 @@
 </head>
 
 <body onresize="resizeFlameGraph()">
 	<div id="chart"></div>
 	<script type="text/javascript">%3$s</script>
+	<script type="text/javascript">%4$s</script>
 	<script type="text/javascript">
-
+	
 		var flameGraph;
 		var currentJson;
+		
+		const tip = d3.tip()
+        	.direction("s")
+        	.offset([8, 0])
+        	.attr('class', 'd3-flame-graph-tip')
+        	.html(adjustTip);
 
 		function processGraph(jsonObj) {
 			flameGraph = d3.flamegraph()
 				.width(windowSize() * 0.9)
+				.cellHeight(18)
 				.transitionDuration(500)
+				.minFrameSize(5)
 				.transitionEase(d3.easeCubic)
 				.sort(true)
-				.title("");
+				.title("")
+				.differential(false)
+				.tooltip(tip)
+				.color(colorCell);
 			currentJson = jsonObj;
 			d3.select("#chart")
 				.datum(currentJson)
 				.call(flameGraph);
 		}
