diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
@@ -44,10 +44,11 @@
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFrame;
 
 public class TraceTreeUtils {
 	public final static String DEFAULT_ROOT_NAME = "__root";
+	public final static String DEFAULT_ROOT_PACKAGE_NAME = "";
 	public final static FrameSeparator DEFAULT_FRAME_SEPARATOR = new FrameSeparator(FrameCategorization.METHOD, false);
 
 	/**
 	 * Traces a TraceTree from a {@link StacktraceModel}.
 	 *
@@ -55,11 +56,12 @@
 	 *            the model to trace the tree from.
 	 * @return the root.
 	 */
 	public static TraceNode createTree(StacktraceModel model, String rootName) {
 		Fork rootFork = model.getRootFork();
-		TraceNode root = new TraceNode(rootName == null ? DEFAULT_ROOT_NAME : rootName, rootFork.getItemsInFork());
+		TraceNode root = new TraceNode(rootName == null ? DEFAULT_ROOT_NAME : rootName, rootFork.getItemsInFork(),
+				DEFAULT_ROOT_PACKAGE_NAME);
 		for (Branch branch : rootFork.getBranches()) {
 			addBranch(root, branch);
 		}
 		return root;
 	}
@@ -76,14 +78,16 @@
 		return createTree(new StacktraceModel(threadRootAtTop, frameSeparator, items), rootName);
 	}
 
 	private static void addBranch(TraceNode root, Branch branch) {
 		StacktraceFrame firstFrame = branch.getFirstFrame();
-		TraceNode currentNode = new TraceNode(format(firstFrame), firstFrame.getItemCount());
+		TraceNode currentNode = new TraceNode(format(firstFrame), firstFrame.getItemCount(),
+				formatPackageName(firstFrame));
 		root.addChild(currentNode);
 		for (StacktraceFrame frame : branch.getTailFrames()) {
-			TraceNode newNode = new TraceNode(format(frame), frame.getItemCount());
+			TraceNode newNode = new TraceNode(format(frame), frame.getItemCount(),
+					formatPackageName(frame));
 			currentNode.addChild(newNode);
 			currentNode = newNode;
 		}
 		addFork(currentNode, branch.getEndFork());
 	}
@@ -97,10 +101,16 @@
 	private static String format(StacktraceFrame sFrame) {
 		IMCFrame frame = sFrame.getFrame();
 		IMCMethod method = frame.getMethod();
 		return FormatToolkit.getHumanReadable(method, false, false, true, false, true, false);
 	}
+	
+	private static String formatPackageName(StacktraceFrame sFrame) {
+		IMCFrame frame = sFrame.getFrame();
+		IMCMethod method = frame.getMethod();
+		return FormatToolkit.getPackage(method.getType().getPackage());
+	}
 
 	public static String printTree(TraceNode node) {
 		StringBuilder builder = new StringBuilder();
 		builder.append("=== Tree Printout ===");
 		builder.append(System.lineSeparator());
