diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
@@ -53,11 +53,11 @@
 	}
 
 	public String getName() {
 		return name;
 	}
-	
+
 	public String getPackageName() {
 		return packageName;
 	}
 
 	public List<TraceNode> getChildren() {
@@ -97,19 +97,20 @@
 			if (other.name != null)
 				return false;
 		} else if (!name.equals(other.name))
 			return false;
 		if (packageName == null) {
-			if(other.packageName != null) {
+			if (other.packageName != null) {
 				return false;
 			}
 		} else if (!packageName.equals(other.packageName))
 			return false;
 		if (value != other.value)
 			return false;
 		return true;
 	}
 
 	public String toString() {
-		return "TraceNode [name: " + name + ", value: " + value + ", packageName: " + packageName + ", children: " + children.size() + "]";
+		return "TraceNode [name: " + name + ", value: " + value + ", packageName: " + packageName + ", children: "
+				+ children.size() + "]";
 	}
 }
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
@@ -82,12 +82,11 @@
 		StacktraceFrame firstFrame = branch.getFirstFrame();
 		TraceNode currentNode = new TraceNode(format(firstFrame), firstFrame.getItemCount(),
 				formatPackageName(firstFrame));
 		root.addChild(currentNode);
 		for (StacktraceFrame frame : branch.getTailFrames()) {
-			TraceNode newNode = new TraceNode(format(frame), frame.getItemCount(),
-					formatPackageName(frame));
+			TraceNode newNode = new TraceNode(format(frame), frame.getItemCount(), formatPackageName(frame));
 			currentNode.addChild(newNode);
 			currentNode = newNode;
 		}
 		addFork(currentNode, branch.getEndFork());
 	}
@@ -101,11 +100,11 @@
 	private static String format(StacktraceFrame sFrame) {
 		IMCFrame frame = sFrame.getFrame();
 		IMCMethod method = frame.getMethod();
 		return FormatToolkit.getHumanReadable(method, false, false, true, false, true, false);
 	}
-	
+
 	private static String formatPackageName(StacktraceFrame sFrame) {
 		IMCFrame frame = sFrame.getFrame();
 		IMCMethod method = frame.getMethod();
 		return FormatToolkit.getPackage(method.getType().getPackage());
 	}
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -252,12 +252,11 @@
 		return builder.toString();
 	}
 
 	private static void render(StringBuilder builder, TraceNode node) {
 		String start = String.format("{%s,%s,%s, \"c\": [ ", toJSonKeyValue("n", node.getName()),
-				toJSonKeyValue("p", node.getPackageName()),
-				toJSonKeyValue("v", String.valueOf(node.getValue())));
+				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("v", String.valueOf(node.getValue())));
 		builder.append(start);
 		for (int i = 0; i < node.getChildren().size(); i++) {
 			render(builder, node.getChildren().get(i));
 			if (i < node.getChildren().size() - 1) {
 				builder.append(",");
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/jsjmclibs/flameviewColoring.js b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/jsjmclibs/flameviewColoring.js
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/jsjmclibs/flameviewColoring.js
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/jsjmclibs/flameviewColoring.js
@@ -72,36 +72,15 @@
     const splitString = p.split("\u002E");
     const number = Math.min(splitString.length, packageConsideredDepth);
     return splitString.slice(0, number).join("\u002E");
 };
 
-const modulo = function(a, b){
-    if (b === 0 || isNaN(a) || isNaN(b)) {
-        return NaN;
-    }
-
-    a = Math.abs(a);
-    b = Math.abs(b);
-
-    while (a >= b) {
-        a = a - b;
-    }
-
-    return a;
-};
-
 const adjustHslPropertyByHash = function (hash, min, max) {
-	const moduloValue = modulo(hash, (max - min));
-	if(isNaN(moduloValue)){
-		return min;
-	} else {
-		const proposedValue = moduloValue + min;
-		return Math.min(proposedValue, max);
-	}
+	const proposedValue = hash % (max - min) + min;
+	return Math.min(proposedValue, max);
 };
 
-
 const createHslColorString = function(h,s,l){
     return "hsl\u0028" + h + "\u002c " + s + "\u0025\u002c " + l + "\u0025\u0029";
 };
 
 const colorCell = function (d) {
