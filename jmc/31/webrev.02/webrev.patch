diff a/application/org.openjdk.jmc.flightrecorder.ext.g1/src/main/java/org/openjdk/jmc/flightrecorder/ext/g1/G1Page.java b/application/org.openjdk.jmc.flightrecorder.ext.g1/src/main/java/org/openjdk/jmc/flightrecorder/ext/g1/G1Page.java
--- a/application/org.openjdk.jmc.flightrecorder.ext.g1/src/main/java/org/openjdk/jmc/flightrecorder/ext/g1/G1Page.java
+++ b/application/org.openjdk.jmc.flightrecorder.ext.g1/src/main/java/org/openjdk/jmc/flightrecorder/ext/g1/G1Page.java
@@ -80,11 +80,10 @@
 import org.openjdk.jmc.flightrecorder.ext.g1.visualizer.HeapLayout;
 import org.openjdk.jmc.flightrecorder.ext.g1.visualizer.HeapLayout.CurveType;
 import org.openjdk.jmc.flightrecorder.ext.g1.visualizer.HeapRegionSelectionEvent;
 import org.openjdk.jmc.flightrecorder.ext.g1.visualizer.HeapRegionView;
 import org.openjdk.jmc.flightrecorder.ext.g1.visualizer.region.HeapRegion;
-import org.openjdk.jmc.flightrecorder.jdk.JdkAggregators;
 import org.openjdk.jmc.flightrecorder.jdk.JdkAttributes;
 import org.openjdk.jmc.flightrecorder.jdk.JdkFilters;
 import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;
 import org.openjdk.jmc.flightrecorder.ui.IDataPageFactory;
 import org.openjdk.jmc.flightrecorder.ui.IDisplayablePage;
@@ -259,17 +258,16 @@
 				gcTable.show(gcPauses);
 				regionVisualizer
 						.showGC(getDataSource().getItems().apply(ItemFilters.hasAttribute(JdkAttributes.GC_ID)));
 				if (heapDumps != null) {
 					gcTable.getManager().getViewer().addSelectionChangedListener(e -> {
-						IQuantity newTime = gcTable.getSelection().getItems()
-								.getAggregate(JdkAggregators.FIRST_ITEM_START);
+						IAggregator<IQuantity, ?> min = Aggregators.min(JfrAttributes.START_TIME);
+						IQuantity newTime = gcTable.getSelection().getItems().getAggregate(min);
 						if (newTime == null) {
 							regionVisualizer.showGC(
 									getDataSource().getItems().apply(ItemFilters.hasAttribute(JdkAttributes.GC_ID)));
-							time = getDataSource().getItems().apply(G1Constants.HEAP_REGION_DUMPS)
-									.getAggregate(JdkAggregators.FIRST_ITEM_START);
+							time = getDataSource().getItems().apply(G1Constants.HEAP_REGION_DUMPS).getAggregate(min);
 						} else {
 							IAggregator<Set<IQuantity>, ?> distinct = Aggregators.distinct(JdkAttributes.GC_ID);
 							Set<IQuantity> gcIds = gcTable.getSelection().getItems().getAggregate(distinct);
 							regionVisualizer.showGC(
 									getDataSource().getItems().apply(ItemFilters.memberOf(JdkAttributes.GC_ID, gcIds)));
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/selection/FlavorToolkit.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/selection/FlavorToolkit.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/selection/FlavorToolkit.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/selection/FlavorToolkit.java
@@ -49,12 +49,12 @@
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.IRange;
 import org.openjdk.jmc.common.unit.QuantityRange;
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
-import org.openjdk.jmc.flightrecorder.jdk.JdkAggregators;
 import org.openjdk.jmc.flightrecorder.jdk.JdkAttributes;
+import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 
 // FIXME: Move to flightrecorder bundle, and move back to Java 7
 public class FlavorToolkit {
 
 	public static Optional<IRange<IQuantity>> getRange(IItemStreamFlavor flavor) {
@@ -120,12 +120,12 @@
 	}
 
 	private static Optional<IRange<IQuantity>> calculateTimestampRange(IItemStreamFlavor fromFlavor) {
 		if (fromFlavor != null) {
 			IItemCollection items = fromFlavor.evaluate();
-			IQuantity startTime = items.getAggregate(JdkAggregators.FIRST_ITEM_START);
-			IQuantity endTime = items.getAggregate(JdkAggregators.LAST_ITEM_END);
+			IQuantity startTime = RulesToolkit.getEarliestStartTime(items);
+			IQuantity endTime = RulesToolkit.getLatestEndTime(items);
 			if (startTime != null) {
 				if (endTime != null && startTime.compareTo(endTime) < 0) {
 					return Optional.of(QuantityRange.createWithEnd(startTime, endTime));
 				} else {
 					return Optional.of(QuantityRange.createPoint(startTime));
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/dataproviders/HaltsProvider.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/dataproviders/HaltsProvider.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/dataproviders/HaltsProvider.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/dataproviders/HaltsProvider.java
@@ -142,12 +142,12 @@
 		}
 		return totalDuration;
 	}
 
 	private static IRange<IQuantity> createRange(IItemCollection items) {
-		IQuantity start = items.getAggregate(JdkAggregators.FIRST_ITEM_START);
-		IQuantity end = items.getAggregate(JdkAggregators.LAST_ITEM_END);
+		IQuantity start = RulesToolkit.getEarliestStartTime(items);
+		IQuantity end = RulesToolkit.getLatestEndTime(items);
 		return start != null && end != null ? QuantityRange.createWithEnd(start, end) : null;
 	}
 
 	/**
 	 * @return function to use when calculating GC halts using sliding windows
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLoadingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLoadingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLoadingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLoadingRule.java
@@ -46,11 +46,10 @@
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.common.util.IPreferenceValueProvider;
 import org.openjdk.jmc.common.util.TypedPreference;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
-import org.openjdk.jmc.flightrecorder.jdk.JdkAggregators;
 import org.openjdk.jmc.flightrecorder.jdk.JdkFilters;
 import org.openjdk.jmc.flightrecorder.jdk.JdkQueries;
 import org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs;
 import org.openjdk.jmc.flightrecorder.rules.IRule;
 import org.openjdk.jmc.flightrecorder.rules.Result;
@@ -85,12 +84,12 @@
 		IQuantity maxDurationLimit = valueProvider.getPreferenceValue(MAX_DURATION_LIMIT);
 		IQuantity ratioOfTotalLimit = valueProvider.getPreferenceValue(RATIO_OF_TOTAL_LIMIT);
 
 		IItemCollection events = items.apply(JdkFilters.CLASS_LOAD);
 
-		IQuantity startTime = events.getAggregate(JdkAggregators.FIRST_ITEM_START);
-		IQuantity endTime = events.getAggregate(JdkAggregators.LAST_ITEM_END);
+		IQuantity startTime = RulesToolkit.getEarliestStartTime(events);
+		IQuantity endTime = RulesToolkit.getLatestEndTime(events);
 		if (startTime != null && endTime != null) {
 			IQuantity totalTime = endTime.subtract(startTime);
 			IQuantity max = events.getAggregate(Aggregators.max(JfrAttributes.DURATION));
 			IQuantity sum = events.getAggregate(Aggregators.sum(JfrAttributes.DURATION));
 			// FIXME: Consider using a score function instead of set value.
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
@@ -95,12 +95,12 @@
 		EventAvailability eventAvailability = RulesToolkit.getEventAvailability(items, JdkTypeIDs.MONITOR_ENTER);
 		if (eventAvailability != EventAvailability.AVAILABLE) {
 			return RulesToolkit.getEventAvailabilityResult(this, items, eventAvailability, JdkTypeIDs.MONITOR_ENTER);
 		}
 
-		IQuantity startTime = items.getAggregate(JdkAggregators.FIRST_ITEM_START);
-		IQuantity endTime = items.getAggregate(JdkAggregators.LAST_ITEM_END);
+		IQuantity startTime = RulesToolkit.getEarliestStartTime(items);
+		IQuantity endTime = RulesToolkit.getLatestEndTime(items);
 		IQuantity recordingTime = endTime.subtract(startTime);
 
 		IQuantity byInstance = items.getAggregate(MONITOR_BALANCE_BY_INSTANCE);
 
 		IQuantity byThread = items.getAggregate(MONITOR_BALANCE_BY_THREAD);
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcFreedRatioRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcFreedRatioRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcFreedRatioRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcFreedRatioRule.java
@@ -223,11 +223,11 @@
 						.apply(JdkFilters.HEAP_SUMMARY_AFTER_GC);
 				IItemCollection lowestGcIdBeforeAllItems = lowestGcIdAllItems.apply(JdkFilters.HEAP_SUMMARY_BEFORE_GC);
 				// If the beginning of the window is between a 'before' and an 'after' event.
 				if (lowestGcIdAfterWindowItems.hasItems() && !lowestGcIdBeforeWindowItems.hasItems()) {
 					if (lowestGcIdBeforeAllItems.hasItems()) {
-						newStartTime = lowestGcIdBeforeAllItems.getAggregate(JdkAggregators.FIRST_ITEM_END);
+						newStartTime = RulesToolkit.getEarliestEndTime(lowestGcIdBeforeAllItems);
 					}
 				}
 				IQuantity highestGcId = heapSummaryWindowItems.getAggregate(Aggregators.max(JdkAttributes.GC_ID));
 				IItemCollection highestGcIdWindowItems = heapSummaryWindowItems
 						.apply(ItemFilters.equals(JdkAttributes.GC_ID, highestGcId));
@@ -238,11 +238,11 @@
 				IItemCollection highestGcIdAfterWindowItems = lowestGcIdWindowItems
 						.apply(JdkFilters.HEAP_SUMMARY_AFTER_GC);
 				IItemCollection highestGcIdAfterAllItems = highestGcIdAllItems.apply(JdkFilters.HEAP_SUMMARY_BEFORE_GC);
 				if (highestGcIdBeforeWindowItems.hasItems() && !highestGcIdAfterWindowItems.hasItems()) {
 					if (highestGcIdAfterAllItems.hasItems()) {
-						newEndTime = highestGcIdAfterAllItems.getAggregate(JdkAggregators.FIRST_ITEM_START);
+						newEndTime = RulesToolkit.getEarliestStartTime(highestGcIdAfterAllItems);
 					}
 				}
 
 				if (newStartTime != null || newEndTime != null) {
 					if (newStartTime != null) {
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/IncreasingLiveSetRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/IncreasingLiveSetRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/IncreasingLiveSetRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/IncreasingLiveSetRule.java
@@ -151,11 +151,11 @@
 		// otherwise we just return the basic increasing live set score
 		EventAvailability ea = RulesToolkit.getEventAvailability(items, JdkTypeIDs.OLD_OBJECT_SAMPLE);
 		// FIXME: Should construct an message using memoryIncrease, not use a hard limit
 		if (ea == EventAvailability.DISABLED || ea == EventAvailability.UNKNOWN) {
 			if (score >= 25) {
-				IQuantity timeAfterJVMStart = items.getAggregate(JdkAggregators.FIRST_ITEM_START)
+				IQuantity timeAfterJVMStart = RulesToolkit.getEarliestStartTime(items)
 						.subtract(items.getAggregate(JdkAggregators.JVM_START_TIME));
 				String shortMessage = MessageFormat.format(
 						Messages.getString(Messages.IncreasingLiveSetRuleFactory_TEXT_INFO),
 						liveSetIncreasePerSecond.displayUsing(IDisplayable.AUTO));
 				String longMessage = shortMessage + "<p>" //$NON-NLS-1$
diff a/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/RulesToolkit.java b/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/RulesToolkit.java
--- a/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/RulesToolkit.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/RulesToolkit.java
@@ -1331,12 +1331,12 @@
 		}
 		return null;
 	}
 
 	private static IQuantity getItemRange(IItemCollection items) {
-		IQuantity first = items.getAggregate(JdkAggregators.FIRST_ITEM_START);
-		IQuantity last = items.getAggregate(JdkAggregators.LAST_ITEM_END);
+		IQuantity first = getEarliestStartTime(items);
+		IQuantity last = getLatestEndTime(items);
 
 		return last.subtract(first);
 	}
 
 	/**
@@ -1364,6 +1364,98 @@
 		for (Map.Entry<String, Integer> entry : entries) {
 			sortedMap.put(entry.getKey(), entry.getValue());
 		}
 		return sortedMap;
 	}
+
+	/**
+	 * Returns the earliest start time in the provided item collection. This method is based on the
+	 * assumption that item collection lanes are sorted by timestamp.
+	 * 
+	 * @param items
+	 *            the item collection to find the earliest start time in
+	 * @return the earliest start time in the provided collection
+	 */
+	public static IQuantity getEarliestStartTime(IItemCollection items) {
+		IQuantity earliestStartTime = null;
+		for (IItemIterable iItemIterable : items) {
+			IMemberAccessor<IQuantity, IItem> startTimeAccessor = JfrAttributes.START_TIME
+					.getAccessor(iItemIterable.getType());
+			if (iItemIterable.iterator().hasNext()) {
+				IItem next = iItemIterable.iterator().next();
+				if (next != null && startTimeAccessor != null) {
+					IQuantity startTime = startTimeAccessor.getMember(next);
+					if (earliestStartTime == null) {
+						earliestStartTime = startTime;
+					} else {
+						if (earliestStartTime.compareTo(startTime) >= 0) {
+							earliestStartTime = startTime;
+						}
+					}
+				}
+			}
+		}
+		return earliestStartTime;
+	}
+
+	/**
+	 * Returns the earliest end time in the provided item collection. This method is based on the
+	 * assumption that item collection lanes are sorted by timestamp.
+	 * 
+	 * @param items
+	 *            the item collection to find the earliest end time in
+	 * @return the earliest end time in the provided collection
+	 */
+	public static IQuantity getEarliestEndTime(IItemCollection items) {
+		IQuantity earliestEndTime = null;
+		for (IItemIterable iItemIterable : items) {
+			IMemberAccessor<IQuantity, IItem> endTimeAccessor = JfrAttributes.END_TIME
+					.getAccessor(iItemIterable.getType());
+			if (iItemIterable.iterator().hasNext()) {
+				IItem next = iItemIterable.iterator().next();
+				if (next != null && endTimeAccessor != null) {
+					IQuantity endTime = endTimeAccessor.getMember(next);
+					if (earliestEndTime == null) {
+						earliestEndTime = endTime;
+					} else {
+						if (earliestEndTime.compareTo(endTime) >= 0) {
+							earliestEndTime = endTime;
+						}
+					}
+				}
+			}
+		}
+		return earliestEndTime;
+	}
+
+	/**
+	 * Returns the latest end time in the provided item collection. This method is based on the
+	 * assumption that item collection lanes are sorted by timestamp.
+	 * 
+	 * @param items
+	 *            the item collection to find the latest end time in
+	 * @return the latest end time in the provided collection
+	 */
+	public static IQuantity getLatestEndTime(IItemCollection items) {
+		IQuantity latestEndTime = null;
+		for (IItemIterable iItemIterable : items) {
+			IMemberAccessor<IQuantity, IItem> endTimeAccessor = JfrAttributes.END_TIME
+					.getAccessor(iItemIterable.getType());
+			Iterator<IItem> iterator = iItemIterable.iterator();
+			IItem next = null;
+			while (iterator.hasNext()) {
+				next = iterator.next();
+			}
+			if (next != null && endTimeAccessor != null) {
+				IQuantity startTime = endTimeAccessor.getMember(next);
+				if (latestEndTime == null) {
+					latestEndTime = startTime;
+				} else {
+					if (latestEndTime.compareTo(startTime) <= 0) {
+						latestEndTime = startTime;
+					}
+				}
+			}
+		}
+		return latestEndTime;
+	}
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/SlidingWindowToolkit.java b/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/SlidingWindowToolkit.java
--- a/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/SlidingWindowToolkit.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/SlidingWindowToolkit.java
@@ -177,13 +177,13 @@
 	 *            for example cap event duration to the window timespan.
 	 */
 	public static void slidingWindowUnordered(
 		IUnorderedWindowVisitor callback, IItemCollection items, IQuantity windowSize, IQuantity slideSize,
 		boolean includeIntersecting) {
-		IQuantity first = includeIntersecting ? items.getAggregate(JdkAggregators.FIRST_ITEM_START)
-				: items.getAggregate(JdkAggregators.FIRST_ITEM_END);
-		IQuantity last = items.getAggregate(JdkAggregators.LAST_ITEM_END);
+		IQuantity first = includeIntersecting ? RulesToolkit.getEarliestStartTime(items)
+				: RulesToolkit.getEarliestEndTime(items);
+		IQuantity last = RulesToolkit.getLatestEndTime(items);
 
 		if (first == null) {
 			return;
 		}
 
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
@@ -346,13 +346,10 @@
 			JdkAttributes.SWEEP_METHOD_ZOMBIFIED);
 	public static final IAggregator<IQuantity, ?> SWEEP_RECLAIMED_SUM = Aggregators.sum(
 			Messages.getString(Messages.AGGR_SWEEP_RECLAIMED_SUM),
 			Messages.getString(Messages.AGGR_SWEEP_RECLAIMED_SUM_DESC), JdkTypeIDs.SWEEP_CODE_CACHE,
 			JdkAttributes.SWEEP_METHOD_RECLAIMED);
-	public static final IAggregator<IQuantity, ?> FIRST_ITEM_START = Aggregators.min(JfrAttributes.START_TIME);
-	public static final IAggregator<IQuantity, ?> FIRST_ITEM_END = Aggregators.min(JfrAttributes.END_TIME);
-	public static final IAggregator<IQuantity, ?> LAST_ITEM_END = Aggregators.max(JfrAttributes.END_TIME);
 	public static final IAggregator<IQuantity, ?> LONGEST_EVENT = Aggregators.max(DURATION);
 	public static final IAggregator<IQuantity, ?> ITEM_COUNT = Aggregators
 			.count(Messages.getString(Messages.AGGR_ITEM_COUNT), Messages.getString(Messages.AGGR_ITEM_COUNT_DESC));
 
 	public static final IAggregator<IQuantity, ?> ALLOCATION_TOTAL = Aggregators.sum(
