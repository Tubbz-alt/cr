diff a/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/RulesToolkit.java b/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/RulesToolkit.java
--- a/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/RulesToolkit.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/RulesToolkit.java
@@ -1331,12 +1331,12 @@
 		}
 		return null;
 	}
 
 	private static IQuantity getItemRange(IItemCollection items) {
-		IQuantity first = items.getAggregate(JdkAggregators.FIRST_ITEM_START);
-		IQuantity last = items.getAggregate(JdkAggregators.LAST_ITEM_END);
+		IQuantity first = getEarliestStartTime(items);
+		IQuantity last = getLatestEndTime(items);
 
 		return last.subtract(first);
 	}
 
 	/**
@@ -1364,6 +1364,98 @@
 		for (Map.Entry<String, Integer> entry : entries) {
 			sortedMap.put(entry.getKey(), entry.getValue());
 		}
 		return sortedMap;
 	}
+
+	/**
+	 * Returns the earliest start time in the provided item collection. This method is based on the
+	 * assumption that item collection lanes are sorted by timestamp.
+	 * 
+	 * @param items
+	 *            the item collection to find the earliest start time in
+	 * @return the earliest start time in the provided collection
+	 */
+	public static IQuantity getEarliestStartTime(IItemCollection items) {
+		IQuantity earliestStartTime = null;
+		for (IItemIterable iItemIterable : items) {
+			IMemberAccessor<IQuantity, IItem> startTimeAccessor = JfrAttributes.START_TIME
+					.getAccessor(iItemIterable.getType());
+			if (iItemIterable.iterator().hasNext()) {
+				IItem next = iItemIterable.iterator().next();
+				if (next != null && startTimeAccessor != null) {
+					IQuantity startTime = startTimeAccessor.getMember(next);
+					if (earliestStartTime == null) {
+						earliestStartTime = startTime;
+					} else {
+						if (earliestStartTime.compareTo(startTime) >= 0) {
+							earliestStartTime = startTime;
+						}
+					}
+				}
+			}
+		}
+		return earliestStartTime;
+	}
+
+	/**
+	 * Returns the earliest end time in the provided item collection. This method is based on the
+	 * assumption that item collection lanes are sorted by timestamp.
+	 * 
+	 * @param items
+	 *            the item collection to find the earliest end time in
+	 * @return the earliest end time in the provided collection
+	 */
+	public static IQuantity getEarliestEndTime(IItemCollection items) {
+		IQuantity earliestEndTime = null;
+		for (IItemIterable iItemIterable : items) {
+			IMemberAccessor<IQuantity, IItem> endTimeAccessor = JfrAttributes.END_TIME
+					.getAccessor(iItemIterable.getType());
+			if (iItemIterable.iterator().hasNext()) {
+				IItem next = iItemIterable.iterator().next();
+				if (next != null && endTimeAccessor != null) {
+					IQuantity endTime = endTimeAccessor.getMember(next);
+					if (earliestEndTime == null) {
+						earliestEndTime = endTime;
+					} else {
+						if (earliestEndTime.compareTo(endTime) >= 0) {
+							earliestEndTime = endTime;
+						}
+					}
+				}
+			}
+		}
+		return earliestEndTime;
+	}
+
+	/**
+	 * Returns the latest end time in the provided item collection. This method is based on the
+	 * assumption that item collection lanes are sorted by timestamp.
+	 * 
+	 * @param items
+	 *            the item collection to find the latest end time in
+	 * @return the latest end time in the provided collection
+	 */
+	public static IQuantity getLatestEndTime(IItemCollection items) {
+		IQuantity latestEndTime = null;
+		for (IItemIterable iItemIterable : items) {
+			IMemberAccessor<IQuantity, IItem> endTimeAccessor = JfrAttributes.END_TIME
+					.getAccessor(iItemIterable.getType());
+			Iterator<IItem> iterator = iItemIterable.iterator();
+			IItem next = null;
+			while (iterator.hasNext()) {
+				next = iterator.next();
+			}
+			if (next != null && endTimeAccessor != null) {
+				IQuantity startTime = endTimeAccessor.getMember(next);
+				if (latestEndTime == null) {
+					latestEndTime = startTime;
+				} else {
+					if (latestEndTime.compareTo(startTime) <= 0) {
+						latestEndTime = startTime;
+					}
+				}
+			}
+		}
+		return latestEndTime;
+	}
 }
