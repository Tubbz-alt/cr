diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcFreedRatioRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcFreedRatioRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcFreedRatioRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/GcFreedRatioRule.java
@@ -223,11 +223,11 @@
 						.apply(JdkFilters.HEAP_SUMMARY_AFTER_GC);
 				IItemCollection lowestGcIdBeforeAllItems = lowestGcIdAllItems.apply(JdkFilters.HEAP_SUMMARY_BEFORE_GC);
 				// If the beginning of the window is between a 'before' and an 'after' event.
 				if (lowestGcIdAfterWindowItems.hasItems() && !lowestGcIdBeforeWindowItems.hasItems()) {
 					if (lowestGcIdBeforeAllItems.hasItems()) {
-						newStartTime = lowestGcIdBeforeAllItems.getAggregate(JdkAggregators.FIRST_ITEM_END);
+						newStartTime = RulesToolkit.getEarliestEndTime(lowestGcIdBeforeAllItems);
 					}
 				}
 				IQuantity highestGcId = heapSummaryWindowItems.getAggregate(Aggregators.max(JdkAttributes.GC_ID));
 				IItemCollection highestGcIdWindowItems = heapSummaryWindowItems
 						.apply(ItemFilters.equals(JdkAttributes.GC_ID, highestGcId));
@@ -238,11 +238,11 @@
 				IItemCollection highestGcIdAfterWindowItems = lowestGcIdWindowItems
 						.apply(JdkFilters.HEAP_SUMMARY_AFTER_GC);
 				IItemCollection highestGcIdAfterAllItems = highestGcIdAllItems.apply(JdkFilters.HEAP_SUMMARY_BEFORE_GC);
 				if (highestGcIdBeforeWindowItems.hasItems() && !highestGcIdAfterWindowItems.hasItems()) {
 					if (highestGcIdAfterAllItems.hasItems()) {
-						newEndTime = highestGcIdAfterAllItems.getAggregate(JdkAggregators.FIRST_ITEM_START);
+						newEndTime = RulesToolkit.getEarliestStartTime(highestGcIdAfterAllItems);
 					}
 				}
 
 				if (newStartTime != null || newEndTime != null) {
 					if (newStartTime != null) {
