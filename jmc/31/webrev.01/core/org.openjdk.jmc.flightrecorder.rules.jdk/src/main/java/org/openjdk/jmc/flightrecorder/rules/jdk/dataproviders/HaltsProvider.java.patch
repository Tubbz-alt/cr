diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/dataproviders/HaltsProvider.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/dataproviders/HaltsProvider.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/dataproviders/HaltsProvider.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/dataproviders/HaltsProvider.java
@@ -142,12 +142,12 @@
 		}
 		return totalDuration;
 	}
 
 	private static IRange<IQuantity> createRange(IItemCollection items) {
-		IQuantity start = items.getAggregate(JdkAggregators.FIRST_ITEM_START);
-		IQuantity end = items.getAggregate(JdkAggregators.LAST_ITEM_END);
+		IQuantity start = RulesToolkit.getEarliestStartTime(items);
+		IQuantity end = RulesToolkit.getLatestEndTime(items);
 		return start != null && end != null ? QuantityRange.createWithEnd(start, end) : null;
 	}
 
 	/**
 	 * @return function to use when calculating GC halts using sliding windows
