diff a/application/org.openjdk.jmc.flightrecorder.ext.g1/src/main/java/org/openjdk/jmc/flightrecorder/ext/g1/G1Page.java b/application/org.openjdk.jmc.flightrecorder.ext.g1/src/main/java/org/openjdk/jmc/flightrecorder/ext/g1/G1Page.java
--- a/application/org.openjdk.jmc.flightrecorder.ext.g1/src/main/java/org/openjdk/jmc/flightrecorder/ext/g1/G1Page.java
+++ b/application/org.openjdk.jmc.flightrecorder.ext.g1/src/main/java/org/openjdk/jmc/flightrecorder/ext/g1/G1Page.java
@@ -261,16 +261,18 @@
 				if (heapDumps != null) {
 					gcTable.getManager().getViewer().addSelectionChangedListener(e -> {
 						IAggregator<IQuantity, ?> min = Aggregators.min(JfrAttributes.START_TIME);
 						IQuantity newTime = gcTable.getSelection().getItems().getAggregate(min);
 						if (newTime == null) {
-							regionVisualizer.showGC(getDataSource().getItems().apply(ItemFilters.hasAttribute(JdkAttributes.GC_ID)));
+							regionVisualizer.showGC(
+									getDataSource().getItems().apply(ItemFilters.hasAttribute(JdkAttributes.GC_ID)));
 							time = getDataSource().getItems().apply(G1Constants.HEAP_REGION_DUMPS).getAggregate(min);
 						} else {
 							IAggregator<Set<IQuantity>, ?> distinct = Aggregators.distinct(JdkAttributes.GC_ID);
 							Set<IQuantity> gcIds = gcTable.getSelection().getItems().getAggregate(distinct);
-							regionVisualizer.showGC(getDataSource().getItems().apply(ItemFilters.memberOf(JdkAttributes.GC_ID, gcIds)));
+							regionVisualizer.showGC(
+									getDataSource().getItems().apply(ItemFilters.memberOf(JdkAttributes.GC_ID, gcIds)));
 							time = newTime;
 						}
 						heapVisualizer.show(seekTo(time));
 						timeLabel.setText(time.displayUsing(IDisplayable.VERBOSE));
 						regionVisualizer.setCurrentTime(time);
