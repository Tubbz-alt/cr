diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/selection/FlavorToolkit.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/selection/FlavorToolkit.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/selection/FlavorToolkit.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/selection/FlavorToolkit.java
@@ -49,12 +49,12 @@
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.IRange;
 import org.openjdk.jmc.common.unit.QuantityRange;
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
-import org.openjdk.jmc.flightrecorder.jdk.JdkAggregators;
 import org.openjdk.jmc.flightrecorder.jdk.JdkAttributes;
+import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 
 // FIXME: Move to flightrecorder bundle, and move back to Java 7
 public class FlavorToolkit {
 
 	public static Optional<IRange<IQuantity>> getRange(IItemStreamFlavor flavor) {
@@ -120,12 +120,12 @@
 	}
 
 	private static Optional<IRange<IQuantity>> calculateTimestampRange(IItemStreamFlavor fromFlavor) {
 		if (fromFlavor != null) {
 			IItemCollection items = fromFlavor.evaluate();
-			IQuantity startTime = items.getAggregate(JdkAggregators.FIRST_ITEM_START);
-			IQuantity endTime = items.getAggregate(JdkAggregators.LAST_ITEM_END);
+			IQuantity startTime = RulesToolkit.getEarliestStartTime(items);
+			IQuantity endTime = RulesToolkit.getLatestEndTime(items);
 			if (startTime != null) {
 				if (endTime != null && startTime.compareTo(endTime) < 0) {
 					return Optional.of(QuantityRange.createWithEnd(startTime, endTime));
 				} else {
 					return Optional.of(QuantityRange.createPoint(startTime));
