diff a/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/RulesToolkit.java b/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/RulesToolkit.java
--- a/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/RulesToolkit.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/RulesToolkit.java
@@ -1367,11 +1367,11 @@
 		return sortedMap;
 	}
 
 	/**
 	 * Returns the earliest start time in the provided item collection. This method is based on the
-	 * assumption that item collection lanes are sorted by timestamps.
+	 * assumption that item collection lanes are sorted by timestamp.
 	 * 
 	 * @param items
 	 *            the item collection to find the earliest start time in
 	 * @return the earliest start time in the provided collection
 	 */
@@ -1396,16 +1396,16 @@
 		}
 		return earliestStartTime;
 	}
 
 	/**
-	 * Returns the earliest start time in the provided item collection. This method is based on the
-	 * assumption that item collection lanes are sorted by timestamps.
+	 * Returns the earliest end time in the provided item collection. This method is based on the
+	 * assumption that item collection lanes are sorted by timestamp.
 	 * 
 	 * @param items
-	 *            the item collection to find the earliest start time in
-	 * @return the earliest start time in the provided collection
+	 *            the item collection to find the earliest end time in
+	 * @return the earliest end time in the provided collection
 	 */
 	public static IQuantity getEarliestEndTime(IItemCollection items) {
 		IQuantity earliestEndTime = null;
 		for (IItemIterable iItemIterable : items) {
 			IMemberAccessor<IQuantity, IItem> endTimeAccessor = JfrAttributes.END_TIME
@@ -1427,11 +1427,11 @@
 		return earliestEndTime;
 	}
 
 	/**
 	 * Returns the latest end time in the provided item collection. This method is based on the
-	 * assumption that item collection lanes are sorted by timestamps.
+	 * assumption that item collection lanes are sorted by timestamp.
 	 * 
 	 * @param items
 	 *            the item collection to find the latest end time in
 	 * @return the latest end time in the provided collection
 	 */
