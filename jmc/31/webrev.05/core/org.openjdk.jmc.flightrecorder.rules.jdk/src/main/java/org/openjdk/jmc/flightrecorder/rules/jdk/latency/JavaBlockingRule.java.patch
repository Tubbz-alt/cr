diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
@@ -95,12 +95,12 @@
 		EventAvailability eventAvailability = RulesToolkit.getEventAvailability(items, JdkTypeIDs.MONITOR_ENTER);
 		if (eventAvailability != EventAvailability.AVAILABLE) {
 			return RulesToolkit.getEventAvailabilityResult(this, items, eventAvailability, JdkTypeIDs.MONITOR_ENTER);
 		}
 
-		IQuantity startTime = items.getAggregate(JdkAggregators.FIRST_ITEM_START);
-		IQuantity endTime = items.getAggregate(JdkAggregators.LAST_ITEM_END);
+		IQuantity startTime = RulesToolkit.getEarliestStartTime(items);
+		IQuantity endTime = RulesToolkit.getLatestEndTime(items);
 		IQuantity recordingTime = endTime.subtract(startTime);
 
 		IQuantity byInstance = items.getAggregate(MONITOR_BALANCE_BY_INSTANCE);
 
 		IQuantity byThread = items.getAggregate(MONITOR_BALANCE_BY_THREAD);
