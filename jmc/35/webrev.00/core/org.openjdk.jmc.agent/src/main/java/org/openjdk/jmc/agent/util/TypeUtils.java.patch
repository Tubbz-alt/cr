diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/util/TypeUtils.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/util/TypeUtils.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/util/TypeUtils.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/util/TypeUtils.java
@@ -30,23 +30,23 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent.util;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Array;
-import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.security.ProtectionDomain;
+import java.util.Arrays;
 import java.util.logging.Level;
-import java.util.logging.Logger;
 
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
 import org.openjdk.jmc.agent.Agent;
-import org.openjdk.jmc.agent.jfr.impl.JFRUtils;
+import org.openjdk.jmc.agent.generated_events.Dummy;
 
 /**
  * Helper methods for doing transforms.
  */
 public final class TypeUtils {
@@ -59,21 +59,10 @@
 	public static final Type OBJECT_ARRAY_TYPE = Type.getObjectType("[Ljava/lang/Object;"); //$NON-NLS-1$
 	public static final Type STRING_TYPE = Type.getType("Ljava/lang/String;"); //$NON-NLS-1$
 
 	public static final Object STRING_INTERNAL_NAME = "java/lang/String"; //$NON-NLS-1$
 
-	private final static String UNSAFE_JDK_7_CLASS = "sun.misc.Unsafe"; //$NON-NLS-1$
-	private final static String UNSAFE_JDK_11_CLASS = "jdk.internal.misc.Unsafe"; //$NON-NLS-1$
-
-	private static final Object UNSAFE;
-	private static final Method UNSAFE_DEFINE_CLASS_METHOD;
-
-	static {
-		UNSAFE = getUnsafe();
-		UNSAFE_DEFINE_CLASS_METHOD = getUnsafeDefineClassMethod(UNSAFE);
-	}
-
 	/**
 	 * The file extension for java source files (.java).
 	 */
 	public static final String JAVA_FILE_EXTENSION = ".java"; //$NON-NLS-1$
 
@@ -120,16 +109,45 @@
 	}
 
 	public static Class<?> defineClass(
 		String eventClassName, byte[] eventClass, int i, int length, ClassLoader definingClassLoader,
 		ProtectionDomain protectionDomain) {
+		String version = System.getProperty("java.version");
+		if (Integer.parseInt(version.substring(0, version.indexOf("."))) < 9) {
+			return defineClassWithReflection(eventClassName, eventClass, i, length, definingClassLoader, protectionDomain);
+		}
+
+		return defineClassWithLookup(eventClassName, eventClass, i, length, definingClassLoader, protectionDomain);
+	}
+
+	private static Class<?> defineClassWithLookup(
+			String eventClassName, byte[] eventClass, int i, int length, ClassLoader definingClassLoader,
+			ProtectionDomain protectionDomain) {
 		try {
-			return (Class<?>) UNSAFE_DEFINE_CLASS_METHOD.invoke(UNSAFE, eventClassName, eventClass, i, length,
-					definingClassLoader, protectionDomain);
-		} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
+			Method privateLookupIn = MethodHandles.class.getMethod("privateLookupIn", Class.class, MethodHandles.Lookup.class);
+			MethodHandles.Lookup lookup = (MethodHandles.Lookup) privateLookupIn.invoke(null, Dummy.class, MethodHandles.lookup());
+			byte[] bytes = Arrays.copyOfRange(eventClass, i, i + length);
+			Method defineClass = MethodHandles.Lookup.class.getDeclaredMethod("defineClass", byte[].class);
+			return (Class<?>) defineClass.invoke(lookup, (Object) bytes);
+		} catch (IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {
 			Agent.getLogger().log(Level.SEVERE, "Failed to dynamically define the class " + eventClassName, e); //$NON-NLS-1$
 		}
+
+		return null;
+	}
+
+	private static Class<?> defineClassWithReflection(
+			String eventClassName, byte[] eventClass, int i, int length, ClassLoader definingClassLoader,
+			ProtectionDomain protectionDomain) {
+		try {
+			Method defineClass = ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class, ProtectionDomain.class);
+			defineClass.setAccessible(true);
+			return (Class<?>) defineClass.invoke(definingClassLoader, eventClassName, eventClass, i, length, protectionDomain);
+		} catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
+			Agent.getLogger().log(Level.SEVERE, "Failed to dynamically define the class " + eventClassName, e); //$NON-NLS-1$
+		}
+
 		return null;
 	}
 
 	/**
 	 * Ensure that the operand is on the stack before calling. If type is void, this is a noop, and
@@ -256,51 +274,6 @@
 	}
 
 	private static void emitBox(MethodVisitor mv, String desc) {
 		mv.visitMethodInsn(Opcodes.INVOKESTATIC, INAME, "box", desc, false); //$NON-NLS-1$
 	}
-
-	private static Object getUnsafe() {
-		// Lovely, but this seems to be the only way
-		Class<?> unsafeClass = getUnsafeClass();
-		try {
-			Field f = unsafeClass.getDeclaredField("theUnsafe"); //$NON-NLS-1$
-			f.setAccessible(true);
-			return f.get(null);
-		} catch (Exception e) {
-			Logger.getLogger(JFRUtils.class.getName()).log(Level.SEVERE, "Could not access Unsafe!", e); //$NON-NLS-1$
-		}
-		return null;
-	}
-
-	private static Method getUnsafeDefineClassMethod(Object unsafe) {
-		try {
-			return unsafe.getClass().getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class,
-					ClassLoader.class, ProtectionDomain.class);
-		} catch (NoSuchMethodException | SecurityException e) {
-			System.out.println(
-					"Could not find, or access, any defineClass method. The agent will not work. If on JDK 11, try adding  --add-exports java.base/jdk.internal.misc=ALL-UNNAMED"); //$NON-NLS-1$
-			e.printStackTrace();
-			System.out.flush();
-			System.exit(3);
-		}
-		return null;
-	}
-
-	private static Class<?> getUnsafeClass() {
-		Class<?> clazz = null;
-		try {
-			clazz = Class.forName(UNSAFE_JDK_11_CLASS);
-		} catch (ClassNotFoundException e) {
-			try {
-				clazz = Class.forName(UNSAFE_JDK_7_CLASS);
-			} catch (ClassNotFoundException e1) {
-				System.out.println(
-						"Could not find, or access, any Unsafe class. The agent will not work. If on JDK 11, try adding  --add-exports java.base/jdk.internal.misc=ALL-UNNAMED"); //$NON-NLS-1$
-				e1.printStackTrace();
-				System.out.flush();
-				System.exit(2);
-			}
-		}
-		return clazz;
-	}
 }
