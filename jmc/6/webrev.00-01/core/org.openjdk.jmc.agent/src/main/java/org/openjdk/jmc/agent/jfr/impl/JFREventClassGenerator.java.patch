diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFREventClassGenerator.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFREventClassGenerator.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFREventClassGenerator.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFREventClassGenerator.java
@@ -83,11 +83,11 @@
 		Type[] args = Type.getArgumentTypes(td.getMethod().getSignature());
 		for (Parameter param : td.getParameters()) {
 			createField(cw, td, param, args[param.getIndex()]);
 		}
 		if (td.getReturnValue() != null) {
-			createField(cw, td, td.getReturnValue(), Type.getReturnType(td.getMethod().getSignature()));
+			createField(cw, td, Type.getReturnType(td.getMethod().getSignature()));
 		}
 	}
 
 	private static void createField(ClassWriter cw, JFRTransformDescriptor td, Parameter param, Type type) {
 		if (!td.isAllowedFieldType(type)) {
@@ -115,11 +115,12 @@
 		}
 		av.visitEnd();
 		fv.visitEnd();
 	}
 
-	private static void createField(ClassWriter cw, JFRTransformDescriptor td, ReturnValue returnValue, Type type) {
+	private static void createField(ClassWriter cw, JFRTransformDescriptor td, Type type) {
+		ReturnValue returnValue = td.getReturnValue();
 		if (!td.isAllowedFieldType(type)) {
 			Logger.getLogger(JFREventClassGenerator.class.getName())
 					.warning("Skipped generating field in event class for return value " + returnValue + " and type " + type //$NON-NLS-1$ //$NON-NLS-2$
 							+ " because of configuration settings!"); //$NON-NLS-1$
 			return;
