diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/JFRTransformDescriptor.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/JFRTransformDescriptor.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/JFRTransformDescriptor.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/JFRTransformDescriptor.java
@@ -38,10 +38,11 @@
 import java.util.logging.Logger;
 
 import org.objectweb.asm.Type;
 import org.openjdk.jmc.agent.Method;
 import org.openjdk.jmc.agent.Parameter;
+import org.openjdk.jmc.agent.ReturnValue;
 import org.openjdk.jmc.agent.TransformDescriptor;
 import org.openjdk.jmc.agent.util.TypeUtils;
 
 public class JFRTransformDescriptor extends TransformDescriptor {
 	private final static String ATTRIBUTE_EVENT_NAME = "name"; //$NON-NLS-1$
@@ -58,13 +59,14 @@
 	private final boolean recordStackTrace;
 	private final boolean useRethrow;
 	private final boolean allowToString;
 	private final boolean allowConverter;
 	private final List<Parameter> parameters;
+	private final ReturnValue returnValue;
 
 	public JFRTransformDescriptor(String id, String className, Method method,
-			Map<String, String> transformationAttributes, List<Parameter> parameters) {
+			Map<String, String> transformationAttributes, List<Parameter> parameters, ReturnValue returnValue) {
 		super(id, className, method, transformationAttributes);
 		classPrefix = initializeClassPrefix();
 		eventName = initializeEventName();
 		eventClassName = initializeEventClassName();
 		eventPath = initializeEventPath();
@@ -72,10 +74,11 @@
 		recordStackTrace = getBoolean(ATTRIBUTE_STACK_TRACE, true);
 		useRethrow = getBoolean(ATTRIBUTE_RETHROW, false);
 		allowToString = getBoolean(ATTRIBUTE_ALLOW_TO_STRING, false);
 		allowConverter = getBoolean(ATTRIBUTE_ALLOW_CONVERTER, false);
 		this.parameters = parameters;
+		this.returnValue = returnValue;
 	}
 
 	public String getEventClassName() {
 		return eventClassName;
 	}
@@ -173,10 +176,14 @@
 
 	public List<Parameter> getParameters() {
 		return parameters;
 	}
 
+	public ReturnValue getReturnValue() {
+		return returnValue;
+	}
+
 	public boolean isAllowedFieldType(Type type) {
 		if (isAllowToString()) {
 			return true;
 		}
 		return type.getSort() != Type.OBJECT && type.getSort() != Type.ARRAY;
