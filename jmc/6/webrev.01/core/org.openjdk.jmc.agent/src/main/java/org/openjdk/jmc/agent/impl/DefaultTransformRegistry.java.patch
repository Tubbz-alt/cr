diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
@@ -48,19 +48,21 @@
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
 
 import org.openjdk.jmc.agent.Method;
 import org.openjdk.jmc.agent.Parameter;
+import org.openjdk.jmc.agent.ReturnValue;
 import org.openjdk.jmc.agent.TransformDescriptor;
 import org.openjdk.jmc.agent.TransformRegistry;
 import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;
 
 public class DefaultTransformRegistry implements TransformRegistry {
 	private static final String XML_ATTRIBUTE_NAME_ID = "id"; //$NON-NLS-1$
 	private static final String XML_ELEMENT_NAME_EVENT = "event"; //$NON-NLS-1$
 	private static final String XML_ELEMENT_METHOD_NAME = "method"; //$NON-NLS-1$
 	private static final String XML_ELEMENT_PARAMETER_NAME = "parameter"; //$NON-NLS-1$
+	private static final String XML_ELEMENT_RETURN_VALUE_NAME = "returnvalue"; //$NON-NLS-1$
 
 	// Global override section
 	private static final String XML_ELEMENT_CONFIGURATION = "config"; //$NON-NLS-1$
 	
 	// Logging
@@ -148,15 +150,16 @@
 		String id = streamReader.getAttributeValue("", XML_ATTRIBUTE_NAME_ID); //$NON-NLS-1$
 		streamReader.next();
 		Map<String, String> values = new HashMap<>();
 		List<Parameter> parameters = new LinkedList<>();
 		Method method = null;
+		ReturnValue[] returnValue = new ReturnValue[1];
 		while (streamReader.hasNext()) {
 			if (streamReader.isStartElement()) {
 				String name = streamReader.getName().getLocalPart();
 				if (XML_ELEMENT_METHOD_NAME.equals(name)) {
-					method = parseMethod(streamReader, parameters);
+					method = parseMethod(streamReader, parameters, returnValue);
 					continue;
 				}
 				streamReader.next();
 				if (streamReader.hasText()) {
 					String value = streamReader.getText();
@@ -172,11 +175,11 @@
 				}
 			}
 			streamReader.next();
 		}
 		transfer(globalDefaults, values);
-		return TransformDescriptor.create(id, getInternalName(values.get("class")), method, values, parameters); //$NON-NLS-1$
+		return TransformDescriptor.create(id, getInternalName(values.get("class")), method, values, parameters, returnValue[0]); //$NON-NLS-1$
 	}
 
 	private static void transfer(HashMap<String, String> globalDefaults, Map<String, String> values) {
 		for (Entry<String, String> entry : globalDefaults.entrySet()) {
 			if (!values.containsKey(entry.getKey())) {
@@ -254,15 +257,48 @@
 			streamReader.next();
 		}
 		return new Parameter(index, name, description, contentType, relationKey, converterClassName);
 	}
 
+	private static ReturnValue parseReturnValue(XMLStreamReader streamReader) throws XMLStreamException {
+		streamReader.next();
+		String name = null;
+		String description = null;
+		String contentType = null;
+
+		while (streamReader.hasNext()) {
+			if (streamReader.isStartElement()) {
+				String key = streamReader.getName().getLocalPart();
+				streamReader.next();
+				if (streamReader.hasText()) {
+					String value = streamReader.getText();
+					if (value != null) {
+						value = value.trim();
+					}
+					if ("name".equals(key)) { //$NON-NLS-1$
+						name = value;
+					} else if ("description".equals(key)) { //$NON-NLS-1$
+						description = value;
+					} else if ("contenttype".equals(key)) { //$NON-NLS-1$
+						contentType = value;
+					}
+				}
+			} else if (streamReader.isEndElement()) {
+				if (XML_ELEMENT_RETURN_VALUE_NAME.equals(streamReader.getName().getLocalPart())) {
+					break;
+				}
+			}
+			streamReader.next();
+		}
+		return new ReturnValue(name, description, contentType);
+	}
+
 	private static String getInternalName(String className) {
 		return className.replace('.', '/');
 	}
 
-	private static Method parseMethod(XMLStreamReader streamReader, List<Parameter> parameters)
+	private static Method parseMethod(XMLStreamReader streamReader, List<Parameter> parameters, ReturnValue[] returnValue)
 			throws XMLStreamException {
 		streamReader.next();
 		String name = null;
 		String descriptor = null;
 		while (streamReader.hasNext()) {
@@ -273,10 +309,14 @@
 						String indexAttribute = streamReader.getAttributeValue(0);
 						parameters.add(parseParameter(Integer.parseInt(indexAttribute), streamReader));
 					}
 					continue;
 				}
+				if (XML_ELEMENT_RETURN_VALUE_NAME.equals(key)) {
+					returnValue[0] = parseReturnValue(streamReader);
+					continue;
+				}
 				streamReader.next();
 				if (streamReader.hasText()) {
 					String value = streamReader.getText();
 					if ("name".equals(key)) { //$NON-NLS-1$
 						name = value;
