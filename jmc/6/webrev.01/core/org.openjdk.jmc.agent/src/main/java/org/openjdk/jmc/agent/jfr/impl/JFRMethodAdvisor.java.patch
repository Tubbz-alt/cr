diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
@@ -36,10 +36,11 @@
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
 import org.objectweb.asm.commons.AdviceAdapter;
 import org.openjdk.jmc.agent.Parameter;
+import org.openjdk.jmc.agent.ReturnValue;
 import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;
 import org.openjdk.jmc.agent.util.TypeUtils;
 
 /**
  * Code emitter for JFR distributed with pre-JDK 9 releases. Probably works with JRockit too. ;)
@@ -104,60 +105,66 @@
 		mv.visitTypeInsn(NEW, transformDescriptor.getEventClassName());
 		mv.visitInsn(DUP);
 		mv.visitInsn(DUP);
 		mv.visitMethodInsn(INVOKESPECIAL, transformDescriptor.getEventClassName(), "<init>", "()V", false); //$NON-NLS-1$ //$NON-NLS-2$
 		for (Parameter param : transformDescriptor.getParameters()) {
-			if (!param.isReturn()) {
-				Type argumentType = argumentTypesRef[param.getIndex()];
-				if (transformDescriptor.isAllowedFieldType(argumentType)) {
-					mv.visitInsn(DUP);
-					loadArg(param.getIndex());
-					writeParameter(param, argumentType);
-				}
+			Type argumentType = argumentTypesRef[param.getIndex()];
+			if (transformDescriptor.isAllowedFieldType(argumentType)) {
+				mv.visitInsn(DUP);
+				loadArg(param.getIndex());
+				writeParameter(param, argumentType);
 			}
 		}
 
 		mv.visitMethodInsn(INVOKEVIRTUAL, transformDescriptor.getEventClassName(), "begin", "()V", false); //$NON-NLS-1$ //$NON-NLS-2$
 		eventLocal = newLocal(eventType);
 		mv.visitVarInsn(ASTORE, eventLocal);
 	}
 
 	private void writeParameter(Parameter param, Type type) {
-		if (TypeUtils.shouldStringify(param, type)) {
-			TypeUtils.stringify(mv, param, type);
+		if (TypeUtils.shouldStringify(type)) {
+			TypeUtils.stringify(mv);
 			type = TypeUtils.STRING_TYPE;
 		}
 		putField(Type.getObjectType(transformDescriptor.getEventClassName()), param.getFieldName(), type);
 	}
 
+	private void writeReturnValue(ReturnValue returnValue, Type type) {
+		if (TypeUtils.shouldStringify(type)) {
+			TypeUtils.stringify(mv);
+			type = TypeUtils.STRING_TYPE;
+		}
+		putField(Type.getObjectType(transformDescriptor.getEventClassName()), returnValue.getFieldName(), type);
+	}
+
 	@Override
 	protected void onMethodExit(int opcode) {
 		if (opcode == ATHROW && !shouldInstrumentThrow) {
 			return;
 		}
 
 		if (returnTypeRef.getSort() != Type.VOID && opcode != ATHROW) {
-			Parameter returnParam = TypeUtils.findReturnParam(transformDescriptor.getParameters());
-			if (returnParam != null) {
-				emitSettingReturnParam(opcode, returnParam);
+			ReturnValue returnValue = transformDescriptor.getReturnValue();
+			if (returnValue != null) {
+				emitSettingReturnParam(opcode, returnValue);
 			}
 		}
 		commitEvent();
 	}
 
-	private void emitSettingReturnParam(int opcode, Parameter returnParam) {
+	private void emitSettingReturnParam(int opcode, ReturnValue returnValue) {
 		if (returnTypeRef.getSize() == 1) {
 			dup();
 			mv.visitVarInsn(ALOAD, eventLocal);
 			swap();
 		} else {
 			dup2();
 			mv.visitVarInsn(ALOAD, eventLocal);
 			dupX2();
 			pop();
 		}
-		writeParameter(returnParam, returnTypeRef);
+		writeReturnValue(returnValue, returnTypeRef);
 	}
 
 	private void commitEvent() {
 		mv.visitVarInsn(ALOAD, eventLocal);
 		mv.visitInsn(DUP);
