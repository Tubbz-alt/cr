diff a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/unit/TimestampUnit.java b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/unit/TimestampUnit.java
--- a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/unit/TimestampUnit.java
+++ b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/unit/TimestampUnit.java
@@ -38,23 +38,24 @@
 import java.text.DateFormat;
 import java.text.DecimalFormatSymbols;
 import java.text.FieldPosition;
 import java.text.MessageFormat;
 import java.util.Date;
+import java.util.concurrent.atomic.AtomicReference;
 
 import org.openjdk.jmc.common.IDisplayable;
 import org.openjdk.jmc.common.messages.internal.Messages;
 
 public class TimestampUnit extends TypedUnit<TimestampUnit> {
 	private final LinearUnit timeOffsetUnit;
 	private final String unitId;
-	private String unitDescription;
+	private final AtomicReference<String> unitDescriptionRef;
 
 	TimestampUnit(LinearUnit timeOffsetUnit) {
 		this.timeOffsetUnit = timeOffsetUnit;
 		unitId = "epoch" + timeOffsetUnit.getIdentifier(); //$NON-NLS-1$
-		unitDescription = null;
+		unitDescriptionRef = new AtomicReference<>();
 	}
 
 	@Override
 	protected final Class<TimestampUnit> getUnitClass() {
 		return TimestampUnit.class;
@@ -221,16 +222,14 @@
 		return ""; //$NON-NLS-1$
 	}
 
 	@Override
 	public String getLocalizedDescription() {
-		if (unitDescription == null) {
-			String multiplier = timeOffsetUnit.asWellKnownQuantity().displayUsing(IDisplayable.EXACT);
-			unitDescription = MessageFormat.format(Messages.getString(Messages.TimestampKind_SINCE_1970_MSG),
-					multiplier);
-		}
-		return unitDescription;
+		unitDescriptionRef.compareAndSet(null,
+				MessageFormat.format(Messages.getString(Messages.TimestampKind_SINCE_1970_MSG),
+						timeOffsetUnit.asWellKnownQuantity().displayUsing(IDisplayable.EXACT)));
+		return unitDescriptionRef.get();
 	}
 
 	@Override
 	public String[] getAltLocalizedNames() {
 		return EMPTY_STRING_ARRAY;
