diff a/application/l10n/org.openjdk.jmc.flightrecorder.ui.ja/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_ja.properties b/application/l10n/org.openjdk.jmc.flightrecorder.ui.ja/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_ja.properties
--- a/application/l10n/org.openjdk.jmc.flightrecorder.ui.ja/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_ja.properties
+++ b/application/l10n/org.openjdk.jmc.flightrecorder.ui.ja/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_ja.properties
@@ -307,10 +307,12 @@
 HeapPage_ROW_MEMORY_USAGE=\u30E1\u30E2\u30EA\u30FC\u4F7F\u7528\u72B6\u6CC1
 HeapPage_ROW_MEMORY_USAGE_DESC=\u3053\u306E\u30EC\u30FC\u30F3\u306B\u306F\u3001\u30DE\u30B7\u30F3\u306E\u30D2\u30FC\u30D7\u304A\u3088\u3073\u7269\u7406\u30E1\u30E2\u30EA\u30FC\u306B\u95A2\u3059\u308B\u69D8\u3005\u306A\u30E1\u30E2\u30EA\u30FC\u4F7F\u7528\u7387\u7D71\u8A08\u3092\u8868\u793A\u3067\u304D\u307E\u3059\u3002\u8272\u30DE\u30C3\u30D4\u30F3\u30B0\u304C\u51E1\u4F8B\u306B\u8868\u793A\u3055\u308C\u3001\u7279\u5B9A\u306E\u60C5\u5831\u3092\u6709\u52B9\u5316\u3059\u308B\u304B\u3069\u3046\u304B\u3092\u305D\u3053\u3067\u5236\u5FA1\u3067\u304D\u307E\u3059\u3002
 HeapPage_SELECTED_CLASS=1\u30AF\u30E9\u30B9
 # {0} is a number
 HeapPage_SELECTED_CLASSES={0}\u30AF\u30E9\u30B9
+HeapPage_ALLOCATION_TOTAL_PERCENTAGE=\u5272\u5F53\u3066\u5408\u8A08(%)
+HeapPage_ALLOCATION_TOTAL_PERCENTAGE_DESC=\u5272\u5F53\u3066\u5408\u8A08\u306E\u898B\u7A4D\u308A\u3002\u3053\u308C\u306F\u6B63\u78BA\u306A\u5024\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002(\u30D1\u30FC\u30BB\u30F3\u30C6\u30FC\u30B8)
 
 INFORMATION_COMPONENT_NOT_AVAILABLE=N/A
 
 N_A=N/A
 NAVIGATOR_MOVE_FORWARD_TEXT=\u9032\u3080
@@ -488,10 +490,14 @@
 TlabPage_ROW_TLAB_ALLOCATIONS=TLAB\u5272\u5F53\u3066
 TlabPage_ROW_TLAB_ALLOCATIONS_DESC=\u5272\u5F53\u3066\u30B5\u30F3\u30D7\u30EB\u304B\u3089\u751F\u6210\u3055\u308C\u305F\u30C7\u30FC\u30BF\u3002\u30B5\u30F3\u30D7\u30EB\u306F\u3001\u65B0\u3057\u3044\u30B9\u30EC\u30C3\u30C9\u30FB\u30ED\u30FC\u30AB\u30EB\u5272\u5F53\u3066\u30D0\u30C3\u30D5\u30A1(TLAB)\u3092\u53D6\u5F97\u3059\u308B\u3068\u304D\u3001\u307E\u305F\u306F\u30B9\u30EC\u30C3\u30C9\u30FB\u30ED\u30FC\u30AB\u30EB\u5272\u5F53\u3066\u30D0\u30C3\u30D5\u30A1\u306E\u5916\u90E8\u3067\u5272\u308A\u5F53\u3066\u308B\u3068\u304D\u306B\u53CE\u96C6\u3055\u308C\u307E\u3059\u3002
 TlabPage_SELECTED_THREAD=1
 # {0} is a number
 TlabPage_SELECTED_THREADS={0}
+TlabPage_INSIDE_TLAB_SUM_PERCENTAGE=TLAB\u5272\u5F53\u3066\u306E\u898B\u7A4D\u308A(%)
+TlabPage_INSIDE_TLAB_SUM_PERCENTAGE_DESC=TLAB\u306E\u898B\u7A4D\u308A\u5272\u5F53\u3066\u30B5\u30A4\u30BA(\u30D1\u30FC\u30BB\u30F3\u30C6\u30FC\u30B8)
+TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE=TLAB\u5916\u306E\u5408\u8A08\u5272\u5F53\u3066(%)
+TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC=TLAB\u5916\u306E\u5272\u5F53\u3066\u306E\u5408\u8A08\u30B5\u30A4\u30BA(\u30D1\u30FC\u30BB\u30F3\u30C6\u30FC\u30B8)
 
 JVMInformationPage_COLUMN_VALUE=\u5024
 JVMInformationPage_PAGE_NAME=JVM\u5185\u90E8
 JVMInformationPage_SECTION_JVM_FLAGS=JVM\u30D5\u30E9\u30B0
 JVMInformationPage_SECTION_JVM_INFO=JVM\u60C5\u5831
diff a/application/l10n/org.openjdk.jmc.flightrecorder.ui.zh_CN/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_zh_CN.properties b/application/l10n/org.openjdk.jmc.flightrecorder.ui.zh_CN/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_zh_CN.properties
--- a/application/l10n/org.openjdk.jmc.flightrecorder.ui.zh_CN/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_zh_CN.properties
+++ b/application/l10n/org.openjdk.jmc.flightrecorder.ui.zh_CN/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages_zh_CN.properties
@@ -307,10 +307,12 @@
 HeapPage_ROW_MEMORY_USAGE=\u5185\u5B58\u4F7F\u7528\u91CF
 HeapPage_ROW_MEMORY_USAGE_DESC=\u6B64\u901A\u9053\u53EF\u4EE5\u663E\u793A\u5806\u7684\u4E0D\u540C\u5185\u5B58\u4F7F\u7528\u60C5\u51B5\u7EDF\u8BA1\u4FE1\u606F\u4EE5\u53CA\u8BA1\u7B97\u673A\u4E0A\u7684\u7269\u7406\u5185\u5B58\u3002\u989C\u8272\u6620\u5C04\u663E\u793A\u5728\u56FE\u4F8B\u4E2D, \u5728\u5176\u4E2D\u53EF\u4EE5\u63A7\u5236\u662F\u5426\u542F\u7528\u7279\u5B9A\u4FE1\u606F\u3002
 HeapPage_SELECTED_CLASS=1 \u4E2A\u7C7B
 # {0} is a number
 HeapPage_SELECTED_CLASSES={0} \u4E2A\u7C7B
+HeapPage_ALLOCATION_TOTAL_PERCENTAGE=\u603B\u5206\u914D\u91CF(%)
+HeapPage_ALLOCATION_TOTAL_PERCENTAGE_DESC=\u4F30\u8BA1\u7684\u603B\u5206\u914D\u91CF\u3002\u8FD9\u5E76\u975E\u786E\u5207\u503C\u3002(\u767E\u5206\u6BD4)
 
 INFORMATION_COMPONENT_NOT_AVAILABLE=N/A
 
 N_A=N/A
 NAVIGATOR_MOVE_FORWARD_TEXT=\u524D\u79FB
@@ -488,10 +490,14 @@
 TlabPage_ROW_TLAB_ALLOCATIONS=TLAB \u5206\u914D
 TlabPage_ROW_TLAB_ALLOCATIONS_DESC=\u4ECE\u5206\u914D\u6837\u672C\u751F\u6210\u7684\u6570\u636E\u3002\u5728\u83B7\u53D6\u65B0\u7684\u7EBF\u7A0B\u672C\u5730\u5206\u914D\u7F13\u51B2\u533A (TLAB) \u6216\u5728\u6B64\u7C7B\u7F13\u51B2\u533A\u4E4B\u5916\u5206\u914D\u65F6\u6536\u96C6\u6837\u672C\u3002
 TlabPage_SELECTED_ONE=1
 # {0} is a number
 TlabPage_SELECTED_MANY={0}
+TlabPage_INSIDE_TLAB_SUM_PERCENTAGE=\u4F30\u8BA1 TLAB \u5206\u914D(%)
+TlabPage_INSIDE_TLAB_SUM_PERCENTAGE_DESC=TLAB \u4E2D\u4F30\u8BA1\u7684\u5206\u914D\u5927\u5C0F(\u767E\u5206\u6BD4)
+TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE=TLAB \u5916\u90E8\u7684\u603B\u5206\u914D(%)
+TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC=TLAB \u5916\u90E8\u5206\u914D\u7684\u603B\u5927\u5C0F(\u767E\u5206\u6BD4)
 
 JVMInformationPage_COLUMN_VALUE=\u503C
 JVMInformationPage_PAGE_NAME=JVM \u5185\u90E8
 JVMInformationPage_SECTION_JVM_FLAGS=JVM \u6807\u8BB0
 JVMInformationPage_SECTION_JVM_INFO=JVM \u4FE1\u606F
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java
@@ -128,21 +128,25 @@
 			int style = a.getValueType() instanceof LinearKindOfQuantity ? SWT.RIGHT : SWT.NONE;
 			addColumn(colId, ic -> ic.getAggregate(a), a.getName(), a.getDescription(), style);
 		}
 
 		public void addPercentageColumn(String colId, IAggregator<?, ?> a) {
+			addPercentageColumn(colId, a, a.getName(), a.getDescription());
+		}
+
+		public void addPercentageColumn(String colId, IAggregator<?, ?> a, String name, String description) {
 			int style = a.getValueType() instanceof LinearKindOfQuantity ? SWT.RIGHT : SWT.NONE;
 			addPercentageColumn(colId, (rowItems, allItems) -> {
 				if (a.getValueType() instanceof LinearKindOfQuantity) {
 					IQuantity rowResult = (IQuantity) rowItems.getAggregate(a);
 					IQuantity allResult = (IQuantity) allItems.getAggregate(a);
 					if (rowResult != null && allResult != null) {
 						return UnitLookup.PERCENT.quantity(rowResult.ratioTo(allResult) * 100);
 					}
 				}
 				return rowItems.getAggregate(a);
-			}, a.getName(), a.getDescription(), style);
+			}, name, description, style);
 		}
 
 		public void addColumn(
 			String colId, Function<IItemCollection, ?> valueFunction, String name, String description) {
 			addColumn(colId, valueFunction, name, description, SWT.NONE);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/messages/internal/Messages.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/messages/internal/Messages.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/messages/internal/Messages.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/messages/internal/Messages.java
@@ -210,10 +210,12 @@
 	public static String HeapPage_ROW_LIVE_SIZE_DESC;
 	public static String HeapPage_ROW_MEMORY_USAGE;
 	public static String HeapPage_ROW_MEMORY_USAGE_DESC;
 	public static String HeapPage_SELECTED_CLASS;
 	public static String HeapPage_SELECTED_CLASSES;
+	public static String HeapPage_ALLOCATION_TOTAL_PERCENTAGE;
+	public static String HeapPage_ALLOCATION_TOTAL_PERCENTAGE_DESC;
 	public static String INFORMATION_COMPONENT_NOT_AVAILABLE;
 	public static String IO_PAGE_DURATIONS_DESCRIPTION;
 	public static String IO_PAGE_EVENT_LOG_DESCRIPTION;
 	public static String IO_PAGE_TIMELINE_DESCRIPTION;
 	public static String IO_PAGE_SIZE_DESCRIPTION;
@@ -514,10 +516,14 @@
 	public static String TlabPage_METHODS_TAB_NAME;
 	public static String TlabPage_ROW_TLAB_ALLOCATIONS;
 	public static String TlabPage_ROW_TLAB_ALLOCATIONS_DESC;
 	public static String TlabPage_SELECTED_ONE;
 	public static String TlabPage_SELECTED_MANY;
+	public static String TlabPage_INSIDE_TLAB_SUM_PERCENTAGE;
+	public static String TlabPage_INSIDE_TLAB_SUM_PERCENTAGE_DESC;
+	public static String TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE;
+	public static String TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC;
 	public static String VMOPERATION_PAGE_DURATIONS_DESCRIPTION;
 	public static String VMOPERATION_PAGE_EVENT_LOG_DESCRIPTION;
 	public static String VMOPERATION_PAGE_TIMELINE_DESCRIPTION;
 	public static String VMOperationPage_DURATION_SELECTION;
 	public static String VMOperationPage_LOG_SELECTION;
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/HeapPage.java
@@ -135,11 +135,12 @@
 	static {
 		HISTOGRAM.addColumn(INSTANCES_COL, JdkAggregators.OBJECT_COUNT_MAX_INSTANCES);
 		HISTOGRAM.addColumn(SIZE_COL, JdkAggregators.OBJECT_COUNT_MAX_SIZE);
 		HISTOGRAM.addColumn(INCREASE_COL, ObjectStatisticsDataProvider.getIncreaseAggregator());
 		HISTOGRAM.addColumn(ALLOCATION_COL, JdkAggregators.ALLOCATION_TOTAL);
-		HISTOGRAM.addPercentageColumn(ALLOCATION_PERCENT_COL, JdkAggregators.ALLOCATION_TOTAL_PERCENTAGE);
+		HISTOGRAM.addPercentageColumn(ALLOCATION_PERCENT_COL, JdkAggregators.ALLOCATION_TOTAL,
+				Messages.HeapPage_ALLOCATION_TOTAL_PERCENTAGE, Messages.HeapPage_ALLOCATION_TOTAL_PERCENTAGE_DESC);
 		HISTOGRAM.addColumn(INSIDE_TLAB_COL, JdkAggregators.ALLOC_INSIDE_TLAB_SUM);
 		HISTOGRAM.addColumn(OUTSIDE_TLAB_COL, JdkAggregators.ALLOC_OUTSIDE_TLAB_SUM);
 	}
 
 	private class ObjectStatisticsUi extends ChartAndTableUI {
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/TlabPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/TlabPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/TlabPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/TlabPage.java
@@ -128,13 +128,15 @@
 		HISTOGRAM.addColumn(INSIDE_COUNT_COL, JdkAggregators.INSIDE_TLAB_COUNT);
 		HISTOGRAM.addColumn(OUTSIDE_COUNT_COL, JdkAggregators.OUTSIDE_TLAB_COUNT);
 		HISTOGRAM.addColumn(AVERAGE_INSIDE_SIZE_COL, JdkAggregators.ALLOC_INSIDE_TLAB_AVG);
 		HISTOGRAM.addColumn(AVERAGE_OUTSIDE_SIZE_COL, JdkAggregators.ALLOC_OUTSIDE_TLAB_AVG);
 		HISTOGRAM.addColumn(TOTAL_INSIDE_SIZE_COL, JdkAggregators.ALLOC_INSIDE_TLAB_SUM);
-		HISTOGRAM.addPercentageColumn(TOTAL_INSIDE_SIZE_PERCENT_COL, JdkAggregators.ALLOC_INSIDE_TLAB_SUM_PERCENTAGE);
+		HISTOGRAM.addPercentageColumn(TOTAL_INSIDE_SIZE_PERCENT_COL, JdkAggregators.ALLOC_INSIDE_TLAB_SUM,
+				Messages.TlabPage_INSIDE_TLAB_SUM_PERCENTAGE, Messages.TlabPage_INSIDE_TLAB_SUM_PERCENTAGE_DESC);
 		HISTOGRAM.addColumn(TOTAL_OUTSIDE_SIZE_COL, JdkAggregators.ALLOC_OUTSIDE_TLAB_SUM);
-		HISTOGRAM.addPercentageColumn(TOTAL_OUTSIDE_SIZE_PERCENT_COL, JdkAggregators.ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE);
+		HISTOGRAM.addPercentageColumn(TOTAL_OUTSIDE_SIZE_PERCENT_COL, JdkAggregators.ALLOC_OUTSIDE_TLAB_SUM,
+				Messages.TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE, Messages.TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC);
 	}
 
 	private class TlabUI implements IPageUI {
 
 		private CTabFolder tabFolder;
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties b/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/resources/org/openjdk/jmc/flightrecorder/ui/messages/internal/messages.properties
@@ -312,10 +312,12 @@
 HeapPage_ROW_MEMORY_USAGE=Memory Usage
 HeapPage_ROW_MEMORY_USAGE_DESC=This lane can show various memory usage statistics for the heap and physical memory on the machine. The color mapping is shown in the legend, where the enablement of specific information can be controlled.
 HeapPage_SELECTED_CLASS=1 class
 # {0} is a number
 HeapPage_SELECTED_CLASSES={0} classes
+HeapPage_ALLOCATION_TOTAL_PERCENTAGE=Total Allocation (%)
+HeapPage_ALLOCATION_TOTAL_PERCENTAGE_DESC=An estimate of the total allocation as a percentage of all allocations. This is not an exact value.
 
 INFORMATION_COMPONENT_NOT_AVAILABLE=N/A
 
 N_A=N/A
 NativeLibraryPage_PAGE_NAME=Native Libraries
@@ -491,19 +493,22 @@
 ThreadsPage_HIDE_THREAD_ACTION=Hide Thread From The Chart
 # {0} is the thread name, {1} is the lane name
 ThreadsPage_LANE_TOOLTIP_TITLE={0} / {1} Lane
 ThreadsPage_NAME=Threads
 ThreadsPage_RESET_CHART_TO_SELECTION_ACTION=Reset The Chart To Current Selection
-
 TlabPage_PAGE_NAME=TLAB Allocations
 TlabPage_THREADS_TAB_NAME=By Threads
 TlabPage_METHODS_TAB_NAME=By Top Methods
 TlabPage_ROW_TLAB_ALLOCATIONS=TLAB Allocations
 TlabPage_ROW_TLAB_ALLOCATIONS_DESC=Data generated from allocation samples. The samples are collected either when acquiring a new thread local allocation buffer (TLAB) or when allocating outside of such buffers.
 TlabPage_SELECTED_ONE=1 item
 # {0} is a number
 TlabPage_SELECTED_MANY={0} items
+TlabPage_INSIDE_TLAB_SUM_PERCENTAGE=Est. TLAB Alloc. (%)
+TlabPage_INSIDE_TLAB_SUM_PERCENTAGE_DESC=The estimated allocation size in TLABs as a percentage of all allocations in TLABs
+TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE=Total Alloc. Outside TLABs (%)
+TlabPage_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC=The total size of allocations outside TLABs as a percentage of all allocations outside TLABs.
 
 JVMInformationPage_COLUMN_NEW_VALUE=New Value
 JVMInformationPage_COLUMN_OLD_VALUE=Old Value
 JVMInformationPage_COLUMN_VALUE=Value
 JVMInformationPage_EMPTY_TABLE=No 'Flag Changed' events found
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
@@ -327,22 +327,14 @@
 			JdkAttributes.ALLOCATION_SIZE);
 	public static final IAggregator<IQuantity, ?> ALLOC_INSIDE_TLAB_SUM = Aggregators.sum(
 			Messages.getString(Messages.AGGR_ALLOC_INSIDE_TLAB_SUM),
 			Messages.getString(Messages.AGGR_ALLOC_INSIDE_TLAB_SUM_DESC), JdkTypeIDs.ALLOC_INSIDE_TLAB,
 			JdkAttributes.TLAB_SIZE);
-	public static final IAggregator<IQuantity, ?> ALLOC_INSIDE_TLAB_SUM_PERCENTAGE = Aggregators.sum(
-			Messages.getString(Messages.AGGR_ALLOC_INSIDE_TLAB_SUM_PERCENTAGE),
-			Messages.getString(Messages.AGGR_ALLOC_INSIDE_TLAB_SUM_PERCENTAGE_DESC), JdkTypeIDs.ALLOC_INSIDE_TLAB,
-			JdkAttributes.TLAB_SIZE);
 	public static final IAggregator<IQuantity, ?> ALLOC_OUTSIDE_TLAB_SUM = Aggregators.sum(
 			Messages.getString(Messages.AGGR_ALLOC_OUTSIDE_TLAB_SUM),
 			Messages.getString(Messages.AGGR_ALLOC_OUTSIDE_TLAB_SUM_DESC), JdkTypeIDs.ALLOC_OUTSIDE_TLAB,
 			JdkAttributes.ALLOCATION_SIZE);
-	public static final IAggregator<IQuantity, ?> ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE = Aggregators.sum(
-			Messages.getString(Messages.AGGR_ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE),
-			Messages.getString(Messages.AGGR_ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC), JdkTypeIDs.ALLOC_OUTSIDE_TLAB,
-			JdkAttributes.ALLOCATION_SIZE);
 	public static final IAggregator<IQuantity, ?> SWEEP_METHOD_SUM = Aggregators.sum(
 			Messages.getString(Messages.AGGR_SWEEP_METHOD_SUM), Messages.getString(Messages.AGGR_SWEEP_METHOD_SUM_DESC),
 			JdkTypeIDs.SWEEP_CODE_CACHE, JdkAttributes.SWEEP_METHOD_SWEPT);
 	public static final IAggregator<IQuantity, ?> SWEEP_FLUSHED_SUM = Aggregators.sum(
 			Messages.getString(Messages.AGGR_SWEEP_FLUSHED_SUM),
@@ -364,14 +356,10 @@
 			.count(Messages.getString(Messages.AGGR_ITEM_COUNT), Messages.getString(Messages.AGGR_ITEM_COUNT_DESC));
 
 	public static final IAggregator<IQuantity, ?> ALLOCATION_TOTAL = Aggregators.sum(
 			Messages.getString(Messages.AGGR_ALLOCATION_TOTAL), Messages.getString(Messages.AGGR_ALLOCATION_TOTAL_DESC),
 			UnitLookup.MEMORY, JdkAttributes.TOTAL_ALLOCATION_SIZE);
-	public static final IAggregator<IQuantity, ?> ALLOCATION_TOTAL_PERCENTAGE = Aggregators.sum(
-			Messages.getString(Messages.AGGR_ALLOCATION_TOTAL_PERCENTAGE),
-			Messages.getString(Messages.AGGR_ALLOCATION_TOTAL_PERCENTAGE_DESC), UnitLookup.MEMORY,
-			JdkAttributes.TOTAL_ALLOCATION_SIZE);
 	public static final IAggregator<IQuantity, ?> TOTAL_IO_TIME = Aggregators.filter(
 			Aggregators.sum(Messages.getString(Messages.AGGR_TOTAL_IO_TIME),
 					Messages.getString(Messages.AGGR_TOTAL_IO_TIME_DESC), JfrAttributes.DURATION),
 			JdkFilters.FILE_OR_SOCKET_IO);
 	public static final IAggregator<IQuantity, ?> MAX_IO_TIME = Aggregators.filter(
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/messages/internal/Messages.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/messages/internal/Messages.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/messages/internal/Messages.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/messages/internal/Messages.java
@@ -42,24 +42,18 @@
 
 	public static final String AGGR_ADDRESSES_COUNT = "AGGR_ADDRESSES_COUNT"; //$NON-NLS-1$
 	public static final String AGGR_ADDRESSES_COUNT_DESC = "AGGR_ADDRESSES_COUNT_DESC"; //$NON-NLS-1$
 	public static final String AGGR_ALLOCATION_TOTAL = "AGGR_ALLOCATION_TOTAL"; //$NON-NLS-1$
 	public static final String AGGR_ALLOCATION_TOTAL_DESC = "AGGR_ALLOCATION_TOTAL_DESC"; //$NON-NLS-1$
-	public static final String AGGR_ALLOCATION_TOTAL_PERCENTAGE = "AGGR_ALLOCATION_TOTAL_PERCENTAGE"; //$NON-NLS-1$
-	public static final String AGGR_ALLOCATION_TOTAL_PERCENTAGE_DESC = "AGGR_ALLOCATION_TOTAL_PERCENTAGE_DESC"; //$NON-NLS-1$
 	public static final String AGGR_ALLOC_INSIDE_TLAB_AVG = "AGGR_ALLOC_INSIDE_TLAB_AVG"; //$NON-NLS-1$
 	public static final String AGGR_ALLOC_INSIDE_TLAB_AVG_DESC = "AGGR_ALLOC_INSIDE_TLAB_AVG_DESC"; //$NON-NLS-1$
 	public static final String AGGR_ALLOC_INSIDE_TLAB_SUM = "AGGR_ALLOC_INSIDE_TLAB_SUM"; //$NON-NLS-1$
 	public static final String AGGR_ALLOC_INSIDE_TLAB_SUM_DESC = "AGGR_ALLOC_INSIDE_TLAB_SUM_DESC"; //$NON-NLS-1$
-	public static final String AGGR_ALLOC_INSIDE_TLAB_SUM_PERCENTAGE = "AGGR_ALLOC_INSIDE_TLAB_SUM_PERCENTAGE"; //$NON-NLS-1$
-	public static final String AGGR_ALLOC_INSIDE_TLAB_SUM_PERCENTAGE_DESC = "AGGR_ALLOC_INSIDE_TLAB_SUM_PERCENTAGE_DESC"; //$NON-NLS-1$
 	public static final String AGGR_ALLOC_OUTSIDE_TLAB_AVG = "AGGR_ALLOC_OUTSIDE_TLAB_AVG"; //$NON-NLS-1$
 	public static final String AGGR_ALLOC_OUTSIDE_TLAB_AVG_DESC = "AGGR_ALLOC_OUTSIDE_TLAB_AVG_DESC"; //$NON-NLS-1$
 	public static final String AGGR_ALLOC_OUTSIDE_TLAB_SUM = "AGGR_ALLOC_OUTSIDE_TLAB_SUM"; //$NON-NLS-1$
 	public static final String AGGR_ALLOC_OUTSIDE_TLAB_SUM_DESC = "AGGR_ALLOC_OUTSIDE_TLAB_SUM_DESC"; //$NON-NLS-1$
-	public static final String AGGR_ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE = "AGGR_ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE"; //$NON-NLS-1$
-	public static final String AGGR_ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC = "AGGR_ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC"; //$NON-NLS-1$
 	public static final String AGGR_AVG_BLOCKED_TIME = "AGGR_AVG_BLOCKED_TIME"; //$NON-NLS-1$
 	public static final String AGGR_AVG_BLOCKED_TIME_DESC = "AGGR_AVG_BLOCKED_TIME_DESC"; //$NON-NLS-1$
 	public static final String AGGR_AVG_HEAP_USED_AFTER_GC = "AGGR_AVG_HEAP_USED_AFTER_GC"; //$NON-NLS-1$
 	public static final String AGGR_AVG_HEAP_USED_BEFORE_GC = "AGGR_AVG_HEAP_USED_BEFORE_GC"; //$NON-NLS-1$
 	public static final String AGGR_AVG_IO_TIME = "AGGR_AVG_IO_TIME"; //$NON-NLS-1$
diff a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages.properties b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages.properties
--- a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages.properties
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages.properties
@@ -407,28 +407,22 @@
 AGGR_ALLOC_INSIDE_TLAB_AVG_DESC=An estimate of the average size of allocations inside TLABs
 AGGR_ALLOC_OUTSIDE_TLAB_AVG=Avg. Alloc. Outside TLABs
 AGGR_ALLOC_OUTSIDE_TLAB_AVG_DESC=The average size of allocations outside TLABs
 AGGR_ALLOC_INSIDE_TLAB_SUM=Est. TLAB Alloc.
 AGGR_ALLOC_INSIDE_TLAB_SUM_DESC=The estimated allocation size in TLABs
-AGGR_ALLOC_INSIDE_TLAB_SUM_PERCENTAGE=Est. TLAB Alloc. (%)
-AGGR_ALLOC_INSIDE_TLAB_SUM_PERCENTAGE_DESC=The estimated allocation size in TLABs as a percentage of all allocations in TLABs
 AGGR_ALLOC_OUTSIDE_TLAB_SUM=Total Alloc. Outside TLABs
 AGGR_ALLOC_OUTSIDE_TLAB_SUM_DESC=The total size of allocations outside TLABs
-AGGR_ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE=Total Alloc. Outside TLABs (%)
-AGGR_ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC=The total size of allocations outside TLABs as a percentage of all allocations outside TLABs.
 AGGR_SWEEP_METHOD_SUM=Methods Swept
 AGGR_SWEEP_METHOD_SUM_DESC=The total amount of swept methods
 AGGR_SWEEP_FLUSHED_SUM=Methods Flushed
 AGGR_SWEEP_FLUSHED_SUM_DESC=The total amount of methods flushed
 AGGR_SWEEP_ZOMBIFIED_SUM=Methods Zombified
 AGGR_SWEEP_ZOMBIFIED_SUM_DESC=The total amount of methods zombified
 AGGR_SWEEP_RECLAIMED_SUM=Methods Reclaimed
 AGGR_SWEEP_RECLAIMED_SUM_DESC=The total amount of methods reclaimed
 AGGR_ALLOCATION_TOTAL=Total Allocation
 AGGR_ALLOCATION_TOTAL_DESC=An estimate of the total allocation. This is not an exact value.
-AGGR_ALLOCATION_TOTAL_PERCENTAGE=Total Allocation (%)
-AGGR_ALLOCATION_TOTAL_PERCENTAGE_DESC=An estimate of the total allocation as a percentage of all allocations. This is not an exact value.
 AGGR_TOTAL_IO_TIME=Total I/O Time
 AGGR_TOTAL_IO_TIME_DESC=An estimate of the total time a thread is busy with I/O. The actual total may be higher.
 AGGR_MAX_IO_TIME=Maximum I/O Time
 AGGR_MAX_IO_TIME_DESC=Maximum duration for a single I/O event in a thread.
 AGGR_AVG_IO_TIME=Average I/O Time
diff a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages_ja.properties b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages_ja.properties
--- a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages_ja.properties
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages_ja.properties
@@ -404,28 +404,22 @@
 AGGR_ALLOC_INSIDE_TLAB_AVG_DESC=\u5185\u90E8TLAB\u306E\u5272\u5F53\u3066\u306E\u5E73\u5747\u30B5\u30A4\u30BA\u306E\u898B\u7A4D\u308A
 AGGR_ALLOC_OUTSIDE_TLAB_AVG=TLAB\u5916\u306E\u5E73\u5747\u5272\u5F53\u3066
 AGGR_ALLOC_OUTSIDE_TLAB_AVG_DESC=TLAB\u5916\u306E\u5272\u5F53\u3066\u306E\u5E73\u5747\u30B5\u30A4\u30BA
 AGGR_ALLOC_INSIDE_TLAB_SUM=TLAB\u5272\u5F53\u3066\u306E\u898B\u7A4D\u308A
 AGGR_ALLOC_INSIDE_TLAB_SUM_DESC=TLAB\u306E\u898B\u7A4D\u308A\u5272\u5F53\u3066\u30B5\u30A4\u30BA
-AGGR_ALLOC_INSIDE_TLAB_SUM_PERCENTAGE=TLAB\u5272\u5F53\u3066\u306E\u898B\u7A4D\u308A(%)
-AGGR_ALLOC_INSIDE_TLAB_SUM_PERCENTAGE_DESC=TLAB\u306E\u898B\u7A4D\u308A\u5272\u5F53\u3066\u30B5\u30A4\u30BA(\u30D1\u30FC\u30BB\u30F3\u30C6\u30FC\u30B8)
 AGGR_ALLOC_OUTSIDE_TLAB_SUM=TLAB\u5916\u306E\u5408\u8A08\u5272\u5F53\u3066
 AGGR_ALLOC_OUTSIDE_TLAB_SUM_DESC=TLAB\u5916\u306E\u5272\u5F53\u3066\u306E\u5408\u8A08\u30B5\u30A4\u30BA
-AGGR_ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE=TLAB\u5916\u306E\u5408\u8A08\u5272\u5F53\u3066(%)
-AGGR_ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC=TLAB\u5916\u306E\u5272\u5F53\u3066\u306E\u5408\u8A08\u30B5\u30A4\u30BA(\u30D1\u30FC\u30BB\u30F3\u30C6\u30FC\u30B8)
 AGGR_SWEEP_METHOD_SUM=\u30B9\u30A4\u30FC\u30D7\u3055\u308C\u305F\u30E1\u30BD\u30C3\u30C9
 AGGR_SWEEP_METHOD_SUM_DESC=\u30B9\u30A4\u30FC\u30D7\u3055\u308C\u305F\u30E1\u30BD\u30C3\u30C9\u306E\u5408\u8A08\u91CF
 AGGR_SWEEP_FLUSHED_SUM=\u30D5\u30E9\u30C3\u30B7\u30E5\u3055\u308C\u305F\u30E1\u30BD\u30C3\u30C9
 AGGR_SWEEP_FLUSHED_SUM_DESC=\u30D5\u30E9\u30C3\u30B7\u30E5\u3055\u308C\u305F\u30E1\u30BD\u30C3\u30C9\u306E\u5408\u8A08\u91CF
 AGGR_SWEEP_ZOMBIFIED_SUM=\u30BE\u30F3\u30D3\u5316\u3055\u308C\u305F\u30E1\u30BD\u30C3\u30C9
 AGGR_SWEEP_ZOMBIFIED_SUM_DESC=\u30BE\u30F3\u30D3\u5316\u3055\u308C\u305F\u30E1\u30BD\u30C3\u30C9\u306E\u5408\u8A08\u91CF
 AGGR_SWEEP_RECLAIMED_SUM=\u56DE\u53CE\u3055\u308C\u305F\u30E1\u30BD\u30C3\u30C9
 AGGR_SWEEP_RECLAIMED_SUM_DESC=\u56DE\u53CE\u3055\u308C\u305F\u30E1\u30BD\u30C3\u30C9\u306E\u5408\u8A08\u91CF
 AGGR_ALLOCATION_TOTAL=\u5272\u5F53\u3066\u5408\u8A08
 AGGR_ALLOCATION_TOTAL_DESC=\u5272\u5F53\u3066\u5408\u8A08\u306E\u898B\u7A4D\u308A\u3002\u3053\u308C\u306F\u6B63\u78BA\u306A\u5024\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002
-AGGR_ALLOCATION_TOTAL_PERCENTAGE=\u5272\u5F53\u3066\u5408\u8A08(%)
-AGGR_ALLOCATION_TOTAL_PERCENTAGE_DESC=\u5272\u5F53\u3066\u5408\u8A08\u306E\u898B\u7A4D\u308A\u3002\u3053\u308C\u306F\u6B63\u78BA\u306A\u5024\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002(\u30D1\u30FC\u30BB\u30F3\u30C6\u30FC\u30B8)
 AGGR_TOTAL_IO_TIME=\u5408\u8A08I/O\u6642\u9593
 AGGR_TOTAL_IO_TIME_DESC=\u30B9\u30EC\u30C3\u30C9\u304CI/O\u306B\u3088\u3063\u3066\u30D3\u30B8\u30FC\u306B\u306A\u308B\u5408\u8A08\u6642\u9593\u306E\u898B\u7A4D\u308A\u3002\u5B9F\u969B\u306E\u5408\u8A08\u306F\u3088\u308A\u9577\u304F\u306A\u308B\u3053\u3068\u304C\u3042\u308A\u307E\u3059\u3002
 AGGR_MAX_IO_TIME=\u6700\u5927I/O\u6642\u9593
 AGGR_MAX_IO_TIME_DESC=\u30B9\u30EC\u30C3\u30C9\u5185\u306E1\u3064\u306EI/O\u30A4\u30D9\u30F3\u30C8\u306E\u6700\u5927\u671F\u9593\u3002
 AGGR_AVG_IO_TIME=\u5E73\u5747I/O\u6642\u9593
diff a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages_zh_CN.properties b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages_zh_CN.properties
--- a/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages_zh_CN.properties
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/resources/org/openjdk/jmc/flightrecorder/jdk/messages/internal/messages_zh_CN.properties
@@ -404,28 +404,22 @@
 AGGR_ALLOC_INSIDE_TLAB_AVG_DESC=TLAB \u5185\u90E8\u5206\u914D\u7684\u4F30\u8BA1\u5E73\u5747\u5927\u5C0F
 AGGR_ALLOC_OUTSIDE_TLAB_AVG=\u5E73\u5747 TLAB \u5916\u90E8\u5206\u914D
 AGGR_ALLOC_OUTSIDE_TLAB_AVG_DESC=TLAB \u5916\u90E8\u5206\u914D\u7684\u5E73\u5747\u5927\u5C0F
 AGGR_ALLOC_INSIDE_TLAB_SUM=\u4F30\u8BA1 TLAB \u5206\u914D
 AGGR_ALLOC_INSIDE_TLAB_SUM_DESC=TLAB \u4E2D\u4F30\u8BA1\u7684\u5206\u914D\u5927\u5C0F
-AGGR_ALLOC_INSIDE_TLAB_SUM_PERCENTAGE=\u4F30\u8BA1 TLAB \u5206\u914D(%)
-AGGR_ALLOC_INSIDE_TLAB_SUM_PERCENTAGE_DESC=TLAB \u4E2D\u4F30\u8BA1\u7684\u5206\u914D\u5927\u5C0F(\u767E\u5206\u6BD4)
 AGGR_ALLOC_OUTSIDE_TLAB_SUM=TLAB \u5916\u90E8\u7684\u603B\u5206\u914D
 AGGR_ALLOC_OUTSIDE_TLAB_SUM_DESC=TLAB \u5916\u90E8\u5206\u914D\u7684\u603B\u5927\u5C0F
-AGGR_ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE=TLAB \u5916\u90E8\u7684\u603B\u5206\u914D(%)
-AGGR_ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC=TLAB \u5916\u90E8\u5206\u914D\u7684\u603B\u5927\u5C0F(\u767E\u5206\u6BD4)
 AGGR_SWEEP_METHOD_SUM=\u5DF2\u6E05\u9664\u65B9\u6CD5
 AGGR_SWEEP_METHOD_SUM_DESC=\u6E05\u9664\u65B9\u6CD5\u7684\u603B\u91CF
 AGGR_SWEEP_FLUSHED_SUM=\u5DF2\u5237\u65B0\u65B9\u6CD5
 AGGR_SWEEP_FLUSHED_SUM_DESC=\u5DF2\u5237\u65B0\u65B9\u6CD5\u7684\u603B\u91CF
 AGGR_SWEEP_ZOMBIFIED_SUM=\u5DF2\u50F5\u6B7B\u65B9\u6CD5
 AGGR_SWEEP_ZOMBIFIED_SUM_DESC=\u5DF2\u50F5\u6B7B\u65B9\u6CD5\u7684\u603B\u91CF
 AGGR_SWEEP_RECLAIMED_SUM=\u5DF2\u56DE\u6536\u65B9\u6CD5
 AGGR_SWEEP_RECLAIMED_SUM_DESC=\u5DF2\u56DE\u6536\u65B9\u6CD5\u7684\u603B\u91CF
 AGGR_ALLOCATION_TOTAL=\u603B\u5206\u914D\u91CF
 AGGR_ALLOCATION_TOTAL_DESC=\u4F30\u8BA1\u7684\u603B\u5206\u914D\u91CF\u3002\u8FD9\u5E76\u975E\u786E\u5207\u503C\u3002
-AGGR_ALLOCATION_TOTAL_PERCENTAGE=\u603B\u5206\u914D\u91CF(%)
-AGGR_ALLOCATION_TOTAL_PERCENTAGE_DESC=\u4F30\u8BA1\u7684\u603B\u5206\u914D\u91CF\u3002\u8FD9\u5E76\u975E\u786E\u5207\u503C\u3002(\u767E\u5206\u6BD4)
 AGGR_TOTAL_IO_TIME=I/O \u603B\u65F6\u95F4
 AGGR_TOTAL_IO_TIME_DESC=\u7EBF\u7A0B\u5FD9\u4E8E I/O \u7684\u4F30\u8BA1\u603B\u65F6\u95F4\u3002\u5B9E\u9645\u603B\u65F6\u95F4\u53EF\u80FD\u66F4\u957F\u3002
 AGGR_MAX_IO_TIME=\u6700\u957F I/O \u65F6\u95F4
 AGGR_MAX_IO_TIME_DESC=\u7EBF\u7A0B\u4E2D\u5355\u4E2A I/O \u4E8B\u4EF6\u7684\u6700\u957F\u6301\u7EED\u65F6\u95F4\u3002
 AGGR_AVG_IO_TIME=\u5E73\u5747 I/O \u65F6\u95F4
