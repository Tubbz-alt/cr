diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemHistogram.java
@@ -128,21 +128,25 @@
 			int style = a.getValueType() instanceof LinearKindOfQuantity ? SWT.RIGHT : SWT.NONE;
 			addColumn(colId, ic -> ic.getAggregate(a), a.getName(), a.getDescription(), style);
 		}
 
 		public void addPercentageColumn(String colId, IAggregator<?, ?> a) {
+			addPercentageColumn(colId, a, a.getName(), a.getDescription());
+		}
+
+		public void addPercentageColumn(String colId, IAggregator<?, ?> a, String name, String description) {
 			int style = a.getValueType() instanceof LinearKindOfQuantity ? SWT.RIGHT : SWT.NONE;
 			addPercentageColumn(colId, (rowItems, allItems) -> {
 				if (a.getValueType() instanceof LinearKindOfQuantity) {
 					IQuantity rowResult = (IQuantity) rowItems.getAggregate(a);
 					IQuantity allResult = (IQuantity) allItems.getAggregate(a);
 					if (rowResult != null && allResult != null) {
 						return UnitLookup.PERCENT.quantity(rowResult.ratioTo(allResult) * 100);
 					}
 				}
 				return rowItems.getAggregate(a);
-			}, a.getName(), a.getDescription(), style);
+			}, name, description, style);
 		}
 
 		public void addColumn(
 			String colId, Function<IItemCollection, ?> valueFunction, String name, String description) {
 			addColumn(colId, valueFunction, name, description, SWT.NONE);
