diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/jdk/JdkAggregators.java
@@ -327,22 +327,14 @@
 			JdkAttributes.ALLOCATION_SIZE);
 	public static final IAggregator<IQuantity, ?> ALLOC_INSIDE_TLAB_SUM = Aggregators.sum(
 			Messages.getString(Messages.AGGR_ALLOC_INSIDE_TLAB_SUM),
 			Messages.getString(Messages.AGGR_ALLOC_INSIDE_TLAB_SUM_DESC), JdkTypeIDs.ALLOC_INSIDE_TLAB,
 			JdkAttributes.TLAB_SIZE);
-	public static final IAggregator<IQuantity, ?> ALLOC_INSIDE_TLAB_SUM_PERCENTAGE = Aggregators.sum(
-			Messages.getString(Messages.AGGR_ALLOC_INSIDE_TLAB_SUM_PERCENTAGE),
-			Messages.getString(Messages.AGGR_ALLOC_INSIDE_TLAB_SUM_PERCENTAGE_DESC), JdkTypeIDs.ALLOC_INSIDE_TLAB,
-			JdkAttributes.TLAB_SIZE);
 	public static final IAggregator<IQuantity, ?> ALLOC_OUTSIDE_TLAB_SUM = Aggregators.sum(
 			Messages.getString(Messages.AGGR_ALLOC_OUTSIDE_TLAB_SUM),
 			Messages.getString(Messages.AGGR_ALLOC_OUTSIDE_TLAB_SUM_DESC), JdkTypeIDs.ALLOC_OUTSIDE_TLAB,
 			JdkAttributes.ALLOCATION_SIZE);
-	public static final IAggregator<IQuantity, ?> ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE = Aggregators.sum(
-			Messages.getString(Messages.AGGR_ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE),
-			Messages.getString(Messages.AGGR_ALLOC_OUTSIDE_TLAB_SUM_PERCENTAGE_DESC), JdkTypeIDs.ALLOC_OUTSIDE_TLAB,
-			JdkAttributes.ALLOCATION_SIZE);
 	public static final IAggregator<IQuantity, ?> SWEEP_METHOD_SUM = Aggregators.sum(
 			Messages.getString(Messages.AGGR_SWEEP_METHOD_SUM), Messages.getString(Messages.AGGR_SWEEP_METHOD_SUM_DESC),
 			JdkTypeIDs.SWEEP_CODE_CACHE, JdkAttributes.SWEEP_METHOD_SWEPT);
 	public static final IAggregator<IQuantity, ?> SWEEP_FLUSHED_SUM = Aggregators.sum(
 			Messages.getString(Messages.AGGR_SWEEP_FLUSHED_SUM),
@@ -364,14 +356,10 @@
 			.count(Messages.getString(Messages.AGGR_ITEM_COUNT), Messages.getString(Messages.AGGR_ITEM_COUNT_DESC));
 
 	public static final IAggregator<IQuantity, ?> ALLOCATION_TOTAL = Aggregators.sum(
 			Messages.getString(Messages.AGGR_ALLOCATION_TOTAL), Messages.getString(Messages.AGGR_ALLOCATION_TOTAL_DESC),
 			UnitLookup.MEMORY, JdkAttributes.TOTAL_ALLOCATION_SIZE);
-	public static final IAggregator<IQuantity, ?> ALLOCATION_TOTAL_PERCENTAGE = Aggregators.sum(
-			Messages.getString(Messages.AGGR_ALLOCATION_TOTAL_PERCENTAGE),
-			Messages.getString(Messages.AGGR_ALLOCATION_TOTAL_PERCENTAGE_DESC), UnitLookup.MEMORY,
-			JdkAttributes.TOTAL_ALLOCATION_SIZE);
 	public static final IAggregator<IQuantity, ?> TOTAL_IO_TIME = Aggregators.filter(
 			Aggregators.sum(Messages.getString(Messages.AGGR_TOTAL_IO_TIME),
 					Messages.getString(Messages.AGGR_TOTAL_IO_TIME_DESC), JfrAttributes.DURATION),
 			JdkFilters.FILE_OR_SOCKET_IO);
 	public static final IAggregator<IQuantity, ?> MAX_IO_TIME = Aggregators.filter(
