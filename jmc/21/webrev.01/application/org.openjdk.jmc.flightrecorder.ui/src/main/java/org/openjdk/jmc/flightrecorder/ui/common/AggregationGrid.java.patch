diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/AggregationGrid.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/AggregationGrid.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/AggregationGrid.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/AggregationGrid.java
@@ -60,15 +60,17 @@
 public class AggregationGrid {
 
 	private static class AggregationModel {
 		final Object[][] cellData;
 		AggregateRow[] aggregateItems;
+		IItemCollection modelItems;
 		int itemsCount;
 
-		AggregationModel(int columnCount, int rowCount) {
-			cellData = new Object[columnCount][];
-			aggregateItems = new AggregateRow[rowCount];
+		AggregationModel(int columnCount, int rowCount, IItemCollection modelItems) {
+			this.cellData = new Object[columnCount][];
+			this.aggregateItems = new AggregateRow[rowCount];
+			this.modelItems = modelItems;
 		}
 
 		void addRow(Object key, List<IItem[]> items, int rowIndex) {
 			AggregateRow ai = new AggregateRow(this, key, items, rowIndex);
 			aggregateItems[rowIndex] = ai;
@@ -76,21 +78,22 @@
 		}
 	}
 
 	public static class AggregateRow {
 		final int index;
-		final IItemCollection items;
+		final IItemCollection rowItems;
 		final Object key;
 		final IQuantity count;
 		final AggregationModel model;
 
 		AggregateRow(AggregationModel model, Object key, List<IItem[]> itemsByType, int rowIndex) {
 			this.model = model;
 			this.key = key;
-			items = buildItemCollection(itemsByType);
-			count = UnitLookup.NUMBER_UNITY.quantity(itemsByType.stream().mapToInt(ia -> ia.length).sum());
-			index = rowIndex;
+
+			this.rowItems = buildItemCollection(itemsByType);
+			this.count = UnitLookup.NUMBER_UNITY.quantity(itemsByType.stream().mapToInt(ia -> ia.length).sum());
+			this.index = rowIndex;
 		}
 
 		@Override
 		public int hashCode() {
 			return Objects.hashCode(key);
@@ -125,11 +128,39 @@
 			}
 			return null;
 		}
 
 		private Object calculateValue(AggregateRow row) {
-			return valueFunction.apply(row.items);
+			return valueFunction.apply(row.rowItems);
+		}
+	}
+
+	private static class PercentageColumn implements IMemberAccessor<Object, Object> {
+
+		private final BiFunction<IItemCollection, IItemCollection, ?> valueFunction;
+		private final int columnIndex;
+
+		PercentageColumn(BiFunction<IItemCollection, IItemCollection, ?> valueFunction, int columnIndex) {
+			this.valueFunction = valueFunction;
+			this.columnIndex = columnIndex;
+		}
+
+		@Override
+		public Object getMember(Object inObject) {
+			if (inObject instanceof AggregateRow) {
+				AggregateRow ai = ((AggregateRow) inObject);
+				if (ai.model.cellData[columnIndex] == null) {
+					ai.model.cellData[columnIndex] = Arrays.stream(ai.model.aggregateItems).parallel()
+							.map(this::calculateValue).toArray();
+				}
+				return ai.model.cellData[columnIndex][((AggregateRow) inObject).index];
+			}
+			return null;
+		}
+
+		private Object calculateValue(AggregateRow row) {
+			return valueFunction.apply(row.rowItems, row.model.modelItems);
 		}
 	}
 
 	private int createdColumns;
 
@@ -140,11 +171,11 @@
 	public static IQuantity getCount(Object row) {
 		return (row instanceof AggregateRow) ? ((AggregateRow) row).count : null;
 	}
 
 	public static IItemCollection getItems(Object row) {
-		return ((AggregateRow) row).items;
+		return ((AggregateRow) row).rowItems;
 	}
 
 	public static double getCountFraction(Object row) {
 		if ((row instanceof AggregateRow)) {
 			AggregateRow ai = ((AggregateRow) row);
@@ -158,10 +189,16 @@
 	// All rows built before the column was added will not have the extra column
 	public IMemberAccessor<?, Object> addColumn(Function<IItemCollection, ?> valueFunction) {
 		return new AggregateColumn(valueFunction, createdColumns++);
 	}
 
+	// All rows built before the column was added will not have the extra column
+	public IMemberAccessor<?, Object> addPercentageColumn(
+		BiFunction<IItemCollection, IItemCollection, ?> valueFunction) {
+		return new PercentageColumn(valueFunction, createdColumns++);
+	}
+
 	private static <T> void addStream(HashMap<T, List<IItem[]>> map, KeyedStream<T, IItem> ks) {
 		map.computeIfAbsent(ks.getKey(), k -> new ArrayList<>()).add(ks.getStream().toArray(IItem[]::new));
 	}
 
 	private static <T, U extends HashMap<T, List<IItem[]>>> U merge(U map1, U map2) {
@@ -201,13 +238,13 @@
 	private static IItemCollection buildItemCollection(List<IItem[]> items) {
 		return ItemCollectionToolkit
 				.build(items.stream().map(ITEMS_BY_TYPE_CONSTRUCTOR).collect(Collectors.toList())::stream);
 	}
 
-	public <T> Object[] buildRows(Stream<IItemIterable> items, IAccessorFactory<T> classifier) {
-		Map<T, List<IItem[]>> itemsMap = mapItems(items, classifier);
-		AggregationModel model = new AggregationModel(createdColumns, itemsMap.size());
+	public <T> Object[] buildRows(IItemCollection items, IAccessorFactory<T> classifier) {
+		Map<T, List<IItem[]>> itemsMap = mapItems(ItemCollectionToolkit.stream(items), classifier);
+		AggregationModel model = new AggregationModel(createdColumns, itemsMap.size(), items);
 		int index = 0;
 		for (Entry<T, List<IItem[]>> e : itemsMap.entrySet()) {
 			model.addRow(e.getKey(), e.getValue(), index++);
 		}
 		return model.aggregateItems;
