diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js
@@ -55,78 +55,89 @@
 const packageConsideredDepth = 3;
 const packageMarkerJava = "java";
 const packageMarkerSun = "sun";
 const packageMarkerComSunAndJdk = "comSunAndJdk";
 const packageMarkerRest = "rest";
-const packagesIdentifierMap = new Map().set("java.", packageMarkerJava).set("sun.", packageMarkerSun).set("com.sun.", 
-		packageMarkerComSunAndJdk).set("jdk.", packageMarkerComSunAndJdk);
-const packageColorMap = new Map().set("", rootPackageColor);
-
-const colorByPackage = function (p) {
+const packagesIdentifierMap = {
+	"java.": packageMarkerJava,
+	"sun.": packageMarkerSun,
+	"com.sun.": packageMarkerComSunAndJdk,
+	"jdk.": packageMarkerComSunAndJdk
+}
+const packageColorMap = {
+	"": rootPackageColor
+}
+
+function colorByPackage (p) {
 	if (p === undefined) {
 		return invalidPackageColor;
 	} else {
 		const packageNameStrip = stripPackageName(p);
-		const packageSelectedColor = packageColorMap.get(packageNameStrip);
+		const packageSelectedColor = packageColorMap[packageNameStrip];
 		if (packageSelectedColor === undefined) {
 			const packageMarkerSelected = getPackageMarker(packageNameStrip);
 			const packageNameStripHash = packageNameStrip.hashCode();
 			switch (packageMarkerSelected) {
 			case packageMarkerJava:
-				packageColorMap.set(packageNameStrip, packageJavaColorLightGray);
+				packageColorMap[packageNameStrip] = packageJavaColorLightGray;
 				break;
 			case packageMarkerComSunAndJdk:
-				packageColorMap.set(packageNameStrip, packageComSunAndJdkColorDarkGray);
+				packageColorMap[packageNameStrip] = packageComSunAndJdkColorDarkGray;
 				break;
 			case packageMarkerSun:
-				packageColorMap.set(packageNameStrip, packageSunDarkColorGray);
+				packageColorMap[packageNameStrip] = packageSunDarkColorGray;
 				break;
 			case packageMarkerRest:
 				const packageRestSelectedColor = createHslColorString(adjustHslPropertyByHash(packageNameStripHash, packageRestValueH, packageRestValueHMax), packageRestSLValues[0], packageRestSLValues[1]);
-				packageColorMap.set(packageNameStrip, packageRestSelectedColor);
+				packageColorMap[packageNameStrip] = packageRestSelectedColor;
 				break;
 			}
-			return packageColorMap.get(packageNameStrip);
+			return packageColorMap[packageNameStrip];
 		} else {
 			return packageSelectedColor;
 		}
 	}
-};
-
-const getPackageMarker = function(p){
-	for(let k of packagesIdentifierMap.keys()){
-		if(p.startsWith(k)){
-			return packagesIdentifierMap.get(k);
-		}
-	}
-	return packageMarkerRest;
-};
-
-const stripPackageName = function (p) {
+}
+
+// string.startsWith() is ECMAScript 6; incompatible with Internet Explorer
+function startsWith (package, identifier) {
+	return package.lastIndexOf(identifier, 0) === 0;
+}
+
+function getPackageMarker (p) {
+    for (var identifier in packagesIdentifierMap) {
+        if (startsWith(p, identifier)) {
+            return packagesIdentifierMap[identifier];
+        }
+    }
+    return packageMarkerRest;
+}
+
+function stripPackageName (p) {
 	const splitString = p.split("\u002E");
 	const number = Math.min(splitString.length, packageConsideredDepth);
 	return splitString.slice(0, number).join("\u002E");
-};
+}
 
-const adjustHslPropertyByHash = function (hash, min, max) {
+function adjustHslPropertyByHash (hash, min, max) {
 	const proposedValue = hash % (max - min) + min;
 	return Math.min(proposedValue, max);
-};
+}
 
-const createHslColorString = function(h,s,l){
+function createHslColorString (h,s,l) {
 	return "hsl\u0028" + h + "\u002c " + s + "\u0025\u002c " + l + "\u0025\u0029";
-};
+}
 
-const colorCell = function (d) {
+function colorCell (d) {
 	return colorByPackage(d.data.p);
-};
+}
 
-const adjustTip = function (d) {
+function adjustTip (d) {
 	var tipMessage = d.data.n + htmlTagBr;
 	if( d.data.d === undefined) {
 		tipMessage +=  "package: " + d.data.p + htmlTagBr;
 	} else {
 		tipMessage += "description: " + d.data.d + htmlTagBr;
 	}
 	tipMessage += "samples: " + d.data.v;
 	return tipMessage;
-};
+}
