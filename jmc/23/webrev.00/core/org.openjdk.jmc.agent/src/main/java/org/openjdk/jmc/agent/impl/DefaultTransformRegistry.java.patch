diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
@@ -70,12 +70,10 @@
 
 	// Maps class name -> Transform Descriptors
 	// First step in update should be to check if we even have transformations for the given class
 	private final HashMap<String, List<TransformDescriptor>> transformData = new HashMap<>();
 
-	// Maps class name -> pre instrumentation version of a class
-	private final HashMap<String, byte[]> preInstrumentedClasses = new HashMap<>();
 	private volatile boolean revertInstrumentation = false;
 
 	@Override
 	public boolean hasPendingTransforms(String className) {
 		List<TransformDescriptor> transforms = transformData.get(className);
@@ -404,20 +402,10 @@
 		List<String> classNames = new ArrayList<>(transformData.keySet());
 		transformData.clear();
 		return classNames;
 	}
 
-	public void storeClassPreInstrumentation(String className, byte[] classPreInstrumentation) {
-		if(!preInstrumentedClasses.containsKey(className)) {
-			preInstrumentedClasses.put(className, classPreInstrumentation.clone());
-		}
-	}
-
-	public byte[] getClassPreInstrumentation(String className) {
-		return preInstrumentedClasses.get(className);
-	}
-
 	public void setRevertInstrumentation(boolean shouldRevert) {
 		this.revertInstrumentation = shouldRevert;
 	}
 
 	public boolean isRevertIntrumentation() {
