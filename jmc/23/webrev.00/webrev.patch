diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
@@ -68,27 +68,10 @@
 	 *
 	 * @return the set of class names that were cleared.
 	 */
 	List<String> clearAllTransformData();
 
-	/**
-	 * Stores the pre instrumentation byte array of a class.
-	 * @param className
-	 *           the class for which to store the pre instrumentation data.
-	 * @param classPreInstrumentation
-	 *           the pre instrumentation byte array of the class to store.
-	 */
-	void storeClassPreInstrumentation(String className, byte[] classPreInstrumentation);
-
-	/**
-	 * Returns a byte array associated with a class pre instrumentation.
-	 * @param className
-	 *           the name of the class to get pre instrumentation data for.
-	 * @return a byte array of a class pre instrumentation.
-	 */
-	byte[] getClassPreInstrumentation(String className);
-
 	/**
 	 * Signify classes are or are not being reverted to their pre instrumentation versions.
 	 * @param shouldRevert
 	 *           true if class instrumentation should be reverted, false otherwise.
 	 */
diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/Transformer.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/Transformer.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/Transformer.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/Transformer.java
@@ -58,16 +58,13 @@
 	@Override
 	public byte[] transform(
 		ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain,
 		byte[] classfileBuffer) throws IllegalClassFormatException {
 		if (!registry.hasPendingTransforms(className)) {
-			return registry.isRevertIntrumentation() ? registry.getClassPreInstrumentation(className) : null;
+			return registry.isRevertIntrumentation() ? classfileBuffer : null;
 		}
-		registry.storeClassPreInstrumentation(className, classfileBuffer);
-		byte[] instrumentedClassfileBuffer = registry.isRevertIntrumentation() ?
-				registry.getClassPreInstrumentation(className) : classfileBuffer;
-		return doTransforms(registry.getTransformData(className), instrumentedClassfileBuffer, loader, protectionDomain);
+		return doTransforms(registry.getTransformData(className), classfileBuffer, loader, protectionDomain);
 	}
 
 	private byte[] doTransforms(
 		List<TransformDescriptor> transformDataList, byte[] classfileBuffer, ClassLoader definingClassLoader,
 		ProtectionDomain protectionDomain) {
diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
@@ -70,12 +70,10 @@
 
 	// Maps class name -> Transform Descriptors
 	// First step in update should be to check if we even have transformations for the given class
 	private final HashMap<String, List<TransformDescriptor>> transformData = new HashMap<>();
 
-	// Maps class name -> pre instrumentation version of a class
-	private final HashMap<String, byte[]> preInstrumentedClasses = new HashMap<>();
 	private volatile boolean revertInstrumentation = false;
 
 	@Override
 	public boolean hasPendingTransforms(String className) {
 		List<TransformDescriptor> transforms = transformData.get(className);
@@ -404,20 +402,10 @@
 		List<String> classNames = new ArrayList<>(transformData.keySet());
 		transformData.clear();
 		return classNames;
 	}
 
-	public void storeClassPreInstrumentation(String className, byte[] classPreInstrumentation) {
-		if(!preInstrumentedClasses.containsKey(className)) {
-			preInstrumentedClasses.put(className, classPreInstrumentation.clone());
-		}
-	}
-
-	public byte[] getClassPreInstrumentation(String className) {
-		return preInstrumentedClasses.get(className);
-	}
-
 	public void setRevertInstrumentation(boolean shouldRevert) {
 		this.revertInstrumentation = shouldRevert;
 	}
 
 	public boolean isRevertIntrumentation() {
