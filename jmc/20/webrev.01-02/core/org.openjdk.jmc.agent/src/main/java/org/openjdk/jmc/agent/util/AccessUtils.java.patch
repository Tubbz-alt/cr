diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/util/AccessUtils.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/util/AccessUtils.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/util/AccessUtils.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/util/AccessUtils.java
@@ -40,11 +40,26 @@
 import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Queue;
 
-public class AccessUtils {
+/**
+ * Helper methods for checking accessibility, implied as modifiers, from various contexts.
+ */
+public final class AccessUtils {
+	private AccessUtils() {
+		throw new UnsupportedOperationException("Toolkit!"); //$NON-NLS-1$
+	}
+
+	/**
+	 * Like Class.getDeclaredField, but also gets fields declared by ancestors and interfaces.
+	 * 
+	 * @param clazz the class to lookup from
+	 * @param name the name of the field
+	 * @return the {@code Field} object for the specified field in this class
+	 * @throws NoSuchFieldException if a field with the specified name is not found.
+	 */
 	public static Field getFieldOnHierarchy(Class<?> clazz, String name) throws NoSuchFieldException {
 		Queue<Class<?>> q = new LinkedList<>();
 		q.add(clazz);
 
 		while (!q.isEmpty()) {
@@ -63,10 +78,18 @@
 		}
 
 		throw new NoSuchFieldException(String.format("cannot find field %s in class %s", name, clazz.getName()));
 	}
 
+	/**
+	 * Checks whether a field can be accessed from a caller context.
+	 * 
+	 * @param targetClass the class being referenced
+	 * @param field the field being accessed
+	 * @param currentClass the caller class
+	 * @return whether the field is accessible from given context
+	 */
 	public static boolean isAccessible(Class<?> targetClass, Field field, Class<?> currentClass) {
 		int modifiers = field.getModifiers();
 
 		Class<?> memberClass = field.getDeclaringClass();
 		if (Modifier.isStatic(modifiers)) {
@@ -74,10 +97,19 @@
 		}
 
 		return verifyMemberAccess(targetClass, memberClass, currentClass, modifiers);
 	}
 
+	/**
+	 * Checks whether the field/method/inner class modifier allows access from a caller context
+	 * 
+	 * @param targetClass the class being referenced
+	 * @param memberClass the class declaring the field/method/inner class
+	 * @param currentClass the caller class
+	 * @param modifiers member access modifiers in bit flags as a integer
+	 * @return
+	 */
 	public static boolean verifyMemberAccess(Class<?> targetClass, Class<?> memberClass, Class<?> currentClass, 
 			int modifiers) {
 		if (currentClass == memberClass) {
 			return true;
 		}
@@ -148,10 +180,19 @@
 		}
 
 		return true;
 	}
 
+	/**
+	 * Check whether the module has the class exported for the caller to access.
+	 * 
+	 * For Pre-9 Java runtime, this function always returns <code>true</code>.
+	 * 
+	 * @param targetClass the class being accessed
+	 * @param callerClass the caller class
+	 * @return whether the class is accessible
+	 */
 	public static boolean verifyModuleAccess(Class<?> targetClass, Class<?> callerClass) {
 		String version = System.getProperty("java.version");
 		if (Integer.parseInt(version.substring(0, version.indexOf("."))) < 9) {
 			return true; // There is no module for pre-java 9
 		}
@@ -178,40 +219,71 @@
 		} catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
 			throw new RuntimeException(e); // this should not happen
 		}
 	}
 
-	// polyfill for Class.getPackageName(Class<?>)
+	/**
+	 * polyfill for <code>Class.getPackageName(Class<?>)</code> for pre-9 Java.
+	 * 
+	 * @param clazz the class to lookup the package name against
+	 * @return the name of the package containing the class
+	 */
 	public static String getPackageName(Class<?> clazz) {
 		return clazz.getPackage().getName();
 		
 	}
 
-	// polyfill for Reflection.getClassAccessFlags(Class<?>)
+	/**
+	 * Polyfill for <code>Reflection.getClassAccessFlags(Class<?>)</code> as 
+	 * <code>jdk.internal.reflect.Reflection</code> is not exported.
+	 * 
+	 * @param c the class being inspected
+	 * @return the access flags written to the class file
+	 */
 	public static int getClassAccessFlags(Class<?> c) {
 		return c.getModifiers();
 	}
 
+	/**
+	 * Check whether the two classes exist in the same package
+	 * 
+	 * @param lhs the first class
+	 * @param rhs the second class
+	 * @return whether the given classes exist in the same package
+	 */
 	public static boolean isSameClassPackage(Class<?> lhs, Class<?> rhs) {
 		if (lhs.getClassLoader() != rhs.getClassLoader())
 			return false;
 		return getPackageName(lhs).equals(getPackageName(rhs));
 	}
 
+	/**
+	 * Check whether a class is a subclass of the other
+	 * 
+	 * @param queryClass the subclass
+	 * @param ofClass the superclass
+	 * @return whether it's a subclass-superclass relationship
+	 */
 	public static boolean isSubclassOf(Class<?> queryClass, Class<?> ofClass) {
 		while (queryClass != null) {
 			if (queryClass == ofClass) {
 				return true;
 			}
 			queryClass = queryClass.getSuperclass();
 		}
 		return false;
 	}
 
-	// Polyfill Class.getNestMembers() for pre-11 runtime.
-	// This function does not fully respect the definition of nesting from JVM's perspective. It's only used for 
-	// validating access. 
+	/**
+	 * Polyfill Class.getNestMembers() for pre-11 runtime. 
+	 * 
+	 * This function does not fully respect the definition of nesting from JVM's perspective. It's only used for 
+	 * validating access.
+	 * 
+	 * @param clazz the class to inspect against
+	 * @return an array of all nest members
+	 */
 	public static Class<?>[] getNestMembers(Class<?> clazz) {
 		List<Class<?>> classes = new ArrayList<>();
 		classes.add(getNestHost(clazz));
 		int i = 0;
 		while (i < classes.size()) {
@@ -220,20 +292,33 @@
 		}
 
 		return classes.toArray(new Class[0]);
 	}
 
-	// Polyfill Class.isNestMateOf() for pre-11 runtime
-	// This function does not fully respect the definition of nesting from JVM's perspective. It's only used for 
-	// validating access.
+	/**
+	 * Polyfill Class.isNestMateOf() for pre-11 runtime.
+	 * 
+	 * This function does not fully respect the definition of nesting from JVM's perspective. It's only used for
+	 * validating access.
+	 * 
+	 * @param lhs the first class
+	 * @param rhs the second class
+	 * @return whether the given classes are nestmates
+	 */
 	public static boolean areNestMates(Class<?> lhs, Class<?> rhs) {
 		return getNestHost(lhs).equals(getNestHost(rhs));
 	}
 
-	// Polyfill Class.getNestHost() for pre-11 runtime
-	// This function does not fully respect the definition of nesting from JVM's perspective. It's only used for 
-	// validating access.
+	/**
+	 * Polyfill Class.getNestHost() for pre-11 runtime.
+	 * 
+	 * This function does not fully respect the definition of nesting from JVM's perspective. It's only used for
+	 * validating access.
+	 * 
+	 * @param clazz the class the inspect against
+	 * @return the nesthost of the class
+	 */
 	public static Class<?> getNestHost(Class<?> clazz) {
 		// array types, primitive types, and void belong to the nests consisting only of theme, and are the nest hosts.
 		if (clazz.isArray()) {
 			return clazz;
 		}
