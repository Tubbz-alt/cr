diff a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/util/TypeUtils.java b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/util/TypeUtils.java
--- a/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/util/TypeUtils.java
+++ b/core/org.openjdk.jmc.agent/src/main/java/org/openjdk/jmc/agent/util/TypeUtils.java
@@ -42,10 +42,12 @@
 
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
 import org.openjdk.jmc.agent.Agent;
+import org.openjdk.jmc.agent.Attribute;
+import org.openjdk.jmc.agent.Parameter;
 import org.openjdk.jmc.agent.jfr.impl.JFRUtils;
 
 /**
  * Helper methods for doing transforms.
  */
@@ -118,17 +120,18 @@
 		}
 		return String.valueOf(o);
 	}
 
 	public static Class<?> defineClass(
-		String eventClassName, byte[] eventClass, int i, int length, ClassLoader definingClassLoader,
-		ProtectionDomain protectionDomain) {
+			String eventClassName, byte[] eventClass, int i, int length, ClassLoader definingClassLoader,
+			ProtectionDomain protectionDomain) {
 		try {
-			return (Class<?>) UNSAFE_DEFINE_CLASS_METHOD.invoke(UNSAFE, eventClassName, eventClass, i, length,
-					definingClassLoader, protectionDomain);
+			return (Class<?>) UNSAFE_DEFINE_CLASS_METHOD
+					.invoke(UNSAFE, eventClassName, eventClass, i, length, definingClassLoader, protectionDomain);
 		} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
-			Agent.getLogger().log(Level.SEVERE, "Failed to dynamically define the class " + eventClassName, e); //$NON-NLS-1$
+			Agent.getLogger()
+					.log(Level.SEVERE, "Failed to dynamically define the class " + eventClassName, e); //$NON-NLS-1$
 		}
 		return null;
 	}
 
 	/**
@@ -225,18 +228,75 @@
 	}
 
 	/**
 	 * Transforms a FQN in internal form, so that it can be used in e.g. formal descriptors.
 	 *
-	 * @param className
-	 *            the fully qualified class name in internal form.
+	 * @param className the fully qualified class name in internal form.
 	 * @return the transformed class name.
 	 */
 	public static String parameterize(String className) {
 		return "L" + className + ";"; //$NON-NLS-1$ //$NON-NLS-2$
 	}
 
+	public static String getInternalName(String className) {
+		return className.replace('.', '/');
+	}
+
+	public static String getCanonicalName(String binaryName) {
+		return binaryName.replace('/', '.');
+	}
+
+	public static int getConstZeroOpcode(Type type) {
+		switch (type.getSort()) {
+		case Type.BOOLEAN:
+		case Type.BYTE:
+		case Type.CHAR:
+		case Type.SHORT:
+		case Type.INT:
+			return Opcodes.ICONST_0;
+		case Type.FLOAT:
+			return Opcodes.FCONST_0;
+		case Type.LONG:
+			return Opcodes.LCONST_0;
+		case Type.DOUBLE:
+			return Opcodes.DCONST_0;
+		case Type.ARRAY:
+		case Type.OBJECT:
+			return Opcodes.ACONST_NULL;
+		case Type.METHOD:
+		case Type.VOID:
+			throw new UnsupportedOperationException();
+		default:
+			throw new AssertionError();
+		}
+	}
+
+	public static Object getFrameVerificationType(Type type) {
+		switch (type.getSort()) {
+		case Type.BOOLEAN:
+		case Type.BYTE:
+		case Type.CHAR:
+		case Type.SHORT:
+		case Type.INT:
+			return Opcodes.INTEGER;
+		case Type.FLOAT:
+			return Opcodes.FLOAT;
+		case Type.LONG:
+			return Opcodes.LONG;
+		case Type.DOUBLE:
+			return Opcodes.DOUBLE;
+		case Type.ARRAY:
+		case Type.OBJECT:
+			return type.getInternalName();
+		case Type.METHOD:
+		case Type.VOID:
+			throw new UnsupportedOperationException();
+		default:
+			throw new AssertionError();
+		}
+	}
+
 	/**
 	 * Type agnostic array toString() which also handles primitive arrays.
 	 */
 	private static String toString(Object o, int length) {
 		int iMax = length - 1;
